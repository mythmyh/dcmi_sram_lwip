
usbotg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  0800cb98  0800cb98  0001cb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d418  0800d418  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800d418  0800d418  0001d418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d420  0800d420  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d420  0800d420  0001d420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d424  0800d424  0001d424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800d428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00004864  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200048f4  200048f4  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025d01  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a4d  00000000  00000000  00045dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  0004a810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f08  00000000  00000000  0004b8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026318  00000000  00000000  0004c7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019633  00000000  00000000  00072ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca3e8  00000000  00000000  0008c103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001564eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c94  00000000  00000000  00156540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cb80 	.word	0x0800cb80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800cb80 	.word	0x0800cb80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b96e 	b.w	8000b70 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	4604      	mov	r4, r0
 80008b4:	468c      	mov	ip, r1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f040 8083 	bne.w	80009c2 <__udivmoddi4+0x116>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4617      	mov	r7, r2
 80008c0:	d947      	bls.n	8000952 <__udivmoddi4+0xa6>
 80008c2:	fab2 f282 	clz	r2, r2
 80008c6:	b142      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c8:	f1c2 0020 	rsb	r0, r2, #32
 80008cc:	fa24 f000 	lsr.w	r0, r4, r0
 80008d0:	4091      	lsls	r1, r2
 80008d2:	4097      	lsls	r7, r2
 80008d4:	ea40 0c01 	orr.w	ip, r0, r1
 80008d8:	4094      	lsls	r4, r2
 80008da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008de:	0c23      	lsrs	r3, r4, #16
 80008e0:	fbbc f6f8 	udiv	r6, ip, r8
 80008e4:	fa1f fe87 	uxth.w	lr, r7
 80008e8:	fb08 c116 	mls	r1, r8, r6, ip
 80008ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f0:	fb06 f10e 	mul.w	r1, r6, lr
 80008f4:	4299      	cmp	r1, r3
 80008f6:	d909      	bls.n	800090c <__udivmoddi4+0x60>
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80008fe:	f080 8119 	bcs.w	8000b34 <__udivmoddi4+0x288>
 8000902:	4299      	cmp	r1, r3
 8000904:	f240 8116 	bls.w	8000b34 <__udivmoddi4+0x288>
 8000908:	3e02      	subs	r6, #2
 800090a:	443b      	add	r3, r7
 800090c:	1a5b      	subs	r3, r3, r1
 800090e:	b2a4      	uxth	r4, r4
 8000910:	fbb3 f0f8 	udiv	r0, r3, r8
 8000914:	fb08 3310 	mls	r3, r8, r0, r3
 8000918:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800091c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000920:	45a6      	cmp	lr, r4
 8000922:	d909      	bls.n	8000938 <__udivmoddi4+0x8c>
 8000924:	193c      	adds	r4, r7, r4
 8000926:	f100 33ff 	add.w	r3, r0, #4294967295
 800092a:	f080 8105 	bcs.w	8000b38 <__udivmoddi4+0x28c>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f240 8102 	bls.w	8000b38 <__udivmoddi4+0x28c>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800093c:	eba4 040e 	sub.w	r4, r4, lr
 8000940:	2600      	movs	r6, #0
 8000942:	b11d      	cbz	r5, 800094c <__udivmoddi4+0xa0>
 8000944:	40d4      	lsrs	r4, r2
 8000946:	2300      	movs	r3, #0
 8000948:	e9c5 4300 	strd	r4, r3, [r5]
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	b902      	cbnz	r2, 8000956 <__udivmoddi4+0xaa>
 8000954:	deff      	udf	#255	; 0xff
 8000956:	fab2 f282 	clz	r2, r2
 800095a:	2a00      	cmp	r2, #0
 800095c:	d150      	bne.n	8000a00 <__udivmoddi4+0x154>
 800095e:	1bcb      	subs	r3, r1, r7
 8000960:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000964:	fa1f f887 	uxth.w	r8, r7
 8000968:	2601      	movs	r6, #1
 800096a:	fbb3 fcfe 	udiv	ip, r3, lr
 800096e:	0c21      	lsrs	r1, r4, #16
 8000970:	fb0e 331c 	mls	r3, lr, ip, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb08 f30c 	mul.w	r3, r8, ip
 800097c:	428b      	cmp	r3, r1
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0xe4>
 8000980:	1879      	adds	r1, r7, r1
 8000982:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0xe2>
 8000988:	428b      	cmp	r3, r1
 800098a:	f200 80e9 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 800098e:	4684      	mov	ip, r0
 8000990:	1ac9      	subs	r1, r1, r3
 8000992:	b2a3      	uxth	r3, r4
 8000994:	fbb1 f0fe 	udiv	r0, r1, lr
 8000998:	fb0e 1110 	mls	r1, lr, r0, r1
 800099c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009a0:	fb08 f800 	mul.w	r8, r8, r0
 80009a4:	45a0      	cmp	r8, r4
 80009a6:	d907      	bls.n	80009b8 <__udivmoddi4+0x10c>
 80009a8:	193c      	adds	r4, r7, r4
 80009aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x10a>
 80009b0:	45a0      	cmp	r8, r4
 80009b2:	f200 80d9 	bhi.w	8000b68 <__udivmoddi4+0x2bc>
 80009b6:	4618      	mov	r0, r3
 80009b8:	eba4 0408 	sub.w	r4, r4, r8
 80009bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009c0:	e7bf      	b.n	8000942 <__udivmoddi4+0x96>
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d909      	bls.n	80009da <__udivmoddi4+0x12e>
 80009c6:	2d00      	cmp	r5, #0
 80009c8:	f000 80b1 	beq.w	8000b2e <__udivmoddi4+0x282>
 80009cc:	2600      	movs	r6, #0
 80009ce:	e9c5 0100 	strd	r0, r1, [r5]
 80009d2:	4630      	mov	r0, r6
 80009d4:	4631      	mov	r1, r6
 80009d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009da:	fab3 f683 	clz	r6, r3
 80009de:	2e00      	cmp	r6, #0
 80009e0:	d14a      	bne.n	8000a78 <__udivmoddi4+0x1cc>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d302      	bcc.n	80009ec <__udivmoddi4+0x140>
 80009e6:	4282      	cmp	r2, r0
 80009e8:	f200 80b8 	bhi.w	8000b5c <__udivmoddi4+0x2b0>
 80009ec:	1a84      	subs	r4, r0, r2
 80009ee:	eb61 0103 	sbc.w	r1, r1, r3
 80009f2:	2001      	movs	r0, #1
 80009f4:	468c      	mov	ip, r1
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d0a8      	beq.n	800094c <__udivmoddi4+0xa0>
 80009fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80009fe:	e7a5      	b.n	800094c <__udivmoddi4+0xa0>
 8000a00:	f1c2 0320 	rsb	r3, r2, #32
 8000a04:	fa20 f603 	lsr.w	r6, r0, r3
 8000a08:	4097      	lsls	r7, r2
 8000a0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a12:	40d9      	lsrs	r1, r3
 8000a14:	4330      	orrs	r0, r6
 8000a16:	0c03      	lsrs	r3, r0, #16
 8000a18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a1c:	fa1f f887 	uxth.w	r8, r7
 8000a20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f108 	mul.w	r1, r6, r8
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a32:	d909      	bls.n	8000a48 <__udivmoddi4+0x19c>
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a3a:	f080 808d 	bcs.w	8000b58 <__udivmoddi4+0x2ac>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 808a 	bls.w	8000b58 <__udivmoddi4+0x2ac>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	443b      	add	r3, r7
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b281      	uxth	r1, r0
 8000a4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a58:	fb00 f308 	mul.w	r3, r0, r8
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d907      	bls.n	8000a70 <__udivmoddi4+0x1c4>
 8000a60:	1879      	adds	r1, r7, r1
 8000a62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a66:	d273      	bcs.n	8000b50 <__udivmoddi4+0x2a4>
 8000a68:	428b      	cmp	r3, r1
 8000a6a:	d971      	bls.n	8000b50 <__udivmoddi4+0x2a4>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	4439      	add	r1, r7
 8000a70:	1acb      	subs	r3, r1, r3
 8000a72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a76:	e778      	b.n	800096a <__udivmoddi4+0xbe>
 8000a78:	f1c6 0c20 	rsb	ip, r6, #32
 8000a7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a84:	431c      	orrs	r4, r3
 8000a86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a96:	431f      	orrs	r7, r3
 8000a98:	0c3b      	lsrs	r3, r7, #16
 8000a9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9e:	fa1f f884 	uxth.w	r8, r4
 8000aa2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aa6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aaa:	fb09 fa08 	mul.w	sl, r9, r8
 8000aae:	458a      	cmp	sl, r1
 8000ab0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ab4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x220>
 8000aba:	1861      	adds	r1, r4, r1
 8000abc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ac0:	d248      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac2:	458a      	cmp	sl, r1
 8000ac4:	d946      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac6:	f1a9 0902 	sub.w	r9, r9, #2
 8000aca:	4421      	add	r1, r4
 8000acc:	eba1 010a 	sub.w	r1, r1, sl
 8000ad0:	b2bf      	uxth	r7, r7
 8000ad2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ada:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ade:	fb00 f808 	mul.w	r8, r0, r8
 8000ae2:	45b8      	cmp	r8, r7
 8000ae4:	d907      	bls.n	8000af6 <__udivmoddi4+0x24a>
 8000ae6:	19e7      	adds	r7, r4, r7
 8000ae8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aec:	d22e      	bcs.n	8000b4c <__udivmoddi4+0x2a0>
 8000aee:	45b8      	cmp	r8, r7
 8000af0:	d92c      	bls.n	8000b4c <__udivmoddi4+0x2a0>
 8000af2:	3802      	subs	r0, #2
 8000af4:	4427      	add	r7, r4
 8000af6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000afa:	eba7 0708 	sub.w	r7, r7, r8
 8000afe:	fba0 8902 	umull	r8, r9, r0, r2
 8000b02:	454f      	cmp	r7, r9
 8000b04:	46c6      	mov	lr, r8
 8000b06:	4649      	mov	r1, r9
 8000b08:	d31a      	bcc.n	8000b40 <__udivmoddi4+0x294>
 8000b0a:	d017      	beq.n	8000b3c <__udivmoddi4+0x290>
 8000b0c:	b15d      	cbz	r5, 8000b26 <__udivmoddi4+0x27a>
 8000b0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b12:	eb67 0701 	sbc.w	r7, r7, r1
 8000b16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b1a:	40f2      	lsrs	r2, r6
 8000b1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b20:	40f7      	lsrs	r7, r6
 8000b22:	e9c5 2700 	strd	r2, r7, [r5]
 8000b26:	2600      	movs	r6, #0
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	462e      	mov	r6, r5
 8000b30:	4628      	mov	r0, r5
 8000b32:	e70b      	b.n	800094c <__udivmoddi4+0xa0>
 8000b34:	4606      	mov	r6, r0
 8000b36:	e6e9      	b.n	800090c <__udivmoddi4+0x60>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	e6fd      	b.n	8000938 <__udivmoddi4+0x8c>
 8000b3c:	4543      	cmp	r3, r8
 8000b3e:	d2e5      	bcs.n	8000b0c <__udivmoddi4+0x260>
 8000b40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b44:	eb69 0104 	sbc.w	r1, r9, r4
 8000b48:	3801      	subs	r0, #1
 8000b4a:	e7df      	b.n	8000b0c <__udivmoddi4+0x260>
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	e7d2      	b.n	8000af6 <__udivmoddi4+0x24a>
 8000b50:	4660      	mov	r0, ip
 8000b52:	e78d      	b.n	8000a70 <__udivmoddi4+0x1c4>
 8000b54:	4681      	mov	r9, r0
 8000b56:	e7b9      	b.n	8000acc <__udivmoddi4+0x220>
 8000b58:	4666      	mov	r6, ip
 8000b5a:	e775      	b.n	8000a48 <__udivmoddi4+0x19c>
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	e74a      	b.n	80009f6 <__udivmoddi4+0x14a>
 8000b60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b64:	4439      	add	r1, r7
 8000b66:	e713      	b.n	8000990 <__udivmoddi4+0xe4>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	443c      	add	r4, r7
 8000b6c:	e724      	b.n	80009b8 <__udivmoddi4+0x10c>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_idiv0>:
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b78:	f000 fa84 	bl	8001084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7c:	f000 f812 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b80:	f000 f8a4 	bl	8000ccc <MX_GPIO_Init>
  MX_FATFS_Init();
 8000b84:	f004 fa8e 	bl	80050a4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000b88:	f00a fc3e 	bl	800b408 <MX_USB_HOST_Init>
  MX_UART4_Init();
 8000b8c:	f000 f874 	bl	8000c78 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  while(APPLICATION_READY!=Appli_state)
 8000b90:	e001      	b.n	8000b96 <main+0x22>
  MX_USB_HOST_Process();
 8000b92:	f00a fc5f 	bl	800b454 <MX_USB_HOST_Process>
  while(APPLICATION_READY!=Appli_state)
 8000b96:	4b02      	ldr	r3, [pc, #8]	; (8000ba0 <main+0x2c>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d1f9      	bne.n	8000b92 <main+0x1e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <main+0x2a>
 8000ba0:	200000e4 	.word	0x200000e4

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b094      	sub	sp, #80	; 0x50
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	2230      	movs	r2, #48	; 0x30
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f00a ffb2 	bl	800bb1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <SystemClock_Config+0xcc>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a27      	ldr	r2, [pc, #156]	; (8000c70 <SystemClock_Config+0xcc>)
 8000bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd8:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <SystemClock_Config+0xcc>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c00:	2301      	movs	r3, #1
 8000c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c14:	2308      	movs	r3, #8
 8000c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c18:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c22:	2307      	movs	r3, #7
 8000c24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f002 faf8 	bl	8003220 <HAL_RCC_OscConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c36:	f000 f89b 	bl	8000d70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	2105      	movs	r1, #5
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 fd59 	bl	8003710 <HAL_RCC_ClockConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c64:	f000 f884 	bl	8000d70 <Error_Handler>
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3750      	adds	r7, #80	; 0x50
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_UART4_Init+0x4c>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <MX_UART4_Init+0x50>)
 8000c80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <MX_UART4_Init+0x4c>)
 8000c84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_UART4_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_UART4_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <MX_UART4_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_UART4_Init+0x4c>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <MX_UART4_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_UART4_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_UART4_Init+0x4c>)
 8000cb0:	f002 ff2a 	bl	8003b08 <HAL_UART_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000cba:	f000 f859 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20002154 	.word	0x20002154
 8000cc8:	40004c00 	.word	0x40004c00

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <MX_GPIO_Init+0x9c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a1f      	ldr	r2, [pc, #124]	; (8000d68 <MX_GPIO_Init+0x9c>)
 8000cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_GPIO_Init+0x9c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_GPIO_Init+0x9c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a18      	ldr	r2, [pc, #96]	; (8000d68 <MX_GPIO_Init+0x9c>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_GPIO_Init+0x9c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <MX_GPIO_Init+0x9c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <MX_GPIO_Init+0x9c>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_GPIO_Init+0x9c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3c:	480b      	ldr	r0, [pc, #44]	; (8000d6c <MX_GPIO_Init+0xa0>)
 8000d3e:	f000 fce5 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_GPIO_Init+0xa0>)
 8000d5c:	f000 fb3a 	bl	80013d4 <HAL_GPIO_Init>

}
 8000d60:	bf00      	nop
 8000d62:	3720      	adds	r7, #32
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020400 	.word	0x40020400

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <Error_Handler+0x8>
	...

08000d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d90:	6453      	str	r3, [r2, #68]	; 0x44
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a19      	ldr	r2, [pc, #100]	; (8000e50 <HAL_UART_MspInit+0x84>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d12b      	bne.n	8000e46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000df8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e26:	2303      	movs	r3, #3
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e36:	2308      	movs	r3, #8
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <HAL_UART_MspInit+0x8c>)
 8000e42:	f000 fac7 	bl	80013d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40004c00 	.word	0x40004c00
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <NMI_Handler+0x4>

08000e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <MemManage_Handler+0x4>

08000e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <BusFault_Handler+0x4>

08000e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <UsageFault_Handler+0x4>

08000e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea8:	f000 f93e 	bl	8001128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <OTG_FS_IRQHandler+0x10>)
 8000eb6:	f000 fead 	bl	8001c14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200045e0 	.word	0x200045e0

08000ec4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	e00a      	b.n	8000eec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ed6:	f3af 8000 	nop.w
 8000eda:	4601      	mov	r1, r0
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	60ba      	str	r2, [r7, #8]
 8000ee2:	b2ca      	uxtb	r2, r1
 8000ee4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	dbf0      	blt.n	8000ed6 <_read+0x12>
	}

return len;
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	e009      	b.n	8000f24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	60ba      	str	r2, [r7, #8]
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f00a f917 	bl	800b14c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dbf1      	blt.n	8000f10 <_write+0x12>
	}
	return len;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_close>:

int _close(int file)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_isatty>:

int _isatty(int file)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
	return 1;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <_sbrk+0x5c>)
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <_sbrk+0x60>)
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <_sbrk+0x64>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <_sbrk+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d207      	bcs.n	8000fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd0:	f00a fd5c 	bl	800ba8c <__errno>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e009      	b.n	8000ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <_sbrk+0x64>)
 8000ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20020000 	.word	0x20020000
 8001000:	00000400 	.word	0x00000400
 8001004:	200000ac 	.word	0x200000ac
 8001008:	200048f8 	.word	0x200048f8

0800100c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001068 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001036:	490e      	ldr	r1, [pc, #56]	; (8001070 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001038:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800104c:	4c0b      	ldr	r4, [pc, #44]	; (800107c <LoopFillZerobss+0x26>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800105a:	f7ff ffd7 	bl	800100c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105e:	f00a fd1b 	bl	800ba98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001062:	f7ff fd87 	bl	8000b74 <main>
  bx  lr    
 8001066:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001068:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001074:	0800d428 	.word	0x0800d428
  ldr r2, =_sbss
 8001078:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800107c:	200048f4 	.word	0x200048f4

08001080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC_IRQHandler>
	...

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <HAL_Init+0x40>)
 800108e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001092:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <HAL_Init+0x40>)
 800109a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800109e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_Init+0x40>)
 80010a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f000 f94f 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b2:	200f      	movs	r0, #15
 80010b4:	f000 f808 	bl	80010c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b8:	f7ff fe60 	bl	8000d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023c00 	.word	0x40023c00

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_InitTick+0x54>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_InitTick+0x58>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f967 	bl	80013ba <HAL_SYSTICK_Config>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00e      	b.n	8001114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b0f      	cmp	r3, #15
 80010fa:	d80a      	bhi.n	8001112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fc:	2200      	movs	r2, #0
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f000 f92f 	bl	8001366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001108:	4a06      	ldr	r2, [pc, #24]	; (8001124 <HAL_InitTick+0x5c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000000 	.word	0x20000000
 8001120:	20000008 	.word	0x20000008
 8001124:	20000004 	.word	0x20000004

08001128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_IncTick+0x20>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_IncTick+0x24>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4413      	add	r3, r2
 8001138:	4a04      	ldr	r2, [pc, #16]	; (800114c <HAL_IncTick+0x24>)
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000008 	.word	0x20000008
 800114c:	20002198 	.word	0x20002198

08001150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return uwTick;
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <HAL_GetTick+0x14>)
 8001156:	681b      	ldr	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20002198 	.word	0x20002198

08001168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001170:	f7ff ffee 	bl	8001150 <HAL_GetTick>
 8001174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001180:	d005      	beq.n	800118e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_Delay+0x44>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800118e:	bf00      	nop
 8001190:	f7ff ffde 	bl	8001150 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	429a      	cmp	r2, r3
 800119e:	d8f7      	bhi.n	8001190 <HAL_Delay+0x28>
  {
  }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000008 	.word	0x20000008

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4907      	ldr	r1, [pc, #28]	; (800124c <__NVIC_EnableIRQ+0x38>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	; (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800131c:	d301      	bcc.n	8001322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131e:	2301      	movs	r3, #1
 8001320:	e00f      	b.n	8001342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <SysTick_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132a:	210f      	movs	r1, #15
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f7ff ff8e 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SysTick_Config+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <SysTick_Config+0x40>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff29 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001378:	f7ff ff3e 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 800137c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	f7ff ff8e 	bl	80012a4 <NVIC_EncodePriority>
 8001388:	4602      	mov	r2, r0
 800138a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff5d 	bl	8001250 <__NVIC_SetPriority>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff31 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ffa2 	bl	800130c <SysTick_Config>
 80013c8:	4603      	mov	r3, r0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	; 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	e16b      	b.n	80016c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013f0:	2201      	movs	r2, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	429a      	cmp	r2, r3
 800140a:	f040 815a 	bne.w	80016c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b01      	cmp	r3, #1
 8001418:	d005      	beq.n	8001426 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001422:	2b02      	cmp	r3, #2
 8001424:	d130      	bne.n	8001488 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	68da      	ldr	r2, [r3, #12]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800145c:	2201      	movs	r2, #1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	f003 0201 	and.w	r2, r3, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b03      	cmp	r3, #3
 8001492:	d017      	beq.n	80014c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d123      	bne.n	8001518 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	08da      	lsrs	r2, r3, #3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3208      	adds	r2, #8
 80014d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	220f      	movs	r2, #15
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	08da      	lsrs	r2, r3, #3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3208      	adds	r2, #8
 8001512:	69b9      	ldr	r1, [r7, #24]
 8001514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0203 	and.w	r2, r3, #3
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 80b4 	beq.w	80016c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b60      	ldr	r3, [pc, #384]	; (80016e0 <HAL_GPIO_Init+0x30c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	4a5f      	ldr	r2, [pc, #380]	; (80016e0 <HAL_GPIO_Init+0x30c>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001568:	6453      	str	r3, [r2, #68]	; 0x44
 800156a:	4b5d      	ldr	r3, [pc, #372]	; (80016e0 <HAL_GPIO_Init+0x30c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001576:	4a5b      	ldr	r2, [pc, #364]	; (80016e4 <HAL_GPIO_Init+0x310>)
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3302      	adds	r3, #2
 800157e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	220f      	movs	r2, #15
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a52      	ldr	r2, [pc, #328]	; (80016e8 <HAL_GPIO_Init+0x314>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d02b      	beq.n	80015fa <HAL_GPIO_Init+0x226>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a51      	ldr	r2, [pc, #324]	; (80016ec <HAL_GPIO_Init+0x318>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d025      	beq.n	80015f6 <HAL_GPIO_Init+0x222>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a50      	ldr	r2, [pc, #320]	; (80016f0 <HAL_GPIO_Init+0x31c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d01f      	beq.n	80015f2 <HAL_GPIO_Init+0x21e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4f      	ldr	r2, [pc, #316]	; (80016f4 <HAL_GPIO_Init+0x320>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d019      	beq.n	80015ee <HAL_GPIO_Init+0x21a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4e      	ldr	r2, [pc, #312]	; (80016f8 <HAL_GPIO_Init+0x324>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0x216>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4d      	ldr	r2, [pc, #308]	; (80016fc <HAL_GPIO_Init+0x328>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d00d      	beq.n	80015e6 <HAL_GPIO_Init+0x212>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4c      	ldr	r2, [pc, #304]	; (8001700 <HAL_GPIO_Init+0x32c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d007      	beq.n	80015e2 <HAL_GPIO_Init+0x20e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4b      	ldr	r2, [pc, #300]	; (8001704 <HAL_GPIO_Init+0x330>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_GPIO_Init+0x20a>
 80015da:	2307      	movs	r3, #7
 80015dc:	e00e      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015de:	2308      	movs	r3, #8
 80015e0:	e00c      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015e2:	2306      	movs	r3, #6
 80015e4:	e00a      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015e6:	2305      	movs	r3, #5
 80015e8:	e008      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015ea:	2304      	movs	r3, #4
 80015ec:	e006      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015ee:	2303      	movs	r3, #3
 80015f0:	e004      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015fa:	2300      	movs	r3, #0
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	f002 0203 	and.w	r2, r2, #3
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	4093      	lsls	r3, r2
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800160c:	4935      	ldr	r1, [pc, #212]	; (80016e4 <HAL_GPIO_Init+0x310>)
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3302      	adds	r3, #2
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800161a:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_GPIO_Init+0x334>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800163e:	4a32      	ldr	r2, [pc, #200]	; (8001708 <HAL_GPIO_Init+0x334>)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001644:	4b30      	ldr	r3, [pc, #192]	; (8001708 <HAL_GPIO_Init+0x334>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001668:	4a27      	ldr	r2, [pc, #156]	; (8001708 <HAL_GPIO_Init+0x334>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <HAL_GPIO_Init+0x334>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001692:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <HAL_GPIO_Init+0x334>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_GPIO_Init+0x334>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <HAL_GPIO_Init+0x334>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3301      	adds	r3, #1
 80016c6:	61fb      	str	r3, [r7, #28]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	2b0f      	cmp	r3, #15
 80016cc:	f67f ae90 	bls.w	80013f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40013800 	.word	0x40013800
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40020400 	.word	0x40020400
 80016f0:	40020800 	.word	0x40020800
 80016f4:	40020c00 	.word	0x40020c00
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40021400 	.word	0x40021400
 8001700:	40021800 	.word	0x40021800
 8001704:	40021c00 	.word	0x40021c00
 8001708:	40013c00 	.word	0x40013c00

0800170c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]
 8001718:	4613      	mov	r3, r2
 800171a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800171c:	787b      	ldrb	r3, [r7, #1]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001722:	887a      	ldrh	r2, [r7, #2]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001728:	e003      	b.n	8001732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	041a      	lsls	r2, r3, #16
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	619a      	str	r2, [r3, #24]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800173e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001740:	b08f      	sub	sp, #60	; 0x3c
 8001742:	af0a      	add	r7, sp, #40	; 0x28
 8001744:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e054      	b.n	80017fa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d106      	bne.n	8001770 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f009 feb4 	bl	800b4d8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2203      	movs	r2, #3
 8001774:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f002 fd42 	bl	8004218 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	687e      	ldr	r6, [r7, #4]
 800179c:	466d      	mov	r5, sp
 800179e:	f106 0410 	add.w	r4, r6, #16
 80017a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80017b2:	1d33      	adds	r3, r6, #4
 80017b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b6:	6838      	ldr	r0, [r7, #0]
 80017b8:	f002 fcbc 	bl	8004134 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2101      	movs	r1, #1
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 fd39 	bl	800423a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	687e      	ldr	r6, [r7, #4]
 80017d0:	466d      	mov	r5, sp
 80017d2:	f106 0410 	add.w	r4, r6, #16
 80017d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80017e6:	1d33      	adds	r3, r6, #4
 80017e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ea:	6838      	ldr	r0, [r7, #0]
 80017ec:	f002 fea0 	bl	8004530 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001802 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001802:	b590      	push	{r4, r7, lr}
 8001804:	b089      	sub	sp, #36	; 0x24
 8001806:	af04      	add	r7, sp, #16
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	4608      	mov	r0, r1
 800180c:	4611      	mov	r1, r2
 800180e:	461a      	mov	r2, r3
 8001810:	4603      	mov	r3, r0
 8001812:	70fb      	strb	r3, [r7, #3]
 8001814:	460b      	mov	r3, r1
 8001816:	70bb      	strb	r3, [r7, #2]
 8001818:	4613      	mov	r3, r2
 800181a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_HCD_HC_Init+0x28>
 8001826:	2302      	movs	r3, #2
 8001828:	e076      	b.n	8001918 <HAL_HCD_HC_Init+0x116>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001832:	78fb      	ldrb	r3, [r7, #3]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	212c      	movs	r1, #44	; 0x2c
 8001838:	fb01 f303 	mul.w	r3, r1, r3
 800183c:	4413      	add	r3, r2
 800183e:	333d      	adds	r3, #61	; 0x3d
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	212c      	movs	r1, #44	; 0x2c
 800184a:	fb01 f303 	mul.w	r3, r1, r3
 800184e:	4413      	add	r3, r2
 8001850:	3338      	adds	r3, #56	; 0x38
 8001852:	787a      	ldrb	r2, [r7, #1]
 8001854:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	212c      	movs	r1, #44	; 0x2c
 800185c:	fb01 f303 	mul.w	r3, r1, r3
 8001860:	4413      	add	r3, r2
 8001862:	3340      	adds	r3, #64	; 0x40
 8001864:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001866:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	212c      	movs	r1, #44	; 0x2c
 800186e:	fb01 f303 	mul.w	r3, r1, r3
 8001872:	4413      	add	r3, r2
 8001874:	3339      	adds	r3, #57	; 0x39
 8001876:	78fa      	ldrb	r2, [r7, #3]
 8001878:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	212c      	movs	r1, #44	; 0x2c
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	4413      	add	r3, r2
 8001886:	333f      	adds	r3, #63	; 0x3f
 8001888:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800188c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	78ba      	ldrb	r2, [r7, #2]
 8001892:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001896:	b2d0      	uxtb	r0, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	212c      	movs	r1, #44	; 0x2c
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	4413      	add	r3, r2
 80018a2:	333a      	adds	r3, #58	; 0x3a
 80018a4:	4602      	mov	r2, r0
 80018a6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80018a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	da09      	bge.n	80018c4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	212c      	movs	r1, #44	; 0x2c
 80018b6:	fb01 f303 	mul.w	r3, r1, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	333b      	adds	r3, #59	; 0x3b
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
 80018c2:	e008      	b.n	80018d6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	212c      	movs	r1, #44	; 0x2c
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	333b      	adds	r3, #59	; 0x3b
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	212c      	movs	r1, #44	; 0x2c
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	333c      	adds	r3, #60	; 0x3c
 80018e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018e8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	787c      	ldrb	r4, [r7, #1]
 80018f0:	78ba      	ldrb	r2, [r7, #2]
 80018f2:	78f9      	ldrb	r1, [r7, #3]
 80018f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018f6:	9302      	str	r3, [sp, #8]
 80018f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	4623      	mov	r3, r4
 8001906:	f002 ff8d 	bl	8004824 <USB_HC_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001916:	7bfb      	ldrb	r3, [r7, #15]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	bd90      	pop	{r4, r7, pc}

08001920 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001936:	2b01      	cmp	r3, #1
 8001938:	d101      	bne.n	800193e <HAL_HCD_HC_Halt+0x1e>
 800193a:	2302      	movs	r3, #2
 800193c:	e00f      	b.n	800195e <HAL_HCD_HC_Halt+0x3e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	78fa      	ldrb	r2, [r7, #3]
 800194c:	4611      	mov	r1, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f003 f9c9 	bl	8004ce6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4603      	mov	r3, r0
 8001978:	70fb      	strb	r3, [r7, #3]
 800197a:	460b      	mov	r3, r1
 800197c:	70bb      	strb	r3, [r7, #2]
 800197e:	4613      	mov	r3, r2
 8001980:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	212c      	movs	r1, #44	; 0x2c
 8001988:	fb01 f303 	mul.w	r3, r1, r3
 800198c:	4413      	add	r3, r2
 800198e:	333b      	adds	r3, #59	; 0x3b
 8001990:	78ba      	ldrb	r2, [r7, #2]
 8001992:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	212c      	movs	r1, #44	; 0x2c
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	4413      	add	r3, r2
 80019a0:	333f      	adds	r3, #63	; 0x3f
 80019a2:	787a      	ldrb	r2, [r7, #1]
 80019a4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80019a6:	7c3b      	ldrb	r3, [r7, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d112      	bne.n	80019d2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	212c      	movs	r1, #44	; 0x2c
 80019b2:	fb01 f303 	mul.w	r3, r1, r3
 80019b6:	4413      	add	r3, r2
 80019b8:	3342      	adds	r3, #66	; 0x42
 80019ba:	2203      	movs	r2, #3
 80019bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	212c      	movs	r1, #44	; 0x2c
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	333d      	adds	r3, #61	; 0x3d
 80019cc:	7f3a      	ldrb	r2, [r7, #28]
 80019ce:	701a      	strb	r2, [r3, #0]
 80019d0:	e008      	b.n	80019e4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	212c      	movs	r1, #44	; 0x2c
 80019d8:	fb01 f303 	mul.w	r3, r1, r3
 80019dc:	4413      	add	r3, r2
 80019de:	3342      	adds	r3, #66	; 0x42
 80019e0:	2202      	movs	r2, #2
 80019e2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019e4:	787b      	ldrb	r3, [r7, #1]
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	f200 80c6 	bhi.w	8001b78 <HAL_HCD_HC_SubmitRequest+0x210>
 80019ec:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80019ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f2:	bf00      	nop
 80019f4:	08001a05 	.word	0x08001a05
 80019f8:	08001b65 	.word	0x08001b65
 80019fc:	08001a69 	.word	0x08001a69
 8001a00:	08001ae7 	.word	0x08001ae7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a04:	7c3b      	ldrb	r3, [r7, #16]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	f040 80b8 	bne.w	8001b7c <HAL_HCD_HC_SubmitRequest+0x214>
 8001a0c:	78bb      	ldrb	r3, [r7, #2]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f040 80b4 	bne.w	8001b7c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001a14:	8b3b      	ldrh	r3, [r7, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d108      	bne.n	8001a2c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	212c      	movs	r1, #44	; 0x2c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	3355      	adds	r3, #85	; 0x55
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	212c      	movs	r1, #44	; 0x2c
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	3355      	adds	r3, #85	; 0x55
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d109      	bne.n	8001a54 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	212c      	movs	r1, #44	; 0x2c
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3342      	adds	r3, #66	; 0x42
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a52:	e093      	b.n	8001b7c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	212c      	movs	r1, #44	; 0x2c
 8001a5a:	fb01 f303 	mul.w	r3, r1, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	3342      	adds	r3, #66	; 0x42
 8001a62:	2202      	movs	r2, #2
 8001a64:	701a      	strb	r2, [r3, #0]
      break;
 8001a66:	e089      	b.n	8001b7c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a68:	78bb      	ldrb	r3, [r7, #2]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d11d      	bne.n	8001aaa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	212c      	movs	r1, #44	; 0x2c
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	3355      	adds	r3, #85	; 0x55
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	212c      	movs	r1, #44	; 0x2c
 8001a88:	fb01 f303 	mul.w	r3, r1, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3342      	adds	r3, #66	; 0x42
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a94:	e073      	b.n	8001b7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	212c      	movs	r1, #44	; 0x2c
 8001a9c:	fb01 f303 	mul.w	r3, r1, r3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3342      	adds	r3, #66	; 0x42
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	701a      	strb	r2, [r3, #0]
      break;
 8001aa8:	e069      	b.n	8001b7e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	212c      	movs	r1, #44	; 0x2c
 8001ab0:	fb01 f303 	mul.w	r3, r1, r3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3354      	adds	r3, #84	; 0x54
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	212c      	movs	r1, #44	; 0x2c
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	3342      	adds	r3, #66	; 0x42
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
      break;
 8001ad0:	e055      	b.n	8001b7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	212c      	movs	r1, #44	; 0x2c
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	3342      	adds	r3, #66	; 0x42
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	701a      	strb	r2, [r3, #0]
      break;
 8001ae4:	e04b      	b.n	8001b7e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ae6:	78bb      	ldrb	r3, [r7, #2]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d11d      	bne.n	8001b28 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	212c      	movs	r1, #44	; 0x2c
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	3355      	adds	r3, #85	; 0x55
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	212c      	movs	r1, #44	; 0x2c
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3342      	adds	r3, #66	; 0x42
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b12:	e034      	b.n	8001b7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	212c      	movs	r1, #44	; 0x2c
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	3342      	adds	r3, #66	; 0x42
 8001b22:	2202      	movs	r2, #2
 8001b24:	701a      	strb	r2, [r3, #0]
      break;
 8001b26:	e02a      	b.n	8001b7e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	212c      	movs	r1, #44	; 0x2c
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	3354      	adds	r3, #84	; 0x54
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d109      	bne.n	8001b50 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	212c      	movs	r1, #44	; 0x2c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	3342      	adds	r3, #66	; 0x42
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
      break;
 8001b4e:	e016      	b.n	8001b7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	212c      	movs	r1, #44	; 0x2c
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3342      	adds	r3, #66	; 0x42
 8001b5e:	2202      	movs	r2, #2
 8001b60:	701a      	strb	r2, [r3, #0]
      break;
 8001b62:	e00c      	b.n	8001b7e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	212c      	movs	r1, #44	; 0x2c
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	3342      	adds	r3, #66	; 0x42
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
      break;
 8001b76:	e002      	b.n	8001b7e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001b78:	bf00      	nop
 8001b7a:	e000      	b.n	8001b7e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001b7c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	212c      	movs	r1, #44	; 0x2c
 8001b84:	fb01 f303 	mul.w	r3, r1, r3
 8001b88:	4413      	add	r3, r2
 8001b8a:	3344      	adds	r3, #68	; 0x44
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	8b3a      	ldrh	r2, [r7, #24]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	202c      	movs	r0, #44	; 0x2c
 8001b98:	fb00 f303 	mul.w	r3, r0, r3
 8001b9c:	440b      	add	r3, r1
 8001b9e:	334c      	adds	r3, #76	; 0x4c
 8001ba0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	212c      	movs	r1, #44	; 0x2c
 8001ba8:	fb01 f303 	mul.w	r3, r1, r3
 8001bac:	4413      	add	r3, r2
 8001bae:	3360      	adds	r3, #96	; 0x60
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	212c      	movs	r1, #44	; 0x2c
 8001bba:	fb01 f303 	mul.w	r3, r1, r3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3350      	adds	r3, #80	; 0x50
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	212c      	movs	r1, #44	; 0x2c
 8001bcc:	fb01 f303 	mul.w	r3, r1, r3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3339      	adds	r3, #57	; 0x39
 8001bd4:	78fa      	ldrb	r2, [r7, #3]
 8001bd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	212c      	movs	r1, #44	; 0x2c
 8001bde:	fb01 f303 	mul.w	r3, r1, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	3361      	adds	r3, #97	; 0x61
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	222c      	movs	r2, #44	; 0x2c
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	3338      	adds	r3, #56	; 0x38
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	18d1      	adds	r1, r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	f002 ff1c 	bl	8004a40 <USB_HC_StartXfer>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop

08001c14 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 fc3f 	bl	80044ae <USB_GetMode>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	f040 80f6 	bne.w	8001e24 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 fc23 	bl	8004488 <USB_ReadInterrupts>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 80ec 	beq.w	8001e22 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 fc1a 	bl	8004488 <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c5e:	d104      	bne.n	8001c6a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f002 fc0a 	bl	8004488 <USB_ReadInterrupts>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c7e:	d104      	bne.n	8001c8a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 fbfa 	bl	8004488 <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c9e:	d104      	bne.n	8001caa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ca8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 fbea 	bl	8004488 <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d103      	bne.n	8001cc6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f002 fbdc 	bl	8004488 <USB_ReadInterrupts>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cda:	d11c      	bne.n	8001d16 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ce4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10f      	bne.n	8001d16 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001cf6:	2110      	movs	r1, #16
 8001cf8:	6938      	ldr	r0, [r7, #16]
 8001cfa:	f002 faeb 	bl	80042d4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001cfe:	6938      	ldr	r0, [r7, #16]
 8001d00:	f002 fb0c 	bl	800431c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2101      	movs	r1, #1
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f002 fcc4 	bl	8004698 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f009 fc5f 	bl	800b5d4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f002 fbb4 	bl	8004488 <USB_ReadInterrupts>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d2a:	d102      	bne.n	8001d32 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f001 fa03 	bl	8003138 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 fba6 	bl	8004488 <USB_ReadInterrupts>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d106      	bne.n	8001d54 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f009 fc28 	bl	800b59c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2208      	movs	r2, #8
 8001d52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 fb95 	bl	8004488 <USB_ReadInterrupts>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	2b10      	cmp	r3, #16
 8001d66:	d101      	bne.n	8001d6c <HAL_HCD_IRQHandler+0x158>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <HAL_HCD_IRQHandler+0x15a>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d012      	beq.n	8001d98 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	699a      	ldr	r2, [r3, #24]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0210 	bic.w	r2, r2, #16
 8001d80:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f001 f906 	bl	8002f94 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0210 	orr.w	r2, r2, #16
 8001d96:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f002 fb73 	bl	8004488 <USB_ReadInterrupts>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dac:	d13a      	bne.n	8001e24 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f002 ff86 	bl	8004cc4 <USB_HC_ReadInterrupt>
 8001db8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	e025      	b.n	8001e0c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d018      	beq.n	8001e06 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	015a      	lsls	r2, r3, #5
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dea:	d106      	bne.n	8001dfa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	4619      	mov	r1, r3
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f8ab 	bl	8001f4e <HCD_HC_IN_IRQHandler>
 8001df8:	e005      	b.n	8001e06 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 fcc6 	bl	8002792 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d3d4      	bcc.n	8001dc0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e1e:	615a      	str	r2, [r3, #20]
 8001e20:	e000      	b.n	8001e24 <HAL_HCD_IRQHandler+0x210>
      return;
 8001e22:	bf00      	nop
    }
  }
}
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_HCD_Start+0x16>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e013      	b.n	8001e68 <HAL_HCD_Start+0x3e>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f002 fc86 	bl	8004760 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f002 f9cc 	bl	80041f6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_HCD_Stop+0x16>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e00d      	b.n	8001ea2 <HAL_HCD_Stop+0x32>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 f880 	bl	8004f98 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f002 fc28 	bl	800470c <USB_ResetPort>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	212c      	movs	r1, #44	; 0x2c
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	3360      	adds	r3, #96	; 0x60
 8001ee0:	781b      	ldrb	r3, [r3, #0]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	3350      	adds	r3, #80	; 0x50
 8001f08:	681b      	ldr	r3, [r3, #0]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f002 fc6c 	bl	8004800 <USB_GetCurrentFrame>
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f002 fc47 	bl	80047d2 <USB_GetHostSpeed>
 8001f44:	4603      	mov	r3, r0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d119      	bne.n	8001fb2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	0151      	lsls	r1, r2, #5
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	440a      	add	r2, r1
 8001fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001faa:	f043 0302 	orr.w	r3, r3, #2
 8001fae:	60d3      	str	r3, [r2, #12]
 8001fb0:	e101      	b.n	80021b6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc8:	d12b      	bne.n	8002022 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fdc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	212c      	movs	r1, #44	; 0x2c
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3361      	adds	r3, #97	; 0x61
 8001fec:	2207      	movs	r2, #7
 8001fee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	0151      	lsls	r1, r2, #5
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	440a      	add	r2, r1
 8002006:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800200a:	f043 0302 	orr.w	r3, r3, #2
 800200e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f002 fe63 	bl	8004ce6 <USB_HC_Halt>
 8002020:	e0c9      	b.n	80021b6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	2b20      	cmp	r3, #32
 8002036:	d109      	bne.n	800204c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4413      	add	r3, r2
 8002040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002044:	461a      	mov	r2, r3
 8002046:	2320      	movs	r3, #32
 8002048:	6093      	str	r3, [r2, #8]
 800204a:	e0b4      	b.n	80021b6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4413      	add	r3, r2
 8002054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b08      	cmp	r3, #8
 8002060:	d133      	bne.n	80020ca <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	0151      	lsls	r1, r2, #5
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	440a      	add	r2, r1
 8002078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	3361      	adds	r3, #97	; 0x61
 8002090:	2205      	movs	r2, #5
 8002092:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4413      	add	r3, r2
 800209c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a0:	461a      	mov	r2, r3
 80020a2:	2310      	movs	r3, #16
 80020a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b2:	461a      	mov	r2, r3
 80020b4:	2308      	movs	r3, #8
 80020b6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f002 fe0f 	bl	8004ce6 <USB_HC_Halt>
 80020c8:	e075      	b.n	80021b6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e0:	d134      	bne.n	800214c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	0151      	lsls	r1, r2, #5
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	440a      	add	r2, r1
 80020f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	212c      	movs	r1, #44	; 0x2c
 8002108:	fb01 f303 	mul.w	r3, r1, r3
 800210c:	4413      	add	r3, r2
 800210e:	3361      	adds	r3, #97	; 0x61
 8002110:	2208      	movs	r2, #8
 8002112:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4413      	add	r3, r2
 800211c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002120:	461a      	mov	r2, r3
 8002122:	2310      	movs	r3, #16
 8002124:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	461a      	mov	r2, r3
 8002134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002138:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f002 fdce 	bl	8004ce6 <USB_HC_Halt>
 800214a:	e034      	b.n	80021b6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4413      	add	r3, r2
 8002154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215e:	2b80      	cmp	r3, #128	; 0x80
 8002160:	d129      	bne.n	80021b6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	0151      	lsls	r1, r2, #5
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	440a      	add	r2, r1
 8002178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	212c      	movs	r1, #44	; 0x2c
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	4413      	add	r3, r2
 800218e:	3361      	adds	r3, #97	; 0x61
 8002190:	2206      	movs	r2, #6
 8002192:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f002 fda1 	bl	8004ce6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b0:	461a      	mov	r2, r3
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021cc:	d122      	bne.n	8002214 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	0151      	lsls	r1, r2, #5
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	440a      	add	r2, r1
 80021e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f002 fd74 	bl	8004ce6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	461a      	mov	r2, r3
 800220c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002210:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002212:	e2ba      	b.n	800278a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4413      	add	r3, r2
 800221c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b01      	cmp	r3, #1
 8002228:	f040 811b 	bne.w	8002462 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d019      	beq.n	8002268 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	3348      	adds	r3, #72	; 0x48
 8002242:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	0159      	lsls	r1, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	440b      	add	r3, r1
 800224c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002256:	1ad2      	subs	r2, r2, r3
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	202c      	movs	r0, #44	; 0x2c
 800225e:	fb00 f303 	mul.w	r3, r0, r3
 8002262:	440b      	add	r3, r1
 8002264:	3350      	adds	r3, #80	; 0x50
 8002266:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	212c      	movs	r1, #44	; 0x2c
 800226e:	fb01 f303 	mul.w	r3, r1, r3
 8002272:	4413      	add	r3, r2
 8002274:	3361      	adds	r3, #97	; 0x61
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	335c      	adds	r3, #92	; 0x5c
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002298:	461a      	mov	r2, r3
 800229a:	2301      	movs	r3, #1
 800229c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	333f      	adds	r3, #63	; 0x3f
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	333f      	adds	r3, #63	; 0x3f
 80022c0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d121      	bne.n	800230a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	0151      	lsls	r1, r2, #5
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	440a      	add	r2, r1
 80022dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f002 fcf8 	bl	8004ce6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	461a      	mov	r2, r3
 8002304:	2310      	movs	r3, #16
 8002306:	6093      	str	r3, [r2, #8]
 8002308:	e066      	b.n	80023d8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	333f      	adds	r3, #63	; 0x3f
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d127      	bne.n	800236e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4413      	add	r3, r2
 8002326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	0151      	lsls	r1, r2, #5
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	440a      	add	r2, r1
 8002334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002338:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800233c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	212c      	movs	r1, #44	; 0x2c
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4413      	add	r3, r2
 800234a:	3360      	adds	r3, #96	; 0x60
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	b2d9      	uxtb	r1, r3
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	202c      	movs	r0, #44	; 0x2c
 800235a:	fb00 f303 	mul.w	r3, r0, r3
 800235e:	4413      	add	r3, r2
 8002360:	3360      	adds	r3, #96	; 0x60
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f009 f942 	bl	800b5f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800236c:	e034      	b.n	80023d8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	333f      	adds	r3, #63	; 0x3f
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d12a      	bne.n	80023d8 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	3360      	adds	r3, #96	; 0x60
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3354      	adds	r3, #84	; 0x54
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	f083 0301 	eor.w	r3, r3, #1
 80023a8:	b2d8      	uxtb	r0, r3
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	3354      	adds	r3, #84	; 0x54
 80023b8:	4602      	mov	r2, r0
 80023ba:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	b2d9      	uxtb	r1, r3
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	202c      	movs	r0, #44	; 0x2c
 80023c6:	fb00 f303 	mul.w	r3, r0, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	3360      	adds	r3, #96	; 0x60
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f009 f90c 	bl	800b5f0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d12b      	bne.n	8002438 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	212c      	movs	r1, #44	; 0x2c
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	3348      	adds	r3, #72	; 0x48
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	202c      	movs	r0, #44	; 0x2c
 80023f6:	fb00 f202 	mul.w	r2, r0, r2
 80023fa:	440a      	add	r2, r1
 80023fc:	3240      	adds	r2, #64	; 0x40
 80023fe:	8812      	ldrh	r2, [r2, #0]
 8002400:	fbb3 f3f2 	udiv	r3, r3, r2
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 81be 	beq.w	800278a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	3354      	adds	r3, #84	; 0x54
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	f083 0301 	eor.w	r3, r3, #1
 8002422:	b2d8      	uxtb	r0, r3
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3354      	adds	r3, #84	; 0x54
 8002432:	4602      	mov	r2, r0
 8002434:	701a      	strb	r2, [r3, #0]
}
 8002436:	e1a8      	b.n	800278a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	212c      	movs	r1, #44	; 0x2c
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	3354      	adds	r3, #84	; 0x54
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	f083 0301 	eor.w	r3, r3, #1
 800244c:	b2d8      	uxtb	r0, r3
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	3354      	adds	r3, #84	; 0x54
 800245c:	4602      	mov	r2, r0
 800245e:	701a      	strb	r2, [r3, #0]
}
 8002460:	e193      	b.n	800278a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b02      	cmp	r3, #2
 8002476:	f040 8106 	bne.w	8002686 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	015a      	lsls	r2, r3, #5
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4413      	add	r3, r2
 8002482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	0151      	lsls	r1, r2, #5
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	440a      	add	r2, r1
 8002490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002494:	f023 0302 	bic.w	r3, r3, #2
 8002498:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	3361      	adds	r3, #97	; 0x61
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d109      	bne.n	80024c2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	3360      	adds	r3, #96	; 0x60
 80024bc:	2201      	movs	r2, #1
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e0c9      	b.n	8002656 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	212c      	movs	r1, #44	; 0x2c
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	3361      	adds	r3, #97	; 0x61
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b05      	cmp	r3, #5
 80024d4:	d109      	bne.n	80024ea <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	3360      	adds	r3, #96	; 0x60
 80024e4:	2205      	movs	r2, #5
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	e0b5      	b.n	8002656 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	3361      	adds	r3, #97	; 0x61
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d009      	beq.n	8002512 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	212c      	movs	r1, #44	; 0x2c
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	4413      	add	r3, r2
 800250a:	3361      	adds	r3, #97	; 0x61
 800250c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800250e:	2b08      	cmp	r3, #8
 8002510:	d150      	bne.n	80025b4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	335c      	adds	r3, #92	; 0x5c
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	202c      	movs	r0, #44	; 0x2c
 800252a:	fb00 f303 	mul.w	r3, r0, r3
 800252e:	440b      	add	r3, r1
 8002530:	335c      	adds	r3, #92	; 0x5c
 8002532:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	212c      	movs	r1, #44	; 0x2c
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	4413      	add	r3, r2
 8002540:	335c      	adds	r3, #92	; 0x5c
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d912      	bls.n	800256e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	212c      	movs	r1, #44	; 0x2c
 800254e:	fb01 f303 	mul.w	r3, r1, r3
 8002552:	4413      	add	r3, r2
 8002554:	335c      	adds	r3, #92	; 0x5c
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	212c      	movs	r1, #44	; 0x2c
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	3360      	adds	r3, #96	; 0x60
 8002568:	2204      	movs	r2, #4
 800256a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800256c:	e073      	b.n	8002656 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	3360      	adds	r3, #96	; 0x60
 800257c:	2202      	movs	r2, #2
 800257e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002596:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800259e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	461a      	mov	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025b2:	e050      	b.n	8002656 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	3361      	adds	r3, #97	; 0x61
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d122      	bne.n	800260e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	3360      	adds	r3, #96	; 0x60
 80025d6:	2202      	movs	r2, #2
 80025d8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025f0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025f8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002606:	461a      	mov	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	e023      	b.n	8002656 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	3361      	adds	r3, #97	; 0x61
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b07      	cmp	r3, #7
 8002620:	d119      	bne.n	8002656 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	212c      	movs	r1, #44	; 0x2c
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	335c      	adds	r3, #92	; 0x5c
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	202c      	movs	r0, #44	; 0x2c
 800263a:	fb00 f303 	mul.w	r3, r0, r3
 800263e:	440b      	add	r3, r1
 8002640:	335c      	adds	r3, #92	; 0x5c
 8002642:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	212c      	movs	r1, #44	; 0x2c
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	4413      	add	r3, r2
 8002650:	3360      	adds	r3, #96	; 0x60
 8002652:	2204      	movs	r2, #4
 8002654:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4413      	add	r3, r2
 800265e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002662:	461a      	mov	r2, r3
 8002664:	2302      	movs	r3, #2
 8002666:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	b2d9      	uxtb	r1, r3
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	202c      	movs	r0, #44	; 0x2c
 8002672:	fb00 f303 	mul.w	r3, r0, r3
 8002676:	4413      	add	r3, r2
 8002678:	3360      	adds	r3, #96	; 0x60
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f008 ffb6 	bl	800b5f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002684:	e081      	b.n	800278a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	2b10      	cmp	r3, #16
 800269a:	d176      	bne.n	800278a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	333f      	adds	r3, #63	; 0x3f
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d121      	bne.n	80026f4 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	212c      	movs	r1, #44	; 0x2c
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	335c      	adds	r3, #92	; 0x5c
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	0151      	lsls	r1, r2, #5
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	440a      	add	r2, r1
 80026d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f002 fafa 	bl	8004ce6 <USB_HC_Halt>
 80026f2:	e041      	b.n	8002778 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	212c      	movs	r1, #44	; 0x2c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	333f      	adds	r3, #63	; 0x3f
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d009      	beq.n	800271c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	212c      	movs	r1, #44	; 0x2c
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	333f      	adds	r3, #63	; 0x3f
 8002716:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002718:	2b02      	cmp	r3, #2
 800271a:	d12d      	bne.n	8002778 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	212c      	movs	r1, #44	; 0x2c
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	4413      	add	r3, r2
 8002728:	335c      	adds	r3, #92	; 0x5c
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d120      	bne.n	8002778 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	3361      	adds	r3, #97	; 0x61
 8002744:	2203      	movs	r2, #3
 8002746:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	0151      	lsls	r1, r2, #5
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	440a      	add	r2, r1
 800275e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002762:	f043 0302 	orr.w	r3, r3, #2
 8002766:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f002 fab7 	bl	8004ce6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4413      	add	r3, r2
 8002780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002784:	461a      	mov	r2, r3
 8002786:	2310      	movs	r3, #16
 8002788:	6093      	str	r3, [r2, #8]
}
 800278a:	bf00      	nop
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b088      	sub	sp, #32
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d119      	bne.n	80027f6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ce:	461a      	mov	r2, r3
 80027d0:	2304      	movs	r3, #4
 80027d2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	0151      	lsls	r1, r2, #5
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	440a      	add	r2, r1
 80027ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ee:	f043 0302 	orr.w	r3, r3, #2
 80027f2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80027f4:	e3ca      	b.n	8002f8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b20      	cmp	r3, #32
 800280a:	d13e      	bne.n	800288a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002818:	461a      	mov	r2, r3
 800281a:	2320      	movs	r3, #32
 800281c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	333d      	adds	r3, #61	; 0x3d
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	f040 83ac 	bne.w	8002f8c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	333d      	adds	r3, #61	; 0x3d
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	212c      	movs	r1, #44	; 0x2c
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	3360      	adds	r3, #96	; 0x60
 8002854:	2202      	movs	r2, #2
 8002856:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	4413      	add	r3, r2
 8002860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	0151      	lsls	r1, r2, #5
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	440a      	add	r2, r1
 800286e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002872:	f043 0302 	orr.w	r3, r3, #2
 8002876:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f002 fa2f 	bl	8004ce6 <USB_HC_Halt>
}
 8002888:	e380      	b.n	8002f8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800289c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a0:	d122      	bne.n	80028e8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	0151      	lsls	r1, r2, #5
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	440a      	add	r2, r1
 80028b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f002 fa0a 	bl	8004ce6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028de:	461a      	mov	r2, r3
 80028e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028e4:	6093      	str	r3, [r2, #8]
}
 80028e6:	e351      	b.n	8002f8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d150      	bne.n	80029a0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	335c      	adds	r3, #92	; 0x5c
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002922:	2b40      	cmp	r3, #64	; 0x40
 8002924:	d111      	bne.n	800294a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	212c      	movs	r1, #44	; 0x2c
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	333d      	adds	r3, #61	; 0x3d
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	4413      	add	r3, r2
 8002940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002944:	461a      	mov	r2, r3
 8002946:	2340      	movs	r3, #64	; 0x40
 8002948:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	0151      	lsls	r1, r2, #5
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	440a      	add	r2, r1
 8002960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f002 f9b6 	bl	8004ce6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	461a      	mov	r2, r3
 8002988:	2301      	movs	r3, #1
 800298a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	3361      	adds	r3, #97	; 0x61
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
}
 800299e:	e2f5      	b.n	8002f8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b40      	cmp	r3, #64	; 0x40
 80029b4:	d13c      	bne.n	8002a30 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	212c      	movs	r1, #44	; 0x2c
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	3361      	adds	r3, #97	; 0x61
 80029c4:	2204      	movs	r2, #4
 80029c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	333d      	adds	r3, #61	; 0x3d
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	212c      	movs	r1, #44	; 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	335c      	adds	r3, #92	; 0x5c
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	0151      	lsls	r1, r2, #5
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	440a      	add	r2, r1
 8002a02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a06:	f043 0302 	orr.w	r3, r3, #2
 8002a0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 f965 	bl	8004ce6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2340      	movs	r3, #64	; 0x40
 8002a2c:	6093      	str	r3, [r2, #8]
}
 8002a2e:	e2ad      	b.n	8002f8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d12a      	bne.n	8002a9c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a52:	461a      	mov	r2, r3
 8002a54:	2308      	movs	r3, #8
 8002a56:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	0151      	lsls	r1, r2, #5
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	440a      	add	r2, r1
 8002a6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a72:	f043 0302 	orr.w	r3, r3, #2
 8002a76:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f002 f92f 	bl	8004ce6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3361      	adds	r3, #97	; 0x61
 8002a96:	2205      	movs	r2, #5
 8002a98:	701a      	strb	r2, [r3, #0]
}
 8002a9a:	e277      	b.n	8002f8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d150      	bne.n	8002b54 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	212c      	movs	r1, #44	; 0x2c
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	335c      	adds	r3, #92	; 0x5c
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3361      	adds	r3, #97	; 0x61
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	212c      	movs	r1, #44	; 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	333d      	adds	r3, #61	; 0x3d
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d112      	bne.n	8002b10 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	333c      	adds	r3, #60	; 0x3c
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d108      	bne.n	8002b10 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	333d      	adds	r3, #61	; 0x3d
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	0151      	lsls	r1, r2, #5
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	440a      	add	r2, r1
 8002b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b2a:	f043 0302 	orr.w	r3, r3, #2
 8002b2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f002 f8d3 	bl	8004ce6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2310      	movs	r3, #16
 8002b50:	6093      	str	r3, [r2, #8]
}
 8002b52:	e21b      	b.n	8002f8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b66:	2b80      	cmp	r3, #128	; 0x80
 8002b68:	d174      	bne.n	8002c54 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d121      	bne.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3361      	adds	r3, #97	; 0x61
 8002b80:	2206      	movs	r2, #6
 8002b82:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	0151      	lsls	r1, r2, #5
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	440a      	add	r2, r1
 8002b9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b9e:	f043 0302 	orr.w	r3, r3, #2
 8002ba2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f002 f899 	bl	8004ce6 <USB_HC_Halt>
 8002bb4:	e044      	b.n	8002c40 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	335c      	adds	r3, #92	; 0x5c
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	202c      	movs	r0, #44	; 0x2c
 8002bce:	fb00 f303 	mul.w	r3, r0, r3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	335c      	adds	r3, #92	; 0x5c
 8002bd6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	212c      	movs	r1, #44	; 0x2c
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	335c      	adds	r3, #92	; 0x5c
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d920      	bls.n	8002c2e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	212c      	movs	r1, #44	; 0x2c
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	335c      	adds	r3, #92	; 0x5c
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	212c      	movs	r1, #44	; 0x2c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	3360      	adds	r3, #96	; 0x60
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	b2d9      	uxtb	r1, r3
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	202c      	movs	r0, #44	; 0x2c
 8002c1a:	fb00 f303 	mul.w	r3, r0, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3360      	adds	r3, #96	; 0x60
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f008 fce2 	bl	800b5f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c2c:	e008      	b.n	8002c40 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3360      	adds	r3, #96	; 0x60
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	6093      	str	r3, [r2, #8]
}
 8002c52:	e19b      	b.n	8002f8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6a:	d134      	bne.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	0151      	lsls	r1, r2, #5
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	440a      	add	r2, r1
 8002c82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c86:	f043 0302 	orr.w	r3, r3, #2
 8002c8a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f002 f825 	bl	8004ce6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2310      	movs	r3, #16
 8002cac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	3361      	adds	r3, #97	; 0x61
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	701a      	strb	r2, [r3, #0]
}
 8002cd4:	e15a      	b.n	8002f8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	f040 814f 	bne.w	8002f8c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	0151      	lsls	r1, r2, #5
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	440a      	add	r2, r1
 8002d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d08:	f023 0302 	bic.w	r3, r3, #2
 8002d0c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	212c      	movs	r1, #44	; 0x2c
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	3361      	adds	r3, #97	; 0x61
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d17d      	bne.n	8002e1e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3360      	adds	r3, #96	; 0x60
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	212c      	movs	r1, #44	; 0x2c
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	333f      	adds	r3, #63	; 0x3f
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d00a      	beq.n	8002d5e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	333f      	adds	r3, #63	; 0x3f
 8002d56:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	f040 8100 	bne.w	8002f5e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d113      	bne.n	8002d8e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	212c      	movs	r1, #44	; 0x2c
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	3355      	adds	r3, #85	; 0x55
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	f083 0301 	eor.w	r3, r3, #1
 8002d7a:	b2d8      	uxtb	r0, r3
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	3355      	adds	r3, #85	; 0x55
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	f040 80e3 	bne.w	8002f5e <HCD_HC_OUT_IRQHandler+0x7cc>
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	334c      	adds	r3, #76	; 0x4c
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80d8 	beq.w	8002f5e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	212c      	movs	r1, #44	; 0x2c
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	334c      	adds	r3, #76	; 0x4c
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	202c      	movs	r0, #44	; 0x2c
 8002dc4:	fb00 f202 	mul.w	r2, r0, r2
 8002dc8:	440a      	add	r2, r1
 8002dca:	3240      	adds	r2, #64	; 0x40
 8002dcc:	8812      	ldrh	r2, [r2, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	202c      	movs	r0, #44	; 0x2c
 8002dd8:	fb00 f202 	mul.w	r2, r0, r2
 8002ddc:	440a      	add	r2, r1
 8002dde:	3240      	adds	r2, #64	; 0x40
 8002de0:	8812      	ldrh	r2, [r2, #0]
 8002de2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80b5 	beq.w	8002f5e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3355      	adds	r3, #85	; 0x55
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	f083 0301 	eor.w	r3, r3, #1
 8002e08:	b2d8      	uxtb	r0, r3
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	212c      	movs	r1, #44	; 0x2c
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	3355      	adds	r3, #85	; 0x55
 8002e18:	4602      	mov	r2, r0
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	e09f      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3361      	adds	r3, #97	; 0x61
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d109      	bne.n	8002e46 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3360      	adds	r3, #96	; 0x60
 8002e40:	2202      	movs	r2, #2
 8002e42:	701a      	strb	r2, [r3, #0]
 8002e44:	e08b      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	212c      	movs	r1, #44	; 0x2c
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	3361      	adds	r3, #97	; 0x61
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d109      	bne.n	8002e6e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	212c      	movs	r1, #44	; 0x2c
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	3360      	adds	r3, #96	; 0x60
 8002e68:	2202      	movs	r2, #2
 8002e6a:	701a      	strb	r2, [r3, #0]
 8002e6c:	e077      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	3361      	adds	r3, #97	; 0x61
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b05      	cmp	r3, #5
 8002e80:	d109      	bne.n	8002e96 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3360      	adds	r3, #96	; 0x60
 8002e90:	2205      	movs	r2, #5
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	e063      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3361      	adds	r3, #97	; 0x61
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b06      	cmp	r3, #6
 8002ea8:	d009      	beq.n	8002ebe <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3361      	adds	r3, #97	; 0x61
 8002eb8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d14f      	bne.n	8002f5e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	335c      	adds	r3, #92	; 0x5c
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	202c      	movs	r0, #44	; 0x2c
 8002ed6:	fb00 f303 	mul.w	r3, r0, r3
 8002eda:	440b      	add	r3, r1
 8002edc:	335c      	adds	r3, #92	; 0x5c
 8002ede:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	335c      	adds	r3, #92	; 0x5c
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d912      	bls.n	8002f1a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	335c      	adds	r3, #92	; 0x5c
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3360      	adds	r3, #96	; 0x60
 8002f14:	2204      	movs	r2, #4
 8002f16:	701a      	strb	r2, [r3, #0]
 8002f18:	e021      	b.n	8002f5e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	3360      	adds	r3, #96	; 0x60
 8002f28:	2202      	movs	r2, #2
 8002f2a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f42:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f4a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f58:	461a      	mov	r2, r3
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	b2d9      	uxtb	r1, r3
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	202c      	movs	r0, #44	; 0x2c
 8002f7a:	fb00 f303 	mul.w	r3, r0, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	3360      	adds	r3, #96	; 0x60
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f008 fb32 	bl	800b5f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f8c:	bf00      	nop
 8002f8e:	3720      	adds	r7, #32
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	; 0x28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	0c5b      	lsrs	r3, r3, #17
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fc8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d004      	beq.n	8002fda <HCD_RXQLVL_IRQHandler+0x46>
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2b05      	cmp	r3, #5
 8002fd4:	f000 80a9 	beq.w	800312a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002fd8:	e0aa      	b.n	8003130 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80a6 	beq.w	800312e <HCD_RXQLVL_IRQHandler+0x19a>
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	212c      	movs	r1, #44	; 0x2c
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	3344      	adds	r3, #68	; 0x44
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 809b 	beq.w	800312e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	212c      	movs	r1, #44	; 0x2c
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	3350      	adds	r3, #80	; 0x50
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	441a      	add	r2, r3
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	202c      	movs	r0, #44	; 0x2c
 8003012:	fb00 f303 	mul.w	r3, r0, r3
 8003016:	440b      	add	r3, r1
 8003018:	334c      	adds	r3, #76	; 0x4c
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d87a      	bhi.n	8003116 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	212c      	movs	r1, #44	; 0x2c
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	4413      	add	r3, r2
 8003030:	3344      	adds	r3, #68	; 0x44
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	b292      	uxth	r2, r2
 8003038:	4619      	mov	r1, r3
 800303a:	f001 f9cd 	bl	80043d8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	3344      	adds	r3, #68	; 0x44
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	441a      	add	r2, r3
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	202c      	movs	r0, #44	; 0x2c
 8003058:	fb00 f303 	mul.w	r3, r0, r3
 800305c:	440b      	add	r3, r1
 800305e:	3344      	adds	r3, #68	; 0x44
 8003060:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	212c      	movs	r1, #44	; 0x2c
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	4413      	add	r3, r2
 800306e:	3350      	adds	r3, #80	; 0x50
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	441a      	add	r2, r3
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	202c      	movs	r0, #44	; 0x2c
 800307c:	fb00 f303 	mul.w	r3, r0, r3
 8003080:	440b      	add	r3, r1
 8003082:	3350      	adds	r3, #80	; 0x50
 8003084:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	4413      	add	r3, r2
 800308e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	0cdb      	lsrs	r3, r3, #19
 8003096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800309a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	212c      	movs	r1, #44	; 0x2c
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	3340      	adds	r3, #64	; 0x40
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d13c      	bne.n	800312e <HCD_RXQLVL_IRQHandler+0x19a>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d039      	beq.n	800312e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030d0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030d8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e6:	461a      	mov	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	212c      	movs	r1, #44	; 0x2c
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	3354      	adds	r3, #84	; 0x54
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	f083 0301 	eor.w	r3, r3, #1
 8003100:	b2d8      	uxtb	r0, r3
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	3354      	adds	r3, #84	; 0x54
 8003110:	4602      	mov	r2, r0
 8003112:	701a      	strb	r2, [r3, #0]
      break;
 8003114:	e00b      	b.n	800312e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	212c      	movs	r1, #44	; 0x2c
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	4413      	add	r3, r2
 8003122:	3360      	adds	r3, #96	; 0x60
 8003124:	2204      	movs	r2, #4
 8003126:	701a      	strb	r2, [r3, #0]
      break;
 8003128:	e001      	b.n	800312e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800312a:	bf00      	nop
 800312c:	e000      	b.n	8003130 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800312e:	bf00      	nop
  }
}
 8003130:	bf00      	nop
 8003132:	3728      	adds	r7, #40	; 0x28
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003164:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b02      	cmp	r3, #2
 800316e:	d10b      	bne.n	8003188 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d102      	bne.n	8003180 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f008 fa1c 	bl	800b5b8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f043 0302 	orr.w	r3, r3, #2
 8003186:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b08      	cmp	r3, #8
 8003190:	d132      	bne.n	80031f8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f043 0308 	orr.w	r3, r3, #8
 8003198:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d126      	bne.n	80031f2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d113      	bne.n	80031d4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80031b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031b6:	d106      	bne.n	80031c6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2102      	movs	r1, #2
 80031be:	4618      	mov	r0, r3
 80031c0:	f001 fa6a 	bl	8004698 <USB_InitFSLSPClkSel>
 80031c4:	e011      	b.n	80031ea <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2101      	movs	r1, #1
 80031cc:	4618      	mov	r0, r3
 80031ce:	f001 fa63 	bl	8004698 <USB_InitFSLSPClkSel>
 80031d2:	e00a      	b.n	80031ea <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d106      	bne.n	80031ea <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031e2:	461a      	mov	r2, r3
 80031e4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80031e8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f008 fa0e 	bl	800b60c <HAL_HCD_PortEnabled_Callback>
 80031f0:	e002      	b.n	80031f8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f008 fa18 	bl	800b628 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b20      	cmp	r3, #32
 8003200:	d103      	bne.n	800320a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f043 0320 	orr.w	r3, r3, #32
 8003208:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003210:	461a      	mov	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	6013      	str	r3, [r2, #0]
}
 8003216:	bf00      	nop
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e264      	b.n	80036fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d075      	beq.n	800332a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800323e:	4ba3      	ldr	r3, [pc, #652]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b04      	cmp	r3, #4
 8003248:	d00c      	beq.n	8003264 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800324a:	4ba0      	ldr	r3, [pc, #640]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003252:	2b08      	cmp	r3, #8
 8003254:	d112      	bne.n	800327c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003256:	4b9d      	ldr	r3, [pc, #628]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003262:	d10b      	bne.n	800327c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003264:	4b99      	ldr	r3, [pc, #612]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d05b      	beq.n	8003328 <HAL_RCC_OscConfig+0x108>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d157      	bne.n	8003328 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e23f      	b.n	80036fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003284:	d106      	bne.n	8003294 <HAL_RCC_OscConfig+0x74>
 8003286:	4b91      	ldr	r3, [pc, #580]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a90      	ldr	r2, [pc, #576]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e01d      	b.n	80032d0 <HAL_RCC_OscConfig+0xb0>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x98>
 800329e:	4b8b      	ldr	r3, [pc, #556]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a8a      	ldr	r2, [pc, #552]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4b88      	ldr	r3, [pc, #544]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a87      	ldr	r2, [pc, #540]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e00b      	b.n	80032d0 <HAL_RCC_OscConfig+0xb0>
 80032b8:	4b84      	ldr	r3, [pc, #528]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a83      	ldr	r2, [pc, #524]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 80032be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	4b81      	ldr	r3, [pc, #516]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a80      	ldr	r2, [pc, #512]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 80032ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d013      	beq.n	8003300 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d8:	f7fd ff3a 	bl	8001150 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e0:	f7fd ff36 	bl	8001150 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e204      	b.n	80036fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	4b76      	ldr	r3, [pc, #472]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0xc0>
 80032fe:	e014      	b.n	800332a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fd ff26 	bl	8001150 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003308:	f7fd ff22 	bl	8001150 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	; 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e1f0      	b.n	80036fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331a:	4b6c      	ldr	r3, [pc, #432]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0xe8>
 8003326:	e000      	b.n	800332a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d063      	beq.n	80033fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003336:	4b65      	ldr	r3, [pc, #404]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00b      	beq.n	800335a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003342:	4b62      	ldr	r3, [pc, #392]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800334a:	2b08      	cmp	r3, #8
 800334c:	d11c      	bne.n	8003388 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800334e:	4b5f      	ldr	r3, [pc, #380]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d116      	bne.n	8003388 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335a:	4b5c      	ldr	r3, [pc, #368]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_RCC_OscConfig+0x152>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d001      	beq.n	8003372 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e1c4      	b.n	80036fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003372:	4b56      	ldr	r3, [pc, #344]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4952      	ldr	r1, [pc, #328]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003386:	e03a      	b.n	80033fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d020      	beq.n	80033d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003390:	4b4f      	ldr	r3, [pc, #316]	; (80034d0 <HAL_RCC_OscConfig+0x2b0>)
 8003392:	2201      	movs	r2, #1
 8003394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003396:	f7fd fedb 	bl	8001150 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800339e:	f7fd fed7 	bl	8001150 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e1a5      	b.n	80036fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	4b46      	ldr	r3, [pc, #280]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033bc:	4b43      	ldr	r3, [pc, #268]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4940      	ldr	r1, [pc, #256]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	600b      	str	r3, [r1, #0]
 80033d0:	e015      	b.n	80033fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d2:	4b3f      	ldr	r3, [pc, #252]	; (80034d0 <HAL_RCC_OscConfig+0x2b0>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fd feba 	bl	8001150 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e0:	f7fd feb6 	bl	8001150 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e184      	b.n	80036fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	4b36      	ldr	r3, [pc, #216]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d030      	beq.n	800346c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d016      	beq.n	8003440 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003412:	4b30      	ldr	r3, [pc, #192]	; (80034d4 <HAL_RCC_OscConfig+0x2b4>)
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003418:	f7fd fe9a 	bl	8001150 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003420:	f7fd fe96 	bl	8001150 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e164      	b.n	80036fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	4b26      	ldr	r3, [pc, #152]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 8003434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0x200>
 800343e:	e015      	b.n	800346c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003440:	4b24      	ldr	r3, [pc, #144]	; (80034d4 <HAL_RCC_OscConfig+0x2b4>)
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003446:	f7fd fe83 	bl	8001150 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800344e:	f7fd fe7f 	bl	8001150 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e14d      	b.n	80036fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003460:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 8003462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f0      	bne.n	800344e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80a0 	beq.w	80035ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347a:	2300      	movs	r3, #0
 800347c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347e:	4b13      	ldr	r3, [pc, #76]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10f      	bne.n	80034aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	4a0e      	ldr	r2, [pc, #56]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 8003494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003498:	6413      	str	r3, [r2, #64]	; 0x40
 800349a:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <HAL_RCC_OscConfig+0x2ac>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a6:	2301      	movs	r3, #1
 80034a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_RCC_OscConfig+0x2b8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d121      	bne.n	80034fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <HAL_RCC_OscConfig+0x2b8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a07      	ldr	r2, [pc, #28]	; (80034d8 <HAL_RCC_OscConfig+0x2b8>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c2:	f7fd fe45 	bl	8001150 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	e011      	b.n	80034ee <HAL_RCC_OscConfig+0x2ce>
 80034ca:	bf00      	nop
 80034cc:	40023800 	.word	0x40023800
 80034d0:	42470000 	.word	0x42470000
 80034d4:	42470e80 	.word	0x42470e80
 80034d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034dc:	f7fd fe38 	bl	8001150 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e106      	b.n	80036fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ee:	4b85      	ldr	r3, [pc, #532]	; (8003704 <HAL_RCC_OscConfig+0x4e4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d106      	bne.n	8003510 <HAL_RCC_OscConfig+0x2f0>
 8003502:	4b81      	ldr	r3, [pc, #516]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	4a80      	ldr	r2, [pc, #512]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6713      	str	r3, [r2, #112]	; 0x70
 800350e:	e01c      	b.n	800354a <HAL_RCC_OscConfig+0x32a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b05      	cmp	r3, #5
 8003516:	d10c      	bne.n	8003532 <HAL_RCC_OscConfig+0x312>
 8003518:	4b7b      	ldr	r3, [pc, #492]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	4a7a      	ldr	r2, [pc, #488]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 800351e:	f043 0304 	orr.w	r3, r3, #4
 8003522:	6713      	str	r3, [r2, #112]	; 0x70
 8003524:	4b78      	ldr	r3, [pc, #480]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	4a77      	ldr	r2, [pc, #476]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6713      	str	r3, [r2, #112]	; 0x70
 8003530:	e00b      	b.n	800354a <HAL_RCC_OscConfig+0x32a>
 8003532:	4b75      	ldr	r3, [pc, #468]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4a74      	ldr	r2, [pc, #464]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	6713      	str	r3, [r2, #112]	; 0x70
 800353e:	4b72      	ldr	r3, [pc, #456]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003542:	4a71      	ldr	r2, [pc, #452]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 8003544:	f023 0304 	bic.w	r3, r3, #4
 8003548:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d015      	beq.n	800357e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003552:	f7fd fdfd 	bl	8001150 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003558:	e00a      	b.n	8003570 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fd fdf9 	bl	8001150 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	; 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e0c5      	b.n	80036fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003570:	4b65      	ldr	r3, [pc, #404]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0ee      	beq.n	800355a <HAL_RCC_OscConfig+0x33a>
 800357c:	e014      	b.n	80035a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357e:	f7fd fde7 	bl	8001150 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003584:	e00a      	b.n	800359c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7fd fde3 	bl	8001150 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	; 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e0af      	b.n	80036fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359c:	4b5a      	ldr	r3, [pc, #360]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1ee      	bne.n	8003586 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d105      	bne.n	80035ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ae:	4b56      	ldr	r3, [pc, #344]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	4a55      	ldr	r2, [pc, #340]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 80035b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 809b 	beq.w	80036fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035c4:	4b50      	ldr	r3, [pc, #320]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d05c      	beq.n	800368a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d141      	bne.n	800365c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d8:	4b4c      	ldr	r3, [pc, #304]	; (800370c <HAL_RCC_OscConfig+0x4ec>)
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035de:	f7fd fdb7 	bl	8001150 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e6:	f7fd fdb3 	bl	8001150 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e081      	b.n	80036fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f8:	4b43      	ldr	r3, [pc, #268]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f0      	bne.n	80035e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69da      	ldr	r2, [r3, #28]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	019b      	lsls	r3, r3, #6
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	3b01      	subs	r3, #1
 800361e:	041b      	lsls	r3, r3, #16
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	061b      	lsls	r3, r3, #24
 8003628:	4937      	ldr	r1, [pc, #220]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 800362a:	4313      	orrs	r3, r2
 800362c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800362e:	4b37      	ldr	r3, [pc, #220]	; (800370c <HAL_RCC_OscConfig+0x4ec>)
 8003630:	2201      	movs	r2, #1
 8003632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fd fd8c 	bl	8001150 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800363c:	f7fd fd88 	bl	8001150 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e056      	b.n	80036fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364e:	4b2e      	ldr	r3, [pc, #184]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0x41c>
 800365a:	e04e      	b.n	80036fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365c:	4b2b      	ldr	r3, [pc, #172]	; (800370c <HAL_RCC_OscConfig+0x4ec>)
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003662:	f7fd fd75 	bl	8001150 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366a:	f7fd fd71 	bl	8001150 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e03f      	b.n	80036fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367c:	4b22      	ldr	r3, [pc, #136]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f0      	bne.n	800366a <HAL_RCC_OscConfig+0x44a>
 8003688:	e037      	b.n	80036fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e032      	b.n	80036fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003696:	4b1c      	ldr	r3, [pc, #112]	; (8003708 <HAL_RCC_OscConfig+0x4e8>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d028      	beq.n	80036f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d121      	bne.n	80036f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036bc:	429a      	cmp	r2, r3
 80036be:	d11a      	bne.n	80036f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036c6:	4013      	ands	r3, r2
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d111      	bne.n	80036f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	085b      	lsrs	r3, r3, #1
 80036de:	3b01      	subs	r3, #1
 80036e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d001      	beq.n	80036fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40007000 	.word	0x40007000
 8003708:	40023800 	.word	0x40023800
 800370c:	42470060 	.word	0x42470060

08003710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0cc      	b.n	80038be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003724:	4b68      	ldr	r3, [pc, #416]	; (80038c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d90c      	bls.n	800374c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b65      	ldr	r3, [pc, #404]	; (80038c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373a:	4b63      	ldr	r3, [pc, #396]	; (80038c8 <HAL_RCC_ClockConfig+0x1b8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0b8      	b.n	80038be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d020      	beq.n	800379a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003764:	4b59      	ldr	r3, [pc, #356]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	4a58      	ldr	r2, [pc, #352]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800376e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800377c:	4b53      	ldr	r3, [pc, #332]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	4a52      	ldr	r2, [pc, #328]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003788:	4b50      	ldr	r3, [pc, #320]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	494d      	ldr	r1, [pc, #308]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	4313      	orrs	r3, r2
 8003798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d044      	beq.n	8003830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d107      	bne.n	80037be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ae:	4b47      	ldr	r3, [pc, #284]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d119      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e07f      	b.n	80038be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d003      	beq.n	80037ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ce:	4b3f      	ldr	r3, [pc, #252]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e06f      	b.n	80038be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037de:	4b3b      	ldr	r3, [pc, #236]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e067      	b.n	80038be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ee:	4b37      	ldr	r3, [pc, #220]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f023 0203 	bic.w	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4934      	ldr	r1, [pc, #208]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003800:	f7fd fca6 	bl	8001150 <HAL_GetTick>
 8003804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	e00a      	b.n	800381e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003808:	f7fd fca2 	bl	8001150 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e04f      	b.n	80038be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	4b2b      	ldr	r3, [pc, #172]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 020c 	and.w	r2, r3, #12
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	429a      	cmp	r2, r3
 800382e:	d1eb      	bne.n	8003808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003830:	4b25      	ldr	r3, [pc, #148]	; (80038c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d20c      	bcs.n	8003858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b20      	ldr	r3, [pc, #128]	; (80038c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e032      	b.n	80038be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	4916      	ldr	r1, [pc, #88]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d009      	beq.n	8003896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	490e      	ldr	r1, [pc, #56]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	4313      	orrs	r3, r2
 8003894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003896:	f000 f821 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 800389a:	4602      	mov	r2, r0
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	490a      	ldr	r1, [pc, #40]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 80038a8:	5ccb      	ldrb	r3, [r1, r3]
 80038aa:	fa22 f303 	lsr.w	r3, r2, r3
 80038ae:	4a09      	ldr	r2, [pc, #36]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80038b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fd fc06 	bl	80010c8 <HAL_InitTick>

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40023c00 	.word	0x40023c00
 80038cc:	40023800 	.word	0x40023800
 80038d0:	0800d2d4 	.word	0x0800d2d4
 80038d4:	20000000 	.word	0x20000000
 80038d8:	20000004 	.word	0x20000004

080038dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	607b      	str	r3, [r7, #4]
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	2300      	movs	r3, #0
 80038ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038f4:	4b67      	ldr	r3, [pc, #412]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 030c 	and.w	r3, r3, #12
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d00d      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0x40>
 8003900:	2b08      	cmp	r3, #8
 8003902:	f200 80bd 	bhi.w	8003a80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x34>
 800390a:	2b04      	cmp	r3, #4
 800390c:	d003      	beq.n	8003916 <HAL_RCC_GetSysClockFreq+0x3a>
 800390e:	e0b7      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003910:	4b61      	ldr	r3, [pc, #388]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003912:	60bb      	str	r3, [r7, #8]
       break;
 8003914:	e0b7      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003916:	4b61      	ldr	r3, [pc, #388]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003918:	60bb      	str	r3, [r7, #8]
      break;
 800391a:	e0b4      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800391c:	4b5d      	ldr	r3, [pc, #372]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003924:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003926:	4b5b      	ldr	r3, [pc, #364]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d04d      	beq.n	80039ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003932:	4b58      	ldr	r3, [pc, #352]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	099b      	lsrs	r3, r3, #6
 8003938:	461a      	mov	r2, r3
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003942:	f04f 0100 	mov.w	r1, #0
 8003946:	ea02 0800 	and.w	r8, r2, r0
 800394a:	ea03 0901 	and.w	r9, r3, r1
 800394e:	4640      	mov	r0, r8
 8003950:	4649      	mov	r1, r9
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	014b      	lsls	r3, r1, #5
 800395c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003960:	0142      	lsls	r2, r0, #5
 8003962:	4610      	mov	r0, r2
 8003964:	4619      	mov	r1, r3
 8003966:	ebb0 0008 	subs.w	r0, r0, r8
 800396a:	eb61 0109 	sbc.w	r1, r1, r9
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	018b      	lsls	r3, r1, #6
 8003978:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800397c:	0182      	lsls	r2, r0, #6
 800397e:	1a12      	subs	r2, r2, r0
 8003980:	eb63 0301 	sbc.w	r3, r3, r1
 8003984:	f04f 0000 	mov.w	r0, #0
 8003988:	f04f 0100 	mov.w	r1, #0
 800398c:	00d9      	lsls	r1, r3, #3
 800398e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003992:	00d0      	lsls	r0, r2, #3
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	eb12 0208 	adds.w	r2, r2, r8
 800399c:	eb43 0309 	adc.w	r3, r3, r9
 80039a0:	f04f 0000 	mov.w	r0, #0
 80039a4:	f04f 0100 	mov.w	r1, #0
 80039a8:	0259      	lsls	r1, r3, #9
 80039aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80039ae:	0250      	lsls	r0, r2, #9
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4610      	mov	r0, r2
 80039b6:	4619      	mov	r1, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	461a      	mov	r2, r3
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	f7fc ff5c 	bl	800087c <__aeabi_uldivmod>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4613      	mov	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	e04a      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ce:	4b31      	ldr	r3, [pc, #196]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	099b      	lsrs	r3, r3, #6
 80039d4:	461a      	mov	r2, r3
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039de:	f04f 0100 	mov.w	r1, #0
 80039e2:	ea02 0400 	and.w	r4, r2, r0
 80039e6:	ea03 0501 	and.w	r5, r3, r1
 80039ea:	4620      	mov	r0, r4
 80039ec:	4629      	mov	r1, r5
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	014b      	lsls	r3, r1, #5
 80039f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039fc:	0142      	lsls	r2, r0, #5
 80039fe:	4610      	mov	r0, r2
 8003a00:	4619      	mov	r1, r3
 8003a02:	1b00      	subs	r0, r0, r4
 8003a04:	eb61 0105 	sbc.w	r1, r1, r5
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	018b      	lsls	r3, r1, #6
 8003a12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a16:	0182      	lsls	r2, r0, #6
 8003a18:	1a12      	subs	r2, r2, r0
 8003a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a1e:	f04f 0000 	mov.w	r0, #0
 8003a22:	f04f 0100 	mov.w	r1, #0
 8003a26:	00d9      	lsls	r1, r3, #3
 8003a28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a2c:	00d0      	lsls	r0, r2, #3
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	1912      	adds	r2, r2, r4
 8003a34:	eb45 0303 	adc.w	r3, r5, r3
 8003a38:	f04f 0000 	mov.w	r0, #0
 8003a3c:	f04f 0100 	mov.w	r1, #0
 8003a40:	0299      	lsls	r1, r3, #10
 8003a42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a46:	0290      	lsls	r0, r2, #10
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4619      	mov	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	461a      	mov	r2, r3
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	f7fc ff10 	bl	800087c <__aeabi_uldivmod>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4613      	mov	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	0c1b      	lsrs	r3, r3, #16
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	60bb      	str	r3, [r7, #8]
      break;
 8003a7e:	e002      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a82:	60bb      	str	r3, [r7, #8]
      break;
 8003a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a86:	68bb      	ldr	r3, [r7, #8]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800
 8003a98:	00f42400 	.word	0x00f42400
 8003a9c:	007a1200 	.word	0x007a1200

08003aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000000 	.word	0x20000000

08003ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003abc:	f7ff fff0 	bl	8003aa0 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	0a9b      	lsrs	r3, r3, #10
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4903      	ldr	r1, [pc, #12]	; (8003adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	0800d2e4 	.word	0x0800d2e4

08003ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ae4:	f7ff ffdc 	bl	8003aa0 <HAL_RCC_GetHCLKFreq>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	0b5b      	lsrs	r3, r3, #13
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	4903      	ldr	r1, [pc, #12]	; (8003b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003af6:	5ccb      	ldrb	r3, [r1, r3]
 8003af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40023800 	.word	0x40023800
 8003b04:	0800d2e4 	.word	0x0800d2e4

08003b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e03f      	b.n	8003b9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fd f94c 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2224      	movs	r2, #36	; 0x24
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f929 	bl	8003da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b08a      	sub	sp, #40	; 0x28
 8003ba6:	af02      	add	r7, sp, #8
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	603b      	str	r3, [r7, #0]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d17c      	bne.n	8003cbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_UART_Transmit+0x2c>
 8003bc8:	88fb      	ldrh	r3, [r7, #6]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e075      	b.n	8003cbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_UART_Transmit+0x3e>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e06e      	b.n	8003cbe <HAL_UART_Transmit+0x11c>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2221      	movs	r2, #33	; 0x21
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bf6:	f7fd faab 	bl	8001150 <HAL_GetTick>
 8003bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	88fa      	ldrh	r2, [r7, #6]
 8003c00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	88fa      	ldrh	r2, [r7, #6]
 8003c06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c10:	d108      	bne.n	8003c24 <HAL_UART_Transmit+0x82>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d104      	bne.n	8003c24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	e003      	b.n	8003c2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c34:	e02a      	b.n	8003c8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2180      	movs	r1, #128	; 0x80
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f840 	bl	8003cc6 <UART_WaitOnFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e036      	b.n	8003cbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10b      	bne.n	8003c6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	3302      	adds	r3, #2
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	e007      	b.n	8003c7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	781a      	ldrb	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1cf      	bne.n	8003c36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2140      	movs	r1, #64	; 0x40
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f810 	bl	8003cc6 <UART_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e006      	b.n	8003cbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	e000      	b.n	8003cbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cbc:	2302      	movs	r3, #2
  }
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3720      	adds	r7, #32
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b090      	sub	sp, #64	; 0x40
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	603b      	str	r3, [r7, #0]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd6:	e050      	b.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cde:	d04c      	beq.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d007      	beq.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ce6:	f7fd fa33 	bl	8001150 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d241      	bcs.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	330c      	adds	r3, #12
 8003cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	e853 3f00 	ldrex	r3, [r3]
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	330c      	adds	r3, #12
 8003d14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d16:	637a      	str	r2, [r7, #52]	; 0x34
 8003d18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d1e:	e841 2300 	strex	r3, r2, [r1]
 8003d22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1e5      	bne.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3314      	adds	r3, #20
 8003d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	613b      	str	r3, [r7, #16]
   return(result);
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3314      	adds	r3, #20
 8003d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d4a:	623a      	str	r2, [r7, #32]
 8003d4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4e:	69f9      	ldr	r1, [r7, #28]
 8003d50:	6a3a      	ldr	r2, [r7, #32]
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1e5      	bne.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e00f      	b.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4013      	ands	r3, r2
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	bf0c      	ite	eq
 8003d8a:	2301      	moveq	r3, #1
 8003d8c:	2300      	movne	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d09f      	beq.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3740      	adds	r7, #64	; 0x40
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da8:	b09f      	sub	sp, #124	; 0x7c
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dba:	68d9      	ldr	r1, [r3, #12]
 8003dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	ea40 0301 	orr.w	r3, r0, r1
 8003dc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003de8:	f021 010c 	bic.w	r1, r1, #12
 8003dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003df2:	430b      	orrs	r3, r1
 8003df4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e02:	6999      	ldr	r1, [r3, #24]
 8003e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	ea40 0301 	orr.w	r3, r0, r1
 8003e0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	4bc5      	ldr	r3, [pc, #788]	; (8004128 <UART_SetConfig+0x384>)
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d004      	beq.n	8003e22 <UART_SetConfig+0x7e>
 8003e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	4bc3      	ldr	r3, [pc, #780]	; (800412c <UART_SetConfig+0x388>)
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d103      	bne.n	8003e2a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e22:	f7ff fe5d 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 8003e26:	6778      	str	r0, [r7, #116]	; 0x74
 8003e28:	e002      	b.n	8003e30 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e2a:	f7ff fe45 	bl	8003ab8 <HAL_RCC_GetPCLK1Freq>
 8003e2e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e38:	f040 80b6 	bne.w	8003fa8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e3e:	461c      	mov	r4, r3
 8003e40:	f04f 0500 	mov.w	r5, #0
 8003e44:	4622      	mov	r2, r4
 8003e46:	462b      	mov	r3, r5
 8003e48:	1891      	adds	r1, r2, r2
 8003e4a:	6439      	str	r1, [r7, #64]	; 0x40
 8003e4c:	415b      	adcs	r3, r3
 8003e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e54:	1912      	adds	r2, r2, r4
 8003e56:	eb45 0303 	adc.w	r3, r5, r3
 8003e5a:	f04f 0000 	mov.w	r0, #0
 8003e5e:	f04f 0100 	mov.w	r1, #0
 8003e62:	00d9      	lsls	r1, r3, #3
 8003e64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e68:	00d0      	lsls	r0, r2, #3
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	1911      	adds	r1, r2, r4
 8003e70:	6639      	str	r1, [r7, #96]	; 0x60
 8003e72:	416b      	adcs	r3, r5
 8003e74:	667b      	str	r3, [r7, #100]	; 0x64
 8003e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	1891      	adds	r1, r2, r2
 8003e82:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e84:	415b      	adcs	r3, r3
 8003e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e90:	f7fc fcf4 	bl	800087c <__aeabi_uldivmod>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4ba5      	ldr	r3, [pc, #660]	; (8004130 <UART_SetConfig+0x38c>)
 8003e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	011e      	lsls	r6, r3, #4
 8003ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea4:	461c      	mov	r4, r3
 8003ea6:	f04f 0500 	mov.w	r5, #0
 8003eaa:	4622      	mov	r2, r4
 8003eac:	462b      	mov	r3, r5
 8003eae:	1891      	adds	r1, r2, r2
 8003eb0:	6339      	str	r1, [r7, #48]	; 0x30
 8003eb2:	415b      	adcs	r3, r3
 8003eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8003eb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003eba:	1912      	adds	r2, r2, r4
 8003ebc:	eb45 0303 	adc.w	r3, r5, r3
 8003ec0:	f04f 0000 	mov.w	r0, #0
 8003ec4:	f04f 0100 	mov.w	r1, #0
 8003ec8:	00d9      	lsls	r1, r3, #3
 8003eca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ece:	00d0      	lsls	r0, r2, #3
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	1911      	adds	r1, r2, r4
 8003ed6:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ed8:	416b      	adcs	r3, r5
 8003eda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	1891      	adds	r1, r2, r2
 8003ee8:	62b9      	str	r1, [r7, #40]	; 0x28
 8003eea:	415b      	adcs	r3, r3
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ef2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ef6:	f7fc fcc1 	bl	800087c <__aeabi_uldivmod>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4b8c      	ldr	r3, [pc, #560]	; (8004130 <UART_SetConfig+0x38c>)
 8003f00:	fba3 1302 	umull	r1, r3, r3, r2
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	2164      	movs	r1, #100	; 0x64
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	3332      	adds	r3, #50	; 0x32
 8003f12:	4a87      	ldr	r2, [pc, #540]	; (8004130 <UART_SetConfig+0x38c>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f20:	441e      	add	r6, r3
 8003f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f24:	4618      	mov	r0, r3
 8003f26:	f04f 0100 	mov.w	r1, #0
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	1894      	adds	r4, r2, r2
 8003f30:	623c      	str	r4, [r7, #32]
 8003f32:	415b      	adcs	r3, r3
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
 8003f36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f3a:	1812      	adds	r2, r2, r0
 8003f3c:	eb41 0303 	adc.w	r3, r1, r3
 8003f40:	f04f 0400 	mov.w	r4, #0
 8003f44:	f04f 0500 	mov.w	r5, #0
 8003f48:	00dd      	lsls	r5, r3, #3
 8003f4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f4e:	00d4      	lsls	r4, r2, #3
 8003f50:	4622      	mov	r2, r4
 8003f52:	462b      	mov	r3, r5
 8003f54:	1814      	adds	r4, r2, r0
 8003f56:	653c      	str	r4, [r7, #80]	; 0x50
 8003f58:	414b      	adcs	r3, r1
 8003f5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	461a      	mov	r2, r3
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	1891      	adds	r1, r2, r2
 8003f68:	61b9      	str	r1, [r7, #24]
 8003f6a:	415b      	adcs	r3, r3
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f76:	f7fc fc81 	bl	800087c <__aeabi_uldivmod>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4b6c      	ldr	r3, [pc, #432]	; (8004130 <UART_SetConfig+0x38c>)
 8003f80:	fba3 1302 	umull	r1, r3, r3, r2
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	2164      	movs	r1, #100	; 0x64
 8003f88:	fb01 f303 	mul.w	r3, r1, r3
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	3332      	adds	r3, #50	; 0x32
 8003f92:	4a67      	ldr	r2, [pc, #412]	; (8004130 <UART_SetConfig+0x38c>)
 8003f94:	fba2 2303 	umull	r2, r3, r2, r3
 8003f98:	095b      	lsrs	r3, r3, #5
 8003f9a:	f003 0207 	and.w	r2, r3, #7
 8003f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4432      	add	r2, r6
 8003fa4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fa6:	e0b9      	b.n	800411c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003faa:	461c      	mov	r4, r3
 8003fac:	f04f 0500 	mov.w	r5, #0
 8003fb0:	4622      	mov	r2, r4
 8003fb2:	462b      	mov	r3, r5
 8003fb4:	1891      	adds	r1, r2, r2
 8003fb6:	6139      	str	r1, [r7, #16]
 8003fb8:	415b      	adcs	r3, r3
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003fc0:	1912      	adds	r2, r2, r4
 8003fc2:	eb45 0303 	adc.w	r3, r5, r3
 8003fc6:	f04f 0000 	mov.w	r0, #0
 8003fca:	f04f 0100 	mov.w	r1, #0
 8003fce:	00d9      	lsls	r1, r3, #3
 8003fd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fd4:	00d0      	lsls	r0, r2, #3
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	eb12 0804 	adds.w	r8, r2, r4
 8003fde:	eb43 0905 	adc.w	r9, r3, r5
 8003fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f04f 0100 	mov.w	r1, #0
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	008b      	lsls	r3, r1, #2
 8003ff6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ffa:	0082      	lsls	r2, r0, #2
 8003ffc:	4640      	mov	r0, r8
 8003ffe:	4649      	mov	r1, r9
 8004000:	f7fc fc3c 	bl	800087c <__aeabi_uldivmod>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4b49      	ldr	r3, [pc, #292]	; (8004130 <UART_SetConfig+0x38c>)
 800400a:	fba3 2302 	umull	r2, r3, r3, r2
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	011e      	lsls	r6, r3, #4
 8004012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004014:	4618      	mov	r0, r3
 8004016:	f04f 0100 	mov.w	r1, #0
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	1894      	adds	r4, r2, r2
 8004020:	60bc      	str	r4, [r7, #8]
 8004022:	415b      	adcs	r3, r3
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800402a:	1812      	adds	r2, r2, r0
 800402c:	eb41 0303 	adc.w	r3, r1, r3
 8004030:	f04f 0400 	mov.w	r4, #0
 8004034:	f04f 0500 	mov.w	r5, #0
 8004038:	00dd      	lsls	r5, r3, #3
 800403a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800403e:	00d4      	lsls	r4, r2, #3
 8004040:	4622      	mov	r2, r4
 8004042:	462b      	mov	r3, r5
 8004044:	1814      	adds	r4, r2, r0
 8004046:	64bc      	str	r4, [r7, #72]	; 0x48
 8004048:	414b      	adcs	r3, r1
 800404a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800404c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	4618      	mov	r0, r3
 8004052:	f04f 0100 	mov.w	r1, #0
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	008b      	lsls	r3, r1, #2
 8004060:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004064:	0082      	lsls	r2, r0, #2
 8004066:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800406a:	f7fc fc07 	bl	800087c <__aeabi_uldivmod>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4b2f      	ldr	r3, [pc, #188]	; (8004130 <UART_SetConfig+0x38c>)
 8004074:	fba3 1302 	umull	r1, r3, r3, r2
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	2164      	movs	r1, #100	; 0x64
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	3332      	adds	r3, #50	; 0x32
 8004086:	4a2a      	ldr	r2, [pc, #168]	; (8004130 <UART_SetConfig+0x38c>)
 8004088:	fba2 2303 	umull	r2, r3, r2, r3
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004092:	441e      	add	r6, r3
 8004094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004096:	4618      	mov	r0, r3
 8004098:	f04f 0100 	mov.w	r1, #0
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	1894      	adds	r4, r2, r2
 80040a2:	603c      	str	r4, [r7, #0]
 80040a4:	415b      	adcs	r3, r3
 80040a6:	607b      	str	r3, [r7, #4]
 80040a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040ac:	1812      	adds	r2, r2, r0
 80040ae:	eb41 0303 	adc.w	r3, r1, r3
 80040b2:	f04f 0400 	mov.w	r4, #0
 80040b6:	f04f 0500 	mov.w	r5, #0
 80040ba:	00dd      	lsls	r5, r3, #3
 80040bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040c0:	00d4      	lsls	r4, r2, #3
 80040c2:	4622      	mov	r2, r4
 80040c4:	462b      	mov	r3, r5
 80040c6:	eb12 0a00 	adds.w	sl, r2, r0
 80040ca:	eb43 0b01 	adc.w	fp, r3, r1
 80040ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f04f 0100 	mov.w	r1, #0
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	008b      	lsls	r3, r1, #2
 80040e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040e6:	0082      	lsls	r2, r0, #2
 80040e8:	4650      	mov	r0, sl
 80040ea:	4659      	mov	r1, fp
 80040ec:	f7fc fbc6 	bl	800087c <__aeabi_uldivmod>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <UART_SetConfig+0x38c>)
 80040f6:	fba3 1302 	umull	r1, r3, r3, r2
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	2164      	movs	r1, #100	; 0x64
 80040fe:	fb01 f303 	mul.w	r3, r1, r3
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	3332      	adds	r3, #50	; 0x32
 8004108:	4a09      	ldr	r2, [pc, #36]	; (8004130 <UART_SetConfig+0x38c>)
 800410a:	fba2 2303 	umull	r2, r3, r2, r3
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	f003 020f 	and.w	r2, r3, #15
 8004114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4432      	add	r2, r6
 800411a:	609a      	str	r2, [r3, #8]
}
 800411c:	bf00      	nop
 800411e:	377c      	adds	r7, #124	; 0x7c
 8004120:	46bd      	mov	sp, r7
 8004122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004126:	bf00      	nop
 8004128:	40011000 	.word	0x40011000
 800412c:	40011400 	.word	0x40011400
 8004130:	51eb851f 	.word	0x51eb851f

08004134 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004134:	b084      	sub	sp, #16
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	f107 001c 	add.w	r0, r7, #28
 8004142:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	2b01      	cmp	r3, #1
 800414a:	d122      	bne.n	8004192 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004176:	2b01      	cmp	r3, #1
 8004178:	d105      	bne.n	8004186 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f9a0 	bl	80044cc <USB_CoreReset>
 800418c:	4603      	mov	r3, r0
 800418e:	73fb      	strb	r3, [r7, #15]
 8004190:	e01a      	b.n	80041c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f994 	bl	80044cc <USB_CoreReset>
 80041a4:	4603      	mov	r3, r0
 80041a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80041a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	639a      	str	r2, [r3, #56]	; 0x38
 80041ba:	e005      	b.n	80041c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80041c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d10b      	bne.n	80041e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f043 0206 	orr.w	r2, r3, #6
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f043 0220 	orr.w	r2, r3, #32
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041f2:	b004      	add	sp, #16
 80041f4:	4770      	bx	lr

080041f6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f043 0201 	orr.w	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f023 0201 	bic.w	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	460b      	mov	r3, r1
 8004244:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004256:	78fb      	ldrb	r3, [r7, #3]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d115      	bne.n	8004288 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004268:	2001      	movs	r0, #1
 800426a:	f7fc ff7d 	bl	8001168 <HAL_Delay>
      ms++;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3301      	adds	r3, #1
 8004272:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f91a 	bl	80044ae <USB_GetMode>
 800427a:	4603      	mov	r3, r0
 800427c:	2b01      	cmp	r3, #1
 800427e:	d01e      	beq.n	80042be <USB_SetCurrentMode+0x84>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b31      	cmp	r3, #49	; 0x31
 8004284:	d9f0      	bls.n	8004268 <USB_SetCurrentMode+0x2e>
 8004286:	e01a      	b.n	80042be <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d115      	bne.n	80042ba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800429a:	2001      	movs	r0, #1
 800429c:	f7fc ff64 	bl	8001168 <HAL_Delay>
      ms++;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3301      	adds	r3, #1
 80042a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f901 	bl	80044ae <USB_GetMode>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <USB_SetCurrentMode+0x84>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2b31      	cmp	r3, #49	; 0x31
 80042b6:	d9f0      	bls.n	800429a <USB_SetCurrentMode+0x60>
 80042b8:	e001      	b.n	80042be <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e005      	b.n	80042ca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b32      	cmp	r3, #50	; 0x32
 80042c2:	d101      	bne.n	80042c8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	019b      	lsls	r3, r3, #6
 80042e6:	f043 0220 	orr.w	r2, r3, #32
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3301      	adds	r3, #1
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	4a08      	ldr	r2, [pc, #32]	; (8004318 <USB_FlushTxFifo+0x44>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d901      	bls.n	80042fe <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e006      	b.n	800430c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b20      	cmp	r3, #32
 8004308:	d0f1      	beq.n	80042ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	00030d40 	.word	0x00030d40

0800431c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2210      	movs	r2, #16
 800432c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3301      	adds	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	4a08      	ldr	r2, [pc, #32]	; (8004358 <USB_FlushRxFifo+0x3c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e006      	b.n	800434c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b10      	cmp	r3, #16
 8004348:	d0f1      	beq.n	800432e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	00030d40 	.word	0x00030d40

0800435c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800435c:	b480      	push	{r7}
 800435e:	b089      	sub	sp, #36	; 0x24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	4611      	mov	r1, r2
 8004368:	461a      	mov	r2, r3
 800436a:	460b      	mov	r3, r1
 800436c:	71fb      	strb	r3, [r7, #7]
 800436e:	4613      	mov	r3, r2
 8004370:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800437a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800437e:	2b00      	cmp	r3, #0
 8004380:	d123      	bne.n	80043ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004382:	88bb      	ldrh	r3, [r7, #4]
 8004384:	3303      	adds	r3, #3
 8004386:	089b      	lsrs	r3, r3, #2
 8004388:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800438a:	2300      	movs	r3, #0
 800438c:	61bb      	str	r3, [r7, #24]
 800438e:	e018      	b.n	80043c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	031a      	lsls	r2, r3, #12
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	4413      	add	r3, r2
 8004398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439c:	461a      	mov	r2, r3
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	3301      	adds	r3, #1
 80043a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	3301      	adds	r3, #1
 80043ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	3301      	adds	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	3301      	adds	r3, #1
 80043ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	3301      	adds	r3, #1
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d3e2      	bcc.n	8004390 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3724      	adds	r7, #36	; 0x24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80043d8:	b480      	push	{r7}
 80043da:	b08b      	sub	sp, #44	; 0x2c
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	4613      	mov	r3, r2
 80043e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	089b      	lsrs	r3, r3, #2
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80043fe:	2300      	movs	r3, #0
 8004400:	623b      	str	r3, [r7, #32]
 8004402:	e014      	b.n	800442e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	3301      	adds	r3, #1
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	3301      	adds	r3, #1
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	3301      	adds	r3, #1
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	3301      	adds	r3, #1
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	3301      	adds	r3, #1
 800442c:	623b      	str	r3, [r7, #32]
 800442e:	6a3a      	ldr	r2, [r7, #32]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	429a      	cmp	r2, r3
 8004434:	d3e6      	bcc.n	8004404 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004436:	8bfb      	ldrh	r3, [r7, #30]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01e      	beq.n	800447a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004446:	461a      	mov	r2, r3
 8004448:	f107 0310 	add.w	r3, r7, #16
 800444c:	6812      	ldr	r2, [r2, #0]
 800444e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
 800445c:	b2da      	uxtb	r2, r3
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	701a      	strb	r2, [r3, #0]
      i++;
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	3301      	adds	r3, #1
 8004466:	623b      	str	r3, [r7, #32]
      pDest++;
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	3301      	adds	r3, #1
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800446e:	8bfb      	ldrh	r3, [r7, #30]
 8004470:	3b01      	subs	r3, #1
 8004472:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004474:	8bfb      	ldrh	r3, [r7, #30]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1ea      	bne.n	8004450 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800447c:	4618      	mov	r0, r3
 800447e:	372c      	adds	r7, #44	; 0x2c
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4013      	ands	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80044a0:	68fb      	ldr	r3, [r7, #12]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0301 	and.w	r3, r3, #1
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3301      	adds	r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	4a13      	ldr	r2, [pc, #76]	; (800452c <USB_CoreReset+0x60>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d901      	bls.n	80044e8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e01a      	b.n	800451e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	daf3      	bge.n	80044d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f043 0201 	orr.w	r2, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3301      	adds	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	4a09      	ldr	r2, [pc, #36]	; (800452c <USB_CoreReset+0x60>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d901      	bls.n	8004510 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e006      	b.n	800451e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b01      	cmp	r3, #1
 800451a:	d0f1      	beq.n	8004500 <USB_CoreReset+0x34>

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	00030d40 	.word	0x00030d40

08004530 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004530:	b084      	sub	sp, #16
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	f107 001c 	add.w	r0, r7, #28
 800453e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800454c:	461a      	mov	r2, r3
 800454e:	2300      	movs	r3, #0
 8004550:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d018      	beq.n	80045b4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	2b01      	cmp	r3, #1
 8004586:	d10a      	bne.n	800459e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004596:	f043 0304 	orr.w	r3, r3, #4
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	e014      	b.n	80045c8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045ac:	f023 0304 	bic.w	r3, r3, #4
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	e009      	b.n	80045c8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045c2:	f023 0304 	bic.w	r3, r3, #4
 80045c6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80045c8:	2110      	movs	r1, #16
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff fe82 	bl	80042d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff fea3 	bl	800431c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	e015      	b.n	8004608 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e8:	461a      	mov	r2, r3
 80045ea:	f04f 33ff 	mov.w	r3, #4294967295
 80045ee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045fc:	461a      	mov	r2, r3
 80045fe:	2300      	movs	r3, #0
 8004600:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3301      	adds	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	429a      	cmp	r2, r3
 800460e:	d3e5      	bcc.n	80045dc <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f04f 32ff 	mov.w	r2, #4294967295
 800461c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00b      	beq.n	8004642 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004630:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a13      	ldr	r2, [pc, #76]	; (8004684 <USB_HostInit+0x154>)
 8004636:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a13      	ldr	r2, [pc, #76]	; (8004688 <USB_HostInit+0x158>)
 800463c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004640:	e009      	b.n	8004656 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2280      	movs	r2, #128	; 0x80
 8004646:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a10      	ldr	r2, [pc, #64]	; (800468c <USB_HostInit+0x15c>)
 800464c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a0f      	ldr	r2, [pc, #60]	; (8004690 <USB_HostInit+0x160>)
 8004652:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	2b00      	cmp	r3, #0
 800465a:	d105      	bne.n	8004668 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	f043 0210 	orr.w	r2, r3, #16
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699a      	ldr	r2, [r3, #24]
 800466c:	4b09      	ldr	r3, [pc, #36]	; (8004694 <USB_HostInit+0x164>)
 800466e:	4313      	orrs	r3, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004680:	b004      	add	sp, #16
 8004682:	4770      	bx	lr
 8004684:	01000200 	.word	0x01000200
 8004688:	00e00300 	.word	0x00e00300
 800468c:	00600080 	.word	0x00600080
 8004690:	004000e0 	.word	0x004000e0
 8004694:	a3200008 	.word	0xa3200008

08004698 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046b6:	f023 0303 	bic.w	r3, r3, #3
 80046ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80046d0:	4313      	orrs	r3, r2
 80046d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d107      	bne.n	80046ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046e0:	461a      	mov	r2, r3
 80046e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80046e6:	6053      	str	r3, [r2, #4]
 80046e8:	e009      	b.n	80046fe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80046ea:	78fb      	ldrb	r3, [r7, #3]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d106      	bne.n	80046fe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046f6:	461a      	mov	r2, r3
 80046f8:	f241 7370 	movw	r3, #6000	; 0x1770
 80046fc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800472c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800473c:	2064      	movs	r0, #100	; 0x64
 800473e:	f7fc fd13 	bl	8001168 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800474a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800474e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004750:	200a      	movs	r0, #10
 8004752:	f7fc fd09 	bl	8001168 <HAL_Delay>

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004784:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d109      	bne.n	80047a4 <USB_DriveVbus+0x44>
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d106      	bne.n	80047a4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800479e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047a2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ae:	d109      	bne.n	80047c4 <USB_DriveVbus+0x64>
 80047b0:	78fb      	ldrb	r3, [r7, #3]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80047be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047c2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b085      	sub	sp, #20
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	0c5b      	lsrs	r3, r3, #17
 80047f0:	f003 0303 	and.w	r3, r3, #3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	b29b      	uxth	r3, r3
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
	...

08004824 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	4608      	mov	r0, r1
 800482e:	4611      	mov	r1, r2
 8004830:	461a      	mov	r2, r3
 8004832:	4603      	mov	r3, r0
 8004834:	70fb      	strb	r3, [r7, #3]
 8004836:	460b      	mov	r3, r1
 8004838:	70bb      	strb	r3, [r7, #2]
 800483a:	4613      	mov	r3, r2
 800483c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004846:	78fb      	ldrb	r3, [r7, #3]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4413      	add	r3, r2
 800484e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004852:	461a      	mov	r2, r3
 8004854:	f04f 33ff 	mov.w	r3, #4294967295
 8004858:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800485a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800485e:	2b03      	cmp	r3, #3
 8004860:	d87e      	bhi.n	8004960 <USB_HC_Init+0x13c>
 8004862:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <USB_HC_Init+0x44>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	08004879 	.word	0x08004879
 800486c:	08004923 	.word	0x08004923
 8004870:	08004879 	.word	0x08004879
 8004874:	080048e5 	.word	0x080048e5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	4413      	add	r3, r2
 8004880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004884:	461a      	mov	r2, r3
 8004886:	f240 439d 	movw	r3, #1181	; 0x49d
 800488a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800488c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004890:	2b00      	cmp	r3, #0
 8004892:	da10      	bge.n	80048b6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4413      	add	r3, r2
 800489c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	78fa      	ldrb	r2, [r7, #3]
 80048a4:	0151      	lsls	r1, r2, #5
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	440a      	add	r2, r1
 80048aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80048b4:	e057      	b.n	8004966 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d051      	beq.n	8004966 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	0151      	lsls	r1, r2, #5
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	440a      	add	r2, r1
 80048d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80048e0:	60d3      	str	r3, [r2, #12]
      break;
 80048e2:	e040      	b.n	8004966 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f0:	461a      	mov	r2, r3
 80048f2:	f240 639d 	movw	r3, #1693	; 0x69d
 80048f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80048f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	da34      	bge.n	800496a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4413      	add	r3, r2
 8004908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	78fa      	ldrb	r2, [r7, #3]
 8004910:	0151      	lsls	r1, r2, #5
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	440a      	add	r2, r1
 8004916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800491a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800491e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004920:	e023      	b.n	800496a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4413      	add	r3, r2
 800492a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492e:	461a      	mov	r2, r3
 8004930:	f240 2325 	movw	r3, #549	; 0x225
 8004934:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004936:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800493a:	2b00      	cmp	r3, #0
 800493c:	da17      	bge.n	800496e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800493e:	78fb      	ldrb	r3, [r7, #3]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	4413      	add	r3, r2
 8004946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	78fa      	ldrb	r2, [r7, #3]
 800494e:	0151      	lsls	r1, r2, #5
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	440a      	add	r2, r1
 8004954:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004958:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800495c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800495e:	e006      	b.n	800496e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	77fb      	strb	r3, [r7, #31]
      break;
 8004964:	e004      	b.n	8004970 <USB_HC_Init+0x14c>
      break;
 8004966:	bf00      	nop
 8004968:	e002      	b.n	8004970 <USB_HC_Init+0x14c>
      break;
 800496a:	bf00      	nop
 800496c:	e000      	b.n	8004970 <USB_HC_Init+0x14c>
      break;
 800496e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004976:	699a      	ldr	r2, [r3, #24]
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	2101      	movs	r1, #1
 8004980:	fa01 f303 	lsl.w	r3, r1, r3
 8004984:	6939      	ldr	r1, [r7, #16]
 8004986:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800498a:	4313      	orrs	r3, r2
 800498c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800499a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	da03      	bge.n	80049aa <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80049a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049a6:	61bb      	str	r3, [r7, #24]
 80049a8:	e001      	b.n	80049ae <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7ff ff0f 	bl	80047d2 <USB_GetHostSpeed>
 80049b4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80049b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d106      	bne.n	80049cc <USB_HC_Init+0x1a8>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d003      	beq.n	80049cc <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80049c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049c8:	617b      	str	r3, [r7, #20]
 80049ca:	e001      	b.n	80049d0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80049d0:	787b      	ldrb	r3, [r7, #1]
 80049d2:	059b      	lsls	r3, r3, #22
 80049d4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80049d8:	78bb      	ldrb	r3, [r7, #2]
 80049da:	02db      	lsls	r3, r3, #11
 80049dc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80049e0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80049e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80049e6:	049b      	lsls	r3, r3, #18
 80049e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80049ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80049ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80049f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80049f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	0159      	lsls	r1, r3, #5
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	440b      	add	r3, r1
 8004a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a06:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a0c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004a0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004a12:	2b03      	cmp	r3, #3
 8004a14:	d10f      	bne.n	8004a36 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004a16:	78fb      	ldrb	r3, [r7, #3]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	78fa      	ldrb	r2, [r7, #3]
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a34:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004a36:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3720      	adds	r7, #32
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08c      	sub	sp, #48	; 0x30
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	785b      	ldrb	r3, [r3, #1]
 8004a56:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a5c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d02d      	beq.n	8004ac6 <USB_HC_StartXfer+0x86>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	791b      	ldrb	r3, [r3, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d129      	bne.n	8004ac6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d117      	bne.n	8004aa8 <USB_HC_StartXfer+0x68>
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	79db      	ldrb	r3, [r3, #7]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <USB_HC_StartXfer+0x48>
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	79db      	ldrb	r3, [r3, #7]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d10f      	bne.n	8004aa8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	0151      	lsls	r1, r2, #5
 8004a9a:	6a3a      	ldr	r2, [r7, #32]
 8004a9c:	440a      	add	r2, r1
 8004a9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10b      	bne.n	8004ac6 <USB_HC_StartXfer+0x86>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	795b      	ldrb	r3, [r3, #5]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d107      	bne.n	8004ac6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	785b      	ldrb	r3, [r3, #1]
 8004aba:	4619      	mov	r1, r3
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 fa2f 	bl	8004f20 <USB_DoPing>
      return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e0f8      	b.n	8004cb8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d018      	beq.n	8004b00 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	8912      	ldrh	r2, [r2, #8]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	8912      	ldrh	r2, [r2, #8]
 8004ade:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ae2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004ae4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ae6:	8b7b      	ldrh	r3, [r7, #26]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d90b      	bls.n	8004b04 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004aec:	8b7b      	ldrh	r3, [r7, #26]
 8004aee:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004af0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	8912      	ldrh	r2, [r2, #8]
 8004af6:	fb02 f203 	mul.w	r2, r2, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	611a      	str	r2, [r3, #16]
 8004afe:	e001      	b.n	8004b04 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004b00:	2301      	movs	r3, #1
 8004b02:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	78db      	ldrb	r3, [r3, #3]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d007      	beq.n	8004b1c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004b0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	8912      	ldrh	r2, [r2, #8]
 8004b12:	fb02 f203 	mul.w	r2, r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	611a      	str	r2, [r3, #16]
 8004b1a:	e003      	b.n	8004b24 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004b2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b2e:	04d9      	lsls	r1, r3, #19
 8004b30:	4b63      	ldr	r3, [pc, #396]	; (8004cc0 <USB_HC_StartXfer+0x280>)
 8004b32:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004b34:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	7a9b      	ldrb	r3, [r3, #10]
 8004b3a:	075b      	lsls	r3, r3, #29
 8004b3c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004b40:	69f9      	ldr	r1, [r7, #28]
 8004b42:	0148      	lsls	r0, r1, #5
 8004b44:	6a39      	ldr	r1, [r7, #32]
 8004b46:	4401      	add	r1, r0
 8004b48:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004b4c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004b4e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004b50:	79fb      	ldrb	r3, [r7, #7]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d009      	beq.n	8004b6a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	68d9      	ldr	r1, [r3, #12]
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b66:	460a      	mov	r2, r1
 8004b68:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bf0c      	ite	eq
 8004b7a:	2301      	moveq	r3, #1
 8004b7c:	2300      	movne	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	0151      	lsls	r1, r2, #5
 8004b94:	6a3a      	ldr	r2, [r7, #32]
 8004b96:	440a      	add	r2, r1
 8004b98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b9c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004ba0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	7e7b      	ldrb	r3, [r7, #25]
 8004bb2:	075b      	lsls	r3, r3, #29
 8004bb4:	69f9      	ldr	r1, [r7, #28]
 8004bb6:	0148      	lsls	r0, r1, #5
 8004bb8:	6a39      	ldr	r1, [r7, #32]
 8004bba:	4401      	add	r1, r0
 8004bbc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bda:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	78db      	ldrb	r3, [r3, #3]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d004      	beq.n	8004bee <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	e003      	b.n	8004bf6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bf4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bfc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	e04e      	b.n	8004cb8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	78db      	ldrb	r3, [r3, #3]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d149      	bne.n	8004cb6 <USB_HC_StartXfer+0x276>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d045      	beq.n	8004cb6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	79db      	ldrb	r3, [r3, #7]
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d830      	bhi.n	8004c94 <USB_HC_StartXfer+0x254>
 8004c32:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <USB_HC_StartXfer+0x1f8>)
 8004c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c38:	08004c49 	.word	0x08004c49
 8004c3c:	08004c6d 	.word	0x08004c6d
 8004c40:	08004c49 	.word	0x08004c49
 8004c44:	08004c6d 	.word	0x08004c6d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	3303      	adds	r3, #3
 8004c4e:	089b      	lsrs	r3, r3, #2
 8004c50:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004c52:	8afa      	ldrh	r2, [r7, #22]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d91c      	bls.n	8004c98 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f043 0220 	orr.w	r2, r3, #32
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	619a      	str	r2, [r3, #24]
        }
        break;
 8004c6a:	e015      	b.n	8004c98 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	3303      	adds	r3, #3
 8004c72:	089b      	lsrs	r3, r3, #2
 8004c74:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004c76:	8afa      	ldrh	r2, [r7, #22]
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d90a      	bls.n	8004c9c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	619a      	str	r2, [r3, #24]
        }
        break;
 8004c92:	e003      	b.n	8004c9c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004c94:	bf00      	nop
 8004c96:	e002      	b.n	8004c9e <USB_HC_StartXfer+0x25e>
        break;
 8004c98:	bf00      	nop
 8004c9a:	e000      	b.n	8004c9e <USB_HC_StartXfer+0x25e>
        break;
 8004c9c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	68d9      	ldr	r1, [r3, #12]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	785a      	ldrb	r2, [r3, #1]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2000      	movs	r0, #0
 8004cae:	9000      	str	r0, [sp, #0]
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f7ff fb53 	bl	800435c <USB_WritePacket>
  }

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3728      	adds	r7, #40	; 0x28
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	1ff80000 	.word	0x1ff80000

08004cc4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	b29b      	uxth	r3, r3
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b089      	sub	sp, #36	; 0x24
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8004cf6:	78fb      	ldrb	r3, [r7, #3]
 8004cf8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	0c9b      	lsrs	r3, r3, #18
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	0fdb      	lsrs	r3, r3, #31
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d104      	bne.n	8004d40 <USB_HC_Halt+0x5a>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e0e8      	b.n	8004f12 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <USB_HC_Halt+0x66>
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d173      	bne.n	8004e34 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	0151      	lsls	r1, r2, #5
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	440a      	add	r2, r1
 8004d62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d6a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f040 80cb 	bne.w	8004f10 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d143      	bne.n	8004e0e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004da0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004da4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	0151      	lsls	r1, r2, #5
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	440a      	add	r2, r1
 8004dbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dc4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	0151      	lsls	r1, r2, #5
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	440a      	add	r2, r1
 8004ddc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004de0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004de4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	3301      	adds	r3, #1
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004df2:	d81d      	bhi.n	8004e30 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e0a:	d0ec      	beq.n	8004de6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004e0c:	e080      	b.n	8004f10 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	0151      	lsls	r1, r2, #5
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	440a      	add	r2, r1
 8004e24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e2c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004e2e:	e06f      	b.n	8004f10 <USB_HC_Halt+0x22a>
            break;
 8004e30:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004e32:	e06d      	b.n	8004f10 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	0151      	lsls	r1, r2, #5
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	440a      	add	r2, r1
 8004e4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e52:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d143      	bne.n	8004eec <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	0151      	lsls	r1, r2, #5
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	440a      	add	r2, r1
 8004e7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e82:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	0151      	lsls	r1, r2, #5
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	440a      	add	r2, r1
 8004e9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ea2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ebe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ec2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	61fb      	str	r3, [r7, #28]
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ed0:	d81d      	bhi.n	8004f0e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ee8:	d0ec      	beq.n	8004ec4 <USB_HC_Halt+0x1de>
 8004eea:	e011      	b.n	8004f10 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	0151      	lsls	r1, r2, #5
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	440a      	add	r2, r1
 8004f02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	e000      	b.n	8004f10 <USB_HC_Halt+0x22a>
          break;
 8004f0e:	bf00      	nop
    }
  }

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3724      	adds	r7, #36	; 0x24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
	...

08004f20 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004f34:	2301      	movs	r3, #1
 8004f36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	04da      	lsls	r2, r3, #19
 8004f3c:	4b15      	ldr	r3, [pc, #84]	; (8004f94 <USB_DoPing+0x74>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f50:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f68:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f70:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	1ff80000 	.word	0x1ff80000

08004f98 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff f935 	bl	8004218 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004fae:	2110      	movs	r1, #16
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff f98f 	bl	80042d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff f9b0 	bl	800431c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	e01f      	b.n	8005002 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fd8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fe0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fe8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	3301      	adds	r3, #1
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	2b0f      	cmp	r3, #15
 8005006:	d9dc      	bls.n	8004fc2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	e034      	b.n	8005078 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4413      	add	r3, r2
 8005016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005024:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800502c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005034:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005042:	461a      	mov	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	3301      	adds	r3, #1
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005054:	d80c      	bhi.n	8005070 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800506c:	d0ec      	beq.n	8005048 <USB_StopHost+0xb0>
 800506e:	e000      	b.n	8005072 <USB_StopHost+0xda>
        break;
 8005070:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	3301      	adds	r3, #1
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b0f      	cmp	r3, #15
 800507c:	d9c7      	bls.n	800500e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005084:	461a      	mov	r2, r3
 8005086:	f04f 33ff 	mov.w	r3, #4294967295
 800508a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f04f 32ff 	mov.w	r2, #4294967295
 8005092:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff f8ae 	bl	80041f6 <USB_EnableGlobalInt>

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80050a8:	4904      	ldr	r1, [pc, #16]	; (80050bc <MX_FATFS_Init+0x18>)
 80050aa:	4805      	ldr	r0, [pc, #20]	; (80050c0 <MX_FATFS_Init+0x1c>)
 80050ac:	f005 fff8 	bl	800b0a0 <FATFS_LinkDriver>
 80050b0:	4603      	mov	r3, r0
 80050b2:	461a      	mov	r2, r3
 80050b4:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <MX_FATFS_Init+0x20>)
 80050b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80050b8:	bf00      	nop
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	2000219c 	.word	0x2000219c
 80050c0:	0800d2ec 	.word	0x0800d2ec
 80050c4:	20004204 	.word	0x20004204

080050c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80050cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	4619      	mov	r1, r3
 8005102:	4808      	ldr	r0, [pc, #32]	; (8005124 <USBH_status+0x34>)
 8005104:	f000 ff98 	bl	8006038 <USBH_MSC_UnitIsReady>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <USBH_status+0x24>
  {
    res = RES_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	73fb      	strb	r3, [r7, #15]
 8005112:	e001      	b.n	8005118 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005118:	7bfb      	ldrb	r3, [r7, #15]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20004208 	.word	0x20004208

08005128 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b094      	sub	sp, #80	; 0x50
 800512c:	af02      	add	r7, sp, #8
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	4603      	mov	r3, r0
 8005136:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800513e:	7bf9      	ldrb	r1, [r7, #15]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	4818      	ldr	r0, [pc, #96]	; (80051ac <USBH_read+0x84>)
 800514a:	f000 ffbf 	bl	80060cc <USBH_MSC_Read>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d103      	bne.n	800515c <USBH_read+0x34>
  {
    res = RES_OK;
 8005154:	2300      	movs	r3, #0
 8005156:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800515a:	e020      	b.n	800519e <USBH_read+0x76>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800515c:	f107 0210 	add.w	r2, r7, #16
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	4619      	mov	r1, r3
 8005164:	4811      	ldr	r0, [pc, #68]	; (80051ac <USBH_read+0x84>)
 8005166:	f000 ff8d 	bl	8006084 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800516a:	7f7b      	ldrb	r3, [r7, #29]
 800516c:	2b3a      	cmp	r3, #58	; 0x3a
 800516e:	d005      	beq.n	800517c <USBH_read+0x54>
 8005170:	2b3a      	cmp	r3, #58	; 0x3a
 8005172:	dc10      	bgt.n	8005196 <USBH_read+0x6e>
 8005174:	2b04      	cmp	r3, #4
 8005176:	d001      	beq.n	800517c <USBH_read+0x54>
 8005178:	2b28      	cmp	r3, #40	; 0x28
 800517a:	d10c      	bne.n	8005196 <USBH_read+0x6e>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 800517c:	480c      	ldr	r0, [pc, #48]	; (80051b0 <USBH_read+0x88>)
 800517e:	f006 fd7f 	bl	800bc80 <iprintf>
 8005182:	480c      	ldr	r0, [pc, #48]	; (80051b4 <USBH_read+0x8c>)
 8005184:	f006 fd7c 	bl	800bc80 <iprintf>
 8005188:	200a      	movs	r0, #10
 800518a:	f006 fd91 	bl	800bcb0 <putchar>
      res = RES_NOTRDY;
 800518e:	2303      	movs	r3, #3
 8005190:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005194:	e003      	b.n	800519e <USBH_read+0x76>

    default:
      res = RES_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800519c:	bf00      	nop
    }
  }

  return res;
 800519e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3748      	adds	r7, #72	; 0x48
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20004208 	.word	0x20004208
 80051b0:	0800cb98 	.word	0x0800cb98
 80051b4:	0800cba0 	.word	0x0800cba0

080051b8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b094      	sub	sp, #80	; 0x50
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4603      	mov	r3, r0
 80051c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80051ce:	7bf9      	ldrb	r1, [r7, #15]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	4820      	ldr	r0, [pc, #128]	; (800525c <USBH_write+0xa4>)
 80051da:	f000 ffe0 	bl	800619e <USBH_MSC_Write>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d103      	bne.n	80051ec <USBH_write+0x34>
  {
    res = RES_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80051ea:	e031      	b.n	8005250 <USBH_write+0x98>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80051ec:	f107 0210 	add.w	r2, r7, #16
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	4619      	mov	r1, r3
 80051f4:	4819      	ldr	r0, [pc, #100]	; (800525c <USBH_write+0xa4>)
 80051f6:	f000 ff45 	bl	8006084 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80051fa:	7f7b      	ldrb	r3, [r7, #29]
 80051fc:	2b3a      	cmp	r3, #58	; 0x3a
 80051fe:	d016      	beq.n	800522e <USBH_write+0x76>
 8005200:	2b3a      	cmp	r3, #58	; 0x3a
 8005202:	dc21      	bgt.n	8005248 <USBH_write+0x90>
 8005204:	2b28      	cmp	r3, #40	; 0x28
 8005206:	d012      	beq.n	800522e <USBH_write+0x76>
 8005208:	2b28      	cmp	r3, #40	; 0x28
 800520a:	dc1d      	bgt.n	8005248 <USBH_write+0x90>
 800520c:	2b04      	cmp	r3, #4
 800520e:	d00e      	beq.n	800522e <USBH_write+0x76>
 8005210:	2b27      	cmp	r3, #39	; 0x27
 8005212:	d119      	bne.n	8005248 <USBH_write+0x90>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 8005214:	4812      	ldr	r0, [pc, #72]	; (8005260 <USBH_write+0xa8>)
 8005216:	f006 fd33 	bl	800bc80 <iprintf>
 800521a:	4812      	ldr	r0, [pc, #72]	; (8005264 <USBH_write+0xac>)
 800521c:	f006 fd30 	bl	800bc80 <iprintf>
 8005220:	200a      	movs	r0, #10
 8005222:	f006 fd45 	bl	800bcb0 <putchar>
      res = RES_WRPRT;
 8005226:	2302      	movs	r3, #2
 8005228:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800522c:	e010      	b.n	8005250 <USBH_write+0x98>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 800522e:	480c      	ldr	r0, [pc, #48]	; (8005260 <USBH_write+0xa8>)
 8005230:	f006 fd26 	bl	800bc80 <iprintf>
 8005234:	480c      	ldr	r0, [pc, #48]	; (8005268 <USBH_write+0xb0>)
 8005236:	f006 fd23 	bl	800bc80 <iprintf>
 800523a:	200a      	movs	r0, #10
 800523c:	f006 fd38 	bl	800bcb0 <putchar>
      res = RES_NOTRDY;
 8005240:	2303      	movs	r3, #3
 8005242:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005246:	e003      	b.n	8005250 <USBH_write+0x98>

    default:
      res = RES_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800524e:	bf00      	nop
    }
  }

  return res;
 8005250:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005254:	4618      	mov	r0, r3
 8005256:	3748      	adds	r7, #72	; 0x48
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20004208 	.word	0x20004208
 8005260:	0800cb98 	.word	0x0800cb98
 8005264:	0800cbb8 	.word	0x0800cbb8
 8005268:	0800cba0 	.word	0x0800cba0

0800526c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b090      	sub	sp, #64	; 0x40
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	603a      	str	r2, [r7, #0]
 8005276:	71fb      	strb	r3, [r7, #7]
 8005278:	460b      	mov	r3, r1
 800527a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005282:	79bb      	ldrb	r3, [r7, #6]
 8005284:	2b03      	cmp	r3, #3
 8005286:	d852      	bhi.n	800532e <USBH_ioctl+0xc2>
 8005288:	a201      	add	r2, pc, #4	; (adr r2, 8005290 <USBH_ioctl+0x24>)
 800528a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528e:	bf00      	nop
 8005290:	080052a1 	.word	0x080052a1
 8005294:	080052a9 	.word	0x080052a9
 8005298:	080052d3 	.word	0x080052d3
 800529c:	080052ff 	.word	0x080052ff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80052a6:	e045      	b.n	8005334 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80052a8:	f107 0208 	add.w	r2, r7, #8
 80052ac:	79fb      	ldrb	r3, [r7, #7]
 80052ae:	4619      	mov	r1, r3
 80052b0:	4823      	ldr	r0, [pc, #140]	; (8005340 <USBH_ioctl+0xd4>)
 80052b2:	f000 fee7 	bl	8006084 <USBH_MSC_GetLUNInfo>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d106      	bne.n	80052ca <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80052c8:	e034      	b.n	8005334 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80052d0:	e030      	b.n	8005334 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80052d2:	f107 0208 	add.w	r2, r7, #8
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	4619      	mov	r1, r3
 80052da:	4819      	ldr	r0, [pc, #100]	; (8005340 <USBH_ioctl+0xd4>)
 80052dc:	f000 fed2 	bl	8006084 <USBH_MSC_GetLUNInfo>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d107      	bne.n	80052f6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80052e6:	8a3b      	ldrh	r3, [r7, #16]
 80052e8:	461a      	mov	r2, r3
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80052f4:	e01e      	b.n	8005334 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80052fc:	e01a      	b.n	8005334 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80052fe:	f107 0208 	add.w	r2, r7, #8
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	4619      	mov	r1, r3
 8005306:	480e      	ldr	r0, [pc, #56]	; (8005340 <USBH_ioctl+0xd4>)
 8005308:	f000 febc 	bl	8006084 <USBH_MSC_GetLUNInfo>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d109      	bne.n	8005326 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005312:	8a3b      	ldrh	r3, [r7, #16]
 8005314:	0a5b      	lsrs	r3, r3, #9
 8005316:	b29b      	uxth	r3, r3
 8005318:	461a      	mov	r2, r3
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005324:	e006      	b.n	8005334 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800532c:	e002      	b.n	8005334 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800532e:	2304      	movs	r3, #4
 8005330:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005334:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005338:	4618      	mov	r0, r3
 800533a:	3740      	adds	r7, #64	; 0x40
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20004208 	.word	0x20004208

08005344 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005344:	b590      	push	{r4, r7, lr}
 8005346:	b089      	sub	sp, #36	; 0x24
 8005348:	af04      	add	r7, sp, #16
 800534a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005352:	7919      	ldrb	r1, [r3, #4]
 8005354:	2350      	movs	r3, #80	; 0x50
 8005356:	2206      	movs	r2, #6
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f001 fe1b 	bl	8006f94 <USBH_FindInterface>
 800535e:	4603      	mov	r3, r0
 8005360:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005362:	7bfb      	ldrb	r3, [r7, #15]
 8005364:	2bff      	cmp	r3, #255	; 0xff
 8005366:	d002      	beq.n	800536e <USBH_MSC_InterfaceInit+0x2a>
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d90f      	bls.n	800538e <USBH_MSC_InterfaceInit+0x4a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800536e:	4886      	ldr	r0, [pc, #536]	; (8005588 <USBH_MSC_InterfaceInit+0x244>)
 8005370:	f006 fc86 	bl	800bc80 <iprintf>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4619      	mov	r1, r3
 800537e:	4883      	ldr	r0, [pc, #524]	; (800558c <USBH_MSC_InterfaceInit+0x248>)
 8005380:	f006 fc7e 	bl	800bc80 <iprintf>
 8005384:	200a      	movs	r0, #10
 8005386:	f006 fc93 	bl	800bcb0 <putchar>
    return USBH_FAIL;
 800538a:	2302      	movs	r3, #2
 800538c:	e0f8      	b.n	8005580 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800538e:	7bfb      	ldrb	r3, [r7, #15]
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f001 fd96 	bl	8006ec4 <USBH_SelectInterface>
 8005398:	4603      	mov	r3, r0
 800539a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800539c:	7bbb      	ldrb	r3, [r7, #14]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <USBH_MSC_InterfaceInit+0x62>
  {
    return USBH_FAIL;
 80053a2:	2302      	movs	r3, #2
 80053a4:	e0ec      	b.n	8005580 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80053ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80053b0:	f006 fb96 	bl	800bae0 <malloc>
 80053b4:	4603      	mov	r3, r0
 80053b6:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <USBH_MSC_InterfaceInit+0x9a>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 80053c8:	486f      	ldr	r0, [pc, #444]	; (8005588 <USBH_MSC_InterfaceInit+0x244>)
 80053ca:	f006 fc59 	bl	800bc80 <iprintf>
 80053ce:	4870      	ldr	r0, [pc, #448]	; (8005590 <USBH_MSC_InterfaceInit+0x24c>)
 80053d0:	f006 fc56 	bl	800bc80 <iprintf>
 80053d4:	200a      	movs	r0, #10
 80053d6:	f006 fc6b 	bl	800bcb0 <putchar>
    return USBH_FAIL;
 80053da:	2302      	movs	r3, #2
 80053dc:	e0d0      	b.n	8005580 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80053de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053e2:	2100      	movs	r1, #0
 80053e4:	68b8      	ldr	r0, [r7, #8]
 80053e6:	f006 fb99 	bl	800bb1c <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	211a      	movs	r1, #26
 80053f0:	fb01 f303 	mul.w	r3, r1, r3
 80053f4:	4413      	add	r3, r2
 80053f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	b25b      	sxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	da16      	bge.n	8005430 <USBH_MSC_InterfaceInit+0xec>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	211a      	movs	r1, #26
 8005408:	fb01 f303 	mul.w	r3, r1, r3
 800540c:	4413      	add	r3, r2
 800540e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005412:	781a      	ldrb	r2, [r3, #0]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005418:	7bfb      	ldrb	r3, [r7, #15]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	211a      	movs	r1, #26
 800541e:	fb01 f303 	mul.w	r3, r1, r3
 8005422:	4413      	add	r3, r2
 8005424:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005428:	881a      	ldrh	r2, [r3, #0]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	815a      	strh	r2, [r3, #10]
 800542e:	e015      	b.n	800545c <USBH_MSC_InterfaceInit+0x118>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	211a      	movs	r1, #26
 8005436:	fb01 f303 	mul.w	r3, r1, r3
 800543a:	4413      	add	r3, r2
 800543c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005440:	781a      	ldrb	r2, [r3, #0]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	211a      	movs	r1, #26
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	4413      	add	r3, r2
 8005452:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005456:	881a      	ldrh	r2, [r3, #0]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	211a      	movs	r1, #26
 8005462:	fb01 f303 	mul.w	r3, r1, r3
 8005466:	4413      	add	r3, r2
 8005468:	f203 3356 	addw	r3, r3, #854	; 0x356
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	b25b      	sxtb	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	da16      	bge.n	80054a2 <USBH_MSC_InterfaceInit+0x15e>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	211a      	movs	r1, #26
 800547a:	fb01 f303 	mul.w	r3, r1, r3
 800547e:	4413      	add	r3, r2
 8005480:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005484:	781a      	ldrb	r2, [r3, #0]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800548a:	7bfb      	ldrb	r3, [r7, #15]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	211a      	movs	r1, #26
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	4413      	add	r3, r2
 8005496:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800549a:	881a      	ldrh	r2, [r3, #0]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	815a      	strh	r2, [r3, #10]
 80054a0:	e015      	b.n	80054ce <USBH_MSC_InterfaceInit+0x18a>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	211a      	movs	r1, #26
 80054a8:	fb01 f303 	mul.w	r3, r1, r3
 80054ac:	4413      	add	r3, r2
 80054ae:	f203 3356 	addw	r3, r3, #854	; 0x356
 80054b2:	781a      	ldrb	r2, [r3, #0]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	211a      	movs	r1, #26
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80054c8:	881a      	ldrh	r2, [r3, #0]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2200      	movs	r2, #0
 80054d2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2200      	movs	r2, #0
 80054d8:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2200      	movs	r2, #0
 80054de:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	799b      	ldrb	r3, [r3, #6]
 80054e4:	4619      	mov	r1, r3
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f003 f8cf 	bl	800868a <USBH_AllocPipe>
 80054ec:	4603      	mov	r3, r0
 80054ee:	461a      	mov	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	79db      	ldrb	r3, [r3, #7]
 80054f8:	4619      	mov	r1, r3
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f003 f8c5 	bl	800868a <USBH_AllocPipe>
 8005500:	4603      	mov	r3, r0
 8005502:	461a      	mov	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 feed 	bl	80062e8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	7959      	ldrb	r1, [r3, #5]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	7998      	ldrb	r0, [r3, #6]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	8912      	ldrh	r2, [r2, #8]
 8005526:	9202      	str	r2, [sp, #8]
 8005528:	2202      	movs	r2, #2
 800552a:	9201      	str	r2, [sp, #4]
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	4623      	mov	r3, r4
 8005530:	4602      	mov	r2, r0
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f003 f87a 	bl	800862c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	7919      	ldrb	r1, [r3, #4]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	79d8      	ldrb	r0, [r3, #7]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	8952      	ldrh	r2, [r2, #10]
 8005550:	9202      	str	r2, [sp, #8]
 8005552:	2202      	movs	r2, #2
 8005554:	9201      	str	r2, [sp, #4]
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	4623      	mov	r3, r4
 800555a:	4602      	mov	r2, r0
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f003 f865 	bl	800862c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	791b      	ldrb	r3, [r3, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	4619      	mov	r1, r3
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f006 f9da 	bl	800b924 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	795b      	ldrb	r3, [r3, #5]
 8005574:	2200      	movs	r2, #0
 8005576:	4619      	mov	r1, r3
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f006 f9d3 	bl	800b924 <USBH_LL_SetToggle>

  return USBH_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	bd90      	pop	{r4, r7, pc}
 8005588:	0800cbdc 	.word	0x0800cbdc
 800558c:	0800cbe8 	.word	0x0800cbe8
 8005590:	0800cc10 	.word	0x0800cc10

08005594 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	795b      	ldrb	r3, [r3, #5]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00e      	beq.n	80055cc <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	795b      	ldrb	r3, [r3, #5]
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f003 f858 	bl	800866a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	795b      	ldrb	r3, [r3, #5]
 80055be:	4619      	mov	r1, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f003 f883 	bl	80086cc <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	791b      	ldrb	r3, [r3, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00e      	beq.n	80055f2 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	791b      	ldrb	r3, [r3, #4]
 80055d8:	4619      	mov	r1, r3
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f003 f845 	bl	800866a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	791b      	ldrb	r3, [r3, #4]
 80055e4:	4619      	mov	r1, r3
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f003 f870 	bl	80086cc <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00b      	beq.n	8005616 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	4618      	mov	r0, r3
 8005608:	f006 fa72 	bl	800baf0 <free>
    phost->pActiveClass->pData = 0U;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005612:	2200      	movs	r2, #0
 8005614:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005632:	2301      	movs	r3, #1
 8005634:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	7b9b      	ldrb	r3, [r3, #14]
 800563a:	2b03      	cmp	r3, #3
 800563c:	d04a      	beq.n	80056d4 <USBH_MSC_ClassRequest+0xb4>
 800563e:	2b03      	cmp	r3, #3
 8005640:	dc54      	bgt.n	80056ec <USBH_MSC_ClassRequest+0xcc>
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <USBH_MSC_ClassRequest+0x2a>
 8005646:	2b02      	cmp	r3, #2
 8005648:	d150      	bne.n	80056ec <USBH_MSC_ClassRequest+0xcc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fe2b 	bl	80062aa <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005654:	4603      	mov	r3, r0
 8005656:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	2b03      	cmp	r3, #3
 800565c:	d104      	bne.n	8005668 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2200      	movs	r2, #0
 8005662:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d140      	bne.n	80056f0 <USBH_MSC_ClassRequest+0xd0>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d804      	bhi.n	8005680 <USBH_MSC_ClassRequest+0x60>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	3301      	adds	r3, #1
 800567c:	b2da      	uxtb	r2, r3
 800567e:	e000      	b.n	8005682 <USBH_MSC_ClassRequest+0x62>
 8005680:	2202      	movs	r2, #2
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	4619      	mov	r1, r3
 800568c:	481c      	ldr	r0, [pc, #112]	; (8005700 <USBH_MSC_ClassRequest+0xe0>)
 800568e:	f006 faf7 	bl	800bc80 <iprintf>
 8005692:	200a      	movs	r0, #10
 8005694:	f006 fb0c 	bl	800bcb0 <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005698:	2300      	movs	r3, #0
 800569a:	73bb      	strb	r3, [r7, #14]
 800569c:	e014      	b.n	80056c8 <USBH_MSC_ClassRequest+0xa8>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800569e:	7bbb      	ldrb	r3, [r7, #14]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	2134      	movs	r1, #52	; 0x34
 80056a4:	fb01 f303 	mul.w	r3, r1, r3
 80056a8:	4413      	add	r3, r2
 80056aa:	3392      	adds	r3, #146	; 0x92
 80056ac:	2202      	movs	r2, #2
 80056ae:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80056b0:	7bbb      	ldrb	r3, [r7, #14]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	2134      	movs	r1, #52	; 0x34
 80056b6:	fb01 f303 	mul.w	r3, r1, r3
 80056ba:	4413      	add	r3, r2
 80056bc:	33c1      	adds	r3, #193	; 0xc1
 80056be:	2200      	movs	r2, #0
 80056c0:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80056c2:	7bbb      	ldrb	r3, [r7, #14]
 80056c4:	3301      	adds	r3, #1
 80056c6:	73bb      	strb	r3, [r7, #14]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	7bba      	ldrb	r2, [r7, #14]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d3e5      	bcc.n	800569e <USBH_MSC_ClassRequest+0x7e>
        }
      }
      break;
 80056d2:	e00d      	b.n	80056f0 <USBH_MSC_ClassRequest+0xd0>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80056d4:	2100      	movs	r1, #0
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f002 fb69 	bl	8007dae <USBH_ClrFeature>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d108      	bne.n	80056f4 <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	7bda      	ldrb	r2, [r3, #15]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	739a      	strb	r2, [r3, #14]
      }
      break;
 80056ea:	e003      	b.n	80056f4 <USBH_MSC_ClassRequest+0xd4>

    default:
      break;
 80056ec:	bf00      	nop
 80056ee:	e002      	b.n	80056f6 <USBH_MSC_ClassRequest+0xd6>
      break;
 80056f0:	bf00      	nop
 80056f2:	e000      	b.n	80056f6 <USBH_MSC_ClassRequest+0xd6>
      break;
 80056f4:	bf00      	nop
  }

  return status;
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	0800cc38 	.word	0x0800cc38

08005704 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8005716:	2301      	movs	r3, #1
 8005718:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800571a:	2301      	movs	r3, #1
 800571c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800571e:	2301      	movs	r3, #1
 8005720:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	7b1b      	ldrb	r3, [r3, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <USBH_MSC_Process+0x2e>
 800572a:	2b01      	cmp	r3, #1
 800572c:	f000 8355 	beq.w	8005dda <USBH_MSC_Process+0x6d6>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8005730:	e356      	b.n	8005de0 <USBH_MSC_Process+0x6dc>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	429a      	cmp	r2, r3
 8005740:	f080 8333 	bcs.w	8005daa <USBH_MSC_Process+0x6a6>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800574a:	4619      	mov	r1, r3
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	2334      	movs	r3, #52	; 0x34
 8005750:	fb03 f301 	mul.w	r3, r3, r1
 8005754:	4413      	add	r3, r2
 8005756:	3391      	adds	r3, #145	; 0x91
 8005758:	2201      	movs	r2, #1
 800575a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005762:	4619      	mov	r1, r3
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	2334      	movs	r3, #52	; 0x34
 8005768:	fb03 f301 	mul.w	r3, r3, r1
 800576c:	4413      	add	r3, r2
 800576e:	3390      	adds	r3, #144	; 0x90
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b08      	cmp	r3, #8
 8005774:	f200 8327 	bhi.w	8005dc6 <USBH_MSC_Process+0x6c2>
 8005778:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <USBH_MSC_Process+0x7c>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	080057a5 	.word	0x080057a5
 8005784:	08005dc7 	.word	0x08005dc7
 8005788:	080058ed 	.word	0x080058ed
 800578c:	08005aa1 	.word	0x08005aa1
 8005790:	080057df 	.word	0x080057df
 8005794:	08005c0d 	.word	0x08005c0d
 8005798:	08005dc7 	.word	0x08005dc7
 800579c:	08005dc7 	.word	0x08005dc7
 80057a0:	08005d99 	.word	0x08005d99
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80057aa:	4619      	mov	r1, r3
 80057ac:	48b6      	ldr	r0, [pc, #728]	; (8005a88 <USBH_MSC_Process+0x384>)
 80057ae:	f006 fa67 	bl	800bc80 <iprintf>
 80057b2:	200a      	movs	r0, #10
 80057b4:	f006 fa7c 	bl	800bcb0 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80057be:	4619      	mov	r1, r3
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	2334      	movs	r3, #52	; 0x34
 80057c4:	fb03 f301 	mul.w	r3, r3, r1
 80057c8:	4413      	add	r3, r2
 80057ca:	3390      	adds	r3, #144	; 0x90
 80057cc:	2204      	movs	r2, #4
 80057ce:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80057dc:	e2fc      	b.n	8005dd8 <USBH_MSC_Process+0x6d4>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80057e4:	b2d9      	uxtb	r1, r3
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80057ec:	461a      	mov	r2, r3
 80057ee:	2334      	movs	r3, #52	; 0x34
 80057f0:	fb03 f302 	mul.w	r3, r3, r2
 80057f4:	3398      	adds	r3, #152	; 0x98
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4413      	add	r3, r2
 80057fa:	3307      	adds	r3, #7
 80057fc:	461a      	mov	r2, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 f890 	bl	8006924 <USBH_MSC_SCSI_Inquiry>
 8005804:	4603      	mov	r3, r0
 8005806:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d141      	bne.n	8005892 <USBH_MSC_Process+0x18e>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005814:	461a      	mov	r2, r3
 8005816:	2334      	movs	r3, #52	; 0x34
 8005818:	fb03 f302 	mul.w	r3, r3, r2
 800581c:	3398      	adds	r3, #152	; 0x98
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	4413      	add	r3, r2
 8005822:	330a      	adds	r3, #10
 8005824:	4619      	mov	r1, r3
 8005826:	4899      	ldr	r0, [pc, #612]	; (8005a8c <USBH_MSC_Process+0x388>)
 8005828:	f006 fa2a 	bl	800bc80 <iprintf>
 800582c:	200a      	movs	r0, #10
 800582e:	f006 fa3f 	bl	800bcb0 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005838:	461a      	mov	r2, r3
 800583a:	2334      	movs	r3, #52	; 0x34
 800583c:	fb03 f302 	mul.w	r3, r3, r2
 8005840:	33a0      	adds	r3, #160	; 0xa0
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4413      	add	r3, r2
 8005846:	330b      	adds	r3, #11
 8005848:	4619      	mov	r1, r3
 800584a:	4891      	ldr	r0, [pc, #580]	; (8005a90 <USBH_MSC_Process+0x38c>)
 800584c:	f006 fa18 	bl	800bc80 <iprintf>
 8005850:	200a      	movs	r0, #10
 8005852:	f006 fa2d 	bl	800bcb0 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800585c:	461a      	mov	r2, r3
 800585e:	2334      	movs	r3, #52	; 0x34
 8005860:	fb03 f302 	mul.w	r3, r3, r2
 8005864:	33b0      	adds	r3, #176	; 0xb0
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4413      	add	r3, r2
 800586a:	330c      	adds	r3, #12
 800586c:	4619      	mov	r1, r3
 800586e:	4889      	ldr	r0, [pc, #548]	; (8005a94 <USBH_MSC_Process+0x390>)
 8005870:	f006 fa06 	bl	800bc80 <iprintf>
 8005874:	200a      	movs	r0, #10
 8005876:	f006 fa1b 	bl	800bcb0 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005880:	4619      	mov	r1, r3
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	2334      	movs	r3, #52	; 0x34
 8005886:	fb03 f301 	mul.w	r3, r3, r1
 800588a:	4413      	add	r3, r2
 800588c:	3390      	adds	r3, #144	; 0x90
 800588e:	2202      	movs	r2, #2
 8005890:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8005892:	7bfb      	ldrb	r3, [r7, #15]
 8005894:	2b02      	cmp	r3, #2
 8005896:	d10c      	bne.n	80058b2 <USBH_MSC_Process+0x1ae>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800589e:	4619      	mov	r1, r3
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	2334      	movs	r3, #52	; 0x34
 80058a4:	fb03 f301 	mul.w	r3, r3, r1
 80058a8:	4413      	add	r3, r2
 80058aa:	3390      	adds	r3, #144	; 0x90
 80058ac:	2205      	movs	r2, #5
 80058ae:	701a      	strb	r2, [r3, #0]
            break;
 80058b0:	e28b      	b.n	8005dca <USBH_MSC_Process+0x6c6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	f040 8288 	bne.w	8005dca <USBH_MSC_Process+0x6c6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80058c0:	4619      	mov	r1, r3
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	2334      	movs	r3, #52	; 0x34
 80058c6:	fb03 f301 	mul.w	r3, r3, r1
 80058ca:	4413      	add	r3, r2
 80058cc:	3390      	adds	r3, #144	; 0x90
 80058ce:	2201      	movs	r2, #1
 80058d0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80058d8:	4619      	mov	r1, r3
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	2334      	movs	r3, #52	; 0x34
 80058de:	fb03 f301 	mul.w	r3, r3, r1
 80058e2:	4413      	add	r3, r2
 80058e4:	3391      	adds	r3, #145	; 0x91
 80058e6:	2202      	movs	r2, #2
 80058e8:	701a      	strb	r2, [r3, #0]
            break;
 80058ea:	e26e      	b.n	8005dca <USBH_MSC_Process+0x6c6>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 ff56 	bl	80067a8 <USBH_MSC_SCSI_TestUnitReady>
 80058fc:	4603      	mov	r3, r0
 80058fe:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8005900:	7bbb      	ldrb	r3, [r7, #14]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d14f      	bne.n	80059a6 <USBH_MSC_Process+0x2a2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800590c:	4619      	mov	r1, r3
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	2334      	movs	r3, #52	; 0x34
 8005912:	fb03 f301 	mul.w	r3, r3, r1
 8005916:	4413      	add	r3, r2
 8005918:	3392      	adds	r3, #146	; 0x92
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d012      	beq.n	8005946 <USBH_MSC_Process+0x242>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005926:	4619      	mov	r1, r3
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	2334      	movs	r3, #52	; 0x34
 800592c:	fb03 f301 	mul.w	r3, r3, r1
 8005930:	4413      	add	r3, r2
 8005932:	33c1      	adds	r3, #193	; 0xc1
 8005934:	2201      	movs	r2, #1
 8005936:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 8005938:	4857      	ldr	r0, [pc, #348]	; (8005a98 <USBH_MSC_Process+0x394>)
 800593a:	f006 f9a1 	bl	800bc80 <iprintf>
 800593e:	200a      	movs	r0, #10
 8005940:	f006 f9b6 	bl	800bcb0 <putchar>
 8005944:	e00b      	b.n	800595e <USBH_MSC_Process+0x25a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800594c:	4619      	mov	r1, r3
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	2334      	movs	r3, #52	; 0x34
 8005952:	fb03 f301 	mul.w	r3, r3, r1
 8005956:	4413      	add	r3, r2
 8005958:	33c1      	adds	r3, #193	; 0xc1
 800595a:	2200      	movs	r2, #0
 800595c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005964:	4619      	mov	r1, r3
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	2334      	movs	r3, #52	; 0x34
 800596a:	fb03 f301 	mul.w	r3, r3, r1
 800596e:	4413      	add	r3, r2
 8005970:	3390      	adds	r3, #144	; 0x90
 8005972:	2203      	movs	r2, #3
 8005974:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800597c:	4619      	mov	r1, r3
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	2334      	movs	r3, #52	; 0x34
 8005982:	fb03 f301 	mul.w	r3, r3, r1
 8005986:	4413      	add	r3, r2
 8005988:	3391      	adds	r3, #145	; 0x91
 800598a:	2200      	movs	r2, #0
 800598c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005994:	4619      	mov	r1, r3
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	2334      	movs	r3, #52	; 0x34
 800599a:	fb03 f301 	mul.w	r3, r3, r1
 800599e:	4413      	add	r3, r2
 80059a0:	3392      	adds	r3, #146	; 0x92
 80059a2:	2200      	movs	r2, #0
 80059a4:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80059a6:	7bbb      	ldrb	r3, [r7, #14]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d150      	bne.n	8005a4e <USBH_MSC_Process+0x34a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80059b2:	4619      	mov	r1, r3
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	2334      	movs	r3, #52	; 0x34
 80059b8:	fb03 f301 	mul.w	r3, r3, r1
 80059bc:	4413      	add	r3, r2
 80059be:	3392      	adds	r3, #146	; 0x92
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d012      	beq.n	80059ec <USBH_MSC_Process+0x2e8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80059cc:	4619      	mov	r1, r3
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	2334      	movs	r3, #52	; 0x34
 80059d2:	fb03 f301 	mul.w	r3, r3, r1
 80059d6:	4413      	add	r3, r2
 80059d8:	33c1      	adds	r3, #193	; 0xc1
 80059da:	2201      	movs	r2, #1
 80059dc:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 80059de:	482f      	ldr	r0, [pc, #188]	; (8005a9c <USBH_MSC_Process+0x398>)
 80059e0:	f006 f94e 	bl	800bc80 <iprintf>
 80059e4:	200a      	movs	r0, #10
 80059e6:	f006 f963 	bl	800bcb0 <putchar>
 80059ea:	e00b      	b.n	8005a04 <USBH_MSC_Process+0x300>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80059f2:	4619      	mov	r1, r3
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	2334      	movs	r3, #52	; 0x34
 80059f8:	fb03 f301 	mul.w	r3, r3, r1
 80059fc:	4413      	add	r3, r2
 80059fe:	33c1      	adds	r3, #193	; 0xc1
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	2334      	movs	r3, #52	; 0x34
 8005a10:	fb03 f301 	mul.w	r3, r3, r1
 8005a14:	4413      	add	r3, r2
 8005a16:	3390      	adds	r3, #144	; 0x90
 8005a18:	2205      	movs	r2, #5
 8005a1a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a22:	4619      	mov	r1, r3
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	2334      	movs	r3, #52	; 0x34
 8005a28:	fb03 f301 	mul.w	r3, r3, r1
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3391      	adds	r3, #145	; 0x91
 8005a30:	2201      	movs	r2, #1
 8005a32:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	2334      	movs	r3, #52	; 0x34
 8005a40:	fb03 f301 	mul.w	r3, r3, r1
 8005a44:	4413      	add	r3, r2
 8005a46:	3392      	adds	r3, #146	; 0x92
 8005a48:	2202      	movs	r2, #2
 8005a4a:	701a      	strb	r2, [r3, #0]
            break;
 8005a4c:	e1bf      	b.n	8005dce <USBH_MSC_Process+0x6ca>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8005a4e:	7bbb      	ldrb	r3, [r7, #14]
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	f040 81bc 	bne.w	8005dce <USBH_MSC_Process+0x6ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	2334      	movs	r3, #52	; 0x34
 8005a62:	fb03 f301 	mul.w	r3, r3, r1
 8005a66:	4413      	add	r3, r2
 8005a68:	3390      	adds	r3, #144	; 0x90
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a74:	4619      	mov	r1, r3
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	2334      	movs	r3, #52	; 0x34
 8005a7a:	fb03 f301 	mul.w	r3, r3, r1
 8005a7e:	4413      	add	r3, r2
 8005a80:	3391      	adds	r3, #145	; 0x91
 8005a82:	2202      	movs	r2, #2
 8005a84:	701a      	strb	r2, [r3, #0]
            break;
 8005a86:	e1a2      	b.n	8005dce <USBH_MSC_Process+0x6ca>
 8005a88:	0800cc54 	.word	0x0800cc54
 8005a8c:	0800cc60 	.word	0x0800cc60
 8005a90:	0800cc78 	.word	0x0800cc78
 8005a94:	0800cc90 	.word	0x0800cc90
 8005a98:	0800cca8 	.word	0x0800cca8
 8005a9c:	0800ccbc 	.word	0x0800ccbc
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005aa6:	b2d9      	uxtb	r1, r3
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005aae:	461a      	mov	r2, r3
 8005ab0:	2334      	movs	r3, #52	; 0x34
 8005ab2:	fb03 f302 	mul.w	r3, r3, r2
 8005ab6:	3390      	adds	r3, #144	; 0x90
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4413      	add	r3, r2
 8005abc:	3304      	adds	r3, #4
 8005abe:	461a      	mov	r2, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 feb4 	bl	800682e <USBH_MSC_SCSI_ReadCapacity>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d170      	bne.n	8005bb2 <USBH_MSC_Process+0x4ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	2334      	movs	r3, #52	; 0x34
 8005adc:	fb03 f301 	mul.w	r3, r3, r1
 8005ae0:	4413      	add	r3, r2
 8005ae2:	33c1      	adds	r3, #193	; 0xc1
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d142      	bne.n	8005b70 <USBH_MSC_Process+0x46c>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005af0:	4619      	mov	r1, r3
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	2334      	movs	r3, #52	; 0x34
 8005af6:	fb03 f301 	mul.w	r3, r3, r1
 8005afa:	4413      	add	r3, r2
 8005afc:	3394      	adds	r3, #148	; 0x94
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 8005b06:	4610      	mov	r0, r2
 8005b08:	6939      	ldr	r1, [r7, #16]
 8005b0a:	2234      	movs	r2, #52	; 0x34
 8005b0c:	fb02 f200 	mul.w	r2, r2, r0
 8005b10:	440a      	add	r2, r1
 8005b12:	3298      	adds	r2, #152	; 0x98
 8005b14:	8812      	ldrh	r2, [r2, #0]
 8005b16:	fb02 f303 	mul.w	r3, r2, r3
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	48b3      	ldr	r0, [pc, #716]	; (8005dec <USBH_MSC_Process+0x6e8>)
 8005b1e:	f006 f8af 	bl	800bc80 <iprintf>
 8005b22:	200a      	movs	r0, #10
 8005b24:	f006 f8c4 	bl	800bcb0 <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b2e:	4619      	mov	r1, r3
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	2334      	movs	r3, #52	; 0x34
 8005b34:	fb03 f301 	mul.w	r3, r3, r1
 8005b38:	4413      	add	r3, r2
 8005b3a:	3394      	adds	r3, #148	; 0x94
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	48ab      	ldr	r0, [pc, #684]	; (8005df0 <USBH_MSC_Process+0x6ec>)
 8005b42:	f006 f89d 	bl	800bc80 <iprintf>
 8005b46:	200a      	movs	r0, #10
 8005b48:	f006 f8b2 	bl	800bcb0 <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b52:	4619      	mov	r1, r3
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	2334      	movs	r3, #52	; 0x34
 8005b58:	fb03 f301 	mul.w	r3, r3, r1
 8005b5c:	4413      	add	r3, r2
 8005b5e:	3398      	adds	r3, #152	; 0x98
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	4619      	mov	r1, r3
 8005b64:	48a3      	ldr	r0, [pc, #652]	; (8005df4 <USBH_MSC_Process+0x6f0>)
 8005b66:	f006 f88b 	bl	800bc80 <iprintf>
 8005b6a:	200a      	movs	r0, #10
 8005b6c:	f006 f8a0 	bl	800bcb0 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b76:	4619      	mov	r1, r3
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	2334      	movs	r3, #52	; 0x34
 8005b7c:	fb03 f301 	mul.w	r3, r3, r1
 8005b80:	4413      	add	r3, r2
 8005b82:	3390      	adds	r3, #144	; 0x90
 8005b84:	2201      	movs	r2, #1
 8005b86:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b8e:	4619      	mov	r1, r3
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	2334      	movs	r3, #52	; 0x34
 8005b94:	fb03 f301 	mul.w	r3, r3, r1
 8005b98:	4413      	add	r3, r2
 8005b9a:	3391      	adds	r3, #145	; 0x91
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005bb0:	e10f      	b.n	8005dd2 <USBH_MSC_Process+0x6ce>
            else if (scsi_status == USBH_FAIL)
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d10c      	bne.n	8005bd2 <USBH_MSC_Process+0x4ce>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	2334      	movs	r3, #52	; 0x34
 8005bc4:	fb03 f301 	mul.w	r3, r3, r1
 8005bc8:	4413      	add	r3, r2
 8005bca:	3390      	adds	r3, #144	; 0x90
 8005bcc:	2205      	movs	r2, #5
 8005bce:	701a      	strb	r2, [r3, #0]
            break;
 8005bd0:	e0ff      	b.n	8005dd2 <USBH_MSC_Process+0x6ce>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
 8005bd4:	2b04      	cmp	r3, #4
 8005bd6:	f040 80fc 	bne.w	8005dd2 <USBH_MSC_Process+0x6ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005be0:	4619      	mov	r1, r3
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	2334      	movs	r3, #52	; 0x34
 8005be6:	fb03 f301 	mul.w	r3, r3, r1
 8005bea:	4413      	add	r3, r2
 8005bec:	3390      	adds	r3, #144	; 0x90
 8005bee:	2201      	movs	r2, #1
 8005bf0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	2334      	movs	r3, #52	; 0x34
 8005bfe:	fb03 f301 	mul.w	r3, r3, r1
 8005c02:	4413      	add	r3, r2
 8005c04:	3391      	adds	r3, #145	; 0x91
 8005c06:	2202      	movs	r2, #2
 8005c08:	701a      	strb	r2, [r3, #0]
            break;
 8005c0a:	e0e2      	b.n	8005dd2 <USBH_MSC_Process+0x6ce>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c12:	b2d9      	uxtb	r1, r3
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2334      	movs	r3, #52	; 0x34
 8005c1e:	fb03 f302 	mul.w	r3, r3, r2
 8005c22:	3398      	adds	r3, #152	; 0x98
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	4413      	add	r3, r2
 8005c28:	3304      	adds	r3, #4
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 ff1e 	bl	8006a6e <USBH_MSC_SCSI_RequestSense>
 8005c32:	4603      	mov	r3, r0
 8005c34:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d17b      	bne.n	8005d34 <USBH_MSC_Process+0x630>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c42:	4619      	mov	r1, r3
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	2334      	movs	r3, #52	; 0x34
 8005c48:	fb03 f301 	mul.w	r3, r3, r1
 8005c4c:	4413      	add	r3, r2
 8005c4e:	339c      	adds	r3, #156	; 0x9c
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b06      	cmp	r3, #6
 8005c54:	d00c      	beq.n	8005c70 <USBH_MSC_Process+0x56c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	2334      	movs	r3, #52	; 0x34
 8005c62:	fb03 f301 	mul.w	r3, r3, r1
 8005c66:	4413      	add	r3, r2
 8005c68:	339c      	adds	r3, #156	; 0x9c
 8005c6a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d117      	bne.n	8005ca0 <USBH_MSC_Process+0x59c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f242 720f 	movw	r2, #9999	; 0x270f
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d80c      	bhi.n	8005ca0 <USBH_MSC_Process+0x59c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	2334      	movs	r3, #52	; 0x34
 8005c92:	fb03 f301 	mul.w	r3, r3, r1
 8005c96:	4413      	add	r3, r2
 8005c98:	3390      	adds	r3, #144	; 0x90
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	701a      	strb	r2, [r3, #0]
                  break;
 8005c9e:	e09b      	b.n	8005dd8 <USBH_MSC_Process+0x6d4>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	2334      	movs	r3, #52	; 0x34
 8005cac:	fb03 f301 	mul.w	r3, r3, r1
 8005cb0:	4413      	add	r3, r2
 8005cb2:	339c      	adds	r3, #156	; 0x9c
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	484f      	ldr	r0, [pc, #316]	; (8005df8 <USBH_MSC_Process+0x6f4>)
 8005cba:	f005 ffe1 	bl	800bc80 <iprintf>
 8005cbe:	200a      	movs	r0, #10
 8005cc0:	f005 fff6 	bl	800bcb0 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cca:	4619      	mov	r1, r3
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	2334      	movs	r3, #52	; 0x34
 8005cd0:	fb03 f301 	mul.w	r3, r3, r1
 8005cd4:	4413      	add	r3, r2
 8005cd6:	339d      	adds	r3, #157	; 0x9d
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	4847      	ldr	r0, [pc, #284]	; (8005dfc <USBH_MSC_Process+0x6f8>)
 8005cde:	f005 ffcf 	bl	800bc80 <iprintf>
 8005ce2:	200a      	movs	r0, #10
 8005ce4:	f005 ffe4 	bl	800bcb0 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cee:	4619      	mov	r1, r3
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	2334      	movs	r3, #52	; 0x34
 8005cf4:	fb03 f301 	mul.w	r3, r3, r1
 8005cf8:	4413      	add	r3, r2
 8005cfa:	339e      	adds	r3, #158	; 0x9e
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	4619      	mov	r1, r3
 8005d00:	483f      	ldr	r0, [pc, #252]	; (8005e00 <USBH_MSC_Process+0x6fc>)
 8005d02:	f005 ffbd 	bl	800bc80 <iprintf>
 8005d06:	200a      	movs	r0, #10
 8005d08:	f005 ffd2 	bl	800bcb0 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d12:	4619      	mov	r1, r3
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	2334      	movs	r3, #52	; 0x34
 8005d18:	fb03 f301 	mul.w	r3, r3, r1
 8005d1c:	4413      	add	r3, r2
 8005d1e:	3390      	adds	r3, #144	; 0x90
 8005d20:	2201      	movs	r2, #1
 8005d22:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d112      	bne.n	8005d60 <USBH_MSC_Process+0x65c>
              USBH_UsrLog("MSC Device NOT ready");
 8005d3a:	4832      	ldr	r0, [pc, #200]	; (8005e04 <USBH_MSC_Process+0x700>)
 8005d3c:	f005 ffa0 	bl	800bc80 <iprintf>
 8005d40:	200a      	movs	r0, #10
 8005d42:	f005 ffb5 	bl	800bcb0 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	2334      	movs	r3, #52	; 0x34
 8005d52:	fb03 f301 	mul.w	r3, r3, r1
 8005d56:	4413      	add	r3, r2
 8005d58:	3390      	adds	r3, #144	; 0x90
 8005d5a:	2208      	movs	r2, #8
 8005d5c:	701a      	strb	r2, [r3, #0]
            break;
 8005d5e:	e03a      	b.n	8005dd6 <USBH_MSC_Process+0x6d2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d137      	bne.n	8005dd6 <USBH_MSC_Process+0x6d2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	2334      	movs	r3, #52	; 0x34
 8005d72:	fb03 f301 	mul.w	r3, r3, r1
 8005d76:	4413      	add	r3, r2
 8005d78:	3390      	adds	r3, #144	; 0x90
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d84:	4619      	mov	r1, r3
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	2334      	movs	r3, #52	; 0x34
 8005d8a:	fb03 f301 	mul.w	r3, r3, r1
 8005d8e:	4413      	add	r3, r2
 8005d90:	3391      	adds	r3, #145	; 0x91
 8005d92:	2202      	movs	r2, #2
 8005d94:	701a      	strb	r2, [r3, #0]
            break;
 8005d96:	e01e      	b.n	8005dd6 <USBH_MSC_Process+0x6d2>
            MSC_Handle->current_lun++;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d9e:	3301      	adds	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005da8:	e016      	b.n	8005dd8 <USBH_MSC_Process+0x6d4>
        MSC_Handle->current_lun = 0U;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2201      	movs	r2, #1
 8005db6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005dbe:	2102      	movs	r1, #2
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	4798      	blx	r3
      break;
 8005dc4:	e00c      	b.n	8005de0 <USBH_MSC_Process+0x6dc>
            break;
 8005dc6:	bf00      	nop
 8005dc8:	e00a      	b.n	8005de0 <USBH_MSC_Process+0x6dc>
            break;
 8005dca:	bf00      	nop
 8005dcc:	e008      	b.n	8005de0 <USBH_MSC_Process+0x6dc>
            break;
 8005dce:	bf00      	nop
 8005dd0:	e006      	b.n	8005de0 <USBH_MSC_Process+0x6dc>
            break;
 8005dd2:	bf00      	nop
 8005dd4:	e004      	b.n	8005de0 <USBH_MSC_Process+0x6dc>
            break;
 8005dd6:	bf00      	nop
      break;
 8005dd8:	e002      	b.n	8005de0 <USBH_MSC_Process+0x6dc>
      error = USBH_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8005dde:	bf00      	nop
  }
  return error;
 8005de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	0800ccd4 	.word	0x0800ccd4
 8005df0:	0800ccf4 	.word	0x0800ccf4
 8005df4:	0800cd08 	.word	0x0800cd08
 8005df8:	0800cd1c 	.word	0x0800cd1c
 8005dfc:	0800cd2c 	.word	0x0800cd2c
 8005e00:	0800cd48 	.word	0x0800cd48
 8005e04:	0800ccbc 	.word	0x0800ccbc

08005e08 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8005e36:	2301      	movs	r3, #1
 8005e38:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8005e3e:	78fb      	ldrb	r3, [r7, #3]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	2134      	movs	r1, #52	; 0x34
 8005e44:	fb01 f303 	mul.w	r3, r1, r3
 8005e48:	4413      	add	r3, r2
 8005e4a:	3390      	adds	r3, #144	; 0x90
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b07      	cmp	r3, #7
 8005e50:	d03d      	beq.n	8005ece <USBH_MSC_RdWrProcess+0xae>
 8005e52:	2b07      	cmp	r3, #7
 8005e54:	f300 80dc 	bgt.w	8006010 <USBH_MSC_RdWrProcess+0x1f0>
 8005e58:	2b05      	cmp	r3, #5
 8005e5a:	d06d      	beq.n	8005f38 <USBH_MSC_RdWrProcess+0x118>
 8005e5c:	2b06      	cmp	r3, #6
 8005e5e:	f040 80d7 	bne.w	8006010 <USBH_MSC_RdWrProcess+0x1f0>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8005e62:	78f9      	ldrb	r1, [r7, #3]
 8005e64:	2300      	movs	r3, #0
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fee2 	bl	8006c36 <USBH_MSC_SCSI_Read>
 8005e72:	4603      	mov	r3, r0
 8005e74:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10b      	bne.n	8005e94 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005e7c:	78fb      	ldrb	r3, [r7, #3]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	2134      	movs	r1, #52	; 0x34
 8005e82:	fb01 f303 	mul.w	r3, r1, r3
 8005e86:	4413      	add	r3, r2
 8005e88:	3390      	adds	r3, #144	; 0x90
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e92:	e0bf      	b.n	8006014 <USBH_MSC_RdWrProcess+0x1f4>
      else if (scsi_status == USBH_FAIL)
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d109      	bne.n	8005eae <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8005e9a:	78fb      	ldrb	r3, [r7, #3]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	2134      	movs	r1, #52	; 0x34
 8005ea0:	fb01 f303 	mul.w	r3, r1, r3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3390      	adds	r3, #144	; 0x90
 8005ea8:	2205      	movs	r2, #5
 8005eaa:	701a      	strb	r2, [r3, #0]
      break;
 8005eac:	e0b2      	b.n	8006014 <USBH_MSC_RdWrProcess+0x1f4>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	f040 80af 	bne.w	8006014 <USBH_MSC_RdWrProcess+0x1f4>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	2134      	movs	r1, #52	; 0x34
 8005ebc:	fb01 f303 	mul.w	r3, r1, r3
 8005ec0:	4413      	add	r3, r2
 8005ec2:	3390      	adds	r3, #144	; 0x90
 8005ec4:	2208      	movs	r2, #8
 8005ec6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8005ec8:	2302      	movs	r3, #2
 8005eca:	75fb      	strb	r3, [r7, #23]
      break;
 8005ecc:	e0a2      	b.n	8006014 <USBH_MSC_RdWrProcess+0x1f4>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8005ece:	78f9      	ldrb	r1, [r7, #3]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fe41 	bl	8006b60 <USBH_MSC_SCSI_Write>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10b      	bne.n	8005f00 <USBH_MSC_RdWrProcess+0xe0>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	2134      	movs	r1, #52	; 0x34
 8005eee:	fb01 f303 	mul.w	r3, r1, r3
 8005ef2:	4413      	add	r3, r2
 8005ef4:	3390      	adds	r3, #144	; 0x90
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005efe:	e08b      	b.n	8006018 <USBH_MSC_RdWrProcess+0x1f8>
      else if (scsi_status == USBH_FAIL)
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d109      	bne.n	8005f1a <USBH_MSC_RdWrProcess+0xfa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8005f06:	78fb      	ldrb	r3, [r7, #3]
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	2134      	movs	r1, #52	; 0x34
 8005f0c:	fb01 f303 	mul.w	r3, r1, r3
 8005f10:	4413      	add	r3, r2
 8005f12:	3390      	adds	r3, #144	; 0x90
 8005f14:	2205      	movs	r2, #5
 8005f16:	701a      	strb	r2, [r3, #0]
      break;
 8005f18:	e07e      	b.n	8006018 <USBH_MSC_RdWrProcess+0x1f8>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d17b      	bne.n	8006018 <USBH_MSC_RdWrProcess+0x1f8>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005f20:	78fb      	ldrb	r3, [r7, #3]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	2134      	movs	r1, #52	; 0x34
 8005f26:	fb01 f303 	mul.w	r3, r1, r3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3390      	adds	r3, #144	; 0x90
 8005f2e:	2208      	movs	r2, #8
 8005f30:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8005f32:	2302      	movs	r3, #2
 8005f34:	75fb      	strb	r3, [r7, #23]
      break;
 8005f36:	e06f      	b.n	8006018 <USBH_MSC_RdWrProcess+0x1f8>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	2234      	movs	r2, #52	; 0x34
 8005f3c:	fb02 f303 	mul.w	r3, r2, r3
 8005f40:	3398      	adds	r3, #152	; 0x98
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4413      	add	r3, r2
 8005f46:	1d1a      	adds	r2, r3, #4
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fd8e 	bl	8006a6e <USBH_MSC_SCSI_RequestSense>
 8005f52:	4603      	mov	r3, r0
 8005f54:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d140      	bne.n	8005fde <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 8005f5c:	78fb      	ldrb	r3, [r7, #3]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	2134      	movs	r1, #52	; 0x34
 8005f62:	fb01 f303 	mul.w	r3, r1, r3
 8005f66:	4413      	add	r3, r2
 8005f68:	339c      	adds	r3, #156	; 0x9c
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	482e      	ldr	r0, [pc, #184]	; (8006028 <USBH_MSC_RdWrProcess+0x208>)
 8005f70:	f005 fe86 	bl	800bc80 <iprintf>
 8005f74:	200a      	movs	r0, #10
 8005f76:	f005 fe9b 	bl	800bcb0 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 8005f7a:	78fb      	ldrb	r3, [r7, #3]
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	2134      	movs	r1, #52	; 0x34
 8005f80:	fb01 f303 	mul.w	r3, r1, r3
 8005f84:	4413      	add	r3, r2
 8005f86:	339d      	adds	r3, #157	; 0x9d
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4827      	ldr	r0, [pc, #156]	; (800602c <USBH_MSC_RdWrProcess+0x20c>)
 8005f8e:	f005 fe77 	bl	800bc80 <iprintf>
 8005f92:	200a      	movs	r0, #10
 8005f94:	f005 fe8c 	bl	800bcb0 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	2134      	movs	r1, #52	; 0x34
 8005f9e:	fb01 f303 	mul.w	r3, r1, r3
 8005fa2:	4413      	add	r3, r2
 8005fa4:	339e      	adds	r3, #158	; 0x9e
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	4821      	ldr	r0, [pc, #132]	; (8006030 <USBH_MSC_RdWrProcess+0x210>)
 8005fac:	f005 fe68 	bl	800bc80 <iprintf>
 8005fb0:	200a      	movs	r0, #10
 8005fb2:	f005 fe7d 	bl	800bcb0 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005fb6:	78fb      	ldrb	r3, [r7, #3]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	2134      	movs	r1, #52	; 0x34
 8005fbc:	fb01 f303 	mul.w	r3, r1, r3
 8005fc0:	4413      	add	r3, r2
 8005fc2:	3390      	adds	r3, #144	; 0x90
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	2134      	movs	r1, #52	; 0x34
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	3391      	adds	r3, #145	; 0x91
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8005fda:	2302      	movs	r3, #2
 8005fdc:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d106      	bne.n	8005ff2 <USBH_MSC_RdWrProcess+0x1d2>
      {
        USBH_UsrLog("MSC Device NOT ready");
 8005fe4:	4813      	ldr	r0, [pc, #76]	; (8006034 <USBH_MSC_RdWrProcess+0x214>)
 8005fe6:	f005 fe4b 	bl	800bc80 <iprintf>
 8005fea:	200a      	movs	r0, #10
 8005fec:	f005 fe60 	bl	800bcb0 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005ff0:	e014      	b.n	800601c <USBH_MSC_RdWrProcess+0x1fc>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d111      	bne.n	800601c <USBH_MSC_RdWrProcess+0x1fc>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	2134      	movs	r1, #52	; 0x34
 8005ffe:	fb01 f303 	mul.w	r3, r1, r3
 8006002:	4413      	add	r3, r2
 8006004:	3390      	adds	r3, #144	; 0x90
 8006006:	2208      	movs	r2, #8
 8006008:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800600a:	2302      	movs	r3, #2
 800600c:	75fb      	strb	r3, [r7, #23]
      break;
 800600e:	e005      	b.n	800601c <USBH_MSC_RdWrProcess+0x1fc>

    default:
      break;
 8006010:	bf00      	nop
 8006012:	e004      	b.n	800601e <USBH_MSC_RdWrProcess+0x1fe>
      break;
 8006014:	bf00      	nop
 8006016:	e002      	b.n	800601e <USBH_MSC_RdWrProcess+0x1fe>
      break;
 8006018:	bf00      	nop
 800601a:	e000      	b.n	800601e <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800601c:	bf00      	nop

  }
  return error;
 800601e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	0800cd1c 	.word	0x0800cd1c
 800602c:	0800cd2c 	.word	0x0800cd2c
 8006030:	0800cd48 	.word	0x0800cd48
 8006034:	0800ccbc 	.word	0x0800ccbc

08006038 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b0b      	cmp	r3, #11
 8006056:	d10c      	bne.n	8006072 <USBH_MSC_UnitIsReady+0x3a>
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	2134      	movs	r1, #52	; 0x34
 800605e:	fb01 f303 	mul.w	r3, r1, r3
 8006062:	4413      	add	r3, r2
 8006064:	3391      	adds	r3, #145	; 0x91
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d102      	bne.n	8006072 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800606c:	2301      	movs	r3, #1
 800606e:	73fb      	strb	r3, [r7, #15]
 8006070:	e001      	b.n	8006076 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006076:	7bfb      	ldrb	r3, [r7, #15]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	460b      	mov	r3, r1
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b0b      	cmp	r3, #11
 80060a4:	d10d      	bne.n	80060c2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80060a6:	7afb      	ldrb	r3, [r7, #11]
 80060a8:	2234      	movs	r2, #52	; 0x34
 80060aa:	fb02 f303 	mul.w	r3, r2, r3
 80060ae:	3390      	adds	r3, #144	; 0x90
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	4413      	add	r3, r2
 80060b4:	2234      	movs	r2, #52	; 0x34
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f005 fd21 	bl	800bb00 <memcpy>
    return USBH_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	e000      	b.n	80060c4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80060c2:	2302      	movs	r3, #2
  }
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	607a      	str	r2, [r7, #4]
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	460b      	mov	r3, r1
 80060da:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00e      	beq.n	8006110 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80060f8:	2b0b      	cmp	r3, #11
 80060fa:	d109      	bne.n	8006110 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80060fc:	7afb      	ldrb	r3, [r7, #11]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	2134      	movs	r1, #52	; 0x34
 8006102:	fb01 f303 	mul.w	r3, r1, r3
 8006106:	4413      	add	r3, r2
 8006108:	3390      	adds	r3, #144	; 0x90
 800610a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800610c:	2b01      	cmp	r3, #1
 800610e:	d001      	beq.n	8006114 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8006110:	2302      	movs	r3, #2
 8006112:	e040      	b.n	8006196 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2206      	movs	r2, #6
 8006118:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800611a:	7afb      	ldrb	r3, [r7, #11]
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	2134      	movs	r1, #52	; 0x34
 8006120:	fb01 f303 	mul.w	r3, r1, r3
 8006124:	4413      	add	r3, r2
 8006126:	3390      	adds	r3, #144	; 0x90
 8006128:	2206      	movs	r2, #6
 800612a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800612c:	7afb      	ldrb	r3, [r7, #11]
 800612e:	b29a      	uxth	r2, r3
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006136:	7af9      	ldrb	r1, [r7, #11]
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 fd78 	bl	8006c36 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800614c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800614e:	e016      	b.n	800617e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad2      	subs	r2, r2, r3
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	f242 7110 	movw	r1, #10000	; 0x2710
 8006160:	fb01 f303 	mul.w	r3, r1, r3
 8006164:	429a      	cmp	r2, r3
 8006166:	d805      	bhi.n	8006174 <USBH_MSC_Read+0xa8>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d104      	bne.n	800617e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2201      	movs	r2, #1
 8006178:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800617a:	2302      	movs	r3, #2
 800617c:	e00b      	b.n	8006196 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800617e:	7afb      	ldrb	r3, [r7, #11]
 8006180:	4619      	mov	r1, r3
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f7ff fe4c 	bl	8005e20 <USBH_MSC_RdWrProcess>
 8006188:	4603      	mov	r3, r0
 800618a:	2b01      	cmp	r3, #1
 800618c:	d0e0      	beq.n	8006150 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2201      	movs	r2, #1
 8006192:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b088      	sub	sp, #32
 80061a2:	af02      	add	r7, sp, #8
 80061a4:	60f8      	str	r0, [r7, #12]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
 80061aa:	460b      	mov	r3, r1
 80061ac:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00e      	beq.n	80061e2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80061ca:	2b0b      	cmp	r3, #11
 80061cc:	d109      	bne.n	80061e2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80061ce:	7afb      	ldrb	r3, [r7, #11]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	2134      	movs	r1, #52	; 0x34
 80061d4:	fb01 f303 	mul.w	r3, r1, r3
 80061d8:	4413      	add	r3, r2
 80061da:	3390      	adds	r3, #144	; 0x90
 80061dc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d001      	beq.n	80061e6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80061e2:	2302      	movs	r3, #2
 80061e4:	e040      	b.n	8006268 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2207      	movs	r2, #7
 80061ea:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80061ec:	7afb      	ldrb	r3, [r7, #11]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	2134      	movs	r1, #52	; 0x34
 80061f2:	fb01 f303 	mul.w	r3, r1, r3
 80061f6:	4413      	add	r3, r2
 80061f8:	3390      	adds	r3, #144	; 0x90
 80061fa:	2207      	movs	r2, #7
 80061fc:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80061fe:	7afb      	ldrb	r3, [r7, #11]
 8006200:	b29a      	uxth	r2, r3
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006208:	7af9      	ldrb	r1, [r7, #11]
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fca4 	bl	8006b60 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800621e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006220:	e016      	b.n	8006250 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	1ad2      	subs	r2, r2, r3
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	f242 7110 	movw	r1, #10000	; 0x2710
 8006232:	fb01 f303 	mul.w	r3, r1, r3
 8006236:	429a      	cmp	r2, r3
 8006238:	d805      	bhi.n	8006246 <USBH_MSC_Write+0xa8>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d104      	bne.n	8006250 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2201      	movs	r2, #1
 800624a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800624c:	2302      	movs	r3, #2
 800624e:	e00b      	b.n	8006268 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006250:	7afb      	ldrb	r3, [r7, #11]
 8006252:	4619      	mov	r1, r3
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7ff fde3 	bl	8005e20 <USBH_MSC_RdWrProcess>
 800625a:	4603      	mov	r3, r0
 800625c:	2b01      	cmp	r3, #1
 800625e:	d0e0      	beq.n	8006222 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2201      	movs	r2, #1
 8006264:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2221      	movs	r2, #33	; 0x21
 800627c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	22ff      	movs	r2, #255	; 0xff
 8006282:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8006296:	2200      	movs	r2, #0
 8006298:	2100      	movs	r1, #0
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 ff67 	bl	800816e <USBH_CtlReq>
 80062a0:	4603      	mov	r3, r0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b082      	sub	sp, #8
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	22a1      	movs	r2, #161	; 0xa1
 80062b8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	22fe      	movs	r2, #254	; 0xfe
 80062be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80062d2:	2201      	movs	r2, #1
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f001 ff49 	bl	800816e <USBH_CtlReq>
 80062dc:	4603      	mov	r3, r0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4a09      	ldr	r2, [pc, #36]	; (8006324 <USBH_MSC_BOT_Init+0x3c>)
 80062fe:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4a09      	ldr	r2, [pc, #36]	; (8006328 <USBH_MSC_BOT_Init+0x40>)
 8006304:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	43425355 	.word	0x43425355
 8006328:	20304050 	.word	0x20304050

0800632c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af02      	add	r7, sp, #8
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006338:	2301      	movs	r3, #1
 800633a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800633c:	2301      	movs	r3, #1
 800633e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8006340:	2301      	movs	r3, #1
 8006342:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006344:	2300      	movs	r3, #0
 8006346:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800635c:	3b01      	subs	r3, #1
 800635e:	2b0a      	cmp	r3, #10
 8006360:	f200 819e 	bhi.w	80066a0 <USBH_MSC_BOT_Process+0x374>
 8006364:	a201      	add	r2, pc, #4	; (adr r2, 800636c <USBH_MSC_BOT_Process+0x40>)
 8006366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636a:	bf00      	nop
 800636c:	08006399 	.word	0x08006399
 8006370:	080063c1 	.word	0x080063c1
 8006374:	0800642b 	.word	0x0800642b
 8006378:	08006449 	.word	0x08006449
 800637c:	080064cd 	.word	0x080064cd
 8006380:	080064ef 	.word	0x080064ef
 8006384:	08006587 	.word	0x08006587
 8006388:	080065a3 	.word	0x080065a3
 800638c:	080065f5 	.word	0x080065f5
 8006390:	08006625 	.word	0x08006625
 8006394:	08006687 	.word	0x08006687
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	78fa      	ldrb	r2, [r7, #3]
 800639c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	795b      	ldrb	r3, [r3, #5]
 80063b2:	2201      	movs	r2, #1
 80063b4:	9200      	str	r2, [sp, #0]
 80063b6:	221f      	movs	r2, #31
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f002 f8f4 	bl	80085a6 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80063be:	e17e      	b.n	80066be <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	795b      	ldrb	r3, [r3, #5]
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f005 fa82 	bl	800b8d0 <USBH_LL_GetURBState>
 80063cc:	4603      	mov	r3, r0
 80063ce:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80063d0:	7d3b      	ldrb	r3, [r7, #20]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d118      	bne.n	8006408 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00f      	beq.n	80063fe <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80063e4:	b25b      	sxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	da04      	bge.n	80063f4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2203      	movs	r2, #3
 80063ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80063f2:	e157      	b.n	80066a4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	2205      	movs	r2, #5
 80063f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80063fc:	e152      	b.n	80066a4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2207      	movs	r2, #7
 8006402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006406:	e14d      	b.n	80066a4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006408:	7d3b      	ldrb	r3, [r7, #20]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d104      	bne.n	8006418 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006416:	e145      	b.n	80066a4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8006418:	7d3b      	ldrb	r3, [r7, #20]
 800641a:	2b05      	cmp	r3, #5
 800641c:	f040 8142 	bne.w	80066a4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	220a      	movs	r2, #10
 8006424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006428:	e13c      	b.n	80066a4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	895a      	ldrh	r2, [r3, #10]
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	791b      	ldrb	r3, [r3, #4]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f002 f8d9 	bl	80085f0 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	2204      	movs	r2, #4
 8006442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8006446:	e13a      	b.n	80066be <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	791b      	ldrb	r3, [r3, #4]
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f005 fa3e 	bl	800b8d0 <USBH_LL_GetURBState>
 8006454:	4603      	mov	r3, r0
 8006456:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006458:	7d3b      	ldrb	r3, [r7, #20]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d12d      	bne.n	80064ba <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	8952      	ldrh	r2, [r2, #10]
 8006466:	4293      	cmp	r3, r2
 8006468:	d910      	bls.n	800648c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	8952      	ldrh	r2, [r2, #10]
 8006474:	441a      	add	r2, r3
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	8952      	ldrh	r2, [r2, #10]
 8006484:	1a9a      	subs	r2, r3, r2
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	65da      	str	r2, [r3, #92]	; 0x5c
 800648a:	e002      	b.n	8006492 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	2200      	movs	r2, #0
 8006490:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	895a      	ldrh	r2, [r3, #10]
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	791b      	ldrb	r3, [r3, #4]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f002 f8a1 	bl	80085f0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80064ae:	e0fb      	b.n	80066a8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	2207      	movs	r2, #7
 80064b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80064b8:	e0f6      	b.n	80066a8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80064ba:	7d3b      	ldrb	r3, [r7, #20]
 80064bc:	2b05      	cmp	r3, #5
 80064be:	f040 80f3 	bne.w	80066a8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	2209      	movs	r2, #9
 80064c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80064ca:	e0ed      	b.n	80066a8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	891a      	ldrh	r2, [r3, #8]
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	795b      	ldrb	r3, [r3, #5]
 80064da:	2001      	movs	r0, #1
 80064dc:	9000      	str	r0, [sp, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f002 f861 	bl	80085a6 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	2206      	movs	r2, #6
 80064e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80064ec:	e0e7      	b.n	80066be <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	795b      	ldrb	r3, [r3, #5]
 80064f2:	4619      	mov	r1, r3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f005 f9eb 	bl	800b8d0 <USBH_LL_GetURBState>
 80064fa:	4603      	mov	r3, r0
 80064fc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80064fe:	7d3b      	ldrb	r3, [r7, #20]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d12f      	bne.n	8006564 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	8912      	ldrh	r2, [r2, #8]
 800650c:	4293      	cmp	r3, r2
 800650e:	d910      	bls.n	8006532 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	8912      	ldrh	r2, [r2, #8]
 800651a:	441a      	add	r2, r3
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	8912      	ldrh	r2, [r2, #8]
 800652a:	1a9a      	subs	r2, r3, r2
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006530:	e002      	b.n	8006538 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	2200      	movs	r2, #0
 8006536:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00c      	beq.n	800655a <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	891a      	ldrh	r2, [r3, #8]
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	795b      	ldrb	r3, [r3, #5]
 800654e:	2001      	movs	r0, #1
 8006550:	9000      	str	r0, [sp, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f002 f827 	bl	80085a6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8006558:	e0a8      	b.n	80066ac <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	2207      	movs	r2, #7
 800655e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006562:	e0a3      	b.n	80066ac <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006564:	7d3b      	ldrb	r3, [r7, #20]
 8006566:	2b02      	cmp	r3, #2
 8006568:	d104      	bne.n	8006574 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	2205      	movs	r2, #5
 800656e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006572:	e09b      	b.n	80066ac <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8006574:	7d3b      	ldrb	r3, [r7, #20]
 8006576:	2b05      	cmp	r3, #5
 8006578:	f040 8098 	bne.w	80066ac <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	220a      	movs	r2, #10
 8006580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006584:	e092      	b.n	80066ac <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	791b      	ldrb	r3, [r3, #4]
 8006590:	220d      	movs	r2, #13
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f002 f82c 	bl	80085f0 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	2208      	movs	r2, #8
 800659c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80065a0:	e08d      	b.n	80066be <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	791b      	ldrb	r3, [r3, #4]
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f005 f991 	bl	800b8d0 <USBH_LL_GetURBState>
 80065ae:	4603      	mov	r3, r0
 80065b0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80065b2:	7d3b      	ldrb	r3, [r7, #20]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d115      	bne.n	80065e4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f8a9 	bl	8006720 <USBH_MSC_DecodeCSW>
 80065ce:	4603      	mov	r3, r0
 80065d0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80065d2:	7d7b      	ldrb	r3, [r7, #21]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d102      	bne.n	80065de <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80065dc:	e068      	b.n	80066b0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 80065de:	2302      	movs	r3, #2
 80065e0:	75fb      	strb	r3, [r7, #23]
      break;
 80065e2:	e065      	b.n	80066b0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 80065e4:	7d3b      	ldrb	r3, [r7, #20]
 80065e6:	2b05      	cmp	r3, #5
 80065e8:	d162      	bne.n	80066b0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2209      	movs	r2, #9
 80065ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80065f2:	e05d      	b.n	80066b0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	2200      	movs	r2, #0
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f864 	bl	80066c8 <USBH_MSC_BOT_Abort>
 8006600:	4603      	mov	r3, r0
 8006602:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006604:	7dbb      	ldrb	r3, [r7, #22]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d104      	bne.n	8006614 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	2207      	movs	r2, #7
 800660e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8006612:	e04f      	b.n	80066b4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006614:	7dbb      	ldrb	r3, [r7, #22]
 8006616:	2b04      	cmp	r3, #4
 8006618:	d14c      	bne.n	80066b4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	220b      	movs	r2, #11
 800661e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006622:	e047      	b.n	80066b4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8006624:	78fb      	ldrb	r3, [r7, #3]
 8006626:	2201      	movs	r2, #1
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f84c 	bl	80066c8 <USBH_MSC_BOT_Abort>
 8006630:	4603      	mov	r3, r0
 8006632:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006634:	7dbb      	ldrb	r3, [r7, #22]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d11d      	bne.n	8006676 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	795b      	ldrb	r3, [r3, #5]
 800663e:	4619      	mov	r1, r3
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f005 f99f 	bl	800b984 <USBH_LL_GetToggle>
 8006646:	4603      	mov	r3, r0
 8006648:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	7959      	ldrb	r1, [r3, #5]
 800664e:	7bfb      	ldrb	r3, [r7, #15]
 8006650:	f1c3 0301 	rsb	r3, r3, #1
 8006654:	b2db      	uxtb	r3, r3
 8006656:	461a      	mov	r2, r3
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f005 f963 	bl	800b924 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	791b      	ldrb	r3, [r3, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	4619      	mov	r1, r3
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f005 f95c 	bl	800b924 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2209      	movs	r2, #9
 8006670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006674:	e020      	b.n	80066b8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8006676:	7dbb      	ldrb	r3, [r7, #22]
 8006678:	2b04      	cmp	r3, #4
 800667a:	d11d      	bne.n	80066b8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	220b      	movs	r2, #11
 8006680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006684:	e018      	b.n	80066b8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff fdf2 	bl	8006270 <USBH_MSC_BOT_REQ_Reset>
 800668c:	4603      	mov	r3, r0
 800668e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006690:	7dfb      	ldrb	r3, [r7, #23]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d112      	bne.n	80066bc <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800669e:	e00d      	b.n	80066bc <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80066a0:	bf00      	nop
 80066a2:	e00c      	b.n	80066be <USBH_MSC_BOT_Process+0x392>
      break;
 80066a4:	bf00      	nop
 80066a6:	e00a      	b.n	80066be <USBH_MSC_BOT_Process+0x392>
      break;
 80066a8:	bf00      	nop
 80066aa:	e008      	b.n	80066be <USBH_MSC_BOT_Process+0x392>
      break;
 80066ac:	bf00      	nop
 80066ae:	e006      	b.n	80066be <USBH_MSC_BOT_Process+0x392>
      break;
 80066b0:	bf00      	nop
 80066b2:	e004      	b.n	80066be <USBH_MSC_BOT_Process+0x392>
      break;
 80066b4:	bf00      	nop
 80066b6:	e002      	b.n	80066be <USBH_MSC_BOT_Process+0x392>
      break;
 80066b8:	bf00      	nop
 80066ba:	e000      	b.n	80066be <USBH_MSC_BOT_Process+0x392>
      break;
 80066bc:	bf00      	nop
  }
  return status;
 80066be:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	70fb      	strb	r3, [r7, #3]
 80066d4:	4613      	mov	r3, r2
 80066d6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80066d8:	2302      	movs	r3, #2
 80066da:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80066e6:	78bb      	ldrb	r3, [r7, #2]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <USBH_MSC_BOT_Abort+0x2a>
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d009      	beq.n	8006704 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80066f0:	e011      	b.n	8006716 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	79db      	ldrb	r3, [r3, #7]
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f001 fb58 	bl	8007dae <USBH_ClrFeature>
 80066fe:	4603      	mov	r3, r0
 8006700:	73fb      	strb	r3, [r7, #15]
      break;
 8006702:	e008      	b.n	8006716 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	799b      	ldrb	r3, [r3, #6]
 8006708:	4619      	mov	r1, r3
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f001 fb4f 	bl	8007dae <USBH_ClrFeature>
 8006710:	4603      	mov	r3, r0
 8006712:	73fb      	strb	r3, [r7, #15]
      break;
 8006714:	bf00      	nop
  }
  return status;
 8006716:	7bfb      	ldrb	r3, [r7, #15]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006732:	2301      	movs	r3, #1
 8006734:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	791b      	ldrb	r3, [r3, #4]
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f005 f835 	bl	800b7ac <USBH_LL_GetLastXferSize>
 8006742:	4603      	mov	r3, r0
 8006744:	2b0d      	cmp	r3, #13
 8006746:	d002      	beq.n	800674e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8006748:	2302      	movs	r3, #2
 800674a:	73fb      	strb	r3, [r7, #15]
 800674c:	e024      	b.n	8006798 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006752:	4a14      	ldr	r2, [pc, #80]	; (80067a4 <USBH_MSC_DecodeCSW+0x84>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d11d      	bne.n	8006794 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006760:	429a      	cmp	r2, r3
 8006762:	d119      	bne.n	8006798 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800676a:	2b00      	cmp	r3, #0
 800676c:	d102      	bne.n	8006774 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]
 8006772:	e011      	b.n	8006798 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800677a:	2b01      	cmp	r3, #1
 800677c:	d102      	bne.n	8006784 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800677e:	2301      	movs	r3, #1
 8006780:	73fb      	strb	r3, [r7, #15]
 8006782:	e009      	b.n	8006798 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800678a:	2b02      	cmp	r3, #2
 800678c:	d104      	bne.n	8006798 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800678e:	2302      	movs	r3, #2
 8006790:	73fb      	strb	r3, [r7, #15]
 8006792:	e001      	b.n	8006798 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006794:	2302      	movs	r3, #2
 8006796:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8006798:	7bfb      	ldrb	r3, [r7, #15]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	53425355 	.word	0x53425355

080067a8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80067b4:	2302      	movs	r3, #2
 80067b6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d002      	beq.n	80067d2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d021      	beq.n	8006814 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80067d0:	e028      	b.n	8006824 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	220a      	movs	r2, #10
 80067e4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	3363      	adds	r3, #99	; 0x63
 80067ec:	2210      	movs	r2, #16
 80067ee:	2100      	movs	r1, #0
 80067f0:	4618      	mov	r0, r3
 80067f2:	f005 f993 	bl	800bb1c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2202      	movs	r2, #2
 800680a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800680e:	2301      	movs	r3, #1
 8006810:	73fb      	strb	r3, [r7, #15]
      break;
 8006812:	e007      	b.n	8006824 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff fd87 	bl	800632c <USBH_MSC_BOT_Process>
 800681e:	4603      	mov	r3, r0
 8006820:	73fb      	strb	r3, [r7, #15]
      break;
 8006822:	bf00      	nop
  }

  return error;
 8006824:	7bfb      	ldrb	r3, [r7, #15]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b086      	sub	sp, #24
 8006832:	af00      	add	r7, sp, #0
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	460b      	mov	r3, r1
 8006838:	607a      	str	r2, [r7, #4]
 800683a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800683c:	2301      	movs	r3, #1
 800683e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006850:	2b01      	cmp	r3, #1
 8006852:	d002      	beq.n	800685a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006854:	2b02      	cmp	r3, #2
 8006856:	d027      	beq.n	80068a8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8006858:	e05f      	b.n	800691a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2208      	movs	r2, #8
 800685e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	2280      	movs	r2, #128	; 0x80
 8006864:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	220a      	movs	r2, #10
 800686c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	3363      	adds	r3, #99	; 0x63
 8006874:	2210      	movs	r2, #16
 8006876:	2100      	movs	r1, #0
 8006878:	4618      	mov	r0, r3
 800687a:	f005 f94f 	bl	800bb1c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	2225      	movs	r2, #37	; 0x25
 8006882:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	2202      	movs	r2, #2
 8006892:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f103 0210 	add.w	r2, r3, #16
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80068a2:	2301      	movs	r3, #1
 80068a4:	75fb      	strb	r3, [r7, #23]
      break;
 80068a6:	e038      	b.n	800691a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80068a8:	7afb      	ldrb	r3, [r7, #11]
 80068aa:	4619      	mov	r1, r3
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f7ff fd3d 	bl	800632c <USBH_MSC_BOT_Process>
 80068b2:	4603      	mov	r3, r0
 80068b4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80068b6:	7dfb      	ldrb	r3, [r7, #23]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d12d      	bne.n	8006918 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068c2:	3303      	adds	r3, #3
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ce:	3302      	adds	r3, #2
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	021b      	lsls	r3, r3, #8
 80068d4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068dc:	3301      	adds	r3, #1
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80068e2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	061b      	lsls	r3, r3, #24
 80068ee:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068fa:	3307      	adds	r3, #7
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	b29a      	uxth	r2, r3
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006906:	3306      	adds	r3, #6
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	b29b      	uxth	r3, r3
 8006910:	4313      	orrs	r3, r2
 8006912:	b29a      	uxth	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	809a      	strh	r2, [r3, #4]
      break;
 8006918:	bf00      	nop
  }

  return error;
 800691a:	7dfb      	ldrb	r3, [r7, #23]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	460b      	mov	r3, r1
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8006932:	2302      	movs	r3, #2
 8006934:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006946:	2b01      	cmp	r3, #1
 8006948:	d002      	beq.n	8006950 <USBH_MSC_SCSI_Inquiry+0x2c>
 800694a:	2b02      	cmp	r3, #2
 800694c:	d03d      	beq.n	80069ca <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800694e:	e089      	b.n	8006a64 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	2224      	movs	r2, #36	; 0x24
 8006954:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2280      	movs	r2, #128	; 0x80
 800695a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	220a      	movs	r2, #10
 8006962:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	3363      	adds	r3, #99	; 0x63
 800696a:	220a      	movs	r2, #10
 800696c:	2100      	movs	r1, #0
 800696e:	4618      	mov	r0, r3
 8006970:	f005 f8d4 	bl	800bb1c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	2212      	movs	r2, #18
 8006978:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800697c:	7afb      	ldrb	r3, [r7, #11]
 800697e:	015b      	lsls	r3, r3, #5
 8006980:	b2da      	uxtb	r2, r3
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	2224      	movs	r2, #36	; 0x24
 800699c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f103 0210 	add.w	r2, r3, #16
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80069c4:	2301      	movs	r3, #1
 80069c6:	75fb      	strb	r3, [r7, #23]
      break;
 80069c8:	e04c      	b.n	8006a64 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80069ca:	7afb      	ldrb	r3, [r7, #11]
 80069cc:	4619      	mov	r1, r3
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f7ff fcac 	bl	800632c <USBH_MSC_BOT_Process>
 80069d4:	4603      	mov	r3, r0
 80069d6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d141      	bne.n	8006a62 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80069de:	2222      	movs	r2, #34	; 0x22
 80069e0:	2100      	movs	r1, #0
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f005 f89a 	bl	800bb1c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	f003 031f 	and.w	r3, r3, #31
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	095b      	lsrs	r3, r3, #5
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a10:	3301      	adds	r3, #1
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	b25b      	sxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	da03      	bge.n	8006a22 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	709a      	strb	r2, [r3, #2]
 8006a20:	e002      	b.n	8006a28 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	1cd8      	adds	r0, r3, #3
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a32:	3308      	adds	r3, #8
 8006a34:	2208      	movs	r2, #8
 8006a36:	4619      	mov	r1, r3
 8006a38:	f005 f862 	bl	800bb00 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f103 000c 	add.w	r0, r3, #12
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a48:	3310      	adds	r3, #16
 8006a4a:	2210      	movs	r2, #16
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	f005 f857 	bl	800bb00 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	331d      	adds	r3, #29
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8006a5c:	3220      	adds	r2, #32
 8006a5e:	6812      	ldr	r2, [r2, #0]
 8006a60:	601a      	str	r2, [r3, #0]
      break;
 8006a62:	bf00      	nop
  }

  return error;
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b086      	sub	sp, #24
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	460b      	mov	r3, r1
 8006a78:	607a      	str	r2, [r7, #4]
 8006a7a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d002      	beq.n	8006a9a <USBH_MSC_SCSI_RequestSense+0x2c>
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d03d      	beq.n	8006b14 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8006a98:	e05d      	b.n	8006b56 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	220e      	movs	r2, #14
 8006a9e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	2280      	movs	r2, #128	; 0x80
 8006aa4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	220a      	movs	r2, #10
 8006aac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	3363      	adds	r3, #99	; 0x63
 8006ab4:	2210      	movs	r2, #16
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f005 f82f 	bl	800bb1c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	2203      	movs	r2, #3
 8006ac2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006ac6:	7afb      	ldrb	r3, [r7, #11]
 8006ac8:	015b      	lsls	r3, r3, #5
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	220e      	movs	r2, #14
 8006ae6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	2202      	movs	r2, #2
 8006afe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f103 0210 	add.w	r2, r3, #16
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	75fb      	strb	r3, [r7, #23]
      break;
 8006b12:	e020      	b.n	8006b56 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006b14:	7afb      	ldrb	r3, [r7, #11]
 8006b16:	4619      	mov	r1, r3
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f7ff fc07 	bl	800632c <USBH_MSC_BOT_Process>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d115      	bne.n	8006b54 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b2e:	3302      	adds	r3, #2
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b42:	7b1a      	ldrb	r2, [r3, #12]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b4e:	7b5a      	ldrb	r2, [r3, #13]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	709a      	strb	r2, [r3, #2]
      break;
 8006b54:	bf00      	nop
  }

  return error;
 8006b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	607a      	str	r2, [r7, #4]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006b70:	2302      	movs	r3, #2
 8006b72:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d002      	beq.n	8006b8e <USBH_MSC_SCSI_Write+0x2e>
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d047      	beq.n	8006c1c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006b8c:	e04e      	b.n	8006c2c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8006b94:	461a      	mov	r2, r3
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	fb03 f202 	mul.w	r2, r3, r2
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	220a      	movs	r2, #10
 8006bac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	3363      	adds	r3, #99	; 0x63
 8006bb4:	2210      	movs	r2, #16
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f004 ffaf 	bl	800bb1c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	222a      	movs	r2, #42	; 0x2a
 8006bc2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8006bc6:	79fa      	ldrb	r2, [r7, #7]
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006bce:	79ba      	ldrb	r2, [r7, #6]
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006bd6:	797a      	ldrb	r2, [r7, #5]
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006bde:	1d3b      	adds	r3, r7, #4
 8006be0:	781a      	ldrb	r2, [r3, #0]
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006be8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006bf2:	f107 0320 	add.w	r3, r7, #32
 8006bf6:	781a      	ldrb	r2, [r3, #0]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006c16:	2301      	movs	r3, #1
 8006c18:	75fb      	strb	r3, [r7, #23]
      break;
 8006c1a:	e007      	b.n	8006c2c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006c1c:	7afb      	ldrb	r3, [r7, #11]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff fb83 	bl	800632c <USBH_MSC_BOT_Process>
 8006c26:	4603      	mov	r3, r0
 8006c28:	75fb      	strb	r3, [r7, #23]
      break;
 8006c2a:	bf00      	nop
  }

  return error;
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b086      	sub	sp, #24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	60f8      	str	r0, [r7, #12]
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	603b      	str	r3, [r7, #0]
 8006c42:	460b      	mov	r3, r1
 8006c44:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006c46:	2302      	movs	r3, #2
 8006c48:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d002      	beq.n	8006c64 <USBH_MSC_SCSI_Read+0x2e>
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d047      	beq.n	8006cf2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006c62:	e04e      	b.n	8006d02 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	fb03 f202 	mul.w	r2, r3, r2
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2280      	movs	r2, #128	; 0x80
 8006c7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	220a      	movs	r2, #10
 8006c82:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	3363      	adds	r3, #99	; 0x63
 8006c8a:	2210      	movs	r2, #16
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f004 ff44 	bl	800bb1c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2228      	movs	r2, #40	; 0x28
 8006c98:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8006c9c:	79fa      	ldrb	r2, [r7, #7]
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006ca4:	79ba      	ldrb	r2, [r7, #6]
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006cac:	797a      	ldrb	r2, [r7, #5]
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006cb4:	1d3b      	adds	r3, r7, #4
 8006cb6:	781a      	ldrb	r2, [r3, #0]
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006cbe:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006cc8:	f107 0320 	add.w	r3, r7, #32
 8006ccc:	781a      	ldrb	r2, [r3, #0]
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006cec:	2301      	movs	r3, #1
 8006cee:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf0:	e007      	b.n	8006d02 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006cf2:	7afb      	ldrb	r3, [r7, #11]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f7ff fb18 	bl	800632c <USBH_MSC_BOT_Process>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8006d00:	bf00      	nop
  }

  return error;
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	4613      	mov	r3, r2
 8006d18:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10a      	bne.n	8006d36 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 8006d20:	481c      	ldr	r0, [pc, #112]	; (8006d94 <USBH_Init+0x88>)
 8006d22:	f004 ffad 	bl	800bc80 <iprintf>
 8006d26:	481c      	ldr	r0, [pc, #112]	; (8006d98 <USBH_Init+0x8c>)
 8006d28:	f004 ffaa 	bl	800bc80 <iprintf>
 8006d2c:	200a      	movs	r0, #10
 8006d2e:	f004 ffbf 	bl	800bcb0 <putchar>
    return USBH_FAIL;
 8006d32:	2302      	movs	r3, #2
 8006d34:	e029      	b.n	8006d8a <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	79fa      	ldrb	r2, [r7, #7]
 8006d3a:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 f824 	bl	8006d9c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f004 fc5e 	bl	800b644 <USBH_LL_Init>

  return USBH_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	0800cd6c 	.word	0x0800cd6c
 8006d98:	0800cd74 	.word	0x0800cd74

08006d9c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	e009      	b.n	8006dc2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	33e0      	adds	r3, #224	; 0xe0
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	2200      	movs	r2, #0
 8006dba:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2b0e      	cmp	r3, #14
 8006dc6:	d9f2      	bls.n	8006dae <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006dc8:	2300      	movs	r3, #0
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	e009      	b.n	8006de2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006dd8:	2200      	movs	r2, #0
 8006dda:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3301      	adds	r3, #1
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de8:	d3f1      	bcc.n	8006dce <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2240      	movs	r2, #64	; 0x40
 8006e0e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01f      	beq.n	8006e98 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10e      	bne.n	8006e80 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e68:	1c59      	adds	r1, r3, #1
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	33de      	adds	r3, #222	; 0xde
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	73fb      	strb	r3, [r7, #15]
 8006e7e:	e016      	b.n	8006eae <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 8006e80:	480d      	ldr	r0, [pc, #52]	; (8006eb8 <USBH_RegisterClass+0x74>)
 8006e82:	f004 fefd 	bl	800bc80 <iprintf>
 8006e86:	480d      	ldr	r0, [pc, #52]	; (8006ebc <USBH_RegisterClass+0x78>)
 8006e88:	f004 fefa 	bl	800bc80 <iprintf>
 8006e8c:	200a      	movs	r0, #10
 8006e8e:	f004 ff0f 	bl	800bcb0 <putchar>
      status = USBH_FAIL;
 8006e92:	2302      	movs	r3, #2
 8006e94:	73fb      	strb	r3, [r7, #15]
 8006e96:	e00a      	b.n	8006eae <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 8006e98:	4807      	ldr	r0, [pc, #28]	; (8006eb8 <USBH_RegisterClass+0x74>)
 8006e9a:	f004 fef1 	bl	800bc80 <iprintf>
 8006e9e:	4808      	ldr	r0, [pc, #32]	; (8006ec0 <USBH_RegisterClass+0x7c>)
 8006ea0:	f004 feee 	bl	800bc80 <iprintf>
 8006ea4:	200a      	movs	r0, #10
 8006ea6:	f004 ff03 	bl	800bcb0 <putchar>
    status = USBH_FAIL;
 8006eaa:	2302      	movs	r3, #2
 8006eac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	0800cd6c 	.word	0x0800cd6c
 8006ebc:	0800cd88 	.word	0x0800cd88
 8006ec0:	0800cda4 	.word	0x0800cda4

08006ec4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006eda:	78fa      	ldrb	r2, [r7, #3]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d23c      	bcs.n	8006f5a <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	78fa      	ldrb	r2, [r7, #3]
 8006ee4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 8006ee8:	78fb      	ldrb	r3, [r7, #3]
 8006eea:	4619      	mov	r1, r3
 8006eec:	4823      	ldr	r0, [pc, #140]	; (8006f7c <USBH_SelectInterface+0xb8>)
 8006eee:	f004 fec7 	bl	800bc80 <iprintf>
 8006ef2:	200a      	movs	r0, #10
 8006ef4:	f004 fedc 	bl	800bcb0 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 8006ef8:	78fb      	ldrb	r3, [r7, #3]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	211a      	movs	r1, #26
 8006efe:	fb01 f303 	mul.w	r3, r1, r3
 8006f02:	4413      	add	r3, r2
 8006f04:	f203 3347 	addw	r3, r3, #839	; 0x347
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	481c      	ldr	r0, [pc, #112]	; (8006f80 <USBH_SelectInterface+0xbc>)
 8006f0e:	f004 feb7 	bl	800bc80 <iprintf>
 8006f12:	200a      	movs	r0, #10
 8006f14:	f004 fecc 	bl	800bcb0 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 8006f18:	78fb      	ldrb	r3, [r7, #3]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	211a      	movs	r1, #26
 8006f1e:	fb01 f303 	mul.w	r3, r1, r3
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	4815      	ldr	r0, [pc, #84]	; (8006f84 <USBH_SelectInterface+0xc0>)
 8006f2e:	f004 fea7 	bl	800bc80 <iprintf>
 8006f32:	200a      	movs	r0, #10
 8006f34:	f004 febc 	bl	800bcb0 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	211a      	movs	r1, #26
 8006f3e:	fb01 f303 	mul.w	r3, r1, r3
 8006f42:	4413      	add	r3, r2
 8006f44:	f203 3349 	addw	r3, r3, #841	; 0x349
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	480e      	ldr	r0, [pc, #56]	; (8006f88 <USBH_SelectInterface+0xc4>)
 8006f4e:	f004 fe97 	bl	800bc80 <iprintf>
 8006f52:	200a      	movs	r0, #10
 8006f54:	f004 feac 	bl	800bcb0 <putchar>
 8006f58:	e00a      	b.n	8006f70 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 8006f5a:	480c      	ldr	r0, [pc, #48]	; (8006f8c <USBH_SelectInterface+0xc8>)
 8006f5c:	f004 fe90 	bl	800bc80 <iprintf>
 8006f60:	480b      	ldr	r0, [pc, #44]	; (8006f90 <USBH_SelectInterface+0xcc>)
 8006f62:	f004 fe8d 	bl	800bc80 <iprintf>
 8006f66:	200a      	movs	r0, #10
 8006f68:	f004 fea2 	bl	800bcb0 <putchar>
    status = USBH_FAIL;
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	0800cdbc 	.word	0x0800cdbc
 8006f80:	0800cddc 	.word	0x0800cddc
 8006f84:	0800cdec 	.word	0x0800cdec
 8006f88:	0800cdfc 	.word	0x0800cdfc
 8006f8c:	0800cd6c 	.word	0x0800cd6c
 8006f90:	0800ce0c 	.word	0x0800ce0c

08006f94 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	70fb      	strb	r3, [r7, #3]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	70bb      	strb	r3, [r7, #2]
 8006faa:	4613      	mov	r3, r2
 8006fac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006fbc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006fbe:	e025      	b.n	800700c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	221a      	movs	r2, #26
 8006fc4:	fb02 f303 	mul.w	r3, r2, r3
 8006fc8:	3308      	adds	r3, #8
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4413      	add	r3, r2
 8006fce:	3302      	adds	r3, #2
 8006fd0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	795b      	ldrb	r3, [r3, #5]
 8006fd6:	78fa      	ldrb	r2, [r7, #3]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d002      	beq.n	8006fe2 <USBH_FindInterface+0x4e>
 8006fdc:	78fb      	ldrb	r3, [r7, #3]
 8006fde:	2bff      	cmp	r3, #255	; 0xff
 8006fe0:	d111      	bne.n	8007006 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006fe6:	78ba      	ldrb	r2, [r7, #2]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d002      	beq.n	8006ff2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fec:	78bb      	ldrb	r3, [r7, #2]
 8006fee:	2bff      	cmp	r3, #255	; 0xff
 8006ff0:	d109      	bne.n	8007006 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ff6:	787a      	ldrb	r2, [r7, #1]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d002      	beq.n	8007002 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ffc:	787b      	ldrb	r3, [r7, #1]
 8006ffe:	2bff      	cmp	r3, #255	; 0xff
 8007000:	d101      	bne.n	8007006 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007002:	7dfb      	ldrb	r3, [r7, #23]
 8007004:	e006      	b.n	8007014 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007006:	7dfb      	ldrb	r3, [r7, #23]
 8007008:	3301      	adds	r3, #1
 800700a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800700c:	7dfb      	ldrb	r3, [r7, #23]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d9d6      	bls.n	8006fc0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007012:	23ff      	movs	r3, #255	; 0xff
}
 8007014:	4618      	mov	r0, r3
 8007016:	371c      	adds	r7, #28
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f004 fb47 	bl	800b6bc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800702e:	2101      	movs	r1, #1
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f004 fc60 	bl	800b8f6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b088      	sub	sp, #32
 8007044:	af04      	add	r7, sp, #16
 8007046:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007048:	2302      	movs	r3, #2
 800704a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b01      	cmp	r3, #1
 800705a:	d102      	bne.n	8007062 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2203      	movs	r2, #3
 8007060:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b0b      	cmp	r3, #11
 800706a:	f200 822b 	bhi.w	80074c4 <USBH_Process+0x484>
 800706e:	a201      	add	r2, pc, #4	; (adr r2, 8007074 <USBH_Process+0x34>)
 8007070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007074:	080070a5 	.word	0x080070a5
 8007078:	080070e3 	.word	0x080070e3
 800707c:	08007163 	.word	0x08007163
 8007080:	08007453 	.word	0x08007453
 8007084:	080074c5 	.word	0x080074c5
 8007088:	08007207 	.word	0x08007207
 800708c:	080073d5 	.word	0x080073d5
 8007090:	08007255 	.word	0x08007255
 8007094:	08007275 	.word	0x08007275
 8007098:	080072a1 	.word	0x080072a1
 800709c:	080072db 	.word	0x080072db
 80070a0:	0800743b 	.word	0x0800743b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 820b 	beq.w	80074c8 <USBH_Process+0x488>
      {
        USBH_UsrLog("USB Device Connected");
 80070b2:	48b9      	ldr	r0, [pc, #740]	; (8007398 <USBH_Process+0x358>)
 80070b4:	f004 fde4 	bl	800bc80 <iprintf>
 80070b8:	200a      	movs	r0, #10
 80070ba:	f004 fdf9 	bl	800bcb0 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80070c4:	20c8      	movs	r0, #200	; 0xc8
 80070c6:	f004 fc8d 	bl	800b9e4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f004 fb53 	bl	800b776 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80070e0:	e1f2      	b.n	80074c8 <USBH_Process+0x488>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d10d      	bne.n	8007108 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 80070ec:	48ab      	ldr	r0, [pc, #684]	; (800739c <USBH_Process+0x35c>)
 80070ee:	f004 fdc7 	bl	800bc80 <iprintf>
 80070f2:	200a      	movs	r0, #10
 80070f4:	f004 fddc 	bl	800bcb0 <putchar>
        phost->device.RstCnt = 0U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007106:	e1ec      	b.n	80074e2 <USBH_Process+0x4a2>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800710e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007112:	d91a      	bls.n	800714a <USBH_Process+0x10a>
          phost->device.RstCnt++;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800711a:	3301      	adds	r3, #1
 800711c:	b2da      	uxtb	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800712a:	2b03      	cmp	r3, #3
 800712c:	d909      	bls.n	8007142 <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800712e:	489c      	ldr	r0, [pc, #624]	; (80073a0 <USBH_Process+0x360>)
 8007130:	f004 fda6 	bl	800bc80 <iprintf>
 8007134:	200a      	movs	r0, #10
 8007136:	f004 fdbb 	bl	800bcb0 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	220d      	movs	r2, #13
 800713e:	701a      	strb	r2, [r3, #0]
      break;
 8007140:	e1cf      	b.n	80074e2 <USBH_Process+0x4a2>
            phost->gState = HOST_IDLE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	701a      	strb	r2, [r3, #0]
      break;
 8007148:	e1cb      	b.n	80074e2 <USBH_Process+0x4a2>
          phost->Timeout += 10U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007150:	f103 020a 	add.w	r2, r3, #10
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800715a:	200a      	movs	r0, #10
 800715c:	f004 fc42 	bl	800b9e4 <USBH_Delay>
      break;
 8007160:	e1bf      	b.n	80074e2 <USBH_Process+0x4a2>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007172:	2104      	movs	r1, #4
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007178:	2064      	movs	r0, #100	; 0x64
 800717a:	f004 fc33 	bl	800b9e4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f004 fad2 	bl	800b728 <USBH_LL_GetSpeed>
 8007184:	4603      	mov	r3, r0
 8007186:	461a      	mov	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2205      	movs	r2, #5
 8007192:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007194:	2100      	movs	r1, #0
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f001 fa77 	bl	800868a <USBH_AllocPipe>
 800719c:	4603      	mov	r3, r0
 800719e:	461a      	mov	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80071a4:	2180      	movs	r1, #128	; 0x80
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 fa6f 	bl	800868a <USBH_AllocPipe>
 80071ac:	4603      	mov	r3, r0
 80071ae:	461a      	mov	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	7919      	ldrb	r1, [r3, #4]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80071c8:	b292      	uxth	r2, r2
 80071ca:	9202      	str	r2, [sp, #8]
 80071cc:	2200      	movs	r2, #0
 80071ce:	9201      	str	r2, [sp, #4]
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	4603      	mov	r3, r0
 80071d4:	2280      	movs	r2, #128	; 0x80
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 fa28 	bl	800862c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	7959      	ldrb	r1, [r3, #5]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80071f0:	b292      	uxth	r2, r2
 80071f2:	9202      	str	r2, [sp, #8]
 80071f4:	2200      	movs	r2, #0
 80071f6:	9201      	str	r2, [sp, #4]
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	4603      	mov	r3, r0
 80071fc:	2200      	movs	r2, #0
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 fa14 	bl	800862c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007204:	e16d      	b.n	80074e2 <USBH_Process+0x4a2>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f97a 	bl	8007500 <USBH_HandleEnum>
 800720c:	4603      	mov	r3, r0
 800720e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	f040 8159 	bne.w	80074cc <USBH_Process+0x48c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800721a:	4862      	ldr	r0, [pc, #392]	; (80073a4 <USBH_Process+0x364>)
 800721c:	f004 fd30 	bl	800bc80 <iprintf>
 8007220:	200a      	movs	r0, #10
 8007222:	f004 fd45 	bl	800bcb0 <putchar>

        phost->device.current_interface = 0U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007234:	2b01      	cmp	r3, #1
 8007236:	d109      	bne.n	800724c <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 8007238:	485b      	ldr	r0, [pc, #364]	; (80073a8 <USBH_Process+0x368>)
 800723a:	f004 fd21 	bl	800bc80 <iprintf>
 800723e:	200a      	movs	r0, #10
 8007240:	f004 fd36 	bl	800bcb0 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2208      	movs	r2, #8
 8007248:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800724a:	e13f      	b.n	80074cc <USBH_Process+0x48c>
          phost->gState = HOST_INPUT;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2207      	movs	r2, #7
 8007250:	701a      	strb	r2, [r3, #0]
      break;
 8007252:	e13b      	b.n	80074cc <USBH_Process+0x48c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800725a:	2b00      	cmp	r3, #0
 800725c:	f000 8138 	beq.w	80074d0 <USBH_Process+0x490>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007266:	2101      	movs	r1, #1
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2208      	movs	r2, #8
 8007270:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007272:	e12d      	b.n	80074d0 <USBH_Process+0x490>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800727a:	b29b      	uxth	r3, r3
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fd4e 	bl	8007d20 <USBH_SetCfg>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	f040 8124 	bne.w	80074d4 <USBH_Process+0x494>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2209      	movs	r2, #9
 8007290:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 8007292:	4846      	ldr	r0, [pc, #280]	; (80073ac <USBH_Process+0x36c>)
 8007294:	f004 fcf4 	bl	800bc80 <iprintf>
 8007298:	200a      	movs	r0, #10
 800729a:	f004 fd09 	bl	800bcb0 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800729e:	e119      	b.n	80074d4 <USBH_Process+0x494>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80072a6:	f003 0320 	and.w	r3, r3, #32
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d011      	beq.n	80072d2 <USBH_Process+0x292>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80072ae:	2101      	movs	r1, #1
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fd58 	bl	8007d66 <USBH_SetFeature>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f040 810d 	bne.w	80074d8 <USBH_Process+0x498>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 80072be:	483c      	ldr	r0, [pc, #240]	; (80073b0 <USBH_Process+0x370>)
 80072c0:	f004 fcde 	bl	800bc80 <iprintf>
 80072c4:	200a      	movs	r0, #10
 80072c6:	f004 fcf3 	bl	800bcb0 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	220a      	movs	r2, #10
 80072ce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80072d0:	e102      	b.n	80074d8 <USBH_Process+0x498>
        phost->gState = HOST_CHECK_CLASS;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	220a      	movs	r2, #10
 80072d6:	701a      	strb	r2, [r3, #0]
      break;
 80072d8:	e0fe      	b.n	80074d8 <USBH_Process+0x498>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d106      	bne.n	80072f2 <USBH_Process+0x2b2>
      {
        USBH_UsrLog("No Class has been registered.");
 80072e4:	4833      	ldr	r0, [pc, #204]	; (80073b4 <USBH_Process+0x374>)
 80072e6:	f004 fccb 	bl	800bc80 <iprintf>
 80072ea:	200a      	movs	r0, #10
 80072ec:	f004 fce0 	bl	800bcb0 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80072f0:	e0f7      	b.n	80074e2 <USBH_Process+0x4a2>
        phost->pActiveClass = NULL;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80072fa:	2300      	movs	r3, #0
 80072fc:	73fb      	strb	r3, [r7, #15]
 80072fe:	e016      	b.n	800732e <USBH_Process+0x2ee>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007300:	7bfa      	ldrb	r2, [r7, #15]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	32de      	adds	r2, #222	; 0xde
 8007306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730a:	791a      	ldrb	r2, [r3, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007312:	429a      	cmp	r2, r3
 8007314:	d108      	bne.n	8007328 <USBH_Process+0x2e8>
            phost->pActiveClass = phost->pClass[idx];
 8007316:	7bfa      	ldrb	r2, [r7, #15]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	32de      	adds	r2, #222	; 0xde
 800731c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007326:	e005      	b.n	8007334 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007328:	7bfb      	ldrb	r3, [r7, #15]
 800732a:	3301      	adds	r3, #1
 800732c:	73fb      	strb	r3, [r7, #15]
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d0e5      	beq.n	8007300 <USBH_Process+0x2c0>
        if (phost->pActiveClass != NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d040      	beq.n	80073c0 <USBH_Process+0x380>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	4798      	blx	r3
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d114      	bne.n	800737a <USBH_Process+0x33a>
            phost->gState = HOST_CLASS_REQUEST;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2206      	movs	r2, #6
 8007354:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4619      	mov	r1, r3
 8007360:	4815      	ldr	r0, [pc, #84]	; (80073b8 <USBH_Process+0x378>)
 8007362:	f004 fc8d 	bl	800bc80 <iprintf>
 8007366:	200a      	movs	r0, #10
 8007368:	f004 fca2 	bl	800bcb0 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007372:	2103      	movs	r1, #3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
      break;
 8007378:	e0b3      	b.n	80074e2 <USBH_Process+0x4a2>
            phost->gState = HOST_ABORT_STATE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	220d      	movs	r2, #13
 800737e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4619      	mov	r1, r3
 800738a:	480c      	ldr	r0, [pc, #48]	; (80073bc <USBH_Process+0x37c>)
 800738c:	f004 fc78 	bl	800bc80 <iprintf>
 8007390:	200a      	movs	r0, #10
 8007392:	f004 fc8d 	bl	800bcb0 <putchar>
      break;
 8007396:	e0a4      	b.n	80074e2 <USBH_Process+0x4a2>
 8007398:	0800ce2c 	.word	0x0800ce2c
 800739c:	0800ce44 	.word	0x0800ce44
 80073a0:	0800ce60 	.word	0x0800ce60
 80073a4:	0800ce8c 	.word	0x0800ce8c
 80073a8:	0800cea0 	.word	0x0800cea0
 80073ac:	0800cec8 	.word	0x0800cec8
 80073b0:	0800cee4 	.word	0x0800cee4
 80073b4:	0800cf04 	.word	0x0800cf04
 80073b8:	0800cf24 	.word	0x0800cf24
 80073bc:	0800cf38 	.word	0x0800cf38
          phost->gState = HOST_ABORT_STATE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	220d      	movs	r2, #13
 80073c4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 80073c6:	4849      	ldr	r0, [pc, #292]	; (80074ec <USBH_Process+0x4ac>)
 80073c8:	f004 fc5a 	bl	800bc80 <iprintf>
 80073cc:	200a      	movs	r0, #10
 80073ce:	f004 fc6f 	bl	800bcb0 <putchar>
      break;
 80073d2:	e086      	b.n	80074e2 <USBH_Process+0x4a2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d020      	beq.n	8007420 <USBH_Process+0x3e0>
      {
        status = phost->pActiveClass->Requests(phost);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
 80073ea:	4603      	mov	r3, r0
 80073ec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d103      	bne.n	80073fe <USBH_Process+0x3be>
        {
          phost->gState = HOST_CLASS;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	220b      	movs	r2, #11
 80073fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073fc:	e06e      	b.n	80074dc <USBH_Process+0x49c>
        else if (status == USBH_FAIL)
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b02      	cmp	r3, #2
 8007404:	d16a      	bne.n	80074dc <USBH_Process+0x49c>
          phost->gState = HOST_ABORT_STATE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	220d      	movs	r2, #13
 800740a:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800740c:	4838      	ldr	r0, [pc, #224]	; (80074f0 <USBH_Process+0x4b0>)
 800740e:	f004 fc37 	bl	800bc80 <iprintf>
 8007412:	4838      	ldr	r0, [pc, #224]	; (80074f4 <USBH_Process+0x4b4>)
 8007414:	f004 fc34 	bl	800bc80 <iprintf>
 8007418:	200a      	movs	r0, #10
 800741a:	f004 fc49 	bl	800bcb0 <putchar>
      break;
 800741e:	e05d      	b.n	80074dc <USBH_Process+0x49c>
        phost->gState = HOST_ABORT_STATE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	220d      	movs	r2, #13
 8007424:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 8007426:	4832      	ldr	r0, [pc, #200]	; (80074f0 <USBH_Process+0x4b0>)
 8007428:	f004 fc2a 	bl	800bc80 <iprintf>
 800742c:	4832      	ldr	r0, [pc, #200]	; (80074f8 <USBH_Process+0x4b8>)
 800742e:	f004 fc27 	bl	800bc80 <iprintf>
 8007432:	200a      	movs	r0, #10
 8007434:	f004 fc3c 	bl	800bcb0 <putchar>
      break;
 8007438:	e050      	b.n	80074dc <USBH_Process+0x49c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d04d      	beq.n	80074e0 <USBH_Process+0x4a0>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	4798      	blx	r3
      }
      break;
 8007450:	e046      	b.n	80074e0 <USBH_Process+0x4a0>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff fc9e 	bl	8006d9c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007466:	2b00      	cmp	r3, #0
 8007468:	d009      	beq.n	800747e <USBH_Process+0x43e>
      {
        phost->pActiveClass->DeInit(phost);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <USBH_Process+0x454>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800748e:	2105      	movs	r1, #5
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 8007494:	4819      	ldr	r0, [pc, #100]	; (80074fc <USBH_Process+0x4bc>)
 8007496:	f004 fbf3 	bl	800bc80 <iprintf>
 800749a:	200a      	movs	r0, #10
 800749c:	f004 fc08 	bl	800bcb0 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d107      	bne.n	80074bc <USBH_Process+0x47c>
      {
        phost->device.is_ReEnumerated = 0U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7ff fdb3 	bl	8007020 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074ba:	e012      	b.n	80074e2 <USBH_Process+0x4a2>
        USBH_LL_Start(phost);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f004 f8fd 	bl	800b6bc <USBH_LL_Start>
      break;
 80074c2:	e00e      	b.n	80074e2 <USBH_Process+0x4a2>

    case HOST_ABORT_STATE:
    default :
      break;
 80074c4:	bf00      	nop
 80074c6:	e00c      	b.n	80074e2 <USBH_Process+0x4a2>
      break;
 80074c8:	bf00      	nop
 80074ca:	e00a      	b.n	80074e2 <USBH_Process+0x4a2>
      break;
 80074cc:	bf00      	nop
 80074ce:	e008      	b.n	80074e2 <USBH_Process+0x4a2>
    break;
 80074d0:	bf00      	nop
 80074d2:	e006      	b.n	80074e2 <USBH_Process+0x4a2>
      break;
 80074d4:	bf00      	nop
 80074d6:	e004      	b.n	80074e2 <USBH_Process+0x4a2>
      break;
 80074d8:	bf00      	nop
 80074da:	e002      	b.n	80074e2 <USBH_Process+0x4a2>
      break;
 80074dc:	bf00      	nop
 80074de:	e000      	b.n	80074e2 <USBH_Process+0x4a2>
      break;
 80074e0:	bf00      	nop
  }
  return USBH_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	0800cf58 	.word	0x0800cf58
 80074f0:	0800cd6c 	.word	0x0800cd6c
 80074f4:	0800cf80 	.word	0x0800cf80
 80074f8:	0800cfa8 	.word	0x0800cfa8
 80074fc:	0800cfc0 	.word	0x0800cfc0

08007500 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	af04      	add	r7, sp, #16
 8007506:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007508:	2301      	movs	r3, #1
 800750a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800750c:	2301      	movs	r3, #1
 800750e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	785b      	ldrb	r3, [r3, #1]
 8007514:	2b07      	cmp	r3, #7
 8007516:	f200 8280 	bhi.w	8007a1a <USBH_HandleEnum+0x51a>
 800751a:	a201      	add	r2, pc, #4	; (adr r2, 8007520 <USBH_HandleEnum+0x20>)
 800751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007520:	08007541 	.word	0x08007541
 8007524:	0800761d 	.word	0x0800761d
 8007528:	080076cd 	.word	0x080076cd
 800752c:	0800778d 	.word	0x0800778d
 8007530:	08007815 	.word	0x08007815
 8007534:	080078c9 	.word	0x080078c9
 8007538:	0800793d 	.word	0x0800793d
 800753c:	080079af 	.word	0x080079af
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007540:	2108      	movs	r1, #8
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fb1c 	bl	8007b80 <USBH_Get_DevDesc>
 8007548:	4603      	mov	r3, r0
 800754a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d130      	bne.n	80075b4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	7919      	ldrb	r1, [r3, #4]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007576:	b292      	uxth	r2, r2
 8007578:	9202      	str	r2, [sp, #8]
 800757a:	2200      	movs	r2, #0
 800757c:	9201      	str	r2, [sp, #4]
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	4603      	mov	r3, r0
 8007582:	2280      	movs	r2, #128	; 0x80
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 f851 	bl	800862c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	7959      	ldrb	r1, [r3, #5]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800759e:	b292      	uxth	r2, r2
 80075a0:	9202      	str	r2, [sp, #8]
 80075a2:	2200      	movs	r2, #0
 80075a4:	9201      	str	r2, [sp, #4]
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	4603      	mov	r3, r0
 80075aa:	2200      	movs	r2, #0
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 f83d 	bl	800862c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80075b2:	e234      	b.n	8007a1e <USBH_HandleEnum+0x51e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075b4:	7bbb      	ldrb	r3, [r7, #14]
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	f040 8231 	bne.w	8007a1e <USBH_HandleEnum+0x51e>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 80075bc:	48b9      	ldr	r0, [pc, #740]	; (80078a4 <USBH_HandleEnum+0x3a4>)
 80075be:	f004 fb5f 	bl	800bc80 <iprintf>
 80075c2:	48b9      	ldr	r0, [pc, #740]	; (80078a8 <USBH_HandleEnum+0x3a8>)
 80075c4:	f004 fb5c 	bl	800bc80 <iprintf>
 80075c8:	200a      	movs	r0, #10
 80075ca:	f004 fb71 	bl	800bcb0 <putchar>
        phost->device.EnumCnt++;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075d4:	3301      	adds	r3, #1
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d909      	bls.n	80075fc <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80075e8:	48b0      	ldr	r0, [pc, #704]	; (80078ac <USBH_HandleEnum+0x3ac>)
 80075ea:	f004 fb49 	bl	800bc80 <iprintf>
 80075ee:	200a      	movs	r0, #10
 80075f0:	f004 fb5e 	bl	800bcb0 <putchar>
          phost->gState = HOST_ABORT_STATE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	220d      	movs	r2, #13
 80075f8:	701a      	strb	r2, [r3, #0]
      break;
 80075fa:	e210      	b.n	8007a1e <USBH_HandleEnum+0x51e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	795b      	ldrb	r3, [r3, #5]
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f001 f862 	bl	80086cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	791b      	ldrb	r3, [r3, #4]
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f001 f85c 	bl	80086cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	701a      	strb	r2, [r3, #0]
      break;
 800761a:	e200      	b.n	8007a1e <USBH_HandleEnum+0x51e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800761c:	2112      	movs	r1, #18
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 faae 	bl	8007b80 <USBH_Get_DevDesc>
 8007624:	4603      	mov	r3, r0
 8007626:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d117      	bne.n	800765e <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 8007634:	4619      	mov	r1, r3
 8007636:	489e      	ldr	r0, [pc, #632]	; (80078b0 <USBH_HandleEnum+0x3b0>)
 8007638:	f004 fb22 	bl	800bc80 <iprintf>
 800763c:	200a      	movs	r0, #10
 800763e:	f004 fb37 	bl	800bcb0 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 8007648:	4619      	mov	r1, r3
 800764a:	489a      	ldr	r0, [pc, #616]	; (80078b4 <USBH_HandleEnum+0x3b4>)
 800764c:	f004 fb18 	bl	800bc80 <iprintf>
 8007650:	200a      	movs	r0, #10
 8007652:	f004 fb2d 	bl	800bcb0 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2202      	movs	r2, #2
 800765a:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800765c:	e1e1      	b.n	8007a22 <USBH_HandleEnum+0x522>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800765e:	7bbb      	ldrb	r3, [r7, #14]
 8007660:	2b03      	cmp	r3, #3
 8007662:	f040 81de 	bne.w	8007a22 <USBH_HandleEnum+0x522>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 8007666:	488f      	ldr	r0, [pc, #572]	; (80078a4 <USBH_HandleEnum+0x3a4>)
 8007668:	f004 fb0a 	bl	800bc80 <iprintf>
 800766c:	4892      	ldr	r0, [pc, #584]	; (80078b8 <USBH_HandleEnum+0x3b8>)
 800766e:	f004 fb07 	bl	800bc80 <iprintf>
 8007672:	200a      	movs	r0, #10
 8007674:	f004 fb1c 	bl	800bcb0 <putchar>
        phost->device.EnumCnt++;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800767e:	3301      	adds	r3, #1
 8007680:	b2da      	uxtb	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800768e:	2b03      	cmp	r3, #3
 8007690:	d909      	bls.n	80076a6 <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8007692:	4886      	ldr	r0, [pc, #536]	; (80078ac <USBH_HandleEnum+0x3ac>)
 8007694:	f004 faf4 	bl	800bc80 <iprintf>
 8007698:	200a      	movs	r0, #10
 800769a:	f004 fb09 	bl	800bcb0 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	220d      	movs	r2, #13
 80076a2:	701a      	strb	r2, [r3, #0]
      break;
 80076a4:	e1bd      	b.n	8007a22 <USBH_HandleEnum+0x522>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	795b      	ldrb	r3, [r3, #5]
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 f80d 	bl	80086cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	791b      	ldrb	r3, [r3, #4]
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f001 f807 	bl	80086cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	701a      	strb	r2, [r3, #0]
      break;
 80076ca:	e1aa      	b.n	8007a22 <USBH_HandleEnum+0x522>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80076cc:	2101      	movs	r1, #1
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fb02 	bl	8007cd8 <USBH_SetAddress>
 80076d4:	4603      	mov	r3, r0
 80076d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d13c      	bne.n	8007758 <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 80076de:	2002      	movs	r0, #2
 80076e0:	f004 f980 	bl	800b9e4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 80076f2:	4619      	mov	r1, r3
 80076f4:	4871      	ldr	r0, [pc, #452]	; (80078bc <USBH_HandleEnum+0x3bc>)
 80076f6:	f004 fac3 	bl	800bc80 <iprintf>
 80076fa:	200a      	movs	r0, #10
 80076fc:	f004 fad8 	bl	800bcb0 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2203      	movs	r2, #3
 8007704:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	7919      	ldrb	r1, [r3, #4]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800771a:	b292      	uxth	r2, r2
 800771c:	9202      	str	r2, [sp, #8]
 800771e:	2200      	movs	r2, #0
 8007720:	9201      	str	r2, [sp, #4]
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	4603      	mov	r3, r0
 8007726:	2280      	movs	r2, #128	; 0x80
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 ff7f 	bl	800862c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	7959      	ldrb	r1, [r3, #5]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007742:	b292      	uxth	r2, r2
 8007744:	9202      	str	r2, [sp, #8]
 8007746:	2200      	movs	r2, #0
 8007748:	9201      	str	r2, [sp, #4]
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	4603      	mov	r3, r0
 800774e:	2200      	movs	r2, #0
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 ff6b 	bl	800862c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007756:	e166      	b.n	8007a26 <USBH_HandleEnum+0x526>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	2b03      	cmp	r3, #3
 800775c:	f040 8163 	bne.w	8007a26 <USBH_HandleEnum+0x526>
        USBH_ErrLog("Control error: Device Set Address request failed");
 8007760:	4850      	ldr	r0, [pc, #320]	; (80078a4 <USBH_HandleEnum+0x3a4>)
 8007762:	f004 fa8d 	bl	800bc80 <iprintf>
 8007766:	4856      	ldr	r0, [pc, #344]	; (80078c0 <USBH_HandleEnum+0x3c0>)
 8007768:	f004 fa8a 	bl	800bc80 <iprintf>
 800776c:	200a      	movs	r0, #10
 800776e:	f004 fa9f 	bl	800bcb0 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8007772:	484e      	ldr	r0, [pc, #312]	; (80078ac <USBH_HandleEnum+0x3ac>)
 8007774:	f004 fa84 	bl	800bc80 <iprintf>
 8007778:	200a      	movs	r0, #10
 800777a:	f004 fa99 	bl	800bcb0 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	220d      	movs	r2, #13
 8007782:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	705a      	strb	r2, [r3, #1]
      break;
 800778a:	e14c      	b.n	8007a26 <USBH_HandleEnum+0x526>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800778c:	2109      	movs	r1, #9
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fa1e 	bl	8007bd0 <USBH_Get_CfgDesc>
 8007794:	4603      	mov	r3, r0
 8007796:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d103      	bne.n	80077a6 <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2204      	movs	r2, #4
 80077a2:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077a4:	e141      	b.n	8007a2a <USBH_HandleEnum+0x52a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	f040 813e 	bne.w	8007a2a <USBH_HandleEnum+0x52a>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 80077ae:	483d      	ldr	r0, [pc, #244]	; (80078a4 <USBH_HandleEnum+0x3a4>)
 80077b0:	f004 fa66 	bl	800bc80 <iprintf>
 80077b4:	4843      	ldr	r0, [pc, #268]	; (80078c4 <USBH_HandleEnum+0x3c4>)
 80077b6:	f004 fa63 	bl	800bc80 <iprintf>
 80077ba:	200a      	movs	r0, #10
 80077bc:	f004 fa78 	bl	800bcb0 <putchar>
        phost->device.EnumCnt++;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077c6:	3301      	adds	r3, #1
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d909      	bls.n	80077ee <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80077da:	4834      	ldr	r0, [pc, #208]	; (80078ac <USBH_HandleEnum+0x3ac>)
 80077dc:	f004 fa50 	bl	800bc80 <iprintf>
 80077e0:	200a      	movs	r0, #10
 80077e2:	f004 fa65 	bl	800bcb0 <putchar>
          phost->gState = HOST_ABORT_STATE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	220d      	movs	r2, #13
 80077ea:	701a      	strb	r2, [r3, #0]
      break;
 80077ec:	e11d      	b.n	8007a2a <USBH_HandleEnum+0x52a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	795b      	ldrb	r3, [r3, #5]
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 ff69 	bl	80086cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	791b      	ldrb	r3, [r3, #4]
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 ff63 	bl	80086cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	701a      	strb	r2, [r3, #0]
      break;
 8007812:	e10a      	b.n	8007a2a <USBH_HandleEnum+0x52a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f9d7 	bl	8007bd0 <USBH_Get_CfgDesc>
 8007822:	4603      	mov	r3, r0
 8007824:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007826:	7bbb      	ldrb	r3, [r7, #14]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d103      	bne.n	8007834 <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2205      	movs	r2, #5
 8007830:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007832:	e0fc      	b.n	8007a2e <USBH_HandleEnum+0x52e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	2b03      	cmp	r3, #3
 8007838:	f040 80f9 	bne.w	8007a2e <USBH_HandleEnum+0x52e>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800783c:	4819      	ldr	r0, [pc, #100]	; (80078a4 <USBH_HandleEnum+0x3a4>)
 800783e:	f004 fa1f 	bl	800bc80 <iprintf>
 8007842:	4820      	ldr	r0, [pc, #128]	; (80078c4 <USBH_HandleEnum+0x3c4>)
 8007844:	f004 fa1c 	bl	800bc80 <iprintf>
 8007848:	200a      	movs	r0, #10
 800784a:	f004 fa31 	bl	800bcb0 <putchar>
        phost->device.EnumCnt++;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007854:	3301      	adds	r3, #1
 8007856:	b2da      	uxtb	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007864:	2b03      	cmp	r3, #3
 8007866:	d909      	bls.n	800787c <USBH_HandleEnum+0x37c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8007868:	4810      	ldr	r0, [pc, #64]	; (80078ac <USBH_HandleEnum+0x3ac>)
 800786a:	f004 fa09 	bl	800bc80 <iprintf>
 800786e:	200a      	movs	r0, #10
 8007870:	f004 fa1e 	bl	800bcb0 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	220d      	movs	r2, #13
 8007878:	701a      	strb	r2, [r3, #0]
      break;
 800787a:	e0d8      	b.n	8007a2e <USBH_HandleEnum+0x52e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	795b      	ldrb	r3, [r3, #5]
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 ff22 	bl	80086cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	791b      	ldrb	r3, [r3, #4]
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 ff1c 	bl	80086cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	701a      	strb	r2, [r3, #0]
      break;
 80078a0:	e0c5      	b.n	8007a2e <USBH_HandleEnum+0x52e>
 80078a2:	bf00      	nop
 80078a4:	0800cd6c 	.word	0x0800cd6c
 80078a8:	0800cfd8 	.word	0x0800cfd8
 80078ac:	0800d00c 	.word	0x0800d00c
 80078b0:	0800d04c 	.word	0x0800d04c
 80078b4:	0800d058 	.word	0x0800d058
 80078b8:	0800d064 	.word	0x0800d064
 80078bc:	0800d0a0 	.word	0x0800d0a0
 80078c0:	0800d0b8 	.word	0x0800d0b8
 80078c4:	0800d0ec 	.word	0x0800d0ec

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d02a      	beq.n	8007928 <USBH_HandleEnum+0x428>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078de:	23ff      	movs	r3, #255	; 0xff
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f999 	bl	8007c18 <USBH_Get_StringDesc>
 80078e6:	4603      	mov	r3, r0
 80078e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10d      	bne.n	800790c <USBH_HandleEnum+0x40c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078f6:	4619      	mov	r1, r3
 80078f8:	4853      	ldr	r0, [pc, #332]	; (8007a48 <USBH_HandleEnum+0x548>)
 80078fa:	f004 f9c1 	bl	800bc80 <iprintf>
 80078fe:	200a      	movs	r0, #10
 8007900:	f004 f9d6 	bl	800bcb0 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2206      	movs	r2, #6
 8007908:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800790a:	e092      	b.n	8007a32 <USBH_HandleEnum+0x532>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	2b03      	cmp	r3, #3
 8007910:	f040 808f 	bne.w	8007a32 <USBH_HandleEnum+0x532>
          USBH_UsrLog("Manufacturer : N/A");
 8007914:	484d      	ldr	r0, [pc, #308]	; (8007a4c <USBH_HandleEnum+0x54c>)
 8007916:	f004 f9b3 	bl	800bc80 <iprintf>
 800791a:	200a      	movs	r0, #10
 800791c:	f004 f9c8 	bl	800bcb0 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2206      	movs	r2, #6
 8007924:	705a      	strb	r2, [r3, #1]
      break;
 8007926:	e084      	b.n	8007a32 <USBH_HandleEnum+0x532>
        USBH_UsrLog("Manufacturer : N/A");
 8007928:	4848      	ldr	r0, [pc, #288]	; (8007a4c <USBH_HandleEnum+0x54c>)
 800792a:	f004 f9a9 	bl	800bc80 <iprintf>
 800792e:	200a      	movs	r0, #10
 8007930:	f004 f9be 	bl	800bcb0 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2206      	movs	r2, #6
 8007938:	705a      	strb	r2, [r3, #1]
      break;
 800793a:	e07a      	b.n	8007a32 <USBH_HandleEnum+0x532>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007942:	2b00      	cmp	r3, #0
 8007944:	d029      	beq.n	800799a <USBH_HandleEnum+0x49a>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007952:	23ff      	movs	r3, #255	; 0xff
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f95f 	bl	8007c18 <USBH_Get_StringDesc>
 800795a:	4603      	mov	r3, r0
 800795c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10d      	bne.n	8007980 <USBH_HandleEnum+0x480>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800796a:	4619      	mov	r1, r3
 800796c:	4838      	ldr	r0, [pc, #224]	; (8007a50 <USBH_HandleEnum+0x550>)
 800796e:	f004 f987 	bl	800bc80 <iprintf>
 8007972:	200a      	movs	r0, #10
 8007974:	f004 f99c 	bl	800bcb0 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2207      	movs	r2, #7
 800797c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800797e:	e05a      	b.n	8007a36 <USBH_HandleEnum+0x536>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	2b03      	cmp	r3, #3
 8007984:	d157      	bne.n	8007a36 <USBH_HandleEnum+0x536>
          USBH_UsrLog("Product : N/A");
 8007986:	4833      	ldr	r0, [pc, #204]	; (8007a54 <USBH_HandleEnum+0x554>)
 8007988:	f004 f97a 	bl	800bc80 <iprintf>
 800798c:	200a      	movs	r0, #10
 800798e:	f004 f98f 	bl	800bcb0 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2207      	movs	r2, #7
 8007996:	705a      	strb	r2, [r3, #1]
      break;
 8007998:	e04d      	b.n	8007a36 <USBH_HandleEnum+0x536>
        USBH_UsrLog("Product : N/A");
 800799a:	482e      	ldr	r0, [pc, #184]	; (8007a54 <USBH_HandleEnum+0x554>)
 800799c:	f004 f970 	bl	800bc80 <iprintf>
 80079a0:	200a      	movs	r0, #10
 80079a2:	f004 f985 	bl	800bcb0 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2207      	movs	r2, #7
 80079aa:	705a      	strb	r2, [r3, #1]
      break;
 80079ac:	e043      	b.n	8007a36 <USBH_HandleEnum+0x536>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d027      	beq.n	8007a08 <USBH_HandleEnum+0x508>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80079c4:	23ff      	movs	r3, #255	; 0xff
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f926 	bl	8007c18 <USBH_Get_StringDesc>
 80079cc:	4603      	mov	r3, r0
 80079ce:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079d0:	7bbb      	ldrb	r3, [r7, #14]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10c      	bne.n	80079f0 <USBH_HandleEnum+0x4f0>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079dc:	4619      	mov	r1, r3
 80079de:	481e      	ldr	r0, [pc, #120]	; (8007a58 <USBH_HandleEnum+0x558>)
 80079e0:	f004 f94e 	bl	800bc80 <iprintf>
 80079e4:	200a      	movs	r0, #10
 80079e6:	f004 f963 	bl	800bcb0 <putchar>
          Status = USBH_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80079ee:	e024      	b.n	8007a3a <USBH_HandleEnum+0x53a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d121      	bne.n	8007a3a <USBH_HandleEnum+0x53a>
          USBH_UsrLog("Serial Number : N/A");
 80079f6:	4819      	ldr	r0, [pc, #100]	; (8007a5c <USBH_HandleEnum+0x55c>)
 80079f8:	f004 f942 	bl	800bc80 <iprintf>
 80079fc:	200a      	movs	r0, #10
 80079fe:	f004 f957 	bl	800bcb0 <putchar>
          Status = USBH_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	73fb      	strb	r3, [r7, #15]
      break;
 8007a06:	e018      	b.n	8007a3a <USBH_HandleEnum+0x53a>
        USBH_UsrLog("Serial Number : N/A");
 8007a08:	4814      	ldr	r0, [pc, #80]	; (8007a5c <USBH_HandleEnum+0x55c>)
 8007a0a:	f004 f939 	bl	800bc80 <iprintf>
 8007a0e:	200a      	movs	r0, #10
 8007a10:	f004 f94e 	bl	800bcb0 <putchar>
        Status = USBH_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73fb      	strb	r3, [r7, #15]
      break;
 8007a18:	e00f      	b.n	8007a3a <USBH_HandleEnum+0x53a>

    default:
      break;
 8007a1a:	bf00      	nop
 8007a1c:	e00e      	b.n	8007a3c <USBH_HandleEnum+0x53c>
      break;
 8007a1e:	bf00      	nop
 8007a20:	e00c      	b.n	8007a3c <USBH_HandleEnum+0x53c>
      break;
 8007a22:	bf00      	nop
 8007a24:	e00a      	b.n	8007a3c <USBH_HandleEnum+0x53c>
      break;
 8007a26:	bf00      	nop
 8007a28:	e008      	b.n	8007a3c <USBH_HandleEnum+0x53c>
      break;
 8007a2a:	bf00      	nop
 8007a2c:	e006      	b.n	8007a3c <USBH_HandleEnum+0x53c>
      break;
 8007a2e:	bf00      	nop
 8007a30:	e004      	b.n	8007a3c <USBH_HandleEnum+0x53c>
      break;
 8007a32:	bf00      	nop
 8007a34:	e002      	b.n	8007a3c <USBH_HandleEnum+0x53c>
      break;
 8007a36:	bf00      	nop
 8007a38:	e000      	b.n	8007a3c <USBH_HandleEnum+0x53c>
      break;
 8007a3a:	bf00      	nop
  }
  return Status;
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	0800d130 	.word	0x0800d130
 8007a4c:	0800d144 	.word	0x0800d144
 8007a50:	0800d158 	.word	0x0800d158
 8007a54:	0800d168 	.word	0x0800d168
 8007a58:	0800d178 	.word	0x0800d178
 8007a5c:	0800d18c 	.word	0x0800d18c

08007a60 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b082      	sub	sp, #8
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f804 	bl	8007aa2 <USBH_HandleSof>
}
 8007a9a:	bf00      	nop
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b0b      	cmp	r3, #11
 8007ab2:	d10a      	bne.n	8007aca <USBH_HandleSof+0x28>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d005      	beq.n	8007aca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	4798      	blx	r3
  }
}
 8007aca:	bf00      	nop
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007ae2:	bf00      	nop
}
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b083      	sub	sp, #12
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007afe:	bf00      	nop
}
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f003 fdca 	bl	800b6f2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	791b      	ldrb	r3, [r3, #4]
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fdb1 	bl	80086cc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	795b      	ldrb	r3, [r3, #5]
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fdab 	bl	80086cc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af02      	add	r7, sp, #8
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007b92:	78fb      	ldrb	r3, [r7, #3]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f864 	bl	8007c6e <USBH_GetDescriptor>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	73fb      	strb	r3, [r7, #15]
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10a      	bne.n	8007bc6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bbc:	78fa      	ldrb	r2, [r7, #3]
 8007bbe:	b292      	uxth	r2, r2
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	f000 f918 	bl	8007df6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af02      	add	r7, sp, #8
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	331c      	adds	r3, #28
 8007be0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007be2:	887b      	ldrh	r3, [r7, #2]
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bec:	2100      	movs	r1, #0
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f83d 	bl	8007c6e <USBH_GetDescriptor>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	72fb      	strb	r3, [r7, #11]
 8007bf8:	7afb      	ldrb	r3, [r7, #11]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d107      	bne.n	8007c0e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007c04:	887a      	ldrh	r2, [r7, #2]
 8007c06:	68f9      	ldr	r1, [r7, #12]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 f964 	bl	8007ed6 <USBH_ParseCfgDesc>
  }

  return status;
 8007c0e:	7afb      	ldrb	r3, [r7, #11]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af02      	add	r7, sp, #8
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	607a      	str	r2, [r7, #4]
 8007c22:	461a      	mov	r2, r3
 8007c24:	460b      	mov	r3, r1
 8007c26:	72fb      	strb	r3, [r7, #11]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007c2c:	7afb      	ldrb	r3, [r7, #11]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007c34:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007c3c:	893b      	ldrh	r3, [r7, #8]
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	460b      	mov	r3, r1
 8007c42:	2100      	movs	r1, #0
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 f812 	bl	8007c6e <USBH_GetDescriptor>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	75fb      	strb	r3, [r7, #23]
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d107      	bne.n	8007c64 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c5a:	893a      	ldrh	r2, [r7, #8]
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 fa37 	bl	80080d2 <USBH_ParseStringDesc>
  }

  return status;
 8007c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	60f8      	str	r0, [r7, #12]
 8007c76:	607b      	str	r3, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	72fb      	strb	r3, [r7, #11]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	789b      	ldrb	r3, [r3, #2]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d11c      	bne.n	8007cc2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007c88:	7afb      	ldrb	r3, [r7, #11]
 8007c8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2206      	movs	r2, #6
 8007c98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	893a      	ldrh	r2, [r7, #8]
 8007c9e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007ca0:	893b      	ldrh	r3, [r7, #8]
 8007ca2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007caa:	d104      	bne.n	8007cb6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f240 4209 	movw	r2, #1033	; 0x409
 8007cb2:	829a      	strh	r2, [r3, #20]
 8007cb4:	e002      	b.n	8007cbc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	8b3a      	ldrh	r2, [r7, #24]
 8007cc0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007cc2:	8b3b      	ldrh	r3, [r7, #24]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f000 fa50 	bl	800816e <USBH_CtlReq>
 8007cce:	4603      	mov	r3, r0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	789b      	ldrb	r3, [r3, #2]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d10f      	bne.n	8007d0c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2205      	movs	r2, #5
 8007cf6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007cf8:	78fb      	ldrb	r3, [r7, #3]
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2100      	movs	r1, #0
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fa2c 	bl	800816e <USBH_CtlReq>
 8007d16:	4603      	mov	r3, r0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	789b      	ldrb	r3, [r3, #2]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d10e      	bne.n	8007d52 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2209      	movs	r2, #9
 8007d3e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	887a      	ldrh	r2, [r7, #2]
 8007d44:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d52:	2200      	movs	r2, #0
 8007d54:	2100      	movs	r1, #0
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa09 	bl	800816e <USBH_CtlReq>
 8007d5c:	4603      	mov	r3, r0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b082      	sub	sp, #8
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	789b      	ldrb	r3, [r3, #2]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d10f      	bne.n	8007d9a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2203      	movs	r2, #3
 8007d84:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007d86:	78fb      	ldrb	r3, [r7, #3]
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f9e5 	bl	800816e <USBH_CtlReq>
 8007da4:	4603      	mov	r3, r0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b082      	sub	sp, #8
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	460b      	mov	r3, r1
 8007db8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	789b      	ldrb	r3, [r3, #2]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d10f      	bne.n	8007de2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007de2:	2200      	movs	r2, #0
 8007de4:	2100      	movs	r1, #0
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f9c1 	bl	800816e <USBH_CtlReq>
 8007dec:	4603      	mov	r3, r0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b085      	sub	sp, #20
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	4613      	mov	r3, r2
 8007e02:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	781a      	ldrb	r2, [r3, #0]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	785a      	ldrb	r2, [r3, #1]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	3302      	adds	r3, #2
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	3303      	adds	r3, #3
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	021b      	lsls	r3, r3, #8
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	791a      	ldrb	r2, [r3, #4]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	795a      	ldrb	r2, [r3, #5]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	799a      	ldrb	r2, [r3, #6]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	79da      	ldrb	r2, [r3, #7]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007e50:	88fb      	ldrh	r3, [r7, #6]
 8007e52:	2b08      	cmp	r3, #8
 8007e54:	d939      	bls.n	8007eca <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	3308      	adds	r3, #8
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	3309      	adds	r3, #9
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	021b      	lsls	r3, r3, #8
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	330a      	adds	r3, #10
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	330b      	adds	r3, #11
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	021b      	lsls	r3, r3, #8
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	4313      	orrs	r3, r2
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	330c      	adds	r3, #12
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	330d      	adds	r3, #13
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	021b      	lsls	r3, r3, #8
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	7b9a      	ldrb	r2, [r3, #14]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	7bda      	ldrb	r2, [r3, #15]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	7c1a      	ldrb	r2, [r3, #16]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	7c5a      	ldrb	r2, [r3, #17]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	745a      	strb	r2, [r3, #17]
  }
}
 8007eca:	bf00      	nop
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b08a      	sub	sp, #40	; 0x28
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	781a      	ldrb	r2, [r3, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	785a      	ldrb	r2, [r3, #1]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	3302      	adds	r3, #2
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	3303      	adds	r3, #3
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	021b      	lsls	r3, r3, #8
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	791a      	ldrb	r2, [r3, #4]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	795a      	ldrb	r2, [r3, #5]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	799a      	ldrb	r2, [r3, #6]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	79da      	ldrb	r2, [r3, #7]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	7a1a      	ldrb	r2, [r3, #8]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f4c:	88fb      	ldrh	r3, [r7, #6]
 8007f4e:	2b09      	cmp	r3, #9
 8007f50:	d95f      	bls.n	8008012 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007f52:	2309      	movs	r3, #9
 8007f54:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f5a:	e051      	b.n	8008000 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f5c:	f107 0316 	add.w	r3, r7, #22
 8007f60:	4619      	mov	r1, r3
 8007f62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f64:	f000 f8e8 	bl	8008138 <USBH_GetNextDesc>
 8007f68:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	785b      	ldrb	r3, [r3, #1]
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	d146      	bne.n	8008000 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007f72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f76:	221a      	movs	r2, #26
 8007f78:	fb02 f303 	mul.w	r3, r2, r3
 8007f7c:	3308      	adds	r3, #8
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	4413      	add	r3, r2
 8007f82:	3302      	adds	r3, #2
 8007f84:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007f86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f88:	69f8      	ldr	r0, [r7, #28]
 8007f8a:	f000 f846 	bl	800801a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007f94:	2300      	movs	r3, #0
 8007f96:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f98:	e022      	b.n	8007fe0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f9a:	f107 0316 	add.w	r3, r7, #22
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fa2:	f000 f8c9 	bl	8008138 <USBH_GetNextDesc>
 8007fa6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007faa:	785b      	ldrb	r3, [r3, #1]
 8007fac:	2b05      	cmp	r3, #5
 8007fae:	d117      	bne.n	8007fe0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fb4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007fb8:	3201      	adds	r2, #1
 8007fba:	00d2      	lsls	r2, r2, #3
 8007fbc:	211a      	movs	r1, #26
 8007fbe:	fb01 f303 	mul.w	r3, r1, r3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	4413      	add	r3, r2
 8007fca:	3304      	adds	r3, #4
 8007fcc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007fce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fd0:	69b8      	ldr	r0, [r7, #24]
 8007fd2:	f000 f851 	bl	8008078 <USBH_ParseEPDesc>
            ep_ix++;
 8007fd6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007fda:	3301      	adds	r3, #1
 8007fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	791b      	ldrb	r3, [r3, #4]
 8007fe4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d204      	bcs.n	8007ff6 <USBH_ParseCfgDesc+0x120>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	885a      	ldrh	r2, [r3, #2]
 8007ff0:	8afb      	ldrh	r3, [r7, #22]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d8d1      	bhi.n	8007f9a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007ff6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008004:	2b01      	cmp	r3, #1
 8008006:	d804      	bhi.n	8008012 <USBH_ParseCfgDesc+0x13c>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	885a      	ldrh	r2, [r3, #2]
 800800c:	8afb      	ldrh	r3, [r7, #22]
 800800e:	429a      	cmp	r2, r3
 8008010:	d8a4      	bhi.n	8007f5c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008012:	bf00      	nop
 8008014:	3728      	adds	r7, #40	; 0x28
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	781a      	ldrb	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	785a      	ldrb	r2, [r3, #1]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	789a      	ldrb	r2, [r3, #2]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	78da      	ldrb	r2, [r3, #3]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	791a      	ldrb	r2, [r3, #4]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	795a      	ldrb	r2, [r3, #5]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	799a      	ldrb	r2, [r3, #6]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	79da      	ldrb	r2, [r3, #7]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	7a1a      	ldrb	r2, [r3, #8]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	721a      	strb	r2, [r3, #8]
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	781a      	ldrb	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	785a      	ldrb	r2, [r3, #1]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	789a      	ldrb	r2, [r3, #2]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	78da      	ldrb	r2, [r3, #3]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	3304      	adds	r3, #4
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	3305      	adds	r3, #5
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	021b      	lsls	r3, r3, #8
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	4313      	orrs	r3, r2
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	799a      	ldrb	r2, [r3, #6]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	719a      	strb	r2, [r3, #6]
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b087      	sub	sp, #28
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	4613      	mov	r3, r2
 80080de:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	3301      	adds	r3, #1
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d120      	bne.n	800812c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	1e9a      	subs	r2, r3, #2
 80080f0:	88fb      	ldrh	r3, [r7, #6]
 80080f2:	4293      	cmp	r3, r2
 80080f4:	bf28      	it	cs
 80080f6:	4613      	movcs	r3, r2
 80080f8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	3302      	adds	r3, #2
 80080fe:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008100:	2300      	movs	r3, #0
 8008102:	82fb      	strh	r3, [r7, #22]
 8008104:	e00b      	b.n	800811e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008106:	8afb      	ldrh	r3, [r7, #22]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	4413      	add	r3, r2
 800810c:	781a      	ldrb	r2, [r3, #0]
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	3301      	adds	r3, #1
 8008116:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008118:	8afb      	ldrh	r3, [r7, #22]
 800811a:	3302      	adds	r3, #2
 800811c:	82fb      	strh	r3, [r7, #22]
 800811e:	8afa      	ldrh	r2, [r7, #22]
 8008120:	8abb      	ldrh	r3, [r7, #20]
 8008122:	429a      	cmp	r2, r3
 8008124:	d3ef      	bcc.n	8008106 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	2200      	movs	r2, #0
 800812a:	701a      	strb	r2, [r3, #0]
  }
}
 800812c:	bf00      	nop
 800812e:	371c      	adds	r7, #28
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	881a      	ldrh	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	b29b      	uxth	r3, r3
 800814c:	4413      	add	r3, r2
 800814e:	b29a      	uxth	r2, r3
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4413      	add	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008160:	68fb      	ldr	r3, [r7, #12]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b086      	sub	sp, #24
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	4613      	mov	r3, r2
 800817a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800817c:	2301      	movs	r3, #1
 800817e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	789b      	ldrb	r3, [r3, #2]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d002      	beq.n	800818e <USBH_CtlReq+0x20>
 8008188:	2b02      	cmp	r3, #2
 800818a:	d00f      	beq.n	80081ac <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800818c:	e027      	b.n	80081de <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	88fa      	ldrh	r2, [r7, #6]
 8008198:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2201      	movs	r2, #1
 800819e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2202      	movs	r2, #2
 80081a4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80081a6:	2301      	movs	r3, #1
 80081a8:	75fb      	strb	r3, [r7, #23]
      break;
 80081aa:	e018      	b.n	80081de <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f000 f81b 	bl	80081e8 <USBH_HandleControl>
 80081b2:	4603      	mov	r3, r0
 80081b4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <USBH_CtlReq+0x54>
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d106      	bne.n	80081d0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2201      	movs	r2, #1
 80081c6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	761a      	strb	r2, [r3, #24]
      break;
 80081ce:	e005      	b.n	80081dc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80081d0:	7dfb      	ldrb	r3, [r7, #23]
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d102      	bne.n	80081dc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2201      	movs	r2, #1
 80081da:	709a      	strb	r2, [r3, #2]
      break;
 80081dc:	bf00      	nop
  }
  return status;
 80081de:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af02      	add	r7, sp, #8
 80081ee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80081f0:	2301      	movs	r3, #1
 80081f2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	7e1b      	ldrb	r3, [r3, #24]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	2b0a      	cmp	r3, #10
 8008200:	f200 815f 	bhi.w	80084c2 <USBH_HandleControl+0x2da>
 8008204:	a201      	add	r2, pc, #4	; (adr r2, 800820c <USBH_HandleControl+0x24>)
 8008206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820a:	bf00      	nop
 800820c:	08008239 	.word	0x08008239
 8008210:	08008253 	.word	0x08008253
 8008214:	080082bd 	.word	0x080082bd
 8008218:	080082e3 	.word	0x080082e3
 800821c:	0800831b 	.word	0x0800831b
 8008220:	08008345 	.word	0x08008345
 8008224:	08008397 	.word	0x08008397
 8008228:	080083b9 	.word	0x080083b9
 800822c:	080083f5 	.word	0x080083f5
 8008230:	0800841b 	.word	0x0800841b
 8008234:	08008459 	.word	0x08008459
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f103 0110 	add.w	r1, r3, #16
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	795b      	ldrb	r3, [r3, #5]
 8008242:	461a      	mov	r2, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f951 	bl	80084ec <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2202      	movs	r2, #2
 800824e:	761a      	strb	r2, [r3, #24]
      break;
 8008250:	e142      	b.n	80084d8 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	795b      	ldrb	r3, [r3, #5]
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f003 fb39 	bl	800b8d0 <USBH_LL_GetURBState>
 800825e:	4603      	mov	r3, r0
 8008260:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d11e      	bne.n	80082a6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	7c1b      	ldrb	r3, [r3, #16]
 800826c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008270:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	8adb      	ldrh	r3, [r3, #22]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00a      	beq.n	8008290 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800827a:	7b7b      	ldrb	r3, [r7, #13]
 800827c:	2b80      	cmp	r3, #128	; 0x80
 800827e:	d103      	bne.n	8008288 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2203      	movs	r2, #3
 8008284:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008286:	e11e      	b.n	80084c6 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2205      	movs	r2, #5
 800828c:	761a      	strb	r2, [r3, #24]
      break;
 800828e:	e11a      	b.n	80084c6 <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 8008290:	7b7b      	ldrb	r3, [r7, #13]
 8008292:	2b80      	cmp	r3, #128	; 0x80
 8008294:	d103      	bne.n	800829e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2209      	movs	r2, #9
 800829a:	761a      	strb	r2, [r3, #24]
      break;
 800829c:	e113      	b.n	80084c6 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2207      	movs	r2, #7
 80082a2:	761a      	strb	r2, [r3, #24]
      break;
 80082a4:	e10f      	b.n	80084c6 <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	d003      	beq.n	80082b4 <USBH_HandleControl+0xcc>
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	f040 8109 	bne.w	80084c6 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	220b      	movs	r2, #11
 80082b8:	761a      	strb	r2, [r3, #24]
      break;
 80082ba:	e104      	b.n	80084c6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6899      	ldr	r1, [r3, #8]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	899a      	ldrh	r2, [r3, #12]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	791b      	ldrb	r3, [r3, #4]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f948 	bl	800856a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2204      	movs	r2, #4
 80082de:	761a      	strb	r2, [r3, #24]
      break;
 80082e0:	e0fa      	b.n	80084d8 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	791b      	ldrb	r3, [r3, #4]
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f003 faf1 	bl	800b8d0 <USBH_LL_GetURBState>
 80082ee:	4603      	mov	r3, r0
 80082f0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d102      	bne.n	80082fe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2209      	movs	r2, #9
 80082fc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
 8008300:	2b05      	cmp	r3, #5
 8008302:	d102      	bne.n	800830a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008304:	2303      	movs	r3, #3
 8008306:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008308:	e0df      	b.n	80084ca <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	2b04      	cmp	r3, #4
 800830e:	f040 80dc 	bne.w	80084ca <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	220b      	movs	r2, #11
 8008316:	761a      	strb	r2, [r3, #24]
      break;
 8008318:	e0d7      	b.n	80084ca <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6899      	ldr	r1, [r3, #8]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	899a      	ldrh	r2, [r3, #12]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	795b      	ldrb	r3, [r3, #5]
 8008326:	2001      	movs	r0, #1
 8008328:	9000      	str	r0, [sp, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f8f8 	bl	8008520 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008336:	b29a      	uxth	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2206      	movs	r2, #6
 8008340:	761a      	strb	r2, [r3, #24]
      break;
 8008342:	e0c9      	b.n	80084d8 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	795b      	ldrb	r3, [r3, #5]
 8008348:	4619      	mov	r1, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f003 fac0 	bl	800b8d0 <USBH_LL_GetURBState>
 8008350:	4603      	mov	r3, r0
 8008352:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d103      	bne.n	8008362 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2207      	movs	r2, #7
 800835e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008360:	e0b5      	b.n	80084ce <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	2b05      	cmp	r3, #5
 8008366:	d105      	bne.n	8008374 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	220c      	movs	r2, #12
 800836c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800836e:	2303      	movs	r3, #3
 8008370:	73fb      	strb	r3, [r7, #15]
      break;
 8008372:	e0ac      	b.n	80084ce <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	2b02      	cmp	r3, #2
 8008378:	d103      	bne.n	8008382 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2205      	movs	r2, #5
 800837e:	761a      	strb	r2, [r3, #24]
      break;
 8008380:	e0a5      	b.n	80084ce <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 8008382:	7bbb      	ldrb	r3, [r7, #14]
 8008384:	2b04      	cmp	r3, #4
 8008386:	f040 80a2 	bne.w	80084ce <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	220b      	movs	r2, #11
 800838e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008390:	2302      	movs	r3, #2
 8008392:	73fb      	strb	r3, [r7, #15]
      break;
 8008394:	e09b      	b.n	80084ce <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	791b      	ldrb	r3, [r3, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	2100      	movs	r1, #0
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f8e3 	bl	800856a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2208      	movs	r2, #8
 80083b4:	761a      	strb	r2, [r3, #24]

      break;
 80083b6:	e08f      	b.n	80084d8 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	791b      	ldrb	r3, [r3, #4]
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f003 fa86 	bl	800b8d0 <USBH_LL_GetURBState>
 80083c4:	4603      	mov	r3, r0
 80083c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d105      	bne.n	80083da <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	220d      	movs	r2, #13
 80083d2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80083d8:	e07b      	b.n	80084d2 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 80083da:	7bbb      	ldrb	r3, [r7, #14]
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d103      	bne.n	80083e8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	220b      	movs	r2, #11
 80083e4:	761a      	strb	r2, [r3, #24]
      break;
 80083e6:	e074      	b.n	80084d2 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 80083e8:	7bbb      	ldrb	r3, [r7, #14]
 80083ea:	2b05      	cmp	r3, #5
 80083ec:	d171      	bne.n	80084d2 <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 80083ee:	2303      	movs	r3, #3
 80083f0:	73fb      	strb	r3, [r7, #15]
      break;
 80083f2:	e06e      	b.n	80084d2 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	795b      	ldrb	r3, [r3, #5]
 80083f8:	2201      	movs	r2, #1
 80083fa:	9200      	str	r2, [sp, #0]
 80083fc:	2200      	movs	r2, #0
 80083fe:	2100      	movs	r1, #0
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f88d 	bl	8008520 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800840c:	b29a      	uxth	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	220a      	movs	r2, #10
 8008416:	761a      	strb	r2, [r3, #24]
      break;
 8008418:	e05e      	b.n	80084d8 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	795b      	ldrb	r3, [r3, #5]
 800841e:	4619      	mov	r1, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f003 fa55 	bl	800b8d0 <USBH_LL_GetURBState>
 8008426:	4603      	mov	r3, r0
 8008428:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d105      	bne.n	800843c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	220d      	movs	r2, #13
 8008438:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800843a:	e04c      	b.n	80084d6 <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	2b02      	cmp	r3, #2
 8008440:	d103      	bne.n	800844a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2209      	movs	r2, #9
 8008446:	761a      	strb	r2, [r3, #24]
      break;
 8008448:	e045      	b.n	80084d6 <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	2b04      	cmp	r3, #4
 800844e:	d142      	bne.n	80084d6 <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	220b      	movs	r2, #11
 8008454:	761a      	strb	r2, [r3, #24]
      break;
 8008456:	e03e      	b.n	80084d6 <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	7e5b      	ldrb	r3, [r3, #25]
 800845c:	3301      	adds	r3, #1
 800845e:	b2da      	uxtb	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	765a      	strb	r2, [r3, #25]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	7e5b      	ldrb	r3, [r3, #25]
 8008468:	2b02      	cmp	r3, #2
 800846a:	d806      	bhi.n	800847a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008478:	e02e      	b.n	80084d8 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008480:	2106      	movs	r1, #6
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800848c:	4815      	ldr	r0, [pc, #84]	; (80084e4 <USBH_HandleControl+0x2fc>)
 800848e:	f003 fbf7 	bl	800bc80 <iprintf>
 8008492:	4815      	ldr	r0, [pc, #84]	; (80084e8 <USBH_HandleControl+0x300>)
 8008494:	f003 fbf4 	bl	800bc80 <iprintf>
 8008498:	200a      	movs	r0, #10
 800849a:	f003 fc09 	bl	800bcb0 <putchar>
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	795b      	ldrb	r3, [r3, #5]
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f911 	bl	80086cc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	791b      	ldrb	r3, [r3, #4]
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f90b 	bl	80086cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80084bc:	2302      	movs	r3, #2
 80084be:	73fb      	strb	r3, [r7, #15]
      break;
 80084c0:	e00a      	b.n	80084d8 <USBH_HandleControl+0x2f0>

    default:
      break;
 80084c2:	bf00      	nop
 80084c4:	e008      	b.n	80084d8 <USBH_HandleControl+0x2f0>
      break;
 80084c6:	bf00      	nop
 80084c8:	e006      	b.n	80084d8 <USBH_HandleControl+0x2f0>
      break;
 80084ca:	bf00      	nop
 80084cc:	e004      	b.n	80084d8 <USBH_HandleControl+0x2f0>
      break;
 80084ce:	bf00      	nop
 80084d0:	e002      	b.n	80084d8 <USBH_HandleControl+0x2f0>
      break;
 80084d2:	bf00      	nop
 80084d4:	e000      	b.n	80084d8 <USBH_HandleControl+0x2f0>
      break;
 80084d6:	bf00      	nop
  }

  return status;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	0800d1a0 	.word	0x0800d1a0
 80084e8:	0800d1a8 	.word	0x0800d1a8

080084ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b088      	sub	sp, #32
 80084f0:	af04      	add	r7, sp, #16
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	4613      	mov	r3, r2
 80084f8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80084fa:	79f9      	ldrb	r1, [r7, #7]
 80084fc:	2300      	movs	r3, #0
 80084fe:	9303      	str	r3, [sp, #12]
 8008500:	2308      	movs	r3, #8
 8008502:	9302      	str	r3, [sp, #8]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	9301      	str	r3, [sp, #4]
 8008508:	2300      	movs	r3, #0
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	2300      	movs	r3, #0
 800850e:	2200      	movs	r2, #0
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f003 f9ac 	bl	800b86e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b088      	sub	sp, #32
 8008524:	af04      	add	r7, sp, #16
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	4611      	mov	r1, r2
 800852c:	461a      	mov	r2, r3
 800852e:	460b      	mov	r3, r1
 8008530:	80fb      	strh	r3, [r7, #6]
 8008532:	4613      	mov	r3, r2
 8008534:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008540:	2300      	movs	r3, #0
 8008542:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008544:	7979      	ldrb	r1, [r7, #5]
 8008546:	7e3b      	ldrb	r3, [r7, #24]
 8008548:	9303      	str	r3, [sp, #12]
 800854a:	88fb      	ldrh	r3, [r7, #6]
 800854c:	9302      	str	r3, [sp, #8]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	2301      	movs	r3, #1
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	2300      	movs	r3, #0
 8008558:	2200      	movs	r2, #0
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f003 f987 	bl	800b86e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b088      	sub	sp, #32
 800856e:	af04      	add	r7, sp, #16
 8008570:	60f8      	str	r0, [r7, #12]
 8008572:	60b9      	str	r1, [r7, #8]
 8008574:	4611      	mov	r1, r2
 8008576:	461a      	mov	r2, r3
 8008578:	460b      	mov	r3, r1
 800857a:	80fb      	strh	r3, [r7, #6]
 800857c:	4613      	mov	r3, r2
 800857e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008580:	7979      	ldrb	r1, [r7, #5]
 8008582:	2300      	movs	r3, #0
 8008584:	9303      	str	r3, [sp, #12]
 8008586:	88fb      	ldrh	r3, [r7, #6]
 8008588:	9302      	str	r3, [sp, #8]
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	9301      	str	r3, [sp, #4]
 800858e:	2301      	movs	r3, #1
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	2300      	movs	r3, #0
 8008594:	2201      	movs	r2, #1
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f003 f969 	bl	800b86e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800859c:	2300      	movs	r3, #0

}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b088      	sub	sp, #32
 80085aa:	af04      	add	r7, sp, #16
 80085ac:	60f8      	str	r0, [r7, #12]
 80085ae:	60b9      	str	r1, [r7, #8]
 80085b0:	4611      	mov	r1, r2
 80085b2:	461a      	mov	r2, r3
 80085b4:	460b      	mov	r3, r1
 80085b6:	80fb      	strh	r3, [r7, #6]
 80085b8:	4613      	mov	r3, r2
 80085ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80085ca:	7979      	ldrb	r1, [r7, #5]
 80085cc:	7e3b      	ldrb	r3, [r7, #24]
 80085ce:	9303      	str	r3, [sp, #12]
 80085d0:	88fb      	ldrh	r3, [r7, #6]
 80085d2:	9302      	str	r3, [sp, #8]
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	2301      	movs	r3, #1
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	2302      	movs	r3, #2
 80085de:	2200      	movs	r2, #0
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f003 f944 	bl	800b86e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b088      	sub	sp, #32
 80085f4:	af04      	add	r7, sp, #16
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	4611      	mov	r1, r2
 80085fc:	461a      	mov	r2, r3
 80085fe:	460b      	mov	r3, r1
 8008600:	80fb      	strh	r3, [r7, #6]
 8008602:	4613      	mov	r3, r2
 8008604:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008606:	7979      	ldrb	r1, [r7, #5]
 8008608:	2300      	movs	r3, #0
 800860a:	9303      	str	r3, [sp, #12]
 800860c:	88fb      	ldrh	r3, [r7, #6]
 800860e:	9302      	str	r3, [sp, #8]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	9301      	str	r3, [sp, #4]
 8008614:	2301      	movs	r3, #1
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	2302      	movs	r3, #2
 800861a:	2201      	movs	r2, #1
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f003 f926 	bl	800b86e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af04      	add	r7, sp, #16
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	4608      	mov	r0, r1
 8008636:	4611      	mov	r1, r2
 8008638:	461a      	mov	r2, r3
 800863a:	4603      	mov	r3, r0
 800863c:	70fb      	strb	r3, [r7, #3]
 800863e:	460b      	mov	r3, r1
 8008640:	70bb      	strb	r3, [r7, #2]
 8008642:	4613      	mov	r3, r2
 8008644:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008646:	7878      	ldrb	r0, [r7, #1]
 8008648:	78ba      	ldrb	r2, [r7, #2]
 800864a:	78f9      	ldrb	r1, [r7, #3]
 800864c:	8b3b      	ldrh	r3, [r7, #24]
 800864e:	9302      	str	r3, [sp, #8]
 8008650:	7d3b      	ldrb	r3, [r7, #20]
 8008652:	9301      	str	r3, [sp, #4]
 8008654:	7c3b      	ldrb	r3, [r7, #16]
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	4603      	mov	r3, r0
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f003 f8b9 	bl	800b7d2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b082      	sub	sp, #8
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	460b      	mov	r3, r1
 8008674:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008676:	78fb      	ldrb	r3, [r7, #3]
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f003 f8d8 	bl	800b830 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b084      	sub	sp, #16
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	460b      	mov	r3, r1
 8008694:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f836 	bl	8008708 <USBH_GetFreePipe>
 800869c:	4603      	mov	r3, r0
 800869e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80086a0:	89fb      	ldrh	r3, [r7, #14]
 80086a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00a      	beq.n	80086c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80086aa:	78fa      	ldrb	r2, [r7, #3]
 80086ac:	89fb      	ldrh	r3, [r7, #14]
 80086ae:	f003 030f 	and.w	r3, r3, #15
 80086b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086b6:	6879      	ldr	r1, [r7, #4]
 80086b8:	33e0      	adds	r3, #224	; 0xe0
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	440b      	add	r3, r1
 80086be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80086c0:	89fb      	ldrh	r3, [r7, #14]
 80086c2:	b2db      	uxtb	r3, r3
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	2b0a      	cmp	r3, #10
 80086dc:	d80d      	bhi.n	80086fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80086de:	78fb      	ldrb	r3, [r7, #3]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	33e0      	adds	r3, #224	; 0xe0
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	78fb      	ldrb	r3, [r7, #3]
 80086ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	33e0      	adds	r3, #224	; 0xe0
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	440b      	add	r3, r1
 80086f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008714:	2300      	movs	r3, #0
 8008716:	73fb      	strb	r3, [r7, #15]
 8008718:	e00f      	b.n	800873a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800871a:	7bfb      	ldrb	r3, [r7, #15]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	33e0      	adds	r3, #224	; 0xe0
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d102      	bne.n	8008734 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800872e:	7bfb      	ldrb	r3, [r7, #15]
 8008730:	b29b      	uxth	r3, r3
 8008732:	e007      	b.n	8008744 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008734:	7bfb      	ldrb	r3, [r7, #15]
 8008736:	3301      	adds	r3, #1
 8008738:	73fb      	strb	r3, [r7, #15]
 800873a:	7bfb      	ldrb	r3, [r7, #15]
 800873c:	2b0a      	cmp	r3, #10
 800873e:	d9ec      	bls.n	800871a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008740:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	4603      	mov	r3, r0
 8008758:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800875a:	79fb      	ldrb	r3, [r7, #7]
 800875c:	4a08      	ldr	r2, [pc, #32]	; (8008780 <disk_status+0x30>)
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	79fa      	ldrb	r2, [r7, #7]
 8008768:	4905      	ldr	r1, [pc, #20]	; (8008780 <disk_status+0x30>)
 800876a:	440a      	add	r2, r1
 800876c:	7a12      	ldrb	r2, [r2, #8]
 800876e:	4610      	mov	r0, r2
 8008770:	4798      	blx	r3
 8008772:	4603      	mov	r3, r0
 8008774:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008776:	7bfb      	ldrb	r3, [r7, #15]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	200000d8 	.word	0x200000d8

08008784 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	4603      	mov	r3, r0
 800878c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008792:	79fb      	ldrb	r3, [r7, #7]
 8008794:	4a0d      	ldr	r2, [pc, #52]	; (80087cc <disk_initialize+0x48>)
 8008796:	5cd3      	ldrb	r3, [r2, r3]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d111      	bne.n	80087c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800879c:	79fb      	ldrb	r3, [r7, #7]
 800879e:	4a0b      	ldr	r2, [pc, #44]	; (80087cc <disk_initialize+0x48>)
 80087a0:	2101      	movs	r1, #1
 80087a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	4a09      	ldr	r2, [pc, #36]	; (80087cc <disk_initialize+0x48>)
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	79fa      	ldrb	r2, [r7, #7]
 80087b2:	4906      	ldr	r1, [pc, #24]	; (80087cc <disk_initialize+0x48>)
 80087b4:	440a      	add	r2, r1
 80087b6:	7a12      	ldrb	r2, [r2, #8]
 80087b8:	4610      	mov	r0, r2
 80087ba:	4798      	blx	r3
 80087bc:	4603      	mov	r3, r0
 80087be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	200000d8 	.word	0x200000d8

080087d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80087d0:	b590      	push	{r4, r7, lr}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	607a      	str	r2, [r7, #4]
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	4603      	mov	r3, r0
 80087de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
 80087e2:	4a0a      	ldr	r2, [pc, #40]	; (800880c <disk_read+0x3c>)
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	689c      	ldr	r4, [r3, #8]
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	4a07      	ldr	r2, [pc, #28]	; (800880c <disk_read+0x3c>)
 80087f0:	4413      	add	r3, r2
 80087f2:	7a18      	ldrb	r0, [r3, #8]
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	68b9      	ldr	r1, [r7, #8]
 80087fa:	47a0      	blx	r4
 80087fc:	4603      	mov	r3, r0
 80087fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8008800:	7dfb      	ldrb	r3, [r7, #23]
}
 8008802:	4618      	mov	r0, r3
 8008804:	371c      	adds	r7, #28
 8008806:	46bd      	mov	sp, r7
 8008808:	bd90      	pop	{r4, r7, pc}
 800880a:	bf00      	nop
 800880c:	200000d8 	.word	0x200000d8

08008810 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008810:	b590      	push	{r4, r7, lr}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	60b9      	str	r1, [r7, #8]
 8008818:	607a      	str	r2, [r7, #4]
 800881a:	603b      	str	r3, [r7, #0]
 800881c:	4603      	mov	r3, r0
 800881e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	4a0a      	ldr	r2, [pc, #40]	; (800884c <disk_write+0x3c>)
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	68dc      	ldr	r4, [r3, #12]
 800882c:	7bfb      	ldrb	r3, [r7, #15]
 800882e:	4a07      	ldr	r2, [pc, #28]	; (800884c <disk_write+0x3c>)
 8008830:	4413      	add	r3, r2
 8008832:	7a18      	ldrb	r0, [r3, #8]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	68b9      	ldr	r1, [r7, #8]
 800883a:	47a0      	blx	r4
 800883c:	4603      	mov	r3, r0
 800883e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008840:	7dfb      	ldrb	r3, [r7, #23]
}
 8008842:	4618      	mov	r0, r3
 8008844:	371c      	adds	r7, #28
 8008846:	46bd      	mov	sp, r7
 8008848:	bd90      	pop	{r4, r7, pc}
 800884a:	bf00      	nop
 800884c:	200000d8 	.word	0x200000d8

08008850 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	603a      	str	r2, [r7, #0]
 800885a:	71fb      	strb	r3, [r7, #7]
 800885c:	460b      	mov	r3, r1
 800885e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008860:	79fb      	ldrb	r3, [r7, #7]
 8008862:	4a09      	ldr	r2, [pc, #36]	; (8008888 <disk_ioctl+0x38>)
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	79fa      	ldrb	r2, [r7, #7]
 800886e:	4906      	ldr	r1, [pc, #24]	; (8008888 <disk_ioctl+0x38>)
 8008870:	440a      	add	r2, r1
 8008872:	7a10      	ldrb	r0, [r2, #8]
 8008874:	79b9      	ldrb	r1, [r7, #6]
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	4798      	blx	r3
 800887a:	4603      	mov	r3, r0
 800887c:	73fb      	strb	r3, [r7, #15]
  return res;
 800887e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	200000d8 	.word	0x200000d8

0800888c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3301      	adds	r3, #1
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800889c:	89fb      	ldrh	r3, [r7, #14]
 800889e:	021b      	lsls	r3, r3, #8
 80088a0:	b21a      	sxth	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	b21b      	sxth	r3, r3
 80088a8:	4313      	orrs	r3, r2
 80088aa:	b21b      	sxth	r3, r3
 80088ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 80088ae:	89fb      	ldrh	r3, [r7, #14]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	3303      	adds	r3, #3
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	021b      	lsls	r3, r3, #8
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	3202      	adds	r2, #2
 80088d4:	7812      	ldrb	r2, [r2, #0]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	021b      	lsls	r3, r3, #8
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	3201      	adds	r2, #1
 80088e2:	7812      	ldrb	r2, [r2, #0]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	021b      	lsls	r3, r3, #8
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	7812      	ldrb	r2, [r2, #0]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	60fb      	str	r3, [r7, #12]
	return rv;
 80088f4:	68fb      	ldr	r3, [r7, #12]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008902:	b480      	push	{r7}
 8008904:	b083      	sub	sp, #12
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	460b      	mov	r3, r1
 800890c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	607a      	str	r2, [r7, #4]
 8008914:	887a      	ldrh	r2, [r7, #2]
 8008916:	b2d2      	uxtb	r2, r2
 8008918:	701a      	strb	r2, [r3, #0]
 800891a:	887b      	ldrh	r3, [r7, #2]
 800891c:	0a1b      	lsrs	r3, r3, #8
 800891e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	1c5a      	adds	r2, r3, #1
 8008924:	607a      	str	r2, [r7, #4]
 8008926:	887a      	ldrh	r2, [r7, #2]
 8008928:	b2d2      	uxtb	r2, r2
 800892a:	701a      	strb	r2, [r3, #0]
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	607a      	str	r2, [r7, #4]
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	b2d2      	uxtb	r2, r2
 800894c:	701a      	strb	r2, [r3, #0]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	0a1b      	lsrs	r3, r3, #8
 8008952:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	607a      	str	r2, [r7, #4]
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	b2d2      	uxtb	r2, r2
 800895e:	701a      	strb	r2, [r3, #0]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	0a1b      	lsrs	r3, r3, #8
 8008964:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	607a      	str	r2, [r7, #4]
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	b2d2      	uxtb	r2, r2
 8008970:	701a      	strb	r2, [r3, #0]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	0a1b      	lsrs	r3, r3, #8
 8008976:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	1c5a      	adds	r2, r3, #1
 800897c:	607a      	str	r2, [r7, #4]
 800897e:	683a      	ldr	r2, [r7, #0]
 8008980:	b2d2      	uxtb	r2, r2
 8008982:	701a      	strb	r2, [r3, #0]
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008990:	b480      	push	{r7}
 8008992:	b087      	sub	sp, #28
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00d      	beq.n	80089c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	1c53      	adds	r3, r2, #1
 80089ae:	613b      	str	r3, [r7, #16]
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	1c59      	adds	r1, r3, #1
 80089b4:	6179      	str	r1, [r7, #20]
 80089b6:	7812      	ldrb	r2, [r2, #0]
 80089b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	3b01      	subs	r3, #1
 80089be:	607b      	str	r3, [r7, #4]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1f1      	bne.n	80089aa <mem_cpy+0x1a>
	}
}
 80089c6:	bf00      	nop
 80089c8:	371c      	adds	r7, #28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80089d2:	b480      	push	{r7}
 80089d4:	b087      	sub	sp, #28
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	60b9      	str	r1, [r7, #8]
 80089dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	1c5a      	adds	r2, r3, #1
 80089e6:	617a      	str	r2, [r7, #20]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	b2d2      	uxtb	r2, r2
 80089ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	3b01      	subs	r3, #1
 80089f2:	607b      	str	r3, [r7, #4]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1f3      	bne.n	80089e2 <mem_set+0x10>
}
 80089fa:	bf00      	nop
 80089fc:	bf00      	nop
 80089fe:	371c      	adds	r7, #28
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008a08:	b480      	push	{r7}
 8008a0a:	b089      	sub	sp, #36	; 0x24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	61fb      	str	r3, [r7, #28]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	61fa      	str	r2, [r7, #28]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	4619      	mov	r1, r3
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	1c5a      	adds	r2, r3, #1
 8008a2e:	61ba      	str	r2, [r7, #24]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	1acb      	subs	r3, r1, r3
 8008a34:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	607b      	str	r3, [r7, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <mem_cmp+0x40>
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d0eb      	beq.n	8008a20 <mem_cmp+0x18>

	return r;
 8008a48:	697b      	ldr	r3, [r7, #20]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3724      	adds	r7, #36	; 0x24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008a56:	b480      	push	{r7}
 8008a58:	b083      	sub	sp, #12
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008a60:	e002      	b.n	8008a68 <chk_chr+0x12>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	3301      	adds	r3, #1
 8008a66:	607b      	str	r3, [r7, #4]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d005      	beq.n	8008a7c <chk_chr+0x26>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	461a      	mov	r2, r3
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d1f2      	bne.n	8008a62 <chk_chr+0xc>
	return *str;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008a96:	2300      	movs	r3, #0
 8008a98:	60bb      	str	r3, [r7, #8]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	e029      	b.n	8008af4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008aa0:	4a27      	ldr	r2, [pc, #156]	; (8008b40 <chk_lock+0xb4>)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	011b      	lsls	r3, r3, #4
 8008aa6:	4413      	add	r3, r2
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d01d      	beq.n	8008aea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008aae:	4a24      	ldr	r2, [pc, #144]	; (8008b40 <chk_lock+0xb4>)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	011b      	lsls	r3, r3, #4
 8008ab4:	4413      	add	r3, r2
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d116      	bne.n	8008aee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008ac0:	4a1f      	ldr	r2, [pc, #124]	; (8008b40 <chk_lock+0xb4>)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	011b      	lsls	r3, r3, #4
 8008ac6:	4413      	add	r3, r2
 8008ac8:	3304      	adds	r3, #4
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d10c      	bne.n	8008aee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008ad4:	4a1a      	ldr	r2, [pc, #104]	; (8008b40 <chk_lock+0xb4>)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	011b      	lsls	r3, r3, #4
 8008ada:	4413      	add	r3, r2
 8008adc:	3308      	adds	r3, #8
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d102      	bne.n	8008aee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008ae8:	e007      	b.n	8008afa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008aea:	2301      	movs	r3, #1
 8008aec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3301      	adds	r3, #1
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d9d2      	bls.n	8008aa0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d109      	bne.n	8008b14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d102      	bne.n	8008b0c <chk_lock+0x80>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d101      	bne.n	8008b10 <chk_lock+0x84>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	e010      	b.n	8008b32 <chk_lock+0xa6>
 8008b10:	2312      	movs	r3, #18
 8008b12:	e00e      	b.n	8008b32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d108      	bne.n	8008b2c <chk_lock+0xa0>
 8008b1a:	4a09      	ldr	r2, [pc, #36]	; (8008b40 <chk_lock+0xb4>)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	011b      	lsls	r3, r3, #4
 8008b20:	4413      	add	r3, r2
 8008b22:	330c      	adds	r3, #12
 8008b24:	881b      	ldrh	r3, [r3, #0]
 8008b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b2a:	d101      	bne.n	8008b30 <chk_lock+0xa4>
 8008b2c:	2310      	movs	r3, #16
 8008b2e:	e000      	b.n	8008b32 <chk_lock+0xa6>
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3714      	adds	r7, #20
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	200000b8 	.word	0x200000b8

08008b44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	607b      	str	r3, [r7, #4]
 8008b4e:	e002      	b.n	8008b56 <enq_lock+0x12>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3301      	adds	r3, #1
 8008b54:	607b      	str	r3, [r7, #4]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d806      	bhi.n	8008b6a <enq_lock+0x26>
 8008b5c:	4a09      	ldr	r2, [pc, #36]	; (8008b84 <enq_lock+0x40>)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	011b      	lsls	r3, r3, #4
 8008b62:	4413      	add	r3, r2
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1f2      	bne.n	8008b50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	bf14      	ite	ne
 8008b70:	2301      	movne	r3, #1
 8008b72:	2300      	moveq	r3, #0
 8008b74:	b2db      	uxtb	r3, r3
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	200000b8 	.word	0x200000b8

08008b88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008b92:	2300      	movs	r3, #0
 8008b94:	60fb      	str	r3, [r7, #12]
 8008b96:	e01f      	b.n	8008bd8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008b98:	4a41      	ldr	r2, [pc, #260]	; (8008ca0 <inc_lock+0x118>)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	011b      	lsls	r3, r3, #4
 8008b9e:	4413      	add	r3, r2
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d113      	bne.n	8008bd2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008baa:	4a3d      	ldr	r2, [pc, #244]	; (8008ca0 <inc_lock+0x118>)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	011b      	lsls	r3, r3, #4
 8008bb0:	4413      	add	r3, r2
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d109      	bne.n	8008bd2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008bbe:	4a38      	ldr	r2, [pc, #224]	; (8008ca0 <inc_lock+0x118>)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	011b      	lsls	r3, r3, #4
 8008bc4:	4413      	add	r3, r2
 8008bc6:	3308      	adds	r3, #8
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d006      	beq.n	8008be0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	60fb      	str	r3, [r7, #12]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d9dc      	bls.n	8008b98 <inc_lock+0x10>
 8008bde:	e000      	b.n	8008be2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008be0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d132      	bne.n	8008c4e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008be8:	2300      	movs	r3, #0
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	e002      	b.n	8008bf4 <inc_lock+0x6c>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d806      	bhi.n	8008c08 <inc_lock+0x80>
 8008bfa:	4a29      	ldr	r2, [pc, #164]	; (8008ca0 <inc_lock+0x118>)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	011b      	lsls	r3, r3, #4
 8008c00:	4413      	add	r3, r2
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1f2      	bne.n	8008bee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d101      	bne.n	8008c12 <inc_lock+0x8a>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	e040      	b.n	8008c94 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	4922      	ldr	r1, [pc, #136]	; (8008ca0 <inc_lock+0x118>)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	011b      	lsls	r3, r3, #4
 8008c1c:	440b      	add	r3, r1
 8008c1e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	689a      	ldr	r2, [r3, #8]
 8008c24:	491e      	ldr	r1, [pc, #120]	; (8008ca0 <inc_lock+0x118>)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	011b      	lsls	r3, r3, #4
 8008c2a:	440b      	add	r3, r1
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	695a      	ldr	r2, [r3, #20]
 8008c34:	491a      	ldr	r1, [pc, #104]	; (8008ca0 <inc_lock+0x118>)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	011b      	lsls	r3, r3, #4
 8008c3a:	440b      	add	r3, r1
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008c40:	4a17      	ldr	r2, [pc, #92]	; (8008ca0 <inc_lock+0x118>)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	4413      	add	r3, r2
 8008c48:	330c      	adds	r3, #12
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d009      	beq.n	8008c68 <inc_lock+0xe0>
 8008c54:	4a12      	ldr	r2, [pc, #72]	; (8008ca0 <inc_lock+0x118>)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	011b      	lsls	r3, r3, #4
 8008c5a:	4413      	add	r3, r2
 8008c5c:	330c      	adds	r3, #12
 8008c5e:	881b      	ldrh	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <inc_lock+0xe0>
 8008c64:	2300      	movs	r3, #0
 8008c66:	e015      	b.n	8008c94 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d108      	bne.n	8008c80 <inc_lock+0xf8>
 8008c6e:	4a0c      	ldr	r2, [pc, #48]	; (8008ca0 <inc_lock+0x118>)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	011b      	lsls	r3, r3, #4
 8008c74:	4413      	add	r3, r2
 8008c76:	330c      	adds	r3, #12
 8008c78:	881b      	ldrh	r3, [r3, #0]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	e001      	b.n	8008c84 <inc_lock+0xfc>
 8008c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c84:	4906      	ldr	r1, [pc, #24]	; (8008ca0 <inc_lock+0x118>)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	011b      	lsls	r3, r3, #4
 8008c8a:	440b      	add	r3, r1
 8008c8c:	330c      	adds	r3, #12
 8008c8e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	3301      	adds	r3, #1
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	200000b8 	.word	0x200000b8

08008ca4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	607b      	str	r3, [r7, #4]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d825      	bhi.n	8008d04 <dec_lock+0x60>
		n = Files[i].ctr;
 8008cb8:	4a17      	ldr	r2, [pc, #92]	; (8008d18 <dec_lock+0x74>)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	011b      	lsls	r3, r3, #4
 8008cbe:	4413      	add	r3, r2
 8008cc0:	330c      	adds	r3, #12
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008cc6:	89fb      	ldrh	r3, [r7, #14]
 8008cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ccc:	d101      	bne.n	8008cd2 <dec_lock+0x2e>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008cd2:	89fb      	ldrh	r3, [r7, #14]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <dec_lock+0x3a>
 8008cd8:	89fb      	ldrh	r3, [r7, #14]
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008cde:	4a0e      	ldr	r2, [pc, #56]	; (8008d18 <dec_lock+0x74>)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	011b      	lsls	r3, r3, #4
 8008ce4:	4413      	add	r3, r2
 8008ce6:	330c      	adds	r3, #12
 8008ce8:	89fa      	ldrh	r2, [r7, #14]
 8008cea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008cec:	89fb      	ldrh	r3, [r7, #14]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d105      	bne.n	8008cfe <dec_lock+0x5a>
 8008cf2:	4a09      	ldr	r2, [pc, #36]	; (8008d18 <dec_lock+0x74>)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	011b      	lsls	r3, r3, #4
 8008cf8:	4413      	add	r3, r2
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	737b      	strb	r3, [r7, #13]
 8008d02:	e001      	b.n	8008d08 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008d04:	2302      	movs	r3, #2
 8008d06:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008d08:	7b7b      	ldrb	r3, [r7, #13]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	200000b8 	.word	0x200000b8

08008d1c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008d24:	2300      	movs	r3, #0
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	e010      	b.n	8008d4c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008d2a:	4a0d      	ldr	r2, [pc, #52]	; (8008d60 <clear_lock+0x44>)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	011b      	lsls	r3, r3, #4
 8008d30:	4413      	add	r3, r2
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d105      	bne.n	8008d46 <clear_lock+0x2a>
 8008d3a:	4a09      	ldr	r2, [pc, #36]	; (8008d60 <clear_lock+0x44>)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	011b      	lsls	r3, r3, #4
 8008d40:	4413      	add	r3, r2
 8008d42:	2200      	movs	r2, #0
 8008d44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	60fb      	str	r3, [r7, #12]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d9eb      	bls.n	8008d2a <clear_lock+0xe>
	}
}
 8008d52:	bf00      	nop
 8008d54:	bf00      	nop
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	200000b8 	.word	0x200000b8

08008d64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	78db      	ldrb	r3, [r3, #3]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d034      	beq.n	8008de2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	7858      	ldrb	r0, [r3, #1]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008d88:	2301      	movs	r3, #1
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	f7ff fd40 	bl	8008810 <disk_write>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	73fb      	strb	r3, [r7, #15]
 8008d9a:	e022      	b.n	8008de2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	1ad2      	subs	r2, r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	69db      	ldr	r3, [r3, #28]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d217      	bcs.n	8008de2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	789b      	ldrb	r3, [r3, #2]
 8008db6:	613b      	str	r3, [r7, #16]
 8008db8:	e010      	b.n	8008ddc <sync_window+0x78>
					wsect += fs->fsize;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	69db      	ldr	r3, [r3, #28]
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	7858      	ldrb	r0, [r3, #1]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008dce:	2301      	movs	r3, #1
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	f7ff fd1d 	bl	8008810 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	613b      	str	r3, [r7, #16]
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d8eb      	bhi.n	8008dba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3718      	adds	r7, #24
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d01b      	beq.n	8008e3c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f7ff ffad 	bl	8008d64 <sync_window>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d113      	bne.n	8008e3c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	7858      	ldrb	r0, [r3, #1]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008e1e:	2301      	movs	r3, #1
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	f7ff fcd5 	bl	80087d0 <disk_read>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d004      	beq.n	8008e36 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e30:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8008e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
	...

08008e48 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7ff ff87 	bl	8008d64 <sync_window>
 8008e56:	4603      	mov	r3, r0
 8008e58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008e5a:	7bfb      	ldrb	r3, [r7, #15]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d159      	bne.n	8008f14 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	2b03      	cmp	r3, #3
 8008e66:	d149      	bne.n	8008efc <sync_fs+0xb4>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	791b      	ldrb	r3, [r3, #4]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d145      	bne.n	8008efc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	899b      	ldrh	r3, [r3, #12]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	f7ff fda8 	bl	80089d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	3334      	adds	r3, #52	; 0x34
 8008e86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008e8a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7ff fd37 	bl	8008902 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	3334      	adds	r3, #52	; 0x34
 8008e98:	4921      	ldr	r1, [pc, #132]	; (8008f20 <sync_fs+0xd8>)
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7ff fd4c 	bl	8008938 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3334      	adds	r3, #52	; 0x34
 8008ea4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008ea8:	491e      	ldr	r1, [pc, #120]	; (8008f24 <sync_fs+0xdc>)
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7ff fd44 	bl	8008938 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3334      	adds	r3, #52	; 0x34
 8008eb4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	695b      	ldr	r3, [r3, #20]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	f7ff fd3a 	bl	8008938 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	3334      	adds	r3, #52	; 0x34
 8008ec8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	f7ff fd30 	bl	8008938 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	1c5a      	adds	r2, r3, #1
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	7858      	ldrb	r0, [r3, #1]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	f7ff fc8d 	bl	8008810 <disk_write>
			fs->fsi_flag = 0;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	785b      	ldrb	r3, [r3, #1]
 8008f00:	2200      	movs	r2, #0
 8008f02:	2100      	movs	r1, #0
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7ff fca3 	bl	8008850 <disk_ioctl>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <sync_fs+0xcc>
 8008f10:	2301      	movs	r3, #1
 8008f12:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	41615252 	.word	0x41615252
 8008f24:	61417272 	.word	0x61417272

08008f28 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	3b02      	subs	r3, #2
 8008f36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	3b02      	subs	r3, #2
 8008f3e:	683a      	ldr	r2, [r7, #0]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d301      	bcc.n	8008f48 <clust2sect+0x20>
 8008f44:	2300      	movs	r3, #0
 8008f46:	e008      	b.n	8008f5a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	895b      	ldrh	r3, [r3, #10]
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	fb03 f202 	mul.w	r2, r3, r2
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f58:	4413      	add	r3, r2
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b086      	sub	sp, #24
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d904      	bls.n	8008f86 <get_fat+0x20>
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	683a      	ldr	r2, [r7, #0]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d302      	bcc.n	8008f8c <get_fat+0x26>
		val = 1;	/* Internal error */
 8008f86:	2301      	movs	r3, #1
 8008f88:	617b      	str	r3, [r7, #20]
 8008f8a:	e0bb      	b.n	8009104 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	f000 8083 	beq.w	80090a2 <get_fat+0x13c>
 8008f9c:	2b03      	cmp	r3, #3
 8008f9e:	f300 80a7 	bgt.w	80090f0 <get_fat+0x18a>
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d002      	beq.n	8008fac <get_fat+0x46>
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d056      	beq.n	8009058 <get_fat+0xf2>
 8008faa:	e0a1      	b.n	80090f0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	60fb      	str	r3, [r7, #12]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	085b      	lsrs	r3, r3, #1
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	899b      	ldrh	r3, [r3, #12]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fca:	4413      	add	r3, r2
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6938      	ldr	r0, [r7, #16]
 8008fd0:	f7ff ff0c 	bl	8008dec <move_window>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f040 808d 	bne.w	80090f6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	60fa      	str	r2, [r7, #12]
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	8992      	ldrh	r2, [r2, #12]
 8008fe6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fea:	fb02 f201 	mul.w	r2, r2, r1
 8008fee:	1a9b      	subs	r3, r3, r2
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ff8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	899b      	ldrh	r3, [r3, #12]
 8009002:	4619      	mov	r1, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	fbb3 f3f1 	udiv	r3, r3, r1
 800900a:	4413      	add	r3, r2
 800900c:	4619      	mov	r1, r3
 800900e:	6938      	ldr	r0, [r7, #16]
 8009010:	f7ff feec 	bl	8008dec <move_window>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d16f      	bne.n	80090fa <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	899b      	ldrh	r3, [r3, #12]
 800901e:	461a      	mov	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	fbb3 f1f2 	udiv	r1, r3, r2
 8009026:	fb02 f201 	mul.w	r2, r2, r1
 800902a:	1a9b      	subs	r3, r3, r2
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	4413      	add	r3, r2
 8009030:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009034:	021b      	lsls	r3, r3, #8
 8009036:	461a      	mov	r2, r3
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	4313      	orrs	r3, r2
 800903c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	f003 0301 	and.w	r3, r3, #1
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <get_fat+0xe8>
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	091b      	lsrs	r3, r3, #4
 800904c:	e002      	b.n	8009054 <get_fat+0xee>
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009054:	617b      	str	r3, [r7, #20]
			break;
 8009056:	e055      	b.n	8009104 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	899b      	ldrh	r3, [r3, #12]
 8009060:	085b      	lsrs	r3, r3, #1
 8009062:	b29b      	uxth	r3, r3
 8009064:	4619      	mov	r1, r3
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	fbb3 f3f1 	udiv	r3, r3, r1
 800906c:	4413      	add	r3, r2
 800906e:	4619      	mov	r1, r3
 8009070:	6938      	ldr	r0, [r7, #16]
 8009072:	f7ff febb 	bl	8008dec <move_window>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d140      	bne.n	80090fe <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	8992      	ldrh	r2, [r2, #12]
 800908a:	fbb3 f0f2 	udiv	r0, r3, r2
 800908e:	fb02 f200 	mul.w	r2, r2, r0
 8009092:	1a9b      	subs	r3, r3, r2
 8009094:	440b      	add	r3, r1
 8009096:	4618      	mov	r0, r3
 8009098:	f7ff fbf8 	bl	800888c <ld_word>
 800909c:	4603      	mov	r3, r0
 800909e:	617b      	str	r3, [r7, #20]
			break;
 80090a0:	e030      	b.n	8009104 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	899b      	ldrh	r3, [r3, #12]
 80090aa:	089b      	lsrs	r3, r3, #2
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	4619      	mov	r1, r3
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80090b6:	4413      	add	r3, r2
 80090b8:	4619      	mov	r1, r3
 80090ba:	6938      	ldr	r0, [r7, #16]
 80090bc:	f7ff fe96 	bl	8008dec <move_window>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d11d      	bne.n	8009102 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	8992      	ldrh	r2, [r2, #12]
 80090d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80090d8:	fb02 f200 	mul.w	r2, r2, r0
 80090dc:	1a9b      	subs	r3, r3, r2
 80090de:	440b      	add	r3, r1
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7ff fbeb 	bl	80088bc <ld_dword>
 80090e6:	4603      	mov	r3, r0
 80090e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80090ec:	617b      	str	r3, [r7, #20]
			break;
 80090ee:	e009      	b.n	8009104 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80090f0:	2301      	movs	r3, #1
 80090f2:	617b      	str	r3, [r7, #20]
 80090f4:	e006      	b.n	8009104 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090f6:	bf00      	nop
 80090f8:	e004      	b.n	8009104 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090fa:	bf00      	nop
 80090fc:	e002      	b.n	8009104 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80090fe:	bf00      	nop
 8009100:	e000      	b.n	8009104 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009102:	bf00      	nop
		}
	}

	return val;
 8009104:	697b      	ldr	r3, [r7, #20]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800910e:	b590      	push	{r4, r7, lr}
 8009110:	b089      	sub	sp, #36	; 0x24
 8009112:	af00      	add	r7, sp, #0
 8009114:	60f8      	str	r0, [r7, #12]
 8009116:	60b9      	str	r1, [r7, #8]
 8009118:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800911a:	2302      	movs	r3, #2
 800911c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2b01      	cmp	r3, #1
 8009122:	f240 8102 	bls.w	800932a <put_fat+0x21c>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	429a      	cmp	r2, r3
 800912e:	f080 80fc 	bcs.w	800932a <put_fat+0x21c>
		switch (fs->fs_type) {
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	2b03      	cmp	r3, #3
 8009138:	f000 80b6 	beq.w	80092a8 <put_fat+0x19a>
 800913c:	2b03      	cmp	r3, #3
 800913e:	f300 80fd 	bgt.w	800933c <put_fat+0x22e>
 8009142:	2b01      	cmp	r3, #1
 8009144:	d003      	beq.n	800914e <put_fat+0x40>
 8009146:	2b02      	cmp	r3, #2
 8009148:	f000 8083 	beq.w	8009252 <put_fat+0x144>
 800914c:	e0f6      	b.n	800933c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	61bb      	str	r3, [r7, #24]
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	085b      	lsrs	r3, r3, #1
 8009156:	69ba      	ldr	r2, [r7, #24]
 8009158:	4413      	add	r3, r2
 800915a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	899b      	ldrh	r3, [r3, #12]
 8009164:	4619      	mov	r1, r3
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	fbb3 f3f1 	udiv	r3, r3, r1
 800916c:	4413      	add	r3, r2
 800916e:	4619      	mov	r1, r3
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f7ff fe3b 	bl	8008dec <move_window>
 8009176:	4603      	mov	r3, r0
 8009178:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800917a:	7ffb      	ldrb	r3, [r7, #31]
 800917c:	2b00      	cmp	r3, #0
 800917e:	f040 80d6 	bne.w	800932e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	1c5a      	adds	r2, r3, #1
 800918c:	61ba      	str	r2, [r7, #24]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	8992      	ldrh	r2, [r2, #12]
 8009192:	fbb3 f0f2 	udiv	r0, r3, r2
 8009196:	fb02 f200 	mul.w	r2, r2, r0
 800919a:	1a9b      	subs	r3, r3, r2
 800919c:	440b      	add	r3, r1
 800919e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f003 0301 	and.w	r3, r3, #1
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00d      	beq.n	80091c6 <put_fat+0xb8>
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	b25b      	sxtb	r3, r3
 80091b0:	f003 030f 	and.w	r3, r3, #15
 80091b4:	b25a      	sxtb	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	011b      	lsls	r3, r3, #4
 80091bc:	b25b      	sxtb	r3, r3
 80091be:	4313      	orrs	r3, r2
 80091c0:	b25b      	sxtb	r3, r3
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	e001      	b.n	80091ca <put_fat+0xbc>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	697a      	ldr	r2, [r7, #20]
 80091cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2201      	movs	r2, #1
 80091d2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	899b      	ldrh	r3, [r3, #12]
 80091dc:	4619      	mov	r1, r3
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80091e4:	4413      	add	r3, r2
 80091e6:	4619      	mov	r1, r3
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f7ff fdff 	bl	8008dec <move_window>
 80091ee:	4603      	mov	r3, r0
 80091f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80091f2:	7ffb      	ldrb	r3, [r7, #31]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f040 809c 	bne.w	8009332 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	899b      	ldrh	r3, [r3, #12]
 8009204:	461a      	mov	r2, r3
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	fbb3 f0f2 	udiv	r0, r3, r2
 800920c:	fb02 f200 	mul.w	r2, r2, r0
 8009210:	1a9b      	subs	r3, r3, r2
 8009212:	440b      	add	r3, r1
 8009214:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b00      	cmp	r3, #0
 800921e:	d003      	beq.n	8009228 <put_fat+0x11a>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	091b      	lsrs	r3, r3, #4
 8009224:	b2db      	uxtb	r3, r3
 8009226:	e00e      	b.n	8009246 <put_fat+0x138>
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	b25b      	sxtb	r3, r3
 800922e:	f023 030f 	bic.w	r3, r3, #15
 8009232:	b25a      	sxtb	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	0a1b      	lsrs	r3, r3, #8
 8009238:	b25b      	sxtb	r3, r3
 800923a:	f003 030f 	and.w	r3, r3, #15
 800923e:	b25b      	sxtb	r3, r3
 8009240:	4313      	orrs	r3, r2
 8009242:	b25b      	sxtb	r3, r3
 8009244:	b2db      	uxtb	r3, r3
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2201      	movs	r2, #1
 800924e:	70da      	strb	r2, [r3, #3]
			break;
 8009250:	e074      	b.n	800933c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	899b      	ldrh	r3, [r3, #12]
 800925a:	085b      	lsrs	r3, r3, #1
 800925c:	b29b      	uxth	r3, r3
 800925e:	4619      	mov	r1, r3
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	fbb3 f3f1 	udiv	r3, r3, r1
 8009266:	4413      	add	r3, r2
 8009268:	4619      	mov	r1, r3
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f7ff fdbe 	bl	8008dec <move_window>
 8009270:	4603      	mov	r3, r0
 8009272:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009274:	7ffb      	ldrb	r3, [r7, #31]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d15d      	bne.n	8009336 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	005b      	lsls	r3, r3, #1
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	8992      	ldrh	r2, [r2, #12]
 8009288:	fbb3 f0f2 	udiv	r0, r3, r2
 800928c:	fb02 f200 	mul.w	r2, r2, r0
 8009290:	1a9b      	subs	r3, r3, r2
 8009292:	440b      	add	r3, r1
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	b292      	uxth	r2, r2
 8009298:	4611      	mov	r1, r2
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff fb31 	bl	8008902 <st_word>
			fs->wflag = 1;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2201      	movs	r2, #1
 80092a4:	70da      	strb	r2, [r3, #3]
			break;
 80092a6:	e049      	b.n	800933c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	899b      	ldrh	r3, [r3, #12]
 80092b0:	089b      	lsrs	r3, r3, #2
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	4619      	mov	r1, r3
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80092bc:	4413      	add	r3, r2
 80092be:	4619      	mov	r1, r3
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f7ff fd93 	bl	8008dec <move_window>
 80092c6:	4603      	mov	r3, r0
 80092c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80092ca:	7ffb      	ldrb	r3, [r7, #31]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d134      	bne.n	800933a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	8992      	ldrh	r2, [r2, #12]
 80092e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80092e8:	fb02 f200 	mul.w	r2, r2, r0
 80092ec:	1a9b      	subs	r3, r3, r2
 80092ee:	440b      	add	r3, r1
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff fae3 	bl	80088bc <ld_dword>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80092fc:	4323      	orrs	r3, r4
 80092fe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	8992      	ldrh	r2, [r2, #12]
 800930e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009312:	fb02 f200 	mul.w	r2, r2, r0
 8009316:	1a9b      	subs	r3, r3, r2
 8009318:	440b      	add	r3, r1
 800931a:	6879      	ldr	r1, [r7, #4]
 800931c:	4618      	mov	r0, r3
 800931e:	f7ff fb0b 	bl	8008938 <st_dword>
			fs->wflag = 1;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2201      	movs	r2, #1
 8009326:	70da      	strb	r2, [r3, #3]
			break;
 8009328:	e008      	b.n	800933c <put_fat+0x22e>
		}
	}
 800932a:	bf00      	nop
 800932c:	e006      	b.n	800933c <put_fat+0x22e>
			if (res != FR_OK) break;
 800932e:	bf00      	nop
 8009330:	e004      	b.n	800933c <put_fat+0x22e>
			if (res != FR_OK) break;
 8009332:	bf00      	nop
 8009334:	e002      	b.n	800933c <put_fat+0x22e>
			if (res != FR_OK) break;
 8009336:	bf00      	nop
 8009338:	e000      	b.n	800933c <put_fat+0x22e>
			if (res != FR_OK) break;
 800933a:	bf00      	nop
	return res;
 800933c:	7ffb      	ldrb	r3, [r7, #31]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3724      	adds	r7, #36	; 0x24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd90      	pop	{r4, r7, pc}

08009346 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b088      	sub	sp, #32
 800934a:	af00      	add	r7, sp, #0
 800934c:	60f8      	str	r0, [r7, #12]
 800934e:	60b9      	str	r1, [r7, #8]
 8009350:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	2b01      	cmp	r3, #1
 8009360:	d904      	bls.n	800936c <remove_chain+0x26>
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	429a      	cmp	r2, r3
 800936a:	d301      	bcc.n	8009370 <remove_chain+0x2a>
 800936c:	2302      	movs	r3, #2
 800936e:	e04b      	b.n	8009408 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00c      	beq.n	8009390 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009376:	f04f 32ff 	mov.w	r2, #4294967295
 800937a:	6879      	ldr	r1, [r7, #4]
 800937c:	69b8      	ldr	r0, [r7, #24]
 800937e:	f7ff fec6 	bl	800910e <put_fat>
 8009382:	4603      	mov	r3, r0
 8009384:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009386:	7ffb      	ldrb	r3, [r7, #31]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <remove_chain+0x4a>
 800938c:	7ffb      	ldrb	r3, [r7, #31]
 800938e:	e03b      	b.n	8009408 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009390:	68b9      	ldr	r1, [r7, #8]
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f7ff fde7 	bl	8008f66 <get_fat>
 8009398:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d031      	beq.n	8009404 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d101      	bne.n	80093aa <remove_chain+0x64>
 80093a6:	2302      	movs	r3, #2
 80093a8:	e02e      	b.n	8009408 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b0:	d101      	bne.n	80093b6 <remove_chain+0x70>
 80093b2:	2301      	movs	r3, #1
 80093b4:	e028      	b.n	8009408 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80093b6:	2200      	movs	r2, #0
 80093b8:	68b9      	ldr	r1, [r7, #8]
 80093ba:	69b8      	ldr	r0, [r7, #24]
 80093bc:	f7ff fea7 	bl	800910e <put_fat>
 80093c0:	4603      	mov	r3, r0
 80093c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80093c4:	7ffb      	ldrb	r3, [r7, #31]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <remove_chain+0x88>
 80093ca:	7ffb      	ldrb	r3, [r7, #31]
 80093cc:	e01c      	b.n	8009408 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	695a      	ldr	r2, [r3, #20]
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	3b02      	subs	r3, #2
 80093d8:	429a      	cmp	r2, r3
 80093da:	d20b      	bcs.n	80093f4 <remove_chain+0xae>
			fs->free_clst++;
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	695b      	ldr	r3, [r3, #20]
 80093e0:	1c5a      	adds	r2, r3, #1
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	791b      	ldrb	r3, [r3, #4]
 80093ea:	f043 0301 	orr.w	r3, r3, #1
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d3c6      	bcc.n	8009390 <remove_chain+0x4a>
 8009402:	e000      	b.n	8009406 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009404:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3720      	adds	r7, #32
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b088      	sub	sp, #32
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10d      	bne.n	8009442 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d004      	beq.n	800943c <create_chain+0x2c>
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	69ba      	ldr	r2, [r7, #24]
 8009438:	429a      	cmp	r2, r3
 800943a:	d31b      	bcc.n	8009474 <create_chain+0x64>
 800943c:	2301      	movs	r3, #1
 800943e:	61bb      	str	r3, [r7, #24]
 8009440:	e018      	b.n	8009474 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7ff fd8e 	bl	8008f66 <get_fat>
 800944a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d801      	bhi.n	8009456 <create_chain+0x46>
 8009452:	2301      	movs	r3, #1
 8009454:	e070      	b.n	8009538 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945c:	d101      	bne.n	8009462 <create_chain+0x52>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	e06a      	b.n	8009538 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	429a      	cmp	r2, r3
 800946a:	d201      	bcs.n	8009470 <create_chain+0x60>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	e063      	b.n	8009538 <create_chain+0x128>
		scl = clst;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	3301      	adds	r3, #1
 800947c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	69fa      	ldr	r2, [r7, #28]
 8009484:	429a      	cmp	r2, r3
 8009486:	d307      	bcc.n	8009498 <create_chain+0x88>
				ncl = 2;
 8009488:	2302      	movs	r3, #2
 800948a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800948c:	69fa      	ldr	r2, [r7, #28]
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	429a      	cmp	r2, r3
 8009492:	d901      	bls.n	8009498 <create_chain+0x88>
 8009494:	2300      	movs	r3, #0
 8009496:	e04f      	b.n	8009538 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009498:	69f9      	ldr	r1, [r7, #28]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7ff fd63 	bl	8008f66 <get_fat>
 80094a0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00e      	beq.n	80094c6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d003      	beq.n	80094b6 <create_chain+0xa6>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b4:	d101      	bne.n	80094ba <create_chain+0xaa>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	e03e      	b.n	8009538 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80094ba:	69fa      	ldr	r2, [r7, #28]
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d1da      	bne.n	8009478 <create_chain+0x68>
 80094c2:	2300      	movs	r3, #0
 80094c4:	e038      	b.n	8009538 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80094c6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80094c8:	f04f 32ff 	mov.w	r2, #4294967295
 80094cc:	69f9      	ldr	r1, [r7, #28]
 80094ce:	6938      	ldr	r0, [r7, #16]
 80094d0:	f7ff fe1d 	bl	800910e <put_fat>
 80094d4:	4603      	mov	r3, r0
 80094d6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80094d8:	7dfb      	ldrb	r3, [r7, #23]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d109      	bne.n	80094f2 <create_chain+0xe2>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d006      	beq.n	80094f2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80094e4:	69fa      	ldr	r2, [r7, #28]
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6938      	ldr	r0, [r7, #16]
 80094ea:	f7ff fe10 	bl	800910e <put_fat>
 80094ee:	4603      	mov	r3, r0
 80094f0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80094f2:	7dfb      	ldrb	r3, [r7, #23]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d116      	bne.n	8009526 <create_chain+0x116>
		fs->last_clst = ncl;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	69fa      	ldr	r2, [r7, #28]
 80094fc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	695a      	ldr	r2, [r3, #20]
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	3b02      	subs	r3, #2
 8009508:	429a      	cmp	r2, r3
 800950a:	d804      	bhi.n	8009516 <create_chain+0x106>
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	695b      	ldr	r3, [r3, #20]
 8009510:	1e5a      	subs	r2, r3, #1
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	791b      	ldrb	r3, [r3, #4]
 800951a:	f043 0301 	orr.w	r3, r3, #1
 800951e:	b2da      	uxtb	r2, r3
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	711a      	strb	r2, [r3, #4]
 8009524:	e007      	b.n	8009536 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009526:	7dfb      	ldrb	r3, [r7, #23]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d102      	bne.n	8009532 <create_chain+0x122>
 800952c:	f04f 33ff 	mov.w	r3, #4294967295
 8009530:	e000      	b.n	8009534 <create_chain+0x124>
 8009532:	2301      	movs	r3, #1
 8009534:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009536:	69fb      	ldr	r3, [r7, #28]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3720      	adds	r7, #32
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009540:	b480      	push	{r7}
 8009542:	b087      	sub	sp, #28
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009554:	3304      	adds	r3, #4
 8009556:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	899b      	ldrh	r3, [r3, #12]
 800955c:	461a      	mov	r2, r3
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	fbb3 f3f2 	udiv	r3, r3, r2
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	8952      	ldrh	r2, [r2, #10]
 8009568:	fbb3 f3f2 	udiv	r3, r3, r2
 800956c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	1d1a      	adds	r2, r3, #4
 8009572:	613a      	str	r2, [r7, #16]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <clmt_clust+0x42>
 800957e:	2300      	movs	r3, #0
 8009580:	e010      	b.n	80095a4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	429a      	cmp	r2, r3
 8009588:	d307      	bcc.n	800959a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	617b      	str	r3, [r7, #20]
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	3304      	adds	r3, #4
 8009596:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009598:	e7e9      	b.n	800956e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800959a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	4413      	add	r3, r2
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	371c      	adds	r7, #28
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095c6:	d204      	bcs.n	80095d2 <dir_sdi+0x22>
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	f003 031f 	and.w	r3, r3, #31
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80095d2:	2302      	movs	r3, #2
 80095d4:	e071      	b.n	80096ba <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	683a      	ldr	r2, [r7, #0]
 80095da:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d106      	bne.n	80095f6 <dir_sdi+0x46>
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d902      	bls.n	80095f6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10c      	bne.n	8009616 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	095b      	lsrs	r3, r3, #5
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	8912      	ldrh	r2, [r2, #8]
 8009604:	4293      	cmp	r3, r2
 8009606:	d301      	bcc.n	800960c <dir_sdi+0x5c>
 8009608:	2302      	movs	r3, #2
 800960a:	e056      	b.n	80096ba <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	61da      	str	r2, [r3, #28]
 8009614:	e02d      	b.n	8009672 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	895b      	ldrh	r3, [r3, #10]
 800961a:	461a      	mov	r2, r3
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	899b      	ldrh	r3, [r3, #12]
 8009620:	fb03 f302 	mul.w	r3, r3, r2
 8009624:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009626:	e019      	b.n	800965c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6979      	ldr	r1, [r7, #20]
 800962c:	4618      	mov	r0, r3
 800962e:	f7ff fc9a 	bl	8008f66 <get_fat>
 8009632:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963a:	d101      	bne.n	8009640 <dir_sdi+0x90>
 800963c:	2301      	movs	r3, #1
 800963e:	e03c      	b.n	80096ba <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d904      	bls.n	8009650 <dir_sdi+0xa0>
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	429a      	cmp	r2, r3
 800964e:	d301      	bcc.n	8009654 <dir_sdi+0xa4>
 8009650:	2302      	movs	r3, #2
 8009652:	e032      	b.n	80096ba <dir_sdi+0x10a>
			ofs -= csz;
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800965c:	683a      	ldr	r2, [r7, #0]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	429a      	cmp	r2, r3
 8009662:	d2e1      	bcs.n	8009628 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009664:	6979      	ldr	r1, [r7, #20]
 8009666:	6938      	ldr	r0, [r7, #16]
 8009668:	f7ff fc5e 	bl	8008f28 <clust2sect>
 800966c:	4602      	mov	r2, r0
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	69db      	ldr	r3, [r3, #28]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d101      	bne.n	8009684 <dir_sdi+0xd4>
 8009680:	2302      	movs	r3, #2
 8009682:	e01a      	b.n	80096ba <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	69da      	ldr	r2, [r3, #28]
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	899b      	ldrh	r3, [r3, #12]
 800968c:	4619      	mov	r1, r3
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	fbb3 f3f1 	udiv	r3, r3, r1
 8009694:	441a      	add	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	899b      	ldrh	r3, [r3, #12]
 80096a4:	461a      	mov	r2, r3
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80096ac:	fb02 f200 	mul.w	r2, r2, r0
 80096b0:	1a9b      	subs	r3, r3, r2
 80096b2:	18ca      	adds	r2, r1, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b086      	sub	sp, #24
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	3320      	adds	r3, #32
 80096d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d003      	beq.n	80096ea <dir_next+0x28>
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096e8:	d301      	bcc.n	80096ee <dir_next+0x2c>
 80096ea:	2304      	movs	r3, #4
 80096ec:	e0bb      	b.n	8009866 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	899b      	ldrh	r3, [r3, #12]
 80096f2:	461a      	mov	r2, r3
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80096fa:	fb02 f201 	mul.w	r2, r2, r1
 80096fe:	1a9b      	subs	r3, r3, r2
 8009700:	2b00      	cmp	r3, #0
 8009702:	f040 809d 	bne.w	8009840 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d10b      	bne.n	8009730 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	095b      	lsrs	r3, r3, #5
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	8912      	ldrh	r2, [r2, #8]
 8009720:	4293      	cmp	r3, r2
 8009722:	f0c0 808d 	bcc.w	8009840 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	61da      	str	r2, [r3, #28]
 800972c:	2304      	movs	r3, #4
 800972e:	e09a      	b.n	8009866 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	899b      	ldrh	r3, [r3, #12]
 8009734:	461a      	mov	r2, r3
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	fbb3 f3f2 	udiv	r3, r3, r2
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	8952      	ldrh	r2, [r2, #10]
 8009740:	3a01      	subs	r2, #1
 8009742:	4013      	ands	r3, r2
 8009744:	2b00      	cmp	r3, #0
 8009746:	d17b      	bne.n	8009840 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	4619      	mov	r1, r3
 8009750:	4610      	mov	r0, r2
 8009752:	f7ff fc08 	bl	8008f66 <get_fat>
 8009756:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	2b01      	cmp	r3, #1
 800975c:	d801      	bhi.n	8009762 <dir_next+0xa0>
 800975e:	2302      	movs	r3, #2
 8009760:	e081      	b.n	8009866 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009768:	d101      	bne.n	800976e <dir_next+0xac>
 800976a:	2301      	movs	r3, #1
 800976c:	e07b      	b.n	8009866 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	697a      	ldr	r2, [r7, #20]
 8009774:	429a      	cmp	r2, r3
 8009776:	d359      	bcc.n	800982c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d104      	bne.n	8009788 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	61da      	str	r2, [r3, #28]
 8009784:	2304      	movs	r3, #4
 8009786:	e06e      	b.n	8009866 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	4619      	mov	r1, r3
 8009790:	4610      	mov	r0, r2
 8009792:	f7ff fe3d 	bl	8009410 <create_chain>
 8009796:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d101      	bne.n	80097a2 <dir_next+0xe0>
 800979e:	2307      	movs	r3, #7
 80097a0:	e061      	b.n	8009866 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d101      	bne.n	80097ac <dir_next+0xea>
 80097a8:	2302      	movs	r3, #2
 80097aa:	e05c      	b.n	8009866 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b2:	d101      	bne.n	80097b8 <dir_next+0xf6>
 80097b4:	2301      	movs	r3, #1
 80097b6:	e056      	b.n	8009866 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f7ff fad3 	bl	8008d64 <sync_window>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <dir_next+0x106>
 80097c4:	2301      	movs	r3, #1
 80097c6:	e04e      	b.n	8009866 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	899b      	ldrh	r3, [r3, #12]
 80097d2:	461a      	mov	r2, r3
 80097d4:	2100      	movs	r1, #0
 80097d6:	f7ff f8fc 	bl	80089d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80097da:	2300      	movs	r3, #0
 80097dc:	613b      	str	r3, [r7, #16]
 80097de:	6979      	ldr	r1, [r7, #20]
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f7ff fba1 	bl	8008f28 <clust2sect>
 80097e6:	4602      	mov	r2, r0
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	631a      	str	r2, [r3, #48]	; 0x30
 80097ec:	e012      	b.n	8009814 <dir_next+0x152>
						fs->wflag = 1;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2201      	movs	r2, #1
 80097f2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f7ff fab5 	bl	8008d64 <sync_window>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d001      	beq.n	8009804 <dir_next+0x142>
 8009800:	2301      	movs	r3, #1
 8009802:	e030      	b.n	8009866 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	3301      	adds	r3, #1
 8009808:	613b      	str	r3, [r7, #16]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	631a      	str	r2, [r3, #48]	; 0x30
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	895b      	ldrh	r3, [r3, #10]
 8009818:	461a      	mov	r2, r3
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	4293      	cmp	r3, r2
 800981e:	d3e6      	bcc.n	80097ee <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	1ad2      	subs	r2, r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009832:	6979      	ldr	r1, [r7, #20]
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f7ff fb77 	bl	8008f28 <clust2sect>
 800983a:	4602      	mov	r2, r0
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	899b      	ldrh	r3, [r3, #12]
 8009850:	461a      	mov	r2, r3
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	fbb3 f0f2 	udiv	r0, r3, r2
 8009858:	fb02 f200 	mul.w	r2, r2, r0
 800985c:	1a9b      	subs	r3, r3, r2
 800985e:	18ca      	adds	r2, r1, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3718      	adds	r7, #24
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b086      	sub	sp, #24
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
 8009876:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800987e:	2100      	movs	r1, #0
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7ff fe95 	bl	80095b0 <dir_sdi>
 8009886:	4603      	mov	r3, r0
 8009888:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800988a:	7dfb      	ldrb	r3, [r7, #23]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d12b      	bne.n	80098e8 <dir_alloc+0x7a>
		n = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	69db      	ldr	r3, [r3, #28]
 8009898:	4619      	mov	r1, r3
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f7ff faa6 	bl	8008dec <move_window>
 80098a0:	4603      	mov	r3, r0
 80098a2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80098a4:	7dfb      	ldrb	r3, [r7, #23]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d11d      	bne.n	80098e6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	2be5      	cmp	r3, #229	; 0xe5
 80098b2:	d004      	beq.n	80098be <dir_alloc+0x50>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a1b      	ldr	r3, [r3, #32]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d107      	bne.n	80098ce <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	3301      	adds	r3, #1
 80098c2:	613b      	str	r3, [r7, #16]
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d102      	bne.n	80098d2 <dir_alloc+0x64>
 80098cc:	e00c      	b.n	80098e8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80098ce:	2300      	movs	r3, #0
 80098d0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80098d2:	2101      	movs	r1, #1
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7ff fef4 	bl	80096c2 <dir_next>
 80098da:	4603      	mov	r3, r0
 80098dc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80098de:	7dfb      	ldrb	r3, [r7, #23]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d0d7      	beq.n	8009894 <dir_alloc+0x26>
 80098e4:	e000      	b.n	80098e8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80098e6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80098e8:	7dfb      	ldrb	r3, [r7, #23]
 80098ea:	2b04      	cmp	r3, #4
 80098ec:	d101      	bne.n	80098f2 <dir_alloc+0x84>
 80098ee:	2307      	movs	r3, #7
 80098f0:	75fb      	strb	r3, [r7, #23]
	return res;
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3718      	adds	r7, #24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	331a      	adds	r3, #26
 800990a:	4618      	mov	r0, r3
 800990c:	f7fe ffbe 	bl	800888c <ld_word>
 8009910:	4603      	mov	r3, r0
 8009912:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	2b03      	cmp	r3, #3
 800991a:	d109      	bne.n	8009930 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	3314      	adds	r3, #20
 8009920:	4618      	mov	r0, r3
 8009922:	f7fe ffb3 	bl	800888c <ld_word>
 8009926:	4603      	mov	r3, r0
 8009928:	041b      	lsls	r3, r3, #16
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	4313      	orrs	r3, r2
 800992e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009930:	68fb      	ldr	r3, [r7, #12]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b084      	sub	sp, #16
 800993e:	af00      	add	r7, sp, #0
 8009940:	60f8      	str	r0, [r7, #12]
 8009942:	60b9      	str	r1, [r7, #8]
 8009944:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	331a      	adds	r3, #26
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	b292      	uxth	r2, r2
 800994e:	4611      	mov	r1, r2
 8009950:	4618      	mov	r0, r3
 8009952:	f7fe ffd6 	bl	8008902 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	2b03      	cmp	r3, #3
 800995c:	d109      	bne.n	8009972 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	f103 0214 	add.w	r2, r3, #20
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	0c1b      	lsrs	r3, r3, #16
 8009968:	b29b      	uxth	r3, r3
 800996a:	4619      	mov	r1, r3
 800996c:	4610      	mov	r0, r2
 800996e:	f7fe ffc8 	bl	8008902 <st_word>
	}
}
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b086      	sub	sp, #24
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009988:	2100      	movs	r1, #0
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7ff fe10 	bl	80095b0 <dir_sdi>
 8009990:	4603      	mov	r3, r0
 8009992:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009994:	7dfb      	ldrb	r3, [r7, #23]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <dir_find+0x24>
 800999a:	7dfb      	ldrb	r3, [r7, #23]
 800999c:	e03e      	b.n	8009a1c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	69db      	ldr	r3, [r3, #28]
 80099a2:	4619      	mov	r1, r3
 80099a4:	6938      	ldr	r0, [r7, #16]
 80099a6:	f7ff fa21 	bl	8008dec <move_window>
 80099aa:	4603      	mov	r3, r0
 80099ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80099ae:	7dfb      	ldrb	r3, [r7, #23]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d12f      	bne.n	8009a14 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a1b      	ldr	r3, [r3, #32]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d102      	bne.n	80099c8 <dir_find+0x4e>
 80099c2:	2304      	movs	r3, #4
 80099c4:	75fb      	strb	r3, [r7, #23]
 80099c6:	e028      	b.n	8009a1a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a1b      	ldr	r3, [r3, #32]
 80099cc:	330b      	adds	r3, #11
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	330b      	adds	r3, #11
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	f003 0308 	and.w	r3, r3, #8
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10a      	bne.n	8009a00 <dir_find+0x86>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a18      	ldr	r0, [r3, #32]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	3324      	adds	r3, #36	; 0x24
 80099f2:	220b      	movs	r2, #11
 80099f4:	4619      	mov	r1, r3
 80099f6:	f7ff f807 	bl	8008a08 <mem_cmp>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00b      	beq.n	8009a18 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009a00:	2100      	movs	r1, #0
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7ff fe5d 	bl	80096c2 <dir_next>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009a0c:	7dfb      	ldrb	r3, [r7, #23]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d0c5      	beq.n	800999e <dir_find+0x24>
 8009a12:	e002      	b.n	8009a1a <dir_find+0xa0>
		if (res != FR_OK) break;
 8009a14:	bf00      	nop
 8009a16:	e000      	b.n	8009a1a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009a18:	bf00      	nop

	return res;
 8009a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3718      	adds	r7, #24
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009a32:	2101      	movs	r1, #1
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7ff ff1a 	bl	800986e <dir_alloc>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d11c      	bne.n	8009a7e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	69db      	ldr	r3, [r3, #28]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	68b8      	ldr	r0, [r7, #8]
 8009a4c:	f7ff f9ce 	bl	8008dec <move_window>
 8009a50:	4603      	mov	r3, r0
 8009a52:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d111      	bne.n	8009a7e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	2220      	movs	r2, #32
 8009a60:	2100      	movs	r1, #0
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fe ffb5 	bl	80089d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a18      	ldr	r0, [r3, #32]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3324      	adds	r3, #36	; 0x24
 8009a70:	220b      	movs	r2, #11
 8009a72:	4619      	mov	r1, r3
 8009a74:	f7fe ff8c 	bl	8008990 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b088      	sub	sp, #32
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	60fb      	str	r3, [r7, #12]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3324      	adds	r3, #36	; 0x24
 8009a9c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009a9e:	220b      	movs	r2, #11
 8009aa0:	2120      	movs	r1, #32
 8009aa2:	68b8      	ldr	r0, [r7, #8]
 8009aa4:	f7fe ff95 	bl	80089d2 <mem_set>
	si = i = 0; ni = 8;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	613b      	str	r3, [r7, #16]
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	61fb      	str	r3, [r7, #28]
 8009ab0:	2308      	movs	r3, #8
 8009ab2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	61fa      	str	r2, [r7, #28]
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	4413      	add	r3, r2
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009ac2:	7efb      	ldrb	r3, [r7, #27]
 8009ac4:	2b20      	cmp	r3, #32
 8009ac6:	d94e      	bls.n	8009b66 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009ac8:	7efb      	ldrb	r3, [r7, #27]
 8009aca:	2b2f      	cmp	r3, #47	; 0x2f
 8009acc:	d006      	beq.n	8009adc <create_name+0x54>
 8009ace:	7efb      	ldrb	r3, [r7, #27]
 8009ad0:	2b5c      	cmp	r3, #92	; 0x5c
 8009ad2:	d110      	bne.n	8009af6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009ad4:	e002      	b.n	8009adc <create_name+0x54>
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	61fb      	str	r3, [r7, #28]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	2b2f      	cmp	r3, #47	; 0x2f
 8009ae6:	d0f6      	beq.n	8009ad6 <create_name+0x4e>
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	4413      	add	r3, r2
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	2b5c      	cmp	r3, #92	; 0x5c
 8009af2:	d0f0      	beq.n	8009ad6 <create_name+0x4e>
			break;
 8009af4:	e038      	b.n	8009b68 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009af6:	7efb      	ldrb	r3, [r7, #27]
 8009af8:	2b2e      	cmp	r3, #46	; 0x2e
 8009afa:	d003      	beq.n	8009b04 <create_name+0x7c>
 8009afc:	693a      	ldr	r2, [r7, #16]
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d30c      	bcc.n	8009b1e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	2b0b      	cmp	r3, #11
 8009b08:	d002      	beq.n	8009b10 <create_name+0x88>
 8009b0a:	7efb      	ldrb	r3, [r7, #27]
 8009b0c:	2b2e      	cmp	r3, #46	; 0x2e
 8009b0e:	d001      	beq.n	8009b14 <create_name+0x8c>
 8009b10:	2306      	movs	r3, #6
 8009b12:	e044      	b.n	8009b9e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009b14:	2308      	movs	r3, #8
 8009b16:	613b      	str	r3, [r7, #16]
 8009b18:	230b      	movs	r3, #11
 8009b1a:	617b      	str	r3, [r7, #20]
			continue;
 8009b1c:	e022      	b.n	8009b64 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009b1e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	da04      	bge.n	8009b30 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009b26:	7efb      	ldrb	r3, [r7, #27]
 8009b28:	3b80      	subs	r3, #128	; 0x80
 8009b2a:	4a1f      	ldr	r2, [pc, #124]	; (8009ba8 <create_name+0x120>)
 8009b2c:	5cd3      	ldrb	r3, [r2, r3]
 8009b2e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009b30:	7efb      	ldrb	r3, [r7, #27]
 8009b32:	4619      	mov	r1, r3
 8009b34:	481d      	ldr	r0, [pc, #116]	; (8009bac <create_name+0x124>)
 8009b36:	f7fe ff8e 	bl	8008a56 <chk_chr>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d001      	beq.n	8009b44 <create_name+0xbc>
 8009b40:	2306      	movs	r3, #6
 8009b42:	e02c      	b.n	8009b9e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009b44:	7efb      	ldrb	r3, [r7, #27]
 8009b46:	2b60      	cmp	r3, #96	; 0x60
 8009b48:	d905      	bls.n	8009b56 <create_name+0xce>
 8009b4a:	7efb      	ldrb	r3, [r7, #27]
 8009b4c:	2b7a      	cmp	r3, #122	; 0x7a
 8009b4e:	d802      	bhi.n	8009b56 <create_name+0xce>
 8009b50:	7efb      	ldrb	r3, [r7, #27]
 8009b52:	3b20      	subs	r3, #32
 8009b54:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	1c5a      	adds	r2, r3, #1
 8009b5a:	613a      	str	r2, [r7, #16]
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	4413      	add	r3, r2
 8009b60:	7efa      	ldrb	r2, [r7, #27]
 8009b62:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009b64:	e7a6      	b.n	8009ab4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009b66:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	441a      	add	r2, r3
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d101      	bne.n	8009b7c <create_name+0xf4>
 8009b78:	2306      	movs	r3, #6
 8009b7a:	e010      	b.n	8009b9e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	2be5      	cmp	r3, #229	; 0xe5
 8009b82:	d102      	bne.n	8009b8a <create_name+0x102>
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2205      	movs	r2, #5
 8009b88:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009b8a:	7efb      	ldrb	r3, [r7, #27]
 8009b8c:	2b20      	cmp	r3, #32
 8009b8e:	d801      	bhi.n	8009b94 <create_name+0x10c>
 8009b90:	2204      	movs	r2, #4
 8009b92:	e000      	b.n	8009b96 <create_name+0x10e>
 8009b94:	2200      	movs	r2, #0
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	330b      	adds	r3, #11
 8009b9a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009b9c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3720      	adds	r7, #32
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	0800d300 	.word	0x0800d300
 8009bac:	0800d1d0 	.word	0x0800d1d0

08009bb0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b086      	sub	sp, #24
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009bc4:	e002      	b.n	8009bcc <follow_path+0x1c>
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	603b      	str	r3, [r7, #0]
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	2b2f      	cmp	r3, #47	; 0x2f
 8009bd2:	d0f8      	beq.n	8009bc6 <follow_path+0x16>
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	2b5c      	cmp	r3, #92	; 0x5c
 8009bda:	d0f4      	beq.n	8009bc6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	2200      	movs	r2, #0
 8009be0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	2b1f      	cmp	r3, #31
 8009be8:	d80a      	bhi.n	8009c00 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2280      	movs	r2, #128	; 0x80
 8009bee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7ff fcdb 	bl	80095b0 <dir_sdi>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	75fb      	strb	r3, [r7, #23]
 8009bfe:	e048      	b.n	8009c92 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009c00:	463b      	mov	r3, r7
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7ff ff3f 	bl	8009a88 <create_name>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d139      	bne.n	8009c88 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7ff feb0 	bl	800997a <dir_find>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c24:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009c26:	7dfb      	ldrb	r3, [r7, #23]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00a      	beq.n	8009c42 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009c2c:	7dfb      	ldrb	r3, [r7, #23]
 8009c2e:	2b04      	cmp	r3, #4
 8009c30:	d12c      	bne.n	8009c8c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009c32:	7afb      	ldrb	r3, [r7, #11]
 8009c34:	f003 0304 	and.w	r3, r3, #4
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d127      	bne.n	8009c8c <follow_path+0xdc>
 8009c3c:	2305      	movs	r3, #5
 8009c3e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009c40:	e024      	b.n	8009c8c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009c42:	7afb      	ldrb	r3, [r7, #11]
 8009c44:	f003 0304 	and.w	r3, r3, #4
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d121      	bne.n	8009c90 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	799b      	ldrb	r3, [r3, #6]
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d102      	bne.n	8009c5e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009c58:	2305      	movs	r3, #5
 8009c5a:	75fb      	strb	r3, [r7, #23]
 8009c5c:	e019      	b.n	8009c92 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	8992      	ldrh	r2, [r2, #12]
 8009c6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009c70:	fb02 f200 	mul.w	r2, r2, r0
 8009c74:	1a9b      	subs	r3, r3, r2
 8009c76:	440b      	add	r3, r1
 8009c78:	4619      	mov	r1, r3
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f7ff fe3e 	bl	80098fc <ld_clust>
 8009c80:	4602      	mov	r2, r0
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009c86:	e7bb      	b.n	8009c00 <follow_path+0x50>
			if (res != FR_OK) break;
 8009c88:	bf00      	nop
 8009c8a:	e002      	b.n	8009c92 <follow_path+0xe2>
				break;
 8009c8c:	bf00      	nop
 8009c8e:	e000      	b.n	8009c92 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009c90:	bf00      	nop
			}
		}
	}

	return res;
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3718      	adds	r7, #24
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b087      	sub	sp, #28
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ca8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d031      	beq.n	8009d16 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	617b      	str	r3, [r7, #20]
 8009cb8:	e002      	b.n	8009cc0 <get_ldnumber+0x24>
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	617b      	str	r3, [r7, #20]
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	2b20      	cmp	r3, #32
 8009cc6:	d903      	bls.n	8009cd0 <get_ldnumber+0x34>
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	2b3a      	cmp	r3, #58	; 0x3a
 8009cce:	d1f4      	bne.n	8009cba <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	2b3a      	cmp	r3, #58	; 0x3a
 8009cd6:	d11c      	bne.n	8009d12 <get_ldnumber+0x76>
			tp = *path;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	1c5a      	adds	r2, r3, #1
 8009ce2:	60fa      	str	r2, [r7, #12]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	3b30      	subs	r3, #48	; 0x30
 8009ce8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2b09      	cmp	r3, #9
 8009cee:	d80e      	bhi.n	8009d0e <get_ldnumber+0x72>
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d10a      	bne.n	8009d0e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d107      	bne.n	8009d0e <get_ldnumber+0x72>
					vol = (int)i;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	3301      	adds	r3, #1
 8009d06:	617b      	str	r3, [r7, #20]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	e002      	b.n	8009d18 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009d12:	2300      	movs	r3, #0
 8009d14:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009d16:	693b      	ldr	r3, [r7, #16]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	371c      	adds	r7, #28
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	70da      	strb	r2, [r3, #3]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7ff f854 	bl	8008dec <move_window>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <check_fs+0x2a>
 8009d4a:	2304      	movs	r3, #4
 8009d4c:	e038      	b.n	8009dc0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	3334      	adds	r3, #52	; 0x34
 8009d52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fe fd98 	bl	800888c <ld_word>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	461a      	mov	r2, r3
 8009d60:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d001      	beq.n	8009d6c <check_fs+0x48>
 8009d68:	2303      	movs	r3, #3
 8009d6a:	e029      	b.n	8009dc0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d72:	2be9      	cmp	r3, #233	; 0xe9
 8009d74:	d009      	beq.n	8009d8a <check_fs+0x66>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d7c:	2beb      	cmp	r3, #235	; 0xeb
 8009d7e:	d11e      	bne.n	8009dbe <check_fs+0x9a>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009d86:	2b90      	cmp	r3, #144	; 0x90
 8009d88:	d119      	bne.n	8009dbe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	3334      	adds	r3, #52	; 0x34
 8009d8e:	3336      	adds	r3, #54	; 0x36
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fe fd93 	bl	80088bc <ld_dword>
 8009d96:	4603      	mov	r3, r0
 8009d98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009d9c:	4a0a      	ldr	r2, [pc, #40]	; (8009dc8 <check_fs+0xa4>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d101      	bne.n	8009da6 <check_fs+0x82>
 8009da2:	2300      	movs	r3, #0
 8009da4:	e00c      	b.n	8009dc0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	3334      	adds	r3, #52	; 0x34
 8009daa:	3352      	adds	r3, #82	; 0x52
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fe fd85 	bl	80088bc <ld_dword>
 8009db2:	4603      	mov	r3, r0
 8009db4:	4a05      	ldr	r2, [pc, #20]	; (8009dcc <check_fs+0xa8>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d101      	bne.n	8009dbe <check_fs+0x9a>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	e000      	b.n	8009dc0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009dbe:	2302      	movs	r3, #2
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	00544146 	.word	0x00544146
 8009dcc:	33544146 	.word	0x33544146

08009dd0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b096      	sub	sp, #88	; 0x58
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2200      	movs	r2, #0
 8009de2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f7ff ff59 	bl	8009c9c <get_ldnumber>
 8009dea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	da01      	bge.n	8009df6 <find_volume+0x26>
 8009df2:	230b      	movs	r3, #11
 8009df4:	e265      	b.n	800a2c2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009df6:	4ab0      	ldr	r2, [pc, #704]	; (800a0b8 <find_volume+0x2e8>)
 8009df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dfe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <find_volume+0x3a>
 8009e06:	230c      	movs	r3, #12
 8009e08:	e25b      	b.n	800a2c2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e0e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009e10:	79fb      	ldrb	r3, [r7, #7]
 8009e12:	f023 0301 	bic.w	r3, r3, #1
 8009e16:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d01a      	beq.n	8009e56 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e22:	785b      	ldrb	r3, [r3, #1]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fe fc93 	bl	8008750 <disk_status>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009e30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e34:	f003 0301 	and.w	r3, r3, #1
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10c      	bne.n	8009e56 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009e3c:	79fb      	ldrb	r3, [r7, #7]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d007      	beq.n	8009e52 <find_volume+0x82>
 8009e42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e46:	f003 0304 	and.w	r3, r3, #4
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009e4e:	230a      	movs	r3, #10
 8009e50:	e237      	b.n	800a2c2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8009e52:	2300      	movs	r3, #0
 8009e54:	e235      	b.n	800a2c2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e58:	2200      	movs	r2, #0
 8009e5a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e5e:	b2da      	uxtb	r2, r3
 8009e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e62:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e66:	785b      	ldrb	r3, [r3, #1]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fe fc8b 	bl	8008784 <disk_initialize>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009e74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d001      	beq.n	8009e84 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009e80:	2303      	movs	r3, #3
 8009e82:	e21e      	b.n	800a2c2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009e84:	79fb      	ldrb	r3, [r7, #7]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d007      	beq.n	8009e9a <find_volume+0xca>
 8009e8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e8e:	f003 0304 	and.w	r3, r3, #4
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009e96:	230a      	movs	r3, #10
 8009e98:	e213      	b.n	800a2c2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9c:	7858      	ldrb	r0, [r3, #1]
 8009e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea0:	330c      	adds	r3, #12
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	2102      	movs	r1, #2
 8009ea6:	f7fe fcd3 	bl	8008850 <disk_ioctl>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d001      	beq.n	8009eb4 <find_volume+0xe4>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e206      	b.n	800a2c2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb6:	899b      	ldrh	r3, [r3, #12]
 8009eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ebc:	d80d      	bhi.n	8009eda <find_volume+0x10a>
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec0:	899b      	ldrh	r3, [r3, #12]
 8009ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ec6:	d308      	bcc.n	8009eda <find_volume+0x10a>
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eca:	899b      	ldrh	r3, [r3, #12]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed0:	899b      	ldrh	r3, [r3, #12]
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <find_volume+0x10e>
 8009eda:	2301      	movs	r3, #1
 8009edc:	e1f1      	b.n	800a2c2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009ee2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ee4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ee6:	f7ff ff1d 	bl	8009d24 <check_fs>
 8009eea:	4603      	mov	r3, r0
 8009eec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009ef0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d14b      	bne.n	8009f90 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009ef8:	2300      	movs	r3, #0
 8009efa:	643b      	str	r3, [r7, #64]	; 0x40
 8009efc:	e01f      	b.n	8009f3e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f06:	011b      	lsls	r3, r3, #4
 8009f08:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009f0c:	4413      	add	r3, r2
 8009f0e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f12:	3304      	adds	r3, #4
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d006      	beq.n	8009f28 <find_volume+0x158>
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1c:	3308      	adds	r3, #8
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fe fccc 	bl	80088bc <ld_dword>
 8009f24:	4602      	mov	r2, r0
 8009f26:	e000      	b.n	8009f2a <find_volume+0x15a>
 8009f28:	2200      	movs	r2, #0
 8009f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009f32:	440b      	add	r3, r1
 8009f34:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	643b      	str	r3, [r7, #64]	; 0x40
 8009f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f40:	2b03      	cmp	r3, #3
 8009f42:	d9dc      	bls.n	8009efe <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009f44:	2300      	movs	r3, #0
 8009f46:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <find_volume+0x184>
 8009f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f50:	3b01      	subs	r3, #1
 8009f52:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009f5c:	4413      	add	r3, r2
 8009f5e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009f62:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d005      	beq.n	8009f76 <find_volume+0x1a6>
 8009f6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f6e:	f7ff fed9 	bl	8009d24 <check_fs>
 8009f72:	4603      	mov	r3, r0
 8009f74:	e000      	b.n	8009f78 <find_volume+0x1a8>
 8009f76:	2303      	movs	r3, #3
 8009f78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009f7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d905      	bls.n	8009f90 <find_volume+0x1c0>
 8009f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f86:	3301      	adds	r3, #1
 8009f88:	643b      	str	r3, [r7, #64]	; 0x40
 8009f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f8c:	2b03      	cmp	r3, #3
 8009f8e:	d9e1      	bls.n	8009f54 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009f90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f94:	2b04      	cmp	r3, #4
 8009f96:	d101      	bne.n	8009f9c <find_volume+0x1cc>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e192      	b.n	800a2c2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009f9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d901      	bls.n	8009fa8 <find_volume+0x1d8>
 8009fa4:	230d      	movs	r3, #13
 8009fa6:	e18c      	b.n	800a2c2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009faa:	3334      	adds	r3, #52	; 0x34
 8009fac:	330b      	adds	r3, #11
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fe fc6c 	bl	800888c <ld_word>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fba:	899b      	ldrh	r3, [r3, #12]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d001      	beq.n	8009fc4 <find_volume+0x1f4>
 8009fc0:	230d      	movs	r3, #13
 8009fc2:	e17e      	b.n	800a2c2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc6:	3334      	adds	r3, #52	; 0x34
 8009fc8:	3316      	adds	r3, #22
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe fc5e 	bl	800888c <ld_word>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d106      	bne.n	8009fe8 <find_volume+0x218>
 8009fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fdc:	3334      	adds	r3, #52	; 0x34
 8009fde:	3324      	adds	r3, #36	; 0x24
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fe fc6b 	bl	80088bc <ld_dword>
 8009fe6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fec:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffa:	789b      	ldrb	r3, [r3, #2]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d005      	beq.n	800a00c <find_volume+0x23c>
 800a000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a002:	789b      	ldrb	r3, [r3, #2]
 800a004:	2b02      	cmp	r3, #2
 800a006:	d001      	beq.n	800a00c <find_volume+0x23c>
 800a008:	230d      	movs	r3, #13
 800a00a:	e15a      	b.n	800a2c2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00e:	789b      	ldrb	r3, [r3, #2]
 800a010:	461a      	mov	r2, r3
 800a012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a014:	fb02 f303 	mul.w	r3, r2, r3
 800a018:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a020:	b29a      	uxth	r2, r3
 800a022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a024:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a028:	895b      	ldrh	r3, [r3, #10]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d008      	beq.n	800a040 <find_volume+0x270>
 800a02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a030:	895b      	ldrh	r3, [r3, #10]
 800a032:	461a      	mov	r2, r3
 800a034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a036:	895b      	ldrh	r3, [r3, #10]
 800a038:	3b01      	subs	r3, #1
 800a03a:	4013      	ands	r3, r2
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <find_volume+0x274>
 800a040:	230d      	movs	r3, #13
 800a042:	e13e      	b.n	800a2c2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a046:	3334      	adds	r3, #52	; 0x34
 800a048:	3311      	adds	r3, #17
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fe fc1e 	bl	800888c <ld_word>
 800a050:	4603      	mov	r3, r0
 800a052:	461a      	mov	r2, r3
 800a054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a056:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05a:	891b      	ldrh	r3, [r3, #8]
 800a05c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a05e:	8992      	ldrh	r2, [r2, #12]
 800a060:	0952      	lsrs	r2, r2, #5
 800a062:	b292      	uxth	r2, r2
 800a064:	fbb3 f1f2 	udiv	r1, r3, r2
 800a068:	fb02 f201 	mul.w	r2, r2, r1
 800a06c:	1a9b      	subs	r3, r3, r2
 800a06e:	b29b      	uxth	r3, r3
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <find_volume+0x2a8>
 800a074:	230d      	movs	r3, #13
 800a076:	e124      	b.n	800a2c2 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07a:	3334      	adds	r3, #52	; 0x34
 800a07c:	3313      	adds	r3, #19
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fe fc04 	bl	800888c <ld_word>
 800a084:	4603      	mov	r3, r0
 800a086:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d106      	bne.n	800a09c <find_volume+0x2cc>
 800a08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a090:	3334      	adds	r3, #52	; 0x34
 800a092:	3320      	adds	r3, #32
 800a094:	4618      	mov	r0, r3
 800a096:	f7fe fc11 	bl	80088bc <ld_dword>
 800a09a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09e:	3334      	adds	r3, #52	; 0x34
 800a0a0:	330e      	adds	r3, #14
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fe fbf2 	bl	800888c <ld_word>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a0ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d104      	bne.n	800a0bc <find_volume+0x2ec>
 800a0b2:	230d      	movs	r3, #13
 800a0b4:	e105      	b.n	800a2c2 <find_volume+0x4f2>
 800a0b6:	bf00      	nop
 800a0b8:	200000b0 	.word	0x200000b0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a0bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a0be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0c0:	4413      	add	r3, r2
 800a0c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0c4:	8911      	ldrh	r1, [r2, #8]
 800a0c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0c8:	8992      	ldrh	r2, [r2, #12]
 800a0ca:	0952      	lsrs	r2, r2, #5
 800a0cc:	b292      	uxth	r2, r2
 800a0ce:	fbb1 f2f2 	udiv	r2, r1, r2
 800a0d2:	b292      	uxth	r2, r2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a0d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d201      	bcs.n	800a0e4 <find_volume+0x314>
 800a0e0:	230d      	movs	r3, #13
 800a0e2:	e0ee      	b.n	800a2c2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a0e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0ec:	8952      	ldrh	r2, [r2, #10]
 800a0ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0f2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d101      	bne.n	800a0fe <find_volume+0x32e>
 800a0fa:	230d      	movs	r3, #13
 800a0fc:	e0e1      	b.n	800a2c2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a0fe:	2303      	movs	r3, #3
 800a100:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a106:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d802      	bhi.n	800a114 <find_volume+0x344>
 800a10e:	2302      	movs	r3, #2
 800a110:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d802      	bhi.n	800a124 <find_volume+0x354>
 800a11e:	2301      	movs	r3, #1
 800a120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	1c9a      	adds	r2, r3, #2
 800a128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a130:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a132:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a136:	441a      	add	r2, r3
 800a138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a13c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a140:	441a      	add	r2, r3
 800a142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a144:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a146:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a14a:	2b03      	cmp	r3, #3
 800a14c:	d11e      	bne.n	800a18c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a150:	3334      	adds	r3, #52	; 0x34
 800a152:	332a      	adds	r3, #42	; 0x2a
 800a154:	4618      	mov	r0, r3
 800a156:	f7fe fb99 	bl	800888c <ld_word>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d001      	beq.n	800a164 <find_volume+0x394>
 800a160:	230d      	movs	r3, #13
 800a162:	e0ae      	b.n	800a2c2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a166:	891b      	ldrh	r3, [r3, #8]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d001      	beq.n	800a170 <find_volume+0x3a0>
 800a16c:	230d      	movs	r3, #13
 800a16e:	e0a8      	b.n	800a2c2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a172:	3334      	adds	r3, #52	; 0x34
 800a174:	332c      	adds	r3, #44	; 0x2c
 800a176:	4618      	mov	r0, r3
 800a178:	f7fe fba0 	bl	80088bc <ld_dword>
 800a17c:	4602      	mov	r2, r0
 800a17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a180:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	647b      	str	r3, [r7, #68]	; 0x44
 800a18a:	e01f      	b.n	800a1cc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18e:	891b      	ldrh	r3, [r3, #8]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d101      	bne.n	800a198 <find_volume+0x3c8>
 800a194:	230d      	movs	r3, #13
 800a196:	e094      	b.n	800a2c2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a19c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a19e:	441a      	add	r2, r3
 800a1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a1a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d103      	bne.n	800a1b4 <find_volume+0x3e4>
 800a1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ae:	699b      	ldr	r3, [r3, #24]
 800a1b0:	005b      	lsls	r3, r3, #1
 800a1b2:	e00a      	b.n	800a1ca <find_volume+0x3fa>
 800a1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b6:	699a      	ldr	r2, [r3, #24]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	005b      	lsls	r3, r3, #1
 800a1bc:	4413      	add	r3, r2
 800a1be:	085a      	lsrs	r2, r3, #1
 800a1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	f003 0301 	and.w	r3, r3, #1
 800a1c8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a1ca:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ce:	69da      	ldr	r2, [r3, #28]
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d2:	899b      	ldrh	r3, [r3, #12]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d8:	440b      	add	r3, r1
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a1de:	8989      	ldrh	r1, [r1, #12]
 800a1e0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d201      	bcs.n	800a1ec <find_volume+0x41c>
 800a1e8:	230d      	movs	r3, #13
 800a1ea:	e06a      	b.n	800a2c2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f2:	615a      	str	r2, [r3, #20]
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f6:	695a      	ldr	r2, [r3, #20]
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fe:	2280      	movs	r2, #128	; 0x80
 800a200:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a202:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a206:	2b03      	cmp	r3, #3
 800a208:	d149      	bne.n	800a29e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20c:	3334      	adds	r3, #52	; 0x34
 800a20e:	3330      	adds	r3, #48	; 0x30
 800a210:	4618      	mov	r0, r3
 800a212:	f7fe fb3b 	bl	800888c <ld_word>
 800a216:	4603      	mov	r3, r0
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d140      	bne.n	800a29e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a21c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a21e:	3301      	adds	r3, #1
 800a220:	4619      	mov	r1, r3
 800a222:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a224:	f7fe fde2 	bl	8008dec <move_window>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d137      	bne.n	800a29e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a230:	2200      	movs	r2, #0
 800a232:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a236:	3334      	adds	r3, #52	; 0x34
 800a238:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fe fb25 	bl	800888c <ld_word>
 800a242:	4603      	mov	r3, r0
 800a244:	461a      	mov	r2, r3
 800a246:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d127      	bne.n	800a29e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a250:	3334      	adds	r3, #52	; 0x34
 800a252:	4618      	mov	r0, r3
 800a254:	f7fe fb32 	bl	80088bc <ld_dword>
 800a258:	4603      	mov	r3, r0
 800a25a:	4a1c      	ldr	r2, [pc, #112]	; (800a2cc <find_volume+0x4fc>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d11e      	bne.n	800a29e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a262:	3334      	adds	r3, #52	; 0x34
 800a264:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fe fb27 	bl	80088bc <ld_dword>
 800a26e:	4603      	mov	r3, r0
 800a270:	4a17      	ldr	r2, [pc, #92]	; (800a2d0 <find_volume+0x500>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d113      	bne.n	800a29e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a278:	3334      	adds	r3, #52	; 0x34
 800a27a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fe fb1c 	bl	80088bc <ld_dword>
 800a284:	4602      	mov	r2, r0
 800a286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a288:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28c:	3334      	adds	r3, #52	; 0x34
 800a28e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a292:	4618      	mov	r0, r3
 800a294:	f7fe fb12 	bl	80088bc <ld_dword>
 800a298:	4602      	mov	r2, r0
 800a29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a2a4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a2a6:	4b0b      	ldr	r3, [pc, #44]	; (800a2d4 <find_volume+0x504>)
 800a2a8:	881b      	ldrh	r3, [r3, #0]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	4b09      	ldr	r3, [pc, #36]	; (800a2d4 <find_volume+0x504>)
 800a2b0:	801a      	strh	r2, [r3, #0]
 800a2b2:	4b08      	ldr	r3, [pc, #32]	; (800a2d4 <find_volume+0x504>)
 800a2b4:	881a      	ldrh	r2, [r3, #0]
 800a2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a2ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2bc:	f7fe fd2e 	bl	8008d1c <clear_lock>
#endif
	return FR_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3758      	adds	r7, #88	; 0x58
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	41615252 	.word	0x41615252
 800a2d0:	61417272 	.word	0x61417272
 800a2d4:	200000b4 	.word	0x200000b4

0800a2d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a2e2:	2309      	movs	r3, #9
 800a2e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d01c      	beq.n	800a326 <validate+0x4e>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d018      	beq.n	800a326 <validate+0x4e>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d013      	beq.n	800a326 <validate+0x4e>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	889a      	ldrh	r2, [r3, #4]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	88db      	ldrh	r3, [r3, #6]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d10c      	bne.n	800a326 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	785b      	ldrb	r3, [r3, #1]
 800a312:	4618      	mov	r0, r3
 800a314:	f7fe fa1c 	bl	8008750 <disk_status>
 800a318:	4603      	mov	r3, r0
 800a31a:	f003 0301 	and.w	r3, r3, #1
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d101      	bne.n	800a326 <validate+0x4e>
			res = FR_OK;
 800a322:	2300      	movs	r3, #0
 800a324:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a326:	7bfb      	ldrb	r3, [r7, #15]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d102      	bne.n	800a332 <validate+0x5a>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	e000      	b.n	800a334 <validate+0x5c>
 800a332:	2300      	movs	r3, #0
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	6013      	str	r3, [r2, #0]
	return res;
 800a338:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b088      	sub	sp, #32
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	4613      	mov	r3, r2
 800a350:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a356:	f107 0310 	add.w	r3, r7, #16
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7ff fc9e 	bl	8009c9c <get_ldnumber>
 800a360:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	2b00      	cmp	r3, #0
 800a366:	da01      	bge.n	800a36c <f_mount+0x28>
 800a368:	230b      	movs	r3, #11
 800a36a:	e02b      	b.n	800a3c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a36c:	4a17      	ldr	r2, [pc, #92]	; (800a3cc <f_mount+0x88>)
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a374:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d005      	beq.n	800a388 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a37c:	69b8      	ldr	r0, [r7, #24]
 800a37e:	f7fe fccd 	bl	8008d1c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	2200      	movs	r2, #0
 800a386:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d002      	beq.n	800a394 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2200      	movs	r2, #0
 800a392:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	490d      	ldr	r1, [pc, #52]	; (800a3cc <f_mount+0x88>)
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <f_mount+0x66>
 800a3a4:	79fb      	ldrb	r3, [r7, #7]
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d001      	beq.n	800a3ae <f_mount+0x6a>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	e00a      	b.n	800a3c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a3ae:	f107 010c 	add.w	r1, r7, #12
 800a3b2:	f107 0308 	add.w	r3, r7, #8
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7ff fd09 	bl	8009dd0 <find_volume>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a3c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3720      	adds	r7, #32
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	200000b0 	.word	0x200000b0

0800a3d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b098      	sub	sp, #96	; 0x60
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <f_open+0x18>
 800a3e4:	2309      	movs	r3, #9
 800a3e6:	e1bb      	b.n	800a760 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a3e8:	79fb      	ldrb	r3, [r7, #7]
 800a3ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a3f0:	79fa      	ldrb	r2, [r7, #7]
 800a3f2:	f107 0110 	add.w	r1, r7, #16
 800a3f6:	f107 0308 	add.w	r3, r7, #8
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7ff fce8 	bl	8009dd0 <find_volume>
 800a400:	4603      	mov	r3, r0
 800a402:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a406:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f040 819f 	bne.w	800a74e <f_open+0x37e>
		dj.obj.fs = fs;
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	f107 0314 	add.w	r3, r7, #20
 800a41a:	4611      	mov	r1, r2
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7ff fbc7 	bl	8009bb0 <follow_path>
 800a422:	4603      	mov	r3, r0
 800a424:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a428:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d11a      	bne.n	800a466 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a430:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a434:	b25b      	sxtb	r3, r3
 800a436:	2b00      	cmp	r3, #0
 800a438:	da03      	bge.n	800a442 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a43a:	2306      	movs	r3, #6
 800a43c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a440:	e011      	b.n	800a466 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a442:	79fb      	ldrb	r3, [r7, #7]
 800a444:	f023 0301 	bic.w	r3, r3, #1
 800a448:	2b00      	cmp	r3, #0
 800a44a:	bf14      	ite	ne
 800a44c:	2301      	movne	r3, #1
 800a44e:	2300      	moveq	r3, #0
 800a450:	b2db      	uxtb	r3, r3
 800a452:	461a      	mov	r2, r3
 800a454:	f107 0314 	add.w	r3, r7, #20
 800a458:	4611      	mov	r1, r2
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7fe fb16 	bl	8008a8c <chk_lock>
 800a460:	4603      	mov	r3, r0
 800a462:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a466:	79fb      	ldrb	r3, [r7, #7]
 800a468:	f003 031c 	and.w	r3, r3, #28
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d07f      	beq.n	800a570 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a470:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a474:	2b00      	cmp	r3, #0
 800a476:	d017      	beq.n	800a4a8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a47c:	2b04      	cmp	r3, #4
 800a47e:	d10e      	bne.n	800a49e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a480:	f7fe fb60 	bl	8008b44 <enq_lock>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d006      	beq.n	800a498 <f_open+0xc8>
 800a48a:	f107 0314 	add.w	r3, r7, #20
 800a48e:	4618      	mov	r0, r3
 800a490:	f7ff fac8 	bl	8009a24 <dir_register>
 800a494:	4603      	mov	r3, r0
 800a496:	e000      	b.n	800a49a <f_open+0xca>
 800a498:	2312      	movs	r3, #18
 800a49a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a49e:	79fb      	ldrb	r3, [r7, #7]
 800a4a0:	f043 0308 	orr.w	r3, r3, #8
 800a4a4:	71fb      	strb	r3, [r7, #7]
 800a4a6:	e010      	b.n	800a4ca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a4a8:	7ebb      	ldrb	r3, [r7, #26]
 800a4aa:	f003 0311 	and.w	r3, r3, #17
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d003      	beq.n	800a4ba <f_open+0xea>
					res = FR_DENIED;
 800a4b2:	2307      	movs	r3, #7
 800a4b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a4b8:	e007      	b.n	800a4ca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a4ba:	79fb      	ldrb	r3, [r7, #7]
 800a4bc:	f003 0304 	and.w	r3, r3, #4
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d002      	beq.n	800a4ca <f_open+0xfa>
 800a4c4:	2308      	movs	r3, #8
 800a4c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a4ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d168      	bne.n	800a5a4 <f_open+0x1d4>
 800a4d2:	79fb      	ldrb	r3, [r7, #7]
 800a4d4:	f003 0308 	and.w	r3, r3, #8
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d063      	beq.n	800a5a4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a4dc:	f7fa fdf4 	bl	80050c8 <get_fattime>
 800a4e0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e4:	330e      	adds	r3, #14
 800a4e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7fe fa25 	bl	8008938 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f0:	3316      	adds	r3, #22
 800a4f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fe fa1f 	bl	8008938 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4fc:	330b      	adds	r3, #11
 800a4fe:	2220      	movs	r2, #32
 800a500:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a506:	4611      	mov	r1, r2
 800a508:	4618      	mov	r0, r3
 800a50a:	f7ff f9f7 	bl	80098fc <ld_clust>
 800a50e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a514:	2200      	movs	r2, #0
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff fa0f 	bl	800993a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a51e:	331c      	adds	r3, #28
 800a520:	2100      	movs	r1, #0
 800a522:	4618      	mov	r0, r3
 800a524:	f7fe fa08 	bl	8008938 <st_dword>
					fs->wflag = 1;
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	2201      	movs	r2, #1
 800a52c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a52e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a530:	2b00      	cmp	r3, #0
 800a532:	d037      	beq.n	800a5a4 <f_open+0x1d4>
						dw = fs->winsect;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a538:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a53a:	f107 0314 	add.w	r3, r7, #20
 800a53e:	2200      	movs	r2, #0
 800a540:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a542:	4618      	mov	r0, r3
 800a544:	f7fe feff 	bl	8009346 <remove_chain>
 800a548:	4603      	mov	r3, r0
 800a54a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a54e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a552:	2b00      	cmp	r3, #0
 800a554:	d126      	bne.n	800a5a4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fe fc46 	bl	8008dec <move_window>
 800a560:	4603      	mov	r3, r0
 800a562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a56a:	3a01      	subs	r2, #1
 800a56c:	611a      	str	r2, [r3, #16]
 800a56e:	e019      	b.n	800a5a4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a570:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a574:	2b00      	cmp	r3, #0
 800a576:	d115      	bne.n	800a5a4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a578:	7ebb      	ldrb	r3, [r7, #26]
 800a57a:	f003 0310 	and.w	r3, r3, #16
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d003      	beq.n	800a58a <f_open+0x1ba>
					res = FR_NO_FILE;
 800a582:	2304      	movs	r3, #4
 800a584:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a588:	e00c      	b.n	800a5a4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a58a:	79fb      	ldrb	r3, [r7, #7]
 800a58c:	f003 0302 	and.w	r3, r3, #2
 800a590:	2b00      	cmp	r3, #0
 800a592:	d007      	beq.n	800a5a4 <f_open+0x1d4>
 800a594:	7ebb      	ldrb	r3, [r7, #26]
 800a596:	f003 0301 	and.w	r3, r3, #1
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d002      	beq.n	800a5a4 <f_open+0x1d4>
						res = FR_DENIED;
 800a59e:	2307      	movs	r3, #7
 800a5a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a5a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d128      	bne.n	800a5fe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a5ac:	79fb      	ldrb	r3, [r7, #7]
 800a5ae:	f003 0308 	and.w	r3, r3, #8
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d003      	beq.n	800a5be <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a5b6:	79fb      	ldrb	r3, [r7, #7]
 800a5b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5bc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a5c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a5cc:	79fb      	ldrb	r3, [r7, #7]
 800a5ce:	f023 0301 	bic.w	r3, r3, #1
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	bf14      	ite	ne
 800a5d6:	2301      	movne	r3, #1
 800a5d8:	2300      	moveq	r3, #0
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	461a      	mov	r2, r3
 800a5de:	f107 0314 	add.w	r3, r7, #20
 800a5e2:	4611      	mov	r1, r2
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7fe facf 	bl	8008b88 <inc_lock>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d102      	bne.n	800a5fe <f_open+0x22e>
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a5fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a602:	2b00      	cmp	r3, #0
 800a604:	f040 80a3 	bne.w	800a74e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a60c:	4611      	mov	r1, r2
 800a60e:	4618      	mov	r0, r3
 800a610:	f7ff f974 	bl	80098fc <ld_clust>
 800a614:	4602      	mov	r2, r0
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61c:	331c      	adds	r3, #28
 800a61e:	4618      	mov	r0, r3
 800a620:	f7fe f94c 	bl	80088bc <ld_dword>
 800a624:	4602      	mov	r2, r0
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	88da      	ldrh	r2, [r3, #6]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	79fa      	ldrb	r2, [r7, #7]
 800a642:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2200      	movs	r2, #0
 800a64e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	3330      	adds	r3, #48	; 0x30
 800a65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a65e:	2100      	movs	r1, #0
 800a660:	4618      	mov	r0, r3
 800a662:	f7fe f9b6 	bl	80089d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a666:	79fb      	ldrb	r3, [r7, #7]
 800a668:	f003 0320 	and.w	r3, r3, #32
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d06e      	beq.n	800a74e <f_open+0x37e>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d06a      	beq.n	800a74e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	68da      	ldr	r2, [r3, #12]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	895b      	ldrh	r3, [r3, #10]
 800a684:	461a      	mov	r2, r3
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	899b      	ldrh	r3, [r3, #12]
 800a68a:	fb03 f302 	mul.w	r3, r3, r2
 800a68e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	657b      	str	r3, [r7, #84]	; 0x54
 800a69c:	e016      	b.n	800a6cc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7fe fc5f 	bl	8008f66 <get_fat>
 800a6a8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a6aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d802      	bhi.n	800a6b6 <f_open+0x2e6>
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a6b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6bc:	d102      	bne.n	800a6c4 <f_open+0x2f4>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a6c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a6c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6c8:	1ad3      	subs	r3, r2, r3
 800a6ca:	657b      	str	r3, [r7, #84]	; 0x54
 800a6cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d103      	bne.n	800a6dc <f_open+0x30c>
 800a6d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a6d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d8e0      	bhi.n	800a69e <f_open+0x2ce>
				}
				fp->clust = clst;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a6e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d131      	bne.n	800a74e <f_open+0x37e>
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	899b      	ldrh	r3, [r3, #12]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6f6:	fb02 f201 	mul.w	r2, r2, r1
 800a6fa:	1a9b      	subs	r3, r3, r2
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d026      	beq.n	800a74e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a704:	4618      	mov	r0, r3
 800a706:	f7fe fc0f 	bl	8008f28 <clust2sect>
 800a70a:	6478      	str	r0, [r7, #68]	; 0x44
 800a70c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d103      	bne.n	800a71a <f_open+0x34a>
						res = FR_INT_ERR;
 800a712:	2302      	movs	r3, #2
 800a714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a718:	e019      	b.n	800a74e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	899b      	ldrh	r3, [r3, #12]
 800a71e:	461a      	mov	r2, r3
 800a720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a722:	fbb3 f2f2 	udiv	r2, r3, r2
 800a726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a728:	441a      	add	r2, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	7858      	ldrb	r0, [r3, #1]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6a1a      	ldr	r2, [r3, #32]
 800a73c:	2301      	movs	r3, #1
 800a73e:	f7fe f847 	bl	80087d0 <disk_read>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d002      	beq.n	800a74e <f_open+0x37e>
 800a748:	2301      	movs	r3, #1
 800a74a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a74e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a752:	2b00      	cmp	r3, #0
 800a754:	d002      	beq.n	800a75c <f_open+0x38c>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a75c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a760:	4618      	mov	r0, r3
 800a762:	3760      	adds	r7, #96	; 0x60
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b08e      	sub	sp, #56	; 0x38
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]
 800a774:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2200      	movs	r2, #0
 800a77e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f107 0214 	add.w	r2, r7, #20
 800a786:	4611      	mov	r1, r2
 800a788:	4618      	mov	r0, r3
 800a78a:	f7ff fda5 	bl	800a2d8 <validate>
 800a78e:	4603      	mov	r3, r0
 800a790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a794:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d107      	bne.n	800a7ac <f_read+0x44>
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	7d5b      	ldrb	r3, [r3, #21]
 800a7a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a7a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d002      	beq.n	800a7b2 <f_read+0x4a>
 800a7ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a7b0:	e135      	b.n	800aa1e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	7d1b      	ldrb	r3, [r3, #20]
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d101      	bne.n	800a7c2 <f_read+0x5a>
 800a7be:	2307      	movs	r3, #7
 800a7c0:	e12d      	b.n	800aa1e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	68da      	ldr	r2, [r3, #12]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	6a3b      	ldr	r3, [r7, #32]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	f240 811e 	bls.w	800aa14 <f_read+0x2ac>
 800a7d8:	6a3b      	ldr	r3, [r7, #32]
 800a7da:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a7dc:	e11a      	b.n	800aa14 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	8992      	ldrh	r2, [r2, #12]
 800a7e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7ea:	fb02 f201 	mul.w	r2, r2, r1
 800a7ee:	1a9b      	subs	r3, r3, r2
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f040 80d5 	bne.w	800a9a0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	8992      	ldrh	r2, [r2, #12]
 800a7fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800a802:	697a      	ldr	r2, [r7, #20]
 800a804:	8952      	ldrh	r2, [r2, #10]
 800a806:	3a01      	subs	r2, #1
 800a808:	4013      	ands	r3, r2
 800a80a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d12f      	bne.n	800a872 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d103      	bne.n	800a822 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	633b      	str	r3, [r7, #48]	; 0x30
 800a820:	e013      	b.n	800a84a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a826:	2b00      	cmp	r3, #0
 800a828:	d007      	beq.n	800a83a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	699b      	ldr	r3, [r3, #24]
 800a82e:	4619      	mov	r1, r3
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f7fe fe85 	bl	8009540 <clmt_clust>
 800a836:	6338      	str	r0, [r7, #48]	; 0x30
 800a838:	e007      	b.n	800a84a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	69db      	ldr	r3, [r3, #28]
 800a840:	4619      	mov	r1, r3
 800a842:	4610      	mov	r0, r2
 800a844:	f7fe fb8f 	bl	8008f66 <get_fat>
 800a848:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d804      	bhi.n	800a85a <f_read+0xf2>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2202      	movs	r2, #2
 800a854:	755a      	strb	r2, [r3, #21]
 800a856:	2302      	movs	r3, #2
 800a858:	e0e1      	b.n	800aa1e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a860:	d104      	bne.n	800a86c <f_read+0x104>
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2201      	movs	r2, #1
 800a866:	755a      	strb	r2, [r3, #21]
 800a868:	2301      	movs	r3, #1
 800a86a:	e0d8      	b.n	800aa1e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a870:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	69db      	ldr	r3, [r3, #28]
 800a878:	4619      	mov	r1, r3
 800a87a:	4610      	mov	r0, r2
 800a87c:	f7fe fb54 	bl	8008f28 <clust2sect>
 800a880:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d104      	bne.n	800a892 <f_read+0x12a>
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2202      	movs	r2, #2
 800a88c:	755a      	strb	r2, [r3, #21]
 800a88e:	2302      	movs	r3, #2
 800a890:	e0c5      	b.n	800aa1e <f_read+0x2b6>
			sect += csect;
 800a892:	69ba      	ldr	r2, [r7, #24]
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	4413      	add	r3, r2
 800a898:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	899b      	ldrh	r3, [r3, #12]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8a6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d041      	beq.n	800a932 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a8ae:	69fa      	ldr	r2, [r7, #28]
 800a8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b2:	4413      	add	r3, r2
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	8952      	ldrh	r2, [r2, #10]
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d905      	bls.n	800a8c8 <f_read+0x160>
					cc = fs->csize - csect;
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	895b      	ldrh	r3, [r3, #10]
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	1ad3      	subs	r3, r2, r3
 800a8c6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	7858      	ldrb	r0, [r3, #1]
 800a8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ce:	69ba      	ldr	r2, [r7, #24]
 800a8d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8d2:	f7fd ff7d 	bl	80087d0 <disk_read>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d004      	beq.n	800a8e6 <f_read+0x17e>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	755a      	strb	r2, [r3, #21]
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e09b      	b.n	800aa1e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	7d1b      	ldrb	r3, [r3, #20]
 800a8ea:	b25b      	sxtb	r3, r3
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	da18      	bge.n	800a922 <f_read+0x1ba>
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6a1a      	ldr	r2, [r3, #32]
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d911      	bls.n	800a922 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6a1a      	ldr	r2, [r3, #32]
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	1ad3      	subs	r3, r2, r3
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	8992      	ldrh	r2, [r2, #12]
 800a90a:	fb02 f303 	mul.w	r3, r2, r3
 800a90e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a910:	18d0      	adds	r0, r2, r3
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	899b      	ldrh	r3, [r3, #12]
 800a91c:	461a      	mov	r2, r3
 800a91e:	f7fe f837 	bl	8008990 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	899b      	ldrh	r3, [r3, #12]
 800a926:	461a      	mov	r2, r3
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92a:	fb02 f303 	mul.w	r3, r2, r3
 800a92e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a930:	e05c      	b.n	800a9ec <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	69ba      	ldr	r2, [r7, #24]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d02e      	beq.n	800a99a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	7d1b      	ldrb	r3, [r3, #20]
 800a940:	b25b      	sxtb	r3, r3
 800a942:	2b00      	cmp	r3, #0
 800a944:	da18      	bge.n	800a978 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	7858      	ldrb	r0, [r3, #1]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6a1a      	ldr	r2, [r3, #32]
 800a954:	2301      	movs	r3, #1
 800a956:	f7fd ff5b 	bl	8008810 <disk_write>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d004      	beq.n	800a96a <f_read+0x202>
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2201      	movs	r2, #1
 800a964:	755a      	strb	r2, [r3, #21]
 800a966:	2301      	movs	r3, #1
 800a968:	e059      	b.n	800aa1e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	7d1b      	ldrb	r3, [r3, #20]
 800a96e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a972:	b2da      	uxtb	r2, r3
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	7858      	ldrb	r0, [r3, #1]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a982:	2301      	movs	r3, #1
 800a984:	69ba      	ldr	r2, [r7, #24]
 800a986:	f7fd ff23 	bl	80087d0 <disk_read>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d004      	beq.n	800a99a <f_read+0x232>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2201      	movs	r2, #1
 800a994:	755a      	strb	r2, [r3, #21]
 800a996:	2301      	movs	r3, #1
 800a998:	e041      	b.n	800aa1e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	69ba      	ldr	r2, [r7, #24]
 800a99e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	899b      	ldrh	r3, [r3, #12]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	699b      	ldr	r3, [r3, #24]
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	8992      	ldrh	r2, [r2, #12]
 800a9ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9b2:	fb02 f201 	mul.w	r2, r2, r1
 800a9b6:	1a9b      	subs	r3, r3, r2
 800a9b8:	1ac3      	subs	r3, r0, r3
 800a9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a9bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d901      	bls.n	800a9c8 <f_read+0x260>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	699b      	ldr	r3, [r3, #24]
 800a9d2:	697a      	ldr	r2, [r7, #20]
 800a9d4:	8992      	ldrh	r2, [r2, #12]
 800a9d6:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9da:	fb02 f200 	mul.w	r2, r2, r0
 800a9de:	1a9b      	subs	r3, r3, r2
 800a9e0:	440b      	add	r3, r1
 800a9e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9e8:	f7fd ffd2 	bl	8008990 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a9ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f0:	4413      	add	r3, r2
 800a9f2:	627b      	str	r3, [r7, #36]	; 0x24
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	699a      	ldr	r2, [r3, #24]
 800a9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fa:	441a      	add	r2, r3
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	619a      	str	r2, [r3, #24]
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa06:	441a      	add	r2, r3
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f47f aee1 	bne.w	800a7de <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3738      	adds	r7, #56	; 0x38
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b08c      	sub	sp, #48	; 0x30
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	60f8      	str	r0, [r7, #12]
 800aa2e:	60b9      	str	r1, [r7, #8]
 800aa30:	607a      	str	r2, [r7, #4]
 800aa32:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f107 0210 	add.w	r2, r7, #16
 800aa44:	4611      	mov	r1, r2
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7ff fc46 	bl	800a2d8 <validate>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aa52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d107      	bne.n	800aa6a <f_write+0x44>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	7d5b      	ldrb	r3, [r3, #21]
 800aa5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aa62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d002      	beq.n	800aa70 <f_write+0x4a>
 800aa6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa6e:	e16a      	b.n	800ad46 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	7d1b      	ldrb	r3, [r3, #20]
 800aa74:	f003 0302 	and.w	r3, r3, #2
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d101      	bne.n	800aa80 <f_write+0x5a>
 800aa7c:	2307      	movs	r3, #7
 800aa7e:	e162      	b.n	800ad46 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	699a      	ldr	r2, [r3, #24]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	441a      	add	r2, r3
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	f080 814c 	bcs.w	800ad2a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	43db      	mvns	r3, r3
 800aa98:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800aa9a:	e146      	b.n	800ad2a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	693a      	ldr	r2, [r7, #16]
 800aaa2:	8992      	ldrh	r2, [r2, #12]
 800aaa4:	fbb3 f1f2 	udiv	r1, r3, r2
 800aaa8:	fb02 f201 	mul.w	r2, r2, r1
 800aaac:	1a9b      	subs	r3, r3, r2
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	f040 80f1 	bne.w	800ac96 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	8992      	ldrh	r2, [r2, #12]
 800aabc:	fbb3 f3f2 	udiv	r3, r3, r2
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	8952      	ldrh	r2, [r2, #10]
 800aac4:	3a01      	subs	r2, #1
 800aac6:	4013      	ands	r3, r2
 800aac8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d143      	bne.n	800ab58 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	699b      	ldr	r3, [r3, #24]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10c      	bne.n	800aaf2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800aade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d11a      	bne.n	800ab1a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2100      	movs	r1, #0
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7fe fc91 	bl	8009410 <create_chain>
 800aaee:	62b8      	str	r0, [r7, #40]	; 0x28
 800aaf0:	e013      	b.n	800ab1a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d007      	beq.n	800ab0a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	699b      	ldr	r3, [r3, #24]
 800aafe:	4619      	mov	r1, r3
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f7fe fd1d 	bl	8009540 <clmt_clust>
 800ab06:	62b8      	str	r0, [r7, #40]	; 0x28
 800ab08:	e007      	b.n	800ab1a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	69db      	ldr	r3, [r3, #28]
 800ab10:	4619      	mov	r1, r3
 800ab12:	4610      	mov	r0, r2
 800ab14:	f7fe fc7c 	bl	8009410 <create_chain>
 800ab18:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f000 8109 	beq.w	800ad34 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ab22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d104      	bne.n	800ab32 <f_write+0x10c>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2202      	movs	r2, #2
 800ab2c:	755a      	strb	r2, [r3, #21]
 800ab2e:	2302      	movs	r3, #2
 800ab30:	e109      	b.n	800ad46 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab38:	d104      	bne.n	800ab44 <f_write+0x11e>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	755a      	strb	r2, [r3, #21]
 800ab40:	2301      	movs	r3, #1
 800ab42:	e100      	b.n	800ad46 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab48:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d102      	bne.n	800ab58 <f_write+0x132>
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab56:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	7d1b      	ldrb	r3, [r3, #20]
 800ab5c:	b25b      	sxtb	r3, r3
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	da18      	bge.n	800ab94 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	7858      	ldrb	r0, [r3, #1]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6a1a      	ldr	r2, [r3, #32]
 800ab70:	2301      	movs	r3, #1
 800ab72:	f7fd fe4d 	bl	8008810 <disk_write>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d004      	beq.n	800ab86 <f_write+0x160>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	755a      	strb	r2, [r3, #21]
 800ab82:	2301      	movs	r3, #1
 800ab84:	e0df      	b.n	800ad46 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	7d1b      	ldrb	r3, [r3, #20]
 800ab8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	69db      	ldr	r3, [r3, #28]
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	f7fe f9c3 	bl	8008f28 <clust2sect>
 800aba2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d104      	bne.n	800abb4 <f_write+0x18e>
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2202      	movs	r2, #2
 800abae:	755a      	strb	r2, [r3, #21]
 800abb0:	2302      	movs	r3, #2
 800abb2:	e0c8      	b.n	800ad46 <f_write+0x320>
			sect += csect;
 800abb4:	697a      	ldr	r2, [r7, #20]
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	4413      	add	r3, r2
 800abba:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	899b      	ldrh	r3, [r3, #12]
 800abc0:	461a      	mov	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	fbb3 f3f2 	udiv	r3, r3, r2
 800abc8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800abca:	6a3b      	ldr	r3, [r7, #32]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d043      	beq.n	800ac58 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800abd0:	69ba      	ldr	r2, [r7, #24]
 800abd2:	6a3b      	ldr	r3, [r7, #32]
 800abd4:	4413      	add	r3, r2
 800abd6:	693a      	ldr	r2, [r7, #16]
 800abd8:	8952      	ldrh	r2, [r2, #10]
 800abda:	4293      	cmp	r3, r2
 800abdc:	d905      	bls.n	800abea <f_write+0x1c4>
					cc = fs->csize - csect;
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	895b      	ldrh	r3, [r3, #10]
 800abe2:	461a      	mov	r2, r3
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	7858      	ldrb	r0, [r3, #1]
 800abee:	6a3b      	ldr	r3, [r7, #32]
 800abf0:	697a      	ldr	r2, [r7, #20]
 800abf2:	69f9      	ldr	r1, [r7, #28]
 800abf4:	f7fd fe0c 	bl	8008810 <disk_write>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d004      	beq.n	800ac08 <f_write+0x1e2>
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2201      	movs	r2, #1
 800ac02:	755a      	strb	r2, [r3, #21]
 800ac04:	2301      	movs	r3, #1
 800ac06:	e09e      	b.n	800ad46 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6a1a      	ldr	r2, [r3, #32]
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	1ad3      	subs	r3, r2, r3
 800ac10:	6a3a      	ldr	r2, [r7, #32]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d918      	bls.n	800ac48 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6a1a      	ldr	r2, [r3, #32]
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	8992      	ldrh	r2, [r2, #12]
 800ac28:	fb02 f303 	mul.w	r3, r2, r3
 800ac2c:	69fa      	ldr	r2, [r7, #28]
 800ac2e:	18d1      	adds	r1, r2, r3
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	899b      	ldrh	r3, [r3, #12]
 800ac34:	461a      	mov	r2, r3
 800ac36:	f7fd feab 	bl	8008990 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	7d1b      	ldrb	r3, [r3, #20]
 800ac3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	899b      	ldrh	r3, [r3, #12]
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	6a3b      	ldr	r3, [r7, #32]
 800ac50:	fb02 f303 	mul.w	r3, r2, r3
 800ac54:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ac56:	e04b      	b.n	800acf0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6a1b      	ldr	r3, [r3, #32]
 800ac5c:	697a      	ldr	r2, [r7, #20]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d016      	beq.n	800ac90 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	699a      	ldr	r2, [r3, #24]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d210      	bcs.n	800ac90 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	7858      	ldrb	r0, [r3, #1]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac78:	2301      	movs	r3, #1
 800ac7a:	697a      	ldr	r2, [r7, #20]
 800ac7c:	f7fd fda8 	bl	80087d0 <disk_read>
 800ac80:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d004      	beq.n	800ac90 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	755a      	strb	r2, [r3, #21]
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e05a      	b.n	800ad46 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	697a      	ldr	r2, [r7, #20]
 800ac94:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	899b      	ldrh	r3, [r3, #12]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	699b      	ldr	r3, [r3, #24]
 800aca0:	693a      	ldr	r2, [r7, #16]
 800aca2:	8992      	ldrh	r2, [r2, #12]
 800aca4:	fbb3 f1f2 	udiv	r1, r3, r2
 800aca8:	fb02 f201 	mul.w	r2, r2, r1
 800acac:	1a9b      	subs	r3, r3, r2
 800acae:	1ac3      	subs	r3, r0, r3
 800acb0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800acb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d901      	bls.n	800acbe <f_write+0x298>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	699b      	ldr	r3, [r3, #24]
 800acc8:	693a      	ldr	r2, [r7, #16]
 800acca:	8992      	ldrh	r2, [r2, #12]
 800accc:	fbb3 f0f2 	udiv	r0, r3, r2
 800acd0:	fb02 f200 	mul.w	r2, r2, r0
 800acd4:	1a9b      	subs	r3, r3, r2
 800acd6:	440b      	add	r3, r1
 800acd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acda:	69f9      	ldr	r1, [r7, #28]
 800acdc:	4618      	mov	r0, r3
 800acde:	f7fd fe57 	bl	8008990 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	7d1b      	ldrb	r3, [r3, #20]
 800ace6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800acea:	b2da      	uxtb	r2, r3
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800acf0:	69fa      	ldr	r2, [r7, #28]
 800acf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf4:	4413      	add	r3, r2
 800acf6:	61fb      	str	r3, [r7, #28]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	699a      	ldr	r2, [r3, #24]
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfe:	441a      	add	r2, r3
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	619a      	str	r2, [r3, #24]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	68da      	ldr	r2, [r3, #12]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	bf38      	it	cc
 800ad10:	461a      	movcc	r2, r3
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	60da      	str	r2, [r3, #12]
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1c:	441a      	add	r2, r3
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	601a      	str	r2, [r3, #0]
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad26:	1ad3      	subs	r3, r2, r3
 800ad28:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f47f aeb5 	bne.w	800aa9c <f_write+0x76>
 800ad32:	e000      	b.n	800ad36 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ad34:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	7d1b      	ldrb	r3, [r3, #20]
 800ad3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3730      	adds	r7, #48	; 0x30
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b086      	sub	sp, #24
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f107 0208 	add.w	r2, r7, #8
 800ad5c:	4611      	mov	r1, r2
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7ff faba 	bl	800a2d8 <validate>
 800ad64:	4603      	mov	r3, r0
 800ad66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ad68:	7dfb      	ldrb	r3, [r7, #23]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d168      	bne.n	800ae40 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	7d1b      	ldrb	r3, [r3, #20]
 800ad72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d062      	beq.n	800ae40 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	7d1b      	ldrb	r3, [r3, #20]
 800ad7e:	b25b      	sxtb	r3, r3
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	da15      	bge.n	800adb0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	7858      	ldrb	r0, [r3, #1]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a1a      	ldr	r2, [r3, #32]
 800ad92:	2301      	movs	r3, #1
 800ad94:	f7fd fd3c 	bl	8008810 <disk_write>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d001      	beq.n	800ada2 <f_sync+0x54>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e04f      	b.n	800ae42 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	7d1b      	ldrb	r3, [r3, #20]
 800ada6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800adb0:	f7fa f98a 	bl	80050c8 <get_fattime>
 800adb4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800adb6:	68ba      	ldr	r2, [r7, #8]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbc:	4619      	mov	r1, r3
 800adbe:	4610      	mov	r0, r2
 800adc0:	f7fe f814 	bl	8008dec <move_window>
 800adc4:	4603      	mov	r3, r0
 800adc6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800adc8:	7dfb      	ldrb	r3, [r7, #23]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d138      	bne.n	800ae40 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	330b      	adds	r3, #11
 800add8:	781a      	ldrb	r2, [r3, #0]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	330b      	adds	r3, #11
 800adde:	f042 0220 	orr.w	r2, r2, #32
 800ade2:	b2d2      	uxtb	r2, r2
 800ade4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6818      	ldr	r0, [r3, #0]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	461a      	mov	r2, r3
 800adf0:	68f9      	ldr	r1, [r7, #12]
 800adf2:	f7fe fda2 	bl	800993a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f103 021c 	add.w	r2, r3, #28
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	4619      	mov	r1, r3
 800ae02:	4610      	mov	r0, r2
 800ae04:	f7fd fd98 	bl	8008938 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	3316      	adds	r3, #22
 800ae0c:	6939      	ldr	r1, [r7, #16]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fd fd92 	bl	8008938 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	3312      	adds	r3, #18
 800ae18:	2100      	movs	r1, #0
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fd fd71 	bl	8008902 <st_word>
					fs->wflag = 1;
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	2201      	movs	r2, #1
 800ae24:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7fe f80d 	bl	8008e48 <sync_fs>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	7d1b      	ldrb	r3, [r3, #20]
 800ae36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae3a:	b2da      	uxtb	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ae40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3718      	adds	r7, #24
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b084      	sub	sp, #16
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7ff ff7b 	bl	800ad4e <f_sync>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ae5c:	7bfb      	ldrb	r3, [r7, #15]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d118      	bne.n	800ae94 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f107 0208 	add.w	r2, r7, #8
 800ae68:	4611      	mov	r1, r2
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7ff fa34 	bl	800a2d8 <validate>
 800ae70:	4603      	mov	r3, r0
 800ae72:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10c      	bne.n	800ae94 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fd ff10 	bl	8008ca4 <dec_lock>
 800ae84:	4603      	mov	r3, r0
 800ae86:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ae88:	7bfb      	ldrb	r3, [r7, #15]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d102      	bne.n	800ae94 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ae94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b092      	sub	sp, #72	; 0x48
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	60f8      	str	r0, [r7, #12]
 800aea6:	60b9      	str	r1, [r7, #8]
 800aea8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800aeaa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800aeae:	f107 030c 	add.w	r3, r7, #12
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fe ff8b 	bl	8009dd0 <find_volume>
 800aeba:	4603      	mov	r3, r0
 800aebc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800aec0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f040 8099 	bne.w	800affc <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800aeca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800aed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed2:	695a      	ldr	r2, [r3, #20]
 800aed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed6:	699b      	ldr	r3, [r3, #24]
 800aed8:	3b02      	subs	r3, #2
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d804      	bhi.n	800aee8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800aede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee0:	695a      	ldr	r2, [r3, #20]
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	601a      	str	r2, [r3, #0]
 800aee6:	e089      	b.n	800affc <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800aee8:	2300      	movs	r3, #0
 800aeea:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800aeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d128      	bne.n	800af46 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800aef4:	2302      	movs	r3, #2
 800aef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefa:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800aefc:	f107 0314 	add.w	r3, r7, #20
 800af00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af02:	4618      	mov	r0, r3
 800af04:	f7fe f82f 	bl	8008f66 <get_fat>
 800af08:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800af0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af10:	d103      	bne.n	800af1a <f_getfree+0x7c>
 800af12:	2301      	movs	r3, #1
 800af14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800af18:	e063      	b.n	800afe2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800af1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d103      	bne.n	800af28 <f_getfree+0x8a>
 800af20:	2302      	movs	r3, #2
 800af22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800af26:	e05c      	b.n	800afe2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800af28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d102      	bne.n	800af34 <f_getfree+0x96>
 800af2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af30:	3301      	adds	r3, #1
 800af32:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800af34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af36:	3301      	adds	r3, #1
 800af38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af40:	429a      	cmp	r2, r3
 800af42:	d3db      	bcc.n	800aefc <f_getfree+0x5e>
 800af44:	e04d      	b.n	800afe2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800af46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af48:	699b      	ldr	r3, [r3, #24]
 800af4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af50:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800af52:	2300      	movs	r3, #0
 800af54:	637b      	str	r3, [r7, #52]	; 0x34
 800af56:	2300      	movs	r3, #0
 800af58:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800af5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d113      	bne.n	800af88 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800af60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af64:	1c5a      	adds	r2, r3, #1
 800af66:	63ba      	str	r2, [r7, #56]	; 0x38
 800af68:	4619      	mov	r1, r3
 800af6a:	f7fd ff3f 	bl	8008dec <move_window>
 800af6e:	4603      	mov	r3, r0
 800af70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800af74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d131      	bne.n	800afe0 <f_getfree+0x142>
							p = fs->win;
 800af7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7e:	3334      	adds	r3, #52	; 0x34
 800af80:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800af82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af84:	899b      	ldrh	r3, [r3, #12]
 800af86:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800af88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d10f      	bne.n	800afb0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800af90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af92:	f7fd fc7b 	bl	800888c <ld_word>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d102      	bne.n	800afa2 <f_getfree+0x104>
 800af9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af9e:	3301      	adds	r3, #1
 800afa0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800afa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa4:	3302      	adds	r3, #2
 800afa6:	633b      	str	r3, [r7, #48]	; 0x30
 800afa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afaa:	3b02      	subs	r3, #2
 800afac:	637b      	str	r3, [r7, #52]	; 0x34
 800afae:	e010      	b.n	800afd2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800afb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afb2:	f7fd fc83 	bl	80088bc <ld_dword>
 800afb6:	4603      	mov	r3, r0
 800afb8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d102      	bne.n	800afc6 <f_getfree+0x128>
 800afc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afc2:	3301      	adds	r3, #1
 800afc4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	3304      	adds	r3, #4
 800afca:	633b      	str	r3, [r7, #48]	; 0x30
 800afcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afce:	3b04      	subs	r3, #4
 800afd0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800afd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afd4:	3b01      	subs	r3, #1
 800afd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1bd      	bne.n	800af5a <f_getfree+0xbc>
 800afde:	e000      	b.n	800afe2 <f_getfree+0x144>
							if (res != FR_OK) break;
 800afe0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afe6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afec:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800afee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff0:	791a      	ldrb	r2, [r3, #4]
 800aff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff4:	f042 0201 	orr.w	r2, r2, #1
 800aff8:	b2d2      	uxtb	r2, r2
 800affa:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800affc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b000:	4618      	mov	r0, r3
 800b002:	3748      	adds	r7, #72	; 0x48
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b008:	b480      	push	{r7}
 800b00a:	b087      	sub	sp, #28
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	60b9      	str	r1, [r7, #8]
 800b012:	4613      	mov	r3, r2
 800b014:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b016:	2301      	movs	r3, #1
 800b018:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b01e:	4b1f      	ldr	r3, [pc, #124]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b020:	7a5b      	ldrb	r3, [r3, #9]
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b00      	cmp	r3, #0
 800b026:	d131      	bne.n	800b08c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b028:	4b1c      	ldr	r3, [pc, #112]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b02a:	7a5b      	ldrb	r3, [r3, #9]
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	461a      	mov	r2, r3
 800b030:	4b1a      	ldr	r3, [pc, #104]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b032:	2100      	movs	r1, #0
 800b034:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b036:	4b19      	ldr	r3, [pc, #100]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b038:	7a5b      	ldrb	r3, [r3, #9]
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	4a17      	ldr	r2, [pc, #92]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	4413      	add	r3, r2
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b046:	4b15      	ldr	r3, [pc, #84]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b048:	7a5b      	ldrb	r3, [r3, #9]
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	461a      	mov	r2, r3
 800b04e:	4b13      	ldr	r3, [pc, #76]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b050:	4413      	add	r3, r2
 800b052:	79fa      	ldrb	r2, [r7, #7]
 800b054:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b056:	4b11      	ldr	r3, [pc, #68]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b058:	7a5b      	ldrb	r3, [r3, #9]
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	1c5a      	adds	r2, r3, #1
 800b05e:	b2d1      	uxtb	r1, r2
 800b060:	4a0e      	ldr	r2, [pc, #56]	; (800b09c <FATFS_LinkDriverEx+0x94>)
 800b062:	7251      	strb	r1, [r2, #9]
 800b064:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b066:	7dbb      	ldrb	r3, [r7, #22]
 800b068:	3330      	adds	r3, #48	; 0x30
 800b06a:	b2da      	uxtb	r2, r3
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	3301      	adds	r3, #1
 800b074:	223a      	movs	r2, #58	; 0x3a
 800b076:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	3302      	adds	r3, #2
 800b07c:	222f      	movs	r2, #47	; 0x2f
 800b07e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	3303      	adds	r3, #3
 800b084:	2200      	movs	r2, #0
 800b086:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	371c      	adds	r7, #28
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop
 800b09c:	200000d8 	.word	0x200000d8

0800b0a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	6839      	ldr	r1, [r7, #0]
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7ff ffaa 	bl	800b008 <FATFS_LinkDriverEx>
 800b0b4:	4603      	mov	r3, r0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
	...

0800b0c0 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800b0d4:	4b15      	ldr	r3, [pc, #84]	; (800b12c <FATFS_UnLinkDriverEx+0x6c>)
 800b0d6:	7a5b      	ldrb	r3, [r3, #9]
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d01e      	beq.n	800b11c <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	3b30      	subs	r3, #48	; 0x30
 800b0e4:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800b0e6:	7bbb      	ldrb	r3, [r7, #14]
 800b0e8:	4a10      	ldr	r2, [pc, #64]	; (800b12c <FATFS_UnLinkDriverEx+0x6c>)
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d013      	beq.n	800b11c <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800b0f4:	7bbb      	ldrb	r3, [r7, #14]
 800b0f6:	4a0d      	ldr	r2, [pc, #52]	; (800b12c <FATFS_UnLinkDriverEx+0x6c>)
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	4413      	add	r3, r2
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800b100:	7bbb      	ldrb	r3, [r7, #14]
 800b102:	4a0a      	ldr	r2, [pc, #40]	; (800b12c <FATFS_UnLinkDriverEx+0x6c>)
 800b104:	4413      	add	r3, r2
 800b106:	2200      	movs	r2, #0
 800b108:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800b10a:	4b08      	ldr	r3, [pc, #32]	; (800b12c <FATFS_UnLinkDriverEx+0x6c>)
 800b10c:	7a5b      	ldrb	r3, [r3, #9]
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	3b01      	subs	r3, #1
 800b112:	b2da      	uxtb	r2, r3
 800b114:	4b05      	ldr	r3, [pc, #20]	; (800b12c <FATFS_UnLinkDriverEx+0x6c>)
 800b116:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800b118:	2300      	movs	r3, #0
 800b11a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3714      	adds	r7, #20
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	200000d8 	.word	0x200000d8

0800b130 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800b138:	2100      	movs	r1, #0
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7ff ffc0 	bl	800b0c0 <FATFS_UnLinkDriverEx>
 800b140:	4603      	mov	r3, r0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3708      	adds	r7, #8
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
	...

0800b14c <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800b154:	1d39      	adds	r1, r7, #4
 800b156:	f04f 33ff 	mov.w	r3, #4294967295
 800b15a:	2201      	movs	r2, #1
 800b15c:	4803      	ldr	r0, [pc, #12]	; (800b16c <__io_putchar+0x20>)
 800b15e:	f7f8 fd20 	bl	8003ba2 <HAL_UART_Transmit>
  return ch;
 800b162:	687b      	ldr	r3, [r7, #4]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	20002154 	.word	0x20002154

0800b170 <ETX_MSC_ProcessUsbDevice>:

static FRESULT ETX_MSC_ProcessUsbDevice(void)
{
 800b170:	b5b0      	push	{r4, r5, r7, lr}
 800b172:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
  FATFS     UsbDiskFatFs;                                 /* File system object for USB disk logical drive */
  char      UsbDiskPath[4] = {0};                         /* USB Host logical drive path */
 800b17a:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800b17e:	f103 0310 	add.w	r3, r3, #16
 800b182:	3b04      	subs	r3, #4
 800b184:	2200      	movs	r2, #0
 800b186:	601a      	str	r2, [r3, #0]
  FIL       file;                                         /* File object */
  FRESULT   res;                                          /* FatFs function common result code */
  uint32_t  total_space, free_space;                      /* Total Space and Free Space */
  DWORD     fre_clust;                                    /* Freee Cluster */
  uint32_t  byteswritten, bytesread;                      /* File write/read counts */
  uint8_t   wr_data[] = "Welcome to EmbeTronicX!!!";      /* Data buffer */
 800b188:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b18c:	3b1c      	subs	r3, #28
 800b18e:	4a96      	ldr	r2, [pc, #600]	; (800b3e8 <ETX_MSC_ProcessUsbDevice+0x278>)
 800b190:	461c      	mov	r4, r3
 800b192:	4615      	mov	r5, r2
 800b194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b198:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b19c:	c403      	stmia	r4!, {r0, r1}
 800b19e:	8022      	strh	r2, [r4, #0]
  uint8_t   rd_data[100];                                 /* Read buffer */
  char      file_name[] = "temp.txt";                     /* File name */
 800b1a0:	f107 0310 	add.w	r3, r7, #16
 800b1a4:	3b0c      	subs	r3, #12
 800b1a6:	4a91      	ldr	r2, [pc, #580]	; (800b3ec <ETX_MSC_ProcessUsbDevice+0x27c>)
 800b1a8:	ca07      	ldmia	r2, {r0, r1, r2}
 800b1aa:	c303      	stmia	r3!, {r0, r1}
 800b1ac:	701a      	strb	r2, [r3, #0]

  do
  {
    /* Register the file system object to the FatFs module */
    res = f_mount( &UsbDiskFatFs, (TCHAR const*)UsbDiskPath, 0 );
 800b1ae:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800b1b2:	f103 0310 	add.w	r3, r3, #16
 800b1b6:	3b04      	subs	r3, #4
 800b1b8:	f507 5086 	add.w	r0, r7, #4288	; 0x10c0
 800b1bc:	f100 0010 	add.w	r0, r0, #16
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	f7ff f8be 	bl	800a344 <f_mount>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 800b1ce:	f102 020f 	add.w	r2, r2, #15
 800b1d2:	7013      	strb	r3, [r2, #0]
    if( res != FR_OK )
 800b1d4:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800b1d8:	f103 030f 	add.w	r3, r3, #15
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f040 80db 	bne.w	800b39a <ETX_MSC_ProcessUsbDevice+0x22a>
      /* FatFs Init Error */
      break;
    }

    /* Check the Free Space */
    FATFS *fatFs = &UsbDiskFatFs;
 800b1e4:	f107 0310 	add.w	r3, r7, #16
 800b1e8:	3b10      	subs	r3, #16
 800b1ea:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 800b1ee:	f102 0210 	add.w	r2, r2, #16
 800b1f2:	601a      	str	r2, [r3, #0]
    f_getfree("", &fre_clust, &fatFs);
 800b1f4:	f107 0210 	add.w	r2, r7, #16
 800b1f8:	3a10      	subs	r2, #16
 800b1fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800b1fe:	3b38      	subs	r3, #56	; 0x38
 800b200:	4619      	mov	r1, r3
 800b202:	487b      	ldr	r0, [pc, #492]	; (800b3f0 <ETX_MSC_ProcessUsbDevice+0x280>)
 800b204:	f7ff fe4b 	bl	800ae9e <f_getfree>
    total_space = (uint32_t)((UsbDiskFatFs.n_fatent - 2) * UsbDiskFatFs.csize * 0.5);
 800b208:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800b20c:	f103 0310 	add.w	r3, r3, #16
 800b210:	699b      	ldr	r3, [r3, #24]
 800b212:	3b02      	subs	r3, #2
 800b214:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 800b218:	f102 0210 	add.w	r2, r2, #16
 800b21c:	8952      	ldrh	r2, [r2, #10]
 800b21e:	fb02 f303 	mul.w	r3, r2, r3
 800b222:	4618      	mov	r0, r3
 800b224:	f7f5 fa90 	bl	8000748 <__aeabi_ui2d>
 800b228:	f04f 0200 	mov.w	r2, #0
 800b22c:	4b71      	ldr	r3, [pc, #452]	; (800b3f4 <ETX_MSC_ProcessUsbDevice+0x284>)
 800b22e:	f7f5 f81f 	bl	8000270 <__aeabi_dmul>
 800b232:	4602      	mov	r2, r0
 800b234:	460b      	mov	r3, r1
 800b236:	4610      	mov	r0, r2
 800b238:	4619      	mov	r1, r3
 800b23a:	f7f5 faff 	bl	800083c <__aeabi_d2uiz>
 800b23e:	4603      	mov	r3, r0
 800b240:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 800b244:	f102 0208 	add.w	r2, r2, #8
 800b248:	6013      	str	r3, [r2, #0]
    free_space = (uint32_t)(fre_clust * UsbDiskFatFs.csize * 0.5);
 800b24a:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800b24e:	f103 0310 	add.w	r3, r3, #16
 800b252:	895b      	ldrh	r3, [r3, #10]
 800b254:	461a      	mov	r2, r3
 800b256:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800b25a:	3b38      	subs	r3, #56	; 0x38
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	fb03 f302 	mul.w	r3, r3, r2
 800b262:	4618      	mov	r0, r3
 800b264:	f7f5 fa70 	bl	8000748 <__aeabi_ui2d>
 800b268:	f04f 0200 	mov.w	r2, #0
 800b26c:	4b61      	ldr	r3, [pc, #388]	; (800b3f4 <ETX_MSC_ProcessUsbDevice+0x284>)
 800b26e:	f7f4 ffff 	bl	8000270 <__aeabi_dmul>
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	4610      	mov	r0, r2
 800b278:	4619      	mov	r1, r3
 800b27a:	f7f5 fadf 	bl	800083c <__aeabi_d2uiz>
 800b27e:	4603      	mov	r3, r0
 800b280:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 800b284:	f102 0204 	add.w	r2, r2, #4
 800b288:	6013      	str	r3, [r2, #0]
    printf("USB Device Total Space = %lu MB\n", total_space/1024);
 800b28a:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800b28e:	f103 0308 	add.w	r3, r3, #8
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	0a9b      	lsrs	r3, r3, #10
 800b296:	4619      	mov	r1, r3
 800b298:	4857      	ldr	r0, [pc, #348]	; (800b3f8 <ETX_MSC_ProcessUsbDevice+0x288>)
 800b29a:	f000 fcf1 	bl	800bc80 <iprintf>
    printf("USB Device Free Space  = %lu MB\n", free_space/1024);
 800b29e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800b2a2:	f103 0304 	add.w	r3, r3, #4
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	0a9b      	lsrs	r3, r3, #10
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	4853      	ldr	r0, [pc, #332]	; (800b3fc <ETX_MSC_ProcessUsbDevice+0x28c>)
 800b2ae:	f000 fce7 	bl	800bc80 <iprintf>

    /* Create a new text file with write access */
    res = f_open( &file, file_name, ( FA_CREATE_ALWAYS | FA_WRITE ) );
 800b2b2:	f107 0110 	add.w	r1, r7, #16
 800b2b6:	390c      	subs	r1, #12
 800b2b8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800b2bc:	3b34      	subs	r3, #52	; 0x34
 800b2be:	220a      	movs	r2, #10
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7ff f885 	bl	800a3d0 <f_open>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 800b2cc:	f102 020f 	add.w	r2, r2, #15
 800b2d0:	7013      	strb	r3, [r2, #0]
    if( res != FR_OK )
 800b2d2:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800b2d6:	f103 030f 	add.w	r3, r3, #15
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d15e      	bne.n	800b39e <ETX_MSC_ProcessUsbDevice+0x22e>
      /* File Open Error */
      break;
    }

    /* Write the data to the text file */
    res = f_write( &file, wr_data, sizeof(wr_data), (void *)&byteswritten );
 800b2e0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800b2e4:	3b3c      	subs	r3, #60	; 0x3c
 800b2e6:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800b2ea:	391c      	subs	r1, #28
 800b2ec:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800b2f0:	3834      	subs	r0, #52	; 0x34
 800b2f2:	221a      	movs	r2, #26
 800b2f4:	f7ff fb97 	bl	800aa26 <f_write>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 800b2fe:	f102 020f 	add.w	r2, r2, #15
 800b302:	7013      	strb	r3, [r2, #0]

    /* Close the opened file */
    f_close( &file );
 800b304:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800b308:	3b34      	subs	r3, #52	; 0x34
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7ff fd9d 	bl	800ae4a <f_close>

    if( res != FR_OK )
 800b310:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800b314:	f103 030f 	add.w	r3, r3, #15
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d141      	bne.n	800b3a2 <ETX_MSC_ProcessUsbDevice+0x232>
    {
      /* File write Error */
      break;
    }

    printf("Data written to the USD Device\n");
 800b31e:	4838      	ldr	r0, [pc, #224]	; (800b400 <ETX_MSC_ProcessUsbDevice+0x290>)
 800b320:	f000 fd4a 	bl	800bdb8 <puts>

    /* Open the text file object with read access */
    res = f_open( &file, file_name, FA_READ );
 800b324:	f107 0110 	add.w	r1, r7, #16
 800b328:	390c      	subs	r1, #12
 800b32a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800b32e:	3b34      	subs	r3, #52	; 0x34
 800b330:	2201      	movs	r2, #1
 800b332:	4618      	mov	r0, r3
 800b334:	f7ff f84c 	bl	800a3d0 <f_open>
 800b338:	4603      	mov	r3, r0
 800b33a:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 800b33e:	f102 020f 	add.w	r2, r2, #15
 800b342:	7013      	strb	r3, [r2, #0]
    if( res != FR_OK )
 800b344:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800b348:	f103 030f 	add.w	r3, r3, #15
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d129      	bne.n	800b3a6 <ETX_MSC_ProcessUsbDevice+0x236>
      /* File Open Error */
      break;
    }

    /* Read data from the file */
    res = f_read( &file, rd_data, sizeof(wr_data), (void *)&bytesread);
 800b352:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b356:	f107 0110 	add.w	r1, r7, #16
 800b35a:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800b35e:	3834      	subs	r0, #52	; 0x34
 800b360:	221a      	movs	r2, #26
 800b362:	f7ff fa01 	bl	800a768 <f_read>
 800b366:	4603      	mov	r3, r0
 800b368:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 800b36c:	f102 020f 	add.w	r2, r2, #15
 800b370:	7013      	strb	r3, [r2, #0]

    /* Close the file */
    f_close(&file);
 800b372:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800b376:	3b34      	subs	r3, #52	; 0x34
 800b378:	4618      	mov	r0, r3
 800b37a:	f7ff fd66 	bl	800ae4a <f_close>

    if(res != FR_OK)
 800b37e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800b382:	f103 030f 	add.w	r3, r3, #15
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10e      	bne.n	800b3aa <ETX_MSC_ProcessUsbDevice+0x23a>
      /* File Read Error */
      break;
    }

    /* Print the data */
    printf("Read Data : %s\n", rd_data);
 800b38c:	f107 0310 	add.w	r3, r7, #16
 800b390:	4619      	mov	r1, r3
 800b392:	481c      	ldr	r0, [pc, #112]	; (800b404 <ETX_MSC_ProcessUsbDevice+0x294>)
 800b394:	f000 fc74 	bl	800bc80 <iprintf>
 800b398:	e008      	b.n	800b3ac <ETX_MSC_ProcessUsbDevice+0x23c>
      break;
 800b39a:	bf00      	nop
 800b39c:	e006      	b.n	800b3ac <ETX_MSC_ProcessUsbDevice+0x23c>
      break;
 800b39e:	bf00      	nop
 800b3a0:	e004      	b.n	800b3ac <ETX_MSC_ProcessUsbDevice+0x23c>
      break;
 800b3a2:	bf00      	nop
 800b3a4:	e002      	b.n	800b3ac <ETX_MSC_ProcessUsbDevice+0x23c>
      break;
 800b3a6:	bf00      	nop
 800b3a8:	e000      	b.n	800b3ac <ETX_MSC_ProcessUsbDevice+0x23c>
      break;
 800b3aa:	bf00      	nop

  } while ( 0 );

  /* Unmount the device */
  f_mount(NULL, UsbDiskPath, 0);
 800b3ac:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800b3b0:	f103 0310 	add.w	r3, r3, #16
 800b3b4:	3b04      	subs	r3, #4
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	f7fe ffc2 	bl	800a344 <f_mount>

  /* Unlink the USB disk driver */
  FATFS_UnLinkDriver(UsbDiskPath);
 800b3c0:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800b3c4:	f103 0310 	add.w	r3, r3, #16
 800b3c8:	3b04      	subs	r3, #4
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7ff feb0 	bl	800b130 <FATFS_UnLinkDriver>

  return res;
 800b3d0:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800b3d4:	f103 030f 	add.w	r3, r3, #15
 800b3d8:	781b      	ldrb	r3, [r3, #0]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f507 5704 	add.w	r7, r7, #8448	; 0x2100
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bdb0      	pop	{r4, r5, r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	0800d290 	.word	0x0800d290
 800b3ec:	0800d2ac 	.word	0x0800d2ac
 800b3f0:	0800d214 	.word	0x0800d214
 800b3f4:	3fe00000 	.word	0x3fe00000
 800b3f8:	0800d218 	.word	0x0800d218
 800b3fc:	0800d23c 	.word	0x0800d23c
 800b400:	0800d260 	.word	0x0800d260
 800b404:	0800d280 	.word	0x0800d280

0800b408 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b40c:	2201      	movs	r2, #1
 800b40e:	490e      	ldr	r1, [pc, #56]	; (800b448 <MX_USB_HOST_Init+0x40>)
 800b410:	480e      	ldr	r0, [pc, #56]	; (800b44c <MX_USB_HOST_Init+0x44>)
 800b412:	f7fb fc7b 	bl	8006d0c <USBH_Init>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d001      	beq.n	800b420 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b41c:	f7f5 fca8 	bl	8000d70 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800b420:	490b      	ldr	r1, [pc, #44]	; (800b450 <MX_USB_HOST_Init+0x48>)
 800b422:	480a      	ldr	r0, [pc, #40]	; (800b44c <MX_USB_HOST_Init+0x44>)
 800b424:	f7fb fd0e 	bl	8006e44 <USBH_RegisterClass>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d001      	beq.n	800b432 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b42e:	f7f5 fc9f 	bl	8000d70 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b432:	4806      	ldr	r0, [pc, #24]	; (800b44c <MX_USB_HOST_Init+0x44>)
 800b434:	f7fb fdf4 	bl	8007020 <USBH_Start>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d001      	beq.n	800b442 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b43e:	f7f5 fc97 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b442:	bf00      	nop
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	0800b469 	.word	0x0800b469
 800b44c:	20004208 	.word	0x20004208
 800b450:	2000000c 	.word	0x2000000c

0800b454 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b458:	4802      	ldr	r0, [pc, #8]	; (800b464 <MX_USB_HOST_Process+0x10>)
 800b45a:	f7fb fdf1 	bl	8007040 <USBH_Process>
}
 800b45e:	bf00      	nop
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	20004208 	.word	0x20004208

0800b468 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	460b      	mov	r3, r1
 800b472:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b474:	78fb      	ldrb	r3, [r7, #3]
 800b476:	3b01      	subs	r3, #1
 800b478:	2b04      	cmp	r3, #4
 800b47a:	d821      	bhi.n	800b4c0 <USBH_UserProcess+0x58>
 800b47c:	a201      	add	r2, pc, #4	; (adr r2, 800b484 <USBH_UserProcess+0x1c>)
 800b47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b482:	bf00      	nop
 800b484:	0800b4c1 	.word	0x0800b4c1
 800b488:	0800b4a1 	.word	0x0800b4a1
 800b48c:	0800b4c1 	.word	0x0800b4c1
 800b490:	0800b4b9 	.word	0x0800b4b9
 800b494:	0800b499 	.word	0x0800b499
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b498:	4b0d      	ldr	r3, [pc, #52]	; (800b4d0 <USBH_UserProcess+0x68>)
 800b49a:	2203      	movs	r2, #3
 800b49c:	701a      	strb	r2, [r3, #0]
  break;
 800b49e:	e012      	b.n	800b4c6 <USBH_UserProcess+0x5e>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b4a0:	4b0b      	ldr	r3, [pc, #44]	; (800b4d0 <USBH_UserProcess+0x68>)
 800b4a2:	2202      	movs	r2, #2
 800b4a4:	701a      	strb	r2, [r3, #0]
  if( ETX_MSC_ProcessUsbDevice() != FR_OK )
 800b4a6:	f7ff fe63 	bl	800b170 <ETX_MSC_ProcessUsbDevice>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d009      	beq.n	800b4c4 <USBH_UserProcess+0x5c>
  {
    printf("USB Device Process Error\n");
 800b4b0:	4808      	ldr	r0, [pc, #32]	; (800b4d4 <USBH_UserProcess+0x6c>)
 800b4b2:	f000 fc81 	bl	800bdb8 <puts>
    /* Error : Hang Here */
    while(1);
 800b4b6:	e7fe      	b.n	800b4b6 <USBH_UserProcess+0x4e>
  }
  break;

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b4b8:	4b05      	ldr	r3, [pc, #20]	; (800b4d0 <USBH_UserProcess+0x68>)
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	701a      	strb	r2, [r3, #0]
  break;
 800b4be:	e002      	b.n	800b4c6 <USBH_UserProcess+0x5e>

  default:
  break;
 800b4c0:	bf00      	nop
 800b4c2:	e000      	b.n	800b4c6 <USBH_UserProcess+0x5e>
  break;
 800b4c4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b4c6:	bf00      	nop
 800b4c8:	3708      	adds	r7, #8
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	200000e4 	.word	0x200000e4
 800b4d4:	0800d2b8 	.word	0x0800d2b8

0800b4d8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b08a      	sub	sp, #40	; 0x28
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4e0:	f107 0314 	add.w	r3, r7, #20
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	601a      	str	r2, [r3, #0]
 800b4e8:	605a      	str	r2, [r3, #4]
 800b4ea:	609a      	str	r2, [r3, #8]
 800b4ec:	60da      	str	r2, [r3, #12]
 800b4ee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4f8:	d147      	bne.n	800b58a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	613b      	str	r3, [r7, #16]
 800b4fe:	4b25      	ldr	r3, [pc, #148]	; (800b594 <HAL_HCD_MspInit+0xbc>)
 800b500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b502:	4a24      	ldr	r2, [pc, #144]	; (800b594 <HAL_HCD_MspInit+0xbc>)
 800b504:	f043 0301 	orr.w	r3, r3, #1
 800b508:	6313      	str	r3, [r2, #48]	; 0x30
 800b50a:	4b22      	ldr	r3, [pc, #136]	; (800b594 <HAL_HCD_MspInit+0xbc>)
 800b50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b50e:	f003 0301 	and.w	r3, r3, #1
 800b512:	613b      	str	r3, [r7, #16]
 800b514:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b51a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b51c:	2300      	movs	r3, #0
 800b51e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b520:	2300      	movs	r3, #0
 800b522:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b524:	f107 0314 	add.w	r3, r7, #20
 800b528:	4619      	mov	r1, r3
 800b52a:	481b      	ldr	r0, [pc, #108]	; (800b598 <HAL_HCD_MspInit+0xc0>)
 800b52c:	f7f5 ff52 	bl	80013d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b530:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b536:	2302      	movs	r3, #2
 800b538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b53a:	2300      	movs	r3, #0
 800b53c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b53e:	2303      	movs	r3, #3
 800b540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b542:	230a      	movs	r3, #10
 800b544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b546:	f107 0314 	add.w	r3, r7, #20
 800b54a:	4619      	mov	r1, r3
 800b54c:	4812      	ldr	r0, [pc, #72]	; (800b598 <HAL_HCD_MspInit+0xc0>)
 800b54e:	f7f5 ff41 	bl	80013d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b552:	4b10      	ldr	r3, [pc, #64]	; (800b594 <HAL_HCD_MspInit+0xbc>)
 800b554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b556:	4a0f      	ldr	r2, [pc, #60]	; (800b594 <HAL_HCD_MspInit+0xbc>)
 800b558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b55c:	6353      	str	r3, [r2, #52]	; 0x34
 800b55e:	2300      	movs	r3, #0
 800b560:	60fb      	str	r3, [r7, #12]
 800b562:	4b0c      	ldr	r3, [pc, #48]	; (800b594 <HAL_HCD_MspInit+0xbc>)
 800b564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b566:	4a0b      	ldr	r2, [pc, #44]	; (800b594 <HAL_HCD_MspInit+0xbc>)
 800b568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b56c:	6453      	str	r3, [r2, #68]	; 0x44
 800b56e:	4b09      	ldr	r3, [pc, #36]	; (800b594 <HAL_HCD_MspInit+0xbc>)
 800b570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b576:	60fb      	str	r3, [r7, #12]
 800b578:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b57a:	2200      	movs	r2, #0
 800b57c:	2100      	movs	r1, #0
 800b57e:	2043      	movs	r0, #67	; 0x43
 800b580:	f7f5 fef1 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b584:	2043      	movs	r0, #67	; 0x43
 800b586:	f7f5 ff0a 	bl	800139e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b58a:	bf00      	nop
 800b58c:	3728      	adds	r7, #40	; 0x28
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	40023800 	.word	0x40023800
 800b598:	40020000 	.word	0x40020000

0800b59c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fc fa67 	bl	8007a7e <USBH_LL_IncTimer>
}
 800b5b0:	bf00      	nop
 800b5b2:	3708      	adds	r7, #8
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fc fa9f 	bl	8007b0a <USBH_LL_Connect>
}
 800b5cc:	bf00      	nop
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7fc faa8 	bl	8007b38 <USBH_LL_Disconnect>
}
 800b5e8:	bf00      	nop
 800b5ea:	3708      	adds	r7, #8
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	70fb      	strb	r3, [r7, #3]
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fc fa59 	bl	8007ad2 <USBH_LL_PortEnabled>
}
 800b620:	bf00      	nop
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b636:	4618      	mov	r0, r3
 800b638:	f7fc fa59 	bl	8007aee <USBH_LL_PortDisabled>
}
 800b63c:	bf00      	nop
 800b63e:	3708      	adds	r7, #8
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b652:	2b01      	cmp	r3, #1
 800b654:	d12a      	bne.n	800b6ac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b656:	4a18      	ldr	r2, [pc, #96]	; (800b6b8 <USBH_LL_Init+0x74>)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a15      	ldr	r2, [pc, #84]	; (800b6b8 <USBH_LL_Init+0x74>)
 800b662:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b666:	4b14      	ldr	r3, [pc, #80]	; (800b6b8 <USBH_LL_Init+0x74>)
 800b668:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b66c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b66e:	4b12      	ldr	r3, [pc, #72]	; (800b6b8 <USBH_LL_Init+0x74>)
 800b670:	2208      	movs	r2, #8
 800b672:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b674:	4b10      	ldr	r3, [pc, #64]	; (800b6b8 <USBH_LL_Init+0x74>)
 800b676:	2201      	movs	r2, #1
 800b678:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b67a:	4b0f      	ldr	r3, [pc, #60]	; (800b6b8 <USBH_LL_Init+0x74>)
 800b67c:	2200      	movs	r2, #0
 800b67e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b680:	4b0d      	ldr	r3, [pc, #52]	; (800b6b8 <USBH_LL_Init+0x74>)
 800b682:	2202      	movs	r2, #2
 800b684:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b686:	4b0c      	ldr	r3, [pc, #48]	; (800b6b8 <USBH_LL_Init+0x74>)
 800b688:	2200      	movs	r2, #0
 800b68a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b68c:	480a      	ldr	r0, [pc, #40]	; (800b6b8 <USBH_LL_Init+0x74>)
 800b68e:	f7f6 f856 	bl	800173e <HAL_HCD_Init>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b698:	f7f5 fb6a 	bl	8000d70 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b69c:	4806      	ldr	r0, [pc, #24]	; (800b6b8 <USBH_LL_Init+0x74>)
 800b69e:	f7f6 fc3a 	bl	8001f16 <HAL_HCD_GetCurrentFrame>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7fc f9da 	bl	8007a60 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	200045e0 	.word	0x200045e0

0800b6bc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7f6 fba9 	bl	8001e2a <HAL_HCD_Start>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f000 f98c 	bl	800b9fc <USBH_Get_USB_Status>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b084      	sub	sp, #16
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6fe:	2300      	movs	r3, #0
 800b700:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b708:	4618      	mov	r0, r3
 800b70a:	f7f6 fbb1 	bl	8001e70 <HAL_HCD_Stop>
 800b70e:	4603      	mov	r3, r0
 800b710:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b712:	7bfb      	ldrb	r3, [r7, #15]
 800b714:	4618      	mov	r0, r3
 800b716:	f000 f971 	bl	800b9fc <USBH_Get_USB_Status>
 800b71a:	4603      	mov	r3, r0
 800b71c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b71e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b730:	2301      	movs	r3, #1
 800b732:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7f6 fbf9 	bl	8001f32 <HAL_HCD_GetCurrentSpeed>
 800b740:	4603      	mov	r3, r0
 800b742:	2b02      	cmp	r3, #2
 800b744:	d00c      	beq.n	800b760 <USBH_LL_GetSpeed+0x38>
 800b746:	2b02      	cmp	r3, #2
 800b748:	d80d      	bhi.n	800b766 <USBH_LL_GetSpeed+0x3e>
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d002      	beq.n	800b754 <USBH_LL_GetSpeed+0x2c>
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d003      	beq.n	800b75a <USBH_LL_GetSpeed+0x32>
 800b752:	e008      	b.n	800b766 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b754:	2300      	movs	r3, #0
 800b756:	73fb      	strb	r3, [r7, #15]
    break;
 800b758:	e008      	b.n	800b76c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b75a:	2301      	movs	r3, #1
 800b75c:	73fb      	strb	r3, [r7, #15]
    break;
 800b75e:	e005      	b.n	800b76c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b760:	2302      	movs	r3, #2
 800b762:	73fb      	strb	r3, [r7, #15]
    break;
 800b764:	e002      	b.n	800b76c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b766:	2301      	movs	r3, #1
 800b768:	73fb      	strb	r3, [r7, #15]
    break;
 800b76a:	bf00      	nop
  }
  return  speed;
 800b76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b084      	sub	sp, #16
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b782:	2300      	movs	r3, #0
 800b784:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7f6 fb8c 	bl	8001eaa <HAL_HCD_ResetPort>
 800b792:	4603      	mov	r3, r0
 800b794:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b796:	7bfb      	ldrb	r3, [r7, #15]
 800b798:	4618      	mov	r0, r3
 800b79a:	f000 f92f 	bl	800b9fc <USBH_Get_USB_Status>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3710      	adds	r7, #16
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b7be:	78fa      	ldrb	r2, [r7, #3]
 800b7c0:	4611      	mov	r1, r2
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7f6 fb93 	bl	8001eee <HAL_HCD_HC_GetXferCount>
 800b7c8:	4603      	mov	r3, r0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3708      	adds	r7, #8
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b7d2:	b590      	push	{r4, r7, lr}
 800b7d4:	b089      	sub	sp, #36	; 0x24
 800b7d6:	af04      	add	r7, sp, #16
 800b7d8:	6078      	str	r0, [r7, #4]
 800b7da:	4608      	mov	r0, r1
 800b7dc:	4611      	mov	r1, r2
 800b7de:	461a      	mov	r2, r3
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	70fb      	strb	r3, [r7, #3]
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	70bb      	strb	r3, [r7, #2]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b7fa:	787c      	ldrb	r4, [r7, #1]
 800b7fc:	78ba      	ldrb	r2, [r7, #2]
 800b7fe:	78f9      	ldrb	r1, [r7, #3]
 800b800:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b802:	9302      	str	r3, [sp, #8]
 800b804:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b808:	9301      	str	r3, [sp, #4]
 800b80a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b80e:	9300      	str	r3, [sp, #0]
 800b810:	4623      	mov	r3, r4
 800b812:	f7f5 fff6 	bl	8001802 <HAL_HCD_HC_Init>
 800b816:	4603      	mov	r3, r0
 800b818:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b81a:	7bfb      	ldrb	r3, [r7, #15]
 800b81c:	4618      	mov	r0, r3
 800b81e:	f000 f8ed 	bl	800b9fc <USBH_Get_USB_Status>
 800b822:	4603      	mov	r3, r0
 800b824:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b826:	7bbb      	ldrb	r3, [r7, #14]
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3714      	adds	r7, #20
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd90      	pop	{r4, r7, pc}

0800b830 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	460b      	mov	r3, r1
 800b83a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b83c:	2300      	movs	r3, #0
 800b83e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b840:	2300      	movs	r3, #0
 800b842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b84a:	78fa      	ldrb	r2, [r7, #3]
 800b84c:	4611      	mov	r1, r2
 800b84e:	4618      	mov	r0, r3
 800b850:	f7f6 f866 	bl	8001920 <HAL_HCD_HC_Halt>
 800b854:	4603      	mov	r3, r0
 800b856:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b858:	7bfb      	ldrb	r3, [r7, #15]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f000 f8ce 	bl	800b9fc <USBH_Get_USB_Status>
 800b860:	4603      	mov	r3, r0
 800b862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b864:	7bbb      	ldrb	r3, [r7, #14]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3710      	adds	r7, #16
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b86e:	b590      	push	{r4, r7, lr}
 800b870:	b089      	sub	sp, #36	; 0x24
 800b872:	af04      	add	r7, sp, #16
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	4608      	mov	r0, r1
 800b878:	4611      	mov	r1, r2
 800b87a:	461a      	mov	r2, r3
 800b87c:	4603      	mov	r3, r0
 800b87e:	70fb      	strb	r3, [r7, #3]
 800b880:	460b      	mov	r3, r1
 800b882:	70bb      	strb	r3, [r7, #2]
 800b884:	4613      	mov	r3, r2
 800b886:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b888:	2300      	movs	r3, #0
 800b88a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b88c:	2300      	movs	r3, #0
 800b88e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b896:	787c      	ldrb	r4, [r7, #1]
 800b898:	78ba      	ldrb	r2, [r7, #2]
 800b89a:	78f9      	ldrb	r1, [r7, #3]
 800b89c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b8a0:	9303      	str	r3, [sp, #12]
 800b8a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b8a4:	9302      	str	r3, [sp, #8]
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a8:	9301      	str	r3, [sp, #4]
 800b8aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	4623      	mov	r3, r4
 800b8b2:	f7f6 f859 	bl	8001968 <HAL_HCD_HC_SubmitRequest>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b8ba:	7bfb      	ldrb	r3, [r7, #15]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f000 f89d 	bl	800b9fc <USBH_Get_USB_Status>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3714      	adds	r7, #20
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd90      	pop	{r4, r7, pc}

0800b8d0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	460b      	mov	r3, r1
 800b8da:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b8e2:	78fa      	ldrb	r2, [r7, #3]
 800b8e4:	4611      	mov	r1, r2
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7f6 faed 	bl	8001ec6 <HAL_HCD_HC_GetURBState>
 800b8ec:	4603      	mov	r3, r0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b082      	sub	sp, #8
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
 800b8fe:	460b      	mov	r3, r1
 800b900:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d103      	bne.n	800b914 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b90c:	78fb      	ldrb	r3, [r7, #3]
 800b90e:	4618      	mov	r0, r3
 800b910:	f000 f8a0 	bl	800ba54 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b914:	20c8      	movs	r0, #200	; 0xc8
 800b916:	f7f5 fc27 	bl	8001168 <HAL_Delay>
  return USBH_OK;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	460b      	mov	r3, r1
 800b92e:	70fb      	strb	r3, [r7, #3]
 800b930:	4613      	mov	r3, r2
 800b932:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b93a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b93c:	78fb      	ldrb	r3, [r7, #3]
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	212c      	movs	r1, #44	; 0x2c
 800b942:	fb01 f303 	mul.w	r3, r1, r3
 800b946:	4413      	add	r3, r2
 800b948:	333b      	adds	r3, #59	; 0x3b
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d009      	beq.n	800b964 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b950:	78fb      	ldrb	r3, [r7, #3]
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	212c      	movs	r1, #44	; 0x2c
 800b956:	fb01 f303 	mul.w	r3, r1, r3
 800b95a:	4413      	add	r3, r2
 800b95c:	3354      	adds	r3, #84	; 0x54
 800b95e:	78ba      	ldrb	r2, [r7, #2]
 800b960:	701a      	strb	r2, [r3, #0]
 800b962:	e008      	b.n	800b976 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b964:	78fb      	ldrb	r3, [r7, #3]
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	212c      	movs	r1, #44	; 0x2c
 800b96a:	fb01 f303 	mul.w	r3, r1, r3
 800b96e:	4413      	add	r3, r2
 800b970:	3355      	adds	r3, #85	; 0x55
 800b972:	78ba      	ldrb	r2, [r7, #2]
 800b974:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3714      	adds	r7, #20
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	460b      	mov	r3, r1
 800b98e:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b990:	2300      	movs	r3, #0
 800b992:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b99a:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b99c:	78fb      	ldrb	r3, [r7, #3]
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	212c      	movs	r1, #44	; 0x2c
 800b9a2:	fb01 f303 	mul.w	r3, r1, r3
 800b9a6:	4413      	add	r3, r2
 800b9a8:	333b      	adds	r3, #59	; 0x3b
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d009      	beq.n	800b9c4 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b9b0:	78fb      	ldrb	r3, [r7, #3]
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	212c      	movs	r1, #44	; 0x2c
 800b9b6:	fb01 f303 	mul.w	r3, r1, r3
 800b9ba:	4413      	add	r3, r2
 800b9bc:	3354      	adds	r3, #84	; 0x54
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	73fb      	strb	r3, [r7, #15]
 800b9c2:	e008      	b.n	800b9d6 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b9c4:	78fb      	ldrb	r3, [r7, #3]
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	212c      	movs	r1, #44	; 0x2c
 800b9ca:	fb01 f303 	mul.w	r3, r1, r3
 800b9ce:	4413      	add	r3, r2
 800b9d0:	3355      	adds	r3, #85	; 0x55
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3714      	adds	r7, #20
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f7f5 fbbb 	bl	8001168 <HAL_Delay>
}
 800b9f2:	bf00      	nop
 800b9f4:	3708      	adds	r7, #8
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
	...

0800b9fc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	4603      	mov	r3, r0
 800ba04:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba06:	2300      	movs	r3, #0
 800ba08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba0a:	79fb      	ldrb	r3, [r7, #7]
 800ba0c:	2b03      	cmp	r3, #3
 800ba0e:	d817      	bhi.n	800ba40 <USBH_Get_USB_Status+0x44>
 800ba10:	a201      	add	r2, pc, #4	; (adr r2, 800ba18 <USBH_Get_USB_Status+0x1c>)
 800ba12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba16:	bf00      	nop
 800ba18:	0800ba29 	.word	0x0800ba29
 800ba1c:	0800ba2f 	.word	0x0800ba2f
 800ba20:	0800ba35 	.word	0x0800ba35
 800ba24:	0800ba3b 	.word	0x0800ba3b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba2c:	e00b      	b.n	800ba46 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ba2e:	2302      	movs	r3, #2
 800ba30:	73fb      	strb	r3, [r7, #15]
    break;
 800ba32:	e008      	b.n	800ba46 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ba34:	2301      	movs	r3, #1
 800ba36:	73fb      	strb	r3, [r7, #15]
    break;
 800ba38:	e005      	b.n	800ba46 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ba3a:	2302      	movs	r3, #2
 800ba3c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba3e:	e002      	b.n	800ba46 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ba40:	2302      	movs	r3, #2
 800ba42:	73fb      	strb	r3, [r7, #15]
    break;
 800ba44:	bf00      	nop
  }
  return usb_status;
 800ba46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3714      	adds	r7, #20
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ba5e:	79fb      	ldrb	r3, [r7, #7]
 800ba60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ba62:	79fb      	ldrb	r3, [r7, #7]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d102      	bne.n	800ba6e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	73fb      	strb	r3, [r7, #15]
 800ba6c:	e001      	b.n	800ba72 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,(GPIO_PinState)data);
 800ba72:	7bfb      	ldrb	r3, [r7, #15]
 800ba74:	461a      	mov	r2, r3
 800ba76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ba7a:	4803      	ldr	r0, [pc, #12]	; (800ba88 <MX_DriverVbusFS+0x34>)
 800ba7c:	f7f5 fe46 	bl	800170c <HAL_GPIO_WritePin>
}
 800ba80:	bf00      	nop
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	40020400 	.word	0x40020400

0800ba8c <__errno>:
 800ba8c:	4b01      	ldr	r3, [pc, #4]	; (800ba94 <__errno+0x8>)
 800ba8e:	6818      	ldr	r0, [r3, #0]
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	2000002c 	.word	0x2000002c

0800ba98 <__libc_init_array>:
 800ba98:	b570      	push	{r4, r5, r6, lr}
 800ba9a:	4d0d      	ldr	r5, [pc, #52]	; (800bad0 <__libc_init_array+0x38>)
 800ba9c:	4c0d      	ldr	r4, [pc, #52]	; (800bad4 <__libc_init_array+0x3c>)
 800ba9e:	1b64      	subs	r4, r4, r5
 800baa0:	10a4      	asrs	r4, r4, #2
 800baa2:	2600      	movs	r6, #0
 800baa4:	42a6      	cmp	r6, r4
 800baa6:	d109      	bne.n	800babc <__libc_init_array+0x24>
 800baa8:	4d0b      	ldr	r5, [pc, #44]	; (800bad8 <__libc_init_array+0x40>)
 800baaa:	4c0c      	ldr	r4, [pc, #48]	; (800badc <__libc_init_array+0x44>)
 800baac:	f001 f868 	bl	800cb80 <_init>
 800bab0:	1b64      	subs	r4, r4, r5
 800bab2:	10a4      	asrs	r4, r4, #2
 800bab4:	2600      	movs	r6, #0
 800bab6:	42a6      	cmp	r6, r4
 800bab8:	d105      	bne.n	800bac6 <__libc_init_array+0x2e>
 800baba:	bd70      	pop	{r4, r5, r6, pc}
 800babc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bac0:	4798      	blx	r3
 800bac2:	3601      	adds	r6, #1
 800bac4:	e7ee      	b.n	800baa4 <__libc_init_array+0xc>
 800bac6:	f855 3b04 	ldr.w	r3, [r5], #4
 800baca:	4798      	blx	r3
 800bacc:	3601      	adds	r6, #1
 800bace:	e7f2      	b.n	800bab6 <__libc_init_array+0x1e>
 800bad0:	0800d420 	.word	0x0800d420
 800bad4:	0800d420 	.word	0x0800d420
 800bad8:	0800d420 	.word	0x0800d420
 800badc:	0800d424 	.word	0x0800d424

0800bae0 <malloc>:
 800bae0:	4b02      	ldr	r3, [pc, #8]	; (800baec <malloc+0xc>)
 800bae2:	4601      	mov	r1, r0
 800bae4:	6818      	ldr	r0, [r3, #0]
 800bae6:	f000 b871 	b.w	800bbcc <_malloc_r>
 800baea:	bf00      	nop
 800baec:	2000002c 	.word	0x2000002c

0800baf0 <free>:
 800baf0:	4b02      	ldr	r3, [pc, #8]	; (800bafc <free+0xc>)
 800baf2:	4601      	mov	r1, r0
 800baf4:	6818      	ldr	r0, [r3, #0]
 800baf6:	f000 b819 	b.w	800bb2c <_free_r>
 800bafa:	bf00      	nop
 800bafc:	2000002c 	.word	0x2000002c

0800bb00 <memcpy>:
 800bb00:	440a      	add	r2, r1
 800bb02:	4291      	cmp	r1, r2
 800bb04:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb08:	d100      	bne.n	800bb0c <memcpy+0xc>
 800bb0a:	4770      	bx	lr
 800bb0c:	b510      	push	{r4, lr}
 800bb0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb16:	4291      	cmp	r1, r2
 800bb18:	d1f9      	bne.n	800bb0e <memcpy+0xe>
 800bb1a:	bd10      	pop	{r4, pc}

0800bb1c <memset>:
 800bb1c:	4402      	add	r2, r0
 800bb1e:	4603      	mov	r3, r0
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d100      	bne.n	800bb26 <memset+0xa>
 800bb24:	4770      	bx	lr
 800bb26:	f803 1b01 	strb.w	r1, [r3], #1
 800bb2a:	e7f9      	b.n	800bb20 <memset+0x4>

0800bb2c <_free_r>:
 800bb2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb2e:	2900      	cmp	r1, #0
 800bb30:	d048      	beq.n	800bbc4 <_free_r+0x98>
 800bb32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb36:	9001      	str	r0, [sp, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f1a1 0404 	sub.w	r4, r1, #4
 800bb3e:	bfb8      	it	lt
 800bb40:	18e4      	addlt	r4, r4, r3
 800bb42:	f000 fc2f 	bl	800c3a4 <__malloc_lock>
 800bb46:	4a20      	ldr	r2, [pc, #128]	; (800bbc8 <_free_r+0x9c>)
 800bb48:	9801      	ldr	r0, [sp, #4]
 800bb4a:	6813      	ldr	r3, [r2, #0]
 800bb4c:	4615      	mov	r5, r2
 800bb4e:	b933      	cbnz	r3, 800bb5e <_free_r+0x32>
 800bb50:	6063      	str	r3, [r4, #4]
 800bb52:	6014      	str	r4, [r2, #0]
 800bb54:	b003      	add	sp, #12
 800bb56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb5a:	f000 bc29 	b.w	800c3b0 <__malloc_unlock>
 800bb5e:	42a3      	cmp	r3, r4
 800bb60:	d90b      	bls.n	800bb7a <_free_r+0x4e>
 800bb62:	6821      	ldr	r1, [r4, #0]
 800bb64:	1862      	adds	r2, r4, r1
 800bb66:	4293      	cmp	r3, r2
 800bb68:	bf04      	itt	eq
 800bb6a:	681a      	ldreq	r2, [r3, #0]
 800bb6c:	685b      	ldreq	r3, [r3, #4]
 800bb6e:	6063      	str	r3, [r4, #4]
 800bb70:	bf04      	itt	eq
 800bb72:	1852      	addeq	r2, r2, r1
 800bb74:	6022      	streq	r2, [r4, #0]
 800bb76:	602c      	str	r4, [r5, #0]
 800bb78:	e7ec      	b.n	800bb54 <_free_r+0x28>
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	b10b      	cbz	r3, 800bb84 <_free_r+0x58>
 800bb80:	42a3      	cmp	r3, r4
 800bb82:	d9fa      	bls.n	800bb7a <_free_r+0x4e>
 800bb84:	6811      	ldr	r1, [r2, #0]
 800bb86:	1855      	adds	r5, r2, r1
 800bb88:	42a5      	cmp	r5, r4
 800bb8a:	d10b      	bne.n	800bba4 <_free_r+0x78>
 800bb8c:	6824      	ldr	r4, [r4, #0]
 800bb8e:	4421      	add	r1, r4
 800bb90:	1854      	adds	r4, r2, r1
 800bb92:	42a3      	cmp	r3, r4
 800bb94:	6011      	str	r1, [r2, #0]
 800bb96:	d1dd      	bne.n	800bb54 <_free_r+0x28>
 800bb98:	681c      	ldr	r4, [r3, #0]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	6053      	str	r3, [r2, #4]
 800bb9e:	4421      	add	r1, r4
 800bba0:	6011      	str	r1, [r2, #0]
 800bba2:	e7d7      	b.n	800bb54 <_free_r+0x28>
 800bba4:	d902      	bls.n	800bbac <_free_r+0x80>
 800bba6:	230c      	movs	r3, #12
 800bba8:	6003      	str	r3, [r0, #0]
 800bbaa:	e7d3      	b.n	800bb54 <_free_r+0x28>
 800bbac:	6825      	ldr	r5, [r4, #0]
 800bbae:	1961      	adds	r1, r4, r5
 800bbb0:	428b      	cmp	r3, r1
 800bbb2:	bf04      	itt	eq
 800bbb4:	6819      	ldreq	r1, [r3, #0]
 800bbb6:	685b      	ldreq	r3, [r3, #4]
 800bbb8:	6063      	str	r3, [r4, #4]
 800bbba:	bf04      	itt	eq
 800bbbc:	1949      	addeq	r1, r1, r5
 800bbbe:	6021      	streq	r1, [r4, #0]
 800bbc0:	6054      	str	r4, [r2, #4]
 800bbc2:	e7c7      	b.n	800bb54 <_free_r+0x28>
 800bbc4:	b003      	add	sp, #12
 800bbc6:	bd30      	pop	{r4, r5, pc}
 800bbc8:	200000e8 	.word	0x200000e8

0800bbcc <_malloc_r>:
 800bbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbce:	1ccd      	adds	r5, r1, #3
 800bbd0:	f025 0503 	bic.w	r5, r5, #3
 800bbd4:	3508      	adds	r5, #8
 800bbd6:	2d0c      	cmp	r5, #12
 800bbd8:	bf38      	it	cc
 800bbda:	250c      	movcc	r5, #12
 800bbdc:	2d00      	cmp	r5, #0
 800bbde:	4606      	mov	r6, r0
 800bbe0:	db01      	blt.n	800bbe6 <_malloc_r+0x1a>
 800bbe2:	42a9      	cmp	r1, r5
 800bbe4:	d903      	bls.n	800bbee <_malloc_r+0x22>
 800bbe6:	230c      	movs	r3, #12
 800bbe8:	6033      	str	r3, [r6, #0]
 800bbea:	2000      	movs	r0, #0
 800bbec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbee:	f000 fbd9 	bl	800c3a4 <__malloc_lock>
 800bbf2:	4921      	ldr	r1, [pc, #132]	; (800bc78 <_malloc_r+0xac>)
 800bbf4:	680a      	ldr	r2, [r1, #0]
 800bbf6:	4614      	mov	r4, r2
 800bbf8:	b99c      	cbnz	r4, 800bc22 <_malloc_r+0x56>
 800bbfa:	4f20      	ldr	r7, [pc, #128]	; (800bc7c <_malloc_r+0xb0>)
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	b923      	cbnz	r3, 800bc0a <_malloc_r+0x3e>
 800bc00:	4621      	mov	r1, r4
 800bc02:	4630      	mov	r0, r6
 800bc04:	f000 f8e0 	bl	800bdc8 <_sbrk_r>
 800bc08:	6038      	str	r0, [r7, #0]
 800bc0a:	4629      	mov	r1, r5
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	f000 f8db 	bl	800bdc8 <_sbrk_r>
 800bc12:	1c43      	adds	r3, r0, #1
 800bc14:	d123      	bne.n	800bc5e <_malloc_r+0x92>
 800bc16:	230c      	movs	r3, #12
 800bc18:	6033      	str	r3, [r6, #0]
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	f000 fbc8 	bl	800c3b0 <__malloc_unlock>
 800bc20:	e7e3      	b.n	800bbea <_malloc_r+0x1e>
 800bc22:	6823      	ldr	r3, [r4, #0]
 800bc24:	1b5b      	subs	r3, r3, r5
 800bc26:	d417      	bmi.n	800bc58 <_malloc_r+0x8c>
 800bc28:	2b0b      	cmp	r3, #11
 800bc2a:	d903      	bls.n	800bc34 <_malloc_r+0x68>
 800bc2c:	6023      	str	r3, [r4, #0]
 800bc2e:	441c      	add	r4, r3
 800bc30:	6025      	str	r5, [r4, #0]
 800bc32:	e004      	b.n	800bc3e <_malloc_r+0x72>
 800bc34:	6863      	ldr	r3, [r4, #4]
 800bc36:	42a2      	cmp	r2, r4
 800bc38:	bf0c      	ite	eq
 800bc3a:	600b      	streq	r3, [r1, #0]
 800bc3c:	6053      	strne	r3, [r2, #4]
 800bc3e:	4630      	mov	r0, r6
 800bc40:	f000 fbb6 	bl	800c3b0 <__malloc_unlock>
 800bc44:	f104 000b 	add.w	r0, r4, #11
 800bc48:	1d23      	adds	r3, r4, #4
 800bc4a:	f020 0007 	bic.w	r0, r0, #7
 800bc4e:	1ac2      	subs	r2, r0, r3
 800bc50:	d0cc      	beq.n	800bbec <_malloc_r+0x20>
 800bc52:	1a1b      	subs	r3, r3, r0
 800bc54:	50a3      	str	r3, [r4, r2]
 800bc56:	e7c9      	b.n	800bbec <_malloc_r+0x20>
 800bc58:	4622      	mov	r2, r4
 800bc5a:	6864      	ldr	r4, [r4, #4]
 800bc5c:	e7cc      	b.n	800bbf8 <_malloc_r+0x2c>
 800bc5e:	1cc4      	adds	r4, r0, #3
 800bc60:	f024 0403 	bic.w	r4, r4, #3
 800bc64:	42a0      	cmp	r0, r4
 800bc66:	d0e3      	beq.n	800bc30 <_malloc_r+0x64>
 800bc68:	1a21      	subs	r1, r4, r0
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	f000 f8ac 	bl	800bdc8 <_sbrk_r>
 800bc70:	3001      	adds	r0, #1
 800bc72:	d1dd      	bne.n	800bc30 <_malloc_r+0x64>
 800bc74:	e7cf      	b.n	800bc16 <_malloc_r+0x4a>
 800bc76:	bf00      	nop
 800bc78:	200000e8 	.word	0x200000e8
 800bc7c:	200000ec 	.word	0x200000ec

0800bc80 <iprintf>:
 800bc80:	b40f      	push	{r0, r1, r2, r3}
 800bc82:	4b0a      	ldr	r3, [pc, #40]	; (800bcac <iprintf+0x2c>)
 800bc84:	b513      	push	{r0, r1, r4, lr}
 800bc86:	681c      	ldr	r4, [r3, #0]
 800bc88:	b124      	cbz	r4, 800bc94 <iprintf+0x14>
 800bc8a:	69a3      	ldr	r3, [r4, #24]
 800bc8c:	b913      	cbnz	r3, 800bc94 <iprintf+0x14>
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f000 fa84 	bl	800c19c <__sinit>
 800bc94:	ab05      	add	r3, sp, #20
 800bc96:	9a04      	ldr	r2, [sp, #16]
 800bc98:	68a1      	ldr	r1, [r4, #8]
 800bc9a:	9301      	str	r3, [sp, #4]
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	f000 fbb7 	bl	800c410 <_vfiprintf_r>
 800bca2:	b002      	add	sp, #8
 800bca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bca8:	b004      	add	sp, #16
 800bcaa:	4770      	bx	lr
 800bcac:	2000002c 	.word	0x2000002c

0800bcb0 <putchar>:
 800bcb0:	4b09      	ldr	r3, [pc, #36]	; (800bcd8 <putchar+0x28>)
 800bcb2:	b513      	push	{r0, r1, r4, lr}
 800bcb4:	681c      	ldr	r4, [r3, #0]
 800bcb6:	4601      	mov	r1, r0
 800bcb8:	b134      	cbz	r4, 800bcc8 <putchar+0x18>
 800bcba:	69a3      	ldr	r3, [r4, #24]
 800bcbc:	b923      	cbnz	r3, 800bcc8 <putchar+0x18>
 800bcbe:	9001      	str	r0, [sp, #4]
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f000 fa6b 	bl	800c19c <__sinit>
 800bcc6:	9901      	ldr	r1, [sp, #4]
 800bcc8:	68a2      	ldr	r2, [r4, #8]
 800bcca:	4620      	mov	r0, r4
 800bccc:	b002      	add	sp, #8
 800bcce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcd2:	f000 be61 	b.w	800c998 <_putc_r>
 800bcd6:	bf00      	nop
 800bcd8:	2000002c 	.word	0x2000002c

0800bcdc <_puts_r>:
 800bcdc:	b570      	push	{r4, r5, r6, lr}
 800bcde:	460e      	mov	r6, r1
 800bce0:	4605      	mov	r5, r0
 800bce2:	b118      	cbz	r0, 800bcec <_puts_r+0x10>
 800bce4:	6983      	ldr	r3, [r0, #24]
 800bce6:	b90b      	cbnz	r3, 800bcec <_puts_r+0x10>
 800bce8:	f000 fa58 	bl	800c19c <__sinit>
 800bcec:	69ab      	ldr	r3, [r5, #24]
 800bcee:	68ac      	ldr	r4, [r5, #8]
 800bcf0:	b913      	cbnz	r3, 800bcf8 <_puts_r+0x1c>
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	f000 fa52 	bl	800c19c <__sinit>
 800bcf8:	4b2c      	ldr	r3, [pc, #176]	; (800bdac <_puts_r+0xd0>)
 800bcfa:	429c      	cmp	r4, r3
 800bcfc:	d120      	bne.n	800bd40 <_puts_r+0x64>
 800bcfe:	686c      	ldr	r4, [r5, #4]
 800bd00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd02:	07db      	lsls	r3, r3, #31
 800bd04:	d405      	bmi.n	800bd12 <_puts_r+0x36>
 800bd06:	89a3      	ldrh	r3, [r4, #12]
 800bd08:	0598      	lsls	r0, r3, #22
 800bd0a:	d402      	bmi.n	800bd12 <_puts_r+0x36>
 800bd0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd0e:	f000 fae3 	bl	800c2d8 <__retarget_lock_acquire_recursive>
 800bd12:	89a3      	ldrh	r3, [r4, #12]
 800bd14:	0719      	lsls	r1, r3, #28
 800bd16:	d51d      	bpl.n	800bd54 <_puts_r+0x78>
 800bd18:	6923      	ldr	r3, [r4, #16]
 800bd1a:	b1db      	cbz	r3, 800bd54 <_puts_r+0x78>
 800bd1c:	3e01      	subs	r6, #1
 800bd1e:	68a3      	ldr	r3, [r4, #8]
 800bd20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd24:	3b01      	subs	r3, #1
 800bd26:	60a3      	str	r3, [r4, #8]
 800bd28:	bb39      	cbnz	r1, 800bd7a <_puts_r+0x9e>
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	da38      	bge.n	800bda0 <_puts_r+0xc4>
 800bd2e:	4622      	mov	r2, r4
 800bd30:	210a      	movs	r1, #10
 800bd32:	4628      	mov	r0, r5
 800bd34:	f000 f858 	bl	800bde8 <__swbuf_r>
 800bd38:	3001      	adds	r0, #1
 800bd3a:	d011      	beq.n	800bd60 <_puts_r+0x84>
 800bd3c:	250a      	movs	r5, #10
 800bd3e:	e011      	b.n	800bd64 <_puts_r+0x88>
 800bd40:	4b1b      	ldr	r3, [pc, #108]	; (800bdb0 <_puts_r+0xd4>)
 800bd42:	429c      	cmp	r4, r3
 800bd44:	d101      	bne.n	800bd4a <_puts_r+0x6e>
 800bd46:	68ac      	ldr	r4, [r5, #8]
 800bd48:	e7da      	b.n	800bd00 <_puts_r+0x24>
 800bd4a:	4b1a      	ldr	r3, [pc, #104]	; (800bdb4 <_puts_r+0xd8>)
 800bd4c:	429c      	cmp	r4, r3
 800bd4e:	bf08      	it	eq
 800bd50:	68ec      	ldreq	r4, [r5, #12]
 800bd52:	e7d5      	b.n	800bd00 <_puts_r+0x24>
 800bd54:	4621      	mov	r1, r4
 800bd56:	4628      	mov	r0, r5
 800bd58:	f000 f898 	bl	800be8c <__swsetup_r>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d0dd      	beq.n	800bd1c <_puts_r+0x40>
 800bd60:	f04f 35ff 	mov.w	r5, #4294967295
 800bd64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd66:	07da      	lsls	r2, r3, #31
 800bd68:	d405      	bmi.n	800bd76 <_puts_r+0x9a>
 800bd6a:	89a3      	ldrh	r3, [r4, #12]
 800bd6c:	059b      	lsls	r3, r3, #22
 800bd6e:	d402      	bmi.n	800bd76 <_puts_r+0x9a>
 800bd70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd72:	f000 fab2 	bl	800c2da <__retarget_lock_release_recursive>
 800bd76:	4628      	mov	r0, r5
 800bd78:	bd70      	pop	{r4, r5, r6, pc}
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	da04      	bge.n	800bd88 <_puts_r+0xac>
 800bd7e:	69a2      	ldr	r2, [r4, #24]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	dc06      	bgt.n	800bd92 <_puts_r+0xb6>
 800bd84:	290a      	cmp	r1, #10
 800bd86:	d004      	beq.n	800bd92 <_puts_r+0xb6>
 800bd88:	6823      	ldr	r3, [r4, #0]
 800bd8a:	1c5a      	adds	r2, r3, #1
 800bd8c:	6022      	str	r2, [r4, #0]
 800bd8e:	7019      	strb	r1, [r3, #0]
 800bd90:	e7c5      	b.n	800bd1e <_puts_r+0x42>
 800bd92:	4622      	mov	r2, r4
 800bd94:	4628      	mov	r0, r5
 800bd96:	f000 f827 	bl	800bde8 <__swbuf_r>
 800bd9a:	3001      	adds	r0, #1
 800bd9c:	d1bf      	bne.n	800bd1e <_puts_r+0x42>
 800bd9e:	e7df      	b.n	800bd60 <_puts_r+0x84>
 800bda0:	6823      	ldr	r3, [r4, #0]
 800bda2:	250a      	movs	r5, #10
 800bda4:	1c5a      	adds	r2, r3, #1
 800bda6:	6022      	str	r2, [r4, #0]
 800bda8:	701d      	strb	r5, [r3, #0]
 800bdaa:	e7db      	b.n	800bd64 <_puts_r+0x88>
 800bdac:	0800d3a4 	.word	0x0800d3a4
 800bdb0:	0800d3c4 	.word	0x0800d3c4
 800bdb4:	0800d384 	.word	0x0800d384

0800bdb8 <puts>:
 800bdb8:	4b02      	ldr	r3, [pc, #8]	; (800bdc4 <puts+0xc>)
 800bdba:	4601      	mov	r1, r0
 800bdbc:	6818      	ldr	r0, [r3, #0]
 800bdbe:	f7ff bf8d 	b.w	800bcdc <_puts_r>
 800bdc2:	bf00      	nop
 800bdc4:	2000002c 	.word	0x2000002c

0800bdc8 <_sbrk_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4d06      	ldr	r5, [pc, #24]	; (800bde4 <_sbrk_r+0x1c>)
 800bdcc:	2300      	movs	r3, #0
 800bdce:	4604      	mov	r4, r0
 800bdd0:	4608      	mov	r0, r1
 800bdd2:	602b      	str	r3, [r5, #0]
 800bdd4:	f7f5 f8e4 	bl	8000fa0 <_sbrk>
 800bdd8:	1c43      	adds	r3, r0, #1
 800bdda:	d102      	bne.n	800bde2 <_sbrk_r+0x1a>
 800bddc:	682b      	ldr	r3, [r5, #0]
 800bdde:	b103      	cbz	r3, 800bde2 <_sbrk_r+0x1a>
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	bd38      	pop	{r3, r4, r5, pc}
 800bde4:	200048f0 	.word	0x200048f0

0800bde8 <__swbuf_r>:
 800bde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdea:	460e      	mov	r6, r1
 800bdec:	4614      	mov	r4, r2
 800bdee:	4605      	mov	r5, r0
 800bdf0:	b118      	cbz	r0, 800bdfa <__swbuf_r+0x12>
 800bdf2:	6983      	ldr	r3, [r0, #24]
 800bdf4:	b90b      	cbnz	r3, 800bdfa <__swbuf_r+0x12>
 800bdf6:	f000 f9d1 	bl	800c19c <__sinit>
 800bdfa:	4b21      	ldr	r3, [pc, #132]	; (800be80 <__swbuf_r+0x98>)
 800bdfc:	429c      	cmp	r4, r3
 800bdfe:	d12b      	bne.n	800be58 <__swbuf_r+0x70>
 800be00:	686c      	ldr	r4, [r5, #4]
 800be02:	69a3      	ldr	r3, [r4, #24]
 800be04:	60a3      	str	r3, [r4, #8]
 800be06:	89a3      	ldrh	r3, [r4, #12]
 800be08:	071a      	lsls	r2, r3, #28
 800be0a:	d52f      	bpl.n	800be6c <__swbuf_r+0x84>
 800be0c:	6923      	ldr	r3, [r4, #16]
 800be0e:	b36b      	cbz	r3, 800be6c <__swbuf_r+0x84>
 800be10:	6923      	ldr	r3, [r4, #16]
 800be12:	6820      	ldr	r0, [r4, #0]
 800be14:	1ac0      	subs	r0, r0, r3
 800be16:	6963      	ldr	r3, [r4, #20]
 800be18:	b2f6      	uxtb	r6, r6
 800be1a:	4283      	cmp	r3, r0
 800be1c:	4637      	mov	r7, r6
 800be1e:	dc04      	bgt.n	800be2a <__swbuf_r+0x42>
 800be20:	4621      	mov	r1, r4
 800be22:	4628      	mov	r0, r5
 800be24:	f000 f926 	bl	800c074 <_fflush_r>
 800be28:	bb30      	cbnz	r0, 800be78 <__swbuf_r+0x90>
 800be2a:	68a3      	ldr	r3, [r4, #8]
 800be2c:	3b01      	subs	r3, #1
 800be2e:	60a3      	str	r3, [r4, #8]
 800be30:	6823      	ldr	r3, [r4, #0]
 800be32:	1c5a      	adds	r2, r3, #1
 800be34:	6022      	str	r2, [r4, #0]
 800be36:	701e      	strb	r6, [r3, #0]
 800be38:	6963      	ldr	r3, [r4, #20]
 800be3a:	3001      	adds	r0, #1
 800be3c:	4283      	cmp	r3, r0
 800be3e:	d004      	beq.n	800be4a <__swbuf_r+0x62>
 800be40:	89a3      	ldrh	r3, [r4, #12]
 800be42:	07db      	lsls	r3, r3, #31
 800be44:	d506      	bpl.n	800be54 <__swbuf_r+0x6c>
 800be46:	2e0a      	cmp	r6, #10
 800be48:	d104      	bne.n	800be54 <__swbuf_r+0x6c>
 800be4a:	4621      	mov	r1, r4
 800be4c:	4628      	mov	r0, r5
 800be4e:	f000 f911 	bl	800c074 <_fflush_r>
 800be52:	b988      	cbnz	r0, 800be78 <__swbuf_r+0x90>
 800be54:	4638      	mov	r0, r7
 800be56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be58:	4b0a      	ldr	r3, [pc, #40]	; (800be84 <__swbuf_r+0x9c>)
 800be5a:	429c      	cmp	r4, r3
 800be5c:	d101      	bne.n	800be62 <__swbuf_r+0x7a>
 800be5e:	68ac      	ldr	r4, [r5, #8]
 800be60:	e7cf      	b.n	800be02 <__swbuf_r+0x1a>
 800be62:	4b09      	ldr	r3, [pc, #36]	; (800be88 <__swbuf_r+0xa0>)
 800be64:	429c      	cmp	r4, r3
 800be66:	bf08      	it	eq
 800be68:	68ec      	ldreq	r4, [r5, #12]
 800be6a:	e7ca      	b.n	800be02 <__swbuf_r+0x1a>
 800be6c:	4621      	mov	r1, r4
 800be6e:	4628      	mov	r0, r5
 800be70:	f000 f80c 	bl	800be8c <__swsetup_r>
 800be74:	2800      	cmp	r0, #0
 800be76:	d0cb      	beq.n	800be10 <__swbuf_r+0x28>
 800be78:	f04f 37ff 	mov.w	r7, #4294967295
 800be7c:	e7ea      	b.n	800be54 <__swbuf_r+0x6c>
 800be7e:	bf00      	nop
 800be80:	0800d3a4 	.word	0x0800d3a4
 800be84:	0800d3c4 	.word	0x0800d3c4
 800be88:	0800d384 	.word	0x0800d384

0800be8c <__swsetup_r>:
 800be8c:	4b32      	ldr	r3, [pc, #200]	; (800bf58 <__swsetup_r+0xcc>)
 800be8e:	b570      	push	{r4, r5, r6, lr}
 800be90:	681d      	ldr	r5, [r3, #0]
 800be92:	4606      	mov	r6, r0
 800be94:	460c      	mov	r4, r1
 800be96:	b125      	cbz	r5, 800bea2 <__swsetup_r+0x16>
 800be98:	69ab      	ldr	r3, [r5, #24]
 800be9a:	b913      	cbnz	r3, 800bea2 <__swsetup_r+0x16>
 800be9c:	4628      	mov	r0, r5
 800be9e:	f000 f97d 	bl	800c19c <__sinit>
 800bea2:	4b2e      	ldr	r3, [pc, #184]	; (800bf5c <__swsetup_r+0xd0>)
 800bea4:	429c      	cmp	r4, r3
 800bea6:	d10f      	bne.n	800bec8 <__swsetup_r+0x3c>
 800bea8:	686c      	ldr	r4, [r5, #4]
 800beaa:	89a3      	ldrh	r3, [r4, #12]
 800beac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800beb0:	0719      	lsls	r1, r3, #28
 800beb2:	d42c      	bmi.n	800bf0e <__swsetup_r+0x82>
 800beb4:	06dd      	lsls	r5, r3, #27
 800beb6:	d411      	bmi.n	800bedc <__swsetup_r+0x50>
 800beb8:	2309      	movs	r3, #9
 800beba:	6033      	str	r3, [r6, #0]
 800bebc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bec0:	81a3      	strh	r3, [r4, #12]
 800bec2:	f04f 30ff 	mov.w	r0, #4294967295
 800bec6:	e03e      	b.n	800bf46 <__swsetup_r+0xba>
 800bec8:	4b25      	ldr	r3, [pc, #148]	; (800bf60 <__swsetup_r+0xd4>)
 800beca:	429c      	cmp	r4, r3
 800becc:	d101      	bne.n	800bed2 <__swsetup_r+0x46>
 800bece:	68ac      	ldr	r4, [r5, #8]
 800bed0:	e7eb      	b.n	800beaa <__swsetup_r+0x1e>
 800bed2:	4b24      	ldr	r3, [pc, #144]	; (800bf64 <__swsetup_r+0xd8>)
 800bed4:	429c      	cmp	r4, r3
 800bed6:	bf08      	it	eq
 800bed8:	68ec      	ldreq	r4, [r5, #12]
 800beda:	e7e6      	b.n	800beaa <__swsetup_r+0x1e>
 800bedc:	0758      	lsls	r0, r3, #29
 800bede:	d512      	bpl.n	800bf06 <__swsetup_r+0x7a>
 800bee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bee2:	b141      	cbz	r1, 800bef6 <__swsetup_r+0x6a>
 800bee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bee8:	4299      	cmp	r1, r3
 800beea:	d002      	beq.n	800bef2 <__swsetup_r+0x66>
 800beec:	4630      	mov	r0, r6
 800beee:	f7ff fe1d 	bl	800bb2c <_free_r>
 800bef2:	2300      	movs	r3, #0
 800bef4:	6363      	str	r3, [r4, #52]	; 0x34
 800bef6:	89a3      	ldrh	r3, [r4, #12]
 800bef8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800befc:	81a3      	strh	r3, [r4, #12]
 800befe:	2300      	movs	r3, #0
 800bf00:	6063      	str	r3, [r4, #4]
 800bf02:	6923      	ldr	r3, [r4, #16]
 800bf04:	6023      	str	r3, [r4, #0]
 800bf06:	89a3      	ldrh	r3, [r4, #12]
 800bf08:	f043 0308 	orr.w	r3, r3, #8
 800bf0c:	81a3      	strh	r3, [r4, #12]
 800bf0e:	6923      	ldr	r3, [r4, #16]
 800bf10:	b94b      	cbnz	r3, 800bf26 <__swsetup_r+0x9a>
 800bf12:	89a3      	ldrh	r3, [r4, #12]
 800bf14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf1c:	d003      	beq.n	800bf26 <__swsetup_r+0x9a>
 800bf1e:	4621      	mov	r1, r4
 800bf20:	4630      	mov	r0, r6
 800bf22:	f000 f9ff 	bl	800c324 <__smakebuf_r>
 800bf26:	89a0      	ldrh	r0, [r4, #12]
 800bf28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf2c:	f010 0301 	ands.w	r3, r0, #1
 800bf30:	d00a      	beq.n	800bf48 <__swsetup_r+0xbc>
 800bf32:	2300      	movs	r3, #0
 800bf34:	60a3      	str	r3, [r4, #8]
 800bf36:	6963      	ldr	r3, [r4, #20]
 800bf38:	425b      	negs	r3, r3
 800bf3a:	61a3      	str	r3, [r4, #24]
 800bf3c:	6923      	ldr	r3, [r4, #16]
 800bf3e:	b943      	cbnz	r3, 800bf52 <__swsetup_r+0xc6>
 800bf40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf44:	d1ba      	bne.n	800bebc <__swsetup_r+0x30>
 800bf46:	bd70      	pop	{r4, r5, r6, pc}
 800bf48:	0781      	lsls	r1, r0, #30
 800bf4a:	bf58      	it	pl
 800bf4c:	6963      	ldrpl	r3, [r4, #20]
 800bf4e:	60a3      	str	r3, [r4, #8]
 800bf50:	e7f4      	b.n	800bf3c <__swsetup_r+0xb0>
 800bf52:	2000      	movs	r0, #0
 800bf54:	e7f7      	b.n	800bf46 <__swsetup_r+0xba>
 800bf56:	bf00      	nop
 800bf58:	2000002c 	.word	0x2000002c
 800bf5c:	0800d3a4 	.word	0x0800d3a4
 800bf60:	0800d3c4 	.word	0x0800d3c4
 800bf64:	0800d384 	.word	0x0800d384

0800bf68 <__sflush_r>:
 800bf68:	898a      	ldrh	r2, [r1, #12]
 800bf6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf6e:	4605      	mov	r5, r0
 800bf70:	0710      	lsls	r0, r2, #28
 800bf72:	460c      	mov	r4, r1
 800bf74:	d458      	bmi.n	800c028 <__sflush_r+0xc0>
 800bf76:	684b      	ldr	r3, [r1, #4]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	dc05      	bgt.n	800bf88 <__sflush_r+0x20>
 800bf7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	dc02      	bgt.n	800bf88 <__sflush_r+0x20>
 800bf82:	2000      	movs	r0, #0
 800bf84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf8a:	2e00      	cmp	r6, #0
 800bf8c:	d0f9      	beq.n	800bf82 <__sflush_r+0x1a>
 800bf8e:	2300      	movs	r3, #0
 800bf90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf94:	682f      	ldr	r7, [r5, #0]
 800bf96:	602b      	str	r3, [r5, #0]
 800bf98:	d032      	beq.n	800c000 <__sflush_r+0x98>
 800bf9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf9c:	89a3      	ldrh	r3, [r4, #12]
 800bf9e:	075a      	lsls	r2, r3, #29
 800bfa0:	d505      	bpl.n	800bfae <__sflush_r+0x46>
 800bfa2:	6863      	ldr	r3, [r4, #4]
 800bfa4:	1ac0      	subs	r0, r0, r3
 800bfa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfa8:	b10b      	cbz	r3, 800bfae <__sflush_r+0x46>
 800bfaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfac:	1ac0      	subs	r0, r0, r3
 800bfae:	2300      	movs	r3, #0
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfb4:	6a21      	ldr	r1, [r4, #32]
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	47b0      	blx	r6
 800bfba:	1c43      	adds	r3, r0, #1
 800bfbc:	89a3      	ldrh	r3, [r4, #12]
 800bfbe:	d106      	bne.n	800bfce <__sflush_r+0x66>
 800bfc0:	6829      	ldr	r1, [r5, #0]
 800bfc2:	291d      	cmp	r1, #29
 800bfc4:	d82c      	bhi.n	800c020 <__sflush_r+0xb8>
 800bfc6:	4a2a      	ldr	r2, [pc, #168]	; (800c070 <__sflush_r+0x108>)
 800bfc8:	40ca      	lsrs	r2, r1
 800bfca:	07d6      	lsls	r6, r2, #31
 800bfcc:	d528      	bpl.n	800c020 <__sflush_r+0xb8>
 800bfce:	2200      	movs	r2, #0
 800bfd0:	6062      	str	r2, [r4, #4]
 800bfd2:	04d9      	lsls	r1, r3, #19
 800bfd4:	6922      	ldr	r2, [r4, #16]
 800bfd6:	6022      	str	r2, [r4, #0]
 800bfd8:	d504      	bpl.n	800bfe4 <__sflush_r+0x7c>
 800bfda:	1c42      	adds	r2, r0, #1
 800bfdc:	d101      	bne.n	800bfe2 <__sflush_r+0x7a>
 800bfde:	682b      	ldr	r3, [r5, #0]
 800bfe0:	b903      	cbnz	r3, 800bfe4 <__sflush_r+0x7c>
 800bfe2:	6560      	str	r0, [r4, #84]	; 0x54
 800bfe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfe6:	602f      	str	r7, [r5, #0]
 800bfe8:	2900      	cmp	r1, #0
 800bfea:	d0ca      	beq.n	800bf82 <__sflush_r+0x1a>
 800bfec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bff0:	4299      	cmp	r1, r3
 800bff2:	d002      	beq.n	800bffa <__sflush_r+0x92>
 800bff4:	4628      	mov	r0, r5
 800bff6:	f7ff fd99 	bl	800bb2c <_free_r>
 800bffa:	2000      	movs	r0, #0
 800bffc:	6360      	str	r0, [r4, #52]	; 0x34
 800bffe:	e7c1      	b.n	800bf84 <__sflush_r+0x1c>
 800c000:	6a21      	ldr	r1, [r4, #32]
 800c002:	2301      	movs	r3, #1
 800c004:	4628      	mov	r0, r5
 800c006:	47b0      	blx	r6
 800c008:	1c41      	adds	r1, r0, #1
 800c00a:	d1c7      	bne.n	800bf9c <__sflush_r+0x34>
 800c00c:	682b      	ldr	r3, [r5, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d0c4      	beq.n	800bf9c <__sflush_r+0x34>
 800c012:	2b1d      	cmp	r3, #29
 800c014:	d001      	beq.n	800c01a <__sflush_r+0xb2>
 800c016:	2b16      	cmp	r3, #22
 800c018:	d101      	bne.n	800c01e <__sflush_r+0xb6>
 800c01a:	602f      	str	r7, [r5, #0]
 800c01c:	e7b1      	b.n	800bf82 <__sflush_r+0x1a>
 800c01e:	89a3      	ldrh	r3, [r4, #12]
 800c020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c024:	81a3      	strh	r3, [r4, #12]
 800c026:	e7ad      	b.n	800bf84 <__sflush_r+0x1c>
 800c028:	690f      	ldr	r7, [r1, #16]
 800c02a:	2f00      	cmp	r7, #0
 800c02c:	d0a9      	beq.n	800bf82 <__sflush_r+0x1a>
 800c02e:	0793      	lsls	r3, r2, #30
 800c030:	680e      	ldr	r6, [r1, #0]
 800c032:	bf08      	it	eq
 800c034:	694b      	ldreq	r3, [r1, #20]
 800c036:	600f      	str	r7, [r1, #0]
 800c038:	bf18      	it	ne
 800c03a:	2300      	movne	r3, #0
 800c03c:	eba6 0807 	sub.w	r8, r6, r7
 800c040:	608b      	str	r3, [r1, #8]
 800c042:	f1b8 0f00 	cmp.w	r8, #0
 800c046:	dd9c      	ble.n	800bf82 <__sflush_r+0x1a>
 800c048:	6a21      	ldr	r1, [r4, #32]
 800c04a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c04c:	4643      	mov	r3, r8
 800c04e:	463a      	mov	r2, r7
 800c050:	4628      	mov	r0, r5
 800c052:	47b0      	blx	r6
 800c054:	2800      	cmp	r0, #0
 800c056:	dc06      	bgt.n	800c066 <__sflush_r+0xfe>
 800c058:	89a3      	ldrh	r3, [r4, #12]
 800c05a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c05e:	81a3      	strh	r3, [r4, #12]
 800c060:	f04f 30ff 	mov.w	r0, #4294967295
 800c064:	e78e      	b.n	800bf84 <__sflush_r+0x1c>
 800c066:	4407      	add	r7, r0
 800c068:	eba8 0800 	sub.w	r8, r8, r0
 800c06c:	e7e9      	b.n	800c042 <__sflush_r+0xda>
 800c06e:	bf00      	nop
 800c070:	20400001 	.word	0x20400001

0800c074 <_fflush_r>:
 800c074:	b538      	push	{r3, r4, r5, lr}
 800c076:	690b      	ldr	r3, [r1, #16]
 800c078:	4605      	mov	r5, r0
 800c07a:	460c      	mov	r4, r1
 800c07c:	b913      	cbnz	r3, 800c084 <_fflush_r+0x10>
 800c07e:	2500      	movs	r5, #0
 800c080:	4628      	mov	r0, r5
 800c082:	bd38      	pop	{r3, r4, r5, pc}
 800c084:	b118      	cbz	r0, 800c08e <_fflush_r+0x1a>
 800c086:	6983      	ldr	r3, [r0, #24]
 800c088:	b90b      	cbnz	r3, 800c08e <_fflush_r+0x1a>
 800c08a:	f000 f887 	bl	800c19c <__sinit>
 800c08e:	4b14      	ldr	r3, [pc, #80]	; (800c0e0 <_fflush_r+0x6c>)
 800c090:	429c      	cmp	r4, r3
 800c092:	d11b      	bne.n	800c0cc <_fflush_r+0x58>
 800c094:	686c      	ldr	r4, [r5, #4]
 800c096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d0ef      	beq.n	800c07e <_fflush_r+0xa>
 800c09e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0a0:	07d0      	lsls	r0, r2, #31
 800c0a2:	d404      	bmi.n	800c0ae <_fflush_r+0x3a>
 800c0a4:	0599      	lsls	r1, r3, #22
 800c0a6:	d402      	bmi.n	800c0ae <_fflush_r+0x3a>
 800c0a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0aa:	f000 f915 	bl	800c2d8 <__retarget_lock_acquire_recursive>
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	4621      	mov	r1, r4
 800c0b2:	f7ff ff59 	bl	800bf68 <__sflush_r>
 800c0b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0b8:	07da      	lsls	r2, r3, #31
 800c0ba:	4605      	mov	r5, r0
 800c0bc:	d4e0      	bmi.n	800c080 <_fflush_r+0xc>
 800c0be:	89a3      	ldrh	r3, [r4, #12]
 800c0c0:	059b      	lsls	r3, r3, #22
 800c0c2:	d4dd      	bmi.n	800c080 <_fflush_r+0xc>
 800c0c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0c6:	f000 f908 	bl	800c2da <__retarget_lock_release_recursive>
 800c0ca:	e7d9      	b.n	800c080 <_fflush_r+0xc>
 800c0cc:	4b05      	ldr	r3, [pc, #20]	; (800c0e4 <_fflush_r+0x70>)
 800c0ce:	429c      	cmp	r4, r3
 800c0d0:	d101      	bne.n	800c0d6 <_fflush_r+0x62>
 800c0d2:	68ac      	ldr	r4, [r5, #8]
 800c0d4:	e7df      	b.n	800c096 <_fflush_r+0x22>
 800c0d6:	4b04      	ldr	r3, [pc, #16]	; (800c0e8 <_fflush_r+0x74>)
 800c0d8:	429c      	cmp	r4, r3
 800c0da:	bf08      	it	eq
 800c0dc:	68ec      	ldreq	r4, [r5, #12]
 800c0de:	e7da      	b.n	800c096 <_fflush_r+0x22>
 800c0e0:	0800d3a4 	.word	0x0800d3a4
 800c0e4:	0800d3c4 	.word	0x0800d3c4
 800c0e8:	0800d384 	.word	0x0800d384

0800c0ec <std>:
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	b510      	push	{r4, lr}
 800c0f0:	4604      	mov	r4, r0
 800c0f2:	e9c0 3300 	strd	r3, r3, [r0]
 800c0f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0fa:	6083      	str	r3, [r0, #8]
 800c0fc:	8181      	strh	r1, [r0, #12]
 800c0fe:	6643      	str	r3, [r0, #100]	; 0x64
 800c100:	81c2      	strh	r2, [r0, #14]
 800c102:	6183      	str	r3, [r0, #24]
 800c104:	4619      	mov	r1, r3
 800c106:	2208      	movs	r2, #8
 800c108:	305c      	adds	r0, #92	; 0x5c
 800c10a:	f7ff fd07 	bl	800bb1c <memset>
 800c10e:	4b05      	ldr	r3, [pc, #20]	; (800c124 <std+0x38>)
 800c110:	6263      	str	r3, [r4, #36]	; 0x24
 800c112:	4b05      	ldr	r3, [pc, #20]	; (800c128 <std+0x3c>)
 800c114:	62a3      	str	r3, [r4, #40]	; 0x28
 800c116:	4b05      	ldr	r3, [pc, #20]	; (800c12c <std+0x40>)
 800c118:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c11a:	4b05      	ldr	r3, [pc, #20]	; (800c130 <std+0x44>)
 800c11c:	6224      	str	r4, [r4, #32]
 800c11e:	6323      	str	r3, [r4, #48]	; 0x30
 800c120:	bd10      	pop	{r4, pc}
 800c122:	bf00      	nop
 800c124:	0800ca29 	.word	0x0800ca29
 800c128:	0800ca4b 	.word	0x0800ca4b
 800c12c:	0800ca83 	.word	0x0800ca83
 800c130:	0800caa7 	.word	0x0800caa7

0800c134 <_cleanup_r>:
 800c134:	4901      	ldr	r1, [pc, #4]	; (800c13c <_cleanup_r+0x8>)
 800c136:	f000 b8af 	b.w	800c298 <_fwalk_reent>
 800c13a:	bf00      	nop
 800c13c:	0800c075 	.word	0x0800c075

0800c140 <__sfmoreglue>:
 800c140:	b570      	push	{r4, r5, r6, lr}
 800c142:	1e4a      	subs	r2, r1, #1
 800c144:	2568      	movs	r5, #104	; 0x68
 800c146:	4355      	muls	r5, r2
 800c148:	460e      	mov	r6, r1
 800c14a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c14e:	f7ff fd3d 	bl	800bbcc <_malloc_r>
 800c152:	4604      	mov	r4, r0
 800c154:	b140      	cbz	r0, 800c168 <__sfmoreglue+0x28>
 800c156:	2100      	movs	r1, #0
 800c158:	e9c0 1600 	strd	r1, r6, [r0]
 800c15c:	300c      	adds	r0, #12
 800c15e:	60a0      	str	r0, [r4, #8]
 800c160:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c164:	f7ff fcda 	bl	800bb1c <memset>
 800c168:	4620      	mov	r0, r4
 800c16a:	bd70      	pop	{r4, r5, r6, pc}

0800c16c <__sfp_lock_acquire>:
 800c16c:	4801      	ldr	r0, [pc, #4]	; (800c174 <__sfp_lock_acquire+0x8>)
 800c16e:	f000 b8b3 	b.w	800c2d8 <__retarget_lock_acquire_recursive>
 800c172:	bf00      	nop
 800c174:	200048ec 	.word	0x200048ec

0800c178 <__sfp_lock_release>:
 800c178:	4801      	ldr	r0, [pc, #4]	; (800c180 <__sfp_lock_release+0x8>)
 800c17a:	f000 b8ae 	b.w	800c2da <__retarget_lock_release_recursive>
 800c17e:	bf00      	nop
 800c180:	200048ec 	.word	0x200048ec

0800c184 <__sinit_lock_acquire>:
 800c184:	4801      	ldr	r0, [pc, #4]	; (800c18c <__sinit_lock_acquire+0x8>)
 800c186:	f000 b8a7 	b.w	800c2d8 <__retarget_lock_acquire_recursive>
 800c18a:	bf00      	nop
 800c18c:	200048e7 	.word	0x200048e7

0800c190 <__sinit_lock_release>:
 800c190:	4801      	ldr	r0, [pc, #4]	; (800c198 <__sinit_lock_release+0x8>)
 800c192:	f000 b8a2 	b.w	800c2da <__retarget_lock_release_recursive>
 800c196:	bf00      	nop
 800c198:	200048e7 	.word	0x200048e7

0800c19c <__sinit>:
 800c19c:	b510      	push	{r4, lr}
 800c19e:	4604      	mov	r4, r0
 800c1a0:	f7ff fff0 	bl	800c184 <__sinit_lock_acquire>
 800c1a4:	69a3      	ldr	r3, [r4, #24]
 800c1a6:	b11b      	cbz	r3, 800c1b0 <__sinit+0x14>
 800c1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1ac:	f7ff bff0 	b.w	800c190 <__sinit_lock_release>
 800c1b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c1b4:	6523      	str	r3, [r4, #80]	; 0x50
 800c1b6:	4b13      	ldr	r3, [pc, #76]	; (800c204 <__sinit+0x68>)
 800c1b8:	4a13      	ldr	r2, [pc, #76]	; (800c208 <__sinit+0x6c>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800c1be:	42a3      	cmp	r3, r4
 800c1c0:	bf04      	itt	eq
 800c1c2:	2301      	moveq	r3, #1
 800c1c4:	61a3      	streq	r3, [r4, #24]
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f000 f820 	bl	800c20c <__sfp>
 800c1cc:	6060      	str	r0, [r4, #4]
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f000 f81c 	bl	800c20c <__sfp>
 800c1d4:	60a0      	str	r0, [r4, #8]
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f000 f818 	bl	800c20c <__sfp>
 800c1dc:	2200      	movs	r2, #0
 800c1de:	60e0      	str	r0, [r4, #12]
 800c1e0:	2104      	movs	r1, #4
 800c1e2:	6860      	ldr	r0, [r4, #4]
 800c1e4:	f7ff ff82 	bl	800c0ec <std>
 800c1e8:	68a0      	ldr	r0, [r4, #8]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	2109      	movs	r1, #9
 800c1ee:	f7ff ff7d 	bl	800c0ec <std>
 800c1f2:	68e0      	ldr	r0, [r4, #12]
 800c1f4:	2202      	movs	r2, #2
 800c1f6:	2112      	movs	r1, #18
 800c1f8:	f7ff ff78 	bl	800c0ec <std>
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	61a3      	str	r3, [r4, #24]
 800c200:	e7d2      	b.n	800c1a8 <__sinit+0xc>
 800c202:	bf00      	nop
 800c204:	0800d380 	.word	0x0800d380
 800c208:	0800c135 	.word	0x0800c135

0800c20c <__sfp>:
 800c20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c20e:	4607      	mov	r7, r0
 800c210:	f7ff ffac 	bl	800c16c <__sfp_lock_acquire>
 800c214:	4b1e      	ldr	r3, [pc, #120]	; (800c290 <__sfp+0x84>)
 800c216:	681e      	ldr	r6, [r3, #0]
 800c218:	69b3      	ldr	r3, [r6, #24]
 800c21a:	b913      	cbnz	r3, 800c222 <__sfp+0x16>
 800c21c:	4630      	mov	r0, r6
 800c21e:	f7ff ffbd 	bl	800c19c <__sinit>
 800c222:	3648      	adds	r6, #72	; 0x48
 800c224:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c228:	3b01      	subs	r3, #1
 800c22a:	d503      	bpl.n	800c234 <__sfp+0x28>
 800c22c:	6833      	ldr	r3, [r6, #0]
 800c22e:	b30b      	cbz	r3, 800c274 <__sfp+0x68>
 800c230:	6836      	ldr	r6, [r6, #0]
 800c232:	e7f7      	b.n	800c224 <__sfp+0x18>
 800c234:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c238:	b9d5      	cbnz	r5, 800c270 <__sfp+0x64>
 800c23a:	4b16      	ldr	r3, [pc, #88]	; (800c294 <__sfp+0x88>)
 800c23c:	60e3      	str	r3, [r4, #12]
 800c23e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c242:	6665      	str	r5, [r4, #100]	; 0x64
 800c244:	f000 f847 	bl	800c2d6 <__retarget_lock_init_recursive>
 800c248:	f7ff ff96 	bl	800c178 <__sfp_lock_release>
 800c24c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c250:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c254:	6025      	str	r5, [r4, #0]
 800c256:	61a5      	str	r5, [r4, #24]
 800c258:	2208      	movs	r2, #8
 800c25a:	4629      	mov	r1, r5
 800c25c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c260:	f7ff fc5c 	bl	800bb1c <memset>
 800c264:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c268:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c26c:	4620      	mov	r0, r4
 800c26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c270:	3468      	adds	r4, #104	; 0x68
 800c272:	e7d9      	b.n	800c228 <__sfp+0x1c>
 800c274:	2104      	movs	r1, #4
 800c276:	4638      	mov	r0, r7
 800c278:	f7ff ff62 	bl	800c140 <__sfmoreglue>
 800c27c:	4604      	mov	r4, r0
 800c27e:	6030      	str	r0, [r6, #0]
 800c280:	2800      	cmp	r0, #0
 800c282:	d1d5      	bne.n	800c230 <__sfp+0x24>
 800c284:	f7ff ff78 	bl	800c178 <__sfp_lock_release>
 800c288:	230c      	movs	r3, #12
 800c28a:	603b      	str	r3, [r7, #0]
 800c28c:	e7ee      	b.n	800c26c <__sfp+0x60>
 800c28e:	bf00      	nop
 800c290:	0800d380 	.word	0x0800d380
 800c294:	ffff0001 	.word	0xffff0001

0800c298 <_fwalk_reent>:
 800c298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c29c:	4606      	mov	r6, r0
 800c29e:	4688      	mov	r8, r1
 800c2a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c2a4:	2700      	movs	r7, #0
 800c2a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2aa:	f1b9 0901 	subs.w	r9, r9, #1
 800c2ae:	d505      	bpl.n	800c2bc <_fwalk_reent+0x24>
 800c2b0:	6824      	ldr	r4, [r4, #0]
 800c2b2:	2c00      	cmp	r4, #0
 800c2b4:	d1f7      	bne.n	800c2a6 <_fwalk_reent+0xe>
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2bc:	89ab      	ldrh	r3, [r5, #12]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d907      	bls.n	800c2d2 <_fwalk_reent+0x3a>
 800c2c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	d003      	beq.n	800c2d2 <_fwalk_reent+0x3a>
 800c2ca:	4629      	mov	r1, r5
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	47c0      	blx	r8
 800c2d0:	4307      	orrs	r7, r0
 800c2d2:	3568      	adds	r5, #104	; 0x68
 800c2d4:	e7e9      	b.n	800c2aa <_fwalk_reent+0x12>

0800c2d6 <__retarget_lock_init_recursive>:
 800c2d6:	4770      	bx	lr

0800c2d8 <__retarget_lock_acquire_recursive>:
 800c2d8:	4770      	bx	lr

0800c2da <__retarget_lock_release_recursive>:
 800c2da:	4770      	bx	lr

0800c2dc <__swhatbuf_r>:
 800c2dc:	b570      	push	{r4, r5, r6, lr}
 800c2de:	460e      	mov	r6, r1
 800c2e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2e4:	2900      	cmp	r1, #0
 800c2e6:	b096      	sub	sp, #88	; 0x58
 800c2e8:	4614      	mov	r4, r2
 800c2ea:	461d      	mov	r5, r3
 800c2ec:	da07      	bge.n	800c2fe <__swhatbuf_r+0x22>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	602b      	str	r3, [r5, #0]
 800c2f2:	89b3      	ldrh	r3, [r6, #12]
 800c2f4:	061a      	lsls	r2, r3, #24
 800c2f6:	d410      	bmi.n	800c31a <__swhatbuf_r+0x3e>
 800c2f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2fc:	e00e      	b.n	800c31c <__swhatbuf_r+0x40>
 800c2fe:	466a      	mov	r2, sp
 800c300:	f000 fbf8 	bl	800caf4 <_fstat_r>
 800c304:	2800      	cmp	r0, #0
 800c306:	dbf2      	blt.n	800c2ee <__swhatbuf_r+0x12>
 800c308:	9a01      	ldr	r2, [sp, #4]
 800c30a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c30e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c312:	425a      	negs	r2, r3
 800c314:	415a      	adcs	r2, r3
 800c316:	602a      	str	r2, [r5, #0]
 800c318:	e7ee      	b.n	800c2f8 <__swhatbuf_r+0x1c>
 800c31a:	2340      	movs	r3, #64	; 0x40
 800c31c:	2000      	movs	r0, #0
 800c31e:	6023      	str	r3, [r4, #0]
 800c320:	b016      	add	sp, #88	; 0x58
 800c322:	bd70      	pop	{r4, r5, r6, pc}

0800c324 <__smakebuf_r>:
 800c324:	898b      	ldrh	r3, [r1, #12]
 800c326:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c328:	079d      	lsls	r5, r3, #30
 800c32a:	4606      	mov	r6, r0
 800c32c:	460c      	mov	r4, r1
 800c32e:	d507      	bpl.n	800c340 <__smakebuf_r+0x1c>
 800c330:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c334:	6023      	str	r3, [r4, #0]
 800c336:	6123      	str	r3, [r4, #16]
 800c338:	2301      	movs	r3, #1
 800c33a:	6163      	str	r3, [r4, #20]
 800c33c:	b002      	add	sp, #8
 800c33e:	bd70      	pop	{r4, r5, r6, pc}
 800c340:	ab01      	add	r3, sp, #4
 800c342:	466a      	mov	r2, sp
 800c344:	f7ff ffca 	bl	800c2dc <__swhatbuf_r>
 800c348:	9900      	ldr	r1, [sp, #0]
 800c34a:	4605      	mov	r5, r0
 800c34c:	4630      	mov	r0, r6
 800c34e:	f7ff fc3d 	bl	800bbcc <_malloc_r>
 800c352:	b948      	cbnz	r0, 800c368 <__smakebuf_r+0x44>
 800c354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c358:	059a      	lsls	r2, r3, #22
 800c35a:	d4ef      	bmi.n	800c33c <__smakebuf_r+0x18>
 800c35c:	f023 0303 	bic.w	r3, r3, #3
 800c360:	f043 0302 	orr.w	r3, r3, #2
 800c364:	81a3      	strh	r3, [r4, #12]
 800c366:	e7e3      	b.n	800c330 <__smakebuf_r+0xc>
 800c368:	4b0d      	ldr	r3, [pc, #52]	; (800c3a0 <__smakebuf_r+0x7c>)
 800c36a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c36c:	89a3      	ldrh	r3, [r4, #12]
 800c36e:	6020      	str	r0, [r4, #0]
 800c370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c374:	81a3      	strh	r3, [r4, #12]
 800c376:	9b00      	ldr	r3, [sp, #0]
 800c378:	6163      	str	r3, [r4, #20]
 800c37a:	9b01      	ldr	r3, [sp, #4]
 800c37c:	6120      	str	r0, [r4, #16]
 800c37e:	b15b      	cbz	r3, 800c398 <__smakebuf_r+0x74>
 800c380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c384:	4630      	mov	r0, r6
 800c386:	f000 fbc7 	bl	800cb18 <_isatty_r>
 800c38a:	b128      	cbz	r0, 800c398 <__smakebuf_r+0x74>
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	f023 0303 	bic.w	r3, r3, #3
 800c392:	f043 0301 	orr.w	r3, r3, #1
 800c396:	81a3      	strh	r3, [r4, #12]
 800c398:	89a0      	ldrh	r0, [r4, #12]
 800c39a:	4305      	orrs	r5, r0
 800c39c:	81a5      	strh	r5, [r4, #12]
 800c39e:	e7cd      	b.n	800c33c <__smakebuf_r+0x18>
 800c3a0:	0800c135 	.word	0x0800c135

0800c3a4 <__malloc_lock>:
 800c3a4:	4801      	ldr	r0, [pc, #4]	; (800c3ac <__malloc_lock+0x8>)
 800c3a6:	f7ff bf97 	b.w	800c2d8 <__retarget_lock_acquire_recursive>
 800c3aa:	bf00      	nop
 800c3ac:	200048e8 	.word	0x200048e8

0800c3b0 <__malloc_unlock>:
 800c3b0:	4801      	ldr	r0, [pc, #4]	; (800c3b8 <__malloc_unlock+0x8>)
 800c3b2:	f7ff bf92 	b.w	800c2da <__retarget_lock_release_recursive>
 800c3b6:	bf00      	nop
 800c3b8:	200048e8 	.word	0x200048e8

0800c3bc <__sfputc_r>:
 800c3bc:	6893      	ldr	r3, [r2, #8]
 800c3be:	3b01      	subs	r3, #1
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	b410      	push	{r4}
 800c3c4:	6093      	str	r3, [r2, #8]
 800c3c6:	da08      	bge.n	800c3da <__sfputc_r+0x1e>
 800c3c8:	6994      	ldr	r4, [r2, #24]
 800c3ca:	42a3      	cmp	r3, r4
 800c3cc:	db01      	blt.n	800c3d2 <__sfputc_r+0x16>
 800c3ce:	290a      	cmp	r1, #10
 800c3d0:	d103      	bne.n	800c3da <__sfputc_r+0x1e>
 800c3d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3d6:	f7ff bd07 	b.w	800bde8 <__swbuf_r>
 800c3da:	6813      	ldr	r3, [r2, #0]
 800c3dc:	1c58      	adds	r0, r3, #1
 800c3de:	6010      	str	r0, [r2, #0]
 800c3e0:	7019      	strb	r1, [r3, #0]
 800c3e2:	4608      	mov	r0, r1
 800c3e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3e8:	4770      	bx	lr

0800c3ea <__sfputs_r>:
 800c3ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ec:	4606      	mov	r6, r0
 800c3ee:	460f      	mov	r7, r1
 800c3f0:	4614      	mov	r4, r2
 800c3f2:	18d5      	adds	r5, r2, r3
 800c3f4:	42ac      	cmp	r4, r5
 800c3f6:	d101      	bne.n	800c3fc <__sfputs_r+0x12>
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	e007      	b.n	800c40c <__sfputs_r+0x22>
 800c3fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c400:	463a      	mov	r2, r7
 800c402:	4630      	mov	r0, r6
 800c404:	f7ff ffda 	bl	800c3bc <__sfputc_r>
 800c408:	1c43      	adds	r3, r0, #1
 800c40a:	d1f3      	bne.n	800c3f4 <__sfputs_r+0xa>
 800c40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c410 <_vfiprintf_r>:
 800c410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c414:	460d      	mov	r5, r1
 800c416:	b09d      	sub	sp, #116	; 0x74
 800c418:	4614      	mov	r4, r2
 800c41a:	4698      	mov	r8, r3
 800c41c:	4606      	mov	r6, r0
 800c41e:	b118      	cbz	r0, 800c428 <_vfiprintf_r+0x18>
 800c420:	6983      	ldr	r3, [r0, #24]
 800c422:	b90b      	cbnz	r3, 800c428 <_vfiprintf_r+0x18>
 800c424:	f7ff feba 	bl	800c19c <__sinit>
 800c428:	4b89      	ldr	r3, [pc, #548]	; (800c650 <_vfiprintf_r+0x240>)
 800c42a:	429d      	cmp	r5, r3
 800c42c:	d11b      	bne.n	800c466 <_vfiprintf_r+0x56>
 800c42e:	6875      	ldr	r5, [r6, #4]
 800c430:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c432:	07d9      	lsls	r1, r3, #31
 800c434:	d405      	bmi.n	800c442 <_vfiprintf_r+0x32>
 800c436:	89ab      	ldrh	r3, [r5, #12]
 800c438:	059a      	lsls	r2, r3, #22
 800c43a:	d402      	bmi.n	800c442 <_vfiprintf_r+0x32>
 800c43c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c43e:	f7ff ff4b 	bl	800c2d8 <__retarget_lock_acquire_recursive>
 800c442:	89ab      	ldrh	r3, [r5, #12]
 800c444:	071b      	lsls	r3, r3, #28
 800c446:	d501      	bpl.n	800c44c <_vfiprintf_r+0x3c>
 800c448:	692b      	ldr	r3, [r5, #16]
 800c44a:	b9eb      	cbnz	r3, 800c488 <_vfiprintf_r+0x78>
 800c44c:	4629      	mov	r1, r5
 800c44e:	4630      	mov	r0, r6
 800c450:	f7ff fd1c 	bl	800be8c <__swsetup_r>
 800c454:	b1c0      	cbz	r0, 800c488 <_vfiprintf_r+0x78>
 800c456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c458:	07dc      	lsls	r4, r3, #31
 800c45a:	d50e      	bpl.n	800c47a <_vfiprintf_r+0x6a>
 800c45c:	f04f 30ff 	mov.w	r0, #4294967295
 800c460:	b01d      	add	sp, #116	; 0x74
 800c462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c466:	4b7b      	ldr	r3, [pc, #492]	; (800c654 <_vfiprintf_r+0x244>)
 800c468:	429d      	cmp	r5, r3
 800c46a:	d101      	bne.n	800c470 <_vfiprintf_r+0x60>
 800c46c:	68b5      	ldr	r5, [r6, #8]
 800c46e:	e7df      	b.n	800c430 <_vfiprintf_r+0x20>
 800c470:	4b79      	ldr	r3, [pc, #484]	; (800c658 <_vfiprintf_r+0x248>)
 800c472:	429d      	cmp	r5, r3
 800c474:	bf08      	it	eq
 800c476:	68f5      	ldreq	r5, [r6, #12]
 800c478:	e7da      	b.n	800c430 <_vfiprintf_r+0x20>
 800c47a:	89ab      	ldrh	r3, [r5, #12]
 800c47c:	0598      	lsls	r0, r3, #22
 800c47e:	d4ed      	bmi.n	800c45c <_vfiprintf_r+0x4c>
 800c480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c482:	f7ff ff2a 	bl	800c2da <__retarget_lock_release_recursive>
 800c486:	e7e9      	b.n	800c45c <_vfiprintf_r+0x4c>
 800c488:	2300      	movs	r3, #0
 800c48a:	9309      	str	r3, [sp, #36]	; 0x24
 800c48c:	2320      	movs	r3, #32
 800c48e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c492:	f8cd 800c 	str.w	r8, [sp, #12]
 800c496:	2330      	movs	r3, #48	; 0x30
 800c498:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c65c <_vfiprintf_r+0x24c>
 800c49c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4a0:	f04f 0901 	mov.w	r9, #1
 800c4a4:	4623      	mov	r3, r4
 800c4a6:	469a      	mov	sl, r3
 800c4a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4ac:	b10a      	cbz	r2, 800c4b2 <_vfiprintf_r+0xa2>
 800c4ae:	2a25      	cmp	r2, #37	; 0x25
 800c4b0:	d1f9      	bne.n	800c4a6 <_vfiprintf_r+0x96>
 800c4b2:	ebba 0b04 	subs.w	fp, sl, r4
 800c4b6:	d00b      	beq.n	800c4d0 <_vfiprintf_r+0xc0>
 800c4b8:	465b      	mov	r3, fp
 800c4ba:	4622      	mov	r2, r4
 800c4bc:	4629      	mov	r1, r5
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f7ff ff93 	bl	800c3ea <__sfputs_r>
 800c4c4:	3001      	adds	r0, #1
 800c4c6:	f000 80aa 	beq.w	800c61e <_vfiprintf_r+0x20e>
 800c4ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4cc:	445a      	add	r2, fp
 800c4ce:	9209      	str	r2, [sp, #36]	; 0x24
 800c4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f000 80a2 	beq.w	800c61e <_vfiprintf_r+0x20e>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c4e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4e4:	f10a 0a01 	add.w	sl, sl, #1
 800c4e8:	9304      	str	r3, [sp, #16]
 800c4ea:	9307      	str	r3, [sp, #28]
 800c4ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4f0:	931a      	str	r3, [sp, #104]	; 0x68
 800c4f2:	4654      	mov	r4, sl
 800c4f4:	2205      	movs	r2, #5
 800c4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4fa:	4858      	ldr	r0, [pc, #352]	; (800c65c <_vfiprintf_r+0x24c>)
 800c4fc:	f7f3 fe68 	bl	80001d0 <memchr>
 800c500:	9a04      	ldr	r2, [sp, #16]
 800c502:	b9d8      	cbnz	r0, 800c53c <_vfiprintf_r+0x12c>
 800c504:	06d1      	lsls	r1, r2, #27
 800c506:	bf44      	itt	mi
 800c508:	2320      	movmi	r3, #32
 800c50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c50e:	0713      	lsls	r3, r2, #28
 800c510:	bf44      	itt	mi
 800c512:	232b      	movmi	r3, #43	; 0x2b
 800c514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c518:	f89a 3000 	ldrb.w	r3, [sl]
 800c51c:	2b2a      	cmp	r3, #42	; 0x2a
 800c51e:	d015      	beq.n	800c54c <_vfiprintf_r+0x13c>
 800c520:	9a07      	ldr	r2, [sp, #28]
 800c522:	4654      	mov	r4, sl
 800c524:	2000      	movs	r0, #0
 800c526:	f04f 0c0a 	mov.w	ip, #10
 800c52a:	4621      	mov	r1, r4
 800c52c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c530:	3b30      	subs	r3, #48	; 0x30
 800c532:	2b09      	cmp	r3, #9
 800c534:	d94e      	bls.n	800c5d4 <_vfiprintf_r+0x1c4>
 800c536:	b1b0      	cbz	r0, 800c566 <_vfiprintf_r+0x156>
 800c538:	9207      	str	r2, [sp, #28]
 800c53a:	e014      	b.n	800c566 <_vfiprintf_r+0x156>
 800c53c:	eba0 0308 	sub.w	r3, r0, r8
 800c540:	fa09 f303 	lsl.w	r3, r9, r3
 800c544:	4313      	orrs	r3, r2
 800c546:	9304      	str	r3, [sp, #16]
 800c548:	46a2      	mov	sl, r4
 800c54a:	e7d2      	b.n	800c4f2 <_vfiprintf_r+0xe2>
 800c54c:	9b03      	ldr	r3, [sp, #12]
 800c54e:	1d19      	adds	r1, r3, #4
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	9103      	str	r1, [sp, #12]
 800c554:	2b00      	cmp	r3, #0
 800c556:	bfbb      	ittet	lt
 800c558:	425b      	neglt	r3, r3
 800c55a:	f042 0202 	orrlt.w	r2, r2, #2
 800c55e:	9307      	strge	r3, [sp, #28]
 800c560:	9307      	strlt	r3, [sp, #28]
 800c562:	bfb8      	it	lt
 800c564:	9204      	strlt	r2, [sp, #16]
 800c566:	7823      	ldrb	r3, [r4, #0]
 800c568:	2b2e      	cmp	r3, #46	; 0x2e
 800c56a:	d10c      	bne.n	800c586 <_vfiprintf_r+0x176>
 800c56c:	7863      	ldrb	r3, [r4, #1]
 800c56e:	2b2a      	cmp	r3, #42	; 0x2a
 800c570:	d135      	bne.n	800c5de <_vfiprintf_r+0x1ce>
 800c572:	9b03      	ldr	r3, [sp, #12]
 800c574:	1d1a      	adds	r2, r3, #4
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	9203      	str	r2, [sp, #12]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	bfb8      	it	lt
 800c57e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c582:	3402      	adds	r4, #2
 800c584:	9305      	str	r3, [sp, #20]
 800c586:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c66c <_vfiprintf_r+0x25c>
 800c58a:	7821      	ldrb	r1, [r4, #0]
 800c58c:	2203      	movs	r2, #3
 800c58e:	4650      	mov	r0, sl
 800c590:	f7f3 fe1e 	bl	80001d0 <memchr>
 800c594:	b140      	cbz	r0, 800c5a8 <_vfiprintf_r+0x198>
 800c596:	2340      	movs	r3, #64	; 0x40
 800c598:	eba0 000a 	sub.w	r0, r0, sl
 800c59c:	fa03 f000 	lsl.w	r0, r3, r0
 800c5a0:	9b04      	ldr	r3, [sp, #16]
 800c5a2:	4303      	orrs	r3, r0
 800c5a4:	3401      	adds	r4, #1
 800c5a6:	9304      	str	r3, [sp, #16]
 800c5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ac:	482c      	ldr	r0, [pc, #176]	; (800c660 <_vfiprintf_r+0x250>)
 800c5ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5b2:	2206      	movs	r2, #6
 800c5b4:	f7f3 fe0c 	bl	80001d0 <memchr>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d03f      	beq.n	800c63c <_vfiprintf_r+0x22c>
 800c5bc:	4b29      	ldr	r3, [pc, #164]	; (800c664 <_vfiprintf_r+0x254>)
 800c5be:	bb1b      	cbnz	r3, 800c608 <_vfiprintf_r+0x1f8>
 800c5c0:	9b03      	ldr	r3, [sp, #12]
 800c5c2:	3307      	adds	r3, #7
 800c5c4:	f023 0307 	bic.w	r3, r3, #7
 800c5c8:	3308      	adds	r3, #8
 800c5ca:	9303      	str	r3, [sp, #12]
 800c5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ce:	443b      	add	r3, r7
 800c5d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5d2:	e767      	b.n	800c4a4 <_vfiprintf_r+0x94>
 800c5d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5d8:	460c      	mov	r4, r1
 800c5da:	2001      	movs	r0, #1
 800c5dc:	e7a5      	b.n	800c52a <_vfiprintf_r+0x11a>
 800c5de:	2300      	movs	r3, #0
 800c5e0:	3401      	adds	r4, #1
 800c5e2:	9305      	str	r3, [sp, #20]
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	f04f 0c0a 	mov.w	ip, #10
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5f0:	3a30      	subs	r2, #48	; 0x30
 800c5f2:	2a09      	cmp	r2, #9
 800c5f4:	d903      	bls.n	800c5fe <_vfiprintf_r+0x1ee>
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d0c5      	beq.n	800c586 <_vfiprintf_r+0x176>
 800c5fa:	9105      	str	r1, [sp, #20]
 800c5fc:	e7c3      	b.n	800c586 <_vfiprintf_r+0x176>
 800c5fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800c602:	4604      	mov	r4, r0
 800c604:	2301      	movs	r3, #1
 800c606:	e7f0      	b.n	800c5ea <_vfiprintf_r+0x1da>
 800c608:	ab03      	add	r3, sp, #12
 800c60a:	9300      	str	r3, [sp, #0]
 800c60c:	462a      	mov	r2, r5
 800c60e:	4b16      	ldr	r3, [pc, #88]	; (800c668 <_vfiprintf_r+0x258>)
 800c610:	a904      	add	r1, sp, #16
 800c612:	4630      	mov	r0, r6
 800c614:	f3af 8000 	nop.w
 800c618:	4607      	mov	r7, r0
 800c61a:	1c78      	adds	r0, r7, #1
 800c61c:	d1d6      	bne.n	800c5cc <_vfiprintf_r+0x1bc>
 800c61e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c620:	07d9      	lsls	r1, r3, #31
 800c622:	d405      	bmi.n	800c630 <_vfiprintf_r+0x220>
 800c624:	89ab      	ldrh	r3, [r5, #12]
 800c626:	059a      	lsls	r2, r3, #22
 800c628:	d402      	bmi.n	800c630 <_vfiprintf_r+0x220>
 800c62a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c62c:	f7ff fe55 	bl	800c2da <__retarget_lock_release_recursive>
 800c630:	89ab      	ldrh	r3, [r5, #12]
 800c632:	065b      	lsls	r3, r3, #25
 800c634:	f53f af12 	bmi.w	800c45c <_vfiprintf_r+0x4c>
 800c638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c63a:	e711      	b.n	800c460 <_vfiprintf_r+0x50>
 800c63c:	ab03      	add	r3, sp, #12
 800c63e:	9300      	str	r3, [sp, #0]
 800c640:	462a      	mov	r2, r5
 800c642:	4b09      	ldr	r3, [pc, #36]	; (800c668 <_vfiprintf_r+0x258>)
 800c644:	a904      	add	r1, sp, #16
 800c646:	4630      	mov	r0, r6
 800c648:	f000 f880 	bl	800c74c <_printf_i>
 800c64c:	e7e4      	b.n	800c618 <_vfiprintf_r+0x208>
 800c64e:	bf00      	nop
 800c650:	0800d3a4 	.word	0x0800d3a4
 800c654:	0800d3c4 	.word	0x0800d3c4
 800c658:	0800d384 	.word	0x0800d384
 800c65c:	0800d3e4 	.word	0x0800d3e4
 800c660:	0800d3ee 	.word	0x0800d3ee
 800c664:	00000000 	.word	0x00000000
 800c668:	0800c3eb 	.word	0x0800c3eb
 800c66c:	0800d3ea 	.word	0x0800d3ea

0800c670 <_printf_common>:
 800c670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c674:	4616      	mov	r6, r2
 800c676:	4699      	mov	r9, r3
 800c678:	688a      	ldr	r2, [r1, #8]
 800c67a:	690b      	ldr	r3, [r1, #16]
 800c67c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c680:	4293      	cmp	r3, r2
 800c682:	bfb8      	it	lt
 800c684:	4613      	movlt	r3, r2
 800c686:	6033      	str	r3, [r6, #0]
 800c688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c68c:	4607      	mov	r7, r0
 800c68e:	460c      	mov	r4, r1
 800c690:	b10a      	cbz	r2, 800c696 <_printf_common+0x26>
 800c692:	3301      	adds	r3, #1
 800c694:	6033      	str	r3, [r6, #0]
 800c696:	6823      	ldr	r3, [r4, #0]
 800c698:	0699      	lsls	r1, r3, #26
 800c69a:	bf42      	ittt	mi
 800c69c:	6833      	ldrmi	r3, [r6, #0]
 800c69e:	3302      	addmi	r3, #2
 800c6a0:	6033      	strmi	r3, [r6, #0]
 800c6a2:	6825      	ldr	r5, [r4, #0]
 800c6a4:	f015 0506 	ands.w	r5, r5, #6
 800c6a8:	d106      	bne.n	800c6b8 <_printf_common+0x48>
 800c6aa:	f104 0a19 	add.w	sl, r4, #25
 800c6ae:	68e3      	ldr	r3, [r4, #12]
 800c6b0:	6832      	ldr	r2, [r6, #0]
 800c6b2:	1a9b      	subs	r3, r3, r2
 800c6b4:	42ab      	cmp	r3, r5
 800c6b6:	dc26      	bgt.n	800c706 <_printf_common+0x96>
 800c6b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c6bc:	1e13      	subs	r3, r2, #0
 800c6be:	6822      	ldr	r2, [r4, #0]
 800c6c0:	bf18      	it	ne
 800c6c2:	2301      	movne	r3, #1
 800c6c4:	0692      	lsls	r2, r2, #26
 800c6c6:	d42b      	bmi.n	800c720 <_printf_common+0xb0>
 800c6c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6cc:	4649      	mov	r1, r9
 800c6ce:	4638      	mov	r0, r7
 800c6d0:	47c0      	blx	r8
 800c6d2:	3001      	adds	r0, #1
 800c6d4:	d01e      	beq.n	800c714 <_printf_common+0xa4>
 800c6d6:	6823      	ldr	r3, [r4, #0]
 800c6d8:	68e5      	ldr	r5, [r4, #12]
 800c6da:	6832      	ldr	r2, [r6, #0]
 800c6dc:	f003 0306 	and.w	r3, r3, #6
 800c6e0:	2b04      	cmp	r3, #4
 800c6e2:	bf08      	it	eq
 800c6e4:	1aad      	subeq	r5, r5, r2
 800c6e6:	68a3      	ldr	r3, [r4, #8]
 800c6e8:	6922      	ldr	r2, [r4, #16]
 800c6ea:	bf0c      	ite	eq
 800c6ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6f0:	2500      	movne	r5, #0
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	bfc4      	itt	gt
 800c6f6:	1a9b      	subgt	r3, r3, r2
 800c6f8:	18ed      	addgt	r5, r5, r3
 800c6fa:	2600      	movs	r6, #0
 800c6fc:	341a      	adds	r4, #26
 800c6fe:	42b5      	cmp	r5, r6
 800c700:	d11a      	bne.n	800c738 <_printf_common+0xc8>
 800c702:	2000      	movs	r0, #0
 800c704:	e008      	b.n	800c718 <_printf_common+0xa8>
 800c706:	2301      	movs	r3, #1
 800c708:	4652      	mov	r2, sl
 800c70a:	4649      	mov	r1, r9
 800c70c:	4638      	mov	r0, r7
 800c70e:	47c0      	blx	r8
 800c710:	3001      	adds	r0, #1
 800c712:	d103      	bne.n	800c71c <_printf_common+0xac>
 800c714:	f04f 30ff 	mov.w	r0, #4294967295
 800c718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c71c:	3501      	adds	r5, #1
 800c71e:	e7c6      	b.n	800c6ae <_printf_common+0x3e>
 800c720:	18e1      	adds	r1, r4, r3
 800c722:	1c5a      	adds	r2, r3, #1
 800c724:	2030      	movs	r0, #48	; 0x30
 800c726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c72a:	4422      	add	r2, r4
 800c72c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c734:	3302      	adds	r3, #2
 800c736:	e7c7      	b.n	800c6c8 <_printf_common+0x58>
 800c738:	2301      	movs	r3, #1
 800c73a:	4622      	mov	r2, r4
 800c73c:	4649      	mov	r1, r9
 800c73e:	4638      	mov	r0, r7
 800c740:	47c0      	blx	r8
 800c742:	3001      	adds	r0, #1
 800c744:	d0e6      	beq.n	800c714 <_printf_common+0xa4>
 800c746:	3601      	adds	r6, #1
 800c748:	e7d9      	b.n	800c6fe <_printf_common+0x8e>
	...

0800c74c <_printf_i>:
 800c74c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c750:	460c      	mov	r4, r1
 800c752:	4691      	mov	r9, r2
 800c754:	7e27      	ldrb	r7, [r4, #24]
 800c756:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c758:	2f78      	cmp	r7, #120	; 0x78
 800c75a:	4680      	mov	r8, r0
 800c75c:	469a      	mov	sl, r3
 800c75e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c762:	d807      	bhi.n	800c774 <_printf_i+0x28>
 800c764:	2f62      	cmp	r7, #98	; 0x62
 800c766:	d80a      	bhi.n	800c77e <_printf_i+0x32>
 800c768:	2f00      	cmp	r7, #0
 800c76a:	f000 80d8 	beq.w	800c91e <_printf_i+0x1d2>
 800c76e:	2f58      	cmp	r7, #88	; 0x58
 800c770:	f000 80a3 	beq.w	800c8ba <_printf_i+0x16e>
 800c774:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c77c:	e03a      	b.n	800c7f4 <_printf_i+0xa8>
 800c77e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c782:	2b15      	cmp	r3, #21
 800c784:	d8f6      	bhi.n	800c774 <_printf_i+0x28>
 800c786:	a001      	add	r0, pc, #4	; (adr r0, 800c78c <_printf_i+0x40>)
 800c788:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c78c:	0800c7e5 	.word	0x0800c7e5
 800c790:	0800c7f9 	.word	0x0800c7f9
 800c794:	0800c775 	.word	0x0800c775
 800c798:	0800c775 	.word	0x0800c775
 800c79c:	0800c775 	.word	0x0800c775
 800c7a0:	0800c775 	.word	0x0800c775
 800c7a4:	0800c7f9 	.word	0x0800c7f9
 800c7a8:	0800c775 	.word	0x0800c775
 800c7ac:	0800c775 	.word	0x0800c775
 800c7b0:	0800c775 	.word	0x0800c775
 800c7b4:	0800c775 	.word	0x0800c775
 800c7b8:	0800c905 	.word	0x0800c905
 800c7bc:	0800c829 	.word	0x0800c829
 800c7c0:	0800c8e7 	.word	0x0800c8e7
 800c7c4:	0800c775 	.word	0x0800c775
 800c7c8:	0800c775 	.word	0x0800c775
 800c7cc:	0800c927 	.word	0x0800c927
 800c7d0:	0800c775 	.word	0x0800c775
 800c7d4:	0800c829 	.word	0x0800c829
 800c7d8:	0800c775 	.word	0x0800c775
 800c7dc:	0800c775 	.word	0x0800c775
 800c7e0:	0800c8ef 	.word	0x0800c8ef
 800c7e4:	680b      	ldr	r3, [r1, #0]
 800c7e6:	1d1a      	adds	r2, r3, #4
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	600a      	str	r2, [r1, #0]
 800c7ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c7f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	e0a3      	b.n	800c940 <_printf_i+0x1f4>
 800c7f8:	6825      	ldr	r5, [r4, #0]
 800c7fa:	6808      	ldr	r0, [r1, #0]
 800c7fc:	062e      	lsls	r6, r5, #24
 800c7fe:	f100 0304 	add.w	r3, r0, #4
 800c802:	d50a      	bpl.n	800c81a <_printf_i+0xce>
 800c804:	6805      	ldr	r5, [r0, #0]
 800c806:	600b      	str	r3, [r1, #0]
 800c808:	2d00      	cmp	r5, #0
 800c80a:	da03      	bge.n	800c814 <_printf_i+0xc8>
 800c80c:	232d      	movs	r3, #45	; 0x2d
 800c80e:	426d      	negs	r5, r5
 800c810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c814:	485e      	ldr	r0, [pc, #376]	; (800c990 <_printf_i+0x244>)
 800c816:	230a      	movs	r3, #10
 800c818:	e019      	b.n	800c84e <_printf_i+0x102>
 800c81a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c81e:	6805      	ldr	r5, [r0, #0]
 800c820:	600b      	str	r3, [r1, #0]
 800c822:	bf18      	it	ne
 800c824:	b22d      	sxthne	r5, r5
 800c826:	e7ef      	b.n	800c808 <_printf_i+0xbc>
 800c828:	680b      	ldr	r3, [r1, #0]
 800c82a:	6825      	ldr	r5, [r4, #0]
 800c82c:	1d18      	adds	r0, r3, #4
 800c82e:	6008      	str	r0, [r1, #0]
 800c830:	0628      	lsls	r0, r5, #24
 800c832:	d501      	bpl.n	800c838 <_printf_i+0xec>
 800c834:	681d      	ldr	r5, [r3, #0]
 800c836:	e002      	b.n	800c83e <_printf_i+0xf2>
 800c838:	0669      	lsls	r1, r5, #25
 800c83a:	d5fb      	bpl.n	800c834 <_printf_i+0xe8>
 800c83c:	881d      	ldrh	r5, [r3, #0]
 800c83e:	4854      	ldr	r0, [pc, #336]	; (800c990 <_printf_i+0x244>)
 800c840:	2f6f      	cmp	r7, #111	; 0x6f
 800c842:	bf0c      	ite	eq
 800c844:	2308      	moveq	r3, #8
 800c846:	230a      	movne	r3, #10
 800c848:	2100      	movs	r1, #0
 800c84a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c84e:	6866      	ldr	r6, [r4, #4]
 800c850:	60a6      	str	r6, [r4, #8]
 800c852:	2e00      	cmp	r6, #0
 800c854:	bfa2      	ittt	ge
 800c856:	6821      	ldrge	r1, [r4, #0]
 800c858:	f021 0104 	bicge.w	r1, r1, #4
 800c85c:	6021      	strge	r1, [r4, #0]
 800c85e:	b90d      	cbnz	r5, 800c864 <_printf_i+0x118>
 800c860:	2e00      	cmp	r6, #0
 800c862:	d04d      	beq.n	800c900 <_printf_i+0x1b4>
 800c864:	4616      	mov	r6, r2
 800c866:	fbb5 f1f3 	udiv	r1, r5, r3
 800c86a:	fb03 5711 	mls	r7, r3, r1, r5
 800c86e:	5dc7      	ldrb	r7, [r0, r7]
 800c870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c874:	462f      	mov	r7, r5
 800c876:	42bb      	cmp	r3, r7
 800c878:	460d      	mov	r5, r1
 800c87a:	d9f4      	bls.n	800c866 <_printf_i+0x11a>
 800c87c:	2b08      	cmp	r3, #8
 800c87e:	d10b      	bne.n	800c898 <_printf_i+0x14c>
 800c880:	6823      	ldr	r3, [r4, #0]
 800c882:	07df      	lsls	r7, r3, #31
 800c884:	d508      	bpl.n	800c898 <_printf_i+0x14c>
 800c886:	6923      	ldr	r3, [r4, #16]
 800c888:	6861      	ldr	r1, [r4, #4]
 800c88a:	4299      	cmp	r1, r3
 800c88c:	bfde      	ittt	le
 800c88e:	2330      	movle	r3, #48	; 0x30
 800c890:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c894:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c898:	1b92      	subs	r2, r2, r6
 800c89a:	6122      	str	r2, [r4, #16]
 800c89c:	f8cd a000 	str.w	sl, [sp]
 800c8a0:	464b      	mov	r3, r9
 800c8a2:	aa03      	add	r2, sp, #12
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	f7ff fee2 	bl	800c670 <_printf_common>
 800c8ac:	3001      	adds	r0, #1
 800c8ae:	d14c      	bne.n	800c94a <_printf_i+0x1fe>
 800c8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b4:	b004      	add	sp, #16
 800c8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ba:	4835      	ldr	r0, [pc, #212]	; (800c990 <_printf_i+0x244>)
 800c8bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c8c0:	6823      	ldr	r3, [r4, #0]
 800c8c2:	680e      	ldr	r6, [r1, #0]
 800c8c4:	061f      	lsls	r7, r3, #24
 800c8c6:	f856 5b04 	ldr.w	r5, [r6], #4
 800c8ca:	600e      	str	r6, [r1, #0]
 800c8cc:	d514      	bpl.n	800c8f8 <_printf_i+0x1ac>
 800c8ce:	07d9      	lsls	r1, r3, #31
 800c8d0:	bf44      	itt	mi
 800c8d2:	f043 0320 	orrmi.w	r3, r3, #32
 800c8d6:	6023      	strmi	r3, [r4, #0]
 800c8d8:	b91d      	cbnz	r5, 800c8e2 <_printf_i+0x196>
 800c8da:	6823      	ldr	r3, [r4, #0]
 800c8dc:	f023 0320 	bic.w	r3, r3, #32
 800c8e0:	6023      	str	r3, [r4, #0]
 800c8e2:	2310      	movs	r3, #16
 800c8e4:	e7b0      	b.n	800c848 <_printf_i+0xfc>
 800c8e6:	6823      	ldr	r3, [r4, #0]
 800c8e8:	f043 0320 	orr.w	r3, r3, #32
 800c8ec:	6023      	str	r3, [r4, #0]
 800c8ee:	2378      	movs	r3, #120	; 0x78
 800c8f0:	4828      	ldr	r0, [pc, #160]	; (800c994 <_printf_i+0x248>)
 800c8f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8f6:	e7e3      	b.n	800c8c0 <_printf_i+0x174>
 800c8f8:	065e      	lsls	r6, r3, #25
 800c8fa:	bf48      	it	mi
 800c8fc:	b2ad      	uxthmi	r5, r5
 800c8fe:	e7e6      	b.n	800c8ce <_printf_i+0x182>
 800c900:	4616      	mov	r6, r2
 800c902:	e7bb      	b.n	800c87c <_printf_i+0x130>
 800c904:	680b      	ldr	r3, [r1, #0]
 800c906:	6826      	ldr	r6, [r4, #0]
 800c908:	6960      	ldr	r0, [r4, #20]
 800c90a:	1d1d      	adds	r5, r3, #4
 800c90c:	600d      	str	r5, [r1, #0]
 800c90e:	0635      	lsls	r5, r6, #24
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	d501      	bpl.n	800c918 <_printf_i+0x1cc>
 800c914:	6018      	str	r0, [r3, #0]
 800c916:	e002      	b.n	800c91e <_printf_i+0x1d2>
 800c918:	0671      	lsls	r1, r6, #25
 800c91a:	d5fb      	bpl.n	800c914 <_printf_i+0x1c8>
 800c91c:	8018      	strh	r0, [r3, #0]
 800c91e:	2300      	movs	r3, #0
 800c920:	6123      	str	r3, [r4, #16]
 800c922:	4616      	mov	r6, r2
 800c924:	e7ba      	b.n	800c89c <_printf_i+0x150>
 800c926:	680b      	ldr	r3, [r1, #0]
 800c928:	1d1a      	adds	r2, r3, #4
 800c92a:	600a      	str	r2, [r1, #0]
 800c92c:	681e      	ldr	r6, [r3, #0]
 800c92e:	6862      	ldr	r2, [r4, #4]
 800c930:	2100      	movs	r1, #0
 800c932:	4630      	mov	r0, r6
 800c934:	f7f3 fc4c 	bl	80001d0 <memchr>
 800c938:	b108      	cbz	r0, 800c93e <_printf_i+0x1f2>
 800c93a:	1b80      	subs	r0, r0, r6
 800c93c:	6060      	str	r0, [r4, #4]
 800c93e:	6863      	ldr	r3, [r4, #4]
 800c940:	6123      	str	r3, [r4, #16]
 800c942:	2300      	movs	r3, #0
 800c944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c948:	e7a8      	b.n	800c89c <_printf_i+0x150>
 800c94a:	6923      	ldr	r3, [r4, #16]
 800c94c:	4632      	mov	r2, r6
 800c94e:	4649      	mov	r1, r9
 800c950:	4640      	mov	r0, r8
 800c952:	47d0      	blx	sl
 800c954:	3001      	adds	r0, #1
 800c956:	d0ab      	beq.n	800c8b0 <_printf_i+0x164>
 800c958:	6823      	ldr	r3, [r4, #0]
 800c95a:	079b      	lsls	r3, r3, #30
 800c95c:	d413      	bmi.n	800c986 <_printf_i+0x23a>
 800c95e:	68e0      	ldr	r0, [r4, #12]
 800c960:	9b03      	ldr	r3, [sp, #12]
 800c962:	4298      	cmp	r0, r3
 800c964:	bfb8      	it	lt
 800c966:	4618      	movlt	r0, r3
 800c968:	e7a4      	b.n	800c8b4 <_printf_i+0x168>
 800c96a:	2301      	movs	r3, #1
 800c96c:	4632      	mov	r2, r6
 800c96e:	4649      	mov	r1, r9
 800c970:	4640      	mov	r0, r8
 800c972:	47d0      	blx	sl
 800c974:	3001      	adds	r0, #1
 800c976:	d09b      	beq.n	800c8b0 <_printf_i+0x164>
 800c978:	3501      	adds	r5, #1
 800c97a:	68e3      	ldr	r3, [r4, #12]
 800c97c:	9903      	ldr	r1, [sp, #12]
 800c97e:	1a5b      	subs	r3, r3, r1
 800c980:	42ab      	cmp	r3, r5
 800c982:	dcf2      	bgt.n	800c96a <_printf_i+0x21e>
 800c984:	e7eb      	b.n	800c95e <_printf_i+0x212>
 800c986:	2500      	movs	r5, #0
 800c988:	f104 0619 	add.w	r6, r4, #25
 800c98c:	e7f5      	b.n	800c97a <_printf_i+0x22e>
 800c98e:	bf00      	nop
 800c990:	0800d3f5 	.word	0x0800d3f5
 800c994:	0800d406 	.word	0x0800d406

0800c998 <_putc_r>:
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	460d      	mov	r5, r1
 800c99c:	4614      	mov	r4, r2
 800c99e:	4606      	mov	r6, r0
 800c9a0:	b118      	cbz	r0, 800c9aa <_putc_r+0x12>
 800c9a2:	6983      	ldr	r3, [r0, #24]
 800c9a4:	b90b      	cbnz	r3, 800c9aa <_putc_r+0x12>
 800c9a6:	f7ff fbf9 	bl	800c19c <__sinit>
 800c9aa:	4b1c      	ldr	r3, [pc, #112]	; (800ca1c <_putc_r+0x84>)
 800c9ac:	429c      	cmp	r4, r3
 800c9ae:	d124      	bne.n	800c9fa <_putc_r+0x62>
 800c9b0:	6874      	ldr	r4, [r6, #4]
 800c9b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9b4:	07d8      	lsls	r0, r3, #31
 800c9b6:	d405      	bmi.n	800c9c4 <_putc_r+0x2c>
 800c9b8:	89a3      	ldrh	r3, [r4, #12]
 800c9ba:	0599      	lsls	r1, r3, #22
 800c9bc:	d402      	bmi.n	800c9c4 <_putc_r+0x2c>
 800c9be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9c0:	f7ff fc8a 	bl	800c2d8 <__retarget_lock_acquire_recursive>
 800c9c4:	68a3      	ldr	r3, [r4, #8]
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	60a3      	str	r3, [r4, #8]
 800c9cc:	da05      	bge.n	800c9da <_putc_r+0x42>
 800c9ce:	69a2      	ldr	r2, [r4, #24]
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	db1c      	blt.n	800ca0e <_putc_r+0x76>
 800c9d4:	b2eb      	uxtb	r3, r5
 800c9d6:	2b0a      	cmp	r3, #10
 800c9d8:	d019      	beq.n	800ca0e <_putc_r+0x76>
 800c9da:	6823      	ldr	r3, [r4, #0]
 800c9dc:	1c5a      	adds	r2, r3, #1
 800c9de:	6022      	str	r2, [r4, #0]
 800c9e0:	701d      	strb	r5, [r3, #0]
 800c9e2:	b2ed      	uxtb	r5, r5
 800c9e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9e6:	07da      	lsls	r2, r3, #31
 800c9e8:	d405      	bmi.n	800c9f6 <_putc_r+0x5e>
 800c9ea:	89a3      	ldrh	r3, [r4, #12]
 800c9ec:	059b      	lsls	r3, r3, #22
 800c9ee:	d402      	bmi.n	800c9f6 <_putc_r+0x5e>
 800c9f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9f2:	f7ff fc72 	bl	800c2da <__retarget_lock_release_recursive>
 800c9f6:	4628      	mov	r0, r5
 800c9f8:	bd70      	pop	{r4, r5, r6, pc}
 800c9fa:	4b09      	ldr	r3, [pc, #36]	; (800ca20 <_putc_r+0x88>)
 800c9fc:	429c      	cmp	r4, r3
 800c9fe:	d101      	bne.n	800ca04 <_putc_r+0x6c>
 800ca00:	68b4      	ldr	r4, [r6, #8]
 800ca02:	e7d6      	b.n	800c9b2 <_putc_r+0x1a>
 800ca04:	4b07      	ldr	r3, [pc, #28]	; (800ca24 <_putc_r+0x8c>)
 800ca06:	429c      	cmp	r4, r3
 800ca08:	bf08      	it	eq
 800ca0a:	68f4      	ldreq	r4, [r6, #12]
 800ca0c:	e7d1      	b.n	800c9b2 <_putc_r+0x1a>
 800ca0e:	4629      	mov	r1, r5
 800ca10:	4622      	mov	r2, r4
 800ca12:	4630      	mov	r0, r6
 800ca14:	f7ff f9e8 	bl	800bde8 <__swbuf_r>
 800ca18:	4605      	mov	r5, r0
 800ca1a:	e7e3      	b.n	800c9e4 <_putc_r+0x4c>
 800ca1c:	0800d3a4 	.word	0x0800d3a4
 800ca20:	0800d3c4 	.word	0x0800d3c4
 800ca24:	0800d384 	.word	0x0800d384

0800ca28 <__sread>:
 800ca28:	b510      	push	{r4, lr}
 800ca2a:	460c      	mov	r4, r1
 800ca2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca30:	f000 f894 	bl	800cb5c <_read_r>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	bfab      	itete	ge
 800ca38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ca3a:	89a3      	ldrhlt	r3, [r4, #12]
 800ca3c:	181b      	addge	r3, r3, r0
 800ca3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ca42:	bfac      	ite	ge
 800ca44:	6563      	strge	r3, [r4, #84]	; 0x54
 800ca46:	81a3      	strhlt	r3, [r4, #12]
 800ca48:	bd10      	pop	{r4, pc}

0800ca4a <__swrite>:
 800ca4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca4e:	461f      	mov	r7, r3
 800ca50:	898b      	ldrh	r3, [r1, #12]
 800ca52:	05db      	lsls	r3, r3, #23
 800ca54:	4605      	mov	r5, r0
 800ca56:	460c      	mov	r4, r1
 800ca58:	4616      	mov	r6, r2
 800ca5a:	d505      	bpl.n	800ca68 <__swrite+0x1e>
 800ca5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca60:	2302      	movs	r3, #2
 800ca62:	2200      	movs	r2, #0
 800ca64:	f000 f868 	bl	800cb38 <_lseek_r>
 800ca68:	89a3      	ldrh	r3, [r4, #12]
 800ca6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca72:	81a3      	strh	r3, [r4, #12]
 800ca74:	4632      	mov	r2, r6
 800ca76:	463b      	mov	r3, r7
 800ca78:	4628      	mov	r0, r5
 800ca7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca7e:	f000 b817 	b.w	800cab0 <_write_r>

0800ca82 <__sseek>:
 800ca82:	b510      	push	{r4, lr}
 800ca84:	460c      	mov	r4, r1
 800ca86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca8a:	f000 f855 	bl	800cb38 <_lseek_r>
 800ca8e:	1c43      	adds	r3, r0, #1
 800ca90:	89a3      	ldrh	r3, [r4, #12]
 800ca92:	bf15      	itete	ne
 800ca94:	6560      	strne	r0, [r4, #84]	; 0x54
 800ca96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ca9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ca9e:	81a3      	strheq	r3, [r4, #12]
 800caa0:	bf18      	it	ne
 800caa2:	81a3      	strhne	r3, [r4, #12]
 800caa4:	bd10      	pop	{r4, pc}

0800caa6 <__sclose>:
 800caa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caaa:	f000 b813 	b.w	800cad4 <_close_r>
	...

0800cab0 <_write_r>:
 800cab0:	b538      	push	{r3, r4, r5, lr}
 800cab2:	4d07      	ldr	r5, [pc, #28]	; (800cad0 <_write_r+0x20>)
 800cab4:	4604      	mov	r4, r0
 800cab6:	4608      	mov	r0, r1
 800cab8:	4611      	mov	r1, r2
 800caba:	2200      	movs	r2, #0
 800cabc:	602a      	str	r2, [r5, #0]
 800cabe:	461a      	mov	r2, r3
 800cac0:	f7f4 fa1d 	bl	8000efe <_write>
 800cac4:	1c43      	adds	r3, r0, #1
 800cac6:	d102      	bne.n	800cace <_write_r+0x1e>
 800cac8:	682b      	ldr	r3, [r5, #0]
 800caca:	b103      	cbz	r3, 800cace <_write_r+0x1e>
 800cacc:	6023      	str	r3, [r4, #0]
 800cace:	bd38      	pop	{r3, r4, r5, pc}
 800cad0:	200048f0 	.word	0x200048f0

0800cad4 <_close_r>:
 800cad4:	b538      	push	{r3, r4, r5, lr}
 800cad6:	4d06      	ldr	r5, [pc, #24]	; (800caf0 <_close_r+0x1c>)
 800cad8:	2300      	movs	r3, #0
 800cada:	4604      	mov	r4, r0
 800cadc:	4608      	mov	r0, r1
 800cade:	602b      	str	r3, [r5, #0]
 800cae0:	f7f4 fa29 	bl	8000f36 <_close>
 800cae4:	1c43      	adds	r3, r0, #1
 800cae6:	d102      	bne.n	800caee <_close_r+0x1a>
 800cae8:	682b      	ldr	r3, [r5, #0]
 800caea:	b103      	cbz	r3, 800caee <_close_r+0x1a>
 800caec:	6023      	str	r3, [r4, #0]
 800caee:	bd38      	pop	{r3, r4, r5, pc}
 800caf0:	200048f0 	.word	0x200048f0

0800caf4 <_fstat_r>:
 800caf4:	b538      	push	{r3, r4, r5, lr}
 800caf6:	4d07      	ldr	r5, [pc, #28]	; (800cb14 <_fstat_r+0x20>)
 800caf8:	2300      	movs	r3, #0
 800cafa:	4604      	mov	r4, r0
 800cafc:	4608      	mov	r0, r1
 800cafe:	4611      	mov	r1, r2
 800cb00:	602b      	str	r3, [r5, #0]
 800cb02:	f7f4 fa24 	bl	8000f4e <_fstat>
 800cb06:	1c43      	adds	r3, r0, #1
 800cb08:	d102      	bne.n	800cb10 <_fstat_r+0x1c>
 800cb0a:	682b      	ldr	r3, [r5, #0]
 800cb0c:	b103      	cbz	r3, 800cb10 <_fstat_r+0x1c>
 800cb0e:	6023      	str	r3, [r4, #0]
 800cb10:	bd38      	pop	{r3, r4, r5, pc}
 800cb12:	bf00      	nop
 800cb14:	200048f0 	.word	0x200048f0

0800cb18 <_isatty_r>:
 800cb18:	b538      	push	{r3, r4, r5, lr}
 800cb1a:	4d06      	ldr	r5, [pc, #24]	; (800cb34 <_isatty_r+0x1c>)
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	4604      	mov	r4, r0
 800cb20:	4608      	mov	r0, r1
 800cb22:	602b      	str	r3, [r5, #0]
 800cb24:	f7f4 fa23 	bl	8000f6e <_isatty>
 800cb28:	1c43      	adds	r3, r0, #1
 800cb2a:	d102      	bne.n	800cb32 <_isatty_r+0x1a>
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	b103      	cbz	r3, 800cb32 <_isatty_r+0x1a>
 800cb30:	6023      	str	r3, [r4, #0]
 800cb32:	bd38      	pop	{r3, r4, r5, pc}
 800cb34:	200048f0 	.word	0x200048f0

0800cb38 <_lseek_r>:
 800cb38:	b538      	push	{r3, r4, r5, lr}
 800cb3a:	4d07      	ldr	r5, [pc, #28]	; (800cb58 <_lseek_r+0x20>)
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	4608      	mov	r0, r1
 800cb40:	4611      	mov	r1, r2
 800cb42:	2200      	movs	r2, #0
 800cb44:	602a      	str	r2, [r5, #0]
 800cb46:	461a      	mov	r2, r3
 800cb48:	f7f4 fa1c 	bl	8000f84 <_lseek>
 800cb4c:	1c43      	adds	r3, r0, #1
 800cb4e:	d102      	bne.n	800cb56 <_lseek_r+0x1e>
 800cb50:	682b      	ldr	r3, [r5, #0]
 800cb52:	b103      	cbz	r3, 800cb56 <_lseek_r+0x1e>
 800cb54:	6023      	str	r3, [r4, #0]
 800cb56:	bd38      	pop	{r3, r4, r5, pc}
 800cb58:	200048f0 	.word	0x200048f0

0800cb5c <_read_r>:
 800cb5c:	b538      	push	{r3, r4, r5, lr}
 800cb5e:	4d07      	ldr	r5, [pc, #28]	; (800cb7c <_read_r+0x20>)
 800cb60:	4604      	mov	r4, r0
 800cb62:	4608      	mov	r0, r1
 800cb64:	4611      	mov	r1, r2
 800cb66:	2200      	movs	r2, #0
 800cb68:	602a      	str	r2, [r5, #0]
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	f7f4 f9aa 	bl	8000ec4 <_read>
 800cb70:	1c43      	adds	r3, r0, #1
 800cb72:	d102      	bne.n	800cb7a <_read_r+0x1e>
 800cb74:	682b      	ldr	r3, [r5, #0]
 800cb76:	b103      	cbz	r3, 800cb7a <_read_r+0x1e>
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	bd38      	pop	{r3, r4, r5, pc}
 800cb7c:	200048f0 	.word	0x200048f0

0800cb80 <_init>:
 800cb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb82:	bf00      	nop
 800cb84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb86:	bc08      	pop	{r3}
 800cb88:	469e      	mov	lr, r3
 800cb8a:	4770      	bx	lr

0800cb8c <_fini>:
 800cb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8e:	bf00      	nop
 800cb90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb92:	bc08      	pop	{r3}
 800cb94:	469e      	mov	lr, r3
 800cb96:	4770      	bx	lr
