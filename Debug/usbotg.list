
usbotg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c078  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037a8  0801c208  0801c208  0002c208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f9b0  0801f9b0  00030788  2**0
                  CONTENTS
  4 .ARM          00000008  0801f9b0  0801f9b0  0002f9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f9b8  0801f9b8  00030788  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f9b8  0801f9b8  0002f9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f9bc  0801f9bc  0002f9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000788  20000000  0801f9c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030788  2**0
                  CONTENTS
 10 .bss          0001888c  20000788  20000788  00030788  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  20019014  20019014  00030788  2**0
                  ALLOC
 12 .sram         00096000  68000000  08020148  00040000  2**2
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030788  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004bef7  00000000  00000000  000307b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000093ad  00000000  00000000  0007c6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e38  00000000  00000000  00085a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001c68  00000000  00000000  00087898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00033421  00000000  00000000  00089500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00036ebc  00000000  00000000  000bc921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6d74  00000000  00000000  000f37dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001da551  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008904  00000000  00000000  001da5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000788 	.word	0x20000788
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c1f0 	.word	0x0801c1f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000078c 	.word	0x2000078c
 80001cc:	0801c1f0 	.word	0x0801c1f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea6:	f001 fc1f 	bl	80026e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eaa:	f000 f881 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eae:	f000 f971 	bl	8001194 <MX_GPIO_Init>
  MX_FATFS_Init();
 8000eb2:	f009 fca1 	bl	800a7f8 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000eb6:	f018 f89b 	bl	8018ff0 <MX_USB_HOST_Init>
  MX_UART4_Init();
 8000eba:	f000 f921 	bl	8001100 <MX_UART4_Init>
  MX_DMA_Init();
 8000ebe:	f000 f949 	bl	8001154 <MX_DMA_Init>
  MX_DCMI_Init();
 8000ec2:	f000 f8e5 	bl	8001090 <MX_DCMI_Init>
  MX_FSMC_Init();
 8000ec6:	f000 fa4f 	bl	8001368 <MX_FSMC_Init>
  MX_LWIP_Init();
 8000eca:	f009 fddd 	bl	800aa88 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  while(APPLICATION_READY!=Appli_state)
 8000ece:	e001      	b.n	8000ed4 <main+0x34>
	  MX_USB_HOST_Process();
 8000ed0:	f018 f8b4 	bl	801903c <MX_USB_HOST_Process>
  while(APPLICATION_READY!=Appli_state)
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <main+0xec>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d1f9      	bne.n	8000ed0 <main+0x30>
//  printf("state %d\r\n",Appli_state);
//memset(testsram,0,10000);

 PY_OV2640_RGB565_CONFIG();
 8000edc:	f000 faa4 	bl	8001428 <PY_OV2640_RGB565_CONFIG>

 all_circle=(int)BUFFSIZE/MSS;
 8000ee0:	4b2b      	ldr	r3, [pc, #172]	; (8000f90 <main+0xf0>)
 8000ee2:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8000ee6:	601a      	str	r2, [r3, #0]
 left_bytes = BUFFSIZE%MSS;
 8000ee8:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <main+0xf4>)
 8000eea:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000eee:	601a      	str	r2, [r3, #0]
 if (left_bytes!=0)
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <main+0xf4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <main+0x62>
	  all_circle++;
 8000ef8:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <main+0xf0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	4a24      	ldr	r2, [pc, #144]	; (8000f90 <main+0xf0>)
 8000f00:	6013      	str	r3, [r2, #0]
 tcp_client_init();
 8000f02:	f001 fa11 	bl	8002328 <tcp_client_init>
 	 HAL_Delay(10000);
 8000f06:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f0a:	f001 fc5f 	bl	80027cc <HAL_Delay>
	__HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME);//使用帧中�?????????????????????????????
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <main+0xf8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <main+0xf8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f042 0201 	orr.w	r2, r2, #1
 8000f1c:	60da      	str	r2, [r3, #12]
	 HAL_DCMI_DisableCrop (&hdcmi);
 8000f1e:	481e      	ldr	r0, [pc, #120]	; (8000f98 <main+0xf8>)
 8000f20:	f001 ff79 	bl	8002e16 <HAL_DCMI_DisableCrop>
	 DCMI_RN = HEIGHT;
 8000f24:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <main+0xfc>)
 8000f26:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000f2a:	601a      	str	r2, [r3, #0]
	 DCMI_CN = 1280;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <main+0x100>)
 8000f2e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000f32:	601a      	str	r2, [r3, #0]
	 DCMI_RS =0;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <main+0x104>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
	 DCMI_CS = 0;
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <main+0x108>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
	 HAL_DCMI_ConfigCrop (&hdcmi, DCMI_CS, DCMI_RS, DCMI_CN , DCMI_RN);
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <main+0x108>)
 8000f42:	6819      	ldr	r1, [r3, #0]
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <main+0x104>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <main+0x100>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <main+0xfc>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	4603      	mov	r3, r0
 8000f54:	4810      	ldr	r0, [pc, #64]	; (8000f98 <main+0xf8>)
 8000f56:	f001 ff2b 	bl	8002db0 <HAL_DCMI_ConfigCrop>
	 HAL_Delay(1);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f001 fc36 	bl	80027cc <HAL_Delay>
	 HAL_DCMI_EnableCrop (&hdcmi);
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <main+0xf8>)
 8000f62:	f001 ff82 	bl	8002e6a <HAL_DCMI_EnableCrop>
	 HAL_DCMI_Start_DMA(&hdcmi,DCMI_MODE_CONTINUOUS,(uint32_t)testsram,DCMI_CN*DCMI_RN/4);
 8000f66:	4911      	ldr	r1, [pc, #68]	; (8000fac <main+0x10c>)
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <main+0x100>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <main+0xfc>)
 8000f6e:	6812      	ldr	r2, [r2, #0]
 8000f70:	fb02 f303 	mul.w	r3, r2, r3
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	460a      	mov	r2, r1
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4807      	ldr	r0, [pc, #28]	; (8000f98 <main+0xf8>)
 8000f7c:	f001 fd5c 	bl	8002a38 <HAL_DCMI_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000f80:	f009 feb4 	bl	800acec <MX_LWIP_Process>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f84:	f018 f85a 	bl	801903c <MX_USB_HOST_Process>
	  MX_LWIP_Process();
 8000f88:	e7fa      	b.n	8000f80 <main+0xe0>
 8000f8a:	bf00      	nop
 8000f8c:	20000952 	.word	0x20000952
 8000f90:	200007a4 	.word	0x200007a4
 8000f94:	200007a8 	.word	0x200007a8
 8000f98:	20002a78 	.word	0x20002a78
 8000f9c:	200007b0 	.word	0x200007b0
 8000fa0:	200007b4 	.word	0x200007b4
 8000fa4:	200007b8 	.word	0x200007b8
 8000fa8:	200007bc 	.word	0x200007bc
 8000fac:	68000000 	.word	0x68000000

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	; 0x50
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	2230      	movs	r2, #48	; 0x30
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f018 fb9e 	bl	8019700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <SystemClock_Config+0xd8>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	4a2a      	ldr	r2, [pc, #168]	; (8001088 <SystemClock_Config+0xd8>)
 8000fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe4:	4b28      	ldr	r3, [pc, #160]	; (8001088 <SystemClock_Config+0xd8>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4b25      	ldr	r3, [pc, #148]	; (800108c <SystemClock_Config+0xdc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a24      	ldr	r2, [pc, #144]	; (800108c <SystemClock_Config+0xdc>)
 8000ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <SystemClock_Config+0xdc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800100c:	2301      	movs	r3, #1
 800100e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001016:	2302      	movs	r3, #2
 8001018:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800101e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001020:	2304      	movs	r3, #4
 8001022:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001024:	2360      	movs	r3, #96	; 0x60
 8001026:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001028:	2302      	movs	r3, #2
 800102a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800102c:	2304      	movs	r3, #4
 800102e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	4618      	mov	r0, r3
 8001036:	f006 fecf 	bl	8007dd8 <HAL_RCC_OscConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001040:	f000 fa34 	bl	80014ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001044:	230f      	movs	r3, #15
 8001046:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001048:	2302      	movs	r3, #2
 800104a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001050:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001054:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2103      	movs	r1, #3
 8001062:	4618      	mov	r0, r3
 8001064:	f007 f930 	bl	80082c8 <HAL_RCC_ClockConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800106e:	f000 fa1d 	bl	80014ac <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8001072:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001076:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 800107a:	2000      	movs	r0, #0
 800107c:	f007 fa0a 	bl	8008494 <HAL_RCC_MCOConfig>
}
 8001080:	bf00      	nop
 8001082:	3750      	adds	r7, #80	; 0x50
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40023800 	.word	0x40023800
 800108c:	40007000 	.word	0x40007000

08001090 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_DCMI_Init+0x68>)
 8001096:	4a19      	ldr	r2, [pc, #100]	; (80010fc <MX_DCMI_Init+0x6c>)
 8001098:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_DCMI_Init+0x68>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <MX_DCMI_Init+0x68>)
 80010a2:	2220      	movs	r2, #32
 80010a4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_DCMI_Init+0x68>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_DCMI_Init+0x68>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_DCMI_Init+0x68>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_DCMI_Init+0x68>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_DCMI_Init+0x68>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <MX_DCMI_Init+0x68>)
 80010c6:	f001 ffa6 	bl	8003016 <HAL_DCMI_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 80010d0:	f000 f9ec 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

	__HAL_DCMI_ENABLE_IT(&hdcmi,DCMI_IT_FRAME);
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_DCMI_Init+0x68>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <MX_DCMI_Init+0x68>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f042 0201 	orr.w	r2, r2, #1
 80010e2:	60da      	str	r2, [r3, #12]
	__HAL_DCMI_ENABLE(&hdcmi);
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <MX_DCMI_Init+0x68>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <MX_DCMI_Init+0x68>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010f2:	601a      	str	r2, [r3, #0]

  /* USER CODE END DCMI_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20002a78 	.word	0x20002a78
 80010fc:	50050000 	.word	0x50050000

08001100 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_UART4_Init+0x4c>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <MX_UART4_Init+0x50>)
 8001108:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <MX_UART4_Init+0x4c>)
 800110c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001110:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_UART4_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_UART4_Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <MX_UART4_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_UART4_Init+0x4c>)
 8001126:	220c      	movs	r2, #12
 8001128:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <MX_UART4_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_UART4_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_UART4_Init+0x4c>)
 8001138:	f007 fb6e 	bl	8008818 <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001142:	f000 f9b3 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20002ac0 	.word	0x20002ac0
 8001150:	40004c00 	.word	0x40004c00

08001154 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_DMA_Init+0x3c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <MX_DMA_Init+0x3c>)
 8001164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_DMA_Init+0x3c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 3, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2103      	movs	r1, #3
 800117a:	2039      	movs	r0, #57	; 0x39
 800117c:	f001 fc25 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001180:	2039      	movs	r0, #57	; 0x39
 8001182:	f001 fc3e 	bl	8002a02 <HAL_NVIC_EnableIRQ>

}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08e      	sub	sp, #56	; 0x38
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
 80011ae:	4b69      	ldr	r3, [pc, #420]	; (8001354 <MX_GPIO_Init+0x1c0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a68      	ldr	r2, [pc, #416]	; (8001354 <MX_GPIO_Init+0x1c0>)
 80011b4:	f043 0310 	orr.w	r3, r3, #16
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b66      	ldr	r3, [pc, #408]	; (8001354 <MX_GPIO_Init+0x1c0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	623b      	str	r3, [r7, #32]
 80011c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
 80011ca:	4b62      	ldr	r3, [pc, #392]	; (8001354 <MX_GPIO_Init+0x1c0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a61      	ldr	r2, [pc, #388]	; (8001354 <MX_GPIO_Init+0x1c0>)
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b5f      	ldr	r3, [pc, #380]	; (8001354 <MX_GPIO_Init+0x1c0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
 80011e6:	4b5b      	ldr	r3, [pc, #364]	; (8001354 <MX_GPIO_Init+0x1c0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a5a      	ldr	r2, [pc, #360]	; (8001354 <MX_GPIO_Init+0x1c0>)
 80011ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b58      	ldr	r3, [pc, #352]	; (8001354 <MX_GPIO_Init+0x1c0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	4b54      	ldr	r3, [pc, #336]	; (8001354 <MX_GPIO_Init+0x1c0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a53      	ldr	r2, [pc, #332]	; (8001354 <MX_GPIO_Init+0x1c0>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b51      	ldr	r3, [pc, #324]	; (8001354 <MX_GPIO_Init+0x1c0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <MX_GPIO_Init+0x1c0>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a4c      	ldr	r2, [pc, #304]	; (8001354 <MX_GPIO_Init+0x1c0>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <MX_GPIO_Init+0x1c0>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b46      	ldr	r3, [pc, #280]	; (8001354 <MX_GPIO_Init+0x1c0>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a45      	ldr	r2, [pc, #276]	; (8001354 <MX_GPIO_Init+0x1c0>)
 8001240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b43      	ldr	r3, [pc, #268]	; (8001354 <MX_GPIO_Init+0x1c0>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	4b3f      	ldr	r3, [pc, #252]	; (8001354 <MX_GPIO_Init+0x1c0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a3e      	ldr	r2, [pc, #248]	; (8001354 <MX_GPIO_Init+0x1c0>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b3c      	ldr	r3, [pc, #240]	; (8001354 <MX_GPIO_Init+0x1c0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b38      	ldr	r3, [pc, #224]	; (8001354 <MX_GPIO_Init+0x1c0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a37      	ldr	r2, [pc, #220]	; (8001354 <MX_GPIO_Init+0x1c0>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b35      	ldr	r3, [pc, #212]	; (8001354 <MX_GPIO_Init+0x1c0>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800128a:	2201      	movs	r2, #1
 800128c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001290:	4831      	ldr	r0, [pc, #196]	; (8001358 <MX_GPIO_Init+0x1c4>)
 8001292:	f005 f817 	bl	80062c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	2108      	movs	r1, #8
 800129a:	4830      	ldr	r0, [pc, #192]	; (800135c <MX_GPIO_Init+0x1c8>)
 800129c:	f005 f812 	bl	80062c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	21c0      	movs	r1, #192	; 0xc0
 80012a4:	482d      	ldr	r0, [pc, #180]	; (800135c <MX_GPIO_Init+0x1c8>)
 80012a6:	f005 f80d 	bl	80062c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b0:	482b      	ldr	r0, [pc, #172]	; (8001360 <MX_GPIO_Init+0x1cc>)
 80012b2:	f005 f807 	bl	80062c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012cc:	4619      	mov	r1, r3
 80012ce:	4822      	ldr	r0, [pc, #136]	; (8001358 <MX_GPIO_Init+0x1c4>)
 80012d0:	f004 fe44 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80012e6:	2300      	movs	r3, #0
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ee:	4619      	mov	r1, r3
 80012f0:	481c      	ldr	r0, [pc, #112]	; (8001364 <MX_GPIO_Init+0x1d0>)
 80012f2:	f004 fe33 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012f6:	2308      	movs	r3, #8
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	4813      	ldr	r0, [pc, #76]	; (800135c <MX_GPIO_Init+0x1c8>)
 800130e:	f004 fe25 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001312:	23c0      	movs	r3, #192	; 0xc0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800131a:	2301      	movs	r3, #1
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001326:	4619      	mov	r1, r3
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <MX_GPIO_Init+0x1c8>)
 800132a:	f004 fe17 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800132e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001338:	2301      	movs	r3, #1
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800133c:	2302      	movs	r3, #2
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <MX_GPIO_Init+0x1cc>)
 8001348:	f004 fe08 	bl	8005f5c <HAL_GPIO_Init>

}
 800134c:	bf00      	nop
 800134e:	3738      	adds	r7, #56	; 0x38
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40023800 	.word	0x40023800
 8001358:	40020400 	.word	0x40020400
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021800 	.word	0x40021800
 8001364:	40020000 	.word	0x40020000

08001368 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
 800137c:	615a      	str	r2, [r3, #20]
 800137e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 8001380:	4b27      	ldr	r3, [pc, #156]	; (8001420 <MX_FSMC_Init+0xb8>)
 8001382:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001386:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <MX_FSMC_Init+0xb8>)
 800138a:	4a26      	ldr	r2, [pc, #152]	; (8001424 <MX_FSMC_Init+0xbc>)
 800138c:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <MX_FSMC_Init+0xb8>)
 8001390:	2204      	movs	r2, #4
 8001392:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <MX_FSMC_Init+0xb8>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <MX_FSMC_Init+0xb8>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_FSMC_Init+0xb8>)
 80013a2:	2210      	movs	r2, #16
 80013a4:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <MX_FSMC_Init+0xb8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80013ac:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_FSMC_Init+0xb8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <MX_FSMC_Init+0xb8>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <MX_FSMC_Init+0xb8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_FSMC_Init+0xb8>)
 80013c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <MX_FSMC_Init+0xb8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_FSMC_Init+0xb8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <MX_FSMC_Init+0xb8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_FSMC_Init+0xb8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_FSMC_Init+0xb8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80013e8:	230f      	movs	r3, #15
 80013ea:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 80013ec:	2304      	movs	r3, #4
 80013ee:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80013f4:	2310      	movs	r3, #16
 80013f6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80013f8:	2311      	movs	r3, #17
 80013fa:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <MX_FSMC_Init+0xb8>)
 8001408:	f007 f9c2 	bl	8008790 <HAL_SRAM_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8001412:	f000 f84b 	bl	80014ac <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001416:	bf00      	nop
 8001418:	3720      	adds	r7, #32
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000198c 	.word	0x2000198c
 8001424:	a0000104 	.word	0xa0000104

08001428 <PY_OV2640_RGB565_CONFIG>:
	if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK) {
		Error_Handler();
	}
}

void PY_OV2640_RGB565_CONFIG(void) {
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	/*Camera Interface*/
	SCCB_Rst();     //hard reset
 800142c:	f000 faa6 	bl	800197c <SCCB_Rst>
	HAL_Delay(100);
 8001430:	2064      	movs	r0, #100	; 0x64
 8001432:	f001 f9cb 	bl	80027cc <HAL_Delay>

	//SCCB_WR_Reg(0xff, 0x01);   //soft reset
	//SCCB_WR_Reg(0x12, 0x80);
	HAL_Delay(100);
 8001436:	2064      	movs	r0, #100	; 0x64
 8001438:	f001 f9c8 	bl	80027cc <HAL_Delay>

	ov2640_verh = SCCB_RD_Reg(0x1c);
 800143c:	201c      	movs	r0, #28
 800143e:	f000 f9f1 	bl	8001824 <SCCB_RD_Reg>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <PY_OV2640_RGB565_CONFIG+0x7c>)
 8001448:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 800144a:	2032      	movs	r0, #50	; 0x32
 800144c:	f001 f9be 	bl	80027cc <HAL_Delay>
	ov2640_verl = SCCB_RD_Reg(0x1d);
 8001450:	201d      	movs	r0, #29
 8001452:	f000 f9e7 	bl	8001824 <SCCB_RD_Reg>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <PY_OV2640_RGB565_CONFIG+0x80>)
 800145c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 800145e:	2032      	movs	r0, #50	; 0x32
 8001460:	f001 f9b4 	bl	80027cc <HAL_Delay>

	while ((ov2640_verh == 0xff) || (ov2640_verl == 0xff)) {
 8001464:	e007      	b.n	8001476 <PY_OV2640_RGB565_CONFIG+0x4e>
		//HAL_UART_Transmit(&huart1, &ov2640_verh, 1, 0xFFFFFF);
		HAL_Delay(500);
 8001466:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800146a:	f001 f9af 	bl	80027cc <HAL_Delay>
		//HAL_UART_Transmit(&huart1, &ov2640_verl, 1, 0xFFFFFF);
		HAL_Delay(500);
 800146e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001472:	f001 f9ab 	bl	80027cc <HAL_Delay>
	while ((ov2640_verh == 0xff) || (ov2640_verl == 0xff)) {
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <PY_OV2640_RGB565_CONFIG+0x7c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2bff      	cmp	r3, #255	; 0xff
 800147c:	d0f3      	beq.n	8001466 <PY_OV2640_RGB565_CONFIG+0x3e>
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <PY_OV2640_RGB565_CONFIG+0x80>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2bff      	cmp	r3, #255	; 0xff
 8001484:	d0ef      	beq.n	8001466 <PY_OV2640_RGB565_CONFIG+0x3e>
	}

	OV2640_UXGA_Init();
 8001486:	f000 fa99 	bl	80019bc <OV2640_UXGA_Init>

	//pix speed adjustment

	OV2640_RGB565_Mode();
 800148a:	f000 fabd 	bl	8001a08 <OV2640_RGB565_Mode>
	OV2640_OutSize_Set(640, 480);
 800148e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001492:	f44f 7020 	mov.w	r0, #640	; 0x280
 8001496:	f000 fad9 	bl	8001a4c <OV2640_OutSize_Set>
	HAL_Delay(200);
 800149a:	20c8      	movs	r0, #200	; 0xc8
 800149c:	f001 f996 	bl	80027cc <HAL_Delay>

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000057c 	.word	0x2000057c
 80014a8:	2000057d 	.word	0x2000057d

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b0:	b672      	cpsid	i
}
 80014b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <Error_Handler+0x8>
	...

080014b8 <SCCB_Start>:
#include <ov2640.h>

//for not open-drain bus

void SCCB_Start(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
    SCCB_SDA_H;
 80014bc:	2201      	movs	r2, #1
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	4814      	ldr	r0, [pc, #80]	; (8001514 <SCCB_Start+0x5c>)
 80014c2:	f004 feff 	bl	80062c4 <HAL_GPIO_WritePin>
    SCCB_SCL_H;
 80014c6:	2201      	movs	r2, #1
 80014c8:	2140      	movs	r1, #64	; 0x40
 80014ca:	4812      	ldr	r0, [pc, #72]	; (8001514 <SCCB_Start+0x5c>)
 80014cc:	f004 fefa 	bl	80062c4 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <SCCB_Start+0x60>)
 80014d2:	2278      	movs	r2, #120	; 0x78
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	bf00      	nop
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <SCCB_Start+0x60>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	1e5a      	subs	r2, r3, #1
 80014de:	490e      	ldr	r1, [pc, #56]	; (8001518 <SCCB_Start+0x60>)
 80014e0:	600a      	str	r2, [r1, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f8      	bne.n	80014d8 <SCCB_Start+0x20>
    SCCB_SDA_L;
 80014e6:	2200      	movs	r2, #0
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	480a      	ldr	r0, [pc, #40]	; (8001514 <SCCB_Start+0x5c>)
 80014ec:	f004 feea 	bl	80062c4 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <SCCB_Start+0x60>)
 80014f2:	2278      	movs	r2, #120	; 0x78
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	bf00      	nop
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <SCCB_Start+0x60>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	1e5a      	subs	r2, r3, #1
 80014fe:	4906      	ldr	r1, [pc, #24]	; (8001518 <SCCB_Start+0x60>)
 8001500:	600a      	str	r2, [r1, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f8      	bne.n	80014f8 <SCCB_Start+0x40>
    SCCB_SCL_L;
 8001506:	2200      	movs	r2, #0
 8001508:	2140      	movs	r1, #64	; 0x40
 800150a:	4802      	ldr	r0, [pc, #8]	; (8001514 <SCCB_Start+0x5c>)
 800150c:	f004 feda 	bl	80062c4 <HAL_GPIO_WritePin>
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40020c00 	.word	0x40020c00
 8001518:	20002abc 	.word	0x20002abc

0800151c <SCCB_Stop>:


void SCCB_Stop(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
    SCCB_SDA_L;
 8001520:	2200      	movs	r2, #0
 8001522:	2180      	movs	r1, #128	; 0x80
 8001524:	4818      	ldr	r0, [pc, #96]	; (8001588 <SCCB_Stop+0x6c>)
 8001526:	f004 fecd 	bl	80062c4 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <SCCB_Stop+0x70>)
 800152c:	2278      	movs	r2, #120	; 0x78
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	bf00      	nop
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <SCCB_Stop+0x70>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	1e5a      	subs	r2, r3, #1
 8001538:	4914      	ldr	r1, [pc, #80]	; (800158c <SCCB_Stop+0x70>)
 800153a:	600a      	str	r2, [r1, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f8      	bne.n	8001532 <SCCB_Stop+0x16>
    SCCB_SCL_H;
 8001540:	2201      	movs	r2, #1
 8001542:	2140      	movs	r1, #64	; 0x40
 8001544:	4810      	ldr	r0, [pc, #64]	; (8001588 <SCCB_Stop+0x6c>)
 8001546:	f004 febd 	bl	80062c4 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <SCCB_Stop+0x70>)
 800154c:	2278      	movs	r2, #120	; 0x78
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	bf00      	nop
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <SCCB_Stop+0x70>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	1e5a      	subs	r2, r3, #1
 8001558:	490c      	ldr	r1, [pc, #48]	; (800158c <SCCB_Stop+0x70>)
 800155a:	600a      	str	r2, [r1, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f8      	bne.n	8001552 <SCCB_Stop+0x36>
    SCCB_SDA_H;
 8001560:	2201      	movs	r2, #1
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	4808      	ldr	r0, [pc, #32]	; (8001588 <SCCB_Stop+0x6c>)
 8001566:	f004 fead 	bl	80062c4 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <SCCB_Stop+0x70>)
 800156c:	2278      	movs	r2, #120	; 0x78
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	bf00      	nop
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <SCCB_Stop+0x70>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	1e5a      	subs	r2, r3, #1
 8001578:	4904      	ldr	r1, [pc, #16]	; (800158c <SCCB_Stop+0x70>)
 800157a:	600a      	str	r2, [r1, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f8      	bne.n	8001572 <SCCB_Stop+0x56>
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40020c00 	.word	0x40020c00
 800158c:	20002abc 	.word	0x20002abc

08001590 <SCCB_No_Ack>:

void SCCB_No_Ack(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 8001594:	2001      	movs	r0, #1
 8001596:	f001 f919 	bl	80027cc <HAL_Delay>
	SCCB_SDA_H;
 800159a:	2201      	movs	r2, #1
 800159c:	2180      	movs	r1, #128	; 0x80
 800159e:	481b      	ldr	r0, [pc, #108]	; (800160c <SCCB_No_Ack+0x7c>)
 80015a0:	f004 fe90 	bl	80062c4 <HAL_GPIO_WritePin>
	SCCB_SCL_H;
 80015a4:	2201      	movs	r2, #1
 80015a6:	2140      	movs	r1, #64	; 0x40
 80015a8:	4818      	ldr	r0, [pc, #96]	; (800160c <SCCB_No_Ack+0x7c>)
 80015aa:	f004 fe8b 	bl	80062c4 <HAL_GPIO_WritePin>

	tickdelay = ticknumber;while(tickdelay--);
 80015ae:	4b18      	ldr	r3, [pc, #96]	; (8001610 <SCCB_No_Ack+0x80>)
 80015b0:	2278      	movs	r2, #120	; 0x78
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	bf00      	nop
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <SCCB_No_Ack+0x80>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	1e5a      	subs	r2, r3, #1
 80015bc:	4914      	ldr	r1, [pc, #80]	; (8001610 <SCCB_No_Ack+0x80>)
 80015be:	600a      	str	r2, [r1, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f8      	bne.n	80015b6 <SCCB_No_Ack+0x26>
	SCCB_SCL_L;
 80015c4:	2200      	movs	r2, #0
 80015c6:	2140      	movs	r1, #64	; 0x40
 80015c8:	4810      	ldr	r0, [pc, #64]	; (800160c <SCCB_No_Ack+0x7c>)
 80015ca:	f004 fe7b 	bl	80062c4 <HAL_GPIO_WritePin>

	tickdelay = ticknumber;while(tickdelay--);
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <SCCB_No_Ack+0x80>)
 80015d0:	2278      	movs	r2, #120	; 0x78
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	bf00      	nop
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <SCCB_No_Ack+0x80>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	490c      	ldr	r1, [pc, #48]	; (8001610 <SCCB_No_Ack+0x80>)
 80015de:	600a      	str	r2, [r1, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f8      	bne.n	80015d6 <SCCB_No_Ack+0x46>
	SCCB_SDA_L;
 80015e4:	2200      	movs	r2, #0
 80015e6:	2180      	movs	r1, #128	; 0x80
 80015e8:	4808      	ldr	r0, [pc, #32]	; (800160c <SCCB_No_Ack+0x7c>)
 80015ea:	f004 fe6b 	bl	80062c4 <HAL_GPIO_WritePin>

	tickdelay = ticknumber;while(tickdelay--);
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <SCCB_No_Ack+0x80>)
 80015f0:	2278      	movs	r2, #120	; 0x78
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	bf00      	nop
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <SCCB_No_Ack+0x80>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	1e5a      	subs	r2, r3, #1
 80015fc:	4904      	ldr	r1, [pc, #16]	; (8001610 <SCCB_No_Ack+0x80>)
 80015fe:	600a      	str	r2, [r1, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f8      	bne.n	80015f6 <SCCB_No_Ack+0x66>
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40020c00 	.word	0x40020c00
 8001610:	20002abc 	.word	0x20002abc

08001614 <SCCB_WR_Byte>:

uint8_t SCCB_WR_Byte(uint8_t dat)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	uint8_t j,res;
	for(j=0;j<8;j++)
 800161e:	2300      	movs	r3, #0
 8001620:	73fb      	strb	r3, [r7, #15]
 8001622:	e034      	b.n	800168e <SCCB_WR_Byte+0x7a>
	{
		if(dat&0x80)SCCB_SDA_H;
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	da05      	bge.n	8001638 <SCCB_WR_Byte+0x24>
 800162c:	2201      	movs	r2, #1
 800162e:	2180      	movs	r1, #128	; 0x80
 8001630:	4833      	ldr	r0, [pc, #204]	; (8001700 <SCCB_WR_Byte+0xec>)
 8001632:	f004 fe47 	bl	80062c4 <HAL_GPIO_WritePin>
 8001636:	e004      	b.n	8001642 <SCCB_WR_Byte+0x2e>
		else SCCB_SDA_L;
 8001638:	2200      	movs	r2, #0
 800163a:	2180      	movs	r1, #128	; 0x80
 800163c:	4830      	ldr	r0, [pc, #192]	; (8001700 <SCCB_WR_Byte+0xec>)
 800163e:	f004 fe41 	bl	80062c4 <HAL_GPIO_WritePin>
		dat<<=1;
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	71fb      	strb	r3, [r7, #7]

		tickdelay = ticknumber;while(tickdelay--);
 8001648:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <SCCB_WR_Byte+0xf0>)
 800164a:	2278      	movs	r2, #120	; 0x78
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	bf00      	nop
 8001650:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <SCCB_WR_Byte+0xf0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	1e5a      	subs	r2, r3, #1
 8001656:	492b      	ldr	r1, [pc, #172]	; (8001704 <SCCB_WR_Byte+0xf0>)
 8001658:	600a      	str	r2, [r1, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f8      	bne.n	8001650 <SCCB_WR_Byte+0x3c>
		SCCB_SCL_H;
 800165e:	2201      	movs	r2, #1
 8001660:	2140      	movs	r1, #64	; 0x40
 8001662:	4827      	ldr	r0, [pc, #156]	; (8001700 <SCCB_WR_Byte+0xec>)
 8001664:	f004 fe2e 	bl	80062c4 <HAL_GPIO_WritePin>

		tickdelay = ticknumber;while(tickdelay--);
 8001668:	4b26      	ldr	r3, [pc, #152]	; (8001704 <SCCB_WR_Byte+0xf0>)
 800166a:	2278      	movs	r2, #120	; 0x78
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	bf00      	nop
 8001670:	4b24      	ldr	r3, [pc, #144]	; (8001704 <SCCB_WR_Byte+0xf0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	1e5a      	subs	r2, r3, #1
 8001676:	4923      	ldr	r1, [pc, #140]	; (8001704 <SCCB_WR_Byte+0xf0>)
 8001678:	600a      	str	r2, [r1, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f8      	bne.n	8001670 <SCCB_WR_Byte+0x5c>
		SCCB_SCL_L;
 800167e:	2200      	movs	r2, #0
 8001680:	2140      	movs	r1, #64	; 0x40
 8001682:	481f      	ldr	r0, [pc, #124]	; (8001700 <SCCB_WR_Byte+0xec>)
 8001684:	f004 fe1e 	bl	80062c4 <HAL_GPIO_WritePin>
	for(j=0;j<8;j++)
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	3301      	adds	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	2b07      	cmp	r3, #7
 8001692:	d9c7      	bls.n	8001624 <SCCB_WR_Byte+0x10>
	}
	SCCB_SDA_IN();
 8001694:	f000 f918 	bl	80018c8 <SCCB_SDA_IN>

	tickdelay = ticknumber;while(tickdelay--);
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <SCCB_WR_Byte+0xf0>)
 800169a:	2278      	movs	r2, #120	; 0x78
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	bf00      	nop
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <SCCB_WR_Byte+0xf0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	1e5a      	subs	r2, r3, #1
 80016a6:	4917      	ldr	r1, [pc, #92]	; (8001704 <SCCB_WR_Byte+0xf0>)
 80016a8:	600a      	str	r2, [r1, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f8      	bne.n	80016a0 <SCCB_WR_Byte+0x8c>
	SCCB_SCL_H;
 80016ae:	2201      	movs	r2, #1
 80016b0:	2140      	movs	r1, #64	; 0x40
 80016b2:	4813      	ldr	r0, [pc, #76]	; (8001700 <SCCB_WR_Byte+0xec>)
 80016b4:	f004 fe06 	bl	80062c4 <HAL_GPIO_WritePin>

	tickdelay = ticknumber;while(tickdelay--);
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <SCCB_WR_Byte+0xf0>)
 80016ba:	2278      	movs	r2, #120	; 0x78
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	bf00      	nop
 80016c0:	4b10      	ldr	r3, [pc, #64]	; (8001704 <SCCB_WR_Byte+0xf0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	1e5a      	subs	r2, r3, #1
 80016c6:	490f      	ldr	r1, [pc, #60]	; (8001704 <SCCB_WR_Byte+0xf0>)
 80016c8:	600a      	str	r2, [r1, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f8      	bne.n	80016c0 <SCCB_WR_Byte+0xac>
	if(SCCB_READ_SDA)res=1;
 80016ce:	2180      	movs	r1, #128	; 0x80
 80016d0:	480b      	ldr	r0, [pc, #44]	; (8001700 <SCCB_WR_Byte+0xec>)
 80016d2:	f004 fddf 	bl	8006294 <HAL_GPIO_ReadPin>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <SCCB_WR_Byte+0xce>
 80016dc:	2301      	movs	r3, #1
 80016de:	73bb      	strb	r3, [r7, #14]
 80016e0:	e001      	b.n	80016e6 <SCCB_WR_Byte+0xd2>
	else res=0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	73bb      	strb	r3, [r7, #14]
	SCCB_SCL_L;
 80016e6:	2200      	movs	r2, #0
 80016e8:	2140      	movs	r1, #64	; 0x40
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <SCCB_WR_Byte+0xec>)
 80016ec:	f004 fdea 	bl	80062c4 <HAL_GPIO_WritePin>
	SCCB_SDA_OUT();
 80016f0:	f000 f918 	bl	8001924 <SCCB_SDA_OUT>
	return res;
 80016f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40020c00 	.word	0x40020c00
 8001704:	20002abc 	.word	0x20002abc

08001708 <SCCB_RD_Byte>:

uint8_t SCCB_RD_Byte(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
	uint8_t temp=0,j;
 800170e:	2300      	movs	r3, #0
 8001710:	71fb      	strb	r3, [r7, #7]
	SCCB_SDA_IN();
 8001712:	f000 f8d9 	bl	80018c8 <SCCB_SDA_IN>
	for(j=8;j>0;j--)
 8001716:	2308      	movs	r3, #8
 8001718:	71bb      	strb	r3, [r7, #6]
 800171a:	e02f      	b.n	800177c <SCCB_RD_Byte+0x74>
	{

		tickdelay = ticknumber;while(tickdelay--);
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <SCCB_RD_Byte+0x88>)
 800171e:	2278      	movs	r2, #120	; 0x78
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	bf00      	nop
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <SCCB_RD_Byte+0x88>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	1e5a      	subs	r2, r3, #1
 800172a:	4919      	ldr	r1, [pc, #100]	; (8001790 <SCCB_RD_Byte+0x88>)
 800172c:	600a      	str	r2, [r1, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f8      	bne.n	8001724 <SCCB_RD_Byte+0x1c>
	    SCCB_SCL_H;
 8001732:	2201      	movs	r2, #1
 8001734:	2140      	movs	r1, #64	; 0x40
 8001736:	4817      	ldr	r0, [pc, #92]	; (8001794 <SCCB_RD_Byte+0x8c>)
 8001738:	f004 fdc4 	bl	80062c4 <HAL_GPIO_WritePin>
		temp=temp<<1;
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	71fb      	strb	r3, [r7, #7]
		if(SCCB_READ_SDA)temp++;
 8001742:	2180      	movs	r1, #128	; 0x80
 8001744:	4813      	ldr	r0, [pc, #76]	; (8001794 <SCCB_RD_Byte+0x8c>)
 8001746:	f004 fda5 	bl	8006294 <HAL_GPIO_ReadPin>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d002      	beq.n	8001756 <SCCB_RD_Byte+0x4e>
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	3301      	adds	r3, #1
 8001754:	71fb      	strb	r3, [r7, #7]

		tickdelay = ticknumber;while(tickdelay--);
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <SCCB_RD_Byte+0x88>)
 8001758:	2278      	movs	r2, #120	; 0x78
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	bf00      	nop
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <SCCB_RD_Byte+0x88>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	1e5a      	subs	r2, r3, #1
 8001764:	490a      	ldr	r1, [pc, #40]	; (8001790 <SCCB_RD_Byte+0x88>)
 8001766:	600a      	str	r2, [r1, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f8      	bne.n	800175e <SCCB_RD_Byte+0x56>
		SCCB_SCL_L;
 800176c:	2200      	movs	r2, #0
 800176e:	2140      	movs	r1, #64	; 0x40
 8001770:	4808      	ldr	r0, [pc, #32]	; (8001794 <SCCB_RD_Byte+0x8c>)
 8001772:	f004 fda7 	bl	80062c4 <HAL_GPIO_WritePin>
	for(j=8;j>0;j--)
 8001776:	79bb      	ldrb	r3, [r7, #6]
 8001778:	3b01      	subs	r3, #1
 800177a:	71bb      	strb	r3, [r7, #6]
 800177c:	79bb      	ldrb	r3, [r7, #6]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1cc      	bne.n	800171c <SCCB_RD_Byte+0x14>
	}
	SCCB_SDA_OUT();
 8001782:	f000 f8cf 	bl	8001924 <SCCB_SDA_OUT>
	return temp;
 8001786:	79fb      	ldrb	r3, [r7, #7]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20002abc 	.word	0x20002abc
 8001794:	40020c00 	.word	0x40020c00

08001798 <SCCB_WR_Reg>:

uint8_t SCCB_WR_Reg(uint8_t reg,uint8_t data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	4613      	mov	r3, r2
 80017a6:	71bb      	strb	r3, [r7, #6]
	uint8_t res=0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]
	SCCB_Start();
 80017ac:	f7ff fe84 	bl	80014b8 <SCCB_Start>
	if(SCCB_WR_Byte(SCCB_ID_W))res=1;
 80017b0:	2060      	movs	r0, #96	; 0x60
 80017b2:	f7ff ff2f 	bl	8001614 <SCCB_WR_Byte>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SCCB_WR_Reg+0x28>
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]

	tickdelay = ticknumber;while(tickdelay--);
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <SCCB_WR_Reg+0x88>)
 80017c2:	2278      	movs	r2, #120	; 0x78
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	bf00      	nop
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <SCCB_WR_Reg+0x88>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	1e5a      	subs	r2, r3, #1
 80017ce:	4914      	ldr	r1, [pc, #80]	; (8001820 <SCCB_WR_Reg+0x88>)
 80017d0:	600a      	str	r2, [r1, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f8      	bne.n	80017c8 <SCCB_WR_Reg+0x30>
	if(SCCB_WR_Byte(reg))res=1;
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff1b 	bl	8001614 <SCCB_WR_Byte>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <SCCB_WR_Reg+0x50>
 80017e4:	2301      	movs	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]

	tickdelay = ticknumber;while(tickdelay--);
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <SCCB_WR_Reg+0x88>)
 80017ea:	2278      	movs	r2, #120	; 0x78
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	bf00      	nop
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <SCCB_WR_Reg+0x88>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	1e5a      	subs	r2, r3, #1
 80017f6:	490a      	ldr	r1, [pc, #40]	; (8001820 <SCCB_WR_Reg+0x88>)
 80017f8:	600a      	str	r2, [r1, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f8      	bne.n	80017f0 <SCCB_WR_Reg+0x58>
  	if(SCCB_WR_Byte(data))res=1;
 80017fe:	79bb      	ldrb	r3, [r7, #6]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff07 	bl	8001614 <SCCB_WR_Byte>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <SCCB_WR_Reg+0x78>
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
  	SCCB_Stop();
 8001810:	f7ff fe84 	bl	800151c <SCCB_Stop>
  	return	res;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20002abc 	.word	0x20002abc

08001824 <SCCB_RD_Reg>:

uint8_t SCCB_RD_Reg(uint8_t reg)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
	uint8_t val=0;
 800182e:	2300      	movs	r3, #0
 8001830:	73fb      	strb	r3, [r7, #15]
	SCCB_Start();
 8001832:	f7ff fe41 	bl	80014b8 <SCCB_Start>
	SCCB_WR_Byte(SCCB_ID_W);
 8001836:	2060      	movs	r0, #96	; 0x60
 8001838:	f7ff feec 	bl	8001614 <SCCB_WR_Byte>

	tickdelay = ticknumber;while(tickdelay--);
 800183c:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <SCCB_RD_Reg+0xa0>)
 800183e:	2278      	movs	r2, #120	; 0x78
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	bf00      	nop
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <SCCB_RD_Reg+0xa0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	1e5a      	subs	r2, r3, #1
 800184a:	491e      	ldr	r1, [pc, #120]	; (80018c4 <SCCB_RD_Reg+0xa0>)
 800184c:	600a      	str	r2, [r1, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f8      	bne.n	8001844 <SCCB_RD_Reg+0x20>
  	SCCB_WR_Byte(reg);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fedd 	bl	8001614 <SCCB_WR_Byte>

  	tickdelay = ticknumber;while(tickdelay--);
 800185a:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <SCCB_RD_Reg+0xa0>)
 800185c:	2278      	movs	r2, #120	; 0x78
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	bf00      	nop
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <SCCB_RD_Reg+0xa0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	1e5a      	subs	r2, r3, #1
 8001868:	4916      	ldr	r1, [pc, #88]	; (80018c4 <SCCB_RD_Reg+0xa0>)
 800186a:	600a      	str	r2, [r1, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f8      	bne.n	8001862 <SCCB_RD_Reg+0x3e>
	SCCB_Stop();
 8001870:	f7ff fe54 	bl	800151c <SCCB_Stop>

	tickdelay = ticknumber;while(tickdelay--);
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <SCCB_RD_Reg+0xa0>)
 8001876:	2278      	movs	r2, #120	; 0x78
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	bf00      	nop
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <SCCB_RD_Reg+0xa0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	1e5a      	subs	r2, r3, #1
 8001882:	4910      	ldr	r1, [pc, #64]	; (80018c4 <SCCB_RD_Reg+0xa0>)
 8001884:	600a      	str	r2, [r1, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f8      	bne.n	800187c <SCCB_RD_Reg+0x58>

	SCCB_Start();
 800188a:	f7ff fe15 	bl	80014b8 <SCCB_Start>
	SCCB_WR_Byte(SCCB_ID_R);
 800188e:	2061      	movs	r0, #97	; 0x61
 8001890:	f7ff fec0 	bl	8001614 <SCCB_WR_Byte>

	tickdelay = ticknumber;while(tickdelay--);
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <SCCB_RD_Reg+0xa0>)
 8001896:	2278      	movs	r2, #120	; 0x78
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	bf00      	nop
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <SCCB_RD_Reg+0xa0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	1e5a      	subs	r2, r3, #1
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <SCCB_RD_Reg+0xa0>)
 80018a4:	600a      	str	r2, [r1, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f8      	bne.n	800189c <SCCB_RD_Reg+0x78>
  	val=SCCB_RD_Byte();
 80018aa:	f7ff ff2d 	bl	8001708 <SCCB_RD_Byte>
 80018ae:	4603      	mov	r3, r0
 80018b0:	73fb      	strb	r3, [r7, #15]
  	SCCB_No_Ack();
 80018b2:	f7ff fe6d 	bl	8001590 <SCCB_No_Ack>
  	SCCB_Stop();
 80018b6:	f7ff fe31 	bl	800151c <SCCB_Stop>
  	return val;
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20002abc 	.word	0x20002abc

080018c8 <SCCB_SDA_IN>:


void SCCB_SDA_IN(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <SCCB_SDA_IN+0x54>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <SCCB_SDA_IN+0x54>)
 80018e6:	f043 0308 	orr.w	r3, r3, #8
 80018ea:	6313      	str	r3, [r2, #48]	; 0x30
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <SCCB_SDA_IN+0x54>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001900:	2301      	movs	r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001904:	2302      	movs	r3, #2
 8001906:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4619      	mov	r1, r3
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <SCCB_SDA_IN+0x58>)
 800190e:	f004 fb25 	bl	8005f5c <HAL_GPIO_Init>
}
 8001912:	bf00      	nop
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40020c00 	.word	0x40020c00

08001924 <SCCB_SDA_OUT>:

void SCCB_SDA_OUT(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <SCCB_SDA_OUT+0x50>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	4a0c      	ldr	r2, [pc, #48]	; (8001974 <SCCB_SDA_OUT+0x50>)
 8001942:	f043 0308 	orr.w	r3, r3, #8
 8001946:	6313      	str	r3, [r2, #48]	; 0x30
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <SCCB_SDA_OUT+0x50>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001958:	2301      	movs	r3, #1
 800195a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800195c:	2302      	movs	r3, #2
 800195e:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	4619      	mov	r1, r3
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <SCCB_SDA_OUT+0x54>)
 8001966:	f004 faf9 	bl	8005f5c <HAL_GPIO_Init>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	40020c00 	.word	0x40020c00

0800197c <SCCB_Rst>:

void SCCB_Rst(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,GPIO_PIN_RESET)	;
 8001980:	2200      	movs	r2, #0
 8001982:	2108      	movs	r1, #8
 8001984:	480b      	ldr	r0, [pc, #44]	; (80019b4 <SCCB_Rst+0x38>)
 8001986:	f004 fc9d 	bl	80062c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_15,GPIO_PIN_RESET)	;
 800198a:	2200      	movs	r2, #0
 800198c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001990:	4809      	ldr	r0, [pc, #36]	; (80019b8 <SCCB_Rst+0x3c>)
 8001992:	f004 fc97 	bl	80062c4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001996:	2064      	movs	r0, #100	; 0x64
 8001998:	f000 ff18 	bl	80027cc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_15,GPIO_PIN_SET)	;
 800199c:	2201      	movs	r2, #1
 800199e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <SCCB_Rst+0x3c>)
 80019a4:	f004 fc8e 	bl	80062c4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80019a8:	2064      	movs	r0, #100	; 0x64
 80019aa:	f000 ff0f 	bl	80027cc <HAL_Delay>
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40020c00 	.word	0x40020c00
 80019b8:	40021800 	.word	0x40021800

080019bc <OV2640_UXGA_Init>:
	0xe0, 0x00,
	0xdd, 0x7f,
	0x05, 0x00,
};
void OV2640_UXGA_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<sizeof(ov2640_uxga_init_reg_tbl)/2 ; i++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	e015      	b.n	80019f4 <OV2640_UXGA_Init+0x38>
 {
   SCCB_WR_Reg(ov2640_uxga_init_reg_tbl[i][0],ov2640_uxga_init_reg_tbl[i][1]);
 80019c8:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <OV2640_UXGA_Init+0x48>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80019d0:	490c      	ldr	r1, [pc, #48]	; (8001a04 <OV2640_UXGA_Init+0x48>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	440b      	add	r3, r1
 80019d8:	785b      	ldrb	r3, [r3, #1]
 80019da:	4619      	mov	r1, r3
 80019dc:	4610      	mov	r0, r2
 80019de:	f7ff fedb 	bl	8001798 <SCCB_WR_Reg>
   if(i<10) HAL_Delay(5);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b09      	cmp	r3, #9
 80019e6:	d802      	bhi.n	80019ee <OV2640_UXGA_Init+0x32>
 80019e8:	2005      	movs	r0, #5
 80019ea:	f000 feef 	bl	80027cc <HAL_Delay>
	for(uint32_t i=0; i<sizeof(ov2640_uxga_init_reg_tbl)/2 ; i++)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3301      	adds	r3, #1
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2bb1      	cmp	r3, #177	; 0xb1
 80019f8:	d9e6      	bls.n	80019c8 <OV2640_UXGA_Init+0xc>
 }

}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	0801f2e4 	.word	0x0801f2e4

08001a08 <OV2640_RGB565_Mode>:
		0xe1, 0x67
};

//OV2640 mode: RGB565
void OV2640_RGB565_Mode(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
	uint16_t i=0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	80fb      	strh	r3, [r7, #6]

	for(i=0;i<(sizeof(ov2640_rgb565_reg_tbl)/2);i++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	80fb      	strh	r3, [r7, #6]
 8001a16:	e00f      	b.n	8001a38 <OV2640_RGB565_Mode+0x30>
	{
		SCCB_WR_Reg(ov2640_rgb565_reg_tbl[i][0],ov2640_rgb565_reg_tbl[i][1]);
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <OV2640_RGB565_Mode+0x40>)
 8001a1c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	4909      	ldr	r1, [pc, #36]	; (8001a48 <OV2640_RGB565_Mode+0x40>)
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	440b      	add	r3, r1
 8001a28:	785b      	ldrb	r3, [r3, #1]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	f7ff feb3 	bl	8001798 <SCCB_WR_Reg>
	for(i=0;i<(sizeof(ov2640_rgb565_reg_tbl)/2);i++)
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	3301      	adds	r3, #1
 8001a36:	80fb      	strh	r3, [r7, #6]
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d9ec      	bls.n	8001a18 <OV2640_RGB565_Mode+0x10>
	}
}
 8001a3e:	bf00      	nop
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	0801f448 	.word	0x0801f448

08001a4c <OV2640_OutSize_Set>:
    SCCB_WR_Reg(0X17,sx>>3);
    SCCB_WR_Reg(0X18,endx>>3);
}

uint8_t OV2640_OutSize_Set(uint16_t width,uint16_t height)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	460a      	mov	r2, r1
 8001a56:	80fb      	strh	r3, [r7, #6]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	80bb      	strh	r3, [r7, #4]
    uint16_t outh;
    uint16_t outw;
    uint8_t temp;
    if(width%4)return 1;
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <OV2640_OutSize_Set+0x20>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e03e      	b.n	8001aea <OV2640_OutSize_Set+0x9e>
    if(height%4)return 2;
 8001a6c:	88bb      	ldrh	r3, [r7, #4]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <OV2640_OutSize_Set+0x30>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e036      	b.n	8001aea <OV2640_OutSize_Set+0x9e>
    outw=width/4;
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	81fb      	strh	r3, [r7, #14]
    outh=height/4;
 8001a82:	88bb      	ldrh	r3, [r7, #4]
 8001a84:	089b      	lsrs	r3, r3, #2
 8001a86:	81bb      	strh	r3, [r7, #12]
    SCCB_WR_Reg(0XFF,0X00);
 8001a88:	2100      	movs	r1, #0
 8001a8a:	20ff      	movs	r0, #255	; 0xff
 8001a8c:	f7ff fe84 	bl	8001798 <SCCB_WR_Reg>
    SCCB_WR_Reg(0XE0,0X04);
 8001a90:	2104      	movs	r1, #4
 8001a92:	20e0      	movs	r0, #224	; 0xe0
 8001a94:	f7ff fe80 	bl	8001798 <SCCB_WR_Reg>
    SCCB_WR_Reg(0X5A,outw&0XFF);
 8001a98:	89fb      	ldrh	r3, [r7, #14]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	205a      	movs	r0, #90	; 0x5a
 8001aa0:	f7ff fe7a 	bl	8001798 <SCCB_WR_Reg>
    SCCB_WR_Reg(0X5B,outh&0XFF);
 8001aa4:	89bb      	ldrh	r3, [r7, #12]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	205b      	movs	r0, #91	; 0x5b
 8001aac:	f7ff fe74 	bl	8001798 <SCCB_WR_Reg>
    temp=(outw>>8)&0X03;
 8001ab0:	89fb      	ldrh	r3, [r7, #14]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	72fb      	strb	r3, [r7, #11]
    temp|=(outh>>6)&0X04;
 8001abe:	89bb      	ldrh	r3, [r7, #12]
 8001ac0:	099b      	lsrs	r3, r3, #6
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	b25b      	sxtb	r3, r3
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	b25a      	sxtb	r2, r3
 8001acc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	b25b      	sxtb	r3, r3
 8001ad4:	72fb      	strb	r3, [r7, #11]
    SCCB_WR_Reg(0X5C,temp);
 8001ad6:	7afb      	ldrb	r3, [r7, #11]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	205c      	movs	r0, #92	; 0x5c
 8001adc:	f7ff fe5c 	bl	8001798 <SCCB_WR_Reg>
    SCCB_WR_Reg(0XE0,0X00);
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	20e0      	movs	r0, #224	; 0xe0
 8001ae4:	f7ff fe58 	bl	8001798 <SCCB_WR_Reg>
    return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	4a0f      	ldr	r2, [pc, #60]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b08:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a08      	ldr	r2, [pc, #32]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800

08001b44 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08c      	sub	sp, #48	; 0x30
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a68      	ldr	r2, [pc, #416]	; (8001d04 <HAL_DCMI_MspInit+0x1c0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	f040 80ca 	bne.w	8001cfc <HAL_DCMI_MspInit+0x1b8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61bb      	str	r3, [r7, #24]
 8001b6c:	4b66      	ldr	r3, [pc, #408]	; (8001d08 <HAL_DCMI_MspInit+0x1c4>)
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b70:	4a65      	ldr	r2, [pc, #404]	; (8001d08 <HAL_DCMI_MspInit+0x1c4>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6353      	str	r3, [r2, #52]	; 0x34
 8001b78:	4b63      	ldr	r3, [pc, #396]	; (8001d08 <HAL_DCMI_MspInit+0x1c4>)
 8001b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	61bb      	str	r3, [r7, #24]
 8001b82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	4b5f      	ldr	r3, [pc, #380]	; (8001d08 <HAL_DCMI_MspInit+0x1c4>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	4a5e      	ldr	r2, [pc, #376]	; (8001d08 <HAL_DCMI_MspInit+0x1c4>)
 8001b8e:	f043 0310 	orr.w	r3, r3, #16
 8001b92:	6313      	str	r3, [r2, #48]	; 0x30
 8001b94:	4b5c      	ldr	r3, [pc, #368]	; (8001d08 <HAL_DCMI_MspInit+0x1c4>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	4b58      	ldr	r3, [pc, #352]	; (8001d08 <HAL_DCMI_MspInit+0x1c4>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	4a57      	ldr	r2, [pc, #348]	; (8001d08 <HAL_DCMI_MspInit+0x1c4>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb0:	4b55      	ldr	r3, [pc, #340]	; (8001d08 <HAL_DCMI_MspInit+0x1c4>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	4b51      	ldr	r3, [pc, #324]	; (8001d08 <HAL_DCMI_MspInit+0x1c4>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	4a50      	ldr	r2, [pc, #320]	; (8001d08 <HAL_DCMI_MspInit+0x1c4>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6313      	str	r3, [r2, #48]	; 0x30
 8001bcc:	4b4e      	ldr	r3, [pc, #312]	; (8001d08 <HAL_DCMI_MspInit+0x1c4>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <HAL_DCMI_MspInit+0x1c4>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	4a49      	ldr	r2, [pc, #292]	; (8001d08 <HAL_DCMI_MspInit+0x1c4>)
 8001be2:	f043 0302 	orr.w	r3, r3, #2
 8001be6:	6313      	str	r3, [r2, #48]	; 0x30
 8001be8:	4b47      	ldr	r3, [pc, #284]	; (8001d08 <HAL_DCMI_MspInit+0x1c4>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001bf4:	2370      	movs	r3, #112	; 0x70
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c04:	230d      	movs	r3, #13
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	483f      	ldr	r0, [pc, #252]	; (8001d0c <HAL_DCMI_MspInit+0x1c8>)
 8001c10:	f004 f9a4 	bl	8005f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001c14:	2350      	movs	r3, #80	; 0x50
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c24:	230d      	movs	r3, #13
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 031c 	add.w	r3, r7, #28
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4838      	ldr	r0, [pc, #224]	; (8001d10 <HAL_DCMI_MspInit+0x1cc>)
 8001c30:	f004 f994 	bl	8005f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c34:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c46:	230d      	movs	r3, #13
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4830      	ldr	r0, [pc, #192]	; (8001d14 <HAL_DCMI_MspInit+0x1d0>)
 8001c52:	f004 f983 	bl	8005f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c56:	23c0      	movs	r3, #192	; 0xc0
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c66:	230d      	movs	r3, #13
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 031c 	add.w	r3, r7, #28
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4829      	ldr	r0, [pc, #164]	; (8001d18 <HAL_DCMI_MspInit+0x1d4>)
 8001c72:	f004 f973 	bl	8005f5c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001c76:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <HAL_DCMI_MspInit+0x1d8>)
 8001c78:	4a29      	ldr	r2, [pc, #164]	; (8001d20 <HAL_DCMI_MspInit+0x1dc>)
 8001c7a:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001c7c:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <HAL_DCMI_MspInit+0x1d8>)
 8001c7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c82:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c84:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <HAL_DCMI_MspInit+0x1d8>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_DCMI_MspInit+0x1d8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001c90:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <HAL_DCMI_MspInit+0x1d8>)
 8001c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c96:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c98:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <HAL_DCMI_MspInit+0x1d8>)
 8001c9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c9e:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <HAL_DCMI_MspInit+0x1d8>)
 8001ca2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ca6:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <HAL_DCMI_MspInit+0x1d8>)
 8001caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cae:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <HAL_DCMI_MspInit+0x1d8>)
 8001cb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cb6:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_DCMI_MspInit+0x1d8>)
 8001cba:	2204      	movs	r2, #4
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001cbe:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <HAL_DCMI_MspInit+0x1d8>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_DCMI_MspInit+0x1d8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <HAL_DCMI_MspInit+0x1d8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001cd0:	4812      	ldr	r0, [pc, #72]	; (8001d1c <HAL_DCMI_MspInit+0x1d8>)
 8001cd2:	f001 fa0d 	bl	80030f0 <HAL_DMA_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_DCMI_MspInit+0x19c>
    {
      Error_Handler();
 8001cdc:	f7ff fbe6 	bl	80014ac <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <HAL_DCMI_MspInit+0x1d8>)
 8001ce4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ce6:	4a0d      	ldr	r2, [pc, #52]	; (8001d1c <HAL_DCMI_MspInit+0x1d8>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 3, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2103      	movs	r1, #3
 8001cf0:	204e      	movs	r0, #78	; 0x4e
 8001cf2:	f000 fe6a 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001cf6:	204e      	movs	r0, #78	; 0x4e
 8001cf8:	f000 fe83 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001cfc:	bf00      	nop
 8001cfe:	3730      	adds	r7, #48	; 0x30
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	50050000 	.word	0x50050000
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	200019dc 	.word	0x200019dc
 8001d20:	40026428 	.word	0x40026428

08001d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a2c      	ldr	r2, [pc, #176]	; (8001df4 <HAL_UART_MspInit+0xd0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d152      	bne.n	8001dec <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <HAL_UART_MspInit+0xd4>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a2a      	ldr	r2, [pc, #168]	; (8001df8 <HAL_UART_MspInit+0xd4>)
 8001d50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <HAL_UART_MspInit+0xd4>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <HAL_UART_MspInit+0xd4>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <HAL_UART_MspInit+0xd4>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <HAL_UART_MspInit+0xd4>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_UART_MspInit+0xd4>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <HAL_UART_MspInit+0xd4>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_UART_MspInit+0xd4>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001daa:	2308      	movs	r3, #8
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	4811      	ldr	r0, [pc, #68]	; (8001dfc <HAL_UART_MspInit+0xd8>)
 8001db6:	f004 f8d1 	bl	8005f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001dba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001dcc:	2308      	movs	r3, #8
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480a      	ldr	r0, [pc, #40]	; (8001e00 <HAL_UART_MspInit+0xdc>)
 8001dd8:	f004 f8c0 	bl	8005f5c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 4, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2104      	movs	r1, #4
 8001de0:	2034      	movs	r0, #52	; 0x34
 8001de2:	f000 fdf2 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001de6:	2034      	movs	r0, #52	; 0x34
 8001de8:	f000 fe0b 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001dec:	bf00      	nop
 8001dee:	3728      	adds	r7, #40	; 0x28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40004c00 	.word	0x40004c00
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020000 	.word	0x40020000
 8001e00:	40020800 	.word	0x40020800

08001e04 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001e18:	4b2c      	ldr	r3, [pc, #176]	; (8001ecc <HAL_FSMC_MspInit+0xc8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d151      	bne.n	8001ec4 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001e20:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <HAL_FSMC_MspInit+0xc8>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <HAL_FSMC_MspInit+0xcc>)
 8001e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2e:	4a28      	ldr	r2, [pc, #160]	; (8001ed0 <HAL_FSMC_MspInit+0xcc>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6393      	str	r3, [r2, #56]	; 0x38
 8001e36:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <HAL_FSMC_MspInit+0xcc>)
 8001e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e42:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001e46:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e50:	2303      	movs	r3, #3
 8001e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e54:	230c      	movs	r3, #12
 8001e56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	481d      	ldr	r0, [pc, #116]	; (8001ed4 <HAL_FSMC_MspInit+0xd0>)
 8001e5e:	f004 f87d 	bl	8005f5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e62:	f240 433f 	movw	r3, #1087	; 0x43f
 8001e66:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e74:	230c      	movs	r3, #12
 8001e76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4816      	ldr	r0, [pc, #88]	; (8001ed8 <HAL_FSMC_MspInit+0xd4>)
 8001e7e:	f004 f86d 	bl	8005f5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e82:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001e86:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e94:	230c      	movs	r3, #12
 8001e96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480f      	ldr	r0, [pc, #60]	; (8001edc <HAL_FSMC_MspInit+0xd8>)
 8001e9e:	f004 f85d 	bl	8005f5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ea2:	f64f 7333 	movw	r3, #65331	; 0xff33
 8001ea6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001eb4:	230c      	movs	r3, #12
 8001eb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4808      	ldr	r0, [pc, #32]	; (8001ee0 <HAL_FSMC_MspInit+0xdc>)
 8001ebe:	f004 f84d 	bl	8005f5c <HAL_GPIO_Init>
 8001ec2:	e000      	b.n	8001ec6 <HAL_FSMC_MspInit+0xc2>
    return;
 8001ec4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200007c0 	.word	0x200007c0
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40021400 	.word	0x40021400
 8001ed8:	40021800 	.word	0x40021800
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40020c00 	.word	0x40020c00

08001ee4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001eec:	f7ff ff8a 	bl	8001e04 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <NMI_Handler+0x4>

08001efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <HardFault_Handler+0x4>

08001f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <MemManage_Handler+0x4>

08001f0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <BusFault_Handler+0x4>

08001f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <UsageFault_Handler+0x4>

08001f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f44:	f000 fc22 	bl	800278c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <UART4_IRQHandler+0x10>)
 8001f52:	f006 fd41 	bl	80089d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20002ac0 	.word	0x20002ac0

08001f60 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001f64:	4802      	ldr	r0, [pc, #8]	; (8001f70 <DMA2_Stream1_IRQHandler+0x10>)
 8001f66:	f001 fa5b 	bl	8003420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200019dc 	.word	0x200019dc

08001f74 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <ETH_IRQHandler+0x10>)
 8001f7a:	f003 fa23 	bl	80053c4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20006490 	.word	0x20006490

08001f88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <OTG_FS_IRQHandler+0x10>)
 8001f8e:	f004 fc1d 	bl	80067cc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20018d00 	.word	0x20018d00

08001f9c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <DCMI_IRQHandler+0x10>)
 8001fa2:	f000 fe69 	bl	8002c78 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20002a78 	.word	0x20002a78

08001fb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
	return 1;
 8001fb4:	2301      	movs	r3, #1
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <_kill>:

int _kill(int pid, int sig)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <_kill+0x20>)
 8001fcc:	2216      	movs	r2, #22
 8001fce:	601a      	str	r2, [r3, #0]
	return -1;
 8001fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	20019004 	.word	0x20019004

08001fe4 <_exit>:

void _exit (int status)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ffe5 	bl	8001fc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ff6:	e7fe      	b.n	8001ff6 <_exit+0x12>

08001ff8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	e00a      	b.n	8002020 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800200a:	f3af 8000 	nop.w
 800200e:	4601      	mov	r1, r0
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	60ba      	str	r2, [r7, #8]
 8002016:	b2ca      	uxtb	r2, r1
 8002018:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3301      	adds	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	dbf0      	blt.n	800200a <_read+0x12>
	}

return len;
 8002028:	687b      	ldr	r3, [r7, #4]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e009      	b.n	8002058 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	60ba      	str	r2, [r7, #8]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f016 ffbd 	bl	8018fcc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	dbf1      	blt.n	8002044 <_write+0x12>
	}
	return len;
 8002060:	687b      	ldr	r3, [r7, #4]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_close>:

int _close(int file)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
	return -1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002092:	605a      	str	r2, [r3, #4]
	return 0;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <_isatty>:

int _isatty(int file)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
	return 1;
 80020aa:	2301      	movs	r3, #1
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
	return 0;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020dc:	4a14      	ldr	r2, [pc, #80]	; (8002130 <_sbrk+0x5c>)
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <_sbrk+0x60>)
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <_sbrk+0x64>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <_sbrk+0x64>)
 80020f2:	4a12      	ldr	r2, [pc, #72]	; (800213c <_sbrk+0x68>)
 80020f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <_sbrk+0x64>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	429a      	cmp	r2, r3
 8002102:	d205      	bcs.n	8002110 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <_sbrk+0x6c>)
 8002106:	220c      	movs	r2, #12
 8002108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
 800210e:	e009      	b.n	8002124 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002110:	4b09      	ldr	r3, [pc, #36]	; (8002138 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	4a06      	ldr	r2, [pc, #24]	; (8002138 <_sbrk+0x64>)
 8002120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002122:	68fb      	ldr	r3, [r7, #12]
}
 8002124:	4618      	mov	r0, r3
 8002126:	371c      	adds	r7, #28
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	20020000 	.word	0x20020000
 8002134:	00001000 	.word	0x00001000
 8002138:	200007c4 	.word	0x200007c4
 800213c:	20019018 	.word	0x20019018
 8002140:	20019004 	.word	0x20019004

08002144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <SystemInit+0x20>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	4a05      	ldr	r2, [pc, #20]	; (8002164 <SystemInit+0x20>)
 8002150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <tcp_err2>:
/* create a struct to store data */
 static struct tcp_client_struct *esTx = 0;
 static struct tcp_pcb *pcbTx = 0;
int numarr[2];

static void tcp_err2(void *arg,err_t err){
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	70fb      	strb	r3, [r7, #3]

printf("connect error,!closed by core ");
 8002174:	4803      	ldr	r0, [pc, #12]	; (8002184 <tcp_err2+0x1c>)
 8002176:	f017 ffdf 	bl	801a138 <iprintf>


}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	0801c208 	.word	0x0801c208

08002188 <HAL_DCMI_FrameEventCallback>:


void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi2)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]


		//if(total_time>0)
	HAL_DCMI_Suspend(&hdcmi);
 8002190:	4823      	ldr	r0, [pc, #140]	; (8002220 <HAL_DCMI_FrameEventCallback+0x98>)
 8002192:	f000 fcf1 	bl	8002b78 <HAL_DCMI_Suspend>
	//HAL_DCMI_Stop(&hdcmi);

	if(echo_run==1){
 8002196:	4b23      	ldr	r3, [pc, #140]	; (8002224 <HAL_DCMI_FrameEventCallback+0x9c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d12f      	bne.n	80021fe <HAL_DCMI_FrameEventCallback+0x76>
		circle_time++;
 800219e:	4b22      	ldr	r3, [pc, #136]	; (8002228 <HAL_DCMI_FrameEventCallback+0xa0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	4a20      	ldr	r2, [pc, #128]	; (8002228 <HAL_DCMI_FrameEventCallback+0xa0>)
 80021a6:	6013      	str	r3, [r2, #0]
	//	printf("start send %d.bmp,time\r\n",circle_time);

	esTx->p = pbuf_alloc(PBUF_RAW,1400, PBUF_POOL);
 80021a8:	4b20      	ldr	r3, [pc, #128]	; (800222c <HAL_DCMI_FrameEventCallback+0xa4>)
 80021aa:	681c      	ldr	r4, [r3, #0]
 80021ac:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80021b0:	f44f 61af 	mov.w	r1, #1400	; 0x578
 80021b4:	2000      	movs	r0, #0
 80021b6:	f00d fb79 	bl	800f8ac <pbuf_alloc>
 80021ba:	4603      	mov	r3, r0
 80021bc:	60a3      	str	r3, [r4, #8]
	if(esTx->p!=NULL){
 80021be:	4b1b      	ldr	r3, [pc, #108]	; (800222c <HAL_DCMI_FrameEventCallback+0xa4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d016      	beq.n	80021f6 <HAL_DCMI_FrameEventCallback+0x6e>
	pbuf_take(esTx->p,abc, 1400);
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <HAL_DCMI_FrameEventCallback+0xa4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80021d2:	4917      	ldr	r1, [pc, #92]	; (8002230 <HAL_DCMI_FrameEventCallback+0xa8>)
 80021d4:	4618      	mov	r0, r3
 80021d6:	f00e f8a9 	bl	801032c <pbuf_take>
	tcp_client_send(pcbTx, esTx);
 80021da:	4b16      	ldr	r3, [pc, #88]	; (8002234 <HAL_DCMI_FrameEventCallback+0xac>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a13      	ldr	r2, [pc, #76]	; (800222c <HAL_DCMI_FrameEventCallback+0xa4>)
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fa01 	bl	80025ec <tcp_client_send>
	pbuf_free(esTx->p);
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_DCMI_FrameEventCallback+0xa4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f00d fe3f 	bl	800fe74 <pbuf_free>
	}
	echo_run=0;
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_DCMI_FrameEventCallback+0x9c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
		printf("miss %d %d\r\n",send_all,echo_run);
	}



}
 80021fc:	e00c      	b.n	8002218 <HAL_DCMI_FrameEventCallback+0x90>
		send_all+=1;
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <HAL_DCMI_FrameEventCallback+0xb0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	3301      	adds	r3, #1
 8002204:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <HAL_DCMI_FrameEventCallback+0xb0>)
 8002206:	6013      	str	r3, [r2, #0]
		printf("miss %d %d\r\n",send_all,echo_run);
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_DCMI_FrameEventCallback+0xb0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a05      	ldr	r2, [pc, #20]	; (8002224 <HAL_DCMI_FrameEventCallback+0x9c>)
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	4619      	mov	r1, r3
 8002212:	480a      	ldr	r0, [pc, #40]	; (800223c <HAL_DCMI_FrameEventCallback+0xb4>)
 8002214:	f017 ff90 	bl	801a138 <iprintf>
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	bd90      	pop	{r4, r7, pc}
 8002220:	20002a78 	.word	0x20002a78
 8002224:	20000578 	.word	0x20000578
 8002228:	200007cc 	.word	0x200007cc
 800222c:	200007d0 	.word	0x200007d0
 8002230:	20000000 	.word	0x20000000
 8002234:	200007d4 	.word	0x200007d4
 8002238:	200007c8 	.word	0x200007c8
 800223c:	0801c228 	.word	0x0801c228

08002240 <send_poolsize>:
void send_poolsize(int counter) {
 8002240:	b590      	push	{r4, r7, lr}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

//	clock_t start, finish;
float total_time;
//	start=clock();

	int counter_end =counter+ 3;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3303      	adds	r3, #3
 800224c:	60fb      	str	r3, [r7, #12]

	if (counter_end>all_circle)
 800224e:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <send_poolsize+0xc8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	429a      	cmp	r2, r3
 8002256:	dd02      	ble.n	800225e <send_poolsize+0x1e>
		counter_end=all_circle;
 8002258:	4b2b      	ldr	r3, [pc, #172]	; (8002308 <send_poolsize+0xc8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]
	int persize=1400;
 800225e:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8002262:	60bb      	str	r3, [r7, #8]
	//printf("counter=%d,end=%d\r\n",counter,counter_end);

	while (counter < counter_end) {
 8002264:	e047      	b.n	80022f6 <send_poolsize+0xb6>

		//the last one of the circles
		if(counter==(all_circle-1)&&left_bytes!=0){
 8002266:	4b28      	ldr	r3, [pc, #160]	; (8002308 <send_poolsize+0xc8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3b01      	subs	r3, #1
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	d10f      	bne.n	8002292 <send_poolsize+0x52>
 8002272:	4b26      	ldr	r3, [pc, #152]	; (800230c <send_poolsize+0xcc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <send_poolsize+0x52>

				//if(total_time>0)
			//	printf("finish %d.bmp\r\n",circle_time);

			persize=left_bytes;
 800227a:	4b24      	ldr	r3, [pc, #144]	; (800230c <send_poolsize+0xcc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60bb      	str	r3, [r7, #8]
			//__HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME);//每次拍照前都要使能帧中断
		 	HAL_DCMI_Resume(&hdcmi);
 8002280:	4823      	ldr	r0, [pc, #140]	; (8002310 <send_poolsize+0xd0>)
 8002282:	f000 fccd 	bl	8002c20 <HAL_DCMI_Resume>

		 //	 HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)testsram,DCMI_CN*DCMI_RN/4);
		 	 echo_run=1;
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <send_poolsize+0xd4>)
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]
		 	 send_all=1;
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <send_poolsize+0xd8>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]

		}
		//printf("send buff \r\n");

		esTx->p = pbuf_alloc(PBUF_RAW, persize, PBUF_POOL);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	b29b      	uxth	r3, r3
 8002296:	4a21      	ldr	r2, [pc, #132]	; (800231c <send_poolsize+0xdc>)
 8002298:	6814      	ldr	r4, [r2, #0]
 800229a:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800229e:	4619      	mov	r1, r3
 80022a0:	2000      	movs	r0, #0
 80022a2:	f00d fb03 	bl	800f8ac <pbuf_alloc>
 80022a6:	4603      	mov	r3, r0
 80022a8:	60a3      	str	r3, [r4, #8]
		if(esTx->p!=NULL){
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <send_poolsize+0xdc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d020      	beq.n	80022f6 <send_poolsize+0xb6>

		pbuf_take(esTx->p,testsram+1400*counter, persize);
 80022b4:	4b19      	ldr	r3, [pc, #100]	; (800231c <send_poolsize+0xdc>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6898      	ldr	r0, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80022c0:	fb02 f303 	mul.w	r3, r2, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b16      	ldr	r3, [pc, #88]	; (8002320 <send_poolsize+0xe0>)
 80022c8:	4413      	add	r3, r2
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	b292      	uxth	r2, r2
 80022ce:	4619      	mov	r1, r3
 80022d0:	f00e f82c 	bl	801032c <pbuf_take>
		tcp_client_send(pcbTx, esTx);
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <send_poolsize+0xe4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a10      	ldr	r2, [pc, #64]	; (800231c <send_poolsize+0xdc>)
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f984 	bl	80025ec <tcp_client_send>
		counter++;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3301      	adds	r3, #1
 80022e8:	607b      	str	r3, [r7, #4]
		pbuf_free(esTx->p);
 80022ea:	4b0c      	ldr	r3, [pc, #48]	; (800231c <send_poolsize+0xdc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f00d fdbf 	bl	800fe74 <pbuf_free>
	while (counter < counter_end) {
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	dbb3      	blt.n	8002266 <send_poolsize+0x26>
//
//	finish=clock();
//	total_time=(int)(finish-start)/CLOCKS_PER_SEC;
//printf("send %d seconds\r\n",total_time);

}
 80022fe:	bf00      	nop
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	bd90      	pop	{r4, r7, pc}
 8002308:	200007a4 	.word	0x200007a4
 800230c:	200007a8 	.word	0x200007a8
 8002310:	20002a78 	.word	0x20002a78
 8002314:	20000578 	.word	0x20000578
 8002318:	200007c8 	.word	0x200007c8
 800231c:	200007d0 	.word	0x200007d0
 8002320:	68000000 	.word	0x68000000
 8002324:	200007d4 	.word	0x200007d4

08002328 <tcp_client_init>:
 1. Create TCP block.
 2. connect to the server
 3. start communicating
 */

void tcp_client_init(void) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 800232e:	f00f fbf5 	bl	8011b1c <tcp_new>
 8002332:	60f8      	str	r0, [r7, #12]

	/* 2. Connect to the server */
	ip_addr_t destIPADDR;
	IP_ADDR4(&destIPADDR, 192, 168, 1, 26);
 8002334:	4b10      	ldr	r3, [pc, #64]	; (8002378 <tcp_client_init+0x50>)
 8002336:	607b      	str	r3, [r7, #4]
	err_t ok;
	//while(ok!= ERR_OK)
		ok=tcp_connect(tpcb, &destIPADDR, 12345, tcp_client_connected);
 8002338:	1d39      	adds	r1, r7, #4
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <tcp_client_init+0x54>)
 800233c:	f243 0239 	movw	r2, #12345	; 0x3039
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f00e fcaf 	bl	8010ca4 <tcp_connect>
 8002346:	4603      	mov	r3, r0
 8002348:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(5000);
 800234a:	f241 3088 	movw	r0, #5000	; 0x1388
 800234e:	f000 fa3d 	bl	80027cc <HAL_Delay>
		 printf("tpc address = %p\r\n,",tpcb);
 8002352:	68f9      	ldr	r1, [r7, #12]
 8002354:	480a      	ldr	r0, [pc, #40]	; (8002380 <tcp_client_init+0x58>)
 8002356:	f017 feef 	bl	801a138 <iprintf>

		printf("connection result = %d \r\n",ok);
 800235a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800235e:	4619      	mov	r1, r3
 8002360:	4808      	ldr	r0, [pc, #32]	; (8002384 <tcp_client_init+0x5c>)
 8002362:	f017 fee9 	bl	801a138 <iprintf>
		tcp_err(tpcb,tcp_err2);
 8002366:	4908      	ldr	r1, [pc, #32]	; (8002388 <tcp_client_init+0x60>)
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f00f fc35 	bl	8011bd8 <tcp_err>

}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	1a01a8c0 	.word	0x1a01a8c0
 800237c:	0800238d 	.word	0x0800238d
 8002380:	0801c238 	.word	0x0801c238
 8002384:	0801c24c 	.word	0x0801c24c
 8002388:	08002169 	.word	0x08002169

0800238c <tcp_client_connected>:

/** This callback is called, when the client is connected to the server
 * Here we will initialise few other callbacks
 * and in the end, call the client handle function
 */
static err_t tcp_client_connected(void *arg, struct tcp_pcb *newpcb, err_t err) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	4613      	mov	r3, r2
 8002398:	71fb      	strb	r3, [r7, #7]

	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(err);

	/* allocate structure es to maintain tcp connection information */
	es = (struct tcp_client_struct*) mem_malloc(
 800239a:	200c      	movs	r0, #12
 800239c:	f00c fd9a 	bl	800eed4 <mem_malloc>
 80023a0:	6138      	str	r0, [r7, #16]
			sizeof(struct tcp_client_struct));
	if (es != NULL) {
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d01f      	beq.n	80023e8 <tcp_client_connected+0x5c>
		es->state = ES_CONNECTED;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
		es->pcb = newpcb;
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	605a      	str	r2, [r3, #4]
		es->retries = 0;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2200      	movs	r2, #0
 80023b8:	705a      	strb	r2, [r3, #1]
		es->p = NULL;
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]

		/* pass newly allocated es structure as argument to newpcb */
		tcp_arg(newpcb, es);
 80023c0:	6939      	ldr	r1, [r7, #16]
 80023c2:	68b8      	ldr	r0, [r7, #8]
 80023c4:	f00f fbb2 	bl	8011b2c <tcp_arg>

		/* initialize lwip tcp_recv callback function for newpcb  */
		tcp_recv(newpcb, tcp_client_recv);
 80023c8:	490d      	ldr	r1, [pc, #52]	; (8002400 <tcp_client_connected+0x74>)
 80023ca:	68b8      	ldr	r0, [r7, #8]
 80023cc:	f00f fbc0 	bl	8011b50 <tcp_recv>

		/* initialize lwip tcp_poll callback function for newpcb */
		tcp_poll(newpcb, tcp_client_poll, 0);
 80023d0:	2200      	movs	r2, #0
 80023d2:	490c      	ldr	r1, [pc, #48]	; (8002404 <tcp_client_connected+0x78>)
 80023d4:	68b8      	ldr	r0, [r7, #8]
 80023d6:	f00f fc21 	bl	8011c1c <tcp_poll>

		/* initialize LwIP tcp_sent callback function */
		//tcp_sent(newpcb, tcp_client_sent);

		/* handle the TCP data */
		tcp_client_handle(newpcb, es);
 80023da:	6939      	ldr	r1, [r7, #16]
 80023dc:	68b8      	ldr	r0, [r7, #8]
 80023de:	f000 f943 	bl	8002668 <tcp_client_handle>

		ret_err = ERR_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	75fb      	strb	r3, [r7, #23]
 80023e6:	e005      	b.n	80023f4 <tcp_client_connected+0x68>
	} else {
		/*  close tcp connection */
		tcp_client_connection_close(newpcb, es);
 80023e8:	6939      	ldr	r1, [r7, #16]
 80023ea:	68b8      	ldr	r0, [r7, #8]
 80023ec:	f000 f915 	bl	800261a <tcp_client_connection_close>
		/* return memory error */
		ret_err = ERR_MEM;
 80023f0:	23ff      	movs	r3, #255	; 0xff
 80023f2:	75fb      	strb	r3, [r7, #23]
	}
	return ret_err;
 80023f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	08002409 	.word	0x08002409
 8002404:	080025a5 	.word	0x080025a5

08002408 <tcp_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
 */
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p,
		err_t err) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	70fb      	strb	r3, [r7, #3]
	struct tcp_client_struct *es;
	err_t ret_err;

	LWIP_ASSERT("arg != NULL", arg != NULL);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d106      	bne.n	800242a <tcp_client_recv+0x22>
 800241c:	4b5a      	ldr	r3, [pc, #360]	; (8002588 <tcp_client_recv+0x180>)
 800241e:	f240 123f 	movw	r2, #319	; 0x13f
 8002422:	495a      	ldr	r1, [pc, #360]	; (800258c <tcp_client_recv+0x184>)
 8002424:	485a      	ldr	r0, [pc, #360]	; (8002590 <tcp_client_recv+0x188>)
 8002426:	f017 fe87 	bl	801a138 <iprintf>

	es = (struct tcp_client_struct*) arg;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	61bb      	str	r3, [r7, #24]

	/* if we receive an empty tcp frame from server => close connection */
	if (p == NULL) {
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10e      	bne.n	8002452 <tcp_client_recv+0x4a>
		/* remote host closed connection */
		es->state = ES_CLOSING;
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2203      	movs	r2, #3
 8002438:	701a      	strb	r2, [r3, #0]
		if (es->p == NULL) {
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d103      	bne.n	800244a <tcp_client_recv+0x42>
			/* we're done sending, close connection */
			tcp_client_connection_close(tpcb, es);
 8002442:	69b9      	ldr	r1, [r7, #24]
 8002444:	68b8      	ldr	r0, [r7, #8]
 8002446:	f000 f8e8 	bl	800261a <tcp_client_connection_close>
//      /* acknowledge received packet */
//      tcp_sent(tpcb, tcp_client_sent);
			/* send remaining data*/
//      tcp_client_send(tpcb, es);
		}
		ret_err = ERR_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002450:	e093      	b.n	800257a <tcp_client_recv+0x172>
	}
	/* else : a non empty frame was received from server but for some reason err != ERR_OK */
	else if (err != ERR_OK) {
 8002452:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00c      	beq.n	8002474 <tcp_client_recv+0x6c>
		/* free received pbuf*/
		if (p != NULL) {
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <tcp_client_recv+0x64>
			es->p = NULL;
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
			pbuf_free(p);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f00d fd04 	bl	800fe74 <pbuf_free>
		}
		ret_err = err;
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002472:	e082      	b.n	800257a <tcp_client_recv+0x172>
	} else if (es->state == ES_CONNECTED) {
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d15b      	bne.n	8002534 <tcp_client_recv+0x12c>
		/* store reference to incoming pbuf (chain) */
		//es->p = p;
		struct pbuf *ptmp=p;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	623b      	str	r3, [r7, #32]
		uint8_t num[4];
		while(ptmp!=NULL){
 8002480:	e019      	b.n	80024b6 <tcp_client_recv+0xae>
			for(int i=0;i<p->len;i++){
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	e00d      	b.n	80024a4 <tcp_client_recv+0x9c>
				//printf("%c",*((char *)p->payload+i));
				num[i]=*((char *)p->payload+i);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	4413      	add	r3, r2
 8002490:	7819      	ldrb	r1, [r3, #0]
 8002492:	f107 0214 	add.w	r2, r7, #20
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	4413      	add	r3, r2
 800249a:	460a      	mov	r2, r1
 800249c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<p->len;i++){
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3301      	adds	r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	895b      	ldrh	r3, [r3, #10]
 80024a8:	461a      	mov	r2, r3
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4293      	cmp	r3, r2
 80024ae:	dbeb      	blt.n	8002488 <tcp_client_recv+0x80>
			}
			ptmp=p->next;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	623b      	str	r3, [r7, #32]
		while(ptmp!=NULL){
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1e2      	bne.n	8002482 <tcp_client_recv+0x7a>
		}
		resend_no=num[0]+num[1]+num[2]+num[3];
 80024bc:	7d3b      	ldrb	r3, [r7, #20]
 80024be:	461a      	mov	r2, r3
 80024c0:	7d7b      	ldrb	r3, [r7, #21]
 80024c2:	4413      	add	r3, r2
 80024c4:	7dba      	ldrb	r2, [r7, #22]
 80024c6:	4413      	add	r3, r2
 80024c8:	7dfa      	ldrb	r2, [r7, #23]
 80024ca:	4413      	add	r3, r2
 80024cc:	4a31      	ldr	r2, [pc, #196]	; (8002594 <tcp_client_recv+0x18c>)
 80024ce:	6013      	str	r3, [r2, #0]
//
		if(resend_no==6666){
 80024d0:	4b30      	ldr	r3, [pc, #192]	; (8002594 <tcp_client_recv+0x18c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f641 220a 	movw	r2, #6666	; 0x1a0a
 80024d8:	4293      	cmp	r3, r2
 80024da:	d103      	bne.n	80024e4 <tcp_client_recv+0xdc>
			echo_run=1;
 80024dc:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <tcp_client_recv+0x190>)
 80024de:	2201      	movs	r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e01a      	b.n	800251a <tcp_client_recv+0x112>
		}else if(resend_no>=(all_circle+1)){
 80024e4:	4b2d      	ldr	r3, [pc, #180]	; (800259c <tcp_client_recv+0x194>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <tcp_client_recv+0x18c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	da0d      	bge.n	800250c <tcp_client_recv+0x104>
			resend_no-=all_circle+1;
 80024f0:	4b28      	ldr	r3, [pc, #160]	; (8002594 <tcp_client_recv+0x18c>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b29      	ldr	r3, [pc, #164]	; (800259c <tcp_client_recv+0x194>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	4a25      	ldr	r2, [pc, #148]	; (8002594 <tcp_client_recv+0x18c>)
 80024fe:	6013      	str	r3, [r2, #0]
			send_poolsize(resend_no);
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <tcp_client_recv+0x18c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fe9b 	bl	8002240 <send_poolsize>
 800250a:	e006      	b.n	800251a <tcp_client_recv+0x112>

		}
		else{
			//resend_no=receive;
			printf("send resend_no %d\r\n",all_circle+1);
 800250c:	4b23      	ldr	r3, [pc, #140]	; (800259c <tcp_client_recv+0x194>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	4619      	mov	r1, r3
 8002514:	4822      	ldr	r0, [pc, #136]	; (80025a0 <tcp_client_recv+0x198>)
 8002516:	f017 fe0f 	bl	801a138 <iprintf>
//    tcp_sent(tpcb, tcp_client_sent);



		/* Acknowledge the received data */
		tcp_recved(tpcb, p->tot_len);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	891b      	ldrh	r3, [r3, #8]
 800251e:	4619      	mov	r1, r3
 8002520:	68b8      	ldr	r0, [r7, #8]
 8002522:	f00e fb27 	bl	8010b74 <tcp_recved>

		/* handle the received data */
		pbuf_free(p);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f00d fca4 	bl	800fe74 <pbuf_free>

		ret_err = ERR_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002532:	e022      	b.n	800257a <tcp_client_recv+0x172>
	} else if (es->state == ES_CLOSING) {
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d10f      	bne.n	800255c <tcp_client_recv+0x154>
		/* odd case, remote side closing twice, trash data */
		tcp_recved(tpcb, p->tot_len);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	891b      	ldrh	r3, [r3, #8]
 8002540:	4619      	mov	r1, r3
 8002542:	68b8      	ldr	r0, [r7, #8]
 8002544:	f00e fb16 	bl	8010b74 <tcp_recved>
		es->p = NULL;
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
		pbuf_free(p);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f00d fc90 	bl	800fe74 <pbuf_free>
		ret_err = ERR_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800255a:	e00e      	b.n	800257a <tcp_client_recv+0x172>
	} else {
		/* unknown es->state, trash data  */
		tcp_recved(tpcb, p->tot_len);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	891b      	ldrh	r3, [r3, #8]
 8002560:	4619      	mov	r1, r3
 8002562:	68b8      	ldr	r0, [r7, #8]
 8002564:	f00e fb06 	bl	8010b74 <tcp_recved>
		es->p = NULL;
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
		pbuf_free(p);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f00d fc80 	bl	800fe74 <pbuf_free>
		ret_err = ERR_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return ret_err;
 800257a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800257e:	4618      	mov	r0, r3
 8002580:	3728      	adds	r7, #40	; 0x28
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	0801c268 	.word	0x0801c268
 800258c:	0801c284 	.word	0x0801c284
 8002590:	0801c290 	.word	0x0801c290
 8002594:	200007ac 	.word	0x200007ac
 8002598:	20000578 	.word	0x20000578
 800259c:	200007a4 	.word	0x200007a4
 80025a0:	0801c2b8 	.word	0x0801c2b8

080025a4 <tcp_client_poll>:

static err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
	err_t ret_err;
	struct tcp_client_struct *es;

	es = (struct tcp_client_struct*) arg;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	60bb      	str	r3, [r7, #8]
	if (es != NULL) {
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00e      	beq.n	80025d6 <tcp_client_poll+0x32>
		if (es->p != NULL) {
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d107      	bne.n	80025d0 <tcp_client_poll+0x2c>
//      tcp_sent(tpcb, tcp_client_sent);
			/* there is a remaining pbuf (chain) , try to send data */
//      tcp_client_send(tpcb, es);
		} else {
			/* no remaining pbuf (chain)  */
			if (es->state == ES_CLOSING) {
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d103      	bne.n	80025d0 <tcp_client_poll+0x2c>
				/*  close tcp connection */
				tcp_client_connection_close(tpcb, es);
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	f000 f825 	bl	800261a <tcp_client_connection_close>
			}
		}
		ret_err = ERR_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e004      	b.n	80025e0 <tcp_client_poll+0x3c>
	} else {
		/* nothing to be done */
		tcp_abort(tpcb);
 80025d6:	6838      	ldr	r0, [r7, #0]
 80025d8:	f00e fa66 	bl	8010aa8 <tcp_abort>
		ret_err = ERR_ABRT;
 80025dc:	23f3      	movs	r3, #243	; 0xf3
 80025de:	73fb      	strb	r3, [r7, #15]
	}
	return ret_err;
 80025e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <tcp_client_send>:
	return ERR_OK;
}

/** A function to send the data to the server
 */
static void tcp_client_send(struct tcp_pcb *tpcb,struct tcp_client_struct*es) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
	  struct pbuf *ptr;


	    /* get pointer on pbuf from es structure */
	    ptr = es->p;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	60fb      	str	r3, [r7, #12]


	tcp_write(tpcb, ptr->payload, ptr->len, 1);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	895a      	ldrh	r2, [r3, #10]
 8002604:	2301      	movs	r3, #1
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f012 f9ba 	bl	8014980 <tcp_write>


	tcp_output(tpcb);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f012 ffa3 	bl	8015558 <tcp_output>



}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <tcp_client_connection_close>:


static void tcp_client_connection_close(struct tcp_pcb *tpcb,
		struct tcp_client_struct *es) {
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]

	/* remove all callbacks */
	tcp_arg(tpcb, NULL);
 8002624:	2100      	movs	r1, #0
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f00f fa80 	bl	8011b2c <tcp_arg>
	tcp_sent(tpcb, NULL);
 800262c:	2100      	movs	r1, #0
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f00f fab0 	bl	8011b94 <tcp_sent>
	tcp_recv(tpcb, NULL);
 8002634:	2100      	movs	r1, #0
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f00f fa8a 	bl	8011b50 <tcp_recv>
	tcp_err(tpcb, NULL);
 800263c:	2100      	movs	r1, #0
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f00f faca 	bl	8011bd8 <tcp_err>
	tcp_poll(tpcb, NULL, 0);
 8002644:	2200      	movs	r2, #0
 8002646:	2100      	movs	r1, #0
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f00f fae7 	bl	8011c1c <tcp_poll>

	/* delete es structure */
	if (es != NULL) {
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <tcp_client_connection_close+0x40>
		mem_free(es);
 8002654:	6838      	ldr	r0, [r7, #0]
 8002656:	f00c fad1 	bl	800ebfc <mem_free>
	}

	/* close tcp connection */
	tcp_close(tpcb);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f00e f93a 	bl	80108d4 <tcp_close>
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <tcp_client_handle>:

/* Handle the incoming TCP Data */

static void tcp_client_handle(struct tcp_pcb *tpcb,
		struct tcp_client_struct *es) {
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
	/* Extract the IP */

//	esTx->state = es->state;
//	esTx->pcb = es->pcb;
//	esTx->p = es->p;
	esTx = es;
 8002672:	4a06      	ldr	r2, [pc, #24]	; (800268c <tcp_client_handle+0x24>)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
 8002678:	4a05      	ldr	r2, [pc, #20]	; (8002690 <tcp_client_handle+0x28>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6013      	str	r3, [r2, #0]

}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	200007d0 	.word	0x200007d0
 8002690:	200007d4 	.word	0x200007d4

08002694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002698:	480d      	ldr	r0, [pc, #52]	; (80026d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800269a:	490e      	ldr	r1, [pc, #56]	; (80026d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800269c:	4a0e      	ldr	r2, [pc, #56]	; (80026d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800269e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a0:	e002      	b.n	80026a8 <LoopCopyDataInit>

080026a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a6:	3304      	adds	r3, #4

080026a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026ac:	d3f9      	bcc.n	80026a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ae:	4a0b      	ldr	r2, [pc, #44]	; (80026dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026b0:	4c0b      	ldr	r4, [pc, #44]	; (80026e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b4:	e001      	b.n	80026ba <LoopFillZerobss>

080026b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b8:	3204      	adds	r2, #4

080026ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026bc:	d3fb      	bcc.n	80026b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026be:	f7ff fd41 	bl	8002144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026c2:	f016 ffcd 	bl	8019660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026c6:	f7fe fbeb 	bl	8000ea0 <main>
  bx  lr    
 80026ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026d4:	20000788 	.word	0x20000788
  ldr r2, =_sidata
 80026d8:	0801f9c0 	.word	0x0801f9c0
  ldr r2, =_sbss
 80026dc:	20000788 	.word	0x20000788
  ldr r4, =_ebss
 80026e0:	20019014 	.word	0x20019014

080026e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026e4:	e7fe      	b.n	80026e4 <ADC_IRQHandler>
	...

080026e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026ec:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <HAL_Init+0x40>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0d      	ldr	r2, [pc, #52]	; (8002728 <HAL_Init+0x40>)
 80026f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_Init+0x40>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <HAL_Init+0x40>)
 80026fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002702:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <HAL_Init+0x40>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a07      	ldr	r2, [pc, #28]	; (8002728 <HAL_Init+0x40>)
 800270a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002710:	2003      	movs	r0, #3
 8002712:	f000 f94f 	bl	80029b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002716:	200f      	movs	r0, #15
 8002718:	f000 f808 	bl	800272c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800271c:	f7ff f9ea 	bl	8001af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40023c00 	.word	0x40023c00

0800272c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_InitTick+0x54>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_InitTick+0x58>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	4619      	mov	r1, r3
 800273e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002742:	fbb3 f3f1 	udiv	r3, r3, r1
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f967 	bl	8002a1e <HAL_SYSTICK_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e00e      	b.n	8002778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b0f      	cmp	r3, #15
 800275e:	d80a      	bhi.n	8002776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002760:	2200      	movs	r2, #0
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	f000 f92f 	bl	80029ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800276c:	4a06      	ldr	r2, [pc, #24]	; (8002788 <HAL_InitTick+0x5c>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	e000      	b.n	8002778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20000580 	.word	0x20000580
 8002784:	20000588 	.word	0x20000588
 8002788:	20000584 	.word	0x20000584

0800278c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_IncTick+0x20>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_IncTick+0x24>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4413      	add	r3, r2
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <HAL_IncTick+0x24>)
 800279e:	6013      	str	r3, [r2, #0]
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000588 	.word	0x20000588
 80027b0:	20002b04 	.word	0x20002b04

080027b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return uwTick;
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <HAL_GetTick+0x14>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20002b04 	.word	0x20002b04

080027cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d4:	f7ff ffee 	bl	80027b4 <HAL_GetTick>
 80027d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d005      	beq.n	80027f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_Delay+0x44>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027f2:	bf00      	nop
 80027f4:	f7ff ffde 	bl	80027b4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	429a      	cmp	r2, r3
 8002802:	d8f7      	bhi.n	80027f4 <HAL_Delay+0x28>
  {
  }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000588 	.word	0x20000588

08002814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002830:	4013      	ands	r3, r2
 8002832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800283c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002846:	4a04      	ldr	r2, [pc, #16]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	60d3      	str	r3, [r2, #12]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <__NVIC_GetPriorityGrouping+0x18>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	f003 0307 	and.w	r3, r3, #7
}
 800286a:	4618      	mov	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	2b00      	cmp	r3, #0
 8002888:	db0b      	blt.n	80028a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	f003 021f 	and.w	r2, r3, #31
 8002890:	4907      	ldr	r1, [pc, #28]	; (80028b0 <__NVIC_EnableIRQ+0x38>)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2001      	movs	r0, #1
 800289a:	fa00 f202 	lsl.w	r2, r0, r2
 800289e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	e000e100 	.word	0xe000e100

080028b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	6039      	str	r1, [r7, #0]
 80028be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	db0a      	blt.n	80028de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	490c      	ldr	r1, [pc, #48]	; (8002900 <__NVIC_SetPriority+0x4c>)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	0112      	lsls	r2, r2, #4
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	440b      	add	r3, r1
 80028d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028dc:	e00a      	b.n	80028f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4908      	ldr	r1, [pc, #32]	; (8002904 <__NVIC_SetPriority+0x50>)
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	3b04      	subs	r3, #4
 80028ec:	0112      	lsls	r2, r2, #4
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	440b      	add	r3, r1
 80028f2:	761a      	strb	r2, [r3, #24]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000e100 	.word	0xe000e100
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002908:	b480      	push	{r7}
 800290a:	b089      	sub	sp, #36	; 0x24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f1c3 0307 	rsb	r3, r3, #7
 8002922:	2b04      	cmp	r3, #4
 8002924:	bf28      	it	cs
 8002926:	2304      	movcs	r3, #4
 8002928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3304      	adds	r3, #4
 800292e:	2b06      	cmp	r3, #6
 8002930:	d902      	bls.n	8002938 <NVIC_EncodePriority+0x30>
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3b03      	subs	r3, #3
 8002936:	e000      	b.n	800293a <NVIC_EncodePriority+0x32>
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	f04f 32ff 	mov.w	r2, #4294967295
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43da      	mvns	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	401a      	ands	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002950:	f04f 31ff 	mov.w	r1, #4294967295
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	43d9      	mvns	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002960:	4313      	orrs	r3, r2
         );
}
 8002962:	4618      	mov	r0, r3
 8002964:	3724      	adds	r7, #36	; 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002980:	d301      	bcc.n	8002986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002982:	2301      	movs	r3, #1
 8002984:	e00f      	b.n	80029a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <SysTick_Config+0x40>)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298e:	210f      	movs	r1, #15
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	f7ff ff8e 	bl	80028b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <SysTick_Config+0x40>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <SysTick_Config+0x40>)
 80029a0:	2207      	movs	r2, #7
 80029a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	e000e010 	.word	0xe000e010

080029b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ff29 	bl	8002814 <__NVIC_SetPriorityGrouping>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b086      	sub	sp, #24
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029dc:	f7ff ff3e 	bl	800285c <__NVIC_GetPriorityGrouping>
 80029e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f7ff ff8e 	bl	8002908 <NVIC_EncodePriority>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff5d 	bl	80028b4 <__NVIC_SetPriority>
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff31 	bl	8002878 <__NVIC_EnableIRQ>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ffa2 	bl	8002970 <SysTick_Config>
 8002a2c:	4603      	mov	r3, r0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_DCMI_Start_DMA+0x20>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e086      	b.n	8002b66 <HAL_DCMI_Start_DMA+0x12e>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a76:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0202 	bic.w	r2, r2, #2
 8002a86:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	4a34      	ldr	r2, [pc, #208]	; (8002b70 <HAL_DCMI_Start_DMA+0x138>)
 8002a9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	4a33      	ldr	r2, [pc, #204]	; (8002b74 <HAL_DCMI_Start_DMA+0x13c>)
 8002aa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	2200      	movs	r2, #0
 8002aae:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac2:	d20a      	bcs.n	8002ada <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	3328      	adds	r3, #40	; 0x28
 8002ace:	4619      	mov	r1, r3
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	f000 fbba 	bl	800324c <HAL_DMA_Start_IT>
 8002ad8:	e038      	b.n	8002b4c <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ade:	4a24      	ldr	r2, [pc, #144]	; (8002b70 <HAL_DCMI_Start_DMA+0x138>)
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8002af4:	e009      	b.n	8002b0a <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	085a      	lsrs	r2, r3, #1
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	005a      	lsls	r2, r3, #1
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b12:	d2f0      	bcs.n	8002af6 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	1e9a      	subs	r2, r3, #2
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	4413      	add	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3328      	adds	r3, #40	; 0x28
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	f000 fed4 	bl	80038f4 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	08002ebf 	.word	0x08002ebf
 8002b74:	08002fe9 	.word	0x08002fe9

08002b78 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI. 
  * @retval HAL status     
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef* hdcmi)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8002b80:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_DCMI_Suspend+0xa0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	085b      	lsrs	r3, r3, #1
 8002b86:	4a25      	ldr	r2, [pc, #148]	; (8002c1c <HAL_DCMI_Suspend+0xa4>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	089b      	lsrs	r3, r3, #2
 8002b8e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_DCMI_Suspend+0x2a>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e033      	b.n	8002c0a <HAL_DCMI_Suspend+0x92>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(hdcmi->State == HAL_DCMI_STATE_BUSY)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d124      	bne.n	8002c00 <HAL_DCMI_Suspend+0x88>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2205      	movs	r2, #5
 8002bba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0201 	bic.w	r2, r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      if (count-- == 0U)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1e5a      	subs	r2, r3, #1
 8002bd2:	60ba      	str	r2, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_DCMI_Suspend+0x7a>
      {        
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bdc:	f043 0220 	orr.w	r2, r3, #32
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	63da      	str	r2, [r3, #60]	; 0x3c
        
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        
        status = HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	73fb      	strb	r3, [r7, #15]
        break;
 8002bf0:	e006      	b.n	8002c00 <HAL_DCMI_Suspend+0x88>
      }
    }
    while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e6      	bne.n	8002bce <HAL_DCMI_Suspend+0x56>
  }    
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return status;
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000580 	.word	0x20000580
 8002c1c:	92492493 	.word	0x92492493

08002c20 <HAL_DCMI_Resume>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI. 
  * @retval HAL status     
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef* hdcmi)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_DCMI_Resume+0x16>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e01a      	b.n	8002c6c <HAL_DCMI_Resume+0x4c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  if(hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b05      	cmp	r3, #5
 8002c48:	d10b      	bne.n	8002c62 <HAL_DCMI_Resume+0x42>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Disable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0201 	orr.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
  } 
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d016      	beq.n	8002cc0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2204      	movs	r2, #4
 8002c98:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	f043 0202 	orr.w	r2, r3, #2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2204      	movs	r2, #4
 8002caa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	4a2f      	ldr	r2, [pc, #188]	; (8002d70 <HAL_DCMI_IRQHandler+0xf8>)
 8002cb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fb8e 	bl	80033dc <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d016      	beq.n	8002cf8 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd6:	f043 0201 	orr.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	4a21      	ldr	r2, [pc, #132]	; (8002d70 <HAL_DCMI_IRQHandler+0xf8>)
 8002cec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fb72 	bl	80033dc <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d006      	beq.n	8002d10 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2210      	movs	r2, #16
 8002d08:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f83c 	bl	8002d88 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d006      	beq.n	8002d28 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2208      	movs	r2, #8
 8002d20:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f83a 	bl	8002d9c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d019      	beq.n	8002d66 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d107      	bne.n	8002d50 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 021e 	bic.w	r2, r2, #30
 8002d4e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0201 	bic.w	r2, r2, #1
 8002d5e:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff fa11 	bl	8002188 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	08002fe9 	.word	0x08002fe9

08002d74 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_DCMI_ConfigCrop>:
  * @param  XSize DCMI Pixel per line
  * @param  YSize DCMI Line number
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_ConfigCrop(DCMI_HandleTypeDef *hdcmi, uint32_t X0, uint32_t Y0, uint32_t XSize, uint32_t YSize)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_DCMI_ConfigCrop+0x1c>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e01e      	b.n	8002e0a <HAL_DCMI_ConfigCrop+0x5a>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  assert_param(IS_DCMI_WINDOW_COORDINATE(YSize));
  assert_param(IS_DCMI_WINDOW_COORDINATE(XSize));
  assert_param(IS_DCMI_WINDOW_HEIGHT(Y0));

  /* Configure CROP */
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_POSITION_CWSIZE_VLINE));
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	0419      	lsls	r1, r3, #16
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_POSITION_CWSTRT_VST));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	0419      	lsls	r1, r3, #16
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	621a      	str	r2, [r3, #32]

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_DCMI_DisableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_DCMI_DisableCrop+0x16>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e018      	b.n	8002e5e <HAL_DCMI_DisableCrop+0x48>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable DCMI Crop feature */
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0204 	bic.w	r2, r2, #4
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_DCMI_EnableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_EnableCrop(DCMI_HandleTypeDef *hdcmi)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_DCMI_EnableCrop+0x16>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e018      	b.n	8002eb2 <HAL_DCMI_EnableCrop+0x48>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Enable DCMI Crop feature */
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0204 	orr.w	r2, r2, #4
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d043      	beq.n	8002f60 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee4:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d118      	bne.n	8002f24 <DCMI_DMAXferCplt+0x66>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d015      	beq.n	8002f24 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	00da      	lsls	r2, r3, #3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	2200      	movs	r2, #0
 8002f12:	4619      	mov	r1, r3
 8002f14:	f001 fe36 	bl	8004b84 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	1e5a      	subs	r2, r3, #1
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	629a      	str	r2, [r3, #40]	; 0x28
 8002f22:	e044      	b.n	8002fae <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d13c      	bne.n	8002fae <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	00da      	lsls	r2, r3, #3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	4619      	mov	r1, r3
 8002f50:	f001 fe18 	bl	8004b84 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	1e5a      	subs	r2, r3, #1
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
 8002f5e:	e026      	b.n	8002fae <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d006      	beq.n	8002f7e <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f7a:	60da      	str	r2, [r3, #12]
 8002f7c:	e017      	b.n	8002fae <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10f      	bne.n	8002fae <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f92:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	0099      	lsls	r1, r3, #2
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	440a      	add	r2, r1
 8002fa4:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d112      	bne.n	8002fe0 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0201 	orr.w	r2, r2, #1
 8002fc8:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d103      	bne.n	8002fe0 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d003      	beq.n	8003008 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f7ff feb3 	bl	8002d74 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e05f      	b.n	80030e8 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7fe fd81 	bl	8001b44 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fe fd7e 	bl	8001b44 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800305e:	f023 0308 	bic.w	r3, r3, #8
 8003062:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6819      	ldr	r1, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003078:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003084:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003090:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b10      	cmp	r3, #16
 80030a0:	d112      	bne.n	80030c8 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7f1b      	ldrb	r3, [r3, #28]
 80030a6:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7f5b      	ldrb	r3, [r3, #29]
 80030ac:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80030ae:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	7f9b      	ldrb	r3, [r3, #30]
 80030b4:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80030b6:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7fdb      	ldrb	r3, [r3, #31]
 80030be:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80030c4:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80030c6:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 021e 	orr.w	r2, r2, #30
 80030d6:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030fc:	f7ff fb5a 	bl	80027b4 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e099      	b.n	8003240 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0201 	bic.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800312c:	e00f      	b.n	800314e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800312e:	f7ff fb41 	bl	80027b4 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b05      	cmp	r3, #5
 800313a:	d908      	bls.n	800314e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2203      	movs	r2, #3
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e078      	b.n	8003240 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e8      	bne.n	800312e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4b38      	ldr	r3, [pc, #224]	; (8003248 <HAL_DMA_Init+0x158>)
 8003168:	4013      	ands	r3, r2
 800316a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800317a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003186:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003192:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d107      	bne.n	80031b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	4313      	orrs	r3, r2
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f023 0307 	bic.w	r3, r3, #7
 80031ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d117      	bne.n	8003212 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00e      	beq.n	8003212 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fb01 	bl	80037fc <DMA_CheckFifoParam>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2240      	movs	r2, #64	; 0x40
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800320e:	2301      	movs	r3, #1
 8003210:	e016      	b.n	8003240 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 fab8 	bl	8003790 <DMA_CalcBaseAndBitshift>
 8003220:	4603      	mov	r3, r0
 8003222:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	223f      	movs	r2, #63	; 0x3f
 800322a:	409a      	lsls	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	f010803f 	.word	0xf010803f

0800324c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003262:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_DMA_Start_IT+0x26>
 800326e:	2302      	movs	r3, #2
 8003270:	e040      	b.n	80032f4 <HAL_DMA_Start_IT+0xa8>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b01      	cmp	r3, #1
 8003284:	d12f      	bne.n	80032e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2202      	movs	r2, #2
 800328a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	68b9      	ldr	r1, [r7, #8]
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 fa4a 	bl	8003734 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a4:	223f      	movs	r2, #63	; 0x3f
 80032a6:	409a      	lsls	r2, r3
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0216 	orr.w	r2, r2, #22
 80032ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d007      	beq.n	80032d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0208 	orr.w	r2, r2, #8
 80032d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e005      	b.n	80032f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032ee:	2302      	movs	r3, #2
 80032f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800330a:	f7ff fa53 	bl	80027b4 <HAL_GetTick>
 800330e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d008      	beq.n	800332e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e052      	b.n	80033d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0216 	bic.w	r2, r2, #22
 800333c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695a      	ldr	r2, [r3, #20]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800334c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d103      	bne.n	800335e <HAL_DMA_Abort+0x62>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800335a:	2b00      	cmp	r3, #0
 800335c:	d007      	beq.n	800336e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0208 	bic.w	r2, r2, #8
 800336c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800337e:	e013      	b.n	80033a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003380:	f7ff fa18 	bl	80027b4 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b05      	cmp	r3, #5
 800338c:	d90c      	bls.n	80033a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2203      	movs	r2, #3
 8003398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e015      	b.n	80033d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e4      	bne.n	8003380 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ba:	223f      	movs	r2, #63	; 0x3f
 80033bc:	409a      	lsls	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d004      	beq.n	80033fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e00c      	b.n	8003414 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2205      	movs	r2, #5
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0201 	bic.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800342c:	4b92      	ldr	r3, [pc, #584]	; (8003678 <HAL_DMA_IRQHandler+0x258>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a92      	ldr	r2, [pc, #584]	; (800367c <HAL_DMA_IRQHandler+0x25c>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	0a9b      	lsrs	r3, r3, #10
 8003438:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344a:	2208      	movs	r2, #8
 800344c:	409a      	lsls	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01a      	beq.n	800348c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d013      	beq.n	800348c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0204 	bic.w	r2, r2, #4
 8003472:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003478:	2208      	movs	r2, #8
 800347a:	409a      	lsls	r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003484:	f043 0201 	orr.w	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	2201      	movs	r2, #1
 8003492:	409a      	lsls	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d012      	beq.n	80034c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ae:	2201      	movs	r2, #1
 80034b0:	409a      	lsls	r2, r3
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	f043 0202 	orr.w	r2, r3, #2
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	2204      	movs	r2, #4
 80034c8:	409a      	lsls	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d012      	beq.n	80034f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00b      	beq.n	80034f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	2204      	movs	r2, #4
 80034e6:	409a      	lsls	r2, r3
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	f043 0204 	orr.w	r2, r3, #4
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fc:	2210      	movs	r2, #16
 80034fe:	409a      	lsls	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d043      	beq.n	8003590 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d03c      	beq.n	8003590 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351a:	2210      	movs	r2, #16
 800351c:	409a      	lsls	r2, r3
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d018      	beq.n	8003562 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d108      	bne.n	8003550 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d024      	beq.n	8003590 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	4798      	blx	r3
 800354e:	e01f      	b.n	8003590 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01b      	beq.n	8003590 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4798      	blx	r3
 8003560:	e016      	b.n	8003590 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d107      	bne.n	8003580 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0208 	bic.w	r2, r2, #8
 800357e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	2220      	movs	r2, #32
 8003596:	409a      	lsls	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4013      	ands	r3, r2
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 808e 	beq.w	80036be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 8086 	beq.w	80036be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b6:	2220      	movs	r2, #32
 80035b8:	409a      	lsls	r2, r3
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b05      	cmp	r3, #5
 80035c8:	d136      	bne.n	8003638 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0216 	bic.w	r2, r2, #22
 80035d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d103      	bne.n	80035fa <HAL_DMA_IRQHandler+0x1da>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0208 	bic.w	r2, r2, #8
 8003608:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360e:	223f      	movs	r2, #63	; 0x3f
 8003610:	409a      	lsls	r2, r3
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362a:	2b00      	cmp	r3, #0
 800362c:	d07d      	beq.n	800372a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	4798      	blx	r3
        }
        return;
 8003636:	e078      	b.n	800372a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01c      	beq.n	8003680 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d108      	bne.n	8003666 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	2b00      	cmp	r3, #0
 800365a:	d030      	beq.n	80036be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	4798      	blx	r3
 8003664:	e02b      	b.n	80036be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d027      	beq.n	80036be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	4798      	blx	r3
 8003676:	e022      	b.n	80036be <HAL_DMA_IRQHandler+0x29e>
 8003678:	20000580 	.word	0x20000580
 800367c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10f      	bne.n	80036ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0210 	bic.w	r2, r2, #16
 800369c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d032      	beq.n	800372c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d022      	beq.n	8003718 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2205      	movs	r2, #5
 80036d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	3301      	adds	r3, #1
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d307      	bcc.n	8003706 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1f2      	bne.n	80036ea <HAL_DMA_IRQHandler+0x2ca>
 8003704:	e000      	b.n	8003708 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003706:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4798      	blx	r3
 8003728:	e000      	b.n	800372c <HAL_DMA_IRQHandler+0x30c>
        return;
 800372a:	bf00      	nop
    }
  }
}
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop

08003734 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003750:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d108      	bne.n	8003774 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003772:	e007      	b.n	8003784 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	3b10      	subs	r3, #16
 80037a0:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <DMA_CalcBaseAndBitshift+0x64>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037aa:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <DMA_CalcBaseAndBitshift+0x68>)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4413      	add	r3, r2
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d909      	bls.n	80037d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037c6:	f023 0303 	bic.w	r3, r3, #3
 80037ca:	1d1a      	adds	r2, r3, #4
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	659a      	str	r2, [r3, #88]	; 0x58
 80037d0:	e007      	b.n	80037e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037da:	f023 0303 	bic.w	r3, r3, #3
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	aaaaaaab 	.word	0xaaaaaaab
 80037f8:	0801f470 	.word	0x0801f470

080037fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d11f      	bne.n	8003856 <DMA_CheckFifoParam+0x5a>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d856      	bhi.n	80038ca <DMA_CheckFifoParam+0xce>
 800381c:	a201      	add	r2, pc, #4	; (adr r2, 8003824 <DMA_CheckFifoParam+0x28>)
 800381e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003822:	bf00      	nop
 8003824:	08003835 	.word	0x08003835
 8003828:	08003847 	.word	0x08003847
 800382c:	08003835 	.word	0x08003835
 8003830:	080038cb 	.word	0x080038cb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d046      	beq.n	80038ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003844:	e043      	b.n	80038ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800384e:	d140      	bne.n	80038d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003854:	e03d      	b.n	80038d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385e:	d121      	bne.n	80038a4 <DMA_CheckFifoParam+0xa8>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b03      	cmp	r3, #3
 8003864:	d837      	bhi.n	80038d6 <DMA_CheckFifoParam+0xda>
 8003866:	a201      	add	r2, pc, #4	; (adr r2, 800386c <DMA_CheckFifoParam+0x70>)
 8003868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386c:	0800387d 	.word	0x0800387d
 8003870:	08003883 	.word	0x08003883
 8003874:	0800387d 	.word	0x0800387d
 8003878:	08003895 	.word	0x08003895
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
      break;
 8003880:	e030      	b.n	80038e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d025      	beq.n	80038da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003892:	e022      	b.n	80038da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800389c:	d11f      	bne.n	80038de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038a2:	e01c      	b.n	80038de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d903      	bls.n	80038b2 <DMA_CheckFifoParam+0xb6>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d003      	beq.n	80038b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038b0:	e018      	b.n	80038e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	73fb      	strb	r3, [r7, #15]
      break;
 80038b6:	e015      	b.n	80038e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00e      	beq.n	80038e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
      break;
 80038c8:	e00b      	b.n	80038e2 <DMA_CheckFifoParam+0xe6>
      break;
 80038ca:	bf00      	nop
 80038cc:	e00a      	b.n	80038e4 <DMA_CheckFifoParam+0xe8>
      break;
 80038ce:	bf00      	nop
 80038d0:	e008      	b.n	80038e4 <DMA_CheckFifoParam+0xe8>
      break;
 80038d2:	bf00      	nop
 80038d4:	e006      	b.n	80038e4 <DMA_CheckFifoParam+0xe8>
      break;
 80038d6:	bf00      	nop
 80038d8:	e004      	b.n	80038e4 <DMA_CheckFifoParam+0xe8>
      break;
 80038da:	bf00      	nop
 80038dc:	e002      	b.n	80038e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80038de:	bf00      	nop
 80038e0:	e000      	b.n	80038e4 <DMA_CheckFifoParam+0xe8>
      break;
 80038e2:	bf00      	nop
    }
  } 
  
  return status; 
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop

080038f4 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b80      	cmp	r3, #128	; 0x80
 800390c:	d106      	bne.n	800391c <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003914:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f001 b913 	b.w	8004b42 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d105      	bne.n	8003940 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2240      	movs	r2, #64	; 0x40
 8003938:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	f001 b901 	b.w	8004b42 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003946:	2b01      	cmp	r3, #1
 8003948:	d102      	bne.n	8003950 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 800394a:	2302      	movs	r3, #2
 800394c:	f001 b8f9 	b.w	8004b42 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	f041 80e7 	bne.w	8004b34 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2202      	movs	r2, #2
 800396a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003982:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f001 f910 	bl	8004bb8 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	4b99      	ldr	r3, [pc, #612]	; (8003c04 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d960      	bls.n	8003a66 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a97      	ldr	r2, [pc, #604]	; (8003c08 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d057      	beq.n	8003a5e <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a96      	ldr	r2, [pc, #600]	; (8003c0c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d050      	beq.n	8003a5a <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a94      	ldr	r2, [pc, #592]	; (8003c10 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d049      	beq.n	8003a56 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a93      	ldr	r2, [pc, #588]	; (8003c14 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d042      	beq.n	8003a52 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a91      	ldr	r2, [pc, #580]	; (8003c18 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d03a      	beq.n	8003a4c <HAL_DMAEx_MultiBufferStart_IT+0x158>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a90      	ldr	r2, [pc, #576]	; (8003c1c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d032      	beq.n	8003a46 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a8e      	ldr	r2, [pc, #568]	; (8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d02a      	beq.n	8003a40 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a8d      	ldr	r2, [pc, #564]	; (8003c24 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d022      	beq.n	8003a3a <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a8b      	ldr	r2, [pc, #556]	; (8003c28 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01a      	beq.n	8003a34 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a8a      	ldr	r2, [pc, #552]	; (8003c2c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d012      	beq.n	8003a2e <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a88      	ldr	r2, [pc, #544]	; (8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00a      	beq.n	8003a28 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a87      	ldr	r2, [pc, #540]	; (8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d102      	bne.n	8003a22 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8003a1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a20:	e01e      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003a22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a26:	e01b      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003a28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a2c:	e018      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003a2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a32:	e015      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003a34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a38:	e012      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003a3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a3e:	e00f      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003a40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a44:	e00c      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003a46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a4a:	e009      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003a4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a50:	e006      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003a52:	2320      	movs	r3, #32
 8003a54:	e004      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003a56:	2320      	movs	r3, #32
 8003a58:	e002      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003a5a:	2320      	movs	r3, #32
 8003a5c:	e000      	b.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003a5e:	2320      	movs	r3, #32
 8003a60:	4a75      	ldr	r2, [pc, #468]	; (8003c38 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8003a62:	60d3      	str	r3, [r2, #12]
 8003a64:	e150      	b.n	8003d08 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4b73      	ldr	r3, [pc, #460]	; (8003c3c <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d960      	bls.n	8003b34 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a64      	ldr	r2, [pc, #400]	; (8003c08 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d057      	beq.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a62      	ldr	r2, [pc, #392]	; (8003c0c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d050      	beq.n	8003b28 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a61      	ldr	r2, [pc, #388]	; (8003c10 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d049      	beq.n	8003b24 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a5f      	ldr	r2, [pc, #380]	; (8003c14 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d042      	beq.n	8003b20 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a5e      	ldr	r2, [pc, #376]	; (8003c18 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d03a      	beq.n	8003b1a <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a5c      	ldr	r2, [pc, #368]	; (8003c1c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d032      	beq.n	8003b14 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a5b      	ldr	r2, [pc, #364]	; (8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d02a      	beq.n	8003b0e <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a59      	ldr	r2, [pc, #356]	; (8003c24 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d022      	beq.n	8003b08 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a58      	ldr	r2, [pc, #352]	; (8003c28 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d01a      	beq.n	8003b02 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a56      	ldr	r2, [pc, #344]	; (8003c2c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d012      	beq.n	8003afc <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a55      	ldr	r2, [pc, #340]	; (8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00a      	beq.n	8003af6 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a53      	ldr	r2, [pc, #332]	; (8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d102      	bne.n	8003af0 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8003aea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003aee:	e01e      	b.n	8003b2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003af0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003af4:	e01b      	b.n	8003b2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003af6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003afa:	e018      	b.n	8003b2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003afc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b00:	e015      	b.n	8003b2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003b02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b06:	e012      	b.n	8003b2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003b08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b0c:	e00f      	b.n	8003b2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003b0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b12:	e00c      	b.n	8003b2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b18:	e009      	b.n	8003b2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003b1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b1e:	e006      	b.n	8003b2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003b20:	2320      	movs	r3, #32
 8003b22:	e004      	b.n	8003b2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003b24:	2320      	movs	r3, #32
 8003b26:	e002      	b.n	8003b2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003b28:	2320      	movs	r3, #32
 8003b2a:	e000      	b.n	8003b2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	4a42      	ldr	r2, [pc, #264]	; (8003c38 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8003b30:	6093      	str	r3, [r2, #8]
 8003b32:	e0e9      	b.n	8003d08 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	f240 8083 	bls.w	8003c48 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a30      	ldr	r2, [pc, #192]	; (8003c08 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d057      	beq.n	8003bfc <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a2e      	ldr	r2, [pc, #184]	; (8003c0c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d050      	beq.n	8003bf8 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a2d      	ldr	r2, [pc, #180]	; (8003c10 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d049      	beq.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a2b      	ldr	r2, [pc, #172]	; (8003c14 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d042      	beq.n	8003bf0 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a2a      	ldr	r2, [pc, #168]	; (8003c18 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d03a      	beq.n	8003bea <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a28      	ldr	r2, [pc, #160]	; (8003c1c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d032      	beq.n	8003be4 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a27      	ldr	r2, [pc, #156]	; (8003c20 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d02a      	beq.n	8003bde <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a25      	ldr	r2, [pc, #148]	; (8003c24 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d022      	beq.n	8003bd8 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a24      	ldr	r2, [pc, #144]	; (8003c28 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d01a      	beq.n	8003bd2 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a22      	ldr	r2, [pc, #136]	; (8003c2c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d012      	beq.n	8003bcc <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a21      	ldr	r2, [pc, #132]	; (8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00a      	beq.n	8003bc6 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a1f      	ldr	r2, [pc, #124]	; (8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d102      	bne.n	8003bc0 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8003bba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bbe:	e01e      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003bc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bc4:	e01b      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003bc6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bca:	e018      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003bcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bd0:	e015      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003bd2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bd6:	e012      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003bd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bdc:	e00f      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003bde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003be2:	e00c      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003be8:	e009      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003bea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bee:	e006      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	e004      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003bf4:	2320      	movs	r3, #32
 8003bf6:	e002      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	e000      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	4a11      	ldr	r2, [pc, #68]	; (8003c44 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8003c00:	60d3      	str	r3, [r2, #12]
 8003c02:	e081      	b.n	8003d08 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8003c04:	40026458 	.word	0x40026458
 8003c08:	40026010 	.word	0x40026010
 8003c0c:	40026410 	.word	0x40026410
 8003c10:	40026070 	.word	0x40026070
 8003c14:	40026470 	.word	0x40026470
 8003c18:	40026028 	.word	0x40026028
 8003c1c:	40026428 	.word	0x40026428
 8003c20:	40026088 	.word	0x40026088
 8003c24:	40026488 	.word	0x40026488
 8003c28:	40026040 	.word	0x40026040
 8003c2c:	40026440 	.word	0x40026440
 8003c30:	400260a0 	.word	0x400260a0
 8003c34:	400264a0 	.word	0x400264a0
 8003c38:	40026400 	.word	0x40026400
 8003c3c:	400260b8 	.word	0x400260b8
 8003c40:	40026058 	.word	0x40026058
 8003c44:	40026000 	.word	0x40026000
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a96      	ldr	r2, [pc, #600]	; (8003ea8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d057      	beq.n	8003d02 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a95      	ldr	r2, [pc, #596]	; (8003eac <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d050      	beq.n	8003cfe <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a93      	ldr	r2, [pc, #588]	; (8003eb0 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d049      	beq.n	8003cfa <HAL_DMAEx_MultiBufferStart_IT+0x406>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a92      	ldr	r2, [pc, #584]	; (8003eb4 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d042      	beq.n	8003cf6 <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a90      	ldr	r2, [pc, #576]	; (8003eb8 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d03a      	beq.n	8003cf0 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a8f      	ldr	r2, [pc, #572]	; (8003ebc <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d032      	beq.n	8003cea <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a8d      	ldr	r2, [pc, #564]	; (8003ec0 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d02a      	beq.n	8003ce4 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a8c      	ldr	r2, [pc, #560]	; (8003ec4 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d022      	beq.n	8003cde <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a8a      	ldr	r2, [pc, #552]	; (8003ec8 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01a      	beq.n	8003cd8 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a89      	ldr	r2, [pc, #548]	; (8003ecc <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d012      	beq.n	8003cd2 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a87      	ldr	r2, [pc, #540]	; (8003ed0 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00a      	beq.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a86      	ldr	r2, [pc, #536]	; (8003ed4 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d102      	bne.n	8003cc6 <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8003cc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cc4:	e01e      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003cc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cca:	e01b      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003ccc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cd0:	e018      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003cd2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cd6:	e015      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003cd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cdc:	e012      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003cde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ce2:	e00f      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003ce4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ce8:	e00c      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003cea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cee:	e009      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003cf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cf4:	e006      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003cf6:	2320      	movs	r3, #32
 8003cf8:	e004      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	e002      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003cfe:	2320      	movs	r3, #32
 8003d00:	e000      	b.n	8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003d02:	2320      	movs	r3, #32
 8003d04:	4a74      	ldr	r2, [pc, #464]	; (8003ed8 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8003d06:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b73      	ldr	r3, [pc, #460]	; (8003edc <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d960      	bls.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a63      	ldr	r2, [pc, #396]	; (8003ea8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d057      	beq.n	8003dce <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a62      	ldr	r2, [pc, #392]	; (8003eac <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d050      	beq.n	8003dca <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a60      	ldr	r2, [pc, #384]	; (8003eb0 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d049      	beq.n	8003dc6 <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a5f      	ldr	r2, [pc, #380]	; (8003eb4 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d042      	beq.n	8003dc2 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a5d      	ldr	r2, [pc, #372]	; (8003eb8 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d03a      	beq.n	8003dbc <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a5c      	ldr	r2, [pc, #368]	; (8003ebc <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d032      	beq.n	8003db6 <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a5a      	ldr	r2, [pc, #360]	; (8003ec0 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d02a      	beq.n	8003db0 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a59      	ldr	r2, [pc, #356]	; (8003ec4 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d022      	beq.n	8003daa <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a57      	ldr	r2, [pc, #348]	; (8003ec8 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01a      	beq.n	8003da4 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a56      	ldr	r2, [pc, #344]	; (8003ecc <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d012      	beq.n	8003d9e <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a54      	ldr	r2, [pc, #336]	; (8003ed0 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00a      	beq.n	8003d98 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a53      	ldr	r2, [pc, #332]	; (8003ed4 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d102      	bne.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8003d8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d90:	e01e      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003d92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d96:	e01b      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003d98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d9c:	e018      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003d9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003da2:	e015      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003da4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003da8:	e012      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dae:	e00f      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003db4:	e00c      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dba:	e009      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dc0:	e006      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003dc2:	2310      	movs	r3, #16
 8003dc4:	e004      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003dc6:	2310      	movs	r3, #16
 8003dc8:	e002      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003dca:	2310      	movs	r3, #16
 8003dcc:	e000      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003dce:	2310      	movs	r3, #16
 8003dd0:	4a43      	ldr	r2, [pc, #268]	; (8003ee0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8003dd2:	60d3      	str	r3, [r2, #12]
 8003dd4:	e14f      	b.n	8004076 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 8003dde:	429a      	cmp	r2, r3
 8003de0:	f240 8082 	bls.w	8003ee8 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a2f      	ldr	r2, [pc, #188]	; (8003ea8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d057      	beq.n	8003e9e <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a2e      	ldr	r2, [pc, #184]	; (8003eac <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d050      	beq.n	8003e9a <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a2c      	ldr	r2, [pc, #176]	; (8003eb0 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d049      	beq.n	8003e96 <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a2b      	ldr	r2, [pc, #172]	; (8003eb4 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d042      	beq.n	8003e92 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a29      	ldr	r2, [pc, #164]	; (8003eb8 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d03a      	beq.n	8003e8c <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a28      	ldr	r2, [pc, #160]	; (8003ebc <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d032      	beq.n	8003e86 <HAL_DMAEx_MultiBufferStart_IT+0x592>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a26      	ldr	r2, [pc, #152]	; (8003ec0 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d02a      	beq.n	8003e80 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a25      	ldr	r2, [pc, #148]	; (8003ec4 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d022      	beq.n	8003e7a <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a23      	ldr	r2, [pc, #140]	; (8003ec8 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d01a      	beq.n	8003e74 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a22      	ldr	r2, [pc, #136]	; (8003ecc <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d012      	beq.n	8003e6e <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a20      	ldr	r2, [pc, #128]	; (8003ed0 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00a      	beq.n	8003e68 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1f      	ldr	r2, [pc, #124]	; (8003ed4 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d102      	bne.n	8003e62 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8003e5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e60:	e01e      	b.n	8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003e62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e66:	e01b      	b.n	8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003e68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e6c:	e018      	b.n	8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003e6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e72:	e015      	b.n	8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003e74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e78:	e012      	b.n	8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e7e:	e00f      	b.n	8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e84:	e00c      	b.n	8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e8a:	e009      	b.n	8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e90:	e006      	b.n	8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003e92:	2310      	movs	r3, #16
 8003e94:	e004      	b.n	8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003e96:	2310      	movs	r3, #16
 8003e98:	e002      	b.n	8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003e9a:	2310      	movs	r3, #16
 8003e9c:	e000      	b.n	8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003e9e:	2310      	movs	r3, #16
 8003ea0:	4a0f      	ldr	r2, [pc, #60]	; (8003ee0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8003ea2:	6093      	str	r3, [r2, #8]
 8003ea4:	e0e7      	b.n	8004076 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8003ea6:	bf00      	nop
 8003ea8:	40026010 	.word	0x40026010
 8003eac:	40026410 	.word	0x40026410
 8003eb0:	40026070 	.word	0x40026070
 8003eb4:	40026470 	.word	0x40026470
 8003eb8:	40026028 	.word	0x40026028
 8003ebc:	40026428 	.word	0x40026428
 8003ec0:	40026088 	.word	0x40026088
 8003ec4:	40026488 	.word	0x40026488
 8003ec8:	40026040 	.word	0x40026040
 8003ecc:	40026440 	.word	0x40026440
 8003ed0:	400260a0 	.word	0x400260a0
 8003ed4:	400264a0 	.word	0x400264a0
 8003ed8:	40026000 	.word	0x40026000
 8003edc:	40026458 	.word	0x40026458
 8003ee0:	40026400 	.word	0x40026400
 8003ee4:	400260b8 	.word	0x400260b8
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	4b96      	ldr	r3, [pc, #600]	; (8004148 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d960      	bls.n	8003fb6 <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a94      	ldr	r2, [pc, #592]	; (800414c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d057      	beq.n	8003fae <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a93      	ldr	r2, [pc, #588]	; (8004150 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d050      	beq.n	8003faa <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a91      	ldr	r2, [pc, #580]	; (8004154 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d049      	beq.n	8003fa6 <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a90      	ldr	r2, [pc, #576]	; (8004158 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d042      	beq.n	8003fa2 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a8e      	ldr	r2, [pc, #568]	; (800415c <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d03a      	beq.n	8003f9c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a8d      	ldr	r2, [pc, #564]	; (8004160 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d032      	beq.n	8003f96 <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a8b      	ldr	r2, [pc, #556]	; (8004164 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d02a      	beq.n	8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a8a      	ldr	r2, [pc, #552]	; (8004168 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d022      	beq.n	8003f8a <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a88      	ldr	r2, [pc, #544]	; (800416c <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01a      	beq.n	8003f84 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a87      	ldr	r2, [pc, #540]	; (8004170 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d012      	beq.n	8003f7e <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a85      	ldr	r2, [pc, #532]	; (8004174 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00a      	beq.n	8003f78 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a84      	ldr	r2, [pc, #528]	; (8004178 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d102      	bne.n	8003f72 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8003f6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f70:	e01e      	b.n	8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003f72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f76:	e01b      	b.n	8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003f78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f7c:	e018      	b.n	8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003f7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f82:	e015      	b.n	8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003f84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f88:	e012      	b.n	8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f8e:	e00f      	b.n	8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f94:	e00c      	b.n	8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f9a:	e009      	b.n	8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fa0:	e006      	b.n	8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003fa2:	2310      	movs	r3, #16
 8003fa4:	e004      	b.n	8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003fa6:	2310      	movs	r3, #16
 8003fa8:	e002      	b.n	8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003faa:	2310      	movs	r3, #16
 8003fac:	e000      	b.n	8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003fae:	2310      	movs	r3, #16
 8003fb0:	4a72      	ldr	r2, [pc, #456]	; (800417c <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8003fb2:	60d3      	str	r3, [r2, #12]
 8003fb4:	e05f      	b.n	8004076 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a64      	ldr	r2, [pc, #400]	; (800414c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d057      	beq.n	8004070 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a62      	ldr	r2, [pc, #392]	; (8004150 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d050      	beq.n	800406c <HAL_DMAEx_MultiBufferStart_IT+0x778>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a61      	ldr	r2, [pc, #388]	; (8004154 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d049      	beq.n	8004068 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a5f      	ldr	r2, [pc, #380]	; (8004158 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d042      	beq.n	8004064 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a5e      	ldr	r2, [pc, #376]	; (800415c <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d03a      	beq.n	800405e <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a5c      	ldr	r2, [pc, #368]	; (8004160 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d032      	beq.n	8004058 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a5b      	ldr	r2, [pc, #364]	; (8004164 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d02a      	beq.n	8004052 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a59      	ldr	r2, [pc, #356]	; (8004168 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d022      	beq.n	800404c <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a58      	ldr	r2, [pc, #352]	; (800416c <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d01a      	beq.n	8004046 <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a56      	ldr	r2, [pc, #344]	; (8004170 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d012      	beq.n	8004040 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a55      	ldr	r2, [pc, #340]	; (8004174 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00a      	beq.n	800403a <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a53      	ldr	r2, [pc, #332]	; (8004178 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d102      	bne.n	8004034 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 800402e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004032:	e01e      	b.n	8004072 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8004034:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004038:	e01b      	b.n	8004072 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800403a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800403e:	e018      	b.n	8004072 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8004040:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004044:	e015      	b.n	8004072 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8004046:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800404a:	e012      	b.n	8004072 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800404c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004050:	e00f      	b.n	8004072 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8004052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004056:	e00c      	b.n	8004072 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8004058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800405c:	e009      	b.n	8004072 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800405e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004062:	e006      	b.n	8004072 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8004064:	2310      	movs	r3, #16
 8004066:	e004      	b.n	8004072 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8004068:	2310      	movs	r3, #16
 800406a:	e002      	b.n	8004072 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800406c:	2310      	movs	r3, #16
 800406e:	e000      	b.n	8004072 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8004070:	2310      	movs	r3, #16
 8004072:	4a42      	ldr	r2, [pc, #264]	; (800417c <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8004074:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	4b40      	ldr	r3, [pc, #256]	; (8004180 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 800407e:	429a      	cmp	r2, r3
 8004080:	f240 8082 	bls.w	8004188 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a30      	ldr	r2, [pc, #192]	; (800414c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d057      	beq.n	800413e <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a2f      	ldr	r2, [pc, #188]	; (8004150 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d050      	beq.n	800413a <HAL_DMAEx_MultiBufferStart_IT+0x846>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a2d      	ldr	r2, [pc, #180]	; (8004154 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d049      	beq.n	8004136 <HAL_DMAEx_MultiBufferStart_IT+0x842>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a2c      	ldr	r2, [pc, #176]	; (8004158 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d042      	beq.n	8004132 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a2a      	ldr	r2, [pc, #168]	; (800415c <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d03a      	beq.n	800412c <HAL_DMAEx_MultiBufferStart_IT+0x838>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a29      	ldr	r2, [pc, #164]	; (8004160 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d032      	beq.n	8004126 <HAL_DMAEx_MultiBufferStart_IT+0x832>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a27      	ldr	r2, [pc, #156]	; (8004164 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d02a      	beq.n	8004120 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a26      	ldr	r2, [pc, #152]	; (8004168 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d022      	beq.n	800411a <HAL_DMAEx_MultiBufferStart_IT+0x826>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a24      	ldr	r2, [pc, #144]	; (800416c <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01a      	beq.n	8004114 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a23      	ldr	r2, [pc, #140]	; (8004170 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d012      	beq.n	800410e <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a21      	ldr	r2, [pc, #132]	; (8004174 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00a      	beq.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a20      	ldr	r2, [pc, #128]	; (8004178 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d102      	bne.n	8004102 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 80040fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004100:	e01e      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8004102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004106:	e01b      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8004108:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800410c:	e018      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800410e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004112:	e015      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8004114:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004118:	e012      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800411a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800411e:	e00f      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8004120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004124:	e00c      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8004126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800412a:	e009      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800412c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004130:	e006      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8004132:	2308      	movs	r3, #8
 8004134:	e004      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8004136:	2308      	movs	r3, #8
 8004138:	e002      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800413a:	2308      	movs	r3, #8
 800413c:	e000      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800413e:	2308      	movs	r3, #8
 8004140:	4a10      	ldr	r2, [pc, #64]	; (8004184 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 8004142:	60d3      	str	r3, [r2, #12]
 8004144:	e16f      	b.n	8004426 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8004146:	bf00      	nop
 8004148:	40026058 	.word	0x40026058
 800414c:	40026010 	.word	0x40026010
 8004150:	40026410 	.word	0x40026410
 8004154:	40026070 	.word	0x40026070
 8004158:	40026470 	.word	0x40026470
 800415c:	40026028 	.word	0x40026028
 8004160:	40026428 	.word	0x40026428
 8004164:	40026088 	.word	0x40026088
 8004168:	40026488 	.word	0x40026488
 800416c:	40026040 	.word	0x40026040
 8004170:	40026440 	.word	0x40026440
 8004174:	400260a0 	.word	0x400260a0
 8004178:	400264a0 	.word	0x400264a0
 800417c:	40026000 	.word	0x40026000
 8004180:	40026458 	.word	0x40026458
 8004184:	40026400 	.word	0x40026400
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	4b94      	ldr	r3, [pc, #592]	; (80043e0 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004190:	429a      	cmp	r2, r3
 8004192:	d960      	bls.n	8004256 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a92      	ldr	r2, [pc, #584]	; (80043e4 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d057      	beq.n	800424e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a91      	ldr	r2, [pc, #580]	; (80043e8 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d050      	beq.n	800424a <HAL_DMAEx_MultiBufferStart_IT+0x956>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a8f      	ldr	r2, [pc, #572]	; (80043ec <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d049      	beq.n	8004246 <HAL_DMAEx_MultiBufferStart_IT+0x952>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a8e      	ldr	r2, [pc, #568]	; (80043f0 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d042      	beq.n	8004242 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a8c      	ldr	r2, [pc, #560]	; (80043f4 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d03a      	beq.n	800423c <HAL_DMAEx_MultiBufferStart_IT+0x948>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a8b      	ldr	r2, [pc, #556]	; (80043f8 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d032      	beq.n	8004236 <HAL_DMAEx_MultiBufferStart_IT+0x942>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a89      	ldr	r2, [pc, #548]	; (80043fc <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d02a      	beq.n	8004230 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a88      	ldr	r2, [pc, #544]	; (8004400 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d022      	beq.n	800422a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a86      	ldr	r2, [pc, #536]	; (8004404 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d01a      	beq.n	8004224 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a85      	ldr	r2, [pc, #532]	; (8004408 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d012      	beq.n	800421e <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a83      	ldr	r2, [pc, #524]	; (800440c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00a      	beq.n	8004218 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a82      	ldr	r2, [pc, #520]	; (8004410 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d102      	bne.n	8004212 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 800420c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004210:	e01e      	b.n	8004250 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8004212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004216:	e01b      	b.n	8004250 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8004218:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800421c:	e018      	b.n	8004250 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800421e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004222:	e015      	b.n	8004250 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8004224:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004228:	e012      	b.n	8004250 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800422a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800422e:	e00f      	b.n	8004250 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8004230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004234:	e00c      	b.n	8004250 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8004236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800423a:	e009      	b.n	8004250 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800423c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004240:	e006      	b.n	8004250 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8004242:	2308      	movs	r3, #8
 8004244:	e004      	b.n	8004250 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8004246:	2308      	movs	r3, #8
 8004248:	e002      	b.n	8004250 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800424a:	2308      	movs	r3, #8
 800424c:	e000      	b.n	8004250 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800424e:	2308      	movs	r3, #8
 8004250:	4a70      	ldr	r2, [pc, #448]	; (8004414 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 8004252:	6093      	str	r3, [r2, #8]
 8004254:	e0e7      	b.n	8004426 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	4b6e      	ldr	r3, [pc, #440]	; (8004418 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 800425e:	429a      	cmp	r2, r3
 8004260:	d960      	bls.n	8004324 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a5f      	ldr	r2, [pc, #380]	; (80043e4 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d057      	beq.n	800431c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a5d      	ldr	r2, [pc, #372]	; (80043e8 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d050      	beq.n	8004318 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a5c      	ldr	r2, [pc, #368]	; (80043ec <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d049      	beq.n	8004314 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a5a      	ldr	r2, [pc, #360]	; (80043f0 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d042      	beq.n	8004310 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a59      	ldr	r2, [pc, #356]	; (80043f4 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d03a      	beq.n	800430a <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a57      	ldr	r2, [pc, #348]	; (80043f8 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d032      	beq.n	8004304 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a56      	ldr	r2, [pc, #344]	; (80043fc <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d02a      	beq.n	80042fe <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a54      	ldr	r2, [pc, #336]	; (8004400 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d022      	beq.n	80042f8 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a53      	ldr	r2, [pc, #332]	; (8004404 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d01a      	beq.n	80042f2 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a51      	ldr	r2, [pc, #324]	; (8004408 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d012      	beq.n	80042ec <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a50      	ldr	r2, [pc, #320]	; (800440c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00a      	beq.n	80042e6 <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a4e      	ldr	r2, [pc, #312]	; (8004410 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d102      	bne.n	80042e0 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 80042da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80042de:	e01e      	b.n	800431e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80042e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042e4:	e01b      	b.n	800431e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80042e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80042ea:	e018      	b.n	800431e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80042ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80042f0:	e015      	b.n	800431e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80042f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80042f6:	e012      	b.n	800431e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80042f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042fc:	e00f      	b.n	800431e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80042fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004302:	e00c      	b.n	800431e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8004304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004308:	e009      	b.n	800431e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800430a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800430e:	e006      	b.n	800431e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8004310:	2308      	movs	r3, #8
 8004312:	e004      	b.n	800431e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8004314:	2308      	movs	r3, #8
 8004316:	e002      	b.n	800431e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8004318:	2308      	movs	r3, #8
 800431a:	e000      	b.n	800431e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800431c:	2308      	movs	r3, #8
 800431e:	4a3f      	ldr	r2, [pc, #252]	; (800441c <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8004320:	60d3      	str	r3, [r2, #12]
 8004322:	e080      	b.n	8004426 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a2e      	ldr	r2, [pc, #184]	; (80043e4 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d078      	beq.n	8004420 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2d      	ldr	r2, [pc, #180]	; (80043e8 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d050      	beq.n	80043da <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a2b      	ldr	r2, [pc, #172]	; (80043ec <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d049      	beq.n	80043d6 <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a2a      	ldr	r2, [pc, #168]	; (80043f0 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d042      	beq.n	80043d2 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a28      	ldr	r2, [pc, #160]	; (80043f4 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d03a      	beq.n	80043cc <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a27      	ldr	r2, [pc, #156]	; (80043f8 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d032      	beq.n	80043c6 <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a25      	ldr	r2, [pc, #148]	; (80043fc <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d02a      	beq.n	80043c0 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a24      	ldr	r2, [pc, #144]	; (8004400 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d022      	beq.n	80043ba <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a22      	ldr	r2, [pc, #136]	; (8004404 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d01a      	beq.n	80043b4 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a21      	ldr	r2, [pc, #132]	; (8004408 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d012      	beq.n	80043ae <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1f      	ldr	r2, [pc, #124]	; (800440c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00a      	beq.n	80043a8 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1e      	ldr	r2, [pc, #120]	; (8004410 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d102      	bne.n	80043a2 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 800439c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80043a0:	e03f      	b.n	8004422 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80043a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043a6:	e03c      	b.n	8004422 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80043a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80043ac:	e039      	b.n	8004422 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80043ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80043b2:	e036      	b.n	8004422 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80043b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80043b8:	e033      	b.n	8004422 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80043ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043be:	e030      	b.n	8004422 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80043c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043c4:	e02d      	b.n	8004422 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80043c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043ca:	e02a      	b.n	8004422 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80043cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043d0:	e027      	b.n	8004422 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80043d2:	2308      	movs	r3, #8
 80043d4:	e025      	b.n	8004422 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80043d6:	2308      	movs	r3, #8
 80043d8:	e023      	b.n	8004422 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80043da:	2308      	movs	r3, #8
 80043dc:	e021      	b.n	8004422 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80043de:	bf00      	nop
 80043e0:	400260b8 	.word	0x400260b8
 80043e4:	40026010 	.word	0x40026010
 80043e8:	40026410 	.word	0x40026410
 80043ec:	40026070 	.word	0x40026070
 80043f0:	40026470 	.word	0x40026470
 80043f4:	40026028 	.word	0x40026028
 80043f8:	40026428 	.word	0x40026428
 80043fc:	40026088 	.word	0x40026088
 8004400:	40026488 	.word	0x40026488
 8004404:	40026040 	.word	0x40026040
 8004408:	40026440 	.word	0x40026440
 800440c:	400260a0 	.word	0x400260a0
 8004410:	400264a0 	.word	0x400264a0
 8004414:	40026400 	.word	0x40026400
 8004418:	40026058 	.word	0x40026058
 800441c:	40026000 	.word	0x40026000
 8004420:	2308      	movs	r3, #8
 8004422:	4a9a      	ldr	r2, [pc, #616]	; (800468c <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8004424:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	4b98      	ldr	r3, [pc, #608]	; (8004690 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 800442e:	429a      	cmp	r2, r3
 8004430:	d960      	bls.n	80044f4 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a97      	ldr	r2, [pc, #604]	; (8004694 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d057      	beq.n	80044ec <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a95      	ldr	r2, [pc, #596]	; (8004698 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d050      	beq.n	80044e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a94      	ldr	r2, [pc, #592]	; (800469c <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d049      	beq.n	80044e4 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a92      	ldr	r2, [pc, #584]	; (80046a0 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d042      	beq.n	80044e0 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a91      	ldr	r2, [pc, #580]	; (80046a4 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d03a      	beq.n	80044da <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a8f      	ldr	r2, [pc, #572]	; (80046a8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d032      	beq.n	80044d4 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a8e      	ldr	r2, [pc, #568]	; (80046ac <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d02a      	beq.n	80044ce <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a8c      	ldr	r2, [pc, #560]	; (80046b0 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d022      	beq.n	80044c8 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a8b      	ldr	r2, [pc, #556]	; (80046b4 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d01a      	beq.n	80044c2 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a89      	ldr	r2, [pc, #548]	; (80046b8 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d012      	beq.n	80044bc <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a88      	ldr	r2, [pc, #544]	; (80046bc <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00a      	beq.n	80044b6 <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a86      	ldr	r2, [pc, #536]	; (80046c0 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d102      	bne.n	80044b0 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 80044aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044ae:	e01e      	b.n	80044ee <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80044b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044b4:	e01b      	b.n	80044ee <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80044b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044ba:	e018      	b.n	80044ee <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80044bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044c0:	e015      	b.n	80044ee <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80044c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044c6:	e012      	b.n	80044ee <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80044c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044cc:	e00f      	b.n	80044ee <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80044ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044d2:	e00c      	b.n	80044ee <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80044d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044d8:	e009      	b.n	80044ee <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80044da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044de:	e006      	b.n	80044ee <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80044e0:	2304      	movs	r3, #4
 80044e2:	e004      	b.n	80044ee <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80044e4:	2304      	movs	r3, #4
 80044e6:	e002      	b.n	80044ee <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80044e8:	2304      	movs	r3, #4
 80044ea:	e000      	b.n	80044ee <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80044ec:	2304      	movs	r3, #4
 80044ee:	4a75      	ldr	r2, [pc, #468]	; (80046c4 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 80044f0:	60d3      	str	r3, [r2, #12]
 80044f2:	e151      	b.n	8004798 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	4b73      	ldr	r3, [pc, #460]	; (80046c8 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d960      	bls.n	80045c2 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a63      	ldr	r2, [pc, #396]	; (8004694 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d057      	beq.n	80045ba <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a62      	ldr	r2, [pc, #392]	; (8004698 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d050      	beq.n	80045b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a60      	ldr	r2, [pc, #384]	; (800469c <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d049      	beq.n	80045b2 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a5f      	ldr	r2, [pc, #380]	; (80046a0 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d042      	beq.n	80045ae <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a5d      	ldr	r2, [pc, #372]	; (80046a4 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d03a      	beq.n	80045a8 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a5c      	ldr	r2, [pc, #368]	; (80046a8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d032      	beq.n	80045a2 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a5a      	ldr	r2, [pc, #360]	; (80046ac <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d02a      	beq.n	800459c <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a59      	ldr	r2, [pc, #356]	; (80046b0 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d022      	beq.n	8004596 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a57      	ldr	r2, [pc, #348]	; (80046b4 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d01a      	beq.n	8004590 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a56      	ldr	r2, [pc, #344]	; (80046b8 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d012      	beq.n	800458a <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a54      	ldr	r2, [pc, #336]	; (80046bc <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00a      	beq.n	8004584 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a53      	ldr	r2, [pc, #332]	; (80046c0 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d102      	bne.n	800457e <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8004578:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800457c:	e01e      	b.n	80045bc <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800457e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004582:	e01b      	b.n	80045bc <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004584:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004588:	e018      	b.n	80045bc <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800458a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800458e:	e015      	b.n	80045bc <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004590:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004594:	e012      	b.n	80045bc <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8004596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800459a:	e00f      	b.n	80045bc <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800459c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045a0:	e00c      	b.n	80045bc <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80045a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045a6:	e009      	b.n	80045bc <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80045a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045ac:	e006      	b.n	80045bc <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80045ae:	2304      	movs	r3, #4
 80045b0:	e004      	b.n	80045bc <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80045b2:	2304      	movs	r3, #4
 80045b4:	e002      	b.n	80045bc <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80045b6:	2304      	movs	r3, #4
 80045b8:	e000      	b.n	80045bc <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80045ba:	2304      	movs	r3, #4
 80045bc:	4a41      	ldr	r2, [pc, #260]	; (80046c4 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 80045be:	6093      	str	r3, [r2, #8]
 80045c0:	e0ea      	b.n	8004798 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	4b40      	ldr	r3, [pc, #256]	; (80046cc <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 80045ca:	429a      	cmp	r2, r3
 80045cc:	f240 8084 	bls.w	80046d8 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a2f      	ldr	r2, [pc, #188]	; (8004694 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d07a      	beq.n	80046d0 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a2e      	ldr	r2, [pc, #184]	; (8004698 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d050      	beq.n	8004686 <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a2c      	ldr	r2, [pc, #176]	; (800469c <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d049      	beq.n	8004682 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a2b      	ldr	r2, [pc, #172]	; (80046a0 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d042      	beq.n	800467e <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a29      	ldr	r2, [pc, #164]	; (80046a4 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d03a      	beq.n	8004678 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a28      	ldr	r2, [pc, #160]	; (80046a8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d032      	beq.n	8004672 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a26      	ldr	r2, [pc, #152]	; (80046ac <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d02a      	beq.n	800466c <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a25      	ldr	r2, [pc, #148]	; (80046b0 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d022      	beq.n	8004666 <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a23      	ldr	r2, [pc, #140]	; (80046b4 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d01a      	beq.n	8004660 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a22      	ldr	r2, [pc, #136]	; (80046b8 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d012      	beq.n	800465a <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a20      	ldr	r2, [pc, #128]	; (80046bc <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00a      	beq.n	8004654 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a1f      	ldr	r2, [pc, #124]	; (80046c0 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d102      	bne.n	800464e <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8004648:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800464c:	e041      	b.n	80046d2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800464e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004652:	e03e      	b.n	80046d2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004654:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004658:	e03b      	b.n	80046d2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800465a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800465e:	e038      	b.n	80046d2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004660:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004664:	e035      	b.n	80046d2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800466a:	e032      	b.n	80046d2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800466c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004670:	e02f      	b.n	80046d2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004676:	e02c      	b.n	80046d2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800467c:	e029      	b.n	80046d2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800467e:	2304      	movs	r3, #4
 8004680:	e027      	b.n	80046d2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004682:	2304      	movs	r3, #4
 8004684:	e025      	b.n	80046d2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8004686:	2304      	movs	r3, #4
 8004688:	e023      	b.n	80046d2 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800468a:	bf00      	nop
 800468c:	40026000 	.word	0x40026000
 8004690:	40026458 	.word	0x40026458
 8004694:	40026010 	.word	0x40026010
 8004698:	40026410 	.word	0x40026410
 800469c:	40026070 	.word	0x40026070
 80046a0:	40026470 	.word	0x40026470
 80046a4:	40026028 	.word	0x40026028
 80046a8:	40026428 	.word	0x40026428
 80046ac:	40026088 	.word	0x40026088
 80046b0:	40026488 	.word	0x40026488
 80046b4:	40026040 	.word	0x40026040
 80046b8:	40026440 	.word	0x40026440
 80046bc:	400260a0 	.word	0x400260a0
 80046c0:	400264a0 	.word	0x400264a0
 80046c4:	40026400 	.word	0x40026400
 80046c8:	400260b8 	.word	0x400260b8
 80046cc:	40026058 	.word	0x40026058
 80046d0:	2304      	movs	r3, #4
 80046d2:	4a94      	ldr	r2, [pc, #592]	; (8004924 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80046d4:	60d3      	str	r3, [r2, #12]
 80046d6:	e05f      	b.n	8004798 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a92      	ldr	r2, [pc, #584]	; (8004928 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d057      	beq.n	8004792 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a91      	ldr	r2, [pc, #580]	; (800492c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d050      	beq.n	800478e <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a8f      	ldr	r2, [pc, #572]	; (8004930 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d049      	beq.n	800478a <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a8e      	ldr	r2, [pc, #568]	; (8004934 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d042      	beq.n	8004786 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a8c      	ldr	r2, [pc, #560]	; (8004938 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d03a      	beq.n	8004780 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a8b      	ldr	r2, [pc, #556]	; (800493c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d032      	beq.n	800477a <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a89      	ldr	r2, [pc, #548]	; (8004940 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d02a      	beq.n	8004774 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a88      	ldr	r2, [pc, #544]	; (8004944 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d022      	beq.n	800476e <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a86      	ldr	r2, [pc, #536]	; (8004948 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d01a      	beq.n	8004768 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a85      	ldr	r2, [pc, #532]	; (800494c <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d012      	beq.n	8004762 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a83      	ldr	r2, [pc, #524]	; (8004950 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00a      	beq.n	800475c <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a82      	ldr	r2, [pc, #520]	; (8004954 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d102      	bne.n	8004756 <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8004750:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004754:	e01e      	b.n	8004794 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004756:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800475a:	e01b      	b.n	8004794 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800475c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004760:	e018      	b.n	8004794 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004762:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004766:	e015      	b.n	8004794 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004768:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800476c:	e012      	b.n	8004794 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800476e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004772:	e00f      	b.n	8004794 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004778:	e00c      	b.n	8004794 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800477a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800477e:	e009      	b.n	8004794 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004784:	e006      	b.n	8004794 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004786:	2304      	movs	r3, #4
 8004788:	e004      	b.n	8004794 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800478a:	2304      	movs	r3, #4
 800478c:	e002      	b.n	8004794 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800478e:	2304      	movs	r3, #4
 8004790:	e000      	b.n	8004794 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004792:	2304      	movs	r3, #4
 8004794:	4a63      	ldr	r2, [pc, #396]	; (8004924 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8004796:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	4b6e      	ldr	r3, [pc, #440]	; (8004958 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d95c      	bls.n	800485e <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a5f      	ldr	r2, [pc, #380]	; (8004928 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d053      	beq.n	8004856 <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a5e      	ldr	r2, [pc, #376]	; (800492c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d04c      	beq.n	8004852 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a5c      	ldr	r2, [pc, #368]	; (8004930 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d045      	beq.n	800484e <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a5b      	ldr	r2, [pc, #364]	; (8004934 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d03e      	beq.n	800484a <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a59      	ldr	r2, [pc, #356]	; (8004938 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d037      	beq.n	8004846 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a58      	ldr	r2, [pc, #352]	; (800493c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d030      	beq.n	8004842 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a56      	ldr	r2, [pc, #344]	; (8004940 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d029      	beq.n	800483e <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a55      	ldr	r2, [pc, #340]	; (8004944 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d022      	beq.n	800483a <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a53      	ldr	r2, [pc, #332]	; (8004948 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01a      	beq.n	8004834 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a52      	ldr	r2, [pc, #328]	; (800494c <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d012      	beq.n	800482e <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a50      	ldr	r2, [pc, #320]	; (8004950 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00a      	beq.n	8004828 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a4f      	ldr	r2, [pc, #316]	; (8004954 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d102      	bne.n	8004822 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 800481c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004820:	e01a      	b.n	8004858 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004826:	e017      	b.n	8004858 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800482c:	e014      	b.n	8004858 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800482e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004832:	e011      	b.n	8004858 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004838:	e00e      	b.n	8004858 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800483a:	2340      	movs	r3, #64	; 0x40
 800483c:	e00c      	b.n	8004858 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800483e:	2340      	movs	r3, #64	; 0x40
 8004840:	e00a      	b.n	8004858 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004842:	2340      	movs	r3, #64	; 0x40
 8004844:	e008      	b.n	8004858 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004846:	2340      	movs	r3, #64	; 0x40
 8004848:	e006      	b.n	8004858 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800484a:	2301      	movs	r3, #1
 800484c:	e004      	b.n	8004858 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800484e:	2301      	movs	r3, #1
 8004850:	e002      	b.n	8004858 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8004856:	2301      	movs	r3, #1
 8004858:	4a40      	ldr	r2, [pc, #256]	; (800495c <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 800485a:	60d3      	str	r3, [r2, #12]
 800485c:	e141      	b.n	8004ae2 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	4b3e      	ldr	r3, [pc, #248]	; (8004960 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 8004866:	429a      	cmp	r2, r3
 8004868:	d97c      	bls.n	8004964 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a2e      	ldr	r2, [pc, #184]	; (8004928 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d053      	beq.n	800491c <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a2c      	ldr	r2, [pc, #176]	; (800492c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d04c      	beq.n	8004918 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a2b      	ldr	r2, [pc, #172]	; (8004930 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d045      	beq.n	8004914 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a29      	ldr	r2, [pc, #164]	; (8004934 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d03e      	beq.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a28      	ldr	r2, [pc, #160]	; (8004938 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d037      	beq.n	800490c <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a26      	ldr	r2, [pc, #152]	; (800493c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d030      	beq.n	8004908 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a25      	ldr	r2, [pc, #148]	; (8004940 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d029      	beq.n	8004904 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a23      	ldr	r2, [pc, #140]	; (8004944 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d022      	beq.n	8004900 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a22      	ldr	r2, [pc, #136]	; (8004948 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d01a      	beq.n	80048fa <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a20      	ldr	r2, [pc, #128]	; (800494c <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d012      	beq.n	80048f4 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1f      	ldr	r2, [pc, #124]	; (8004950 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00a      	beq.n	80048ee <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d102      	bne.n	80048e8 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 80048e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048e6:	e01a      	b.n	800491e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80048e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048ec:	e017      	b.n	800491e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80048ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048f2:	e014      	b.n	800491e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80048f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048f8:	e011      	b.n	800491e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80048fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048fe:	e00e      	b.n	800491e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004900:	2340      	movs	r3, #64	; 0x40
 8004902:	e00c      	b.n	800491e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004904:	2340      	movs	r3, #64	; 0x40
 8004906:	e00a      	b.n	800491e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004908:	2340      	movs	r3, #64	; 0x40
 800490a:	e008      	b.n	800491e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800490c:	2340      	movs	r3, #64	; 0x40
 800490e:	e006      	b.n	800491e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004910:	2301      	movs	r3, #1
 8004912:	e004      	b.n	800491e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004914:	2301      	movs	r3, #1
 8004916:	e002      	b.n	800491e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800491c:	2301      	movs	r3, #1
 800491e:	4a0f      	ldr	r2, [pc, #60]	; (800495c <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8004920:	6093      	str	r3, [r2, #8]
 8004922:	e0de      	b.n	8004ae2 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8004924:	40026000 	.word	0x40026000
 8004928:	40026010 	.word	0x40026010
 800492c:	40026410 	.word	0x40026410
 8004930:	40026070 	.word	0x40026070
 8004934:	40026470 	.word	0x40026470
 8004938:	40026028 	.word	0x40026028
 800493c:	40026428 	.word	0x40026428
 8004940:	40026088 	.word	0x40026088
 8004944:	40026488 	.word	0x40026488
 8004948:	40026040 	.word	0x40026040
 800494c:	40026440 	.word	0x40026440
 8004950:	400260a0 	.word	0x400260a0
 8004954:	400264a0 	.word	0x400264a0
 8004958:	40026458 	.word	0x40026458
 800495c:	40026400 	.word	0x40026400
 8004960:	400260b8 	.word	0x400260b8
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	4b78      	ldr	r3, [pc, #480]	; (8004b4c <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 800496c:	429a      	cmp	r2, r3
 800496e:	d95c      	bls.n	8004a2a <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a76      	ldr	r2, [pc, #472]	; (8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d053      	beq.n	8004a22 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a75      	ldr	r2, [pc, #468]	; (8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d04c      	beq.n	8004a1e <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a73      	ldr	r2, [pc, #460]	; (8004b58 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d045      	beq.n	8004a1a <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a72      	ldr	r2, [pc, #456]	; (8004b5c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d03e      	beq.n	8004a16 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a70      	ldr	r2, [pc, #448]	; (8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d037      	beq.n	8004a12 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a6f      	ldr	r2, [pc, #444]	; (8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d030      	beq.n	8004a0e <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a6d      	ldr	r2, [pc, #436]	; (8004b68 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d029      	beq.n	8004a0a <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a6c      	ldr	r2, [pc, #432]	; (8004b6c <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d022      	beq.n	8004a06 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a6a      	ldr	r2, [pc, #424]	; (8004b70 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d01a      	beq.n	8004a00 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a69      	ldr	r2, [pc, #420]	; (8004b74 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d012      	beq.n	80049fa <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a67      	ldr	r2, [pc, #412]	; (8004b78 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00a      	beq.n	80049f4 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a66      	ldr	r2, [pc, #408]	; (8004b7c <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d102      	bne.n	80049ee <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 80049e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049ec:	e01a      	b.n	8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80049ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80049f2:	e017      	b.n	8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80049f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049f8:	e014      	b.n	8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80049fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049fe:	e011      	b.n	8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004a00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a04:	e00e      	b.n	8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004a06:	2340      	movs	r3, #64	; 0x40
 8004a08:	e00c      	b.n	8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004a0a:	2340      	movs	r3, #64	; 0x40
 8004a0c:	e00a      	b.n	8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004a0e:	2340      	movs	r3, #64	; 0x40
 8004a10:	e008      	b.n	8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004a12:	2340      	movs	r3, #64	; 0x40
 8004a14:	e006      	b.n	8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e004      	b.n	8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e002      	b.n	8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004a22:	2301      	movs	r3, #1
 8004a24:	4a56      	ldr	r2, [pc, #344]	; (8004b80 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8004a26:	60d3      	str	r3, [r2, #12]
 8004a28:	e05b      	b.n	8004ae2 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a48      	ldr	r2, [pc, #288]	; (8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d053      	beq.n	8004adc <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a46      	ldr	r2, [pc, #280]	; (8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d04c      	beq.n	8004ad8 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a45      	ldr	r2, [pc, #276]	; (8004b58 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d045      	beq.n	8004ad4 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a43      	ldr	r2, [pc, #268]	; (8004b5c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d03e      	beq.n	8004ad0 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a42      	ldr	r2, [pc, #264]	; (8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d037      	beq.n	8004acc <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a40      	ldr	r2, [pc, #256]	; (8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d030      	beq.n	8004ac8 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a3f      	ldr	r2, [pc, #252]	; (8004b68 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d029      	beq.n	8004ac4 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a3d      	ldr	r2, [pc, #244]	; (8004b6c <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d022      	beq.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a3c      	ldr	r2, [pc, #240]	; (8004b70 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d01a      	beq.n	8004aba <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a3a      	ldr	r2, [pc, #232]	; (8004b74 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d012      	beq.n	8004ab4 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a39      	ldr	r2, [pc, #228]	; (8004b78 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00a      	beq.n	8004aae <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a37      	ldr	r2, [pc, #220]	; (8004b7c <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d102      	bne.n	8004aa8 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8004aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004aa6:	e01a      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004aa8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004aac:	e017      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ab2:	e014      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004ab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ab8:	e011      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004abe:	e00e      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004ac0:	2340      	movs	r3, #64	; 0x40
 8004ac2:	e00c      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004ac4:	2340      	movs	r3, #64	; 0x40
 8004ac6:	e00a      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004ac8:	2340      	movs	r3, #64	; 0x40
 8004aca:	e008      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004acc:	2340      	movs	r3, #64	; 0x40
 8004ace:	e006      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e004      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e002      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004adc:	2301      	movs	r3, #1
 8004ade:	4a28      	ldr	r2, [pc, #160]	; (8004b80 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8004ae0:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0216 	orr.w	r2, r2, #22
 8004af0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695a      	ldr	r2, [r3, #20]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d103      	bne.n	8004b12 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d007      	beq.n	8004b22 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0208 	orr.w	r2, r2, #8
 8004b20:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0201 	orr.w	r2, r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e005      	b.n	8004b40 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8004b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40026058 	.word	0x40026058
 8004b50:	40026010 	.word	0x40026010
 8004b54:	40026410 	.word	0x40026410
 8004b58:	40026070 	.word	0x40026070
 8004b5c:	40026470 	.word	0x40026470
 8004b60:	40026028 	.word	0x40026028
 8004b64:	40026428 	.word	0x40026428
 8004b68:	40026088 	.word	0x40026088
 8004b6c:	40026488 	.word	0x40026488
 8004b70:	40026040 	.word	0x40026040
 8004b74:	40026440 	.word	0x40026440
 8004b78:	400260a0 	.word	0x400260a0
 8004b7c:	400264a0 	.word	0x400264a0
 8004b80:	40026000 	.word	0x40026000

08004b84 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	60da      	str	r2, [r3, #12]
 8004ba0:	e003      	b.n	8004baa <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b40      	cmp	r3, #64	; 0x40
 8004bd4:	d108      	bne.n	8004be8 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004be6:	e007      	b.n	8004bf8 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	60da      	str	r2, [r3, #12]
}
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61fb      	str	r3, [r7, #28]
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8004c14:	4baa      	ldr	r3, [pc, #680]	; (8004ec0 <HAL_ETH_Init+0x2bc>)
 8004c16:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e183      	b.n	8004f32 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f006 f860 	bl	800ad04 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c44:	2300      	movs	r3, #0
 8004c46:	60bb      	str	r3, [r7, #8]
 8004c48:	4b9e      	ldr	r3, [pc, #632]	; (8004ec4 <HAL_ETH_Init+0x2c0>)
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	4a9d      	ldr	r2, [pc, #628]	; (8004ec4 <HAL_ETH_Init+0x2c0>)
 8004c4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c52:	6453      	str	r3, [r2, #68]	; 0x44
 8004c54:	4b9b      	ldr	r3, [pc, #620]	; (8004ec4 <HAL_ETH_Init+0x2c0>)
 8004c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004c60:	4b99      	ldr	r3, [pc, #612]	; (8004ec8 <HAL_ETH_Init+0x2c4>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	4a98      	ldr	r2, [pc, #608]	; (8004ec8 <HAL_ETH_Init+0x2c4>)
 8004c66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c6a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004c6c:	4b96      	ldr	r3, [pc, #600]	; (8004ec8 <HAL_ETH_Init+0x2c4>)
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	4994      	ldr	r1, [pc, #592]	; (8004ec8 <HAL_ETH_Init+0x2c4>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0201 	orr.w	r2, r2, #1
 8004c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c90:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004c92:	f7fd fd8f 	bl	80027b4 <HAL_GetTick>
 8004c96:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004c98:	e011      	b.n	8004cbe <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004c9a:	f7fd fd8b 	bl	80027b4 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004ca8:	d909      	bls.n	8004cbe <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2203      	movs	r2, #3
 8004cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e139      	b.n	8004f32 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e4      	bne.n	8004c9a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f023 031c 	bic.w	r3, r3, #28
 8004cde:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004ce0:	f003 fd22 	bl	8008728 <HAL_RCC_GetHCLKFreq>
 8004ce4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	4a78      	ldr	r2, [pc, #480]	; (8004ecc <HAL_ETH_Init+0x2c8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d908      	bls.n	8004d00 <HAL_ETH_Init+0xfc>
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	4a77      	ldr	r2, [pc, #476]	; (8004ed0 <HAL_ETH_Init+0x2cc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d804      	bhi.n	8004d00 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	f043 0308 	orr.w	r3, r3, #8
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	e027      	b.n	8004d50 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	4a73      	ldr	r2, [pc, #460]	; (8004ed0 <HAL_ETH_Init+0x2cc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d908      	bls.n	8004d1a <HAL_ETH_Init+0x116>
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	4a6d      	ldr	r2, [pc, #436]	; (8004ec0 <HAL_ETH_Init+0x2bc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d204      	bcs.n	8004d1a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f043 030c 	orr.w	r3, r3, #12
 8004d16:	61fb      	str	r3, [r7, #28]
 8004d18:	e01a      	b.n	8004d50 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	4a68      	ldr	r2, [pc, #416]	; (8004ec0 <HAL_ETH_Init+0x2bc>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d303      	bcc.n	8004d2a <HAL_ETH_Init+0x126>
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	4a6b      	ldr	r2, [pc, #428]	; (8004ed4 <HAL_ETH_Init+0x2d0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d911      	bls.n	8004d4e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	4a69      	ldr	r2, [pc, #420]	; (8004ed4 <HAL_ETH_Init+0x2d0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d908      	bls.n	8004d44 <HAL_ETH_Init+0x140>
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	4a68      	ldr	r2, [pc, #416]	; (8004ed8 <HAL_ETH_Init+0x2d4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d804      	bhi.n	8004d44 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	f043 0304 	orr.w	r3, r3, #4
 8004d40:	61fb      	str	r3, [r7, #28]
 8004d42:	e005      	b.n	8004d50 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f043 0310 	orr.w	r3, r3, #16
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	e000      	b.n	8004d50 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004d4e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004d58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fc1d 	bl	800559e <HAL_ETH_WritePHYRegister>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00b      	beq.n	8004d82 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004d6e:	6939      	ldr	r1, [r7, #16]
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fdd3 	bl	800591c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e0d7      	b.n	8004f32 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004d82:	20ff      	movs	r0, #255	; 0xff
 8004d84:	f7fd fd22 	bl	80027cc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80a5 	beq.w	8004edc <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d92:	f7fd fd0f 	bl	80027b4 <HAL_GetTick>
 8004d96:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004d98:	f107 030c 	add.w	r3, r7, #12
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	2101      	movs	r1, #1
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fb94 	bl	80054ce <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004da6:	f7fd fd05 	bl	80027b4 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d90f      	bls.n	8004dd8 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004dbc:	6939      	ldr	r1, [r7, #16]
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fdac 	bl	800591c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e0ac      	b.n	8004f32 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0da      	beq.n	8004d98 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004de2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004de6:	2100      	movs	r1, #0
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fbd8 	bl	800559e <HAL_ETH_WritePHYRegister>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00b      	beq.n	8004e0c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004df8:	6939      	ldr	r1, [r7, #16]
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fd8e 	bl	800591c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e092      	b.n	8004f32 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e0c:	f7fd fcd2 	bl	80027b4 <HAL_GetTick>
 8004e10:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004e12:	f107 030c 	add.w	r3, r7, #12
 8004e16:	461a      	mov	r2, r3
 8004e18:	2101      	movs	r1, #1
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fb57 	bl	80054ce <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004e20:	f7fd fcc8 	bl	80027b4 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d90f      	bls.n	8004e52 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004e36:	6939      	ldr	r1, [r7, #16]
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fd6f 	bl	800591c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e06f      	b.n	8004f32 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0da      	beq.n	8004e12 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004e5c:	f107 030c 	add.w	r3, r7, #12
 8004e60:	461a      	mov	r2, r3
 8004e62:	2131      	movs	r1, #49	; 0x31
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fb32 	bl	80054ce <HAL_ETH_ReadPHYRegister>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00b      	beq.n	8004e88 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004e74:	6939      	ldr	r1, [r7, #16]
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fd50 	bl	800591c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004e84:	2301      	movs	r3, #1
 8004e86:	e054      	b.n	8004f32 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d004      	beq.n	8004e9c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e98:	60da      	str	r2, [r3, #12]
 8004e9a:	e002      	b.n	8004ea2 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	609a      	str	r2, [r3, #8]
 8004eb2:	e035      	b.n	8004f20 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004eba:	609a      	str	r2, [r3, #8]
 8004ebc:	e030      	b.n	8004f20 <HAL_ETH_Init+0x31c>
 8004ebe:	bf00      	nop
 8004ec0:	03938700 	.word	0x03938700
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	40013800 	.word	0x40013800
 8004ecc:	01312cff 	.word	0x01312cff
 8004ed0:	02160ebf 	.word	0x02160ebf
 8004ed4:	05f5e0ff 	.word	0x05f5e0ff
 8004ed8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	08db      	lsrs	r3, r3, #3
 8004ee2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	085b      	lsrs	r3, r3, #1
 8004eea:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004eec:	4313      	orrs	r3, r2
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fb52 	bl	800559e <HAL_ETH_WritePHYRegister>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00b      	beq.n	8004f18 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004f04:	6939      	ldr	r1, [r7, #16]
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fd08 	bl	800591c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e00c      	b.n	8004f32 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004f18:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004f1c:	f7fd fc56 	bl	80027cc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004f20:	6939      	ldr	r1, [r7, #16]
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fcfa 	bl	800591c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3720      	adds	r7, #32
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop

08004f3c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_ETH_DMATxDescListInit+0x20>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e052      	b.n	8005002 <HAL_ETH_DMATxDescListInit+0xc6>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	e030      	b.n	8004fda <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	015b      	lsls	r3, r3, #5
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	4413      	add	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f88:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f90:	fb02 f303 	mul.w	r3, r2, r3
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	4413      	add	r3, r2
 8004f98:	461a      	mov	r2, r3
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d105      	bne.n	8004fb2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d208      	bcs.n	8004fce <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	015b      	lsls	r3, r3, #5
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	60da      	str	r2, [r3, #12]
 8004fcc:	e002      	b.n	8004fd4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d3ca      	bcc.n	8004f78 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fec:	3310      	adds	r3, #16
 8004fee:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800500e:	b480      	push	{r7}
 8005010:	b087      	sub	sp, #28
 8005012:	af00      	add	r7, sp, #0
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	607a      	str	r2, [r7, #4]
 800501a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_ETH_DMARxDescListInit+0x20>
 800502a:	2302      	movs	r3, #2
 800502c:	e056      	b.n	80050dc <HAL_ETH_DMARxDescListInit+0xce>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2202      	movs	r2, #2
 800503a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	e034      	b.n	80050b4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	015b      	lsls	r3, r3, #5
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	4413      	add	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800505a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8005062:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800506a:	fb02 f303 	mul.w	r3, r2, r3
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	4413      	add	r3, r2
 8005072:	461a      	mov	r2, r3
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d105      	bne.n	800508c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	3b01      	subs	r3, #1
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	429a      	cmp	r2, r3
 8005094:	d208      	bcs.n	80050a8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	3301      	adds	r3, #1
 800509a:	015b      	lsls	r3, r3, #5
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	4413      	add	r3, r2
 80050a0:	461a      	mov	r2, r3
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	60da      	str	r2, [r3, #12]
 80050a6:	e002      	b.n	80050ae <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	3301      	adds	r3, #1
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d3c6      	bcc.n	800504a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050c6:	330c      	adds	r3, #12
 80050c8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	2300      	movs	r3, #0
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_ETH_TransmitFrame+0x24>
 8005108:	2302      	movs	r3, #2
 800510a:	e0cd      	b.n	80052a8 <HAL_ETH_TransmitFrame+0x1c0>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d109      	bne.n	8005136 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8005132:	2301      	movs	r3, #1
 8005134:	e0b8      	b.n	80052a8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	da09      	bge.n	8005154 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2212      	movs	r2, #18
 8005144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e0a9      	b.n	80052a8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800515a:	4293      	cmp	r3, r2
 800515c:	d915      	bls.n	800518a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	4a54      	ldr	r2, [pc, #336]	; (80052b4 <HAL_ETH_TransmitFrame+0x1cc>)
 8005162:	fba2 2303 	umull	r2, r3, r2, r3
 8005166:	0a9b      	lsrs	r3, r3, #10
 8005168:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	4b51      	ldr	r3, [pc, #324]	; (80052b4 <HAL_ETH_TransmitFrame+0x1cc>)
 800516e:	fba3 1302 	umull	r1, r3, r3, r2
 8005172:	0a9b      	lsrs	r3, r3, #10
 8005174:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8005178:	fb01 f303 	mul.w	r3, r1, r3
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	3301      	adds	r3, #1
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	e001      	b.n	800518e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800518a:	2301      	movs	r3, #1
 800518c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d11c      	bne.n	80051ce <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80051a2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80051ae:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80051be:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	461a      	mov	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80051cc:	e04b      	b.n	8005266 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80051ce:	2300      	movs	r3, #0
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	e044      	b.n	800525e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051de:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80051e2:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d107      	bne.n	80051fa <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051f8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005202:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	3b01      	subs	r3, #1
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	429a      	cmp	r2, r3
 800520c:	d116      	bne.n	800523c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800521c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	4a25      	ldr	r2, [pc, #148]	; (80052b8 <HAL_ETH_TransmitFrame+0x1d0>)
 8005222:	fb02 f203 	mul.w	r2, r2, r3
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	4413      	add	r3, r2
 800522a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800522e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800523a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800524a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	461a      	mov	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	3301      	adds	r3, #1
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	429a      	cmp	r2, r3
 8005264:	d3b6      	bcc.n	80051d4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800526e:	3314      	adds	r3, #20
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00d      	beq.n	8005296 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005282:	3314      	adds	r3, #20
 8005284:	2204      	movs	r2, #4
 8005286:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005290:	3304      	adds	r3, #4
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	ac02b00b 	.word	0xac02b00b
 80052b8:	fffffa0c 	.word	0xfffffa0c

080052bc <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_ETH_GetReceivedFrame+0x1a>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e070      	b.n	80053b8 <HAL_ETH_GetReceivedFrame+0xfc>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2202      	movs	r2, #2
 80052e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	db5a      	blt.n	80053a6 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d030      	beq.n	8005360 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	2b01      	cmp	r3, #1
 800530e:	d103      	bne.n	8005318 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	0c1b      	lsrs	r3, r3, #16
 8005328:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800532c:	3b04      	subs	r3, #4
 800532e:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	461a      	mov	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	e02b      	b.n	80053b8 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800536a:	2b00      	cmp	r3, #0
 800536c:	d010      	beq.n	8005390 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	461a      	mov	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	629a      	str	r2, [r3, #40]	; 0x28
 800538e:	e00a      	b.n	80053a6 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	461a      	mov	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053d4:	3314      	adds	r3, #20
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053dc:	2b40      	cmp	r3, #64	; 0x40
 80053de:	d112      	bne.n	8005406 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f860 	bl	80054a6 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ee:	3314      	adds	r3, #20
 80053f0:	2240      	movs	r2, #64	; 0x40
 80053f2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005404:	e01b      	b.n	800543e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800540e:	3314      	adds	r3, #20
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b01      	cmp	r3, #1
 8005418:	d111      	bne.n	800543e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f839 	bl	8005492 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005428:	3314      	adds	r3, #20
 800542a:	2201      	movs	r2, #1
 800542c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005446:	3314      	adds	r3, #20
 8005448:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800544c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005456:	3314      	adds	r3, #20
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800545e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005462:	d112      	bne.n	800548a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f828 	bl	80054ba <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005472:	3314      	adds	r3, #20
 8005474:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005478:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800548a:	bf00      	nop
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005492:	b480      	push	{r7}
 8005494:	b083      	sub	sp, #12
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b086      	sub	sp, #24
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	460b      	mov	r3, r1
 80054d8:	607a      	str	r2, [r7, #4]
 80054da:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b82      	cmp	r3, #130	; 0x82
 80054ee:	d101      	bne.n	80054f4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80054f0:	2302      	movs	r3, #2
 80054f2:	e050      	b.n	8005596 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2282      	movs	r2, #130	; 0x82
 80054f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f003 031c 	and.w	r3, r3, #28
 800550a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8a1b      	ldrh	r3, [r3, #16]
 8005510:	02db      	lsls	r3, r3, #11
 8005512:	b29b      	uxth	r3, r3
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800551a:	897b      	ldrh	r3, [r7, #10]
 800551c:	019b      	lsls	r3, r3, #6
 800551e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f023 0302 	bic.w	r3, r3, #2
 800552e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f043 0301 	orr.w	r3, r3, #1
 8005536:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005540:	f7fd f938 	bl	80027b4 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005546:	e015      	b.n	8005574 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8005548:	f7fd f934 	bl	80027b4 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005556:	d309      	bcc.n	800556c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e014      	b.n	8005596 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e4      	bne.n	8005548 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	b29b      	uxth	r3, r3
 8005586:	461a      	mov	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b086      	sub	sp, #24
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	460b      	mov	r3, r1
 80055a8:	607a      	str	r2, [r7, #4]
 80055aa:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b42      	cmp	r3, #66	; 0x42
 80055be:	d101      	bne.n	80055c4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80055c0:	2302      	movs	r3, #2
 80055c2:	e04e      	b.n	8005662 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2242      	movs	r2, #66	; 0x42
 80055c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f003 031c 	and.w	r3, r3, #28
 80055da:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8a1b      	ldrh	r3, [r3, #16]
 80055e0:	02db      	lsls	r3, r3, #11
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80055ea:	897b      	ldrh	r3, [r7, #10]
 80055ec:	019b      	lsls	r3, r3, #6
 80055ee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f043 0302 	orr.w	r3, r3, #2
 80055fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800561a:	f7fd f8cb 	bl	80027b4 <HAL_GetTick>
 800561e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005620:	e015      	b.n	800564e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8005622:	f7fd f8c7 	bl	80027b4 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005630:	d309      	bcc.n	8005646 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e00d      	b.n	8005662 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e4      	bne.n	8005622 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800566a:	b580      	push	{r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_ETH_Start+0x16>
 800567c:	2302      	movs	r3, #2
 800567e:	e01f      	b.n	80056c0 <HAL_ETH_Start+0x56>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fb45 	bl	8005d20 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fb7c 	bl	8005d94 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fc13 	bl	8005ec8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fbb0 	bl	8005e08 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fbdd 	bl	8005e68 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <HAL_ETH_Stop+0x16>
 80056da:	2302      	movs	r3, #2
 80056dc:	e01f      	b.n	800571e <HAL_ETH_Stop+0x56>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2202      	movs	r2, #2
 80056ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fba2 	bl	8005e38 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fbcf 	bl	8005e98 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fb67 	bl	8005dce <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fbe1 	bl	8005ec8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fb27 	bl	8005d5a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_ETH_ConfigMAC+0x1c>
 8005740:	2302      	movs	r3, #2
 8005742:	e0e4      	b.n	800590e <HAL_ETH_ConfigMAC+0x1e6>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 80b1 	beq.w	80058be <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4b6c      	ldr	r3, [pc, #432]	; (8005918 <HAL_ETH_ConfigMAC+0x1f0>)
 8005768:	4013      	ands	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005774:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800577a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8005780:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8005786:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800578c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8005792:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8005798:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800579e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80057a4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80057aa:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80057b0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80057b6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80057ce:	2001      	movs	r0, #1
 80057d0:	f7fc fffc 	bl	80027cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80057e4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80057ea:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80057f0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80057f6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80057fc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8005802:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800580e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005810:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800581a:	2001      	movs	r0, #1
 800581c:	f7fc ffd6 	bl	80027cc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005830:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800583a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	f64f 7341 	movw	r3, #65345	; 0xff41
 800584a:	4013      	ands	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005858:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800585e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8005864:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800586a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8005870:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005888:	2001      	movs	r0, #1
 800588a:	f7fc ff9f 	bl	80027cc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80058ae:	2001      	movs	r0, #1
 80058b0:	f7fc ff8c 	bl	80027cc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	61da      	str	r2, [r3, #28]
 80058bc:	e01e      	b.n	80058fc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80058cc:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80058ee:	2001      	movs	r0, #1
 80058f0:	f7fc ff6c 	bl	80027cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	ff20810f 	.word	0xff20810f

0800591c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b0b0      	sub	sp, #192	; 0xc0
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d007      	beq.n	8005942 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005938:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005940:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8005942:	2300      	movs	r3, #0
 8005944:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8005946:	2300      	movs	r3, #0
 8005948:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800594a:	2300      	movs	r3, #0
 800594c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800594e:	2300      	movs	r3, #0
 8005950:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8005952:	2300      	movs	r3, #0
 8005954:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8005956:	2300      	movs	r3, #0
 8005958:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d103      	bne.n	800596a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8005962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005966:	663b      	str	r3, [r7, #96]	; 0x60
 8005968:	e001      	b.n	800596e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800596a:	2300      	movs	r3, #0
 800596c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800596e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005972:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005974:	2300      	movs	r3, #0
 8005976:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005978:	2300      	movs	r3, #0
 800597a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800597c:	2300      	movs	r3, #0
 800597e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005980:	2300      	movs	r3, #0
 8005982:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005984:	2300      	movs	r3, #0
 8005986:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005988:	2340      	movs	r3, #64	; 0x40
 800598a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800598c:	2300      	movs	r3, #0
 800598e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8005992:	2300      	movs	r3, #0
 8005994:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005998:	2300      	movs	r3, #0
 800599a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800599e:	2300      	movs	r3, #0
 80059a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80059a4:	2300      	movs	r3, #0
 80059a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80059bc:	2380      	movs	r3, #128	; 0x80
 80059be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80059c2:	2300      	movs	r3, #0
 80059c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80059c8:	2300      	movs	r3, #0
 80059ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80059da:	2300      	movs	r3, #0
 80059dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80059f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80059f4:	4bac      	ldr	r3, [pc, #688]	; (8005ca8 <ETH_MACDMAConfig+0x38c>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80059fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80059fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005a00:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8005a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8005a04:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8005a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8005a08:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8005a0e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8005a10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8005a12:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8005a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8005a16:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8005a1c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8005a1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8005a20:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8005a22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8005a24:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8005a26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8005a28:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8005a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8005a2c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8005a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8005a30:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005a32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a44:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a50:	2001      	movs	r0, #1
 8005a52:	f7fc febb 	bl	80027cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a5e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005a60:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8005a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005a64:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005a66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005a68:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8005a6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8005a6e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005a74:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005a76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8005a7a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005a80:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005a84:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005a8c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005a8e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a9a:	2001      	movs	r0, #1
 8005a9c:	f7fc fe96 	bl	80027cc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005aa8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ab2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005abc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005ac8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005acc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005ad6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ada:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005adc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005ae0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8005ae2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8005ae6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005ae8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005aec:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8005aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8005af2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8005af4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005af8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005afa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b0c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b18:	2001      	movs	r0, #1
 8005b1a:	f7fc fe57 	bl	80027cc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b26:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005b28:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005b2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b42:	2001      	movs	r0, #1
 8005b44:	f7fc fe42 	bl	80027cc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b50:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8005b56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b5a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005b60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b64:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005b72:	2300      	movs	r3, #0
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005b76:	2304      	movs	r3, #4
 8005b78:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b84:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005b86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b8a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b90:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005b92:	2380      	movs	r3, #128	; 0x80
 8005b94:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba6:	3318      	adds	r3, #24
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005bae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005bb2:	4b3e      	ldr	r3, [pc, #248]	; (8005cac <ETH_MACDMAConfig+0x390>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005bba:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005bbc:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005bbe:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005bc0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005bc2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005bc4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005bc6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005bc8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005bca:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005bcc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005bce:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005bd2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005bd6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005bda:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005bdc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005be0:	4313      	orrs	r3, r2
 8005be2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bee:	3318      	adds	r3, #24
 8005bf0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005bf4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bfe:	3318      	adds	r3, #24
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005c06:	2001      	movs	r0, #1
 8005c08:	f7fc fde0 	bl	80027cc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c14:	3318      	adds	r3, #24
 8005c16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c1a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005c20:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005c24:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005c28:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005c2c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c30:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8005c32:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005c36:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c44:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005c54:	2001      	movs	r0, #1
 8005c56:	f7fc fdb9 	bl	80027cc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c66:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d10f      	bne.n	8005c90 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c78:	331c      	adds	r3, #28
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8c:	331c      	adds	r3, #28
 8005c8e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	461a      	mov	r2, r3
 8005c96:	2100      	movs	r1, #0
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f809 	bl	8005cb0 <ETH_MACAddressConfig>
}
 8005c9e:	bf00      	nop
 8005ca0:	37c0      	adds	r7, #192	; 0xc0
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	ff20810f 	.word	0xff20810f
 8005cac:	f8de3f23 	.word	0xf8de3f23

08005cb0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3305      	adds	r3, #5
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	3204      	adds	r2, #4
 8005cc8:	7812      	ldrb	r2, [r2, #0]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	4b11      	ldr	r3, [pc, #68]	; (8005d18 <ETH_MACAddressConfig+0x68>)
 8005cd2:	4413      	add	r3, r2
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3303      	adds	r3, #3
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	061a      	lsls	r2, r3, #24
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3302      	adds	r3, #2
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	041b      	lsls	r3, r3, #16
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	7812      	ldrb	r2, [r2, #0]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <ETH_MACAddressConfig+0x6c>)
 8005d02:	4413      	add	r3, r2
 8005d04:	461a      	mov	r2, r3
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	6013      	str	r3, [r2, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40028040 	.word	0x40028040
 8005d1c:	40028044 	.word	0x40028044

08005d20 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0208 	orr.w	r2, r2, #8
 8005d3a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005d44:	2001      	movs	r0, #1
 8005d46:	f000 f8e9 	bl	8005f1c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	601a      	str	r2, [r3, #0]
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0208 	bic.w	r2, r2, #8
 8005d74:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005d7e:	2001      	movs	r0, #1
 8005d80:	f000 f8cc 	bl	8005f1c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	601a      	str	r2, [r3, #0]
}
 8005d8c:	bf00      	nop
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0204 	orr.w	r2, r2, #4
 8005dae:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005db8:	2001      	movs	r0, #1
 8005dba:	f000 f8af 	bl	8005f1c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	601a      	str	r2, [r3, #0]
}
 8005dc6:	bf00      	nop
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0204 	bic.w	r2, r2, #4
 8005de8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005df2:	2001      	movs	r0, #1
 8005df4:	f000 f892 	bl	8005f1c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	601a      	str	r2, [r3, #0]
}
 8005e00:	bf00      	nop
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e18:	3318      	adds	r3, #24
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e28:	3318      	adds	r3, #24
 8005e2a:	601a      	str	r2, [r3, #0]
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e48:	3318      	adds	r3, #24
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e58:	3318      	adds	r3, #24
 8005e5a:	601a      	str	r2, [r3, #0]
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e78:	3318      	adds	r3, #24
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f042 0202 	orr.w	r2, r2, #2
 8005e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e88:	3318      	adds	r3, #24
 8005e8a:	601a      	str	r2, [r3, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea8:	3318      	adds	r3, #24
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0202 	bic.w	r2, r2, #2
 8005eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb8:	3318      	adds	r3, #24
 8005eba:	601a      	str	r2, [r3, #0]
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005edc:	3318      	adds	r3, #24
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eec:	3318      	adds	r3, #24
 8005eee:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef8:	3318      	adds	r3, #24
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005efe:	2001      	movs	r0, #1
 8005f00:	f000 f80c 	bl	8005f1c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f0e:	3318      	adds	r3, #24
 8005f10:	601a      	str	r2, [r3, #0]
}
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f24:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <ETH_Delay+0x38>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a0b      	ldr	r2, [pc, #44]	; (8005f58 <ETH_Delay+0x3c>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	0a5b      	lsrs	r3, r3, #9
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
 8005f36:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8005f38:	bf00      	nop
  } 
  while (Delay --);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	1e5a      	subs	r2, r3, #1
 8005f3e:	60fa      	str	r2, [r7, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1f9      	bne.n	8005f38 <ETH_Delay+0x1c>
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	20000580 	.word	0x20000580
 8005f58:	10624dd3 	.word	0x10624dd3

08005f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b089      	sub	sp, #36	; 0x24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f72:	2300      	movs	r3, #0
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	e16b      	b.n	8006250 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f78:	2201      	movs	r2, #1
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	f040 815a 	bne.w	800624a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f003 0303 	and.w	r3, r3, #3
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d005      	beq.n	8005fae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d130      	bne.n	8006010 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	2203      	movs	r2, #3
 8005fba:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fec:	43db      	mvns	r3, r3
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	091b      	lsrs	r3, r3, #4
 8005ffa:	f003 0201 	and.w	r2, r3, #1
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	4313      	orrs	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	2b03      	cmp	r3, #3
 800601a:	d017      	beq.n	800604c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	2203      	movs	r2, #3
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	43db      	mvns	r3, r3
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	4013      	ands	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	fa02 f303 	lsl.w	r3, r2, r3
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	4313      	orrs	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f003 0303 	and.w	r3, r3, #3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d123      	bne.n	80060a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	08da      	lsrs	r2, r3, #3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3208      	adds	r2, #8
 8006060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006064:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	220f      	movs	r2, #15
 8006070:	fa02 f303 	lsl.w	r3, r2, r3
 8006074:	43db      	mvns	r3, r3
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	4013      	ands	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	fa02 f303 	lsl.w	r3, r2, r3
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	4313      	orrs	r3, r2
 8006090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	08da      	lsrs	r2, r3, #3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3208      	adds	r2, #8
 800609a:	69b9      	ldr	r1, [r7, #24]
 800609c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	2203      	movs	r2, #3
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	43db      	mvns	r3, r3
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	4013      	ands	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f003 0203 	and.w	r2, r3, #3
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 80b4 	beq.w	800624a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	4b60      	ldr	r3, [pc, #384]	; (8006268 <HAL_GPIO_Init+0x30c>)
 80060e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ea:	4a5f      	ldr	r2, [pc, #380]	; (8006268 <HAL_GPIO_Init+0x30c>)
 80060ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060f0:	6453      	str	r3, [r2, #68]	; 0x44
 80060f2:	4b5d      	ldr	r3, [pc, #372]	; (8006268 <HAL_GPIO_Init+0x30c>)
 80060f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060fe:	4a5b      	ldr	r2, [pc, #364]	; (800626c <HAL_GPIO_Init+0x310>)
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	089b      	lsrs	r3, r3, #2
 8006104:	3302      	adds	r3, #2
 8006106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800610a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	220f      	movs	r2, #15
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	43db      	mvns	r3, r3
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	4013      	ands	r3, r2
 8006120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a52      	ldr	r2, [pc, #328]	; (8006270 <HAL_GPIO_Init+0x314>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d02b      	beq.n	8006182 <HAL_GPIO_Init+0x226>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a51      	ldr	r2, [pc, #324]	; (8006274 <HAL_GPIO_Init+0x318>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d025      	beq.n	800617e <HAL_GPIO_Init+0x222>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a50      	ldr	r2, [pc, #320]	; (8006278 <HAL_GPIO_Init+0x31c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d01f      	beq.n	800617a <HAL_GPIO_Init+0x21e>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a4f      	ldr	r2, [pc, #316]	; (800627c <HAL_GPIO_Init+0x320>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d019      	beq.n	8006176 <HAL_GPIO_Init+0x21a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a4e      	ldr	r2, [pc, #312]	; (8006280 <HAL_GPIO_Init+0x324>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d013      	beq.n	8006172 <HAL_GPIO_Init+0x216>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a4d      	ldr	r2, [pc, #308]	; (8006284 <HAL_GPIO_Init+0x328>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00d      	beq.n	800616e <HAL_GPIO_Init+0x212>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a4c      	ldr	r2, [pc, #304]	; (8006288 <HAL_GPIO_Init+0x32c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d007      	beq.n	800616a <HAL_GPIO_Init+0x20e>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a4b      	ldr	r2, [pc, #300]	; (800628c <HAL_GPIO_Init+0x330>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d101      	bne.n	8006166 <HAL_GPIO_Init+0x20a>
 8006162:	2307      	movs	r3, #7
 8006164:	e00e      	b.n	8006184 <HAL_GPIO_Init+0x228>
 8006166:	2308      	movs	r3, #8
 8006168:	e00c      	b.n	8006184 <HAL_GPIO_Init+0x228>
 800616a:	2306      	movs	r3, #6
 800616c:	e00a      	b.n	8006184 <HAL_GPIO_Init+0x228>
 800616e:	2305      	movs	r3, #5
 8006170:	e008      	b.n	8006184 <HAL_GPIO_Init+0x228>
 8006172:	2304      	movs	r3, #4
 8006174:	e006      	b.n	8006184 <HAL_GPIO_Init+0x228>
 8006176:	2303      	movs	r3, #3
 8006178:	e004      	b.n	8006184 <HAL_GPIO_Init+0x228>
 800617a:	2302      	movs	r3, #2
 800617c:	e002      	b.n	8006184 <HAL_GPIO_Init+0x228>
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <HAL_GPIO_Init+0x228>
 8006182:	2300      	movs	r3, #0
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	f002 0203 	and.w	r2, r2, #3
 800618a:	0092      	lsls	r2, r2, #2
 800618c:	4093      	lsls	r3, r2
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	4313      	orrs	r3, r2
 8006192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006194:	4935      	ldr	r1, [pc, #212]	; (800626c <HAL_GPIO_Init+0x310>)
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	089b      	lsrs	r3, r3, #2
 800619a:	3302      	adds	r3, #2
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061a2:	4b3b      	ldr	r3, [pc, #236]	; (8006290 <HAL_GPIO_Init+0x334>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	43db      	mvns	r3, r3
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	4013      	ands	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061c6:	4a32      	ldr	r2, [pc, #200]	; (8006290 <HAL_GPIO_Init+0x334>)
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80061cc:	4b30      	ldr	r3, [pc, #192]	; (8006290 <HAL_GPIO_Init+0x334>)
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	43db      	mvns	r3, r3
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	4013      	ands	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061f0:	4a27      	ldr	r2, [pc, #156]	; (8006290 <HAL_GPIO_Init+0x334>)
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061f6:	4b26      	ldr	r3, [pc, #152]	; (8006290 <HAL_GPIO_Init+0x334>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	43db      	mvns	r3, r3
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	4013      	ands	r3, r2
 8006204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	4313      	orrs	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800621a:	4a1d      	ldr	r2, [pc, #116]	; (8006290 <HAL_GPIO_Init+0x334>)
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006220:	4b1b      	ldr	r3, [pc, #108]	; (8006290 <HAL_GPIO_Init+0x334>)
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	43db      	mvns	r3, r3
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	4013      	ands	r3, r2
 800622e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006244:	4a12      	ldr	r2, [pc, #72]	; (8006290 <HAL_GPIO_Init+0x334>)
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	3301      	adds	r3, #1
 800624e:	61fb      	str	r3, [r7, #28]
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	2b0f      	cmp	r3, #15
 8006254:	f67f ae90 	bls.w	8005f78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	3724      	adds	r7, #36	; 0x24
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40023800 	.word	0x40023800
 800626c:	40013800 	.word	0x40013800
 8006270:	40020000 	.word	0x40020000
 8006274:	40020400 	.word	0x40020400
 8006278:	40020800 	.word	0x40020800
 800627c:	40020c00 	.word	0x40020c00
 8006280:	40021000 	.word	0x40021000
 8006284:	40021400 	.word	0x40021400
 8006288:	40021800 	.word	0x40021800
 800628c:	40021c00 	.word	0x40021c00
 8006290:	40013c00 	.word	0x40013c00

08006294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	887b      	ldrh	r3, [r7, #2]
 80062a6:	4013      	ands	r3, r2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062ac:	2301      	movs	r3, #1
 80062ae:	73fb      	strb	r3, [r7, #15]
 80062b0:	e001      	b.n	80062b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	460b      	mov	r3, r1
 80062ce:	807b      	strh	r3, [r7, #2]
 80062d0:	4613      	mov	r3, r2
 80062d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062d4:	787b      	ldrb	r3, [r7, #1]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062da:	887a      	ldrh	r2, [r7, #2]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062e0:	e003      	b.n	80062ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062e2:	887b      	ldrh	r3, [r7, #2]
 80062e4:	041a      	lsls	r2, r3, #16
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	619a      	str	r2, [r3, #24]
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80062f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062f8:	b08f      	sub	sp, #60	; 0x3c
 80062fa:	af0a      	add	r7, sp, #40	; 0x28
 80062fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e054      	b.n	80063b2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d106      	bne.n	8006328 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f012 fec2 	bl	80190ac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2203      	movs	r2, #3
 800632c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006338:	2b00      	cmp	r3, #0
 800633a:	d102      	bne.n	8006342 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f003 fb10 	bl	800996c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	603b      	str	r3, [r7, #0]
 8006352:	687e      	ldr	r6, [r7, #4]
 8006354:	466d      	mov	r5, sp
 8006356:	f106 0410 	add.w	r4, r6, #16
 800635a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800635c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800635e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006362:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006366:	e885 0003 	stmia.w	r5, {r0, r1}
 800636a:	1d33      	adds	r3, r6, #4
 800636c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800636e:	6838      	ldr	r0, [r7, #0]
 8006370:	f003 fa8a 	bl	8009888 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2101      	movs	r1, #1
 800637a:	4618      	mov	r0, r3
 800637c:	f003 fb07 	bl	800998e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	603b      	str	r3, [r7, #0]
 8006386:	687e      	ldr	r6, [r7, #4]
 8006388:	466d      	mov	r5, sp
 800638a:	f106 0410 	add.w	r4, r6, #16
 800638e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006396:	e894 0003 	ldmia.w	r4, {r0, r1}
 800639a:	e885 0003 	stmia.w	r5, {r0, r1}
 800639e:	1d33      	adds	r3, r6, #4
 80063a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063a2:	6838      	ldr	r0, [r7, #0]
 80063a4:	f003 fc6e 	bl	8009c84 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063ba <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80063ba:	b590      	push	{r4, r7, lr}
 80063bc:	b089      	sub	sp, #36	; 0x24
 80063be:	af04      	add	r7, sp, #16
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	4608      	mov	r0, r1
 80063c4:	4611      	mov	r1, r2
 80063c6:	461a      	mov	r2, r3
 80063c8:	4603      	mov	r3, r0
 80063ca:	70fb      	strb	r3, [r7, #3]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70bb      	strb	r3, [r7, #2]
 80063d0:	4613      	mov	r3, r2
 80063d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <HAL_HCD_HC_Init+0x28>
 80063de:	2302      	movs	r3, #2
 80063e0:	e076      	b.n	80064d0 <HAL_HCD_HC_Init+0x116>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80063ea:	78fb      	ldrb	r3, [r7, #3]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	212c      	movs	r1, #44	; 0x2c
 80063f0:	fb01 f303 	mul.w	r3, r1, r3
 80063f4:	4413      	add	r3, r2
 80063f6:	333d      	adds	r3, #61	; 0x3d
 80063f8:	2200      	movs	r2, #0
 80063fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80063fc:	78fb      	ldrb	r3, [r7, #3]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	212c      	movs	r1, #44	; 0x2c
 8006402:	fb01 f303 	mul.w	r3, r1, r3
 8006406:	4413      	add	r3, r2
 8006408:	3338      	adds	r3, #56	; 0x38
 800640a:	787a      	ldrb	r2, [r7, #1]
 800640c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800640e:	78fb      	ldrb	r3, [r7, #3]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	212c      	movs	r1, #44	; 0x2c
 8006414:	fb01 f303 	mul.w	r3, r1, r3
 8006418:	4413      	add	r3, r2
 800641a:	3340      	adds	r3, #64	; 0x40
 800641c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800641e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	212c      	movs	r1, #44	; 0x2c
 8006426:	fb01 f303 	mul.w	r3, r1, r3
 800642a:	4413      	add	r3, r2
 800642c:	3339      	adds	r3, #57	; 0x39
 800642e:	78fa      	ldrb	r2, [r7, #3]
 8006430:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	212c      	movs	r1, #44	; 0x2c
 8006438:	fb01 f303 	mul.w	r3, r1, r3
 800643c:	4413      	add	r3, r2
 800643e:	333f      	adds	r3, #63	; 0x3f
 8006440:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006444:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	78ba      	ldrb	r2, [r7, #2]
 800644a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800644e:	b2d0      	uxtb	r0, r2
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	212c      	movs	r1, #44	; 0x2c
 8006454:	fb01 f303 	mul.w	r3, r1, r3
 8006458:	4413      	add	r3, r2
 800645a:	333a      	adds	r3, #58	; 0x3a
 800645c:	4602      	mov	r2, r0
 800645e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8006460:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006464:	2b00      	cmp	r3, #0
 8006466:	da09      	bge.n	800647c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	212c      	movs	r1, #44	; 0x2c
 800646e:	fb01 f303 	mul.w	r3, r1, r3
 8006472:	4413      	add	r3, r2
 8006474:	333b      	adds	r3, #59	; 0x3b
 8006476:	2201      	movs	r2, #1
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	e008      	b.n	800648e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	212c      	movs	r1, #44	; 0x2c
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	4413      	add	r3, r2
 8006488:	333b      	adds	r3, #59	; 0x3b
 800648a:	2200      	movs	r2, #0
 800648c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	212c      	movs	r1, #44	; 0x2c
 8006494:	fb01 f303 	mul.w	r3, r1, r3
 8006498:	4413      	add	r3, r2
 800649a:	333c      	adds	r3, #60	; 0x3c
 800649c:	f897 2020 	ldrb.w	r2, [r7, #32]
 80064a0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	787c      	ldrb	r4, [r7, #1]
 80064a8:	78ba      	ldrb	r2, [r7, #2]
 80064aa:	78f9      	ldrb	r1, [r7, #3]
 80064ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064ae:	9302      	str	r3, [sp, #8]
 80064b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	4623      	mov	r3, r4
 80064be:	f003 fd5b 	bl	8009f78 <USB_HC_Init>
 80064c2:	4603      	mov	r3, r0
 80064c4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd90      	pop	{r4, r7, pc}

080064d8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d101      	bne.n	80064f6 <HAL_HCD_HC_Halt+0x1e>
 80064f2:	2302      	movs	r3, #2
 80064f4:	e00f      	b.n	8006516 <HAL_HCD_HC_Halt+0x3e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	78fa      	ldrb	r2, [r7, #3]
 8006504:	4611      	mov	r1, r2
 8006506:	4618      	mov	r0, r3
 8006508:	f003 ff97 	bl	800a43a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006514:	7bfb      	ldrb	r3, [r7, #15]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	4608      	mov	r0, r1
 800652a:	4611      	mov	r1, r2
 800652c:	461a      	mov	r2, r3
 800652e:	4603      	mov	r3, r0
 8006530:	70fb      	strb	r3, [r7, #3]
 8006532:	460b      	mov	r3, r1
 8006534:	70bb      	strb	r3, [r7, #2]
 8006536:	4613      	mov	r3, r2
 8006538:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	212c      	movs	r1, #44	; 0x2c
 8006540:	fb01 f303 	mul.w	r3, r1, r3
 8006544:	4413      	add	r3, r2
 8006546:	333b      	adds	r3, #59	; 0x3b
 8006548:	78ba      	ldrb	r2, [r7, #2]
 800654a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	212c      	movs	r1, #44	; 0x2c
 8006552:	fb01 f303 	mul.w	r3, r1, r3
 8006556:	4413      	add	r3, r2
 8006558:	333f      	adds	r3, #63	; 0x3f
 800655a:	787a      	ldrb	r2, [r7, #1]
 800655c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800655e:	7c3b      	ldrb	r3, [r7, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d112      	bne.n	800658a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	212c      	movs	r1, #44	; 0x2c
 800656a:	fb01 f303 	mul.w	r3, r1, r3
 800656e:	4413      	add	r3, r2
 8006570:	3342      	adds	r3, #66	; 0x42
 8006572:	2203      	movs	r2, #3
 8006574:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006576:	78fb      	ldrb	r3, [r7, #3]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	212c      	movs	r1, #44	; 0x2c
 800657c:	fb01 f303 	mul.w	r3, r1, r3
 8006580:	4413      	add	r3, r2
 8006582:	333d      	adds	r3, #61	; 0x3d
 8006584:	7f3a      	ldrb	r2, [r7, #28]
 8006586:	701a      	strb	r2, [r3, #0]
 8006588:	e008      	b.n	800659c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	212c      	movs	r1, #44	; 0x2c
 8006590:	fb01 f303 	mul.w	r3, r1, r3
 8006594:	4413      	add	r3, r2
 8006596:	3342      	adds	r3, #66	; 0x42
 8006598:	2202      	movs	r2, #2
 800659a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800659c:	787b      	ldrb	r3, [r7, #1]
 800659e:	2b03      	cmp	r3, #3
 80065a0:	f200 80c6 	bhi.w	8006730 <HAL_HCD_HC_SubmitRequest+0x210>
 80065a4:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <HAL_HCD_HC_SubmitRequest+0x8c>)
 80065a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065aa:	bf00      	nop
 80065ac:	080065bd 	.word	0x080065bd
 80065b0:	0800671d 	.word	0x0800671d
 80065b4:	08006621 	.word	0x08006621
 80065b8:	0800669f 	.word	0x0800669f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80065bc:	7c3b      	ldrb	r3, [r7, #16]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	f040 80b8 	bne.w	8006734 <HAL_HCD_HC_SubmitRequest+0x214>
 80065c4:	78bb      	ldrb	r3, [r7, #2]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f040 80b4 	bne.w	8006734 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80065cc:	8b3b      	ldrh	r3, [r7, #24]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d108      	bne.n	80065e4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80065d2:	78fb      	ldrb	r3, [r7, #3]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	212c      	movs	r1, #44	; 0x2c
 80065d8:	fb01 f303 	mul.w	r3, r1, r3
 80065dc:	4413      	add	r3, r2
 80065de:	3355      	adds	r3, #85	; 0x55
 80065e0:	2201      	movs	r2, #1
 80065e2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	212c      	movs	r1, #44	; 0x2c
 80065ea:	fb01 f303 	mul.w	r3, r1, r3
 80065ee:	4413      	add	r3, r2
 80065f0:	3355      	adds	r3, #85	; 0x55
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d109      	bne.n	800660c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	212c      	movs	r1, #44	; 0x2c
 80065fe:	fb01 f303 	mul.w	r3, r1, r3
 8006602:	4413      	add	r3, r2
 8006604:	3342      	adds	r3, #66	; 0x42
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800660a:	e093      	b.n	8006734 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	212c      	movs	r1, #44	; 0x2c
 8006612:	fb01 f303 	mul.w	r3, r1, r3
 8006616:	4413      	add	r3, r2
 8006618:	3342      	adds	r3, #66	; 0x42
 800661a:	2202      	movs	r2, #2
 800661c:	701a      	strb	r2, [r3, #0]
      break;
 800661e:	e089      	b.n	8006734 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006620:	78bb      	ldrb	r3, [r7, #2]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d11d      	bne.n	8006662 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006626:	78fb      	ldrb	r3, [r7, #3]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	212c      	movs	r1, #44	; 0x2c
 800662c:	fb01 f303 	mul.w	r3, r1, r3
 8006630:	4413      	add	r3, r2
 8006632:	3355      	adds	r3, #85	; 0x55
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d109      	bne.n	800664e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	212c      	movs	r1, #44	; 0x2c
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	4413      	add	r3, r2
 8006646:	3342      	adds	r3, #66	; 0x42
 8006648:	2200      	movs	r2, #0
 800664a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800664c:	e073      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	212c      	movs	r1, #44	; 0x2c
 8006654:	fb01 f303 	mul.w	r3, r1, r3
 8006658:	4413      	add	r3, r2
 800665a:	3342      	adds	r3, #66	; 0x42
 800665c:	2202      	movs	r2, #2
 800665e:	701a      	strb	r2, [r3, #0]
      break;
 8006660:	e069      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006662:	78fb      	ldrb	r3, [r7, #3]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	212c      	movs	r1, #44	; 0x2c
 8006668:	fb01 f303 	mul.w	r3, r1, r3
 800666c:	4413      	add	r3, r2
 800666e:	3354      	adds	r3, #84	; 0x54
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d109      	bne.n	800668a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	212c      	movs	r1, #44	; 0x2c
 800667c:	fb01 f303 	mul.w	r3, r1, r3
 8006680:	4413      	add	r3, r2
 8006682:	3342      	adds	r3, #66	; 0x42
 8006684:	2200      	movs	r2, #0
 8006686:	701a      	strb	r2, [r3, #0]
      break;
 8006688:	e055      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	212c      	movs	r1, #44	; 0x2c
 8006690:	fb01 f303 	mul.w	r3, r1, r3
 8006694:	4413      	add	r3, r2
 8006696:	3342      	adds	r3, #66	; 0x42
 8006698:	2202      	movs	r2, #2
 800669a:	701a      	strb	r2, [r3, #0]
      break;
 800669c:	e04b      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800669e:	78bb      	ldrb	r3, [r7, #2]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d11d      	bne.n	80066e0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	212c      	movs	r1, #44	; 0x2c
 80066aa:	fb01 f303 	mul.w	r3, r1, r3
 80066ae:	4413      	add	r3, r2
 80066b0:	3355      	adds	r3, #85	; 0x55
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d109      	bne.n	80066cc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	212c      	movs	r1, #44	; 0x2c
 80066be:	fb01 f303 	mul.w	r3, r1, r3
 80066c2:	4413      	add	r3, r2
 80066c4:	3342      	adds	r3, #66	; 0x42
 80066c6:	2200      	movs	r2, #0
 80066c8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80066ca:	e034      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	212c      	movs	r1, #44	; 0x2c
 80066d2:	fb01 f303 	mul.w	r3, r1, r3
 80066d6:	4413      	add	r3, r2
 80066d8:	3342      	adds	r3, #66	; 0x42
 80066da:	2202      	movs	r2, #2
 80066dc:	701a      	strb	r2, [r3, #0]
      break;
 80066de:	e02a      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	212c      	movs	r1, #44	; 0x2c
 80066e6:	fb01 f303 	mul.w	r3, r1, r3
 80066ea:	4413      	add	r3, r2
 80066ec:	3354      	adds	r3, #84	; 0x54
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d109      	bne.n	8006708 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	212c      	movs	r1, #44	; 0x2c
 80066fa:	fb01 f303 	mul.w	r3, r1, r3
 80066fe:	4413      	add	r3, r2
 8006700:	3342      	adds	r3, #66	; 0x42
 8006702:	2200      	movs	r2, #0
 8006704:	701a      	strb	r2, [r3, #0]
      break;
 8006706:	e016      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006708:	78fb      	ldrb	r3, [r7, #3]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	212c      	movs	r1, #44	; 0x2c
 800670e:	fb01 f303 	mul.w	r3, r1, r3
 8006712:	4413      	add	r3, r2
 8006714:	3342      	adds	r3, #66	; 0x42
 8006716:	2202      	movs	r2, #2
 8006718:	701a      	strb	r2, [r3, #0]
      break;
 800671a:	e00c      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	212c      	movs	r1, #44	; 0x2c
 8006722:	fb01 f303 	mul.w	r3, r1, r3
 8006726:	4413      	add	r3, r2
 8006728:	3342      	adds	r3, #66	; 0x42
 800672a:	2200      	movs	r2, #0
 800672c:	701a      	strb	r2, [r3, #0]
      break;
 800672e:	e002      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006730:	bf00      	nop
 8006732:	e000      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006734:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006736:	78fb      	ldrb	r3, [r7, #3]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	212c      	movs	r1, #44	; 0x2c
 800673c:	fb01 f303 	mul.w	r3, r1, r3
 8006740:	4413      	add	r3, r2
 8006742:	3344      	adds	r3, #68	; 0x44
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	8b3a      	ldrh	r2, [r7, #24]
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	202c      	movs	r0, #44	; 0x2c
 8006750:	fb00 f303 	mul.w	r3, r0, r3
 8006754:	440b      	add	r3, r1
 8006756:	334c      	adds	r3, #76	; 0x4c
 8006758:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	212c      	movs	r1, #44	; 0x2c
 8006760:	fb01 f303 	mul.w	r3, r1, r3
 8006764:	4413      	add	r3, r2
 8006766:	3360      	adds	r3, #96	; 0x60
 8006768:	2200      	movs	r2, #0
 800676a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	212c      	movs	r1, #44	; 0x2c
 8006772:	fb01 f303 	mul.w	r3, r1, r3
 8006776:	4413      	add	r3, r2
 8006778:	3350      	adds	r3, #80	; 0x50
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800677e:	78fb      	ldrb	r3, [r7, #3]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	212c      	movs	r1, #44	; 0x2c
 8006784:	fb01 f303 	mul.w	r3, r1, r3
 8006788:	4413      	add	r3, r2
 800678a:	3339      	adds	r3, #57	; 0x39
 800678c:	78fa      	ldrb	r2, [r7, #3]
 800678e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	212c      	movs	r1, #44	; 0x2c
 8006796:	fb01 f303 	mul.w	r3, r1, r3
 800679a:	4413      	add	r3, r2
 800679c:	3361      	adds	r3, #97	; 0x61
 800679e:	2200      	movs	r2, #0
 80067a0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6818      	ldr	r0, [r3, #0]
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	222c      	movs	r2, #44	; 0x2c
 80067aa:	fb02 f303 	mul.w	r3, r2, r3
 80067ae:	3338      	adds	r3, #56	; 0x38
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	18d1      	adds	r1, r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	461a      	mov	r2, r3
 80067bc:	f003 fcea 	bl	800a194 <USB_HC_StartXfer>
 80067c0:	4603      	mov	r3, r0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop

080067cc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f003 fa0d 	bl	8009c02 <USB_GetMode>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	f040 80f6 	bne.w	80069dc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f003 f9f1 	bl	8009bdc <USB_ReadInterrupts>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 80ec 	beq.w	80069da <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f003 f9e8 	bl	8009bdc <USB_ReadInterrupts>
 800680c:	4603      	mov	r3, r0
 800680e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006812:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006816:	d104      	bne.n	8006822 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006820:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	f003 f9d8 	bl	8009bdc <USB_ReadInterrupts>
 800682c:	4603      	mov	r3, r0
 800682e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006836:	d104      	bne.n	8006842 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006840:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4618      	mov	r0, r3
 8006848:	f003 f9c8 	bl	8009bdc <USB_ReadInterrupts>
 800684c:	4603      	mov	r3, r0
 800684e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006852:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006856:	d104      	bne.n	8006862 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006860:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f003 f9b8 	bl	8009bdc <USB_ReadInterrupts>
 800686c:	4603      	mov	r3, r0
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b02      	cmp	r3, #2
 8006874:	d103      	bne.n	800687e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2202      	movs	r2, #2
 800687c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f003 f9aa 	bl	8009bdc <USB_ReadInterrupts>
 8006888:	4603      	mov	r3, r0
 800688a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800688e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006892:	d11c      	bne.n	80068ce <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800689c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10f      	bne.n	80068ce <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80068ae:	2110      	movs	r1, #16
 80068b0:	6938      	ldr	r0, [r7, #16]
 80068b2:	f003 f8b9 	bl	8009a28 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80068b6:	6938      	ldr	r0, [r7, #16]
 80068b8:	f003 f8da 	bl	8009a70 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2101      	movs	r1, #1
 80068c2:	4618      	mov	r0, r3
 80068c4:	f003 fa92 	bl	8009dec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f012 fc6d 	bl	80191a8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f003 f982 	bl	8009bdc <USB_ReadInterrupts>
 80068d8:	4603      	mov	r3, r0
 80068da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068e2:	d102      	bne.n	80068ea <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 fa03 	bl	8007cf0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f003 f974 	bl	8009bdc <USB_ReadInterrupts>
 80068f4:	4603      	mov	r3, r0
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	2b08      	cmp	r3, #8
 80068fc:	d106      	bne.n	800690c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f012 fc36 	bl	8019170 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2208      	movs	r2, #8
 800690a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4618      	mov	r0, r3
 8006912:	f003 f963 	bl	8009bdc <USB_ReadInterrupts>
 8006916:	4603      	mov	r3, r0
 8006918:	f003 0310 	and.w	r3, r3, #16
 800691c:	2b10      	cmp	r3, #16
 800691e:	d101      	bne.n	8006924 <HAL_HCD_IRQHandler+0x158>
 8006920:	2301      	movs	r3, #1
 8006922:	e000      	b.n	8006926 <HAL_HCD_IRQHandler+0x15a>
 8006924:	2300      	movs	r3, #0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d012      	beq.n	8006950 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	699a      	ldr	r2, [r3, #24]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0210 	bic.w	r2, r2, #16
 8006938:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f001 f906 	bl	8007b4c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0210 	orr.w	r2, r2, #16
 800694e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4618      	mov	r0, r3
 8006956:	f003 f941 	bl	8009bdc <USB_ReadInterrupts>
 800695a:	4603      	mov	r3, r0
 800695c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006964:	d13a      	bne.n	80069dc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4618      	mov	r0, r3
 800696c:	f003 fd54 	bl	800a418 <USB_HC_ReadInterrupt>
 8006970:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006972:	2300      	movs	r3, #0
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	e025      	b.n	80069c4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f003 030f 	and.w	r3, r3, #15
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	fa22 f303 	lsr.w	r3, r2, r3
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d018      	beq.n	80069be <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800699e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a2:	d106      	bne.n	80069b2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f8ab 	bl	8006b06 <HCD_HC_IN_IRQHandler>
 80069b0:	e005      	b.n	80069be <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fcc6 	bl	800734a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	3301      	adds	r3, #1
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d3d4      	bcc.n	8006978 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069d6:	615a      	str	r2, [r3, #20]
 80069d8:	e000      	b.n	80069dc <HAL_HCD_IRQHandler+0x210>
      return;
 80069da:	bf00      	nop
    }
  }
}
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_HCD_Start+0x16>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e013      	b.n	8006a20 <HAL_HCD_Start+0x3e>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2101      	movs	r1, #1
 8006a06:	4618      	mov	r0, r3
 8006a08:	f003 fa54 	bl	8009eb4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f002 ff9a 	bl	800994a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d101      	bne.n	8006a3e <HAL_HCD_Stop+0x16>
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	e00d      	b.n	8006a5a <HAL_HCD_Stop+0x32>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f003 fe4e 	bl	800a6ec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b082      	sub	sp, #8
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f003 f9f6 	bl	8009e60 <USB_ResetPort>
 8006a74:	4603      	mov	r3, r0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	460b      	mov	r3, r1
 8006a88:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006a8a:	78fb      	ldrb	r3, [r7, #3]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	212c      	movs	r1, #44	; 0x2c
 8006a90:	fb01 f303 	mul.w	r3, r1, r3
 8006a94:	4413      	add	r3, r2
 8006a96:	3360      	adds	r3, #96	; 0x60
 8006a98:	781b      	ldrb	r3, [r3, #0]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006ab2:	78fb      	ldrb	r3, [r7, #3]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	212c      	movs	r1, #44	; 0x2c
 8006ab8:	fb01 f303 	mul.w	r3, r1, r3
 8006abc:	4413      	add	r3, r2
 8006abe:	3350      	adds	r3, #80	; 0x50
 8006ac0:	681b      	ldr	r3, [r3, #0]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b082      	sub	sp, #8
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f003 fa3a 	bl	8009f54 <USB_GetCurrentFrame>
 8006ae0:	4603      	mov	r3, r0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f003 fa15 	bl	8009f26 <USB_GetHostSpeed>
 8006afc:	4603      	mov	r3, r0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b086      	sub	sp, #24
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006b1c:	78fb      	ldrb	r3, [r7, #3]
 8006b1e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f003 0304 	and.w	r3, r3, #4
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d119      	bne.n	8006b6a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b42:	461a      	mov	r2, r3
 8006b44:	2304      	movs	r3, #4
 8006b46:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	0151      	lsls	r1, r2, #5
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	440a      	add	r2, r1
 8006b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b62:	f043 0302 	orr.w	r3, r3, #2
 8006b66:	60d3      	str	r3, [r2, #12]
 8006b68:	e101      	b.n	8006d6e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b80:	d12b      	bne.n	8006bda <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b94:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	212c      	movs	r1, #44	; 0x2c
 8006b9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	3361      	adds	r3, #97	; 0x61
 8006ba4:	2207      	movs	r2, #7
 8006ba6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	0151      	lsls	r1, r2, #5
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	440a      	add	r2, r1
 8006bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bc2:	f043 0302 	orr.w	r3, r3, #2
 8006bc6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f003 fc31 	bl	800a43a <USB_HC_Halt>
 8006bd8:	e0c9      	b.n	8006d6e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f003 0320 	and.w	r3, r3, #32
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	d109      	bne.n	8006c04 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	2320      	movs	r3, #32
 8006c00:	6093      	str	r3, [r2, #8]
 8006c02:	e0b4      	b.n	8006d6e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 0308 	and.w	r3, r3, #8
 8006c16:	2b08      	cmp	r3, #8
 8006c18:	d133      	bne.n	8006c82 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	0151      	lsls	r1, r2, #5
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	440a      	add	r2, r1
 8006c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c34:	f043 0302 	orr.w	r3, r3, #2
 8006c38:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	212c      	movs	r1, #44	; 0x2c
 8006c40:	fb01 f303 	mul.w	r3, r1, r3
 8006c44:	4413      	add	r3, r2
 8006c46:	3361      	adds	r3, #97	; 0x61
 8006c48:	2205      	movs	r2, #5
 8006c4a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c58:	461a      	mov	r2, r3
 8006c5a:	2310      	movs	r3, #16
 8006c5c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	4611      	mov	r1, r2
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f003 fbdd 	bl	800a43a <USB_HC_Halt>
 8006c80:	e075      	b.n	8006d6e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c98:	d134      	bne.n	8006d04 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	0151      	lsls	r1, r2, #5
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	440a      	add	r2, r1
 8006cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cb4:	f043 0302 	orr.w	r3, r3, #2
 8006cb8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	212c      	movs	r1, #44	; 0x2c
 8006cc0:	fb01 f303 	mul.w	r3, r1, r3
 8006cc4:	4413      	add	r3, r2
 8006cc6:	3361      	adds	r3, #97	; 0x61
 8006cc8:	2208      	movs	r2, #8
 8006cca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd8:	461a      	mov	r2, r3
 8006cda:	2310      	movs	r3, #16
 8006cdc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cea:	461a      	mov	r2, r3
 8006cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cf0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	4611      	mov	r1, r2
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f003 fb9c 	bl	800a43a <USB_HC_Halt>
 8006d02:	e034      	b.n	8006d6e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d16:	2b80      	cmp	r3, #128	; 0x80
 8006d18:	d129      	bne.n	8006d6e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	0151      	lsls	r1, r2, #5
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	440a      	add	r2, r1
 8006d30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d34:	f043 0302 	orr.w	r3, r3, #2
 8006d38:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	212c      	movs	r1, #44	; 0x2c
 8006d40:	fb01 f303 	mul.w	r3, r1, r3
 8006d44:	4413      	add	r3, r2
 8006d46:	3361      	adds	r3, #97	; 0x61
 8006d48:	2206      	movs	r2, #6
 8006d4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	b2d2      	uxtb	r2, r2
 8006d54:	4611      	mov	r1, r2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f003 fb6f 	bl	800a43a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d68:	461a      	mov	r2, r3
 8006d6a:	2380      	movs	r3, #128	; 0x80
 8006d6c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d84:	d122      	bne.n	8006dcc <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	0151      	lsls	r1, r2, #5
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	440a      	add	r2, r1
 8006d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006da0:	f043 0302 	orr.w	r3, r3, #2
 8006da4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	b2d2      	uxtb	r2, r2
 8006dae:	4611      	mov	r1, r2
 8006db0:	4618      	mov	r0, r3
 8006db2:	f003 fb42 	bl	800a43a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dc8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006dca:	e2ba      	b.n	8007342 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	f040 811b 	bne.w	800701a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d019      	beq.n	8006e20 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	212c      	movs	r1, #44	; 0x2c
 8006df2:	fb01 f303 	mul.w	r3, r1, r3
 8006df6:	4413      	add	r3, r2
 8006df8:	3348      	adds	r3, #72	; 0x48
 8006dfa:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	0159      	lsls	r1, r3, #5
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	440b      	add	r3, r1
 8006e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006e0e:	1ad2      	subs	r2, r2, r3
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	202c      	movs	r0, #44	; 0x2c
 8006e16:	fb00 f303 	mul.w	r3, r0, r3
 8006e1a:	440b      	add	r3, r1
 8006e1c:	3350      	adds	r3, #80	; 0x50
 8006e1e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	212c      	movs	r1, #44	; 0x2c
 8006e26:	fb01 f303 	mul.w	r3, r1, r3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	3361      	adds	r3, #97	; 0x61
 8006e2e:	2201      	movs	r2, #1
 8006e30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	212c      	movs	r1, #44	; 0x2c
 8006e38:	fb01 f303 	mul.w	r3, r1, r3
 8006e3c:	4413      	add	r3, r2
 8006e3e:	335c      	adds	r3, #92	; 0x5c
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e50:	461a      	mov	r2, r3
 8006e52:	2301      	movs	r3, #1
 8006e54:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	212c      	movs	r1, #44	; 0x2c
 8006e5c:	fb01 f303 	mul.w	r3, r1, r3
 8006e60:	4413      	add	r3, r2
 8006e62:	333f      	adds	r3, #63	; 0x3f
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d009      	beq.n	8006e7e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	212c      	movs	r1, #44	; 0x2c
 8006e70:	fb01 f303 	mul.w	r3, r1, r3
 8006e74:	4413      	add	r3, r2
 8006e76:	333f      	adds	r3, #63	; 0x3f
 8006e78:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d121      	bne.n	8006ec2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	0151      	lsls	r1, r2, #5
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	440a      	add	r2, r1
 8006e94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e98:	f043 0302 	orr.w	r3, r3, #2
 8006e9c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	b2d2      	uxtb	r2, r2
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f003 fac6 	bl	800a43a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eba:	461a      	mov	r2, r3
 8006ebc:	2310      	movs	r3, #16
 8006ebe:	6093      	str	r3, [r2, #8]
 8006ec0:	e066      	b.n	8006f90 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	212c      	movs	r1, #44	; 0x2c
 8006ec8:	fb01 f303 	mul.w	r3, r1, r3
 8006ecc:	4413      	add	r3, r2
 8006ece:	333f      	adds	r3, #63	; 0x3f
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d127      	bne.n	8006f26 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	0151      	lsls	r1, r2, #5
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	440a      	add	r2, r1
 8006eec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ef0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ef4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	212c      	movs	r1, #44	; 0x2c
 8006efc:	fb01 f303 	mul.w	r3, r1, r3
 8006f00:	4413      	add	r3, r2
 8006f02:	3360      	adds	r3, #96	; 0x60
 8006f04:	2201      	movs	r2, #1
 8006f06:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	b2d9      	uxtb	r1, r3
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	202c      	movs	r0, #44	; 0x2c
 8006f12:	fb00 f303 	mul.w	r3, r0, r3
 8006f16:	4413      	add	r3, r2
 8006f18:	3360      	adds	r3, #96	; 0x60
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f012 f950 	bl	80191c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006f24:	e034      	b.n	8006f90 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	212c      	movs	r1, #44	; 0x2c
 8006f2c:	fb01 f303 	mul.w	r3, r1, r3
 8006f30:	4413      	add	r3, r2
 8006f32:	333f      	adds	r3, #63	; 0x3f
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d12a      	bne.n	8006f90 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	212c      	movs	r1, #44	; 0x2c
 8006f40:	fb01 f303 	mul.w	r3, r1, r3
 8006f44:	4413      	add	r3, r2
 8006f46:	3360      	adds	r3, #96	; 0x60
 8006f48:	2201      	movs	r2, #1
 8006f4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	212c      	movs	r1, #44	; 0x2c
 8006f52:	fb01 f303 	mul.w	r3, r1, r3
 8006f56:	4413      	add	r3, r2
 8006f58:	3354      	adds	r3, #84	; 0x54
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	f083 0301 	eor.w	r3, r3, #1
 8006f60:	b2d8      	uxtb	r0, r3
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	212c      	movs	r1, #44	; 0x2c
 8006f68:	fb01 f303 	mul.w	r3, r1, r3
 8006f6c:	4413      	add	r3, r2
 8006f6e:	3354      	adds	r3, #84	; 0x54
 8006f70:	4602      	mov	r2, r0
 8006f72:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	b2d9      	uxtb	r1, r3
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	202c      	movs	r0, #44	; 0x2c
 8006f7e:	fb00 f303 	mul.w	r3, r0, r3
 8006f82:	4413      	add	r3, r2
 8006f84:	3360      	adds	r3, #96	; 0x60
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f012 f91a 	bl	80191c4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d12b      	bne.n	8006ff0 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	212c      	movs	r1, #44	; 0x2c
 8006f9e:	fb01 f303 	mul.w	r3, r1, r3
 8006fa2:	4413      	add	r3, r2
 8006fa4:	3348      	adds	r3, #72	; 0x48
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	202c      	movs	r0, #44	; 0x2c
 8006fae:	fb00 f202 	mul.w	r2, r0, r2
 8006fb2:	440a      	add	r2, r1
 8006fb4:	3240      	adds	r2, #64	; 0x40
 8006fb6:	8812      	ldrh	r2, [r2, #0]
 8006fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 81be 	beq.w	8007342 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	212c      	movs	r1, #44	; 0x2c
 8006fcc:	fb01 f303 	mul.w	r3, r1, r3
 8006fd0:	4413      	add	r3, r2
 8006fd2:	3354      	adds	r3, #84	; 0x54
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	f083 0301 	eor.w	r3, r3, #1
 8006fda:	b2d8      	uxtb	r0, r3
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	212c      	movs	r1, #44	; 0x2c
 8006fe2:	fb01 f303 	mul.w	r3, r1, r3
 8006fe6:	4413      	add	r3, r2
 8006fe8:	3354      	adds	r3, #84	; 0x54
 8006fea:	4602      	mov	r2, r0
 8006fec:	701a      	strb	r2, [r3, #0]
}
 8006fee:	e1a8      	b.n	8007342 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	212c      	movs	r1, #44	; 0x2c
 8006ff6:	fb01 f303 	mul.w	r3, r1, r3
 8006ffa:	4413      	add	r3, r2
 8006ffc:	3354      	adds	r3, #84	; 0x54
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	f083 0301 	eor.w	r3, r3, #1
 8007004:	b2d8      	uxtb	r0, r3
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	212c      	movs	r1, #44	; 0x2c
 800700c:	fb01 f303 	mul.w	r3, r1, r3
 8007010:	4413      	add	r3, r2
 8007012:	3354      	adds	r3, #84	; 0x54
 8007014:	4602      	mov	r2, r0
 8007016:	701a      	strb	r2, [r3, #0]
}
 8007018:	e193      	b.n	8007342 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	4413      	add	r3, r2
 8007022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b02      	cmp	r3, #2
 800702e:	f040 8106 	bne.w	800723e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	4413      	add	r3, r2
 800703a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	0151      	lsls	r1, r2, #5
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	440a      	add	r2, r1
 8007048:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800704c:	f023 0302 	bic.w	r3, r3, #2
 8007050:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	212c      	movs	r1, #44	; 0x2c
 8007058:	fb01 f303 	mul.w	r3, r1, r3
 800705c:	4413      	add	r3, r2
 800705e:	3361      	adds	r3, #97	; 0x61
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d109      	bne.n	800707a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	212c      	movs	r1, #44	; 0x2c
 800706c:	fb01 f303 	mul.w	r3, r1, r3
 8007070:	4413      	add	r3, r2
 8007072:	3360      	adds	r3, #96	; 0x60
 8007074:	2201      	movs	r2, #1
 8007076:	701a      	strb	r2, [r3, #0]
 8007078:	e0c9      	b.n	800720e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	212c      	movs	r1, #44	; 0x2c
 8007080:	fb01 f303 	mul.w	r3, r1, r3
 8007084:	4413      	add	r3, r2
 8007086:	3361      	adds	r3, #97	; 0x61
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b05      	cmp	r3, #5
 800708c:	d109      	bne.n	80070a2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	212c      	movs	r1, #44	; 0x2c
 8007094:	fb01 f303 	mul.w	r3, r1, r3
 8007098:	4413      	add	r3, r2
 800709a:	3360      	adds	r3, #96	; 0x60
 800709c:	2205      	movs	r2, #5
 800709e:	701a      	strb	r2, [r3, #0]
 80070a0:	e0b5      	b.n	800720e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	212c      	movs	r1, #44	; 0x2c
 80070a8:	fb01 f303 	mul.w	r3, r1, r3
 80070ac:	4413      	add	r3, r2
 80070ae:	3361      	adds	r3, #97	; 0x61
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	2b06      	cmp	r3, #6
 80070b4:	d009      	beq.n	80070ca <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	212c      	movs	r1, #44	; 0x2c
 80070bc:	fb01 f303 	mul.w	r3, r1, r3
 80070c0:	4413      	add	r3, r2
 80070c2:	3361      	adds	r3, #97	; 0x61
 80070c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d150      	bne.n	800716c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	212c      	movs	r1, #44	; 0x2c
 80070d0:	fb01 f303 	mul.w	r3, r1, r3
 80070d4:	4413      	add	r3, r2
 80070d6:	335c      	adds	r3, #92	; 0x5c
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	202c      	movs	r0, #44	; 0x2c
 80070e2:	fb00 f303 	mul.w	r3, r0, r3
 80070e6:	440b      	add	r3, r1
 80070e8:	335c      	adds	r3, #92	; 0x5c
 80070ea:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	212c      	movs	r1, #44	; 0x2c
 80070f2:	fb01 f303 	mul.w	r3, r1, r3
 80070f6:	4413      	add	r3, r2
 80070f8:	335c      	adds	r3, #92	; 0x5c
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d912      	bls.n	8007126 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	212c      	movs	r1, #44	; 0x2c
 8007106:	fb01 f303 	mul.w	r3, r1, r3
 800710a:	4413      	add	r3, r2
 800710c:	335c      	adds	r3, #92	; 0x5c
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	212c      	movs	r1, #44	; 0x2c
 8007118:	fb01 f303 	mul.w	r3, r1, r3
 800711c:	4413      	add	r3, r2
 800711e:	3360      	adds	r3, #96	; 0x60
 8007120:	2204      	movs	r2, #4
 8007122:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007124:	e073      	b.n	800720e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	212c      	movs	r1, #44	; 0x2c
 800712c:	fb01 f303 	mul.w	r3, r1, r3
 8007130:	4413      	add	r3, r2
 8007132:	3360      	adds	r3, #96	; 0x60
 8007134:	2202      	movs	r2, #2
 8007136:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	4413      	add	r3, r2
 8007140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800714e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007156:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	4413      	add	r3, r2
 8007160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007164:	461a      	mov	r2, r3
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800716a:	e050      	b.n	800720e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	212c      	movs	r1, #44	; 0x2c
 8007172:	fb01 f303 	mul.w	r3, r1, r3
 8007176:	4413      	add	r3, r2
 8007178:	3361      	adds	r3, #97	; 0x61
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	2b03      	cmp	r3, #3
 800717e:	d122      	bne.n	80071c6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	212c      	movs	r1, #44	; 0x2c
 8007186:	fb01 f303 	mul.w	r3, r1, r3
 800718a:	4413      	add	r3, r2
 800718c:	3360      	adds	r3, #96	; 0x60
 800718e:	2202      	movs	r2, #2
 8007190:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	4413      	add	r3, r2
 800719a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071a8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071b0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071be:	461a      	mov	r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	6013      	str	r3, [r2, #0]
 80071c4:	e023      	b.n	800720e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	212c      	movs	r1, #44	; 0x2c
 80071cc:	fb01 f303 	mul.w	r3, r1, r3
 80071d0:	4413      	add	r3, r2
 80071d2:	3361      	adds	r3, #97	; 0x61
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	2b07      	cmp	r3, #7
 80071d8:	d119      	bne.n	800720e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	212c      	movs	r1, #44	; 0x2c
 80071e0:	fb01 f303 	mul.w	r3, r1, r3
 80071e4:	4413      	add	r3, r2
 80071e6:	335c      	adds	r3, #92	; 0x5c
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	1c5a      	adds	r2, r3, #1
 80071ec:	6879      	ldr	r1, [r7, #4]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	202c      	movs	r0, #44	; 0x2c
 80071f2:	fb00 f303 	mul.w	r3, r0, r3
 80071f6:	440b      	add	r3, r1
 80071f8:	335c      	adds	r3, #92	; 0x5c
 80071fa:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	212c      	movs	r1, #44	; 0x2c
 8007202:	fb01 f303 	mul.w	r3, r1, r3
 8007206:	4413      	add	r3, r2
 8007208:	3360      	adds	r3, #96	; 0x60
 800720a:	2204      	movs	r2, #4
 800720c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	4413      	add	r3, r2
 8007216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800721a:	461a      	mov	r2, r3
 800721c:	2302      	movs	r3, #2
 800721e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	b2d9      	uxtb	r1, r3
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	202c      	movs	r0, #44	; 0x2c
 800722a:	fb00 f303 	mul.w	r3, r0, r3
 800722e:	4413      	add	r3, r2
 8007230:	3360      	adds	r3, #96	; 0x60
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	461a      	mov	r2, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f011 ffc4 	bl	80191c4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800723c:	e081      	b.n	8007342 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	4413      	add	r3, r2
 8007246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f003 0310 	and.w	r3, r3, #16
 8007250:	2b10      	cmp	r3, #16
 8007252:	d176      	bne.n	8007342 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	212c      	movs	r1, #44	; 0x2c
 800725a:	fb01 f303 	mul.w	r3, r1, r3
 800725e:	4413      	add	r3, r2
 8007260:	333f      	adds	r3, #63	; 0x3f
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	2b03      	cmp	r3, #3
 8007266:	d121      	bne.n	80072ac <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	212c      	movs	r1, #44	; 0x2c
 800726e:	fb01 f303 	mul.w	r3, r1, r3
 8007272:	4413      	add	r3, r2
 8007274:	335c      	adds	r3, #92	; 0x5c
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	4413      	add	r3, r2
 8007282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	0151      	lsls	r1, r2, #5
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	440a      	add	r2, r1
 8007290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007294:	f043 0302 	orr.w	r3, r3, #2
 8007298:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	b2d2      	uxtb	r2, r2
 80072a2:	4611      	mov	r1, r2
 80072a4:	4618      	mov	r0, r3
 80072a6:	f003 f8c8 	bl	800a43a <USB_HC_Halt>
 80072aa:	e041      	b.n	8007330 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	212c      	movs	r1, #44	; 0x2c
 80072b2:	fb01 f303 	mul.w	r3, r1, r3
 80072b6:	4413      	add	r3, r2
 80072b8:	333f      	adds	r3, #63	; 0x3f
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d009      	beq.n	80072d4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	212c      	movs	r1, #44	; 0x2c
 80072c6:	fb01 f303 	mul.w	r3, r1, r3
 80072ca:	4413      	add	r3, r2
 80072cc:	333f      	adds	r3, #63	; 0x3f
 80072ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d12d      	bne.n	8007330 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	212c      	movs	r1, #44	; 0x2c
 80072da:	fb01 f303 	mul.w	r3, r1, r3
 80072de:	4413      	add	r3, r2
 80072e0:	335c      	adds	r3, #92	; 0x5c
 80072e2:	2200      	movs	r2, #0
 80072e4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d120      	bne.n	8007330 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	212c      	movs	r1, #44	; 0x2c
 80072f4:	fb01 f303 	mul.w	r3, r1, r3
 80072f8:	4413      	add	r3, r2
 80072fa:	3361      	adds	r3, #97	; 0x61
 80072fc:	2203      	movs	r2, #3
 80072fe:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	4413      	add	r3, r2
 8007308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	0151      	lsls	r1, r2, #5
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	440a      	add	r2, r1
 8007316:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800731a:	f043 0302 	orr.w	r3, r3, #2
 800731e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	b2d2      	uxtb	r2, r2
 8007328:	4611      	mov	r1, r2
 800732a:	4618      	mov	r0, r3
 800732c:	f003 f885 	bl	800a43a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	4413      	add	r3, r2
 8007338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733c:	461a      	mov	r2, r3
 800733e:	2310      	movs	r3, #16
 8007340:	6093      	str	r3, [r2, #8]
}
 8007342:	bf00      	nop
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b088      	sub	sp, #32
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	460b      	mov	r3, r1
 8007354:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8007360:	78fb      	ldrb	r3, [r7, #3]
 8007362:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	4413      	add	r3, r2
 800736c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f003 0304 	and.w	r3, r3, #4
 8007376:	2b04      	cmp	r3, #4
 8007378:	d119      	bne.n	80073ae <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	4413      	add	r3, r2
 8007382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007386:	461a      	mov	r2, r3
 8007388:	2304      	movs	r3, #4
 800738a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	4413      	add	r3, r2
 8007394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	0151      	lsls	r1, r2, #5
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	440a      	add	r2, r1
 80073a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073a6:	f043 0302 	orr.w	r3, r3, #2
 80073aa:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80073ac:	e3ca      	b.n	8007b44 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f003 0320 	and.w	r3, r3, #32
 80073c0:	2b20      	cmp	r3, #32
 80073c2:	d13e      	bne.n	8007442 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d0:	461a      	mov	r2, r3
 80073d2:	2320      	movs	r3, #32
 80073d4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	212c      	movs	r1, #44	; 0x2c
 80073dc:	fb01 f303 	mul.w	r3, r1, r3
 80073e0:	4413      	add	r3, r2
 80073e2:	333d      	adds	r3, #61	; 0x3d
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	f040 83ac 	bne.w	8007b44 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	212c      	movs	r1, #44	; 0x2c
 80073f2:	fb01 f303 	mul.w	r3, r1, r3
 80073f6:	4413      	add	r3, r2
 80073f8:	333d      	adds	r3, #61	; 0x3d
 80073fa:	2200      	movs	r2, #0
 80073fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	212c      	movs	r1, #44	; 0x2c
 8007404:	fb01 f303 	mul.w	r3, r1, r3
 8007408:	4413      	add	r3, r2
 800740a:	3360      	adds	r3, #96	; 0x60
 800740c:	2202      	movs	r2, #2
 800740e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	4413      	add	r3, r2
 8007418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	69ba      	ldr	r2, [r7, #24]
 8007424:	440a      	add	r2, r1
 8007426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800742a:	f043 0302 	orr.w	r3, r3, #2
 800742e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	b2d2      	uxtb	r2, r2
 8007438:	4611      	mov	r1, r2
 800743a:	4618      	mov	r0, r3
 800743c:	f002 fffd 	bl	800a43a <USB_HC_Halt>
}
 8007440:	e380      	b.n	8007b44 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	4413      	add	r3, r2
 800744a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007458:	d122      	bne.n	80074a0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	4413      	add	r3, r2
 8007462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	0151      	lsls	r1, r2, #5
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	440a      	add	r2, r1
 8007470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007474:	f043 0302 	orr.w	r3, r3, #2
 8007478:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	b2d2      	uxtb	r2, r2
 8007482:	4611      	mov	r1, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f002 ffd8 	bl	800a43a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	4413      	add	r3, r2
 8007492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007496:	461a      	mov	r2, r3
 8007498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800749c:	6093      	str	r3, [r2, #8]
}
 800749e:	e351      	b.n	8007b44 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d150      	bne.n	8007558 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	212c      	movs	r1, #44	; 0x2c
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	4413      	add	r3, r2
 80074c2:	335c      	adds	r3, #92	; 0x5c
 80074c4:	2200      	movs	r2, #0
 80074c6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074da:	2b40      	cmp	r3, #64	; 0x40
 80074dc:	d111      	bne.n	8007502 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	212c      	movs	r1, #44	; 0x2c
 80074e4:	fb01 f303 	mul.w	r3, r1, r3
 80074e8:	4413      	add	r3, r2
 80074ea:	333d      	adds	r3, #61	; 0x3d
 80074ec:	2201      	movs	r2, #1
 80074ee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074fc:	461a      	mov	r2, r3
 80074fe:	2340      	movs	r3, #64	; 0x40
 8007500:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	4413      	add	r3, r2
 800750a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	0151      	lsls	r1, r2, #5
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	440a      	add	r2, r1
 8007518:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800751c:	f043 0302 	orr.w	r3, r3, #2
 8007520:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	b2d2      	uxtb	r2, r2
 800752a:	4611      	mov	r1, r2
 800752c:	4618      	mov	r0, r3
 800752e:	f002 ff84 	bl	800a43a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	4413      	add	r3, r2
 800753a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800753e:	461a      	mov	r2, r3
 8007540:	2301      	movs	r3, #1
 8007542:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	212c      	movs	r1, #44	; 0x2c
 800754a:	fb01 f303 	mul.w	r3, r1, r3
 800754e:	4413      	add	r3, r2
 8007550:	3361      	adds	r3, #97	; 0x61
 8007552:	2201      	movs	r2, #1
 8007554:	701a      	strb	r2, [r3, #0]
}
 8007556:	e2f5      	b.n	8007b44 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	4413      	add	r3, r2
 8007560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756a:	2b40      	cmp	r3, #64	; 0x40
 800756c:	d13c      	bne.n	80075e8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	212c      	movs	r1, #44	; 0x2c
 8007574:	fb01 f303 	mul.w	r3, r1, r3
 8007578:	4413      	add	r3, r2
 800757a:	3361      	adds	r3, #97	; 0x61
 800757c:	2204      	movs	r2, #4
 800757e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	212c      	movs	r1, #44	; 0x2c
 8007586:	fb01 f303 	mul.w	r3, r1, r3
 800758a:	4413      	add	r3, r2
 800758c:	333d      	adds	r3, #61	; 0x3d
 800758e:	2201      	movs	r2, #1
 8007590:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	212c      	movs	r1, #44	; 0x2c
 8007598:	fb01 f303 	mul.w	r3, r1, r3
 800759c:	4413      	add	r3, r2
 800759e:	335c      	adds	r3, #92	; 0x5c
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	0151      	lsls	r1, r2, #5
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	440a      	add	r2, r1
 80075ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075be:	f043 0302 	orr.w	r3, r3, #2
 80075c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	b2d2      	uxtb	r2, r2
 80075cc:	4611      	mov	r1, r2
 80075ce:	4618      	mov	r0, r3
 80075d0:	f002 ff33 	bl	800a43a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075e0:	461a      	mov	r2, r3
 80075e2:	2340      	movs	r3, #64	; 0x40
 80075e4:	6093      	str	r3, [r2, #8]
}
 80075e6:	e2ad      	b.n	8007b44 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f003 0308 	and.w	r3, r3, #8
 80075fa:	2b08      	cmp	r3, #8
 80075fc:	d12a      	bne.n	8007654 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	015a      	lsls	r2, r3, #5
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	4413      	add	r3, r2
 8007606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800760a:	461a      	mov	r2, r3
 800760c:	2308      	movs	r3, #8
 800760e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	4413      	add	r3, r2
 8007618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	0151      	lsls	r1, r2, #5
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	440a      	add	r2, r1
 8007626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800762a:	f043 0302 	orr.w	r3, r3, #2
 800762e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	4611      	mov	r1, r2
 800763a:	4618      	mov	r0, r3
 800763c:	f002 fefd 	bl	800a43a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	212c      	movs	r1, #44	; 0x2c
 8007646:	fb01 f303 	mul.w	r3, r1, r3
 800764a:	4413      	add	r3, r2
 800764c:	3361      	adds	r3, #97	; 0x61
 800764e:	2205      	movs	r2, #5
 8007650:	701a      	strb	r2, [r3, #0]
}
 8007652:	e277      	b.n	8007b44 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	4413      	add	r3, r2
 800765c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f003 0310 	and.w	r3, r3, #16
 8007666:	2b10      	cmp	r3, #16
 8007668:	d150      	bne.n	800770c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	212c      	movs	r1, #44	; 0x2c
 8007670:	fb01 f303 	mul.w	r3, r1, r3
 8007674:	4413      	add	r3, r2
 8007676:	335c      	adds	r3, #92	; 0x5c
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	212c      	movs	r1, #44	; 0x2c
 8007682:	fb01 f303 	mul.w	r3, r1, r3
 8007686:	4413      	add	r3, r2
 8007688:	3361      	adds	r3, #97	; 0x61
 800768a:	2203      	movs	r2, #3
 800768c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	212c      	movs	r1, #44	; 0x2c
 8007694:	fb01 f303 	mul.w	r3, r1, r3
 8007698:	4413      	add	r3, r2
 800769a:	333d      	adds	r3, #61	; 0x3d
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d112      	bne.n	80076c8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	212c      	movs	r1, #44	; 0x2c
 80076a8:	fb01 f303 	mul.w	r3, r1, r3
 80076ac:	4413      	add	r3, r2
 80076ae:	333c      	adds	r3, #60	; 0x3c
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d108      	bne.n	80076c8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	212c      	movs	r1, #44	; 0x2c
 80076bc:	fb01 f303 	mul.w	r3, r1, r3
 80076c0:	4413      	add	r3, r2
 80076c2:	333d      	adds	r3, #61	; 0x3d
 80076c4:	2201      	movs	r2, #1
 80076c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	0151      	lsls	r1, r2, #5
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	440a      	add	r2, r1
 80076de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076e2:	f043 0302 	orr.w	r3, r3, #2
 80076e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	4611      	mov	r1, r2
 80076f2:	4618      	mov	r0, r3
 80076f4:	f002 fea1 	bl	800a43a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007704:	461a      	mov	r2, r3
 8007706:	2310      	movs	r3, #16
 8007708:	6093      	str	r3, [r2, #8]
}
 800770a:	e21b      	b.n	8007b44 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	4413      	add	r3, r2
 8007714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800771e:	2b80      	cmp	r3, #128	; 0x80
 8007720:	d174      	bne.n	800780c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d121      	bne.n	800776e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	212c      	movs	r1, #44	; 0x2c
 8007730:	fb01 f303 	mul.w	r3, r1, r3
 8007734:	4413      	add	r3, r2
 8007736:	3361      	adds	r3, #97	; 0x61
 8007738:	2206      	movs	r2, #6
 800773a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	4413      	add	r3, r2
 8007744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	0151      	lsls	r1, r2, #5
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	440a      	add	r2, r1
 8007752:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007756:	f043 0302 	orr.w	r3, r3, #2
 800775a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	b2d2      	uxtb	r2, r2
 8007764:	4611      	mov	r1, r2
 8007766:	4618      	mov	r0, r3
 8007768:	f002 fe67 	bl	800a43a <USB_HC_Halt>
 800776c:	e044      	b.n	80077f8 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	212c      	movs	r1, #44	; 0x2c
 8007774:	fb01 f303 	mul.w	r3, r1, r3
 8007778:	4413      	add	r3, r2
 800777a:	335c      	adds	r3, #92	; 0x5c
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	1c5a      	adds	r2, r3, #1
 8007780:	6879      	ldr	r1, [r7, #4]
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	202c      	movs	r0, #44	; 0x2c
 8007786:	fb00 f303 	mul.w	r3, r0, r3
 800778a:	440b      	add	r3, r1
 800778c:	335c      	adds	r3, #92	; 0x5c
 800778e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	212c      	movs	r1, #44	; 0x2c
 8007796:	fb01 f303 	mul.w	r3, r1, r3
 800779a:	4413      	add	r3, r2
 800779c:	335c      	adds	r3, #92	; 0x5c
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d920      	bls.n	80077e6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	212c      	movs	r1, #44	; 0x2c
 80077aa:	fb01 f303 	mul.w	r3, r1, r3
 80077ae:	4413      	add	r3, r2
 80077b0:	335c      	adds	r3, #92	; 0x5c
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	212c      	movs	r1, #44	; 0x2c
 80077bc:	fb01 f303 	mul.w	r3, r1, r3
 80077c0:	4413      	add	r3, r2
 80077c2:	3360      	adds	r3, #96	; 0x60
 80077c4:	2204      	movs	r2, #4
 80077c6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	b2d9      	uxtb	r1, r3
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	202c      	movs	r0, #44	; 0x2c
 80077d2:	fb00 f303 	mul.w	r3, r0, r3
 80077d6:	4413      	add	r3, r2
 80077d8:	3360      	adds	r3, #96	; 0x60
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	461a      	mov	r2, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f011 fcf0 	bl	80191c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80077e4:	e008      	b.n	80077f8 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	212c      	movs	r1, #44	; 0x2c
 80077ec:	fb01 f303 	mul.w	r3, r1, r3
 80077f0:	4413      	add	r3, r2
 80077f2:	3360      	adds	r3, #96	; 0x60
 80077f4:	2202      	movs	r2, #2
 80077f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007804:	461a      	mov	r2, r3
 8007806:	2380      	movs	r3, #128	; 0x80
 8007808:	6093      	str	r3, [r2, #8]
}
 800780a:	e19b      	b.n	8007b44 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	015a      	lsls	r2, r3, #5
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	4413      	add	r3, r2
 8007814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800781e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007822:	d134      	bne.n	800788e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	4413      	add	r3, r2
 800782c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	0151      	lsls	r1, r2, #5
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	440a      	add	r2, r1
 800783a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800783e:	f043 0302 	orr.w	r3, r3, #2
 8007842:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	b2d2      	uxtb	r2, r2
 800784c:	4611      	mov	r1, r2
 800784e:	4618      	mov	r0, r3
 8007850:	f002 fdf3 	bl	800a43a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	4413      	add	r3, r2
 800785c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007860:	461a      	mov	r2, r3
 8007862:	2310      	movs	r3, #16
 8007864:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	4413      	add	r3, r2
 800786e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007872:	461a      	mov	r2, r3
 8007874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007878:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	212c      	movs	r1, #44	; 0x2c
 8007880:	fb01 f303 	mul.w	r3, r1, r3
 8007884:	4413      	add	r3, r2
 8007886:	3361      	adds	r3, #97	; 0x61
 8007888:	2208      	movs	r2, #8
 800788a:	701a      	strb	r2, [r3, #0]
}
 800788c:	e15a      	b.n	8007b44 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	4413      	add	r3, r2
 8007896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	f040 814f 	bne.w	8007b44 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	015a      	lsls	r2, r3, #5
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	4413      	add	r3, r2
 80078ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	0151      	lsls	r1, r2, #5
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	440a      	add	r2, r1
 80078bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078c0:	f023 0302 	bic.w	r3, r3, #2
 80078c4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	212c      	movs	r1, #44	; 0x2c
 80078cc:	fb01 f303 	mul.w	r3, r1, r3
 80078d0:	4413      	add	r3, r2
 80078d2:	3361      	adds	r3, #97	; 0x61
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d17d      	bne.n	80079d6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	212c      	movs	r1, #44	; 0x2c
 80078e0:	fb01 f303 	mul.w	r3, r1, r3
 80078e4:	4413      	add	r3, r2
 80078e6:	3360      	adds	r3, #96	; 0x60
 80078e8:	2201      	movs	r2, #1
 80078ea:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	212c      	movs	r1, #44	; 0x2c
 80078f2:	fb01 f303 	mul.w	r3, r1, r3
 80078f6:	4413      	add	r3, r2
 80078f8:	333f      	adds	r3, #63	; 0x3f
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d00a      	beq.n	8007916 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	212c      	movs	r1, #44	; 0x2c
 8007906:	fb01 f303 	mul.w	r3, r1, r3
 800790a:	4413      	add	r3, r2
 800790c:	333f      	adds	r3, #63	; 0x3f
 800790e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007910:	2b03      	cmp	r3, #3
 8007912:	f040 8100 	bne.w	8007b16 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d113      	bne.n	8007946 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	212c      	movs	r1, #44	; 0x2c
 8007924:	fb01 f303 	mul.w	r3, r1, r3
 8007928:	4413      	add	r3, r2
 800792a:	3355      	adds	r3, #85	; 0x55
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	f083 0301 	eor.w	r3, r3, #1
 8007932:	b2d8      	uxtb	r0, r3
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	212c      	movs	r1, #44	; 0x2c
 800793a:	fb01 f303 	mul.w	r3, r1, r3
 800793e:	4413      	add	r3, r2
 8007940:	3355      	adds	r3, #85	; 0x55
 8007942:	4602      	mov	r2, r0
 8007944:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	2b01      	cmp	r3, #1
 800794c:	f040 80e3 	bne.w	8007b16 <HCD_HC_OUT_IRQHandler+0x7cc>
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	212c      	movs	r1, #44	; 0x2c
 8007956:	fb01 f303 	mul.w	r3, r1, r3
 800795a:	4413      	add	r3, r2
 800795c:	334c      	adds	r3, #76	; 0x4c
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 80d8 	beq.w	8007b16 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	212c      	movs	r1, #44	; 0x2c
 800796c:	fb01 f303 	mul.w	r3, r1, r3
 8007970:	4413      	add	r3, r2
 8007972:	334c      	adds	r3, #76	; 0x4c
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6879      	ldr	r1, [r7, #4]
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	202c      	movs	r0, #44	; 0x2c
 800797c:	fb00 f202 	mul.w	r2, r0, r2
 8007980:	440a      	add	r2, r1
 8007982:	3240      	adds	r2, #64	; 0x40
 8007984:	8812      	ldrh	r2, [r2, #0]
 8007986:	4413      	add	r3, r2
 8007988:	3b01      	subs	r3, #1
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	202c      	movs	r0, #44	; 0x2c
 8007990:	fb00 f202 	mul.w	r2, r0, r2
 8007994:	440a      	add	r2, r1
 8007996:	3240      	adds	r2, #64	; 0x40
 8007998:	8812      	ldrh	r2, [r2, #0]
 800799a:	fbb3 f3f2 	udiv	r3, r3, r2
 800799e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 80b5 	beq.w	8007b16 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	212c      	movs	r1, #44	; 0x2c
 80079b2:	fb01 f303 	mul.w	r3, r1, r3
 80079b6:	4413      	add	r3, r2
 80079b8:	3355      	adds	r3, #85	; 0x55
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	f083 0301 	eor.w	r3, r3, #1
 80079c0:	b2d8      	uxtb	r0, r3
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	212c      	movs	r1, #44	; 0x2c
 80079c8:	fb01 f303 	mul.w	r3, r1, r3
 80079cc:	4413      	add	r3, r2
 80079ce:	3355      	adds	r3, #85	; 0x55
 80079d0:	4602      	mov	r2, r0
 80079d2:	701a      	strb	r2, [r3, #0]
 80079d4:	e09f      	b.n	8007b16 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	212c      	movs	r1, #44	; 0x2c
 80079dc:	fb01 f303 	mul.w	r3, r1, r3
 80079e0:	4413      	add	r3, r2
 80079e2:	3361      	adds	r3, #97	; 0x61
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d109      	bne.n	80079fe <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	212c      	movs	r1, #44	; 0x2c
 80079f0:	fb01 f303 	mul.w	r3, r1, r3
 80079f4:	4413      	add	r3, r2
 80079f6:	3360      	adds	r3, #96	; 0x60
 80079f8:	2202      	movs	r2, #2
 80079fa:	701a      	strb	r2, [r3, #0]
 80079fc:	e08b      	b.n	8007b16 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	212c      	movs	r1, #44	; 0x2c
 8007a04:	fb01 f303 	mul.w	r3, r1, r3
 8007a08:	4413      	add	r3, r2
 8007a0a:	3361      	adds	r3, #97	; 0x61
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	2b04      	cmp	r3, #4
 8007a10:	d109      	bne.n	8007a26 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	212c      	movs	r1, #44	; 0x2c
 8007a18:	fb01 f303 	mul.w	r3, r1, r3
 8007a1c:	4413      	add	r3, r2
 8007a1e:	3360      	adds	r3, #96	; 0x60
 8007a20:	2202      	movs	r2, #2
 8007a22:	701a      	strb	r2, [r3, #0]
 8007a24:	e077      	b.n	8007b16 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	212c      	movs	r1, #44	; 0x2c
 8007a2c:	fb01 f303 	mul.w	r3, r1, r3
 8007a30:	4413      	add	r3, r2
 8007a32:	3361      	adds	r3, #97	; 0x61
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b05      	cmp	r3, #5
 8007a38:	d109      	bne.n	8007a4e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	212c      	movs	r1, #44	; 0x2c
 8007a40:	fb01 f303 	mul.w	r3, r1, r3
 8007a44:	4413      	add	r3, r2
 8007a46:	3360      	adds	r3, #96	; 0x60
 8007a48:	2205      	movs	r2, #5
 8007a4a:	701a      	strb	r2, [r3, #0]
 8007a4c:	e063      	b.n	8007b16 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	212c      	movs	r1, #44	; 0x2c
 8007a54:	fb01 f303 	mul.w	r3, r1, r3
 8007a58:	4413      	add	r3, r2
 8007a5a:	3361      	adds	r3, #97	; 0x61
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	2b06      	cmp	r3, #6
 8007a60:	d009      	beq.n	8007a76 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	212c      	movs	r1, #44	; 0x2c
 8007a68:	fb01 f303 	mul.w	r3, r1, r3
 8007a6c:	4413      	add	r3, r2
 8007a6e:	3361      	adds	r3, #97	; 0x61
 8007a70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007a72:	2b08      	cmp	r3, #8
 8007a74:	d14f      	bne.n	8007b16 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	212c      	movs	r1, #44	; 0x2c
 8007a7c:	fb01 f303 	mul.w	r3, r1, r3
 8007a80:	4413      	add	r3, r2
 8007a82:	335c      	adds	r3, #92	; 0x5c
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	202c      	movs	r0, #44	; 0x2c
 8007a8e:	fb00 f303 	mul.w	r3, r0, r3
 8007a92:	440b      	add	r3, r1
 8007a94:	335c      	adds	r3, #92	; 0x5c
 8007a96:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	212c      	movs	r1, #44	; 0x2c
 8007a9e:	fb01 f303 	mul.w	r3, r1, r3
 8007aa2:	4413      	add	r3, r2
 8007aa4:	335c      	adds	r3, #92	; 0x5c
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d912      	bls.n	8007ad2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	212c      	movs	r1, #44	; 0x2c
 8007ab2:	fb01 f303 	mul.w	r3, r1, r3
 8007ab6:	4413      	add	r3, r2
 8007ab8:	335c      	adds	r3, #92	; 0x5c
 8007aba:	2200      	movs	r2, #0
 8007abc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	212c      	movs	r1, #44	; 0x2c
 8007ac4:	fb01 f303 	mul.w	r3, r1, r3
 8007ac8:	4413      	add	r3, r2
 8007aca:	3360      	adds	r3, #96	; 0x60
 8007acc:	2204      	movs	r2, #4
 8007ace:	701a      	strb	r2, [r3, #0]
 8007ad0:	e021      	b.n	8007b16 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	212c      	movs	r1, #44	; 0x2c
 8007ad8:	fb01 f303 	mul.w	r3, r1, r3
 8007adc:	4413      	add	r3, r2
 8007ade:	3360      	adds	r3, #96	; 0x60
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	015a      	lsls	r2, r3, #5
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007afa:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b02:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b10:	461a      	mov	r2, r3
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b22:	461a      	mov	r2, r3
 8007b24:	2302      	movs	r3, #2
 8007b26:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	b2d9      	uxtb	r1, r3
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	202c      	movs	r0, #44	; 0x2c
 8007b32:	fb00 f303 	mul.w	r3, r0, r3
 8007b36:	4413      	add	r3, r2
 8007b38:	3360      	adds	r3, #96	; 0x60
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f011 fb40 	bl	80191c4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007b44:	bf00      	nop
 8007b46:	3720      	adds	r7, #32
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b08a      	sub	sp, #40	; 0x28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	f003 030f 	and.w	r3, r3, #15
 8007b6c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	0c5b      	lsrs	r3, r3, #17
 8007b72:	f003 030f 	and.w	r3, r3, #15
 8007b76:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	091b      	lsrs	r3, r3, #4
 8007b7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b80:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d004      	beq.n	8007b92 <HCD_RXQLVL_IRQHandler+0x46>
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	2b05      	cmp	r3, #5
 8007b8c:	f000 80a9 	beq.w	8007ce2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007b90:	e0aa      	b.n	8007ce8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 80a6 	beq.w	8007ce6 <HCD_RXQLVL_IRQHandler+0x19a>
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	212c      	movs	r1, #44	; 0x2c
 8007ba0:	fb01 f303 	mul.w	r3, r1, r3
 8007ba4:	4413      	add	r3, r2
 8007ba6:	3344      	adds	r3, #68	; 0x44
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 809b 	beq.w	8007ce6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	212c      	movs	r1, #44	; 0x2c
 8007bb6:	fb01 f303 	mul.w	r3, r1, r3
 8007bba:	4413      	add	r3, r2
 8007bbc:	3350      	adds	r3, #80	; 0x50
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	441a      	add	r2, r3
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	202c      	movs	r0, #44	; 0x2c
 8007bca:	fb00 f303 	mul.w	r3, r0, r3
 8007bce:	440b      	add	r3, r1
 8007bd0:	334c      	adds	r3, #76	; 0x4c
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d87a      	bhi.n	8007cce <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6818      	ldr	r0, [r3, #0]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	212c      	movs	r1, #44	; 0x2c
 8007be2:	fb01 f303 	mul.w	r3, r1, r3
 8007be6:	4413      	add	r3, r2
 8007be8:	3344      	adds	r3, #68	; 0x44
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	b292      	uxth	r2, r2
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	f001 ff9b 	bl	8009b2c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	212c      	movs	r1, #44	; 0x2c
 8007bfc:	fb01 f303 	mul.w	r3, r1, r3
 8007c00:	4413      	add	r3, r2
 8007c02:	3344      	adds	r3, #68	; 0x44
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	441a      	add	r2, r3
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	202c      	movs	r0, #44	; 0x2c
 8007c10:	fb00 f303 	mul.w	r3, r0, r3
 8007c14:	440b      	add	r3, r1
 8007c16:	3344      	adds	r3, #68	; 0x44
 8007c18:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	212c      	movs	r1, #44	; 0x2c
 8007c20:	fb01 f303 	mul.w	r3, r1, r3
 8007c24:	4413      	add	r3, r2
 8007c26:	3350      	adds	r3, #80	; 0x50
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	441a      	add	r2, r3
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	202c      	movs	r0, #44	; 0x2c
 8007c34:	fb00 f303 	mul.w	r3, r0, r3
 8007c38:	440b      	add	r3, r1
 8007c3a:	3350      	adds	r3, #80	; 0x50
 8007c3c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	0cdb      	lsrs	r3, r3, #19
 8007c4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c52:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	212c      	movs	r1, #44	; 0x2c
 8007c5a:	fb01 f303 	mul.w	r3, r1, r3
 8007c5e:	4413      	add	r3, r2
 8007c60:	3340      	adds	r3, #64	; 0x40
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	461a      	mov	r2, r3
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d13c      	bne.n	8007ce6 <HCD_RXQLVL_IRQHandler+0x19a>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d039      	beq.n	8007ce6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c88:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c90:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	212c      	movs	r1, #44	; 0x2c
 8007caa:	fb01 f303 	mul.w	r3, r1, r3
 8007cae:	4413      	add	r3, r2
 8007cb0:	3354      	adds	r3, #84	; 0x54
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	f083 0301 	eor.w	r3, r3, #1
 8007cb8:	b2d8      	uxtb	r0, r3
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	212c      	movs	r1, #44	; 0x2c
 8007cc0:	fb01 f303 	mul.w	r3, r1, r3
 8007cc4:	4413      	add	r3, r2
 8007cc6:	3354      	adds	r3, #84	; 0x54
 8007cc8:	4602      	mov	r2, r0
 8007cca:	701a      	strb	r2, [r3, #0]
      break;
 8007ccc:	e00b      	b.n	8007ce6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	212c      	movs	r1, #44	; 0x2c
 8007cd4:	fb01 f303 	mul.w	r3, r1, r3
 8007cd8:	4413      	add	r3, r2
 8007cda:	3360      	adds	r3, #96	; 0x60
 8007cdc:	2204      	movs	r2, #4
 8007cde:	701a      	strb	r2, [r3, #0]
      break;
 8007ce0:	e001      	b.n	8007ce6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007ce2:	bf00      	nop
 8007ce4:	e000      	b.n	8007ce8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007ce6:	bf00      	nop
  }
}
 8007ce8:	bf00      	nop
 8007cea:	3728      	adds	r7, #40	; 0x28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007d1c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f003 0302 	and.w	r3, r3, #2
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d10b      	bne.n	8007d40 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d102      	bne.n	8007d38 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f011 fa2a 	bl	801918c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f043 0302 	orr.w	r3, r3, #2
 8007d3e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f003 0308 	and.w	r3, r3, #8
 8007d46:	2b08      	cmp	r3, #8
 8007d48:	d132      	bne.n	8007db0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	f043 0308 	orr.w	r3, r3, #8
 8007d50:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f003 0304 	and.w	r3, r3, #4
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	d126      	bne.n	8007daa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d113      	bne.n	8007d8c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007d6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d6e:	d106      	bne.n	8007d7e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2102      	movs	r1, #2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f002 f838 	bl	8009dec <USB_InitFSLSPClkSel>
 8007d7c:	e011      	b.n	8007da2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2101      	movs	r1, #1
 8007d84:	4618      	mov	r0, r3
 8007d86:	f002 f831 	bl	8009dec <USB_InitFSLSPClkSel>
 8007d8a:	e00a      	b.n	8007da2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d106      	bne.n	8007da2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007da0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f011 fa1c 	bl	80191e0 <HAL_HCD_PortEnabled_Callback>
 8007da8:	e002      	b.n	8007db0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f011 fa26 	bl	80191fc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f003 0320 	and.w	r3, r3, #32
 8007db6:	2b20      	cmp	r3, #32
 8007db8:	d103      	bne.n	8007dc2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f043 0320 	orr.w	r3, r3, #32
 8007dc0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007dc8:	461a      	mov	r2, r3
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	6013      	str	r3, [r2, #0]
}
 8007dce:	bf00      	nop
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e264      	b.n	80082b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d075      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007df6:	4ba3      	ldr	r3, [pc, #652]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f003 030c 	and.w	r3, r3, #12
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	d00c      	beq.n	8007e1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e02:	4ba0      	ldr	r3, [pc, #640]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e0a:	2b08      	cmp	r3, #8
 8007e0c:	d112      	bne.n	8007e34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e0e:	4b9d      	ldr	r3, [pc, #628]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e1a:	d10b      	bne.n	8007e34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e1c:	4b99      	ldr	r3, [pc, #612]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d05b      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x108>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d157      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e23f      	b.n	80082b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e3c:	d106      	bne.n	8007e4c <HAL_RCC_OscConfig+0x74>
 8007e3e:	4b91      	ldr	r3, [pc, #580]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a90      	ldr	r2, [pc, #576]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	e01d      	b.n	8007e88 <HAL_RCC_OscConfig+0xb0>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e54:	d10c      	bne.n	8007e70 <HAL_RCC_OscConfig+0x98>
 8007e56:	4b8b      	ldr	r3, [pc, #556]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a8a      	ldr	r2, [pc, #552]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	4b88      	ldr	r3, [pc, #544]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a87      	ldr	r2, [pc, #540]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e6c:	6013      	str	r3, [r2, #0]
 8007e6e:	e00b      	b.n	8007e88 <HAL_RCC_OscConfig+0xb0>
 8007e70:	4b84      	ldr	r3, [pc, #528]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a83      	ldr	r2, [pc, #524]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	4b81      	ldr	r3, [pc, #516]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a80      	ldr	r2, [pc, #512]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d013      	beq.n	8007eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e90:	f7fa fc90 	bl	80027b4 <HAL_GetTick>
 8007e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e96:	e008      	b.n	8007eaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e98:	f7fa fc8c 	bl	80027b4 <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b64      	cmp	r3, #100	; 0x64
 8007ea4:	d901      	bls.n	8007eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e204      	b.n	80082b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eaa:	4b76      	ldr	r3, [pc, #472]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0f0      	beq.n	8007e98 <HAL_RCC_OscConfig+0xc0>
 8007eb6:	e014      	b.n	8007ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eb8:	f7fa fc7c 	bl	80027b4 <HAL_GetTick>
 8007ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ec0:	f7fa fc78 	bl	80027b4 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b64      	cmp	r3, #100	; 0x64
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e1f0      	b.n	80082b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ed2:	4b6c      	ldr	r3, [pc, #432]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1f0      	bne.n	8007ec0 <HAL_RCC_OscConfig+0xe8>
 8007ede:	e000      	b.n	8007ee2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d063      	beq.n	8007fb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007eee:	4b65      	ldr	r3, [pc, #404]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f003 030c 	and.w	r3, r3, #12
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00b      	beq.n	8007f12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007efa:	4b62      	ldr	r3, [pc, #392]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f02:	2b08      	cmp	r3, #8
 8007f04:	d11c      	bne.n	8007f40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f06:	4b5f      	ldr	r3, [pc, #380]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d116      	bne.n	8007f40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f12:	4b5c      	ldr	r3, [pc, #368]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d005      	beq.n	8007f2a <HAL_RCC_OscConfig+0x152>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d001      	beq.n	8007f2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e1c4      	b.n	80082b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f2a:	4b56      	ldr	r3, [pc, #344]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	00db      	lsls	r3, r3, #3
 8007f38:	4952      	ldr	r1, [pc, #328]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f3e:	e03a      	b.n	8007fb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d020      	beq.n	8007f8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f48:	4b4f      	ldr	r3, [pc, #316]	; (8008088 <HAL_RCC_OscConfig+0x2b0>)
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f4e:	f7fa fc31 	bl	80027b4 <HAL_GetTick>
 8007f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f54:	e008      	b.n	8007f68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f56:	f7fa fc2d 	bl	80027b4 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d901      	bls.n	8007f68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e1a5      	b.n	80082b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f68:	4b46      	ldr	r3, [pc, #280]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0302 	and.w	r3, r3, #2
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d0f0      	beq.n	8007f56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f74:	4b43      	ldr	r3, [pc, #268]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	00db      	lsls	r3, r3, #3
 8007f82:	4940      	ldr	r1, [pc, #256]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	600b      	str	r3, [r1, #0]
 8007f88:	e015      	b.n	8007fb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f8a:	4b3f      	ldr	r3, [pc, #252]	; (8008088 <HAL_RCC_OscConfig+0x2b0>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f90:	f7fa fc10 	bl	80027b4 <HAL_GetTick>
 8007f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f96:	e008      	b.n	8007faa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f98:	f7fa fc0c 	bl	80027b4 <HAL_GetTick>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d901      	bls.n	8007faa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e184      	b.n	80082b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007faa:	4b36      	ldr	r3, [pc, #216]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1f0      	bne.n	8007f98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d030      	beq.n	8008024 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d016      	beq.n	8007ff8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fca:	4b30      	ldr	r3, [pc, #192]	; (800808c <HAL_RCC_OscConfig+0x2b4>)
 8007fcc:	2201      	movs	r2, #1
 8007fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fd0:	f7fa fbf0 	bl	80027b4 <HAL_GetTick>
 8007fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fd6:	e008      	b.n	8007fea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fd8:	f7fa fbec 	bl	80027b4 <HAL_GetTick>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d901      	bls.n	8007fea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e164      	b.n	80082b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fea:	4b26      	ldr	r3, [pc, #152]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8007fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d0f0      	beq.n	8007fd8 <HAL_RCC_OscConfig+0x200>
 8007ff6:	e015      	b.n	8008024 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ff8:	4b24      	ldr	r3, [pc, #144]	; (800808c <HAL_RCC_OscConfig+0x2b4>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ffe:	f7fa fbd9 	bl	80027b4 <HAL_GetTick>
 8008002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008004:	e008      	b.n	8008018 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008006:	f7fa fbd5 	bl	80027b4 <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	2b02      	cmp	r3, #2
 8008012:	d901      	bls.n	8008018 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e14d      	b.n	80082b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008018:	4b1a      	ldr	r3, [pc, #104]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 800801a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1f0      	bne.n	8008006 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 80a0 	beq.w	8008172 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008032:	2300      	movs	r3, #0
 8008034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008036:	4b13      	ldr	r3, [pc, #76]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10f      	bne.n	8008062 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008042:	2300      	movs	r3, #0
 8008044:	60bb      	str	r3, [r7, #8]
 8008046:	4b0f      	ldr	r3, [pc, #60]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8008048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804a:	4a0e      	ldr	r2, [pc, #56]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 800804c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008050:	6413      	str	r3, [r2, #64]	; 0x40
 8008052:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <HAL_RCC_OscConfig+0x2ac>)
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800805a:	60bb      	str	r3, [r7, #8]
 800805c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800805e:	2301      	movs	r3, #1
 8008060:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008062:	4b0b      	ldr	r3, [pc, #44]	; (8008090 <HAL_RCC_OscConfig+0x2b8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806a:	2b00      	cmp	r3, #0
 800806c:	d121      	bne.n	80080b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800806e:	4b08      	ldr	r3, [pc, #32]	; (8008090 <HAL_RCC_OscConfig+0x2b8>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a07      	ldr	r2, [pc, #28]	; (8008090 <HAL_RCC_OscConfig+0x2b8>)
 8008074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800807a:	f7fa fb9b 	bl	80027b4 <HAL_GetTick>
 800807e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008080:	e011      	b.n	80080a6 <HAL_RCC_OscConfig+0x2ce>
 8008082:	bf00      	nop
 8008084:	40023800 	.word	0x40023800
 8008088:	42470000 	.word	0x42470000
 800808c:	42470e80 	.word	0x42470e80
 8008090:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008094:	f7fa fb8e 	bl	80027b4 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d901      	bls.n	80080a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e106      	b.n	80082b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080a6:	4b85      	ldr	r3, [pc, #532]	; (80082bc <HAL_RCC_OscConfig+0x4e4>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0f0      	beq.n	8008094 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d106      	bne.n	80080c8 <HAL_RCC_OscConfig+0x2f0>
 80080ba:	4b81      	ldr	r3, [pc, #516]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 80080bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080be:	4a80      	ldr	r2, [pc, #512]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 80080c0:	f043 0301 	orr.w	r3, r3, #1
 80080c4:	6713      	str	r3, [r2, #112]	; 0x70
 80080c6:	e01c      	b.n	8008102 <HAL_RCC_OscConfig+0x32a>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	2b05      	cmp	r3, #5
 80080ce:	d10c      	bne.n	80080ea <HAL_RCC_OscConfig+0x312>
 80080d0:	4b7b      	ldr	r3, [pc, #492]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 80080d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d4:	4a7a      	ldr	r2, [pc, #488]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 80080d6:	f043 0304 	orr.w	r3, r3, #4
 80080da:	6713      	str	r3, [r2, #112]	; 0x70
 80080dc:	4b78      	ldr	r3, [pc, #480]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 80080de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e0:	4a77      	ldr	r2, [pc, #476]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 80080e2:	f043 0301 	orr.w	r3, r3, #1
 80080e6:	6713      	str	r3, [r2, #112]	; 0x70
 80080e8:	e00b      	b.n	8008102 <HAL_RCC_OscConfig+0x32a>
 80080ea:	4b75      	ldr	r3, [pc, #468]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 80080ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ee:	4a74      	ldr	r2, [pc, #464]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 80080f0:	f023 0301 	bic.w	r3, r3, #1
 80080f4:	6713      	str	r3, [r2, #112]	; 0x70
 80080f6:	4b72      	ldr	r3, [pc, #456]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 80080f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fa:	4a71      	ldr	r2, [pc, #452]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 80080fc:	f023 0304 	bic.w	r3, r3, #4
 8008100:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d015      	beq.n	8008136 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800810a:	f7fa fb53 	bl	80027b4 <HAL_GetTick>
 800810e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008110:	e00a      	b.n	8008128 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008112:	f7fa fb4f 	bl	80027b4 <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008120:	4293      	cmp	r3, r2
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e0c5      	b.n	80082b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008128:	4b65      	ldr	r3, [pc, #404]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 800812a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812c:	f003 0302 	and.w	r3, r3, #2
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0ee      	beq.n	8008112 <HAL_RCC_OscConfig+0x33a>
 8008134:	e014      	b.n	8008160 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008136:	f7fa fb3d 	bl	80027b4 <HAL_GetTick>
 800813a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800813c:	e00a      	b.n	8008154 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800813e:	f7fa fb39 	bl	80027b4 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	f241 3288 	movw	r2, #5000	; 0x1388
 800814c:	4293      	cmp	r3, r2
 800814e:	d901      	bls.n	8008154 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008150:	2303      	movs	r3, #3
 8008152:	e0af      	b.n	80082b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008154:	4b5a      	ldr	r3, [pc, #360]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 8008156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1ee      	bne.n	800813e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008160:	7dfb      	ldrb	r3, [r7, #23]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d105      	bne.n	8008172 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008166:	4b56      	ldr	r3, [pc, #344]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	4a55      	ldr	r2, [pc, #340]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 800816c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008170:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 809b 	beq.w	80082b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800817c:	4b50      	ldr	r3, [pc, #320]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	f003 030c 	and.w	r3, r3, #12
 8008184:	2b08      	cmp	r3, #8
 8008186:	d05c      	beq.n	8008242 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	2b02      	cmp	r3, #2
 800818e:	d141      	bne.n	8008214 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008190:	4b4c      	ldr	r3, [pc, #304]	; (80082c4 <HAL_RCC_OscConfig+0x4ec>)
 8008192:	2200      	movs	r2, #0
 8008194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008196:	f7fa fb0d 	bl	80027b4 <HAL_GetTick>
 800819a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800819c:	e008      	b.n	80081b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800819e:	f7fa fb09 	bl	80027b4 <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d901      	bls.n	80081b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e081      	b.n	80082b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081b0:	4b43      	ldr	r3, [pc, #268]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1f0      	bne.n	800819e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	69da      	ldr	r2, [r3, #28]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	431a      	orrs	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	019b      	lsls	r3, r3, #6
 80081cc:	431a      	orrs	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d2:	085b      	lsrs	r3, r3, #1
 80081d4:	3b01      	subs	r3, #1
 80081d6:	041b      	lsls	r3, r3, #16
 80081d8:	431a      	orrs	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081de:	061b      	lsls	r3, r3, #24
 80081e0:	4937      	ldr	r1, [pc, #220]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081e6:	4b37      	ldr	r3, [pc, #220]	; (80082c4 <HAL_RCC_OscConfig+0x4ec>)
 80081e8:	2201      	movs	r2, #1
 80081ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081ec:	f7fa fae2 	bl	80027b4 <HAL_GetTick>
 80081f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081f2:	e008      	b.n	8008206 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081f4:	f7fa fade 	bl	80027b4 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d901      	bls.n	8008206 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e056      	b.n	80082b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008206:	4b2e      	ldr	r3, [pc, #184]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d0f0      	beq.n	80081f4 <HAL_RCC_OscConfig+0x41c>
 8008212:	e04e      	b.n	80082b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008214:	4b2b      	ldr	r3, [pc, #172]	; (80082c4 <HAL_RCC_OscConfig+0x4ec>)
 8008216:	2200      	movs	r2, #0
 8008218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800821a:	f7fa facb 	bl	80027b4 <HAL_GetTick>
 800821e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008220:	e008      	b.n	8008234 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008222:	f7fa fac7 	bl	80027b4 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	2b02      	cmp	r3, #2
 800822e:	d901      	bls.n	8008234 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	e03f      	b.n	80082b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008234:	4b22      	ldr	r3, [pc, #136]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1f0      	bne.n	8008222 <HAL_RCC_OscConfig+0x44a>
 8008240:	e037      	b.n	80082b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d101      	bne.n	800824e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e032      	b.n	80082b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800824e:	4b1c      	ldr	r3, [pc, #112]	; (80082c0 <HAL_RCC_OscConfig+0x4e8>)
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d028      	beq.n	80082ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008266:	429a      	cmp	r2, r3
 8008268:	d121      	bne.n	80082ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008274:	429a      	cmp	r2, r3
 8008276:	d11a      	bne.n	80082ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800827e:	4013      	ands	r3, r2
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008284:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008286:	4293      	cmp	r3, r2
 8008288:	d111      	bne.n	80082ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008294:	085b      	lsrs	r3, r3, #1
 8008296:	3b01      	subs	r3, #1
 8008298:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800829a:	429a      	cmp	r2, r3
 800829c:	d107      	bne.n	80082ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d001      	beq.n	80082b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e000      	b.n	80082b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3718      	adds	r7, #24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	40007000 	.word	0x40007000
 80082c0:	40023800 	.word	0x40023800
 80082c4:	42470060 	.word	0x42470060

080082c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e0cc      	b.n	8008476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082dc:	4b68      	ldr	r3, [pc, #416]	; (8008480 <HAL_RCC_ClockConfig+0x1b8>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0307 	and.w	r3, r3, #7
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d90c      	bls.n	8008304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ea:	4b65      	ldr	r3, [pc, #404]	; (8008480 <HAL_RCC_ClockConfig+0x1b8>)
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	b2d2      	uxtb	r2, r2
 80082f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082f2:	4b63      	ldr	r3, [pc, #396]	; (8008480 <HAL_RCC_ClockConfig+0x1b8>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d001      	beq.n	8008304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e0b8      	b.n	8008476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0302 	and.w	r3, r3, #2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d020      	beq.n	8008352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b00      	cmp	r3, #0
 800831a:	d005      	beq.n	8008328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800831c:	4b59      	ldr	r3, [pc, #356]	; (8008484 <HAL_RCC_ClockConfig+0x1bc>)
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	4a58      	ldr	r2, [pc, #352]	; (8008484 <HAL_RCC_ClockConfig+0x1bc>)
 8008322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0308 	and.w	r3, r3, #8
 8008330:	2b00      	cmp	r3, #0
 8008332:	d005      	beq.n	8008340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008334:	4b53      	ldr	r3, [pc, #332]	; (8008484 <HAL_RCC_ClockConfig+0x1bc>)
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	4a52      	ldr	r2, [pc, #328]	; (8008484 <HAL_RCC_ClockConfig+0x1bc>)
 800833a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800833e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008340:	4b50      	ldr	r3, [pc, #320]	; (8008484 <HAL_RCC_ClockConfig+0x1bc>)
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	494d      	ldr	r1, [pc, #308]	; (8008484 <HAL_RCC_ClockConfig+0x1bc>)
 800834e:	4313      	orrs	r3, r2
 8008350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d044      	beq.n	80083e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d107      	bne.n	8008376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008366:	4b47      	ldr	r3, [pc, #284]	; (8008484 <HAL_RCC_ClockConfig+0x1bc>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d119      	bne.n	80083a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e07f      	b.n	8008476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	2b02      	cmp	r3, #2
 800837c:	d003      	beq.n	8008386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008382:	2b03      	cmp	r3, #3
 8008384:	d107      	bne.n	8008396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008386:	4b3f      	ldr	r3, [pc, #252]	; (8008484 <HAL_RCC_ClockConfig+0x1bc>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d109      	bne.n	80083a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e06f      	b.n	8008476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008396:	4b3b      	ldr	r3, [pc, #236]	; (8008484 <HAL_RCC_ClockConfig+0x1bc>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e067      	b.n	8008476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083a6:	4b37      	ldr	r3, [pc, #220]	; (8008484 <HAL_RCC_ClockConfig+0x1bc>)
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f023 0203 	bic.w	r2, r3, #3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	4934      	ldr	r1, [pc, #208]	; (8008484 <HAL_RCC_ClockConfig+0x1bc>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80083b8:	f7fa f9fc 	bl	80027b4 <HAL_GetTick>
 80083bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083be:	e00a      	b.n	80083d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083c0:	f7fa f9f8 	bl	80027b4 <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d901      	bls.n	80083d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e04f      	b.n	8008476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083d6:	4b2b      	ldr	r3, [pc, #172]	; (8008484 <HAL_RCC_ClockConfig+0x1bc>)
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f003 020c 	and.w	r2, r3, #12
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d1eb      	bne.n	80083c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083e8:	4b25      	ldr	r3, [pc, #148]	; (8008480 <HAL_RCC_ClockConfig+0x1b8>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0307 	and.w	r3, r3, #7
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d20c      	bcs.n	8008410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083f6:	4b22      	ldr	r3, [pc, #136]	; (8008480 <HAL_RCC_ClockConfig+0x1b8>)
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	b2d2      	uxtb	r2, r2
 80083fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083fe:	4b20      	ldr	r3, [pc, #128]	; (8008480 <HAL_RCC_ClockConfig+0x1b8>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0307 	and.w	r3, r3, #7
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	429a      	cmp	r2, r3
 800840a:	d001      	beq.n	8008410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e032      	b.n	8008476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0304 	and.w	r3, r3, #4
 8008418:	2b00      	cmp	r3, #0
 800841a:	d008      	beq.n	800842e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800841c:	4b19      	ldr	r3, [pc, #100]	; (8008484 <HAL_RCC_ClockConfig+0x1bc>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	4916      	ldr	r1, [pc, #88]	; (8008484 <HAL_RCC_ClockConfig+0x1bc>)
 800842a:	4313      	orrs	r3, r2
 800842c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0308 	and.w	r3, r3, #8
 8008436:	2b00      	cmp	r3, #0
 8008438:	d009      	beq.n	800844e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800843a:	4b12      	ldr	r3, [pc, #72]	; (8008484 <HAL_RCC_ClockConfig+0x1bc>)
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	00db      	lsls	r3, r3, #3
 8008448:	490e      	ldr	r1, [pc, #56]	; (8008484 <HAL_RCC_ClockConfig+0x1bc>)
 800844a:	4313      	orrs	r3, r2
 800844c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800844e:	f000 f889 	bl	8008564 <HAL_RCC_GetSysClockFreq>
 8008452:	4602      	mov	r2, r0
 8008454:	4b0b      	ldr	r3, [pc, #44]	; (8008484 <HAL_RCC_ClockConfig+0x1bc>)
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	091b      	lsrs	r3, r3, #4
 800845a:	f003 030f 	and.w	r3, r3, #15
 800845e:	490a      	ldr	r1, [pc, #40]	; (8008488 <HAL_RCC_ClockConfig+0x1c0>)
 8008460:	5ccb      	ldrb	r3, [r1, r3]
 8008462:	fa22 f303 	lsr.w	r3, r2, r3
 8008466:	4a09      	ldr	r2, [pc, #36]	; (800848c <HAL_RCC_ClockConfig+0x1c4>)
 8008468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800846a:	4b09      	ldr	r3, [pc, #36]	; (8008490 <HAL_RCC_ClockConfig+0x1c8>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4618      	mov	r0, r3
 8008470:	f7fa f95c 	bl	800272c <HAL_InitTick>

  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	40023c00 	.word	0x40023c00
 8008484:	40023800 	.word	0x40023800
 8008488:	0801f458 	.word	0x0801f458
 800848c:	20000580 	.word	0x20000580
 8008490:	20000584 	.word	0x20000584

08008494 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08c      	sub	sp, #48	; 0x30
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d129      	bne.n	80084fa <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80084a6:	2300      	movs	r3, #0
 80084a8:	61bb      	str	r3, [r7, #24]
 80084aa:	4b2b      	ldr	r3, [pc, #172]	; (8008558 <HAL_RCC_MCOConfig+0xc4>)
 80084ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ae:	4a2a      	ldr	r2, [pc, #168]	; (8008558 <HAL_RCC_MCOConfig+0xc4>)
 80084b0:	f043 0301 	orr.w	r3, r3, #1
 80084b4:	6313      	str	r3, [r2, #48]	; 0x30
 80084b6:	4b28      	ldr	r3, [pc, #160]	; (8008558 <HAL_RCC_MCOConfig+0xc4>)
 80084b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	61bb      	str	r3, [r7, #24]
 80084c0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80084c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084c8:	2302      	movs	r3, #2
 80084ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084cc:	2303      	movs	r3, #3
 80084ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084d0:	2300      	movs	r3, #0
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80084d4:	2300      	movs	r3, #0
 80084d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80084d8:	f107 031c 	add.w	r3, r7, #28
 80084dc:	4619      	mov	r1, r3
 80084de:	481f      	ldr	r0, [pc, #124]	; (800855c <HAL_RCC_MCOConfig+0xc8>)
 80084e0:	f7fd fd3c 	bl	8005f5c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80084e4:	4b1c      	ldr	r3, [pc, #112]	; (8008558 <HAL_RCC_MCOConfig+0xc4>)
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	430b      	orrs	r3, r1
 80084f2:	4919      	ldr	r1, [pc, #100]	; (8008558 <HAL_RCC_MCOConfig+0xc4>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80084f8:	e029      	b.n	800854e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80084fa:	2300      	movs	r3, #0
 80084fc:	617b      	str	r3, [r7, #20]
 80084fe:	4b16      	ldr	r3, [pc, #88]	; (8008558 <HAL_RCC_MCOConfig+0xc4>)
 8008500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008502:	4a15      	ldr	r2, [pc, #84]	; (8008558 <HAL_RCC_MCOConfig+0xc4>)
 8008504:	f043 0304 	orr.w	r3, r3, #4
 8008508:	6313      	str	r3, [r2, #48]	; 0x30
 800850a:	4b13      	ldr	r3, [pc, #76]	; (8008558 <HAL_RCC_MCOConfig+0xc4>)
 800850c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850e:	f003 0304 	and.w	r3, r3, #4
 8008512:	617b      	str	r3, [r7, #20]
 8008514:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800851a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800851c:	2302      	movs	r3, #2
 800851e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008520:	2303      	movs	r3, #3
 8008522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008524:	2300      	movs	r3, #0
 8008526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008528:	2300      	movs	r3, #0
 800852a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800852c:	f107 031c 	add.w	r3, r7, #28
 8008530:	4619      	mov	r1, r3
 8008532:	480b      	ldr	r0, [pc, #44]	; (8008560 <HAL_RCC_MCOConfig+0xcc>)
 8008534:	f7fd fd12 	bl	8005f5c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8008538:	4b07      	ldr	r3, [pc, #28]	; (8008558 <HAL_RCC_MCOConfig+0xc4>)
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	00d9      	lsls	r1, r3, #3
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	430b      	orrs	r3, r1
 8008548:	4903      	ldr	r1, [pc, #12]	; (8008558 <HAL_RCC_MCOConfig+0xc4>)
 800854a:	4313      	orrs	r3, r2
 800854c:	608b      	str	r3, [r1, #8]
}
 800854e:	bf00      	nop
 8008550:	3730      	adds	r7, #48	; 0x30
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	40023800 	.word	0x40023800
 800855c:	40020000 	.word	0x40020000
 8008560:	40020800 	.word	0x40020800

08008564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008564:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800856c:	2300      	movs	r3, #0
 800856e:	607b      	str	r3, [r7, #4]
 8008570:	2300      	movs	r3, #0
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	2300      	movs	r3, #0
 8008576:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008578:	2300      	movs	r3, #0
 800857a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800857c:	4b67      	ldr	r3, [pc, #412]	; (800871c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f003 030c 	and.w	r3, r3, #12
 8008584:	2b08      	cmp	r3, #8
 8008586:	d00d      	beq.n	80085a4 <HAL_RCC_GetSysClockFreq+0x40>
 8008588:	2b08      	cmp	r3, #8
 800858a:	f200 80bd 	bhi.w	8008708 <HAL_RCC_GetSysClockFreq+0x1a4>
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <HAL_RCC_GetSysClockFreq+0x34>
 8008592:	2b04      	cmp	r3, #4
 8008594:	d003      	beq.n	800859e <HAL_RCC_GetSysClockFreq+0x3a>
 8008596:	e0b7      	b.n	8008708 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008598:	4b61      	ldr	r3, [pc, #388]	; (8008720 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800859a:	60bb      	str	r3, [r7, #8]
       break;
 800859c:	e0b7      	b.n	800870e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800859e:	4b61      	ldr	r3, [pc, #388]	; (8008724 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80085a0:	60bb      	str	r3, [r7, #8]
      break;
 80085a2:	e0b4      	b.n	800870e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085a4:	4b5d      	ldr	r3, [pc, #372]	; (800871c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085ae:	4b5b      	ldr	r3, [pc, #364]	; (800871c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d04d      	beq.n	8008656 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085ba:	4b58      	ldr	r3, [pc, #352]	; (800871c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	099b      	lsrs	r3, r3, #6
 80085c0:	461a      	mov	r2, r3
 80085c2:	f04f 0300 	mov.w	r3, #0
 80085c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80085ca:	f04f 0100 	mov.w	r1, #0
 80085ce:	ea02 0800 	and.w	r8, r2, r0
 80085d2:	ea03 0901 	and.w	r9, r3, r1
 80085d6:	4640      	mov	r0, r8
 80085d8:	4649      	mov	r1, r9
 80085da:	f04f 0200 	mov.w	r2, #0
 80085de:	f04f 0300 	mov.w	r3, #0
 80085e2:	014b      	lsls	r3, r1, #5
 80085e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80085e8:	0142      	lsls	r2, r0, #5
 80085ea:	4610      	mov	r0, r2
 80085ec:	4619      	mov	r1, r3
 80085ee:	ebb0 0008 	subs.w	r0, r0, r8
 80085f2:	eb61 0109 	sbc.w	r1, r1, r9
 80085f6:	f04f 0200 	mov.w	r2, #0
 80085fa:	f04f 0300 	mov.w	r3, #0
 80085fe:	018b      	lsls	r3, r1, #6
 8008600:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008604:	0182      	lsls	r2, r0, #6
 8008606:	1a12      	subs	r2, r2, r0
 8008608:	eb63 0301 	sbc.w	r3, r3, r1
 800860c:	f04f 0000 	mov.w	r0, #0
 8008610:	f04f 0100 	mov.w	r1, #0
 8008614:	00d9      	lsls	r1, r3, #3
 8008616:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800861a:	00d0      	lsls	r0, r2, #3
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	eb12 0208 	adds.w	r2, r2, r8
 8008624:	eb43 0309 	adc.w	r3, r3, r9
 8008628:	f04f 0000 	mov.w	r0, #0
 800862c:	f04f 0100 	mov.w	r1, #0
 8008630:	0259      	lsls	r1, r3, #9
 8008632:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008636:	0250      	lsls	r0, r2, #9
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4610      	mov	r0, r2
 800863e:	4619      	mov	r1, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	461a      	mov	r2, r3
 8008644:	f04f 0300 	mov.w	r3, #0
 8008648:	f7f8 faae 	bl	8000ba8 <__aeabi_uldivmod>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	4613      	mov	r3, r2
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	e04a      	b.n	80086ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008656:	4b31      	ldr	r3, [pc, #196]	; (800871c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	099b      	lsrs	r3, r3, #6
 800865c:	461a      	mov	r2, r3
 800865e:	f04f 0300 	mov.w	r3, #0
 8008662:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008666:	f04f 0100 	mov.w	r1, #0
 800866a:	ea02 0400 	and.w	r4, r2, r0
 800866e:	ea03 0501 	and.w	r5, r3, r1
 8008672:	4620      	mov	r0, r4
 8008674:	4629      	mov	r1, r5
 8008676:	f04f 0200 	mov.w	r2, #0
 800867a:	f04f 0300 	mov.w	r3, #0
 800867e:	014b      	lsls	r3, r1, #5
 8008680:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008684:	0142      	lsls	r2, r0, #5
 8008686:	4610      	mov	r0, r2
 8008688:	4619      	mov	r1, r3
 800868a:	1b00      	subs	r0, r0, r4
 800868c:	eb61 0105 	sbc.w	r1, r1, r5
 8008690:	f04f 0200 	mov.w	r2, #0
 8008694:	f04f 0300 	mov.w	r3, #0
 8008698:	018b      	lsls	r3, r1, #6
 800869a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800869e:	0182      	lsls	r2, r0, #6
 80086a0:	1a12      	subs	r2, r2, r0
 80086a2:	eb63 0301 	sbc.w	r3, r3, r1
 80086a6:	f04f 0000 	mov.w	r0, #0
 80086aa:	f04f 0100 	mov.w	r1, #0
 80086ae:	00d9      	lsls	r1, r3, #3
 80086b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086b4:	00d0      	lsls	r0, r2, #3
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	1912      	adds	r2, r2, r4
 80086bc:	eb45 0303 	adc.w	r3, r5, r3
 80086c0:	f04f 0000 	mov.w	r0, #0
 80086c4:	f04f 0100 	mov.w	r1, #0
 80086c8:	0299      	lsls	r1, r3, #10
 80086ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80086ce:	0290      	lsls	r0, r2, #10
 80086d0:	4602      	mov	r2, r0
 80086d2:	460b      	mov	r3, r1
 80086d4:	4610      	mov	r0, r2
 80086d6:	4619      	mov	r1, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	461a      	mov	r2, r3
 80086dc:	f04f 0300 	mov.w	r3, #0
 80086e0:	f7f8 fa62 	bl	8000ba8 <__aeabi_uldivmod>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	4613      	mov	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80086ec:	4b0b      	ldr	r3, [pc, #44]	; (800871c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	0c1b      	lsrs	r3, r3, #16
 80086f2:	f003 0303 	and.w	r3, r3, #3
 80086f6:	3301      	adds	r3, #1
 80086f8:	005b      	lsls	r3, r3, #1
 80086fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	fbb2 f3f3 	udiv	r3, r2, r3
 8008704:	60bb      	str	r3, [r7, #8]
      break;
 8008706:	e002      	b.n	800870e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008708:	4b05      	ldr	r3, [pc, #20]	; (8008720 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800870a:	60bb      	str	r3, [r7, #8]
      break;
 800870c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800870e:	68bb      	ldr	r3, [r7, #8]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800871a:	bf00      	nop
 800871c:	40023800 	.word	0x40023800
 8008720:	00f42400 	.word	0x00f42400
 8008724:	007a1200 	.word	0x007a1200

08008728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008728:	b480      	push	{r7}
 800872a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800872c:	4b03      	ldr	r3, [pc, #12]	; (800873c <HAL_RCC_GetHCLKFreq+0x14>)
 800872e:	681b      	ldr	r3, [r3, #0]
}
 8008730:	4618      	mov	r0, r3
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	20000580 	.word	0x20000580

08008740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008744:	f7ff fff0 	bl	8008728 <HAL_RCC_GetHCLKFreq>
 8008748:	4602      	mov	r2, r0
 800874a:	4b05      	ldr	r3, [pc, #20]	; (8008760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	0a9b      	lsrs	r3, r3, #10
 8008750:	f003 0307 	and.w	r3, r3, #7
 8008754:	4903      	ldr	r1, [pc, #12]	; (8008764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008756:	5ccb      	ldrb	r3, [r1, r3]
 8008758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800875c:	4618      	mov	r0, r3
 800875e:	bd80      	pop	{r7, pc}
 8008760:	40023800 	.word	0x40023800
 8008764:	0801f468 	.word	0x0801f468

08008768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800876c:	f7ff ffdc 	bl	8008728 <HAL_RCC_GetHCLKFreq>
 8008770:	4602      	mov	r2, r0
 8008772:	4b05      	ldr	r3, [pc, #20]	; (8008788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	0b5b      	lsrs	r3, r3, #13
 8008778:	f003 0307 	and.w	r3, r3, #7
 800877c:	4903      	ldr	r1, [pc, #12]	; (800878c <HAL_RCC_GetPCLK2Freq+0x24>)
 800877e:	5ccb      	ldrb	r3, [r1, r3]
 8008780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008784:	4618      	mov	r0, r3
 8008786:	bd80      	pop	{r7, pc}
 8008788:	40023800 	.word	0x40023800
 800878c:	0801f468 	.word	0x0801f468

08008790 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e034      	b.n	8008810 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d106      	bne.n	80087c0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f7f9 fb92 	bl	8001ee4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	3308      	adds	r3, #8
 80087c8:	4619      	mov	r1, r3
 80087ca:	4610      	mov	r0, r2
 80087cc:	f000 ff8c 	bl	80096e8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6818      	ldr	r0, [r3, #0]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	461a      	mov	r2, r3
 80087da:	68b9      	ldr	r1, [r7, #8]
 80087dc:	f000 ffd6 	bl	800978c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6858      	ldr	r0, [r3, #4]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	689a      	ldr	r2, [r3, #8]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	f001 f80b 	bl	8009808 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	6892      	ldr	r2, [r2, #8]
 80087fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	6892      	ldr	r2, [r2, #8]
 8008806:	f041 0101 	orr.w	r1, r1, #1
 800880a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e03f      	b.n	80088aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d106      	bne.n	8008844 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7f9 fa70 	bl	8001d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2224      	movs	r2, #36	; 0x24
 8008848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68da      	ldr	r2, [r3, #12]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800885a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fd7b 	bl	8009358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	691a      	ldr	r2, [r3, #16]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008870:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	695a      	ldr	r2, [r3, #20]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008880:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68da      	ldr	r2, [r3, #12]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008890:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2220      	movs	r2, #32
 800889c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2220      	movs	r2, #32
 80088a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b08a      	sub	sp, #40	; 0x28
 80088b6:	af02      	add	r7, sp, #8
 80088b8:	60f8      	str	r0, [r7, #12]
 80088ba:	60b9      	str	r1, [r7, #8]
 80088bc:	603b      	str	r3, [r7, #0]
 80088be:	4613      	mov	r3, r2
 80088c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80088c2:	2300      	movs	r3, #0
 80088c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b20      	cmp	r3, #32
 80088d0:	d17c      	bne.n	80089cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <HAL_UART_Transmit+0x2c>
 80088d8:	88fb      	ldrh	r3, [r7, #6]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d101      	bne.n	80088e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e075      	b.n	80089ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d101      	bne.n	80088f0 <HAL_UART_Transmit+0x3e>
 80088ec:	2302      	movs	r3, #2
 80088ee:	e06e      	b.n	80089ce <HAL_UART_Transmit+0x11c>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2221      	movs	r2, #33	; 0x21
 8008902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008906:	f7f9 ff55 	bl	80027b4 <HAL_GetTick>
 800890a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	88fa      	ldrh	r2, [r7, #6]
 8008910:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	88fa      	ldrh	r2, [r7, #6]
 8008916:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008920:	d108      	bne.n	8008934 <HAL_UART_Transmit+0x82>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d104      	bne.n	8008934 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800892a:	2300      	movs	r3, #0
 800892c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	61bb      	str	r3, [r7, #24]
 8008932:	e003      	b.n	800893c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008938:	2300      	movs	r3, #0
 800893a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008944:	e02a      	b.n	800899c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	2200      	movs	r2, #0
 800894e:	2180      	movs	r1, #128	; 0x80
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f000 faf9 	bl	8008f48 <UART_WaitOnFlagUntilTimeout>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e036      	b.n	80089ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10b      	bne.n	800897e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008974:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	3302      	adds	r3, #2
 800897a:	61bb      	str	r3, [r7, #24]
 800897c:	e007      	b.n	800898e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	781a      	ldrb	r2, [r3, #0]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	3301      	adds	r3, #1
 800898c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008992:	b29b      	uxth	r3, r3
 8008994:	3b01      	subs	r3, #1
 8008996:	b29a      	uxth	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1cf      	bne.n	8008946 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	2200      	movs	r2, #0
 80089ae:	2140      	movs	r1, #64	; 0x40
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f000 fac9 	bl	8008f48 <UART_WaitOnFlagUntilTimeout>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80089bc:	2303      	movs	r3, #3
 80089be:	e006      	b.n	80089ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2220      	movs	r2, #32
 80089c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	e000      	b.n	80089ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80089cc:	2302      	movs	r3, #2
  }
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3720      	adds	r7, #32
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
	...

080089d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b0ba      	sub	sp, #232	; 0xe8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a0e:	f003 030f 	and.w	r3, r3, #15
 8008a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10f      	bne.n	8008a3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a22:	f003 0320 	and.w	r3, r3, #32
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d009      	beq.n	8008a3e <HAL_UART_IRQHandler+0x66>
 8008a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a2e:	f003 0320 	and.w	r3, r3, #32
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d003      	beq.n	8008a3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fbd3 	bl	80091e2 <UART_Receive_IT>
      return;
 8008a3c:	e256      	b.n	8008eec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 80de 	beq.w	8008c04 <HAL_UART_IRQHandler+0x22c>
 8008a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d106      	bne.n	8008a62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 80d1 	beq.w	8008c04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00b      	beq.n	8008a86 <HAL_UART_IRQHandler+0xae>
 8008a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d005      	beq.n	8008a86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7e:	f043 0201 	orr.w	r2, r3, #1
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a8a:	f003 0304 	and.w	r3, r3, #4
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00b      	beq.n	8008aaa <HAL_UART_IRQHandler+0xd2>
 8008a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d005      	beq.n	8008aaa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa2:	f043 0202 	orr.w	r2, r3, #2
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aae:	f003 0302 	and.w	r3, r3, #2
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00b      	beq.n	8008ace <HAL_UART_IRQHandler+0xf6>
 8008ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d005      	beq.n	8008ace <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	f043 0204 	orr.w	r2, r3, #4
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ad2:	f003 0308 	and.w	r3, r3, #8
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d011      	beq.n	8008afe <HAL_UART_IRQHandler+0x126>
 8008ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ade:	f003 0320 	and.w	r3, r3, #32
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d105      	bne.n	8008af2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af6:	f043 0208 	orr.w	r2, r3, #8
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 81ed 	beq.w	8008ee2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0c:	f003 0320 	and.w	r3, r3, #32
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d008      	beq.n	8008b26 <HAL_UART_IRQHandler+0x14e>
 8008b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b18:	f003 0320 	and.w	r3, r3, #32
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d002      	beq.n	8008b26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fb5e 	bl	80091e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b30:	2b40      	cmp	r3, #64	; 0x40
 8008b32:	bf0c      	ite	eq
 8008b34:	2301      	moveq	r3, #1
 8008b36:	2300      	movne	r3, #0
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b42:	f003 0308 	and.w	r3, r3, #8
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d103      	bne.n	8008b52 <HAL_UART_IRQHandler+0x17a>
 8008b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d04f      	beq.n	8008bf2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fa66 	bl	8009024 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b62:	2b40      	cmp	r3, #64	; 0x40
 8008b64:	d141      	bne.n	8008bea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3314      	adds	r3, #20
 8008b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b74:	e853 3f00 	ldrex	r3, [r3]
 8008b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3314      	adds	r3, #20
 8008b8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1d9      	bne.n	8008b66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d013      	beq.n	8008be2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbe:	4a7d      	ldr	r2, [pc, #500]	; (8008db4 <HAL_UART_IRQHandler+0x3dc>)
 8008bc0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fa fc08 	bl	80033dc <HAL_DMA_Abort_IT>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d016      	beq.n	8008c00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008bdc:	4610      	mov	r0, r2
 8008bde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be0:	e00e      	b.n	8008c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f99a 	bl	8008f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be8:	e00a      	b.n	8008c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f996 	bl	8008f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bf0:	e006      	b.n	8008c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f992 	bl	8008f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008bfe:	e170      	b.n	8008ee2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c00:	bf00      	nop
    return;
 8008c02:	e16e      	b.n	8008ee2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	f040 814a 	bne.w	8008ea2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c12:	f003 0310 	and.w	r3, r3, #16
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 8143 	beq.w	8008ea2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c20:	f003 0310 	and.w	r3, r3, #16
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 813c 	beq.w	8008ea2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60bb      	str	r3, [r7, #8]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	60bb      	str	r3, [r7, #8]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	60bb      	str	r3, [r7, #8]
 8008c3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4a:	2b40      	cmp	r3, #64	; 0x40
 8008c4c:	f040 80b4 	bne.w	8008db8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 8140 	beq.w	8008ee6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	f080 8139 	bcs.w	8008ee6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	69db      	ldr	r3, [r3, #28]
 8008c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c86:	f000 8088 	beq.w	8008d9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	330c      	adds	r3, #12
 8008c90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c98:	e853 3f00 	ldrex	r3, [r3]
 8008c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ca0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	330c      	adds	r3, #12
 8008cb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008cb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008cba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008cc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008cc6:	e841 2300 	strex	r3, r2, [r1]
 8008cca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1d9      	bne.n	8008c8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	3314      	adds	r3, #20
 8008cdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ce0:	e853 3f00 	ldrex	r3, [r3]
 8008ce4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ce8:	f023 0301 	bic.w	r3, r3, #1
 8008cec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3314      	adds	r3, #20
 8008cf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008cfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d06:	e841 2300 	strex	r3, r2, [r1]
 8008d0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1e1      	bne.n	8008cd6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3314      	adds	r3, #20
 8008d18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d1c:	e853 3f00 	ldrex	r3, [r3]
 8008d20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3314      	adds	r3, #20
 8008d32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d3e:	e841 2300 	strex	r3, r2, [r1]
 8008d42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1e3      	bne.n	8008d12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	330c      	adds	r3, #12
 8008d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d62:	e853 3f00 	ldrex	r3, [r3]
 8008d66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d6a:	f023 0310 	bic.w	r3, r3, #16
 8008d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	330c      	adds	r3, #12
 8008d78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008d7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008d7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d84:	e841 2300 	strex	r3, r2, [r1]
 8008d88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e3      	bne.n	8008d58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fa fab1 	bl	80032fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f8c0 	bl	8008f30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008db0:	e099      	b.n	8008ee6 <HAL_UART_IRQHandler+0x50e>
 8008db2:	bf00      	nop
 8008db4:	080090eb 	.word	0x080090eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f000 808b 	beq.w	8008eea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008dd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 8086 	beq.w	8008eea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	330c      	adds	r3, #12
 8008de4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de8:	e853 3f00 	ldrex	r3, [r3]
 8008dec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008df4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	330c      	adds	r3, #12
 8008dfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008e02:	647a      	str	r2, [r7, #68]	; 0x44
 8008e04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e0a:	e841 2300 	strex	r3, r2, [r1]
 8008e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1e3      	bne.n	8008dde <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3314      	adds	r3, #20
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e20:	e853 3f00 	ldrex	r3, [r3]
 8008e24:	623b      	str	r3, [r7, #32]
   return(result);
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	f023 0301 	bic.w	r3, r3, #1
 8008e2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3314      	adds	r3, #20
 8008e36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e3a:	633a      	str	r2, [r7, #48]	; 0x30
 8008e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e42:	e841 2300 	strex	r3, r2, [r1]
 8008e46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1e3      	bne.n	8008e16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2220      	movs	r2, #32
 8008e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	330c      	adds	r3, #12
 8008e62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	e853 3f00 	ldrex	r3, [r3]
 8008e6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f023 0310 	bic.w	r3, r3, #16
 8008e72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	330c      	adds	r3, #12
 8008e7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008e80:	61fa      	str	r2, [r7, #28]
 8008e82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e84:	69b9      	ldr	r1, [r7, #24]
 8008e86:	69fa      	ldr	r2, [r7, #28]
 8008e88:	e841 2300 	strex	r3, r2, [r1]
 8008e8c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1e3      	bne.n	8008e5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e98:	4619      	mov	r1, r3
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f848 	bl	8008f30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ea0:	e023      	b.n	8008eea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d009      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x4ea>
 8008eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f929 	bl	8009112 <UART_Transmit_IT>
    return;
 8008ec0:	e014      	b.n	8008eec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00e      	beq.n	8008eec <HAL_UART_IRQHandler+0x514>
 8008ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d008      	beq.n	8008eec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f969 	bl	80091b2 <UART_EndTransmit_IT>
    return;
 8008ee0:	e004      	b.n	8008eec <HAL_UART_IRQHandler+0x514>
    return;
 8008ee2:	bf00      	nop
 8008ee4:	e002      	b.n	8008eec <HAL_UART_IRQHandler+0x514>
      return;
 8008ee6:	bf00      	nop
 8008ee8:	e000      	b.n	8008eec <HAL_UART_IRQHandler+0x514>
      return;
 8008eea:	bf00      	nop
  }
}
 8008eec:	37e8      	adds	r7, #232	; 0xe8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop

08008ef4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b090      	sub	sp, #64	; 0x40
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	4613      	mov	r3, r2
 8008f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f58:	e050      	b.n	8008ffc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f60:	d04c      	beq.n	8008ffc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d007      	beq.n	8008f78 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f68:	f7f9 fc24 	bl	80027b4 <HAL_GetTick>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d241      	bcs.n	8008ffc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	330c      	adds	r3, #12
 8008f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f82:	e853 3f00 	ldrex	r3, [r3]
 8008f86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	330c      	adds	r3, #12
 8008f96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f98:	637a      	str	r2, [r7, #52]	; 0x34
 8008f9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fa0:	e841 2300 	strex	r3, r2, [r1]
 8008fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1e5      	bne.n	8008f78 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	3314      	adds	r3, #20
 8008fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	e853 3f00 	ldrex	r3, [r3]
 8008fba:	613b      	str	r3, [r7, #16]
   return(result);
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	f023 0301 	bic.w	r3, r3, #1
 8008fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	3314      	adds	r3, #20
 8008fca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fcc:	623a      	str	r2, [r7, #32]
 8008fce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd0:	69f9      	ldr	r1, [r7, #28]
 8008fd2:	6a3a      	ldr	r2, [r7, #32]
 8008fd4:	e841 2300 	strex	r3, r2, [r1]
 8008fd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1e5      	bne.n	8008fac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2220      	movs	r2, #32
 8008fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2220      	movs	r2, #32
 8008fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e00f      	b.n	800901c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	4013      	ands	r3, r2
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	429a      	cmp	r2, r3
 800900a:	bf0c      	ite	eq
 800900c:	2301      	moveq	r3, #1
 800900e:	2300      	movne	r3, #0
 8009010:	b2db      	uxtb	r3, r3
 8009012:	461a      	mov	r2, r3
 8009014:	79fb      	ldrb	r3, [r7, #7]
 8009016:	429a      	cmp	r2, r3
 8009018:	d09f      	beq.n	8008f5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3740      	adds	r7, #64	; 0x40
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009024:	b480      	push	{r7}
 8009026:	b095      	sub	sp, #84	; 0x54
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	330c      	adds	r3, #12
 8009032:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009036:	e853 3f00 	ldrex	r3, [r3]
 800903a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800903c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	330c      	adds	r3, #12
 800904a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800904c:	643a      	str	r2, [r7, #64]	; 0x40
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009050:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009052:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009054:	e841 2300 	strex	r3, r2, [r1]
 8009058:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800905a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1e5      	bne.n	800902c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3314      	adds	r3, #20
 8009066:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009068:	6a3b      	ldr	r3, [r7, #32]
 800906a:	e853 3f00 	ldrex	r3, [r3]
 800906e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	f023 0301 	bic.w	r3, r3, #1
 8009076:	64bb      	str	r3, [r7, #72]	; 0x48
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3314      	adds	r3, #20
 800907e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009080:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009088:	e841 2300 	strex	r3, r2, [r1]
 800908c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1e5      	bne.n	8009060 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009098:	2b01      	cmp	r3, #1
 800909a:	d119      	bne.n	80090d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	330c      	adds	r3, #12
 80090a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f023 0310 	bic.w	r3, r3, #16
 80090b2:	647b      	str	r3, [r7, #68]	; 0x44
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	330c      	adds	r3, #12
 80090ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090bc:	61ba      	str	r2, [r7, #24]
 80090be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6979      	ldr	r1, [r7, #20]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	613b      	str	r3, [r7, #16]
   return(result);
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e5      	bne.n	800909c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2220      	movs	r2, #32
 80090d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80090de:	bf00      	nop
 80090e0:	3754      	adds	r7, #84	; 0x54
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f7ff ff09 	bl	8008f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800910a:	bf00      	nop
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009112:	b480      	push	{r7}
 8009114:	b085      	sub	sp, #20
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b21      	cmp	r3, #33	; 0x21
 8009124:	d13e      	bne.n	80091a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800912e:	d114      	bne.n	800915a <UART_Transmit_IT+0x48>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d110      	bne.n	800915a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a1b      	ldr	r3, [r3, #32]
 800913c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	461a      	mov	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800914c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	1c9a      	adds	r2, r3, #2
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	621a      	str	r2, [r3, #32]
 8009158:	e008      	b.n	800916c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a1b      	ldr	r3, [r3, #32]
 800915e:	1c59      	adds	r1, r3, #1
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	6211      	str	r1, [r2, #32]
 8009164:	781a      	ldrb	r2, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009170:	b29b      	uxth	r3, r3
 8009172:	3b01      	subs	r3, #1
 8009174:	b29b      	uxth	r3, r3
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	4619      	mov	r1, r3
 800917a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10f      	bne.n	80091a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68da      	ldr	r2, [r3, #12]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800918e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68da      	ldr	r2, [r3, #12]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800919e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	e000      	b.n	80091a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091a4:	2302      	movs	r3, #2
  }
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b082      	sub	sp, #8
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68da      	ldr	r2, [r3, #12]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2220      	movs	r2, #32
 80091ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7ff fe8e 	bl	8008ef4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b08c      	sub	sp, #48	; 0x30
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b22      	cmp	r3, #34	; 0x22
 80091f4:	f040 80ab 	bne.w	800934e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009200:	d117      	bne.n	8009232 <UART_Receive_IT+0x50>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d113      	bne.n	8009232 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800920a:	2300      	movs	r3, #0
 800920c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009212:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	b29b      	uxth	r3, r3
 800921c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009220:	b29a      	uxth	r2, r3
 8009222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009224:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922a:	1c9a      	adds	r2, r3, #2
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	629a      	str	r2, [r3, #40]	; 0x28
 8009230:	e026      	b.n	8009280 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009236:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009238:	2300      	movs	r3, #0
 800923a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009244:	d007      	beq.n	8009256 <UART_Receive_IT+0x74>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10a      	bne.n	8009264 <UART_Receive_IT+0x82>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d106      	bne.n	8009264 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	b2da      	uxtb	r2, r3
 800925e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009260:	701a      	strb	r2, [r3, #0]
 8009262:	e008      	b.n	8009276 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	b2db      	uxtb	r3, r3
 800926c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009270:	b2da      	uxtb	r2, r3
 8009272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009274:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009284:	b29b      	uxth	r3, r3
 8009286:	3b01      	subs	r3, #1
 8009288:	b29b      	uxth	r3, r3
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	4619      	mov	r1, r3
 800928e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009290:	2b00      	cmp	r3, #0
 8009292:	d15a      	bne.n	800934a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68da      	ldr	r2, [r3, #12]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f022 0220 	bic.w	r2, r2, #32
 80092a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68da      	ldr	r2, [r3, #12]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	695a      	ldr	r2, [r3, #20]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f022 0201 	bic.w	r2, r2, #1
 80092c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2220      	movs	r2, #32
 80092c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d135      	bne.n	8009340 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	330c      	adds	r3, #12
 80092e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	e853 3f00 	ldrex	r3, [r3]
 80092e8:	613b      	str	r3, [r7, #16]
   return(result);
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	f023 0310 	bic.w	r3, r3, #16
 80092f0:	627b      	str	r3, [r7, #36]	; 0x24
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	330c      	adds	r3, #12
 80092f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092fa:	623a      	str	r2, [r7, #32]
 80092fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fe:	69f9      	ldr	r1, [r7, #28]
 8009300:	6a3a      	ldr	r2, [r7, #32]
 8009302:	e841 2300 	strex	r3, r2, [r1]
 8009306:	61bb      	str	r3, [r7, #24]
   return(result);
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1e5      	bne.n	80092da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 0310 	and.w	r3, r3, #16
 8009318:	2b10      	cmp	r3, #16
 800931a:	d10a      	bne.n	8009332 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800931c:	2300      	movs	r3, #0
 800931e:	60fb      	str	r3, [r7, #12]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7ff fdf9 	bl	8008f30 <HAL_UARTEx_RxEventCallback>
 800933e:	e002      	b.n	8009346 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7ff fde1 	bl	8008f08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	e002      	b.n	8009350 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800934a:	2300      	movs	r3, #0
 800934c:	e000      	b.n	8009350 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800934e:	2302      	movs	r3, #2
  }
}
 8009350:	4618      	mov	r0, r3
 8009352:	3730      	adds	r7, #48	; 0x30
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	b09f      	sub	sp, #124	; 0x7c
 800935e:	af00      	add	r7, sp, #0
 8009360:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800936c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800936e:	68d9      	ldr	r1, [r3, #12]
 8009370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	ea40 0301 	orr.w	r3, r0, r1
 8009378:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800937a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800937c:	689a      	ldr	r2, [r3, #8]
 800937e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	431a      	orrs	r2, r3
 8009384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009386:	695b      	ldr	r3, [r3, #20]
 8009388:	431a      	orrs	r2, r3
 800938a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	4313      	orrs	r3, r2
 8009390:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800939c:	f021 010c 	bic.w	r1, r1, #12
 80093a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093a6:	430b      	orrs	r3, r1
 80093a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	695b      	ldr	r3, [r3, #20]
 80093b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80093b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b6:	6999      	ldr	r1, [r3, #24]
 80093b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	ea40 0301 	orr.w	r3, r0, r1
 80093c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80093c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	4bc5      	ldr	r3, [pc, #788]	; (80096dc <UART_SetConfig+0x384>)
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d004      	beq.n	80093d6 <UART_SetConfig+0x7e>
 80093cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	4bc3      	ldr	r3, [pc, #780]	; (80096e0 <UART_SetConfig+0x388>)
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d103      	bne.n	80093de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80093d6:	f7ff f9c7 	bl	8008768 <HAL_RCC_GetPCLK2Freq>
 80093da:	6778      	str	r0, [r7, #116]	; 0x74
 80093dc:	e002      	b.n	80093e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093de:	f7ff f9af 	bl	8008740 <HAL_RCC_GetPCLK1Freq>
 80093e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093ec:	f040 80b6 	bne.w	800955c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093f2:	461c      	mov	r4, r3
 80093f4:	f04f 0500 	mov.w	r5, #0
 80093f8:	4622      	mov	r2, r4
 80093fa:	462b      	mov	r3, r5
 80093fc:	1891      	adds	r1, r2, r2
 80093fe:	6439      	str	r1, [r7, #64]	; 0x40
 8009400:	415b      	adcs	r3, r3
 8009402:	647b      	str	r3, [r7, #68]	; 0x44
 8009404:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009408:	1912      	adds	r2, r2, r4
 800940a:	eb45 0303 	adc.w	r3, r5, r3
 800940e:	f04f 0000 	mov.w	r0, #0
 8009412:	f04f 0100 	mov.w	r1, #0
 8009416:	00d9      	lsls	r1, r3, #3
 8009418:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800941c:	00d0      	lsls	r0, r2, #3
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	1911      	adds	r1, r2, r4
 8009424:	6639      	str	r1, [r7, #96]	; 0x60
 8009426:	416b      	adcs	r3, r5
 8009428:	667b      	str	r3, [r7, #100]	; 0x64
 800942a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	461a      	mov	r2, r3
 8009430:	f04f 0300 	mov.w	r3, #0
 8009434:	1891      	adds	r1, r2, r2
 8009436:	63b9      	str	r1, [r7, #56]	; 0x38
 8009438:	415b      	adcs	r3, r3
 800943a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800943c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009440:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009444:	f7f7 fbb0 	bl	8000ba8 <__aeabi_uldivmod>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	4ba5      	ldr	r3, [pc, #660]	; (80096e4 <UART_SetConfig+0x38c>)
 800944e:	fba3 2302 	umull	r2, r3, r3, r2
 8009452:	095b      	lsrs	r3, r3, #5
 8009454:	011e      	lsls	r6, r3, #4
 8009456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009458:	461c      	mov	r4, r3
 800945a:	f04f 0500 	mov.w	r5, #0
 800945e:	4622      	mov	r2, r4
 8009460:	462b      	mov	r3, r5
 8009462:	1891      	adds	r1, r2, r2
 8009464:	6339      	str	r1, [r7, #48]	; 0x30
 8009466:	415b      	adcs	r3, r3
 8009468:	637b      	str	r3, [r7, #52]	; 0x34
 800946a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800946e:	1912      	adds	r2, r2, r4
 8009470:	eb45 0303 	adc.w	r3, r5, r3
 8009474:	f04f 0000 	mov.w	r0, #0
 8009478:	f04f 0100 	mov.w	r1, #0
 800947c:	00d9      	lsls	r1, r3, #3
 800947e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009482:	00d0      	lsls	r0, r2, #3
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	1911      	adds	r1, r2, r4
 800948a:	65b9      	str	r1, [r7, #88]	; 0x58
 800948c:	416b      	adcs	r3, r5
 800948e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	461a      	mov	r2, r3
 8009496:	f04f 0300 	mov.w	r3, #0
 800949a:	1891      	adds	r1, r2, r2
 800949c:	62b9      	str	r1, [r7, #40]	; 0x28
 800949e:	415b      	adcs	r3, r3
 80094a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80094aa:	f7f7 fb7d 	bl	8000ba8 <__aeabi_uldivmod>
 80094ae:	4602      	mov	r2, r0
 80094b0:	460b      	mov	r3, r1
 80094b2:	4b8c      	ldr	r3, [pc, #560]	; (80096e4 <UART_SetConfig+0x38c>)
 80094b4:	fba3 1302 	umull	r1, r3, r3, r2
 80094b8:	095b      	lsrs	r3, r3, #5
 80094ba:	2164      	movs	r1, #100	; 0x64
 80094bc:	fb01 f303 	mul.w	r3, r1, r3
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	3332      	adds	r3, #50	; 0x32
 80094c6:	4a87      	ldr	r2, [pc, #540]	; (80096e4 <UART_SetConfig+0x38c>)
 80094c8:	fba2 2303 	umull	r2, r3, r2, r3
 80094cc:	095b      	lsrs	r3, r3, #5
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80094d4:	441e      	add	r6, r3
 80094d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094d8:	4618      	mov	r0, r3
 80094da:	f04f 0100 	mov.w	r1, #0
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	1894      	adds	r4, r2, r2
 80094e4:	623c      	str	r4, [r7, #32]
 80094e6:	415b      	adcs	r3, r3
 80094e8:	627b      	str	r3, [r7, #36]	; 0x24
 80094ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80094ee:	1812      	adds	r2, r2, r0
 80094f0:	eb41 0303 	adc.w	r3, r1, r3
 80094f4:	f04f 0400 	mov.w	r4, #0
 80094f8:	f04f 0500 	mov.w	r5, #0
 80094fc:	00dd      	lsls	r5, r3, #3
 80094fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009502:	00d4      	lsls	r4, r2, #3
 8009504:	4622      	mov	r2, r4
 8009506:	462b      	mov	r3, r5
 8009508:	1814      	adds	r4, r2, r0
 800950a:	653c      	str	r4, [r7, #80]	; 0x50
 800950c:	414b      	adcs	r3, r1
 800950e:	657b      	str	r3, [r7, #84]	; 0x54
 8009510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	461a      	mov	r2, r3
 8009516:	f04f 0300 	mov.w	r3, #0
 800951a:	1891      	adds	r1, r2, r2
 800951c:	61b9      	str	r1, [r7, #24]
 800951e:	415b      	adcs	r3, r3
 8009520:	61fb      	str	r3, [r7, #28]
 8009522:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009526:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800952a:	f7f7 fb3d 	bl	8000ba8 <__aeabi_uldivmod>
 800952e:	4602      	mov	r2, r0
 8009530:	460b      	mov	r3, r1
 8009532:	4b6c      	ldr	r3, [pc, #432]	; (80096e4 <UART_SetConfig+0x38c>)
 8009534:	fba3 1302 	umull	r1, r3, r3, r2
 8009538:	095b      	lsrs	r3, r3, #5
 800953a:	2164      	movs	r1, #100	; 0x64
 800953c:	fb01 f303 	mul.w	r3, r1, r3
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	00db      	lsls	r3, r3, #3
 8009544:	3332      	adds	r3, #50	; 0x32
 8009546:	4a67      	ldr	r2, [pc, #412]	; (80096e4 <UART_SetConfig+0x38c>)
 8009548:	fba2 2303 	umull	r2, r3, r2, r3
 800954c:	095b      	lsrs	r3, r3, #5
 800954e:	f003 0207 	and.w	r2, r3, #7
 8009552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4432      	add	r2, r6
 8009558:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800955a:	e0b9      	b.n	80096d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800955c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800955e:	461c      	mov	r4, r3
 8009560:	f04f 0500 	mov.w	r5, #0
 8009564:	4622      	mov	r2, r4
 8009566:	462b      	mov	r3, r5
 8009568:	1891      	adds	r1, r2, r2
 800956a:	6139      	str	r1, [r7, #16]
 800956c:	415b      	adcs	r3, r3
 800956e:	617b      	str	r3, [r7, #20]
 8009570:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009574:	1912      	adds	r2, r2, r4
 8009576:	eb45 0303 	adc.w	r3, r5, r3
 800957a:	f04f 0000 	mov.w	r0, #0
 800957e:	f04f 0100 	mov.w	r1, #0
 8009582:	00d9      	lsls	r1, r3, #3
 8009584:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009588:	00d0      	lsls	r0, r2, #3
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	eb12 0804 	adds.w	r8, r2, r4
 8009592:	eb43 0905 	adc.w	r9, r3, r5
 8009596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	4618      	mov	r0, r3
 800959c:	f04f 0100 	mov.w	r1, #0
 80095a0:	f04f 0200 	mov.w	r2, #0
 80095a4:	f04f 0300 	mov.w	r3, #0
 80095a8:	008b      	lsls	r3, r1, #2
 80095aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80095ae:	0082      	lsls	r2, r0, #2
 80095b0:	4640      	mov	r0, r8
 80095b2:	4649      	mov	r1, r9
 80095b4:	f7f7 faf8 	bl	8000ba8 <__aeabi_uldivmod>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	4b49      	ldr	r3, [pc, #292]	; (80096e4 <UART_SetConfig+0x38c>)
 80095be:	fba3 2302 	umull	r2, r3, r3, r2
 80095c2:	095b      	lsrs	r3, r3, #5
 80095c4:	011e      	lsls	r6, r3, #4
 80095c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095c8:	4618      	mov	r0, r3
 80095ca:	f04f 0100 	mov.w	r1, #0
 80095ce:	4602      	mov	r2, r0
 80095d0:	460b      	mov	r3, r1
 80095d2:	1894      	adds	r4, r2, r2
 80095d4:	60bc      	str	r4, [r7, #8]
 80095d6:	415b      	adcs	r3, r3
 80095d8:	60fb      	str	r3, [r7, #12]
 80095da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095de:	1812      	adds	r2, r2, r0
 80095e0:	eb41 0303 	adc.w	r3, r1, r3
 80095e4:	f04f 0400 	mov.w	r4, #0
 80095e8:	f04f 0500 	mov.w	r5, #0
 80095ec:	00dd      	lsls	r5, r3, #3
 80095ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80095f2:	00d4      	lsls	r4, r2, #3
 80095f4:	4622      	mov	r2, r4
 80095f6:	462b      	mov	r3, r5
 80095f8:	1814      	adds	r4, r2, r0
 80095fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80095fc:	414b      	adcs	r3, r1
 80095fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	4618      	mov	r0, r3
 8009606:	f04f 0100 	mov.w	r1, #0
 800960a:	f04f 0200 	mov.w	r2, #0
 800960e:	f04f 0300 	mov.w	r3, #0
 8009612:	008b      	lsls	r3, r1, #2
 8009614:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009618:	0082      	lsls	r2, r0, #2
 800961a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800961e:	f7f7 fac3 	bl	8000ba8 <__aeabi_uldivmod>
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	4b2f      	ldr	r3, [pc, #188]	; (80096e4 <UART_SetConfig+0x38c>)
 8009628:	fba3 1302 	umull	r1, r3, r3, r2
 800962c:	095b      	lsrs	r3, r3, #5
 800962e:	2164      	movs	r1, #100	; 0x64
 8009630:	fb01 f303 	mul.w	r3, r1, r3
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	011b      	lsls	r3, r3, #4
 8009638:	3332      	adds	r3, #50	; 0x32
 800963a:	4a2a      	ldr	r2, [pc, #168]	; (80096e4 <UART_SetConfig+0x38c>)
 800963c:	fba2 2303 	umull	r2, r3, r2, r3
 8009640:	095b      	lsrs	r3, r3, #5
 8009642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009646:	441e      	add	r6, r3
 8009648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800964a:	4618      	mov	r0, r3
 800964c:	f04f 0100 	mov.w	r1, #0
 8009650:	4602      	mov	r2, r0
 8009652:	460b      	mov	r3, r1
 8009654:	1894      	adds	r4, r2, r2
 8009656:	603c      	str	r4, [r7, #0]
 8009658:	415b      	adcs	r3, r3
 800965a:	607b      	str	r3, [r7, #4]
 800965c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009660:	1812      	adds	r2, r2, r0
 8009662:	eb41 0303 	adc.w	r3, r1, r3
 8009666:	f04f 0400 	mov.w	r4, #0
 800966a:	f04f 0500 	mov.w	r5, #0
 800966e:	00dd      	lsls	r5, r3, #3
 8009670:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009674:	00d4      	lsls	r4, r2, #3
 8009676:	4622      	mov	r2, r4
 8009678:	462b      	mov	r3, r5
 800967a:	eb12 0a00 	adds.w	sl, r2, r0
 800967e:	eb43 0b01 	adc.w	fp, r3, r1
 8009682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	4618      	mov	r0, r3
 8009688:	f04f 0100 	mov.w	r1, #0
 800968c:	f04f 0200 	mov.w	r2, #0
 8009690:	f04f 0300 	mov.w	r3, #0
 8009694:	008b      	lsls	r3, r1, #2
 8009696:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800969a:	0082      	lsls	r2, r0, #2
 800969c:	4650      	mov	r0, sl
 800969e:	4659      	mov	r1, fp
 80096a0:	f7f7 fa82 	bl	8000ba8 <__aeabi_uldivmod>
 80096a4:	4602      	mov	r2, r0
 80096a6:	460b      	mov	r3, r1
 80096a8:	4b0e      	ldr	r3, [pc, #56]	; (80096e4 <UART_SetConfig+0x38c>)
 80096aa:	fba3 1302 	umull	r1, r3, r3, r2
 80096ae:	095b      	lsrs	r3, r3, #5
 80096b0:	2164      	movs	r1, #100	; 0x64
 80096b2:	fb01 f303 	mul.w	r3, r1, r3
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	011b      	lsls	r3, r3, #4
 80096ba:	3332      	adds	r3, #50	; 0x32
 80096bc:	4a09      	ldr	r2, [pc, #36]	; (80096e4 <UART_SetConfig+0x38c>)
 80096be:	fba2 2303 	umull	r2, r3, r2, r3
 80096c2:	095b      	lsrs	r3, r3, #5
 80096c4:	f003 020f 	and.w	r2, r3, #15
 80096c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4432      	add	r2, r6
 80096ce:	609a      	str	r2, [r3, #8]
}
 80096d0:	bf00      	nop
 80096d2:	377c      	adds	r7, #124	; 0x7c
 80096d4:	46bd      	mov	sp, r7
 80096d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096da:	bf00      	nop
 80096dc:	40011000 	.word	0x40011000
 80096e0:	40011400 	.word	0x40011400
 80096e4:	51eb851f 	.word	0x51eb851f

080096e8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009700:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	4b20      	ldr	r3, [pc, #128]	; (8009788 <FSMC_NORSRAM_Init+0xa0>)
 8009706:	4013      	ands	r3, r2
 8009708:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009712:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8009718:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800971e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8009724:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800972a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8009730:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8009736:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800973c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8009742:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8009748:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800974e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8009754:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	4313      	orrs	r3, r2
 800975a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	2b08      	cmp	r3, #8
 8009762:	d103      	bne.n	800976c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800976a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68f9      	ldr	r1, [r7, #12]
 8009774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	fff00080 	.word	0xfff00080

0800978c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800978c:	b480      	push	{r7}
 800978e:	b087      	sub	sp, #28
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8009798:	2300      	movs	r3, #0
 800979a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	1c5a      	adds	r2, r3, #1
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80097ae:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80097ba:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80097c2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80097ca:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	3b01      	subs	r3, #1
 80097d2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80097d4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	3b02      	subs	r3, #2
 80097dc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80097de:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80097e4:	4313      	orrs	r3, r2
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6979      	ldr	r1, [r7, #20]
 80097f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	371c      	adds	r7, #28
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
	...

08009808 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8009808:	b480      	push	{r7}
 800980a:	b087      	sub	sp, #28
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
 8009814:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009820:	d122      	bne.n	8009868 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800982a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	4b15      	ldr	r3, [pc, #84]	; (8009884 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8009830:	4013      	ands	r3, r2
 8009832:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800983e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009846:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800984e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009854:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	4313      	orrs	r3, r2
 800985a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	6979      	ldr	r1, [r7, #20]
 8009862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009866:	e005      	b.n	8009874 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	371c      	adds	r7, #28
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	cff00000 	.word	0xcff00000

08009888 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009888:	b084      	sub	sp, #16
 800988a:	b580      	push	{r7, lr}
 800988c:	b084      	sub	sp, #16
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	f107 001c 	add.w	r0, r7, #28
 8009896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800989a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989c:	2b01      	cmp	r3, #1
 800989e:	d122      	bne.n	80098e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80098b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80098c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d105      	bne.n	80098da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 f9a0 	bl	8009c20 <USB_CoreReset>
 80098e0:	4603      	mov	r3, r0
 80098e2:	73fb      	strb	r3, [r7, #15]
 80098e4:	e01a      	b.n	800991c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f994 	bl	8009c20 <USB_CoreReset>
 80098f8:	4603      	mov	r3, r0
 80098fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80098fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d106      	bne.n	8009910 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009906:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	639a      	str	r2, [r3, #56]	; 0x38
 800990e:	e005      	b.n	800991c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009914:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800991c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991e:	2b01      	cmp	r3, #1
 8009920:	d10b      	bne.n	800993a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	f043 0206 	orr.w	r2, r3, #6
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	f043 0220 	orr.w	r2, r3, #32
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800993a:	7bfb      	ldrb	r3, [r7, #15]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009946:	b004      	add	sp, #16
 8009948:	4770      	bx	lr

0800994a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800994a:	b480      	push	{r7}
 800994c:	b083      	sub	sp, #12
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	f043 0201 	orr.w	r2, r3, #1
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	f023 0201 	bic.w	r2, r3, #1
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	460b      	mov	r3, r1
 8009998:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800999a:	2300      	movs	r3, #0
 800999c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80099aa:	78fb      	ldrb	r3, [r7, #3]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d115      	bne.n	80099dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80099bc:	2001      	movs	r0, #1
 80099be:	f7f8 ff05 	bl	80027cc <HAL_Delay>
      ms++;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	3301      	adds	r3, #1
 80099c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f91a 	bl	8009c02 <USB_GetMode>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d01e      	beq.n	8009a12 <USB_SetCurrentMode+0x84>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2b31      	cmp	r3, #49	; 0x31
 80099d8:	d9f0      	bls.n	80099bc <USB_SetCurrentMode+0x2e>
 80099da:	e01a      	b.n	8009a12 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80099dc:	78fb      	ldrb	r3, [r7, #3]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d115      	bne.n	8009a0e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80099ee:	2001      	movs	r0, #1
 80099f0:	f7f8 feec 	bl	80027cc <HAL_Delay>
      ms++;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	3301      	adds	r3, #1
 80099f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f901 	bl	8009c02 <USB_GetMode>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d005      	beq.n	8009a12 <USB_SetCurrentMode+0x84>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2b31      	cmp	r3, #49	; 0x31
 8009a0a:	d9f0      	bls.n	80099ee <USB_SetCurrentMode+0x60>
 8009a0c:	e001      	b.n	8009a12 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e005      	b.n	8009a1e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2b32      	cmp	r3, #50	; 0x32
 8009a16:	d101      	bne.n	8009a1c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e000      	b.n	8009a1e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
	...

08009a28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a32:	2300      	movs	r3, #0
 8009a34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	019b      	lsls	r3, r3, #6
 8009a3a:	f043 0220 	orr.w	r2, r3, #32
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	3301      	adds	r3, #1
 8009a46:	60fb      	str	r3, [r7, #12]
 8009a48:	4a08      	ldr	r2, [pc, #32]	; (8009a6c <USB_FlushTxFifo+0x44>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d901      	bls.n	8009a52 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	e006      	b.n	8009a60 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	f003 0320 	and.w	r3, r3, #32
 8009a5a:	2b20      	cmp	r3, #32
 8009a5c:	d0f1      	beq.n	8009a42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3714      	adds	r7, #20
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	00030d40 	.word	0x00030d40

08009a70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2210      	movs	r2, #16
 8009a80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	3301      	adds	r3, #1
 8009a86:	60fb      	str	r3, [r7, #12]
 8009a88:	4a08      	ldr	r2, [pc, #32]	; (8009aac <USB_FlushRxFifo+0x3c>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d901      	bls.n	8009a92 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	e006      	b.n	8009aa0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	f003 0310 	and.w	r3, r3, #16
 8009a9a:	2b10      	cmp	r3, #16
 8009a9c:	d0f1      	beq.n	8009a82 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	00030d40 	.word	0x00030d40

08009ab0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b089      	sub	sp, #36	; 0x24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	4611      	mov	r1, r2
 8009abc:	461a      	mov	r2, r3
 8009abe:	460b      	mov	r3, r1
 8009ac0:	71fb      	strb	r3, [r7, #7]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009ace:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d123      	bne.n	8009b1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009ad6:	88bb      	ldrh	r3, [r7, #4]
 8009ad8:	3303      	adds	r3, #3
 8009ada:	089b      	lsrs	r3, r3, #2
 8009adc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009ade:	2300      	movs	r3, #0
 8009ae0:	61bb      	str	r3, [r7, #24]
 8009ae2:	e018      	b.n	8009b16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009ae4:	79fb      	ldrb	r3, [r7, #7]
 8009ae6:	031a      	lsls	r2, r3, #12
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	4413      	add	r3, r2
 8009aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009af0:	461a      	mov	r2, r3
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	3301      	adds	r3, #1
 8009afc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	3301      	adds	r3, #1
 8009b02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	3301      	adds	r3, #1
 8009b08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	3301      	adds	r3, #1
 8009b14:	61bb      	str	r3, [r7, #24]
 8009b16:	69ba      	ldr	r2, [r7, #24]
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d3e2      	bcc.n	8009ae4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3724      	adds	r7, #36	; 0x24
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b08b      	sub	sp, #44	; 0x2c
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	4613      	mov	r3, r2
 8009b38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009b42:	88fb      	ldrh	r3, [r7, #6]
 8009b44:	089b      	lsrs	r3, r3, #2
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009b4a:	88fb      	ldrh	r3, [r7, #6]
 8009b4c:	f003 0303 	and.w	r3, r3, #3
 8009b50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009b52:	2300      	movs	r3, #0
 8009b54:	623b      	str	r3, [r7, #32]
 8009b56:	e014      	b.n	8009b82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	3301      	adds	r3, #1
 8009b68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	3301      	adds	r3, #1
 8009b74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	3301      	adds	r3, #1
 8009b7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009b7c:	6a3b      	ldr	r3, [r7, #32]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	623b      	str	r3, [r7, #32]
 8009b82:	6a3a      	ldr	r2, [r7, #32]
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d3e6      	bcc.n	8009b58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009b8a:	8bfb      	ldrh	r3, [r7, #30]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d01e      	beq.n	8009bce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009b90:	2300      	movs	r3, #0
 8009b92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	f107 0310 	add.w	r3, r7, #16
 8009ba0:	6812      	ldr	r2, [r2, #0]
 8009ba2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	6a3b      	ldr	r3, [r7, #32]
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	00db      	lsls	r3, r3, #3
 8009bac:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb0:	b2da      	uxtb	r2, r3
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	701a      	strb	r2, [r3, #0]
      i++;
 8009bb6:	6a3b      	ldr	r3, [r7, #32]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	623b      	str	r3, [r7, #32]
      pDest++;
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009bc2:	8bfb      	ldrh	r3, [r7, #30]
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009bc8:	8bfb      	ldrh	r3, [r7, #30]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1ea      	bne.n	8009ba4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	372c      	adds	r7, #44	; 0x2c
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	695b      	ldr	r3, [r3, #20]
 8009be8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b083      	sub	sp, #12
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	695b      	ldr	r3, [r3, #20]
 8009c0e:	f003 0301 	and.w	r3, r3, #1
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	370c      	adds	r7, #12
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
	...

08009c20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	60fb      	str	r3, [r7, #12]
 8009c32:	4a13      	ldr	r2, [pc, #76]	; (8009c80 <USB_CoreReset+0x60>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d901      	bls.n	8009c3c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8009c38:	2303      	movs	r3, #3
 8009c3a:	e01a      	b.n	8009c72 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	daf3      	bge.n	8009c2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c44:	2300      	movs	r3, #0
 8009c46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	f043 0201 	orr.w	r2, r3, #1
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	3301      	adds	r3, #1
 8009c58:	60fb      	str	r3, [r7, #12]
 8009c5a:	4a09      	ldr	r2, [pc, #36]	; (8009c80 <USB_CoreReset+0x60>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d901      	bls.n	8009c64 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8009c60:	2303      	movs	r3, #3
 8009c62:	e006      	b.n	8009c72 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	f003 0301 	and.w	r3, r3, #1
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d0f1      	beq.n	8009c54 <USB_CoreReset+0x34>

  return HAL_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3714      	adds	r7, #20
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	00030d40 	.word	0x00030d40

08009c84 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c84:	b084      	sub	sp, #16
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b084      	sub	sp, #16
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	f107 001c 	add.w	r0, r7, #28
 8009c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009caa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d018      	beq.n	8009d08 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d10a      	bne.n	8009cf2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cea:	f043 0304 	orr.w	r3, r3, #4
 8009cee:	6013      	str	r3, [r2, #0]
 8009cf0:	e014      	b.n	8009d1c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d00:	f023 0304 	bic.w	r3, r3, #4
 8009d04:	6013      	str	r3, [r2, #0]
 8009d06:	e009      	b.n	8009d1c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d16:	f023 0304 	bic.w	r3, r3, #4
 8009d1a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009d1c:	2110      	movs	r1, #16
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff fe82 	bl	8009a28 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff fea3 	bl	8009a70 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	60fb      	str	r3, [r7, #12]
 8009d2e:	e015      	b.n	8009d5c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d42:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	015a      	lsls	r2, r3, #5
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d50:	461a      	mov	r2, r3
 8009d52:	2300      	movs	r3, #0
 8009d54:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	60fb      	str	r3, [r7, #12]
 8009d5c:	6a3b      	ldr	r3, [r7, #32]
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d3e5      	bcc.n	8009d30 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d70:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00b      	beq.n	8009d96 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d84:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a13      	ldr	r2, [pc, #76]	; (8009dd8 <USB_HostInit+0x154>)
 8009d8a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a13      	ldr	r2, [pc, #76]	; (8009ddc <USB_HostInit+0x158>)
 8009d90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009d94:	e009      	b.n	8009daa <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2280      	movs	r2, #128	; 0x80
 8009d9a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a10      	ldr	r2, [pc, #64]	; (8009de0 <USB_HostInit+0x15c>)
 8009da0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a0f      	ldr	r2, [pc, #60]	; (8009de4 <USB_HostInit+0x160>)
 8009da6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d105      	bne.n	8009dbc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	f043 0210 	orr.w	r2, r3, #16
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	699a      	ldr	r2, [r3, #24]
 8009dc0:	4b09      	ldr	r3, [pc, #36]	; (8009de8 <USB_HostInit+0x164>)
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009dd4:	b004      	add	sp, #16
 8009dd6:	4770      	bx	lr
 8009dd8:	01000200 	.word	0x01000200
 8009ddc:	00e00300 	.word	0x00e00300
 8009de0:	00600080 	.word	0x00600080
 8009de4:	004000e0 	.word	0x004000e0
 8009de8:	a3200008 	.word	0xa3200008

08009dec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e0a:	f023 0303 	bic.w	r3, r3, #3
 8009e0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	78fb      	ldrb	r3, [r7, #3]
 8009e1a:	f003 0303 	and.w	r3, r3, #3
 8009e1e:	68f9      	ldr	r1, [r7, #12]
 8009e20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009e24:	4313      	orrs	r3, r2
 8009e26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009e28:	78fb      	ldrb	r3, [r7, #3]
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d107      	bne.n	8009e3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e34:	461a      	mov	r2, r3
 8009e36:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009e3a:	6053      	str	r3, [r2, #4]
 8009e3c:	e009      	b.n	8009e52 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009e3e:	78fb      	ldrb	r3, [r7, #3]
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d106      	bne.n	8009e52 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	f241 7370 	movw	r3, #6000	; 0x1770
 8009e50:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009e80:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e8e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009e90:	2064      	movs	r0, #100	; 0x64
 8009e92:	f7f8 fc9b 	bl	80027cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ea2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009ea4:	200a      	movs	r0, #10
 8009ea6:	f7f8 fc91 	bl	80027cc <HAL_Delay>

  return HAL_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009ed8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d109      	bne.n	8009ef8 <USB_DriveVbus+0x44>
 8009ee4:	78fb      	ldrb	r3, [r7, #3]
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d106      	bne.n	8009ef8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009ef2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009ef6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f02:	d109      	bne.n	8009f18 <USB_DriveVbus+0x64>
 8009f04:	78fb      	ldrb	r3, [r7, #3]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d106      	bne.n	8009f18 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f16:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b085      	sub	sp, #20
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009f32:	2300      	movs	r3, #0
 8009f34:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	0c5b      	lsrs	r3, r3, #17
 8009f44:	f003 0303 	and.w	r3, r3, #3
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	b29b      	uxth	r3, r3
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
	...

08009f78 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b088      	sub	sp, #32
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	4608      	mov	r0, r1
 8009f82:	4611      	mov	r1, r2
 8009f84:	461a      	mov	r2, r3
 8009f86:	4603      	mov	r3, r0
 8009f88:	70fb      	strb	r3, [r7, #3]
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	70bb      	strb	r3, [r7, #2]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009f9a:	78fb      	ldrb	r3, [r7, #3]
 8009f9c:	015a      	lsls	r2, r3, #5
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009fae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	d87e      	bhi.n	800a0b4 <USB_HC_Init+0x13c>
 8009fb6:	a201      	add	r2, pc, #4	; (adr r2, 8009fbc <USB_HC_Init+0x44>)
 8009fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fbc:	08009fcd 	.word	0x08009fcd
 8009fc0:	0800a077 	.word	0x0800a077
 8009fc4:	08009fcd 	.word	0x08009fcd
 8009fc8:	0800a039 	.word	0x0800a039
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009fcc:	78fb      	ldrb	r3, [r7, #3]
 8009fce:	015a      	lsls	r2, r3, #5
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fd8:	461a      	mov	r2, r3
 8009fda:	f240 439d 	movw	r3, #1181	; 0x49d
 8009fde:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009fe0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	da10      	bge.n	800a00a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009fe8:	78fb      	ldrb	r3, [r7, #3]
 8009fea:	015a      	lsls	r2, r3, #5
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	78fa      	ldrb	r2, [r7, #3]
 8009ff8:	0151      	lsls	r1, r2, #5
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	440a      	add	r2, r1
 8009ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a006:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a008:	e057      	b.n	800a0ba <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a00e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a012:	2b00      	cmp	r3, #0
 800a014:	d051      	beq.n	800a0ba <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a016:	78fb      	ldrb	r3, [r7, #3]
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	78fa      	ldrb	r2, [r7, #3]
 800a026:	0151      	lsls	r1, r2, #5
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	440a      	add	r2, r1
 800a02c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a030:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a034:	60d3      	str	r3, [r2, #12]
      break;
 800a036:	e040      	b.n	800a0ba <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a038:	78fb      	ldrb	r3, [r7, #3]
 800a03a:	015a      	lsls	r2, r3, #5
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	4413      	add	r3, r2
 800a040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a044:	461a      	mov	r2, r3
 800a046:	f240 639d 	movw	r3, #1693	; 0x69d
 800a04a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a04c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a050:	2b00      	cmp	r3, #0
 800a052:	da34      	bge.n	800a0be <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a054:	78fb      	ldrb	r3, [r7, #3]
 800a056:	015a      	lsls	r2, r3, #5
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	4413      	add	r3, r2
 800a05c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	78fa      	ldrb	r2, [r7, #3]
 800a064:	0151      	lsls	r1, r2, #5
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	440a      	add	r2, r1
 800a06a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a06e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a072:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a074:	e023      	b.n	800a0be <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a076:	78fb      	ldrb	r3, [r7, #3]
 800a078:	015a      	lsls	r2, r3, #5
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	4413      	add	r3, r2
 800a07e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a082:	461a      	mov	r2, r3
 800a084:	f240 2325 	movw	r3, #549	; 0x225
 800a088:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a08a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	da17      	bge.n	800a0c2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a092:	78fb      	ldrb	r3, [r7, #3]
 800a094:	015a      	lsls	r2, r3, #5
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	4413      	add	r3, r2
 800a09a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	78fa      	ldrb	r2, [r7, #3]
 800a0a2:	0151      	lsls	r1, r2, #5
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	440a      	add	r2, r1
 800a0a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0ac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a0b0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a0b2:	e006      	b.n	800a0c2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	77fb      	strb	r3, [r7, #31]
      break;
 800a0b8:	e004      	b.n	800a0c4 <USB_HC_Init+0x14c>
      break;
 800a0ba:	bf00      	nop
 800a0bc:	e002      	b.n	800a0c4 <USB_HC_Init+0x14c>
      break;
 800a0be:	bf00      	nop
 800a0c0:	e000      	b.n	800a0c4 <USB_HC_Init+0x14c>
      break;
 800a0c2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0ca:	699a      	ldr	r2, [r3, #24]
 800a0cc:	78fb      	ldrb	r3, [r7, #3]
 800a0ce:	f003 030f 	and.w	r3, r3, #15
 800a0d2:	2101      	movs	r1, #1
 800a0d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a0d8:	6939      	ldr	r1, [r7, #16]
 800a0da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a0ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	da03      	bge.n	800a0fe <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a0f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0fa:	61bb      	str	r3, [r7, #24]
 800a0fc:	e001      	b.n	800a102 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800a0fe:	2300      	movs	r3, #0
 800a100:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7ff ff0f 	bl	8009f26 <USB_GetHostSpeed>
 800a108:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a10a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a10e:	2b02      	cmp	r3, #2
 800a110:	d106      	bne.n	800a120 <USB_HC_Init+0x1a8>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2b02      	cmp	r3, #2
 800a116:	d003      	beq.n	800a120 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a11c:	617b      	str	r3, [r7, #20]
 800a11e:	e001      	b.n	800a124 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a120:	2300      	movs	r3, #0
 800a122:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a124:	787b      	ldrb	r3, [r7, #1]
 800a126:	059b      	lsls	r3, r3, #22
 800a128:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a12c:	78bb      	ldrb	r3, [r7, #2]
 800a12e:	02db      	lsls	r3, r3, #11
 800a130:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a134:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a136:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a13a:	049b      	lsls	r3, r3, #18
 800a13c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a140:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a142:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a144:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a148:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a14e:	78fb      	ldrb	r3, [r7, #3]
 800a150:	0159      	lsls	r1, r3, #5
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	440b      	add	r3, r1
 800a156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a15a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a160:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800a162:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a166:	2b03      	cmp	r3, #3
 800a168:	d10f      	bne.n	800a18a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800a16a:	78fb      	ldrb	r3, [r7, #3]
 800a16c:	015a      	lsls	r2, r3, #5
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	4413      	add	r3, r2
 800a172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	78fa      	ldrb	r2, [r7, #3]
 800a17a:	0151      	lsls	r1, r2, #5
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	440a      	add	r2, r1
 800a180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a184:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a188:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a18a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3720      	adds	r7, #32
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b08c      	sub	sp, #48	; 0x30
 800a198:	af02      	add	r7, sp, #8
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	785b      	ldrb	r3, [r3, #1]
 800a1aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a1ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1b0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d02d      	beq.n	800a21a <USB_HC_StartXfer+0x86>
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	791b      	ldrb	r3, [r3, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d129      	bne.n	800a21a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a1c6:	79fb      	ldrb	r3, [r7, #7]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d117      	bne.n	800a1fc <USB_HC_StartXfer+0x68>
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	79db      	ldrb	r3, [r3, #7]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d003      	beq.n	800a1dc <USB_HC_StartXfer+0x48>
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	79db      	ldrb	r3, [r3, #7]
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d10f      	bne.n	800a1fc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	015a      	lsls	r2, r3, #5
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	69fa      	ldr	r2, [r7, #28]
 800a1ec:	0151      	lsls	r1, r2, #5
 800a1ee:	6a3a      	ldr	r2, [r7, #32]
 800a1f0:	440a      	add	r2, r1
 800a1f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1fa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a1fc:	79fb      	ldrb	r3, [r7, #7]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10b      	bne.n	800a21a <USB_HC_StartXfer+0x86>
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	795b      	ldrb	r3, [r3, #5]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d107      	bne.n	800a21a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	785b      	ldrb	r3, [r3, #1]
 800a20e:	4619      	mov	r1, r3
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f000 fa2f 	bl	800a674 <USB_DoPing>
      return HAL_OK;
 800a216:	2300      	movs	r3, #0
 800a218:	e0f8      	b.n	800a40c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	695b      	ldr	r3, [r3, #20]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d018      	beq.n	800a254 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	8912      	ldrh	r2, [r2, #8]
 800a22a:	4413      	add	r3, r2
 800a22c:	3b01      	subs	r3, #1
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	8912      	ldrh	r2, [r2, #8]
 800a232:	fbb3 f3f2 	udiv	r3, r3, r2
 800a236:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a238:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a23a:	8b7b      	ldrh	r3, [r7, #26]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d90b      	bls.n	800a258 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a240:	8b7b      	ldrh	r3, [r7, #26]
 800a242:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a244:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	8912      	ldrh	r2, [r2, #8]
 800a24a:	fb02 f203 	mul.w	r2, r2, r3
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	611a      	str	r2, [r3, #16]
 800a252:	e001      	b.n	800a258 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a254:	2301      	movs	r3, #1
 800a256:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	78db      	ldrb	r3, [r3, #3]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d007      	beq.n	800a270 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a260:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	8912      	ldrh	r2, [r2, #8]
 800a266:	fb02 f203 	mul.w	r2, r2, r3
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	611a      	str	r2, [r3, #16]
 800a26e:	e003      	b.n	800a278 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	695a      	ldr	r2, [r3, #20]
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a280:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a282:	04d9      	lsls	r1, r3, #19
 800a284:	4b63      	ldr	r3, [pc, #396]	; (800a414 <USB_HC_StartXfer+0x280>)
 800a286:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a288:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	7a9b      	ldrb	r3, [r3, #10]
 800a28e:	075b      	lsls	r3, r3, #29
 800a290:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a294:	69f9      	ldr	r1, [r7, #28]
 800a296:	0148      	lsls	r0, r1, #5
 800a298:	6a39      	ldr	r1, [r7, #32]
 800a29a:	4401      	add	r1, r0
 800a29c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a2a0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a2a2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a2a4:	79fb      	ldrb	r3, [r7, #7]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d009      	beq.n	800a2be <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	68d9      	ldr	r1, [r3, #12]
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	015a      	lsls	r2, r3, #5
 800a2b2:	6a3b      	ldr	r3, [r7, #32]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2ba:	460a      	mov	r2, r1
 800a2bc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f003 0301 	and.w	r3, r3, #1
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	bf0c      	ite	eq
 800a2ce:	2301      	moveq	r3, #1
 800a2d0:	2300      	movne	r3, #0
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	6a3b      	ldr	r3, [r7, #32]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	69fa      	ldr	r2, [r7, #28]
 800a2e6:	0151      	lsls	r1, r2, #5
 800a2e8:	6a3a      	ldr	r2, [r7, #32]
 800a2ea:	440a      	add	r2, r1
 800a2ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a2f4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	015a      	lsls	r2, r3, #5
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	7e7b      	ldrb	r3, [r7, #25]
 800a306:	075b      	lsls	r3, r3, #29
 800a308:	69f9      	ldr	r1, [r7, #28]
 800a30a:	0148      	lsls	r0, r1, #5
 800a30c:	6a39      	ldr	r1, [r7, #32]
 800a30e:	4401      	add	r1, r0
 800a310:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a314:	4313      	orrs	r3, r2
 800a316:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a32e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	78db      	ldrb	r3, [r3, #3]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d004      	beq.n	800a342 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a33e:	613b      	str	r3, [r7, #16]
 800a340:	e003      	b.n	800a34a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a348:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a350:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	015a      	lsls	r2, r3, #5
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	4413      	add	r3, r2
 800a35a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a35e:	461a      	mov	r2, r3
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a364:	79fb      	ldrb	r3, [r7, #7]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d001      	beq.n	800a36e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	e04e      	b.n	800a40c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	78db      	ldrb	r3, [r3, #3]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d149      	bne.n	800a40a <USB_HC_StartXfer+0x276>
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d045      	beq.n	800a40a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	79db      	ldrb	r3, [r3, #7]
 800a382:	2b03      	cmp	r3, #3
 800a384:	d830      	bhi.n	800a3e8 <USB_HC_StartXfer+0x254>
 800a386:	a201      	add	r2, pc, #4	; (adr r2, 800a38c <USB_HC_StartXfer+0x1f8>)
 800a388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38c:	0800a39d 	.word	0x0800a39d
 800a390:	0800a3c1 	.word	0x0800a3c1
 800a394:	0800a39d 	.word	0x0800a39d
 800a398:	0800a3c1 	.word	0x0800a3c1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	695b      	ldr	r3, [r3, #20]
 800a3a0:	3303      	adds	r3, #3
 800a3a2:	089b      	lsrs	r3, r3, #2
 800a3a4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a3a6:	8afa      	ldrh	r2, [r7, #22]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d91c      	bls.n	800a3ec <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	f043 0220 	orr.w	r2, r3, #32
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	619a      	str	r2, [r3, #24]
        }
        break;
 800a3be:	e015      	b.n	800a3ec <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	695b      	ldr	r3, [r3, #20]
 800a3c4:	3303      	adds	r3, #3
 800a3c6:	089b      	lsrs	r3, r3, #2
 800a3c8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a3ca:	8afa      	ldrh	r2, [r7, #22]
 800a3cc:	6a3b      	ldr	r3, [r7, #32]
 800a3ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d90a      	bls.n	800a3f0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	699b      	ldr	r3, [r3, #24]
 800a3de:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	619a      	str	r2, [r3, #24]
        }
        break;
 800a3e6:	e003      	b.n	800a3f0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a3e8:	bf00      	nop
 800a3ea:	e002      	b.n	800a3f2 <USB_HC_StartXfer+0x25e>
        break;
 800a3ec:	bf00      	nop
 800a3ee:	e000      	b.n	800a3f2 <USB_HC_StartXfer+0x25e>
        break;
 800a3f0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	68d9      	ldr	r1, [r3, #12]
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	785a      	ldrb	r2, [r3, #1]
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	2000      	movs	r0, #0
 800a402:	9000      	str	r0, [sp, #0]
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f7ff fb53 	bl	8009ab0 <USB_WritePacket>
  }

  return HAL_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3728      	adds	r7, #40	; 0x28
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	1ff80000 	.word	0x1ff80000

0800a418 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	b29b      	uxth	r3, r3
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr

0800a43a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a43a:	b480      	push	{r7}
 800a43c:	b089      	sub	sp, #36	; 0x24
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
 800a442:	460b      	mov	r3, r1
 800a444:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800a44a:	78fb      	ldrb	r3, [r7, #3]
 800a44c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800a44e:	2300      	movs	r3, #0
 800a450:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	015a      	lsls	r2, r3, #5
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	4413      	add	r3, r2
 800a45a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	0c9b      	lsrs	r3, r3, #18
 800a462:	f003 0303 	and.w	r3, r3, #3
 800a466:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	0fdb      	lsrs	r3, r3, #31
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	f003 0320 	and.w	r3, r3, #32
 800a486:	2b20      	cmp	r3, #32
 800a488:	d104      	bne.n	800a494 <USB_HC_Halt+0x5a>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d101      	bne.n	800a494 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800a490:	2300      	movs	r3, #0
 800a492:	e0e8      	b.n	800a666 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d002      	beq.n	800a4a0 <USB_HC_Halt+0x66>
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d173      	bne.n	800a588 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	015a      	lsls	r2, r3, #5
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	697a      	ldr	r2, [r7, #20]
 800a4b0:	0151      	lsls	r1, r2, #5
 800a4b2:	69ba      	ldr	r2, [r7, #24]
 800a4b4:	440a      	add	r2, r1
 800a4b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4be:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	f003 0320 	and.w	r3, r3, #32
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f040 80cb 	bne.w	800a664 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d143      	bne.n	800a562 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	015a      	lsls	r2, r3, #5
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	0151      	lsls	r1, r2, #5
 800a4ec:	69ba      	ldr	r2, [r7, #24]
 800a4ee:	440a      	add	r2, r1
 800a4f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4f8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	015a      	lsls	r2, r3, #5
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	4413      	add	r3, r2
 800a502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	0151      	lsls	r1, r2, #5
 800a50c:	69ba      	ldr	r2, [r7, #24]
 800a50e:	440a      	add	r2, r1
 800a510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a514:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a518:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	015a      	lsls	r2, r3, #5
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	4413      	add	r3, r2
 800a522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	0151      	lsls	r1, r2, #5
 800a52c:	69ba      	ldr	r2, [r7, #24]
 800a52e:	440a      	add	r2, r1
 800a530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a534:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a538:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	3301      	adds	r3, #1
 800a53e:	61fb      	str	r3, [r7, #28]
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a546:	d81d      	bhi.n	800a584 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	015a      	lsls	r2, r3, #5
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	4413      	add	r3, r2
 800a550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a55a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a55e:	d0ec      	beq.n	800a53a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a560:	e080      	b.n	800a664 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	015a      	lsls	r2, r3, #5
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	4413      	add	r3, r2
 800a56a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	697a      	ldr	r2, [r7, #20]
 800a572:	0151      	lsls	r1, r2, #5
 800a574:	69ba      	ldr	r2, [r7, #24]
 800a576:	440a      	add	r2, r1
 800a578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a57c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a580:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a582:	e06f      	b.n	800a664 <USB_HC_Halt+0x22a>
            break;
 800a584:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a586:	e06d      	b.n	800a664 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	015a      	lsls	r2, r3, #5
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	4413      	add	r3, r2
 800a590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	697a      	ldr	r2, [r7, #20]
 800a598:	0151      	lsls	r1, r2, #5
 800a59a:	69ba      	ldr	r2, [r7, #24]
 800a59c:	440a      	add	r2, r1
 800a59e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5a6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d143      	bne.n	800a640 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	015a      	lsls	r2, r3, #5
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	4413      	add	r3, r2
 800a5c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	697a      	ldr	r2, [r7, #20]
 800a5c8:	0151      	lsls	r1, r2, #5
 800a5ca:	69ba      	ldr	r2, [r7, #24]
 800a5cc:	440a      	add	r2, r1
 800a5ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5d6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	015a      	lsls	r2, r3, #5
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	4413      	add	r3, r2
 800a5e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	0151      	lsls	r1, r2, #5
 800a5ea:	69ba      	ldr	r2, [r7, #24]
 800a5ec:	440a      	add	r2, r1
 800a5ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	015a      	lsls	r2, r3, #5
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	4413      	add	r3, r2
 800a600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	697a      	ldr	r2, [r7, #20]
 800a608:	0151      	lsls	r1, r2, #5
 800a60a:	69ba      	ldr	r2, [r7, #24]
 800a60c:	440a      	add	r2, r1
 800a60e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a612:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a616:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	3301      	adds	r3, #1
 800a61c:	61fb      	str	r3, [r7, #28]
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a624:	d81d      	bhi.n	800a662 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	015a      	lsls	r2, r3, #5
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	4413      	add	r3, r2
 800a62e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a63c:	d0ec      	beq.n	800a618 <USB_HC_Halt+0x1de>
 800a63e:	e011      	b.n	800a664 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	015a      	lsls	r2, r3, #5
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	4413      	add	r3, r2
 800a648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	0151      	lsls	r1, r2, #5
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	440a      	add	r2, r1
 800a656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a65a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a65e:	6013      	str	r3, [r2, #0]
 800a660:	e000      	b.n	800a664 <USB_HC_Halt+0x22a>
          break;
 800a662:	bf00      	nop
    }
  }

  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3724      	adds	r7, #36	; 0x24
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
	...

0800a674 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a674:	b480      	push	{r7}
 800a676:	b087      	sub	sp, #28
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	460b      	mov	r3, r1
 800a67e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a684:	78fb      	ldrb	r3, [r7, #3]
 800a686:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a688:	2301      	movs	r3, #1
 800a68a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	04da      	lsls	r2, r3, #19
 800a690:	4b15      	ldr	r3, [pc, #84]	; (800a6e8 <USB_DoPing+0x74>)
 800a692:	4013      	ands	r3, r2
 800a694:	693a      	ldr	r2, [r7, #16]
 800a696:	0151      	lsls	r1, r2, #5
 800a698:	697a      	ldr	r2, [r7, #20]
 800a69a:	440a      	add	r2, r1
 800a69c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6a4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	015a      	lsls	r2, r3, #5
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6bc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6c4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	015a      	lsls	r2, r3, #5
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	371c      	adds	r7, #28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	1ff80000 	.word	0x1ff80000

0800a6ec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7ff f935 	bl	800996c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a702:	2110      	movs	r1, #16
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f7ff f98f 	bl	8009a28 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7ff f9b0 	bl	8009a70 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a710:	2300      	movs	r3, #0
 800a712:	613b      	str	r3, [r7, #16]
 800a714:	e01f      	b.n	800a756 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	015a      	lsls	r2, r3, #5
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	4413      	add	r3, r2
 800a71e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a72c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a734:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a73c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	4413      	add	r3, r2
 800a746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a74a:	461a      	mov	r2, r3
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	3301      	adds	r3, #1
 800a754:	613b      	str	r3, [r7, #16]
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	2b0f      	cmp	r3, #15
 800a75a:	d9dc      	bls.n	800a716 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a75c:	2300      	movs	r3, #0
 800a75e:	613b      	str	r3, [r7, #16]
 800a760:	e034      	b.n	800a7cc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a778:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a780:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a788:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	015a      	lsls	r2, r3, #5
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	4413      	add	r3, r2
 800a792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a796:	461a      	mov	r2, r3
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	617b      	str	r3, [r7, #20]
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7a8:	d80c      	bhi.n	800a7c4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	015a      	lsls	r2, r3, #5
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7c0:	d0ec      	beq.n	800a79c <USB_StopHost+0xb0>
 800a7c2:	e000      	b.n	800a7c6 <USB_StopHost+0xda>
        break;
 800a7c4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	613b      	str	r3, [r7, #16]
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	2b0f      	cmp	r3, #15
 800a7d0:	d9c7      	bls.n	800a762 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7d8:	461a      	mov	r2, r3
 800a7da:	f04f 33ff 	mov.w	r3, #4294967295
 800a7de:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7ff f8ae 	bl	800994a <USB_EnableGlobalInt>

  return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3718      	adds	r7, #24
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a7fc:	4904      	ldr	r1, [pc, #16]	; (800a810 <MX_FATFS_Init+0x18>)
 800a7fe:	4805      	ldr	r0, [pc, #20]	; (800a814 <MX_FATFS_Init+0x1c>)
 800a800:	f004 f866 	bl	800e8d0 <FATFS_LinkDriver>
 800a804:	4603      	mov	r3, r0
 800a806:	461a      	mov	r2, r3
 800a808:	4b03      	ldr	r3, [pc, #12]	; (800a818 <MX_FATFS_Init+0x20>)
 800a80a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a80c:	bf00      	nop
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	20002b08 	.word	0x20002b08
 800a814:	0801f478 	.word	0x0801f478
 800a818:	20004b70 	.word	0x20004b70

0800a81c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	4603      	mov	r3, r0
 800a83c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800a842:	79fb      	ldrb	r3, [r7, #7]
 800a844:	4619      	mov	r1, r3
 800a846:	4808      	ldr	r0, [pc, #32]	; (800a868 <USBH_status+0x34>)
 800a848:	f001 fc6a 	bl	800c120 <USBH_MSC_UnitIsReady>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d002      	beq.n	800a858 <USBH_status+0x24>
  {
    res = RES_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	73fb      	strb	r3, [r7, #15]
 800a856:	e001      	b.n	800a85c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	20018928 	.word	0x20018928

0800a86c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b094      	sub	sp, #80	; 0x50
 800a870:	af02      	add	r7, sp, #8
 800a872:	60b9      	str	r1, [r7, #8]
 800a874:	607a      	str	r2, [r7, #4]
 800a876:	603b      	str	r3, [r7, #0]
 800a878:	4603      	mov	r3, r0
 800a87a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800a882:	7bf9      	ldrb	r1, [r7, #15]
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	4818      	ldr	r0, [pc, #96]	; (800a8f0 <USBH_read+0x84>)
 800a88e:	f001 fc91 	bl	800c1b4 <USBH_MSC_Read>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d103      	bne.n	800a8a0 <USBH_read+0x34>
  {
    res = RES_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a89e:	e020      	b.n	800a8e2 <USBH_read+0x76>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a8a0:	f107 0210 	add.w	r2, r7, #16
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	4811      	ldr	r0, [pc, #68]	; (800a8f0 <USBH_read+0x84>)
 800a8aa:	f001 fc5f 	bl	800c16c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a8ae:	7f7b      	ldrb	r3, [r7, #29]
 800a8b0:	2b3a      	cmp	r3, #58	; 0x3a
 800a8b2:	d005      	beq.n	800a8c0 <USBH_read+0x54>
 800a8b4:	2b3a      	cmp	r3, #58	; 0x3a
 800a8b6:	dc10      	bgt.n	800a8da <USBH_read+0x6e>
 800a8b8:	2b04      	cmp	r3, #4
 800a8ba:	d001      	beq.n	800a8c0 <USBH_read+0x54>
 800a8bc:	2b28      	cmp	r3, #40	; 0x28
 800a8be:	d10c      	bne.n	800a8da <USBH_read+0x6e>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 800a8c0:	480c      	ldr	r0, [pc, #48]	; (800a8f4 <USBH_read+0x88>)
 800a8c2:	f00f fc39 	bl	801a138 <iprintf>
 800a8c6:	480c      	ldr	r0, [pc, #48]	; (800a8f8 <USBH_read+0x8c>)
 800a8c8:	f00f fc36 	bl	801a138 <iprintf>
 800a8cc:	200a      	movs	r0, #10
 800a8ce:	f00f fc4b 	bl	801a168 <putchar>
      res = RES_NOTRDY;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a8d8:	e003      	b.n	800a8e2 <USBH_read+0x76>

    default:
      res = RES_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a8e0:	bf00      	nop
    }
  }

  return res;
 800a8e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3748      	adds	r7, #72	; 0x48
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20018928 	.word	0x20018928
 800a8f4:	0801c2cc 	.word	0x0801c2cc
 800a8f8:	0801c2d4 	.word	0x0801c2d4

0800a8fc <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b094      	sub	sp, #80	; 0x50
 800a900:	af02      	add	r7, sp, #8
 800a902:	60b9      	str	r1, [r7, #8]
 800a904:	607a      	str	r2, [r7, #4]
 800a906:	603b      	str	r3, [r7, #0]
 800a908:	4603      	mov	r3, r0
 800a90a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800a912:	7bf9      	ldrb	r1, [r7, #15]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	4820      	ldr	r0, [pc, #128]	; (800a9a0 <USBH_write+0xa4>)
 800a91e:	f001 fcb2 	bl	800c286 <USBH_MSC_Write>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d103      	bne.n	800a930 <USBH_write+0x34>
  {
    res = RES_OK;
 800a928:	2300      	movs	r3, #0
 800a92a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a92e:	e031      	b.n	800a994 <USBH_write+0x98>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a930:	f107 0210 	add.w	r2, r7, #16
 800a934:	7bfb      	ldrb	r3, [r7, #15]
 800a936:	4619      	mov	r1, r3
 800a938:	4819      	ldr	r0, [pc, #100]	; (800a9a0 <USBH_write+0xa4>)
 800a93a:	f001 fc17 	bl	800c16c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a93e:	7f7b      	ldrb	r3, [r7, #29]
 800a940:	2b3a      	cmp	r3, #58	; 0x3a
 800a942:	d016      	beq.n	800a972 <USBH_write+0x76>
 800a944:	2b3a      	cmp	r3, #58	; 0x3a
 800a946:	dc21      	bgt.n	800a98c <USBH_write+0x90>
 800a948:	2b28      	cmp	r3, #40	; 0x28
 800a94a:	d012      	beq.n	800a972 <USBH_write+0x76>
 800a94c:	2b28      	cmp	r3, #40	; 0x28
 800a94e:	dc1d      	bgt.n	800a98c <USBH_write+0x90>
 800a950:	2b04      	cmp	r3, #4
 800a952:	d00e      	beq.n	800a972 <USBH_write+0x76>
 800a954:	2b27      	cmp	r3, #39	; 0x27
 800a956:	d119      	bne.n	800a98c <USBH_write+0x90>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 800a958:	4812      	ldr	r0, [pc, #72]	; (800a9a4 <USBH_write+0xa8>)
 800a95a:	f00f fbed 	bl	801a138 <iprintf>
 800a95e:	4812      	ldr	r0, [pc, #72]	; (800a9a8 <USBH_write+0xac>)
 800a960:	f00f fbea 	bl	801a138 <iprintf>
 800a964:	200a      	movs	r0, #10
 800a966:	f00f fbff 	bl	801a168 <putchar>
      res = RES_WRPRT;
 800a96a:	2302      	movs	r3, #2
 800a96c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a970:	e010      	b.n	800a994 <USBH_write+0x98>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 800a972:	480c      	ldr	r0, [pc, #48]	; (800a9a4 <USBH_write+0xa8>)
 800a974:	f00f fbe0 	bl	801a138 <iprintf>
 800a978:	480c      	ldr	r0, [pc, #48]	; (800a9ac <USBH_write+0xb0>)
 800a97a:	f00f fbdd 	bl	801a138 <iprintf>
 800a97e:	200a      	movs	r0, #10
 800a980:	f00f fbf2 	bl	801a168 <putchar>
      res = RES_NOTRDY;
 800a984:	2303      	movs	r3, #3
 800a986:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a98a:	e003      	b.n	800a994 <USBH_write+0x98>

    default:
      res = RES_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a992:	bf00      	nop
    }
  }

  return res;
 800a994:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3748      	adds	r7, #72	; 0x48
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	20018928 	.word	0x20018928
 800a9a4:	0801c2cc 	.word	0x0801c2cc
 800a9a8:	0801c2ec 	.word	0x0801c2ec
 800a9ac:	0801c2d4 	.word	0x0801c2d4

0800a9b0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b090      	sub	sp, #64	; 0x40
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	603a      	str	r2, [r7, #0]
 800a9ba:	71fb      	strb	r3, [r7, #7]
 800a9bc:	460b      	mov	r3, r1
 800a9be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800a9c6:	79bb      	ldrb	r3, [r7, #6]
 800a9c8:	2b03      	cmp	r3, #3
 800a9ca:	d852      	bhi.n	800aa72 <USBH_ioctl+0xc2>
 800a9cc:	a201      	add	r2, pc, #4	; (adr r2, 800a9d4 <USBH_ioctl+0x24>)
 800a9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d2:	bf00      	nop
 800a9d4:	0800a9e5 	.word	0x0800a9e5
 800a9d8:	0800a9ed 	.word	0x0800a9ed
 800a9dc:	0800aa17 	.word	0x0800aa17
 800a9e0:	0800aa43 	.word	0x0800aa43
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a9ea:	e045      	b.n	800aa78 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a9ec:	f107 0208 	add.w	r2, r7, #8
 800a9f0:	79fb      	ldrb	r3, [r7, #7]
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	4823      	ldr	r0, [pc, #140]	; (800aa84 <USBH_ioctl+0xd4>)
 800a9f6:	f001 fbb9 	bl	800c16c <USBH_MSC_GetLUNInfo>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d106      	bne.n	800aa0e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800aa06:	2300      	movs	r3, #0
 800aa08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800aa0c:	e034      	b.n	800aa78 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aa14:	e030      	b.n	800aa78 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800aa16:	f107 0208 	add.w	r2, r7, #8
 800aa1a:	79fb      	ldrb	r3, [r7, #7]
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4819      	ldr	r0, [pc, #100]	; (800aa84 <USBH_ioctl+0xd4>)
 800aa20:	f001 fba4 	bl	800c16c <USBH_MSC_GetLUNInfo>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d107      	bne.n	800aa3a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800aa2a:	8a3b      	ldrh	r3, [r7, #16]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800aa32:	2300      	movs	r3, #0
 800aa34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800aa38:	e01e      	b.n	800aa78 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aa40:	e01a      	b.n	800aa78 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800aa42:	f107 0208 	add.w	r2, r7, #8
 800aa46:	79fb      	ldrb	r3, [r7, #7]
 800aa48:	4619      	mov	r1, r3
 800aa4a:	480e      	ldr	r0, [pc, #56]	; (800aa84 <USBH_ioctl+0xd4>)
 800aa4c:	f001 fb8e 	bl	800c16c <USBH_MSC_GetLUNInfo>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d109      	bne.n	800aa6a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800aa56:	8a3b      	ldrh	r3, [r7, #16]
 800aa58:	0a5b      	lsrs	r3, r3, #9
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800aa62:	2300      	movs	r3, #0
 800aa64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800aa68:	e006      	b.n	800aa78 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aa70:	e002      	b.n	800aa78 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800aa72:	2304      	movs	r3, #4
 800aa74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800aa78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3740      	adds	r7, #64	; 0x40
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	20018928 	.word	0x20018928

0800aa88 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800aa8e:	4b8d      	ldr	r3, [pc, #564]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800aa90:	22c0      	movs	r2, #192	; 0xc0
 800aa92:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800aa94:	4b8b      	ldr	r3, [pc, #556]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800aa96:	22a8      	movs	r2, #168	; 0xa8
 800aa98:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800aa9a:	4b8a      	ldr	r3, [pc, #552]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 200;
 800aaa0:	4b88      	ldr	r3, [pc, #544]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800aaa2:	22c8      	movs	r2, #200	; 0xc8
 800aaa4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800aaa6:	4b88      	ldr	r3, [pc, #544]	; (800acc8 <MX_LWIP_Init+0x240>)
 800aaa8:	22ff      	movs	r2, #255	; 0xff
 800aaaa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800aaac:	4b86      	ldr	r3, [pc, #536]	; (800acc8 <MX_LWIP_Init+0x240>)
 800aaae:	22ff      	movs	r2, #255	; 0xff
 800aab0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800aab2:	4b85      	ldr	r3, [pc, #532]	; (800acc8 <MX_LWIP_Init+0x240>)
 800aab4:	22ff      	movs	r2, #255	; 0xff
 800aab6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800aab8:	4b83      	ldr	r3, [pc, #524]	; (800acc8 <MX_LWIP_Init+0x240>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800aabe:	4b83      	ldr	r3, [pc, #524]	; (800accc <MX_LWIP_Init+0x244>)
 800aac0:	22c0      	movs	r2, #192	; 0xc0
 800aac2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800aac4:	4b81      	ldr	r3, [pc, #516]	; (800accc <MX_LWIP_Init+0x244>)
 800aac6:	22a8      	movs	r2, #168	; 0xa8
 800aac8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800aaca:	4b80      	ldr	r3, [pc, #512]	; (800accc <MX_LWIP_Init+0x244>)
 800aacc:	2201      	movs	r2, #1
 800aace:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800aad0:	4b7e      	ldr	r3, [pc, #504]	; (800accc <MX_LWIP_Init+0x244>)
 800aad2:	2201      	movs	r2, #1
 800aad4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800aad6:	f003 ff38 	bl	800e94a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800aada:	4b7a      	ldr	r3, [pc, #488]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	061a      	lsls	r2, r3, #24
 800aae0:	4b78      	ldr	r3, [pc, #480]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800aae2:	785b      	ldrb	r3, [r3, #1]
 800aae4:	041b      	lsls	r3, r3, #16
 800aae6:	431a      	orrs	r2, r3
 800aae8:	4b76      	ldr	r3, [pc, #472]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800aaea:	789b      	ldrb	r3, [r3, #2]
 800aaec:	021b      	lsls	r3, r3, #8
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	4a74      	ldr	r2, [pc, #464]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800aaf2:	78d2      	ldrb	r2, [r2, #3]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	061a      	lsls	r2, r3, #24
 800aaf8:	4b72      	ldr	r3, [pc, #456]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	0619      	lsls	r1, r3, #24
 800aafe:	4b71      	ldr	r3, [pc, #452]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800ab00:	785b      	ldrb	r3, [r3, #1]
 800ab02:	041b      	lsls	r3, r3, #16
 800ab04:	4319      	orrs	r1, r3
 800ab06:	4b6f      	ldr	r3, [pc, #444]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800ab08:	789b      	ldrb	r3, [r3, #2]
 800ab0a:	021b      	lsls	r3, r3, #8
 800ab0c:	430b      	orrs	r3, r1
 800ab0e:	496d      	ldr	r1, [pc, #436]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800ab10:	78c9      	ldrb	r1, [r1, #3]
 800ab12:	430b      	orrs	r3, r1
 800ab14:	021b      	lsls	r3, r3, #8
 800ab16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab1a:	431a      	orrs	r2, r3
 800ab1c:	4b69      	ldr	r3, [pc, #420]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	0619      	lsls	r1, r3, #24
 800ab22:	4b68      	ldr	r3, [pc, #416]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800ab24:	785b      	ldrb	r3, [r3, #1]
 800ab26:	041b      	lsls	r3, r3, #16
 800ab28:	4319      	orrs	r1, r3
 800ab2a:	4b66      	ldr	r3, [pc, #408]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800ab2c:	789b      	ldrb	r3, [r3, #2]
 800ab2e:	021b      	lsls	r3, r3, #8
 800ab30:	430b      	orrs	r3, r1
 800ab32:	4964      	ldr	r1, [pc, #400]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800ab34:	78c9      	ldrb	r1, [r1, #3]
 800ab36:	430b      	orrs	r3, r1
 800ab38:	0a1b      	lsrs	r3, r3, #8
 800ab3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ab3e:	431a      	orrs	r2, r3
 800ab40:	4b60      	ldr	r3, [pc, #384]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	0619      	lsls	r1, r3, #24
 800ab46:	4b5f      	ldr	r3, [pc, #380]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800ab48:	785b      	ldrb	r3, [r3, #1]
 800ab4a:	041b      	lsls	r3, r3, #16
 800ab4c:	4319      	orrs	r1, r3
 800ab4e:	4b5d      	ldr	r3, [pc, #372]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800ab50:	789b      	ldrb	r3, [r3, #2]
 800ab52:	021b      	lsls	r3, r3, #8
 800ab54:	430b      	orrs	r3, r1
 800ab56:	495b      	ldr	r1, [pc, #364]	; (800acc4 <MX_LWIP_Init+0x23c>)
 800ab58:	78c9      	ldrb	r1, [r1, #3]
 800ab5a:	430b      	orrs	r3, r1
 800ab5c:	0e1b      	lsrs	r3, r3, #24
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	4a5b      	ldr	r2, [pc, #364]	; (800acd0 <MX_LWIP_Init+0x248>)
 800ab62:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800ab64:	4b58      	ldr	r3, [pc, #352]	; (800acc8 <MX_LWIP_Init+0x240>)
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	061a      	lsls	r2, r3, #24
 800ab6a:	4b57      	ldr	r3, [pc, #348]	; (800acc8 <MX_LWIP_Init+0x240>)
 800ab6c:	785b      	ldrb	r3, [r3, #1]
 800ab6e:	041b      	lsls	r3, r3, #16
 800ab70:	431a      	orrs	r2, r3
 800ab72:	4b55      	ldr	r3, [pc, #340]	; (800acc8 <MX_LWIP_Init+0x240>)
 800ab74:	789b      	ldrb	r3, [r3, #2]
 800ab76:	021b      	lsls	r3, r3, #8
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	4a53      	ldr	r2, [pc, #332]	; (800acc8 <MX_LWIP_Init+0x240>)
 800ab7c:	78d2      	ldrb	r2, [r2, #3]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	061a      	lsls	r2, r3, #24
 800ab82:	4b51      	ldr	r3, [pc, #324]	; (800acc8 <MX_LWIP_Init+0x240>)
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	0619      	lsls	r1, r3, #24
 800ab88:	4b4f      	ldr	r3, [pc, #316]	; (800acc8 <MX_LWIP_Init+0x240>)
 800ab8a:	785b      	ldrb	r3, [r3, #1]
 800ab8c:	041b      	lsls	r3, r3, #16
 800ab8e:	4319      	orrs	r1, r3
 800ab90:	4b4d      	ldr	r3, [pc, #308]	; (800acc8 <MX_LWIP_Init+0x240>)
 800ab92:	789b      	ldrb	r3, [r3, #2]
 800ab94:	021b      	lsls	r3, r3, #8
 800ab96:	430b      	orrs	r3, r1
 800ab98:	494b      	ldr	r1, [pc, #300]	; (800acc8 <MX_LWIP_Init+0x240>)
 800ab9a:	78c9      	ldrb	r1, [r1, #3]
 800ab9c:	430b      	orrs	r3, r1
 800ab9e:	021b      	lsls	r3, r3, #8
 800aba0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aba4:	431a      	orrs	r2, r3
 800aba6:	4b48      	ldr	r3, [pc, #288]	; (800acc8 <MX_LWIP_Init+0x240>)
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	0619      	lsls	r1, r3, #24
 800abac:	4b46      	ldr	r3, [pc, #280]	; (800acc8 <MX_LWIP_Init+0x240>)
 800abae:	785b      	ldrb	r3, [r3, #1]
 800abb0:	041b      	lsls	r3, r3, #16
 800abb2:	4319      	orrs	r1, r3
 800abb4:	4b44      	ldr	r3, [pc, #272]	; (800acc8 <MX_LWIP_Init+0x240>)
 800abb6:	789b      	ldrb	r3, [r3, #2]
 800abb8:	021b      	lsls	r3, r3, #8
 800abba:	430b      	orrs	r3, r1
 800abbc:	4942      	ldr	r1, [pc, #264]	; (800acc8 <MX_LWIP_Init+0x240>)
 800abbe:	78c9      	ldrb	r1, [r1, #3]
 800abc0:	430b      	orrs	r3, r1
 800abc2:	0a1b      	lsrs	r3, r3, #8
 800abc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800abc8:	431a      	orrs	r2, r3
 800abca:	4b3f      	ldr	r3, [pc, #252]	; (800acc8 <MX_LWIP_Init+0x240>)
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	0619      	lsls	r1, r3, #24
 800abd0:	4b3d      	ldr	r3, [pc, #244]	; (800acc8 <MX_LWIP_Init+0x240>)
 800abd2:	785b      	ldrb	r3, [r3, #1]
 800abd4:	041b      	lsls	r3, r3, #16
 800abd6:	4319      	orrs	r1, r3
 800abd8:	4b3b      	ldr	r3, [pc, #236]	; (800acc8 <MX_LWIP_Init+0x240>)
 800abda:	789b      	ldrb	r3, [r3, #2]
 800abdc:	021b      	lsls	r3, r3, #8
 800abde:	430b      	orrs	r3, r1
 800abe0:	4939      	ldr	r1, [pc, #228]	; (800acc8 <MX_LWIP_Init+0x240>)
 800abe2:	78c9      	ldrb	r1, [r1, #3]
 800abe4:	430b      	orrs	r3, r1
 800abe6:	0e1b      	lsrs	r3, r3, #24
 800abe8:	4313      	orrs	r3, r2
 800abea:	4a3a      	ldr	r2, [pc, #232]	; (800acd4 <MX_LWIP_Init+0x24c>)
 800abec:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800abee:	4b37      	ldr	r3, [pc, #220]	; (800accc <MX_LWIP_Init+0x244>)
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	061a      	lsls	r2, r3, #24
 800abf4:	4b35      	ldr	r3, [pc, #212]	; (800accc <MX_LWIP_Init+0x244>)
 800abf6:	785b      	ldrb	r3, [r3, #1]
 800abf8:	041b      	lsls	r3, r3, #16
 800abfa:	431a      	orrs	r2, r3
 800abfc:	4b33      	ldr	r3, [pc, #204]	; (800accc <MX_LWIP_Init+0x244>)
 800abfe:	789b      	ldrb	r3, [r3, #2]
 800ac00:	021b      	lsls	r3, r3, #8
 800ac02:	4313      	orrs	r3, r2
 800ac04:	4a31      	ldr	r2, [pc, #196]	; (800accc <MX_LWIP_Init+0x244>)
 800ac06:	78d2      	ldrb	r2, [r2, #3]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	061a      	lsls	r2, r3, #24
 800ac0c:	4b2f      	ldr	r3, [pc, #188]	; (800accc <MX_LWIP_Init+0x244>)
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	0619      	lsls	r1, r3, #24
 800ac12:	4b2e      	ldr	r3, [pc, #184]	; (800accc <MX_LWIP_Init+0x244>)
 800ac14:	785b      	ldrb	r3, [r3, #1]
 800ac16:	041b      	lsls	r3, r3, #16
 800ac18:	4319      	orrs	r1, r3
 800ac1a:	4b2c      	ldr	r3, [pc, #176]	; (800accc <MX_LWIP_Init+0x244>)
 800ac1c:	789b      	ldrb	r3, [r3, #2]
 800ac1e:	021b      	lsls	r3, r3, #8
 800ac20:	430b      	orrs	r3, r1
 800ac22:	492a      	ldr	r1, [pc, #168]	; (800accc <MX_LWIP_Init+0x244>)
 800ac24:	78c9      	ldrb	r1, [r1, #3]
 800ac26:	430b      	orrs	r3, r1
 800ac28:	021b      	lsls	r3, r3, #8
 800ac2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac2e:	431a      	orrs	r2, r3
 800ac30:	4b26      	ldr	r3, [pc, #152]	; (800accc <MX_LWIP_Init+0x244>)
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	0619      	lsls	r1, r3, #24
 800ac36:	4b25      	ldr	r3, [pc, #148]	; (800accc <MX_LWIP_Init+0x244>)
 800ac38:	785b      	ldrb	r3, [r3, #1]
 800ac3a:	041b      	lsls	r3, r3, #16
 800ac3c:	4319      	orrs	r1, r3
 800ac3e:	4b23      	ldr	r3, [pc, #140]	; (800accc <MX_LWIP_Init+0x244>)
 800ac40:	789b      	ldrb	r3, [r3, #2]
 800ac42:	021b      	lsls	r3, r3, #8
 800ac44:	430b      	orrs	r3, r1
 800ac46:	4921      	ldr	r1, [pc, #132]	; (800accc <MX_LWIP_Init+0x244>)
 800ac48:	78c9      	ldrb	r1, [r1, #3]
 800ac4a:	430b      	orrs	r3, r1
 800ac4c:	0a1b      	lsrs	r3, r3, #8
 800ac4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ac52:	431a      	orrs	r2, r3
 800ac54:	4b1d      	ldr	r3, [pc, #116]	; (800accc <MX_LWIP_Init+0x244>)
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	0619      	lsls	r1, r3, #24
 800ac5a:	4b1c      	ldr	r3, [pc, #112]	; (800accc <MX_LWIP_Init+0x244>)
 800ac5c:	785b      	ldrb	r3, [r3, #1]
 800ac5e:	041b      	lsls	r3, r3, #16
 800ac60:	4319      	orrs	r1, r3
 800ac62:	4b1a      	ldr	r3, [pc, #104]	; (800accc <MX_LWIP_Init+0x244>)
 800ac64:	789b      	ldrb	r3, [r3, #2]
 800ac66:	021b      	lsls	r3, r3, #8
 800ac68:	430b      	orrs	r3, r1
 800ac6a:	4918      	ldr	r1, [pc, #96]	; (800accc <MX_LWIP_Init+0x244>)
 800ac6c:	78c9      	ldrb	r1, [r1, #3]
 800ac6e:	430b      	orrs	r3, r1
 800ac70:	0e1b      	lsrs	r3, r3, #24
 800ac72:	4313      	orrs	r3, r2
 800ac74:	4a18      	ldr	r2, [pc, #96]	; (800acd8 <MX_LWIP_Init+0x250>)
 800ac76:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800ac78:	4b18      	ldr	r3, [pc, #96]	; (800acdc <MX_LWIP_Init+0x254>)
 800ac7a:	9302      	str	r3, [sp, #8]
 800ac7c:	4b18      	ldr	r3, [pc, #96]	; (800ace0 <MX_LWIP_Init+0x258>)
 800ac7e:	9301      	str	r3, [sp, #4]
 800ac80:	2300      	movs	r3, #0
 800ac82:	9300      	str	r3, [sp, #0]
 800ac84:	4b14      	ldr	r3, [pc, #80]	; (800acd8 <MX_LWIP_Init+0x250>)
 800ac86:	4a13      	ldr	r2, [pc, #76]	; (800acd4 <MX_LWIP_Init+0x24c>)
 800ac88:	4911      	ldr	r1, [pc, #68]	; (800acd0 <MX_LWIP_Init+0x248>)
 800ac8a:	4816      	ldr	r0, [pc, #88]	; (800ace4 <MX_LWIP_Init+0x25c>)
 800ac8c:	f004 fb12 	bl	800f2b4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800ac90:	4814      	ldr	r0, [pc, #80]	; (800ace4 <MX_LWIP_Init+0x25c>)
 800ac92:	f004 fcc1 	bl	800f618 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800ac96:	4b13      	ldr	r3, [pc, #76]	; (800ace4 <MX_LWIP_Init+0x25c>)
 800ac98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ac9c:	089b      	lsrs	r3, r3, #2
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d003      	beq.n	800acb0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800aca8:	480e      	ldr	r0, [pc, #56]	; (800ace4 <MX_LWIP_Init+0x25c>)
 800acaa:	f004 fcc5 	bl	800f638 <netif_set_up>
 800acae:	e002      	b.n	800acb6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800acb0:	480c      	ldr	r0, [pc, #48]	; (800ace4 <MX_LWIP_Init+0x25c>)
 800acb2:	f004 fd2d 	bl	800f710 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800acb6:	490c      	ldr	r1, [pc, #48]	; (800ace8 <MX_LWIP_Init+0x260>)
 800acb8:	480a      	ldr	r0, [pc, #40]	; (800ace4 <MX_LWIP_Init+0x25c>)
 800acba:	f004 fd5b 	bl	800f774 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800acbe:	bf00      	nop
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	20004bb4 	.word	0x20004bb4
 800acc8:	20004bb0 	.word	0x20004bb0
 800accc:	20004b74 	.word	0x20004b74
 800acd0:	20004bac 	.word	0x20004bac
 800acd4:	20004bb8 	.word	0x20004bb8
 800acd8:	20004bbc 	.word	0x20004bbc
 800acdc:	08018e21 	.word	0x08018e21
 800ace0:	0800b2b5 	.word	0x0800b2b5
 800ace4:	20004b78 	.word	0x20004b78
 800ace8:	0800b321 	.word	0x0800b321

0800acec <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800acf0:	4803      	ldr	r0, [pc, #12]	; (800ad00 <MX_LWIP_Process+0x14>)
 800acf2:	f000 fabf 	bl	800b274 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800acf6:	f00b fcad 	bl	8016654 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800acfa:	bf00      	nop
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	20004b78 	.word	0x20004b78

0800ad04 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b08e      	sub	sp, #56	; 0x38
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad10:	2200      	movs	r2, #0
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	605a      	str	r2, [r3, #4]
 800ad16:	609a      	str	r2, [r3, #8]
 800ad18:	60da      	str	r2, [r3, #12]
 800ad1a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a4a      	ldr	r2, [pc, #296]	; (800ae4c <HAL_ETH_MspInit+0x148>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	f040 808d 	bne.w	800ae42 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800ad28:	2300      	movs	r3, #0
 800ad2a:	623b      	str	r3, [r7, #32]
 800ad2c:	4b48      	ldr	r3, [pc, #288]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800ad2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad30:	4a47      	ldr	r2, [pc, #284]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800ad32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ad36:	6313      	str	r3, [r2, #48]	; 0x30
 800ad38:	4b45      	ldr	r3, [pc, #276]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800ad3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad40:	623b      	str	r3, [r7, #32]
 800ad42:	6a3b      	ldr	r3, [r7, #32]
 800ad44:	2300      	movs	r3, #0
 800ad46:	61fb      	str	r3, [r7, #28]
 800ad48:	4b41      	ldr	r3, [pc, #260]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800ad4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4c:	4a40      	ldr	r2, [pc, #256]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800ad4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad52:	6313      	str	r3, [r2, #48]	; 0x30
 800ad54:	4b3e      	ldr	r3, [pc, #248]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800ad56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ad5c:	61fb      	str	r3, [r7, #28]
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	2300      	movs	r3, #0
 800ad62:	61bb      	str	r3, [r7, #24]
 800ad64:	4b3a      	ldr	r3, [pc, #232]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800ad66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad68:	4a39      	ldr	r2, [pc, #228]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800ad6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad6e:	6313      	str	r3, [r2, #48]	; 0x30
 800ad70:	4b37      	ldr	r3, [pc, #220]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800ad72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad78:	61bb      	str	r3, [r7, #24]
 800ad7a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	617b      	str	r3, [r7, #20]
 800ad80:	4b33      	ldr	r3, [pc, #204]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800ad82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad84:	4a32      	ldr	r2, [pc, #200]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800ad86:	f043 0304 	orr.w	r3, r3, #4
 800ad8a:	6313      	str	r3, [r2, #48]	; 0x30
 800ad8c:	4b30      	ldr	r3, [pc, #192]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800ad8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad90:	f003 0304 	and.w	r3, r3, #4
 800ad94:	617b      	str	r3, [r7, #20]
 800ad96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad98:	2300      	movs	r3, #0
 800ad9a:	613b      	str	r3, [r7, #16]
 800ad9c:	4b2c      	ldr	r3, [pc, #176]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800ad9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada0:	4a2b      	ldr	r2, [pc, #172]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800ada2:	f043 0301 	orr.w	r3, r3, #1
 800ada6:	6313      	str	r3, [r2, #48]	; 0x30
 800ada8:	4b29      	ldr	r3, [pc, #164]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800adaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adac:	f003 0301 	and.w	r3, r3, #1
 800adb0:	613b      	str	r3, [r7, #16]
 800adb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800adb4:	2300      	movs	r3, #0
 800adb6:	60fb      	str	r3, [r7, #12]
 800adb8:	4b25      	ldr	r3, [pc, #148]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800adba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adbc:	4a24      	ldr	r2, [pc, #144]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800adbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adc2:	6313      	str	r3, [r2, #48]	; 0x30
 800adc4:	4b22      	ldr	r3, [pc, #136]	; (800ae50 <HAL_ETH_MspInit+0x14c>)
 800adc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adcc:	60fb      	str	r3, [r7, #12]
 800adce:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800add0:	2332      	movs	r3, #50	; 0x32
 800add2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800add4:	2302      	movs	r3, #2
 800add6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800add8:	2300      	movs	r3, #0
 800adda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800addc:	2303      	movs	r3, #3
 800adde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ade0:	230b      	movs	r3, #11
 800ade2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ade4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ade8:	4619      	mov	r1, r3
 800adea:	481a      	ldr	r0, [pc, #104]	; (800ae54 <HAL_ETH_MspInit+0x150>)
 800adec:	f7fb f8b6 	bl	8005f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800adf0:	2386      	movs	r3, #134	; 0x86
 800adf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adf4:	2302      	movs	r3, #2
 800adf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adf8:	2300      	movs	r3, #0
 800adfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adfc:	2303      	movs	r3, #3
 800adfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ae00:	230b      	movs	r3, #11
 800ae02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae08:	4619      	mov	r1, r3
 800ae0a:	4813      	ldr	r0, [pc, #76]	; (800ae58 <HAL_ETH_MspInit+0x154>)
 800ae0c:	f7fb f8a6 	bl	8005f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800ae10:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800ae14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae16:	2302      	movs	r3, #2
 800ae18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae1e:	2303      	movs	r3, #3
 800ae20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ae22:	230b      	movs	r3, #11
 800ae24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ae26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	480b      	ldr	r0, [pc, #44]	; (800ae5c <HAL_ETH_MspInit+0x158>)
 800ae2e:	f7fb f895 	bl	8005f5c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 2, 0);
 800ae32:	2200      	movs	r2, #0
 800ae34:	2102      	movs	r1, #2
 800ae36:	203d      	movs	r0, #61	; 0x3d
 800ae38:	f7f7 fdc7 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800ae3c:	203d      	movs	r0, #61	; 0x3d
 800ae3e:	f7f7 fde0 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800ae42:	bf00      	nop
 800ae44:	3738      	adds	r7, #56	; 0x38
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	40028000 	.word	0x40028000
 800ae50:	40023800 	.word	0x40023800
 800ae54:	40020800 	.word	0x40020800
 800ae58:	40020000 	.word	0x40020000
 800ae5c:	40021800 	.word	0x40021800

0800ae60 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ae6c:	4b52      	ldr	r3, [pc, #328]	; (800afb8 <low_level_init+0x158>)
 800ae6e:	4a53      	ldr	r2, [pc, #332]	; (800afbc <low_level_init+0x15c>)
 800ae70:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800ae72:	4b51      	ldr	r3, [pc, #324]	; (800afb8 <low_level_init+0x158>)
 800ae74:	2201      	movs	r2, #1
 800ae76:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800ae78:	4b4f      	ldr	r3, [pc, #316]	; (800afb8 <low_level_init+0x158>)
 800ae7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ae7e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800ae80:	4b4d      	ldr	r3, [pc, #308]	; (800afb8 <low_level_init+0x158>)
 800ae82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae86:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800ae88:	4b4b      	ldr	r3, [pc, #300]	; (800afb8 <low_level_init+0x158>)
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800ae92:	2380      	movs	r3, #128	; 0x80
 800ae94:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800ae96:	23e1      	movs	r3, #225	; 0xe1
 800ae98:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800aea2:	2300      	movs	r3, #0
 800aea4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800aea6:	4a44      	ldr	r2, [pc, #272]	; (800afb8 <low_level_init+0x158>)
 800aea8:	f107 0308 	add.w	r3, r7, #8
 800aeac:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800aeae:	4b42      	ldr	r3, [pc, #264]	; (800afb8 <low_level_init+0x158>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800aeb4:	4b40      	ldr	r3, [pc, #256]	; (800afb8 <low_level_init+0x158>)
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800aeba:	4b3f      	ldr	r3, [pc, #252]	; (800afb8 <low_level_init+0x158>)
 800aebc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800aec0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800aec2:	483d      	ldr	r0, [pc, #244]	; (800afb8 <low_level_init+0x158>)
 800aec4:	f7f9 fe9e 	bl	8004c04 <HAL_ETH_Init>
 800aec8:	4603      	mov	r3, r0
 800aeca:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800aecc:	7dfb      	ldrb	r3, [r7, #23]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d108      	bne.n	800aee4 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aed8:	f043 0304 	orr.w	r3, r3, #4
 800aedc:	b2da      	uxtb	r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800aee4:	2304      	movs	r3, #4
 800aee6:	4a36      	ldr	r2, [pc, #216]	; (800afc0 <low_level_init+0x160>)
 800aee8:	4936      	ldr	r1, [pc, #216]	; (800afc4 <low_level_init+0x164>)
 800aeea:	4833      	ldr	r0, [pc, #204]	; (800afb8 <low_level_init+0x158>)
 800aeec:	f7fa f826 	bl	8004f3c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800aef0:	2304      	movs	r3, #4
 800aef2:	4a35      	ldr	r2, [pc, #212]	; (800afc8 <low_level_init+0x168>)
 800aef4:	4935      	ldr	r1, [pc, #212]	; (800afcc <low_level_init+0x16c>)
 800aef6:	4830      	ldr	r0, [pc, #192]	; (800afb8 <low_level_init+0x158>)
 800aef8:	f7fa f889 	bl	800500e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2206      	movs	r2, #6
 800af00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800af04:	4b2c      	ldr	r3, [pc, #176]	; (800afb8 <low_level_init+0x158>)
 800af06:	695b      	ldr	r3, [r3, #20]
 800af08:	781a      	ldrb	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800af10:	4b29      	ldr	r3, [pc, #164]	; (800afb8 <low_level_init+0x158>)
 800af12:	695b      	ldr	r3, [r3, #20]
 800af14:	785a      	ldrb	r2, [r3, #1]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800af1c:	4b26      	ldr	r3, [pc, #152]	; (800afb8 <low_level_init+0x158>)
 800af1e:	695b      	ldr	r3, [r3, #20]
 800af20:	789a      	ldrb	r2, [r3, #2]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800af28:	4b23      	ldr	r3, [pc, #140]	; (800afb8 <low_level_init+0x158>)
 800af2a:	695b      	ldr	r3, [r3, #20]
 800af2c:	78da      	ldrb	r2, [r3, #3]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800af34:	4b20      	ldr	r3, [pc, #128]	; (800afb8 <low_level_init+0x158>)
 800af36:	695b      	ldr	r3, [r3, #20]
 800af38:	791a      	ldrb	r2, [r3, #4]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800af40:	4b1d      	ldr	r3, [pc, #116]	; (800afb8 <low_level_init+0x158>)
 800af42:	695b      	ldr	r3, [r3, #20]
 800af44:	795a      	ldrb	r2, [r3, #5]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800af52:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af5a:	f043 030a 	orr.w	r3, r3, #10
 800af5e:	b2da      	uxtb	r2, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800af66:	4814      	ldr	r0, [pc, #80]	; (800afb8 <low_level_init+0x158>)
 800af68:	f7fa fb7f 	bl	800566a <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 800af6c:	f107 0310 	add.w	r3, r7, #16
 800af70:	461a      	mov	r2, r3
 800af72:	2111      	movs	r1, #17
 800af74:	4810      	ldr	r0, [pc, #64]	; (800afb8 <low_level_init+0x158>)
 800af76:	f7fa faaa 	bl	80054ce <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	f043 0303 	orr.w	r3, r3, #3
 800af80:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	461a      	mov	r2, r3
 800af86:	2111      	movs	r1, #17
 800af88:	480b      	ldr	r0, [pc, #44]	; (800afb8 <low_level_init+0x158>)
 800af8a:	f7fa fb08 	bl	800559e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800af8e:	f107 0310 	add.w	r3, r7, #16
 800af92:	461a      	mov	r2, r3
 800af94:	2112      	movs	r1, #18
 800af96:	4808      	ldr	r0, [pc, #32]	; (800afb8 <low_level_init+0x158>)
 800af98:	f7fa fa99 	bl	80054ce <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	f043 0320 	orr.w	r3, r3, #32
 800afa2:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	461a      	mov	r2, r3
 800afa8:	2112      	movs	r1, #18
 800afaa:	4803      	ldr	r0, [pc, #12]	; (800afb8 <low_level_init+0x158>)
 800afac:	f7fa faf7 	bl	800559e <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800afb0:	bf00      	nop
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	20006490 	.word	0x20006490
 800afbc:	40028000 	.word	0x40028000
 800afc0:	200064d8 	.word	0x200064d8
 800afc4:	20004bc0 	.word	0x20004bc0
 800afc8:	20004c40 	.word	0x20004c40
 800afcc:	20006410 	.word	0x20006410

0800afd0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b08a      	sub	sp, #40	; 0x28
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800afda:	4b4b      	ldr	r3, [pc, #300]	; (800b108 <low_level_output+0x138>)
 800afdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800afe2:	2300      	movs	r3, #0
 800afe4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800afe6:	2300      	movs	r3, #0
 800afe8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800afea:	2300      	movs	r3, #0
 800afec:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800afee:	2300      	movs	r3, #0
 800aff0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800aff2:	4b45      	ldr	r3, [pc, #276]	; (800b108 <low_level_output+0x138>)
 800aff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800aff8:	2300      	movs	r3, #0
 800affa:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	623b      	str	r3, [r7, #32]
 800b000:	e05a      	b.n	800b0b8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	da03      	bge.n	800b012 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800b00a:	23f8      	movs	r3, #248	; 0xf8
 800b00c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800b010:	e05c      	b.n	800b0cc <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800b012:	6a3b      	ldr	r3, [r7, #32]
 800b014:	895b      	ldrh	r3, [r3, #10]
 800b016:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800b018:	2300      	movs	r3, #0
 800b01a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b01c:	e02f      	b.n	800b07e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800b01e:	69fa      	ldr	r2, [r7, #28]
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	18d0      	adds	r0, r2, r3
 800b024:	6a3b      	ldr	r3, [r7, #32]
 800b026:	685a      	ldr	r2, [r3, #4]
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	18d1      	adds	r1, r2, r3
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800b032:	3304      	adds	r3, #4
 800b034:	461a      	mov	r2, r3
 800b036:	f00e fb55 	bl	80196e4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b040:	69bb      	ldr	r3, [r7, #24]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	da03      	bge.n	800b050 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800b048:	23f8      	movs	r3, #248	; 0xf8
 800b04a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800b04e:	e03d      	b.n	800b0cc <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800b056:	693a      	ldr	r2, [r7, #16]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	4413      	add	r3, r2
 800b05c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b060:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800b062:	68ba      	ldr	r2, [r7, #8]
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b06c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b078:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800b07a:	2300      	movs	r3, #0
 800b07c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	4413      	add	r3, r2
 800b084:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b088:	4293      	cmp	r3, r2
 800b08a:	d8c8      	bhi.n	800b01e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800b08c:	69fa      	ldr	r2, [r7, #28]
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	18d0      	adds	r0, r2, r3
 800b092:	6a3b      	ldr	r3, [r7, #32]
 800b094:	685a      	ldr	r2, [r3, #4]
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	4413      	add	r3, r2
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	4619      	mov	r1, r3
 800b09e:	f00e fb21 	bl	80196e4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b0a2:	693a      	ldr	r2, [r7, #16]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800b0aa:	697a      	ldr	r2, [r7, #20]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800b0b2:	6a3b      	ldr	r3, [r7, #32]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	623b      	str	r3, [r7, #32]
 800b0b8:	6a3b      	ldr	r3, [r7, #32]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d1a1      	bne.n	800b002 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800b0be:	6979      	ldr	r1, [r7, #20]
 800b0c0:	4811      	ldr	r0, [pc, #68]	; (800b108 <low_level_output+0x138>)
 800b0c2:	f7fa f811 	bl	80050e8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800b0cc:	4b0e      	ldr	r3, [pc, #56]	; (800b108 <low_level_output+0x138>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0d4:	3314      	adds	r3, #20
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f003 0320 	and.w	r3, r3, #32
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00d      	beq.n	800b0fc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800b0e0:	4b09      	ldr	r3, [pc, #36]	; (800b108 <low_level_output+0x138>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0e8:	3314      	adds	r3, #20
 800b0ea:	2220      	movs	r2, #32
 800b0ec:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800b0ee:	4b06      	ldr	r3, [pc, #24]	; (800b108 <low_level_output+0x138>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800b0fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b100:	4618      	mov	r0, r3
 800b102:	3728      	adds	r7, #40	; 0x28
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	20006490 	.word	0x20006490

0800b10c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b08c      	sub	sp, #48	; 0x30
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b114:	2300      	movs	r3, #0
 800b116:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800b118:	2300      	movs	r3, #0
 800b11a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800b11c:	2300      	movs	r3, #0
 800b11e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800b120:	2300      	movs	r3, #0
 800b122:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800b124:	2300      	movs	r3, #0
 800b126:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800b128:	2300      	movs	r3, #0
 800b12a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800b12c:	2300      	movs	r3, #0
 800b12e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800b130:	484f      	ldr	r0, [pc, #316]	; (800b270 <low_level_input+0x164>)
 800b132:	f7fa f8c3 	bl	80052bc <HAL_ETH_GetReceivedFrame>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <low_level_input+0x34>

    return NULL;
 800b13c:	2300      	movs	r3, #0
 800b13e:	e092      	b.n	800b266 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800b140:	4b4b      	ldr	r3, [pc, #300]	; (800b270 <low_level_input+0x164>)
 800b142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b144:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800b146:	4b4a      	ldr	r3, [pc, #296]	; (800b270 <low_level_input+0x164>)
 800b148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800b14c:	89fb      	ldrh	r3, [r7, #14]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d007      	beq.n	800b162 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800b152:	89fb      	ldrh	r3, [r7, #14]
 800b154:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800b158:	4619      	mov	r1, r3
 800b15a:	2000      	movs	r0, #0
 800b15c:	f004 fba6 	bl	800f8ac <pbuf_alloc>
 800b160:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800b162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b164:	2b00      	cmp	r3, #0
 800b166:	d04b      	beq.n	800b200 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b168:	4b41      	ldr	r3, [pc, #260]	; (800b270 <low_level_input+0x164>)
 800b16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b16c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800b16e:	2300      	movs	r3, #0
 800b170:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b174:	62bb      	str	r3, [r7, #40]	; 0x28
 800b176:	e040      	b.n	800b1fa <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800b178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17a:	895b      	ldrh	r3, [r3, #10]
 800b17c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800b17e:	2300      	movs	r3, #0
 800b180:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b182:	e021      	b.n	800b1c8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800b184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b186:	685a      	ldr	r2, [r3, #4]
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	18d0      	adds	r0, r2, r3
 800b18c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	18d1      	adds	r1, r2, r3
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800b198:	3304      	adds	r3, #4
 800b19a:	461a      	mov	r2, r3
 800b19c:	f00e faa2 	bl	80196e4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b1a0:	6a3b      	ldr	r3, [r7, #32]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800b1ac:	69fa      	ldr	r2, [r7, #28]
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b1b6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800b1b8:	69ba      	ldr	r2, [r7, #24]
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	1ad3      	subs	r3, r2, r3
 800b1be:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b1c2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b1c8:	697a      	ldr	r2, [r7, #20]
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d8d6      	bhi.n	800b184 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800b1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d8:	685a      	ldr	r2, [r3, #4]
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	18d0      	adds	r0, r2, r3
 800b1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	697a      	ldr	r2, [r7, #20]
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	f00e fa7c 	bl	80196e4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b1ec:	69fa      	ldr	r2, [r7, #28]
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1bb      	bne.n	800b178 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b200:	4b1b      	ldr	r3, [pc, #108]	; (800b270 <low_level_input+0x164>)
 800b202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b204:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b206:	2300      	movs	r3, #0
 800b208:	613b      	str	r3, [r7, #16]
 800b20a:	e00b      	b.n	800b224 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b20c:	6a3b      	ldr	r3, [r7, #32]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b214:	6a3b      	ldr	r3, [r7, #32]
 800b216:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b218:	6a3b      	ldr	r3, [r7, #32]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	3301      	adds	r3, #1
 800b222:	613b      	str	r3, [r7, #16]
 800b224:	4b12      	ldr	r3, [pc, #72]	; (800b270 <low_level_input+0x164>)
 800b226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b228:	693a      	ldr	r2, [r7, #16]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d3ee      	bcc.n	800b20c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800b22e:	4b10      	ldr	r3, [pc, #64]	; (800b270 <low_level_input+0x164>)
 800b230:	2200      	movs	r2, #0
 800b232:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800b234:	4b0e      	ldr	r3, [pc, #56]	; (800b270 <low_level_input+0x164>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b23c:	3314      	adds	r3, #20
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b244:	2b00      	cmp	r3, #0
 800b246:	d00d      	beq.n	800b264 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800b248:	4b09      	ldr	r3, [pc, #36]	; (800b270 <low_level_input+0x164>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b250:	3314      	adds	r3, #20
 800b252:	2280      	movs	r2, #128	; 0x80
 800b254:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800b256:	4b06      	ldr	r3, [pc, #24]	; (800b270 <low_level_input+0x164>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b25e:	3308      	adds	r3, #8
 800b260:	2200      	movs	r2, #0
 800b262:	601a      	str	r2, [r3, #0]
  }
  return p;
 800b264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b266:	4618      	mov	r0, r3
 800b268:	3730      	adds	r7, #48	; 0x30
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	20006490 	.word	0x20006490

0800b274 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f7ff ff45 	bl	800b10c <low_level_input>
 800b282:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d010      	beq.n	800b2ac <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	691b      	ldr	r3, [r3, #16]
 800b28e:	6879      	ldr	r1, [r7, #4]
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	4798      	blx	r3
 800b294:	4603      	mov	r3, r0
 800b296:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800b298:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d006      	beq.n	800b2ae <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f004 fde7 	bl	800fe74 <pbuf_free>
    p = NULL;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	60fb      	str	r3, [r7, #12]
 800b2aa:	e000      	b.n	800b2ae <ethernetif_input+0x3a>
  if (p == NULL) return;
 800b2ac:	bf00      	nop
  }
}
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d106      	bne.n	800b2d0 <ethernetif_init+0x1c>
 800b2c2:	4b0e      	ldr	r3, [pc, #56]	; (800b2fc <ethernetif_init+0x48>)
 800b2c4:	f240 2215 	movw	r2, #533	; 0x215
 800b2c8:	490d      	ldr	r1, [pc, #52]	; (800b300 <ethernetif_init+0x4c>)
 800b2ca:	480e      	ldr	r0, [pc, #56]	; (800b304 <ethernetif_init+0x50>)
 800b2cc:	f00e ff34 	bl	801a138 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2273      	movs	r2, #115	; 0x73
 800b2d4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2274      	movs	r2, #116	; 0x74
 800b2dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a09      	ldr	r2, [pc, #36]	; (800b308 <ethernetif_init+0x54>)
 800b2e4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a08      	ldr	r2, [pc, #32]	; (800b30c <ethernetif_init+0x58>)
 800b2ea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f7ff fdb7 	bl	800ae60 <low_level_init>

  return ERR_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	0801c30c 	.word	0x0801c30c
 800b300:	0801c328 	.word	0x0801c328
 800b304:	0801c338 	.word	0x0801c338
 800b308:	080172e5 	.word	0x080172e5
 800b30c:	0800afd1 	.word	0x0800afd1

0800b310 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b314:	f7f7 fa4e 	bl	80027b4 <HAL_GetTick>
 800b318:	4603      	mov	r3, r0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	bd80      	pop	{r7, pc}
	...

0800b320 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800b328:	2300      	movs	r3, #0
 800b32a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800b32c:	2300      	movs	r3, #0
 800b32e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b336:	089b      	lsrs	r3, r3, #2
 800b338:	f003 0301 	and.w	r3, r3, #1
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d05d      	beq.n	800b3fe <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b342:	4b34      	ldr	r3, [pc, #208]	; (800b414 <ethernetif_update_config+0xf4>)
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d03f      	beq.n	800b3ca <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800b34a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b34e:	2100      	movs	r1, #0
 800b350:	4830      	ldr	r0, [pc, #192]	; (800b414 <ethernetif_update_config+0xf4>)
 800b352:	f7fa f924 	bl	800559e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800b356:	f7f7 fa2d 	bl	80027b4 <HAL_GetTick>
 800b35a:	4603      	mov	r3, r0
 800b35c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b35e:	f107 0308 	add.w	r3, r7, #8
 800b362:	461a      	mov	r2, r3
 800b364:	2101      	movs	r1, #1
 800b366:	482b      	ldr	r0, [pc, #172]	; (800b414 <ethernetif_update_config+0xf4>)
 800b368:	f7fa f8b1 	bl	80054ce <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800b36c:	f7f7 fa22 	bl	80027b4 <HAL_GetTick>
 800b370:	4602      	mov	r2, r0
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b37a:	d828      	bhi.n	800b3ce <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	f003 0320 	and.w	r3, r3, #32
 800b382:	2b00      	cmp	r3, #0
 800b384:	d0eb      	beq.n	800b35e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800b386:	f107 0308 	add.w	r3, r7, #8
 800b38a:	461a      	mov	r2, r3
 800b38c:	2131      	movs	r1, #49	; 0x31
 800b38e:	4821      	ldr	r0, [pc, #132]	; (800b414 <ethernetif_update_config+0xf4>)
 800b390:	f7fa f89d 	bl	80054ce <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	f003 0310 	and.w	r3, r3, #16
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d004      	beq.n	800b3a8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b39e:	4b1d      	ldr	r3, [pc, #116]	; (800b414 <ethernetif_update_config+0xf4>)
 800b3a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3a4:	60da      	str	r2, [r3, #12]
 800b3a6:	e002      	b.n	800b3ae <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800b3a8:	4b1a      	ldr	r3, [pc, #104]	; (800b414 <ethernetif_update_config+0xf4>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	f003 0304 	and.w	r3, r3, #4
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d003      	beq.n	800b3c0 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800b3b8:	4b16      	ldr	r3, [pc, #88]	; (800b414 <ethernetif_update_config+0xf4>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	609a      	str	r2, [r3, #8]
 800b3be:	e016      	b.n	800b3ee <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800b3c0:	4b14      	ldr	r3, [pc, #80]	; (800b414 <ethernetif_update_config+0xf4>)
 800b3c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b3c6:	609a      	str	r2, [r3, #8]
 800b3c8:	e011      	b.n	800b3ee <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800b3ca:	bf00      	nop
 800b3cc:	e000      	b.n	800b3d0 <ethernetif_update_config+0xb0>
          goto error;
 800b3ce:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b3d0:	4b10      	ldr	r3, [pc, #64]	; (800b414 <ethernetif_update_config+0xf4>)
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	08db      	lsrs	r3, r3, #3
 800b3d6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800b3d8:	4b0e      	ldr	r3, [pc, #56]	; (800b414 <ethernetif_update_config+0xf4>)
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	085b      	lsrs	r3, r3, #1
 800b3de:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	480a      	ldr	r0, [pc, #40]	; (800b414 <ethernetif_update_config+0xf4>)
 800b3ea:	f7fa f8d8 	bl	800559e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	4808      	ldr	r0, [pc, #32]	; (800b414 <ethernetif_update_config+0xf4>)
 800b3f2:	f7fa f999 	bl	8005728 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800b3f6:	4807      	ldr	r0, [pc, #28]	; (800b414 <ethernetif_update_config+0xf4>)
 800b3f8:	f7fa f937 	bl	800566a <HAL_ETH_Start>
 800b3fc:	e002      	b.n	800b404 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800b3fe:	4805      	ldr	r0, [pc, #20]	; (800b414 <ethernetif_update_config+0xf4>)
 800b400:	f7fa f962 	bl	80056c8 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 f807 	bl	800b418 <ethernetif_notify_conn_changed>
}
 800b40a:	bf00      	nop
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	20006490 	.word	0x20006490

0800b418 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b42c:	b590      	push	{r4, r7, lr}
 800b42e:	b089      	sub	sp, #36	; 0x24
 800b430:	af04      	add	r7, sp, #16
 800b432:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b43a:	7919      	ldrb	r1, [r3, #4]
 800b43c:	2350      	movs	r3, #80	; 0x50
 800b43e:	2206      	movs	r2, #6
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f001 fe1b 	bl	800d07c <USBH_FindInterface>
 800b446:	4603      	mov	r3, r0
 800b448:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800b44a:	7bfb      	ldrb	r3, [r7, #15]
 800b44c:	2bff      	cmp	r3, #255	; 0xff
 800b44e:	d002      	beq.n	800b456 <USBH_MSC_InterfaceInit+0x2a>
 800b450:	7bfb      	ldrb	r3, [r7, #15]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d90f      	bls.n	800b476 <USBH_MSC_InterfaceInit+0x4a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800b456:	4886      	ldr	r0, [pc, #536]	; (800b670 <USBH_MSC_InterfaceInit+0x244>)
 800b458:	f00e fe6e 	bl	801a138 <iprintf>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4619      	mov	r1, r3
 800b466:	4883      	ldr	r0, [pc, #524]	; (800b674 <USBH_MSC_InterfaceInit+0x248>)
 800b468:	f00e fe66 	bl	801a138 <iprintf>
 800b46c:	200a      	movs	r0, #10
 800b46e:	f00e fe7b 	bl	801a168 <putchar>
    return USBH_FAIL;
 800b472:	2302      	movs	r3, #2
 800b474:	e0f8      	b.n	800b668 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800b476:	7bfb      	ldrb	r3, [r7, #15]
 800b478:	4619      	mov	r1, r3
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f001 fd96 	bl	800cfac <USBH_SelectInterface>
 800b480:	4603      	mov	r3, r0
 800b482:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b484:	7bbb      	ldrb	r3, [r7, #14]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d001      	beq.n	800b48e <USBH_MSC_InterfaceInit+0x62>
  {
    return USBH_FAIL;
 800b48a:	2302      	movs	r3, #2
 800b48c:	e0ec      	b.n	800b668 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b494:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b498:	f00e f906 	bl	80196a8 <malloc>
 800b49c:	4603      	mov	r3, r0
 800b49e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4a6:	69db      	ldr	r3, [r3, #28]
 800b4a8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d10a      	bne.n	800b4c6 <USBH_MSC_InterfaceInit+0x9a>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 800b4b0:	486f      	ldr	r0, [pc, #444]	; (800b670 <USBH_MSC_InterfaceInit+0x244>)
 800b4b2:	f00e fe41 	bl	801a138 <iprintf>
 800b4b6:	4870      	ldr	r0, [pc, #448]	; (800b678 <USBH_MSC_InterfaceInit+0x24c>)
 800b4b8:	f00e fe3e 	bl	801a138 <iprintf>
 800b4bc:	200a      	movs	r0, #10
 800b4be:	f00e fe53 	bl	801a168 <putchar>
    return USBH_FAIL;
 800b4c2:	2302      	movs	r3, #2
 800b4c4:	e0d0      	b.n	800b668 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800b4c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4ca:	2100      	movs	r1, #0
 800b4cc:	68b8      	ldr	r0, [r7, #8]
 800b4ce:	f00e f917 	bl	8019700 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b4d2:	7bfb      	ldrb	r3, [r7, #15]
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	211a      	movs	r1, #26
 800b4d8:	fb01 f303 	mul.w	r3, r1, r3
 800b4dc:	4413      	add	r3, r2
 800b4de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	b25b      	sxtb	r3, r3
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	da16      	bge.n	800b518 <USBH_MSC_InterfaceInit+0xec>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b4ea:	7bfb      	ldrb	r3, [r7, #15]
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	211a      	movs	r1, #26
 800b4f0:	fb01 f303 	mul.w	r3, r1, r3
 800b4f4:	4413      	add	r3, r2
 800b4f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b4fa:	781a      	ldrb	r2, [r3, #0]
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b500:	7bfb      	ldrb	r3, [r7, #15]
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	211a      	movs	r1, #26
 800b506:	fb01 f303 	mul.w	r3, r1, r3
 800b50a:	4413      	add	r3, r2
 800b50c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b510:	881a      	ldrh	r2, [r3, #0]
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	815a      	strh	r2, [r3, #10]
 800b516:	e015      	b.n	800b544 <USBH_MSC_InterfaceInit+0x118>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b518:	7bfb      	ldrb	r3, [r7, #15]
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	211a      	movs	r1, #26
 800b51e:	fb01 f303 	mul.w	r3, r1, r3
 800b522:	4413      	add	r3, r2
 800b524:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b528:	781a      	ldrb	r2, [r3, #0]
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b52e:	7bfb      	ldrb	r3, [r7, #15]
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	211a      	movs	r1, #26
 800b534:	fb01 f303 	mul.w	r3, r1, r3
 800b538:	4413      	add	r3, r2
 800b53a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b53e:	881a      	ldrh	r2, [r3, #0]
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b544:	7bfb      	ldrb	r3, [r7, #15]
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	211a      	movs	r1, #26
 800b54a:	fb01 f303 	mul.w	r3, r1, r3
 800b54e:	4413      	add	r3, r2
 800b550:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	b25b      	sxtb	r3, r3
 800b558:	2b00      	cmp	r3, #0
 800b55a:	da16      	bge.n	800b58a <USBH_MSC_InterfaceInit+0x15e>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	211a      	movs	r1, #26
 800b562:	fb01 f303 	mul.w	r3, r1, r3
 800b566:	4413      	add	r3, r2
 800b568:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b56c:	781a      	ldrb	r2, [r3, #0]
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b572:	7bfb      	ldrb	r3, [r7, #15]
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	211a      	movs	r1, #26
 800b578:	fb01 f303 	mul.w	r3, r1, r3
 800b57c:	4413      	add	r3, r2
 800b57e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b582:	881a      	ldrh	r2, [r3, #0]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	815a      	strh	r2, [r3, #10]
 800b588:	e015      	b.n	800b5b6 <USBH_MSC_InterfaceInit+0x18a>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b58a:	7bfb      	ldrb	r3, [r7, #15]
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	211a      	movs	r1, #26
 800b590:	fb01 f303 	mul.w	r3, r1, r3
 800b594:	4413      	add	r3, r2
 800b596:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b59a:	781a      	ldrb	r2, [r3, #0]
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	211a      	movs	r1, #26
 800b5a6:	fb01 f303 	mul.w	r3, r1, r3
 800b5aa:	4413      	add	r3, r2
 800b5ac:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b5b0:	881a      	ldrh	r2, [r3, #0]
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	799b      	ldrb	r3, [r3, #6]
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f003 f8cf 	bl	800e772 <USBH_AllocPipe>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	79db      	ldrb	r3, [r3, #7]
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f003 f8c5 	bl	800e772 <USBH_AllocPipe>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 feed 	bl	800c3d0 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	7959      	ldrb	r1, [r3, #5]
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	7998      	ldrb	r0, [r3, #6]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	8912      	ldrh	r2, [r2, #8]
 800b60e:	9202      	str	r2, [sp, #8]
 800b610:	2202      	movs	r2, #2
 800b612:	9201      	str	r2, [sp, #4]
 800b614:	9300      	str	r3, [sp, #0]
 800b616:	4623      	mov	r3, r4
 800b618:	4602      	mov	r2, r0
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f003 f87a 	bl	800e714 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	7919      	ldrb	r1, [r3, #4]
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	79d8      	ldrb	r0, [r3, #7]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	8952      	ldrh	r2, [r2, #10]
 800b638:	9202      	str	r2, [sp, #8]
 800b63a:	2202      	movs	r2, #2
 800b63c:	9201      	str	r2, [sp, #4]
 800b63e:	9300      	str	r3, [sp, #0]
 800b640:	4623      	mov	r3, r4
 800b642:	4602      	mov	r2, r0
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f003 f865 	bl	800e714 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	791b      	ldrb	r3, [r3, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	4619      	mov	r1, r3
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f00d ff50 	bl	80194f8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	795b      	ldrb	r3, [r3, #5]
 800b65c:	2200      	movs	r2, #0
 800b65e:	4619      	mov	r1, r3
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f00d ff49 	bl	80194f8 <USBH_LL_SetToggle>

  return USBH_OK;
 800b666:	2300      	movs	r3, #0
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3714      	adds	r7, #20
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd90      	pop	{r4, r7, pc}
 800b670:	0801c364 	.word	0x0801c364
 800b674:	0801c370 	.word	0x0801c370
 800b678:	0801c398 	.word	0x0801c398

0800b67c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b68a:	69db      	ldr	r3, [r3, #28]
 800b68c:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	795b      	ldrb	r3, [r3, #5]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00e      	beq.n	800b6b4 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	795b      	ldrb	r3, [r3, #5]
 800b69a:	4619      	mov	r1, r3
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f003 f858 	bl	800e752 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	795b      	ldrb	r3, [r3, #5]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f003 f883 	bl	800e7b4 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	791b      	ldrb	r3, [r3, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00e      	beq.n	800b6da <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	791b      	ldrb	r3, [r3, #4]
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f003 f845 	bl	800e752 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	791b      	ldrb	r3, [r3, #4]
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f003 f870 	bl	800e7b4 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b6e0:	69db      	ldr	r3, [r3, #28]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00b      	beq.n	800b6fe <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b6ec:	69db      	ldr	r3, [r3, #28]
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f00d ffe2 	bl	80196b8 <free>
    phost->pActiveClass->pData = 0U;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b716:	69db      	ldr	r3, [r3, #28]
 800b718:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b71a:	2301      	movs	r3, #1
 800b71c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	7b9b      	ldrb	r3, [r3, #14]
 800b722:	2b03      	cmp	r3, #3
 800b724:	d04a      	beq.n	800b7bc <USBH_MSC_ClassRequest+0xb4>
 800b726:	2b03      	cmp	r3, #3
 800b728:	dc54      	bgt.n	800b7d4 <USBH_MSC_ClassRequest+0xcc>
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d001      	beq.n	800b732 <USBH_MSC_ClassRequest+0x2a>
 800b72e:	2b02      	cmp	r3, #2
 800b730:	d150      	bne.n	800b7d4 <USBH_MSC_ClassRequest+0xcc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 fe2b 	bl	800c392 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800b73c:	4603      	mov	r3, r0
 800b73e:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800b740:	7bfb      	ldrb	r3, [r7, #15]
 800b742:	2b03      	cmp	r3, #3
 800b744:	d104      	bne.n	800b750 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	2200      	movs	r2, #0
 800b74a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800b750:	7bfb      	ldrb	r3, [r7, #15]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d140      	bne.n	800b7d8 <USBH_MSC_ClassRequest+0xd0>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	2b02      	cmp	r3, #2
 800b75c:	d804      	bhi.n	800b768 <USBH_MSC_ClassRequest+0x60>
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	3301      	adds	r3, #1
 800b764:	b2da      	uxtb	r2, r3
 800b766:	e000      	b.n	800b76a <USBH_MSC_ClassRequest+0x62>
 800b768:	2202      	movs	r2, #2
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	4619      	mov	r1, r3
 800b774:	481c      	ldr	r0, [pc, #112]	; (800b7e8 <USBH_MSC_ClassRequest+0xe0>)
 800b776:	f00e fcdf 	bl	801a138 <iprintf>
 800b77a:	200a      	movs	r0, #10
 800b77c:	f00e fcf4 	bl	801a168 <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b780:	2300      	movs	r3, #0
 800b782:	73bb      	strb	r3, [r7, #14]
 800b784:	e014      	b.n	800b7b0 <USBH_MSC_ClassRequest+0xa8>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800b786:	7bbb      	ldrb	r3, [r7, #14]
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	2134      	movs	r1, #52	; 0x34
 800b78c:	fb01 f303 	mul.w	r3, r1, r3
 800b790:	4413      	add	r3, r2
 800b792:	3392      	adds	r3, #146	; 0x92
 800b794:	2202      	movs	r2, #2
 800b796:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800b798:	7bbb      	ldrb	r3, [r7, #14]
 800b79a:	68ba      	ldr	r2, [r7, #8]
 800b79c:	2134      	movs	r1, #52	; 0x34
 800b79e:	fb01 f303 	mul.w	r3, r1, r3
 800b7a2:	4413      	add	r3, r2
 800b7a4:	33c1      	adds	r3, #193	; 0xc1
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b7aa:	7bbb      	ldrb	r3, [r7, #14]
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	73bb      	strb	r3, [r7, #14]
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	7bba      	ldrb	r2, [r7, #14]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d3e5      	bcc.n	800b786 <USBH_MSC_ClassRequest+0x7e>
        }
      }
      break;
 800b7ba:	e00d      	b.n	800b7d8 <USBH_MSC_ClassRequest+0xd0>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800b7bc:	2100      	movs	r1, #0
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f002 fb69 	bl	800de96 <USBH_ClrFeature>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d108      	bne.n	800b7dc <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	7bda      	ldrb	r2, [r3, #15]
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	739a      	strb	r2, [r3, #14]
      }
      break;
 800b7d2:	e003      	b.n	800b7dc <USBH_MSC_ClassRequest+0xd4>

    default:
      break;
 800b7d4:	bf00      	nop
 800b7d6:	e002      	b.n	800b7de <USBH_MSC_ClassRequest+0xd6>
      break;
 800b7d8:	bf00      	nop
 800b7da:	e000      	b.n	800b7de <USBH_MSC_ClassRequest+0xd6>
      break;
 800b7dc:	bf00      	nop
  }

  return status;
 800b7de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	0801c3c0 	.word	0x0801c3c0

0800b7ec <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7fa:	69db      	ldr	r3, [r3, #28]
 800b7fc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800b7fe:	2301      	movs	r3, #1
 800b800:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800b802:	2301      	movs	r3, #1
 800b804:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800b806:	2301      	movs	r3, #1
 800b808:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	7b1b      	ldrb	r3, [r3, #12]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d003      	beq.n	800b81a <USBH_MSC_Process+0x2e>
 800b812:	2b01      	cmp	r3, #1
 800b814:	f000 8355 	beq.w	800bec2 <USBH_MSC_Process+0x6d6>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800b818:	e356      	b.n	800bec8 <USBH_MSC_Process+0x6dc>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	b29b      	uxth	r3, r3
 800b826:	429a      	cmp	r2, r3
 800b828:	f080 8333 	bcs.w	800be92 <USBH_MSC_Process+0x6a6>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b832:	4619      	mov	r1, r3
 800b834:	693a      	ldr	r2, [r7, #16]
 800b836:	2334      	movs	r3, #52	; 0x34
 800b838:	fb03 f301 	mul.w	r3, r3, r1
 800b83c:	4413      	add	r3, r2
 800b83e:	3391      	adds	r3, #145	; 0x91
 800b840:	2201      	movs	r2, #1
 800b842:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b84a:	4619      	mov	r1, r3
 800b84c:	693a      	ldr	r2, [r7, #16]
 800b84e:	2334      	movs	r3, #52	; 0x34
 800b850:	fb03 f301 	mul.w	r3, r3, r1
 800b854:	4413      	add	r3, r2
 800b856:	3390      	adds	r3, #144	; 0x90
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	2b08      	cmp	r3, #8
 800b85c:	f200 8327 	bhi.w	800beae <USBH_MSC_Process+0x6c2>
 800b860:	a201      	add	r2, pc, #4	; (adr r2, 800b868 <USBH_MSC_Process+0x7c>)
 800b862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b866:	bf00      	nop
 800b868:	0800b88d 	.word	0x0800b88d
 800b86c:	0800beaf 	.word	0x0800beaf
 800b870:	0800b9d5 	.word	0x0800b9d5
 800b874:	0800bb89 	.word	0x0800bb89
 800b878:	0800b8c7 	.word	0x0800b8c7
 800b87c:	0800bcf5 	.word	0x0800bcf5
 800b880:	0800beaf 	.word	0x0800beaf
 800b884:	0800beaf 	.word	0x0800beaf
 800b888:	0800be81 	.word	0x0800be81
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b892:	4619      	mov	r1, r3
 800b894:	48b6      	ldr	r0, [pc, #728]	; (800bb70 <USBH_MSC_Process+0x384>)
 800b896:	f00e fc4f 	bl	801a138 <iprintf>
 800b89a:	200a      	movs	r0, #10
 800b89c:	f00e fc64 	bl	801a168 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	693a      	ldr	r2, [r7, #16]
 800b8aa:	2334      	movs	r3, #52	; 0x34
 800b8ac:	fb03 f301 	mul.w	r3, r3, r1
 800b8b0:	4413      	add	r3, r2
 800b8b2:	3390      	adds	r3, #144	; 0x90
 800b8b4:	2204      	movs	r2, #4
 800b8b6:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800b8c4:	e2fc      	b.n	800bec0 <USBH_MSC_Process+0x6d4>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8cc:	b2d9      	uxtb	r1, r3
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	2334      	movs	r3, #52	; 0x34
 800b8d8:	fb03 f302 	mul.w	r3, r3, r2
 800b8dc:	3398      	adds	r3, #152	; 0x98
 800b8de:	693a      	ldr	r2, [r7, #16]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	3307      	adds	r3, #7
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f001 f890 	bl	800ca0c <USBH_MSC_SCSI_Inquiry>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b8f0:	7bfb      	ldrb	r3, [r7, #15]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d141      	bne.n	800b97a <USBH_MSC_Process+0x18e>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	2334      	movs	r3, #52	; 0x34
 800b900:	fb03 f302 	mul.w	r3, r3, r2
 800b904:	3398      	adds	r3, #152	; 0x98
 800b906:	693a      	ldr	r2, [r7, #16]
 800b908:	4413      	add	r3, r2
 800b90a:	330a      	adds	r3, #10
 800b90c:	4619      	mov	r1, r3
 800b90e:	4899      	ldr	r0, [pc, #612]	; (800bb74 <USBH_MSC_Process+0x388>)
 800b910:	f00e fc12 	bl	801a138 <iprintf>
 800b914:	200a      	movs	r0, #10
 800b916:	f00e fc27 	bl	801a168 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b920:	461a      	mov	r2, r3
 800b922:	2334      	movs	r3, #52	; 0x34
 800b924:	fb03 f302 	mul.w	r3, r3, r2
 800b928:	33a0      	adds	r3, #160	; 0xa0
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	4413      	add	r3, r2
 800b92e:	330b      	adds	r3, #11
 800b930:	4619      	mov	r1, r3
 800b932:	4891      	ldr	r0, [pc, #580]	; (800bb78 <USBH_MSC_Process+0x38c>)
 800b934:	f00e fc00 	bl	801a138 <iprintf>
 800b938:	200a      	movs	r0, #10
 800b93a:	f00e fc15 	bl	801a168 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b944:	461a      	mov	r2, r3
 800b946:	2334      	movs	r3, #52	; 0x34
 800b948:	fb03 f302 	mul.w	r3, r3, r2
 800b94c:	33b0      	adds	r3, #176	; 0xb0
 800b94e:	693a      	ldr	r2, [r7, #16]
 800b950:	4413      	add	r3, r2
 800b952:	330c      	adds	r3, #12
 800b954:	4619      	mov	r1, r3
 800b956:	4889      	ldr	r0, [pc, #548]	; (800bb7c <USBH_MSC_Process+0x390>)
 800b958:	f00e fbee 	bl	801a138 <iprintf>
 800b95c:	200a      	movs	r0, #10
 800b95e:	f00e fc03 	bl	801a168 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b968:	4619      	mov	r1, r3
 800b96a:	693a      	ldr	r2, [r7, #16]
 800b96c:	2334      	movs	r3, #52	; 0x34
 800b96e:	fb03 f301 	mul.w	r3, r3, r1
 800b972:	4413      	add	r3, r2
 800b974:	3390      	adds	r3, #144	; 0x90
 800b976:	2202      	movs	r2, #2
 800b978:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	d10c      	bne.n	800b99a <USBH_MSC_Process+0x1ae>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b986:	4619      	mov	r1, r3
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	2334      	movs	r3, #52	; 0x34
 800b98c:	fb03 f301 	mul.w	r3, r3, r1
 800b990:	4413      	add	r3, r2
 800b992:	3390      	adds	r3, #144	; 0x90
 800b994:	2205      	movs	r2, #5
 800b996:	701a      	strb	r2, [r3, #0]
            break;
 800b998:	e28b      	b.n	800beb2 <USBH_MSC_Process+0x6c6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b99a:	7bfb      	ldrb	r3, [r7, #15]
 800b99c:	2b04      	cmp	r3, #4
 800b99e:	f040 8288 	bne.w	800beb2 <USBH_MSC_Process+0x6c6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	693a      	ldr	r2, [r7, #16]
 800b9ac:	2334      	movs	r3, #52	; 0x34
 800b9ae:	fb03 f301 	mul.w	r3, r3, r1
 800b9b2:	4413      	add	r3, r2
 800b9b4:	3390      	adds	r3, #144	; 0x90
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	693a      	ldr	r2, [r7, #16]
 800b9c4:	2334      	movs	r3, #52	; 0x34
 800b9c6:	fb03 f301 	mul.w	r3, r3, r1
 800b9ca:	4413      	add	r3, r2
 800b9cc:	3391      	adds	r3, #145	; 0x91
 800b9ce:	2202      	movs	r2, #2
 800b9d0:	701a      	strb	r2, [r3, #0]
            break;
 800b9d2:	e26e      	b.n	800beb2 <USBH_MSC_Process+0x6c6>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	4619      	mov	r1, r3
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 ff56 	bl	800c890 <USBH_MSC_SCSI_TestUnitReady>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800b9e8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d14f      	bne.n	800ba8e <USBH_MSC_Process+0x2a2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	693a      	ldr	r2, [r7, #16]
 800b9f8:	2334      	movs	r3, #52	; 0x34
 800b9fa:	fb03 f301 	mul.w	r3, r3, r1
 800b9fe:	4413      	add	r3, r2
 800ba00:	3392      	adds	r3, #146	; 0x92
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d012      	beq.n	800ba2e <USBH_MSC_Process+0x242>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba0e:	4619      	mov	r1, r3
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	2334      	movs	r3, #52	; 0x34
 800ba14:	fb03 f301 	mul.w	r3, r3, r1
 800ba18:	4413      	add	r3, r2
 800ba1a:	33c1      	adds	r3, #193	; 0xc1
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 800ba20:	4857      	ldr	r0, [pc, #348]	; (800bb80 <USBH_MSC_Process+0x394>)
 800ba22:	f00e fb89 	bl	801a138 <iprintf>
 800ba26:	200a      	movs	r0, #10
 800ba28:	f00e fb9e 	bl	801a168 <putchar>
 800ba2c:	e00b      	b.n	800ba46 <USBH_MSC_Process+0x25a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba34:	4619      	mov	r1, r3
 800ba36:	693a      	ldr	r2, [r7, #16]
 800ba38:	2334      	movs	r3, #52	; 0x34
 800ba3a:	fb03 f301 	mul.w	r3, r3, r1
 800ba3e:	4413      	add	r3, r2
 800ba40:	33c1      	adds	r3, #193	; 0xc1
 800ba42:	2200      	movs	r2, #0
 800ba44:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	693a      	ldr	r2, [r7, #16]
 800ba50:	2334      	movs	r3, #52	; 0x34
 800ba52:	fb03 f301 	mul.w	r3, r3, r1
 800ba56:	4413      	add	r3, r2
 800ba58:	3390      	adds	r3, #144	; 0x90
 800ba5a:	2203      	movs	r2, #3
 800ba5c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba64:	4619      	mov	r1, r3
 800ba66:	693a      	ldr	r2, [r7, #16]
 800ba68:	2334      	movs	r3, #52	; 0x34
 800ba6a:	fb03 f301 	mul.w	r3, r3, r1
 800ba6e:	4413      	add	r3, r2
 800ba70:	3391      	adds	r3, #145	; 0x91
 800ba72:	2200      	movs	r2, #0
 800ba74:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	693a      	ldr	r2, [r7, #16]
 800ba80:	2334      	movs	r3, #52	; 0x34
 800ba82:	fb03 f301 	mul.w	r3, r3, r1
 800ba86:	4413      	add	r3, r2
 800ba88:	3392      	adds	r3, #146	; 0x92
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800ba8e:	7bbb      	ldrb	r3, [r7, #14]
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d150      	bne.n	800bb36 <USBH_MSC_Process+0x34a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	2334      	movs	r3, #52	; 0x34
 800baa0:	fb03 f301 	mul.w	r3, r3, r1
 800baa4:	4413      	add	r3, r2
 800baa6:	3392      	adds	r3, #146	; 0x92
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	2b02      	cmp	r3, #2
 800baac:	d012      	beq.n	800bad4 <USBH_MSC_Process+0x2e8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bab4:	4619      	mov	r1, r3
 800bab6:	693a      	ldr	r2, [r7, #16]
 800bab8:	2334      	movs	r3, #52	; 0x34
 800baba:	fb03 f301 	mul.w	r3, r3, r1
 800babe:	4413      	add	r3, r2
 800bac0:	33c1      	adds	r3, #193	; 0xc1
 800bac2:	2201      	movs	r2, #1
 800bac4:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 800bac6:	482f      	ldr	r0, [pc, #188]	; (800bb84 <USBH_MSC_Process+0x398>)
 800bac8:	f00e fb36 	bl	801a138 <iprintf>
 800bacc:	200a      	movs	r0, #10
 800bace:	f00e fb4b 	bl	801a168 <putchar>
 800bad2:	e00b      	b.n	800baec <USBH_MSC_Process+0x300>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bada:	4619      	mov	r1, r3
 800badc:	693a      	ldr	r2, [r7, #16]
 800bade:	2334      	movs	r3, #52	; 0x34
 800bae0:	fb03 f301 	mul.w	r3, r3, r1
 800bae4:	4413      	add	r3, r2
 800bae6:	33c1      	adds	r3, #193	; 0xc1
 800bae8:	2200      	movs	r2, #0
 800baea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800baf2:	4619      	mov	r1, r3
 800baf4:	693a      	ldr	r2, [r7, #16]
 800baf6:	2334      	movs	r3, #52	; 0x34
 800baf8:	fb03 f301 	mul.w	r3, r3, r1
 800bafc:	4413      	add	r3, r2
 800bafe:	3390      	adds	r3, #144	; 0x90
 800bb00:	2205      	movs	r2, #5
 800bb02:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	2334      	movs	r3, #52	; 0x34
 800bb10:	fb03 f301 	mul.w	r3, r3, r1
 800bb14:	4413      	add	r3, r2
 800bb16:	3391      	adds	r3, #145	; 0x91
 800bb18:	2201      	movs	r2, #1
 800bb1a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb22:	4619      	mov	r1, r3
 800bb24:	693a      	ldr	r2, [r7, #16]
 800bb26:	2334      	movs	r3, #52	; 0x34
 800bb28:	fb03 f301 	mul.w	r3, r3, r1
 800bb2c:	4413      	add	r3, r2
 800bb2e:	3392      	adds	r3, #146	; 0x92
 800bb30:	2202      	movs	r2, #2
 800bb32:	701a      	strb	r2, [r3, #0]
            break;
 800bb34:	e1bf      	b.n	800beb6 <USBH_MSC_Process+0x6ca>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800bb36:	7bbb      	ldrb	r3, [r7, #14]
 800bb38:	2b04      	cmp	r3, #4
 800bb3a:	f040 81bc 	bne.w	800beb6 <USBH_MSC_Process+0x6ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb44:	4619      	mov	r1, r3
 800bb46:	693a      	ldr	r2, [r7, #16]
 800bb48:	2334      	movs	r3, #52	; 0x34
 800bb4a:	fb03 f301 	mul.w	r3, r3, r1
 800bb4e:	4413      	add	r3, r2
 800bb50:	3390      	adds	r3, #144	; 0x90
 800bb52:	2201      	movs	r2, #1
 800bb54:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	693a      	ldr	r2, [r7, #16]
 800bb60:	2334      	movs	r3, #52	; 0x34
 800bb62:	fb03 f301 	mul.w	r3, r3, r1
 800bb66:	4413      	add	r3, r2
 800bb68:	3391      	adds	r3, #145	; 0x91
 800bb6a:	2202      	movs	r2, #2
 800bb6c:	701a      	strb	r2, [r3, #0]
            break;
 800bb6e:	e1a2      	b.n	800beb6 <USBH_MSC_Process+0x6ca>
 800bb70:	0801c3dc 	.word	0x0801c3dc
 800bb74:	0801c3e8 	.word	0x0801c3e8
 800bb78:	0801c400 	.word	0x0801c400
 800bb7c:	0801c418 	.word	0x0801c418
 800bb80:	0801c430 	.word	0x0801c430
 800bb84:	0801c444 	.word	0x0801c444
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb8e:	b2d9      	uxtb	r1, r3
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb96:	461a      	mov	r2, r3
 800bb98:	2334      	movs	r3, #52	; 0x34
 800bb9a:	fb03 f302 	mul.w	r3, r3, r2
 800bb9e:	3390      	adds	r3, #144	; 0x90
 800bba0:	693a      	ldr	r2, [r7, #16]
 800bba2:	4413      	add	r3, r2
 800bba4:	3304      	adds	r3, #4
 800bba6:	461a      	mov	r2, r3
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 feb4 	bl	800c916 <USBH_MSC_SCSI_ReadCapacity>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d170      	bne.n	800bc9a <USBH_MSC_Process+0x4ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	2334      	movs	r3, #52	; 0x34
 800bbc4:	fb03 f301 	mul.w	r3, r3, r1
 800bbc8:	4413      	add	r3, r2
 800bbca:	33c1      	adds	r3, #193	; 0xc1
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d142      	bne.n	800bc58 <USBH_MSC_Process+0x46c>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bbd8:	4619      	mov	r1, r3
 800bbda:	693a      	ldr	r2, [r7, #16]
 800bbdc:	2334      	movs	r3, #52	; 0x34
 800bbde:	fb03 f301 	mul.w	r3, r3, r1
 800bbe2:	4413      	add	r3, r2
 800bbe4:	3394      	adds	r3, #148	; 0x94
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	693a      	ldr	r2, [r7, #16]
 800bbea:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 800bbee:	4610      	mov	r0, r2
 800bbf0:	6939      	ldr	r1, [r7, #16]
 800bbf2:	2234      	movs	r2, #52	; 0x34
 800bbf4:	fb02 f200 	mul.w	r2, r2, r0
 800bbf8:	440a      	add	r2, r1
 800bbfa:	3298      	adds	r2, #152	; 0x98
 800bbfc:	8812      	ldrh	r2, [r2, #0]
 800bbfe:	fb02 f303 	mul.w	r3, r2, r3
 800bc02:	4619      	mov	r1, r3
 800bc04:	48b3      	ldr	r0, [pc, #716]	; (800bed4 <USBH_MSC_Process+0x6e8>)
 800bc06:	f00e fa97 	bl	801a138 <iprintf>
 800bc0a:	200a      	movs	r0, #10
 800bc0c:	f00e faac 	bl	801a168 <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc16:	4619      	mov	r1, r3
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	2334      	movs	r3, #52	; 0x34
 800bc1c:	fb03 f301 	mul.w	r3, r3, r1
 800bc20:	4413      	add	r3, r2
 800bc22:	3394      	adds	r3, #148	; 0x94
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4619      	mov	r1, r3
 800bc28:	48ab      	ldr	r0, [pc, #684]	; (800bed8 <USBH_MSC_Process+0x6ec>)
 800bc2a:	f00e fa85 	bl	801a138 <iprintf>
 800bc2e:	200a      	movs	r0, #10
 800bc30:	f00e fa9a 	bl	801a168 <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	693a      	ldr	r2, [r7, #16]
 800bc3e:	2334      	movs	r3, #52	; 0x34
 800bc40:	fb03 f301 	mul.w	r3, r3, r1
 800bc44:	4413      	add	r3, r2
 800bc46:	3398      	adds	r3, #152	; 0x98
 800bc48:	881b      	ldrh	r3, [r3, #0]
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	48a3      	ldr	r0, [pc, #652]	; (800bedc <USBH_MSC_Process+0x6f0>)
 800bc4e:	f00e fa73 	bl	801a138 <iprintf>
 800bc52:	200a      	movs	r0, #10
 800bc54:	f00e fa88 	bl	801a168 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc5e:	4619      	mov	r1, r3
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	2334      	movs	r3, #52	; 0x34
 800bc64:	fb03 f301 	mul.w	r3, r3, r1
 800bc68:	4413      	add	r3, r2
 800bc6a:	3390      	adds	r3, #144	; 0x90
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc76:	4619      	mov	r1, r3
 800bc78:	693a      	ldr	r2, [r7, #16]
 800bc7a:	2334      	movs	r3, #52	; 0x34
 800bc7c:	fb03 f301 	mul.w	r3, r3, r1
 800bc80:	4413      	add	r3, r2
 800bc82:	3391      	adds	r3, #145	; 0x91
 800bc84:	2200      	movs	r2, #0
 800bc86:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc8e:	3301      	adds	r3, #1
 800bc90:	b29a      	uxth	r2, r3
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800bc98:	e10f      	b.n	800beba <USBH_MSC_Process+0x6ce>
            else if (scsi_status == USBH_FAIL)
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	d10c      	bne.n	800bcba <USBH_MSC_Process+0x4ce>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bca6:	4619      	mov	r1, r3
 800bca8:	693a      	ldr	r2, [r7, #16]
 800bcaa:	2334      	movs	r3, #52	; 0x34
 800bcac:	fb03 f301 	mul.w	r3, r3, r1
 800bcb0:	4413      	add	r3, r2
 800bcb2:	3390      	adds	r3, #144	; 0x90
 800bcb4:	2205      	movs	r2, #5
 800bcb6:	701a      	strb	r2, [r3, #0]
            break;
 800bcb8:	e0ff      	b.n	800beba <USBH_MSC_Process+0x6ce>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bcba:	7bfb      	ldrb	r3, [r7, #15]
 800bcbc:	2b04      	cmp	r3, #4
 800bcbe:	f040 80fc 	bne.w	800beba <USBH_MSC_Process+0x6ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bcc8:	4619      	mov	r1, r3
 800bcca:	693a      	ldr	r2, [r7, #16]
 800bccc:	2334      	movs	r3, #52	; 0x34
 800bcce:	fb03 f301 	mul.w	r3, r3, r1
 800bcd2:	4413      	add	r3, r2
 800bcd4:	3390      	adds	r3, #144	; 0x90
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bce0:	4619      	mov	r1, r3
 800bce2:	693a      	ldr	r2, [r7, #16]
 800bce4:	2334      	movs	r3, #52	; 0x34
 800bce6:	fb03 f301 	mul.w	r3, r3, r1
 800bcea:	4413      	add	r3, r2
 800bcec:	3391      	adds	r3, #145	; 0x91
 800bcee:	2202      	movs	r2, #2
 800bcf0:	701a      	strb	r2, [r3, #0]
            break;
 800bcf2:	e0e2      	b.n	800beba <USBH_MSC_Process+0x6ce>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bcfa:	b2d9      	uxtb	r1, r3
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd02:	461a      	mov	r2, r3
 800bd04:	2334      	movs	r3, #52	; 0x34
 800bd06:	fb03 f302 	mul.w	r3, r3, r2
 800bd0a:	3398      	adds	r3, #152	; 0x98
 800bd0c:	693a      	ldr	r2, [r7, #16]
 800bd0e:	4413      	add	r3, r2
 800bd10:	3304      	adds	r3, #4
 800bd12:	461a      	mov	r2, r3
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 ff1e 	bl	800cb56 <USBH_MSC_SCSI_RequestSense>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d17b      	bne.n	800be1c <USBH_MSC_Process+0x630>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	693a      	ldr	r2, [r7, #16]
 800bd2e:	2334      	movs	r3, #52	; 0x34
 800bd30:	fb03 f301 	mul.w	r3, r3, r1
 800bd34:	4413      	add	r3, r2
 800bd36:	339c      	adds	r3, #156	; 0x9c
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	2b06      	cmp	r3, #6
 800bd3c:	d00c      	beq.n	800bd58 <USBH_MSC_Process+0x56c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd44:	4619      	mov	r1, r3
 800bd46:	693a      	ldr	r2, [r7, #16]
 800bd48:	2334      	movs	r3, #52	; 0x34
 800bd4a:	fb03 f301 	mul.w	r3, r3, r1
 800bd4e:	4413      	add	r3, r2
 800bd50:	339c      	adds	r3, #156	; 0x9c
 800bd52:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	d117      	bne.n	800bd88 <USBH_MSC_Process+0x59c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800bd64:	1ad3      	subs	r3, r2, r3
 800bd66:	f242 720f 	movw	r2, #9999	; 0x270f
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d80c      	bhi.n	800bd88 <USBH_MSC_Process+0x59c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd74:	4619      	mov	r1, r3
 800bd76:	693a      	ldr	r2, [r7, #16]
 800bd78:	2334      	movs	r3, #52	; 0x34
 800bd7a:	fb03 f301 	mul.w	r3, r3, r1
 800bd7e:	4413      	add	r3, r2
 800bd80:	3390      	adds	r3, #144	; 0x90
 800bd82:	2202      	movs	r2, #2
 800bd84:	701a      	strb	r2, [r3, #0]
                  break;
 800bd86:	e09b      	b.n	800bec0 <USBH_MSC_Process+0x6d4>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd8e:	4619      	mov	r1, r3
 800bd90:	693a      	ldr	r2, [r7, #16]
 800bd92:	2334      	movs	r3, #52	; 0x34
 800bd94:	fb03 f301 	mul.w	r3, r3, r1
 800bd98:	4413      	add	r3, r2
 800bd9a:	339c      	adds	r3, #156	; 0x9c
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	484f      	ldr	r0, [pc, #316]	; (800bee0 <USBH_MSC_Process+0x6f4>)
 800bda2:	f00e f9c9 	bl	801a138 <iprintf>
 800bda6:	200a      	movs	r0, #10
 800bda8:	f00e f9de 	bl	801a168 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	2334      	movs	r3, #52	; 0x34
 800bdb8:	fb03 f301 	mul.w	r3, r3, r1
 800bdbc:	4413      	add	r3, r2
 800bdbe:	339d      	adds	r3, #157	; 0x9d
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	4847      	ldr	r0, [pc, #284]	; (800bee4 <USBH_MSC_Process+0x6f8>)
 800bdc6:	f00e f9b7 	bl	801a138 <iprintf>
 800bdca:	200a      	movs	r0, #10
 800bdcc:	f00e f9cc 	bl	801a168 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	693a      	ldr	r2, [r7, #16]
 800bdda:	2334      	movs	r3, #52	; 0x34
 800bddc:	fb03 f301 	mul.w	r3, r3, r1
 800bde0:	4413      	add	r3, r2
 800bde2:	339e      	adds	r3, #158	; 0x9e
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	4619      	mov	r1, r3
 800bde8:	483f      	ldr	r0, [pc, #252]	; (800bee8 <USBH_MSC_Process+0x6fc>)
 800bdea:	f00e f9a5 	bl	801a138 <iprintf>
 800bdee:	200a      	movs	r0, #10
 800bdf0:	f00e f9ba 	bl	801a168 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	693a      	ldr	r2, [r7, #16]
 800bdfe:	2334      	movs	r3, #52	; 0x34
 800be00:	fb03 f301 	mul.w	r3, r3, r1
 800be04:	4413      	add	r3, r2
 800be06:	3390      	adds	r3, #144	; 0x90
 800be08:	2201      	movs	r2, #1
 800be0a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be12:	3301      	adds	r3, #1
 800be14:	b29a      	uxth	r2, r3
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800be1c:	7bfb      	ldrb	r3, [r7, #15]
 800be1e:	2b02      	cmp	r3, #2
 800be20:	d112      	bne.n	800be48 <USBH_MSC_Process+0x65c>
              USBH_UsrLog("MSC Device NOT ready");
 800be22:	4832      	ldr	r0, [pc, #200]	; (800beec <USBH_MSC_Process+0x700>)
 800be24:	f00e f988 	bl	801a138 <iprintf>
 800be28:	200a      	movs	r0, #10
 800be2a:	f00e f99d 	bl	801a168 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be34:	4619      	mov	r1, r3
 800be36:	693a      	ldr	r2, [r7, #16]
 800be38:	2334      	movs	r3, #52	; 0x34
 800be3a:	fb03 f301 	mul.w	r3, r3, r1
 800be3e:	4413      	add	r3, r2
 800be40:	3390      	adds	r3, #144	; 0x90
 800be42:	2208      	movs	r2, #8
 800be44:	701a      	strb	r2, [r3, #0]
            break;
 800be46:	e03a      	b.n	800bebe <USBH_MSC_Process+0x6d2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800be48:	7bfb      	ldrb	r3, [r7, #15]
 800be4a:	2b04      	cmp	r3, #4
 800be4c:	d137      	bne.n	800bebe <USBH_MSC_Process+0x6d2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be54:	4619      	mov	r1, r3
 800be56:	693a      	ldr	r2, [r7, #16]
 800be58:	2334      	movs	r3, #52	; 0x34
 800be5a:	fb03 f301 	mul.w	r3, r3, r1
 800be5e:	4413      	add	r3, r2
 800be60:	3390      	adds	r3, #144	; 0x90
 800be62:	2201      	movs	r2, #1
 800be64:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be6c:	4619      	mov	r1, r3
 800be6e:	693a      	ldr	r2, [r7, #16]
 800be70:	2334      	movs	r3, #52	; 0x34
 800be72:	fb03 f301 	mul.w	r3, r3, r1
 800be76:	4413      	add	r3, r2
 800be78:	3391      	adds	r3, #145	; 0x91
 800be7a:	2202      	movs	r2, #2
 800be7c:	701a      	strb	r2, [r3, #0]
            break;
 800be7e:	e01e      	b.n	800bebe <USBH_MSC_Process+0x6d2>
            MSC_Handle->current_lun++;
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be86:	3301      	adds	r3, #1
 800be88:	b29a      	uxth	r2, r3
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800be90:	e016      	b.n	800bec0 <USBH_MSC_Process+0x6d4>
        MSC_Handle->current_lun = 0U;
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	2200      	movs	r2, #0
 800be96:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	2201      	movs	r2, #1
 800be9e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bea6:	2102      	movs	r1, #2
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	4798      	blx	r3
      break;
 800beac:	e00c      	b.n	800bec8 <USBH_MSC_Process+0x6dc>
            break;
 800beae:	bf00      	nop
 800beb0:	e00a      	b.n	800bec8 <USBH_MSC_Process+0x6dc>
            break;
 800beb2:	bf00      	nop
 800beb4:	e008      	b.n	800bec8 <USBH_MSC_Process+0x6dc>
            break;
 800beb6:	bf00      	nop
 800beb8:	e006      	b.n	800bec8 <USBH_MSC_Process+0x6dc>
            break;
 800beba:	bf00      	nop
 800bebc:	e004      	b.n	800bec8 <USBH_MSC_Process+0x6dc>
            break;
 800bebe:	bf00      	nop
      break;
 800bec0:	e002      	b.n	800bec8 <USBH_MSC_Process+0x6dc>
      error = USBH_OK;
 800bec2:	2300      	movs	r3, #0
 800bec4:	75fb      	strb	r3, [r7, #23]
      break;
 800bec6:	bf00      	nop
  }
  return error;
 800bec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3718      	adds	r7, #24
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	0801c45c 	.word	0x0801c45c
 800bed8:	0801c47c 	.word	0x0801c47c
 800bedc:	0801c490 	.word	0x0801c490
 800bee0:	0801c4a4 	.word	0x0801c4a4
 800bee4:	0801c4b4 	.word	0x0801c4b4
 800bee8:	0801c4d0 	.word	0x0801c4d0
 800beec:	0801c444 	.word	0x0801c444

0800bef0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	370c      	adds	r7, #12
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
	...

0800bf08 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b088      	sub	sp, #32
 800bf0c:	af02      	add	r7, sp, #8
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	460b      	mov	r3, r1
 800bf12:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf1a:	69db      	ldr	r3, [r3, #28]
 800bf1c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800bf22:	2301      	movs	r3, #1
 800bf24:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800bf26:	78fb      	ldrb	r3, [r7, #3]
 800bf28:	693a      	ldr	r2, [r7, #16]
 800bf2a:	2134      	movs	r1, #52	; 0x34
 800bf2c:	fb01 f303 	mul.w	r3, r1, r3
 800bf30:	4413      	add	r3, r2
 800bf32:	3390      	adds	r3, #144	; 0x90
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	2b07      	cmp	r3, #7
 800bf38:	d03d      	beq.n	800bfb6 <USBH_MSC_RdWrProcess+0xae>
 800bf3a:	2b07      	cmp	r3, #7
 800bf3c:	f300 80dc 	bgt.w	800c0f8 <USBH_MSC_RdWrProcess+0x1f0>
 800bf40:	2b05      	cmp	r3, #5
 800bf42:	d06d      	beq.n	800c020 <USBH_MSC_RdWrProcess+0x118>
 800bf44:	2b06      	cmp	r3, #6
 800bf46:	f040 80d7 	bne.w	800c0f8 <USBH_MSC_RdWrProcess+0x1f0>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800bf4a:	78f9      	ldrb	r1, [r7, #3]
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	9300      	str	r3, [sp, #0]
 800bf50:	2300      	movs	r3, #0
 800bf52:	2200      	movs	r2, #0
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 fee2 	bl	800cd1e <USBH_MSC_SCSI_Read>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bf5e:	7bfb      	ldrb	r3, [r7, #15]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10b      	bne.n	800bf7c <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bf64:	78fb      	ldrb	r3, [r7, #3]
 800bf66:	693a      	ldr	r2, [r7, #16]
 800bf68:	2134      	movs	r1, #52	; 0x34
 800bf6a:	fb01 f303 	mul.w	r3, r1, r3
 800bf6e:	4413      	add	r3, r2
 800bf70:	3390      	adds	r3, #144	; 0x90
 800bf72:	2201      	movs	r2, #1
 800bf74:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800bf76:	2300      	movs	r3, #0
 800bf78:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bf7a:	e0bf      	b.n	800c0fc <USBH_MSC_RdWrProcess+0x1f4>
      else if (scsi_status == USBH_FAIL)
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	d109      	bne.n	800bf96 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800bf82:	78fb      	ldrb	r3, [r7, #3]
 800bf84:	693a      	ldr	r2, [r7, #16]
 800bf86:	2134      	movs	r1, #52	; 0x34
 800bf88:	fb01 f303 	mul.w	r3, r1, r3
 800bf8c:	4413      	add	r3, r2
 800bf8e:	3390      	adds	r3, #144	; 0x90
 800bf90:	2205      	movs	r2, #5
 800bf92:	701a      	strb	r2, [r3, #0]
      break;
 800bf94:	e0b2      	b.n	800c0fc <USBH_MSC_RdWrProcess+0x1f4>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bf96:	7bfb      	ldrb	r3, [r7, #15]
 800bf98:	2b04      	cmp	r3, #4
 800bf9a:	f040 80af 	bne.w	800c0fc <USBH_MSC_RdWrProcess+0x1f4>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bf9e:	78fb      	ldrb	r3, [r7, #3]
 800bfa0:	693a      	ldr	r2, [r7, #16]
 800bfa2:	2134      	movs	r1, #52	; 0x34
 800bfa4:	fb01 f303 	mul.w	r3, r1, r3
 800bfa8:	4413      	add	r3, r2
 800bfaa:	3390      	adds	r3, #144	; 0x90
 800bfac:	2208      	movs	r2, #8
 800bfae:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	75fb      	strb	r3, [r7, #23]
      break;
 800bfb4:	e0a2      	b.n	800c0fc <USBH_MSC_RdWrProcess+0x1f4>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800bfb6:	78f9      	ldrb	r1, [r7, #3]
 800bfb8:	2300      	movs	r3, #0
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fe41 	bl	800cc48 <USBH_MSC_SCSI_Write>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bfca:	7bfb      	ldrb	r3, [r7, #15]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d10b      	bne.n	800bfe8 <USBH_MSC_RdWrProcess+0xe0>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bfd0:	78fb      	ldrb	r3, [r7, #3]
 800bfd2:	693a      	ldr	r2, [r7, #16]
 800bfd4:	2134      	movs	r1, #52	; 0x34
 800bfd6:	fb01 f303 	mul.w	r3, r1, r3
 800bfda:	4413      	add	r3, r2
 800bfdc:	3390      	adds	r3, #144	; 0x90
 800bfde:	2201      	movs	r2, #1
 800bfe0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bfe6:	e08b      	b.n	800c100 <USBH_MSC_RdWrProcess+0x1f8>
      else if (scsi_status == USBH_FAIL)
 800bfe8:	7bfb      	ldrb	r3, [r7, #15]
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	d109      	bne.n	800c002 <USBH_MSC_RdWrProcess+0xfa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800bfee:	78fb      	ldrb	r3, [r7, #3]
 800bff0:	693a      	ldr	r2, [r7, #16]
 800bff2:	2134      	movs	r1, #52	; 0x34
 800bff4:	fb01 f303 	mul.w	r3, r1, r3
 800bff8:	4413      	add	r3, r2
 800bffa:	3390      	adds	r3, #144	; 0x90
 800bffc:	2205      	movs	r2, #5
 800bffe:	701a      	strb	r2, [r3, #0]
      break;
 800c000:	e07e      	b.n	800c100 <USBH_MSC_RdWrProcess+0x1f8>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c002:	7bfb      	ldrb	r3, [r7, #15]
 800c004:	2b04      	cmp	r3, #4
 800c006:	d17b      	bne.n	800c100 <USBH_MSC_RdWrProcess+0x1f8>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800c008:	78fb      	ldrb	r3, [r7, #3]
 800c00a:	693a      	ldr	r2, [r7, #16]
 800c00c:	2134      	movs	r1, #52	; 0x34
 800c00e:	fb01 f303 	mul.w	r3, r1, r3
 800c012:	4413      	add	r3, r2
 800c014:	3390      	adds	r3, #144	; 0x90
 800c016:	2208      	movs	r2, #8
 800c018:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800c01a:	2302      	movs	r3, #2
 800c01c:	75fb      	strb	r3, [r7, #23]
      break;
 800c01e:	e06f      	b.n	800c100 <USBH_MSC_RdWrProcess+0x1f8>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800c020:	78fb      	ldrb	r3, [r7, #3]
 800c022:	2234      	movs	r2, #52	; 0x34
 800c024:	fb02 f303 	mul.w	r3, r2, r3
 800c028:	3398      	adds	r3, #152	; 0x98
 800c02a:	693a      	ldr	r2, [r7, #16]
 800c02c:	4413      	add	r3, r2
 800c02e:	1d1a      	adds	r2, r3, #4
 800c030:	78fb      	ldrb	r3, [r7, #3]
 800c032:	4619      	mov	r1, r3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 fd8e 	bl	800cb56 <USBH_MSC_SCSI_RequestSense>
 800c03a:	4603      	mov	r3, r0
 800c03c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800c03e:	7bfb      	ldrb	r3, [r7, #15]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d140      	bne.n	800c0c6 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 800c044:	78fb      	ldrb	r3, [r7, #3]
 800c046:	693a      	ldr	r2, [r7, #16]
 800c048:	2134      	movs	r1, #52	; 0x34
 800c04a:	fb01 f303 	mul.w	r3, r1, r3
 800c04e:	4413      	add	r3, r2
 800c050:	339c      	adds	r3, #156	; 0x9c
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	4619      	mov	r1, r3
 800c056:	482e      	ldr	r0, [pc, #184]	; (800c110 <USBH_MSC_RdWrProcess+0x208>)
 800c058:	f00e f86e 	bl	801a138 <iprintf>
 800c05c:	200a      	movs	r0, #10
 800c05e:	f00e f883 	bl	801a168 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 800c062:	78fb      	ldrb	r3, [r7, #3]
 800c064:	693a      	ldr	r2, [r7, #16]
 800c066:	2134      	movs	r1, #52	; 0x34
 800c068:	fb01 f303 	mul.w	r3, r1, r3
 800c06c:	4413      	add	r3, r2
 800c06e:	339d      	adds	r3, #157	; 0x9d
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	4619      	mov	r1, r3
 800c074:	4827      	ldr	r0, [pc, #156]	; (800c114 <USBH_MSC_RdWrProcess+0x20c>)
 800c076:	f00e f85f 	bl	801a138 <iprintf>
 800c07a:	200a      	movs	r0, #10
 800c07c:	f00e f874 	bl	801a168 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 800c080:	78fb      	ldrb	r3, [r7, #3]
 800c082:	693a      	ldr	r2, [r7, #16]
 800c084:	2134      	movs	r1, #52	; 0x34
 800c086:	fb01 f303 	mul.w	r3, r1, r3
 800c08a:	4413      	add	r3, r2
 800c08c:	339e      	adds	r3, #158	; 0x9e
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	4619      	mov	r1, r3
 800c092:	4821      	ldr	r0, [pc, #132]	; (800c118 <USBH_MSC_RdWrProcess+0x210>)
 800c094:	f00e f850 	bl	801a138 <iprintf>
 800c098:	200a      	movs	r0, #10
 800c09a:	f00e f865 	bl	801a168 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800c09e:	78fb      	ldrb	r3, [r7, #3]
 800c0a0:	693a      	ldr	r2, [r7, #16]
 800c0a2:	2134      	movs	r1, #52	; 0x34
 800c0a4:	fb01 f303 	mul.w	r3, r1, r3
 800c0a8:	4413      	add	r3, r2
 800c0aa:	3390      	adds	r3, #144	; 0x90
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800c0b0:	78fb      	ldrb	r3, [r7, #3]
 800c0b2:	693a      	ldr	r2, [r7, #16]
 800c0b4:	2134      	movs	r1, #52	; 0x34
 800c0b6:	fb01 f303 	mul.w	r3, r1, r3
 800c0ba:	4413      	add	r3, r2
 800c0bc:	3391      	adds	r3, #145	; 0x91
 800c0be:	2202      	movs	r2, #2
 800c0c0:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800c0c2:	2302      	movs	r3, #2
 800c0c4:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800c0c6:	7bfb      	ldrb	r3, [r7, #15]
 800c0c8:	2b02      	cmp	r3, #2
 800c0ca:	d106      	bne.n	800c0da <USBH_MSC_RdWrProcess+0x1d2>
      {
        USBH_UsrLog("MSC Device NOT ready");
 800c0cc:	4813      	ldr	r0, [pc, #76]	; (800c11c <USBH_MSC_RdWrProcess+0x214>)
 800c0ce:	f00e f833 	bl	801a138 <iprintf>
 800c0d2:	200a      	movs	r0, #10
 800c0d4:	f00e f848 	bl	801a168 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c0d8:	e014      	b.n	800c104 <USBH_MSC_RdWrProcess+0x1fc>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
 800c0dc:	2b04      	cmp	r3, #4
 800c0de:	d111      	bne.n	800c104 <USBH_MSC_RdWrProcess+0x1fc>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800c0e0:	78fb      	ldrb	r3, [r7, #3]
 800c0e2:	693a      	ldr	r2, [r7, #16]
 800c0e4:	2134      	movs	r1, #52	; 0x34
 800c0e6:	fb01 f303 	mul.w	r3, r1, r3
 800c0ea:	4413      	add	r3, r2
 800c0ec:	3390      	adds	r3, #144	; 0x90
 800c0ee:	2208      	movs	r2, #8
 800c0f0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800c0f2:	2302      	movs	r3, #2
 800c0f4:	75fb      	strb	r3, [r7, #23]
      break;
 800c0f6:	e005      	b.n	800c104 <USBH_MSC_RdWrProcess+0x1fc>

    default:
      break;
 800c0f8:	bf00      	nop
 800c0fa:	e004      	b.n	800c106 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800c0fc:	bf00      	nop
 800c0fe:	e002      	b.n	800c106 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800c100:	bf00      	nop
 800c102:	e000      	b.n	800c106 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800c104:	bf00      	nop

  }
  return error;
 800c106:	7dfb      	ldrb	r3, [r7, #23]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3718      	adds	r7, #24
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	0801c4a4 	.word	0x0801c4a4
 800c114:	0801c4b4 	.word	0x0801c4b4
 800c118:	0801c4d0 	.word	0x0801c4d0
 800c11c:	0801c444 	.word	0x0801c444

0800c120 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c120:	b480      	push	{r7}
 800c122:	b085      	sub	sp, #20
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	460b      	mov	r3, r1
 800c12a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c132:	69db      	ldr	r3, [r3, #28]
 800c134:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	2b0b      	cmp	r3, #11
 800c13e:	d10c      	bne.n	800c15a <USBH_MSC_UnitIsReady+0x3a>
 800c140:	78fb      	ldrb	r3, [r7, #3]
 800c142:	68ba      	ldr	r2, [r7, #8]
 800c144:	2134      	movs	r1, #52	; 0x34
 800c146:	fb01 f303 	mul.w	r3, r1, r3
 800c14a:	4413      	add	r3, r2
 800c14c:	3391      	adds	r3, #145	; 0x91
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d102      	bne.n	800c15a <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800c154:	2301      	movs	r3, #1
 800c156:	73fb      	strb	r3, [r7, #15]
 800c158:	e001      	b.n	800c15e <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800c15a:	2300      	movs	r3, #0
 800c15c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800c15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3714      	adds	r7, #20
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr

0800c16c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	460b      	mov	r3, r1
 800c176:	607a      	str	r2, [r7, #4]
 800c178:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c180:	69db      	ldr	r3, [r3, #28]
 800c182:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	2b0b      	cmp	r3, #11
 800c18c:	d10d      	bne.n	800c1aa <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800c18e:	7afb      	ldrb	r3, [r7, #11]
 800c190:	2234      	movs	r2, #52	; 0x34
 800c192:	fb02 f303 	mul.w	r3, r2, r3
 800c196:	3390      	adds	r3, #144	; 0x90
 800c198:	697a      	ldr	r2, [r7, #20]
 800c19a:	4413      	add	r3, r2
 800c19c:	2234      	movs	r2, #52	; 0x34
 800c19e:	4619      	mov	r1, r3
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f00d fa9f 	bl	80196e4 <memcpy>
    return USBH_OK;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	e000      	b.n	800c1ac <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800c1aa:	2302      	movs	r3, #2
  }
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3718      	adds	r7, #24
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b088      	sub	sp, #32
 800c1b8:	af02      	add	r7, sp, #8
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	607a      	str	r2, [r7, #4]
 800c1be:	603b      	str	r3, [r7, #0]
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1ca:	69db      	ldr	r3, [r3, #28]
 800c1cc:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00e      	beq.n	800c1f8 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800c1e0:	2b0b      	cmp	r3, #11
 800c1e2:	d109      	bne.n	800c1f8 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800c1e4:	7afb      	ldrb	r3, [r7, #11]
 800c1e6:	697a      	ldr	r2, [r7, #20]
 800c1e8:	2134      	movs	r1, #52	; 0x34
 800c1ea:	fb01 f303 	mul.w	r3, r1, r3
 800c1ee:	4413      	add	r3, r2
 800c1f0:	3390      	adds	r3, #144	; 0x90
 800c1f2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d001      	beq.n	800c1fc <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	e040      	b.n	800c27e <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	2206      	movs	r2, #6
 800c200:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800c202:	7afb      	ldrb	r3, [r7, #11]
 800c204:	697a      	ldr	r2, [r7, #20]
 800c206:	2134      	movs	r1, #52	; 0x34
 800c208:	fb01 f303 	mul.w	r3, r1, r3
 800c20c:	4413      	add	r3, r2
 800c20e:	3390      	adds	r3, #144	; 0x90
 800c210:	2206      	movs	r2, #6
 800c212:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800c214:	7afb      	ldrb	r3, [r7, #11]
 800c216:	b29a      	uxth	r2, r3
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800c21e:	7af9      	ldrb	r1, [r7, #11]
 800c220:	6a3b      	ldr	r3, [r7, #32]
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	f000 fd78 	bl	800cd1e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c234:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c236:	e016      	b.n	800c266 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	1ad2      	subs	r2, r2, r3
 800c242:	6a3b      	ldr	r3, [r7, #32]
 800c244:	f242 7110 	movw	r1, #10000	; 0x2710
 800c248:	fb01 f303 	mul.w	r3, r1, r3
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d805      	bhi.n	800c25c <USBH_MSC_Read+0xa8>
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c256:	b2db      	uxtb	r3, r3
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d104      	bne.n	800c266 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	2201      	movs	r2, #1
 800c260:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800c262:	2302      	movs	r3, #2
 800c264:	e00b      	b.n	800c27e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c266:	7afb      	ldrb	r3, [r7, #11]
 800c268:	4619      	mov	r1, r3
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f7ff fe4c 	bl	800bf08 <USBH_MSC_RdWrProcess>
 800c270:	4603      	mov	r3, r0
 800c272:	2b01      	cmp	r3, #1
 800c274:	d0e0      	beq.n	800c238 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	2201      	movs	r2, #1
 800c27a:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3718      	adds	r7, #24
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b088      	sub	sp, #32
 800c28a:	af02      	add	r7, sp, #8
 800c28c:	60f8      	str	r0, [r7, #12]
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	603b      	str	r3, [r7, #0]
 800c292:	460b      	mov	r3, r1
 800c294:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c29c:	69db      	ldr	r3, [r3, #28]
 800c29e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00e      	beq.n	800c2ca <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800c2b2:	2b0b      	cmp	r3, #11
 800c2b4:	d109      	bne.n	800c2ca <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800c2b6:	7afb      	ldrb	r3, [r7, #11]
 800c2b8:	697a      	ldr	r2, [r7, #20]
 800c2ba:	2134      	movs	r1, #52	; 0x34
 800c2bc:	fb01 f303 	mul.w	r3, r1, r3
 800c2c0:	4413      	add	r3, r2
 800c2c2:	3390      	adds	r3, #144	; 0x90
 800c2c4:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d001      	beq.n	800c2ce <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800c2ca:	2302      	movs	r3, #2
 800c2cc:	e040      	b.n	800c350 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	2207      	movs	r2, #7
 800c2d2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800c2d4:	7afb      	ldrb	r3, [r7, #11]
 800c2d6:	697a      	ldr	r2, [r7, #20]
 800c2d8:	2134      	movs	r1, #52	; 0x34
 800c2da:	fb01 f303 	mul.w	r3, r1, r3
 800c2de:	4413      	add	r3, r2
 800c2e0:	3390      	adds	r3, #144	; 0x90
 800c2e2:	2207      	movs	r2, #7
 800c2e4:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800c2e6:	7afb      	ldrb	r3, [r7, #11]
 800c2e8:	b29a      	uxth	r2, r3
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800c2f0:	7af9      	ldrb	r1, [r7, #11]
 800c2f2:	6a3b      	ldr	r3, [r7, #32]
 800c2f4:	9300      	str	r3, [sp, #0]
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	f000 fca4 	bl	800cc48 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c306:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c308:	e016      	b.n	800c338 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	1ad2      	subs	r2, r2, r3
 800c314:	6a3b      	ldr	r3, [r7, #32]
 800c316:	f242 7110 	movw	r1, #10000	; 0x2710
 800c31a:	fb01 f303 	mul.w	r3, r1, r3
 800c31e:	429a      	cmp	r2, r3
 800c320:	d805      	bhi.n	800c32e <USBH_MSC_Write+0xa8>
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d104      	bne.n	800c338 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	2201      	movs	r2, #1
 800c332:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800c334:	2302      	movs	r3, #2
 800c336:	e00b      	b.n	800c350 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c338:	7afb      	ldrb	r3, [r7, #11]
 800c33a:	4619      	mov	r1, r3
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f7ff fde3 	bl	800bf08 <USBH_MSC_RdWrProcess>
 800c342:	4603      	mov	r3, r0
 800c344:	2b01      	cmp	r3, #1
 800c346:	d0e0      	beq.n	800c30a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	2201      	movs	r2, #1
 800c34c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3718      	adds	r7, #24
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2221      	movs	r2, #33	; 0x21
 800c364:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	22ff      	movs	r2, #255	; 0xff
 800c36a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800c37e:	2200      	movs	r2, #0
 800c380:	2100      	movs	r1, #0
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f001 ff67 	bl	800e256 <USBH_CtlReq>
 800c388:	4603      	mov	r3, r0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b082      	sub	sp, #8
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
 800c39a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	22a1      	movs	r2, #161	; 0xa1
 800c3a0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	22fe      	movs	r2, #254	; 0xfe
 800c3a6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	6839      	ldr	r1, [r7, #0]
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f001 ff49 	bl	800e256 <USBH_CtlReq>
 800c3c4:	4603      	mov	r3, r0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3708      	adds	r7, #8
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
	...

0800c3d0 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c3de:	69db      	ldr	r3, [r3, #28]
 800c3e0:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	4a09      	ldr	r2, [pc, #36]	; (800c40c <USBH_MSC_BOT_Init+0x3c>)
 800c3e6:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	4a09      	ldr	r2, [pc, #36]	; (800c410 <USBH_MSC_BOT_Init+0x40>)
 800c3ec:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800c3fe:	2300      	movs	r3, #0
}
 800c400:	4618      	mov	r0, r3
 800c402:	3714      	adds	r7, #20
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr
 800c40c:	43425355 	.word	0x43425355
 800c410:	20304050 	.word	0x20304050

0800c414 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b088      	sub	sp, #32
 800c418:	af02      	add	r7, sp, #8
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	460b      	mov	r3, r1
 800c41e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800c420:	2301      	movs	r3, #1
 800c422:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800c424:	2301      	movs	r3, #1
 800c426:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800c428:	2301      	movs	r3, #1
 800c42a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c42c:	2300      	movs	r3, #0
 800c42e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c436:	69db      	ldr	r3, [r3, #28]
 800c438:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800c43a:	2300      	movs	r3, #0
 800c43c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c444:	3b01      	subs	r3, #1
 800c446:	2b0a      	cmp	r3, #10
 800c448:	f200 819e 	bhi.w	800c788 <USBH_MSC_BOT_Process+0x374>
 800c44c:	a201      	add	r2, pc, #4	; (adr r2, 800c454 <USBH_MSC_BOT_Process+0x40>)
 800c44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c452:	bf00      	nop
 800c454:	0800c481 	.word	0x0800c481
 800c458:	0800c4a9 	.word	0x0800c4a9
 800c45c:	0800c513 	.word	0x0800c513
 800c460:	0800c531 	.word	0x0800c531
 800c464:	0800c5b5 	.word	0x0800c5b5
 800c468:	0800c5d7 	.word	0x0800c5d7
 800c46c:	0800c66f 	.word	0x0800c66f
 800c470:	0800c68b 	.word	0x0800c68b
 800c474:	0800c6dd 	.word	0x0800c6dd
 800c478:	0800c70d 	.word	0x0800c70d
 800c47c:	0800c76f 	.word	0x0800c76f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	78fa      	ldrb	r2, [r7, #3]
 800c484:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	2202      	movs	r2, #2
 800c48c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	795b      	ldrb	r3, [r3, #5]
 800c49a:	2201      	movs	r2, #1
 800c49c:	9200      	str	r2, [sp, #0]
 800c49e:	221f      	movs	r2, #31
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f002 f8f4 	bl	800e68e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800c4a6:	e17e      	b.n	800c7a6 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	795b      	ldrb	r3, [r3, #5]
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f00c fff8 	bl	80194a4 <USBH_LL_GetURBState>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c4b8:	7d3b      	ldrb	r3, [r7, #20]
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d118      	bne.n	800c4f0 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d00f      	beq.n	800c4e6 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c4cc:	b25b      	sxtb	r3, r3
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	da04      	bge.n	800c4dc <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	2203      	movs	r2, #3
 800c4d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c4da:	e157      	b.n	800c78c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	2205      	movs	r2, #5
 800c4e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c4e4:	e152      	b.n	800c78c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	2207      	movs	r2, #7
 800c4ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c4ee:	e14d      	b.n	800c78c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c4f0:	7d3b      	ldrb	r3, [r7, #20]
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	d104      	bne.n	800c500 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c4fe:	e145      	b.n	800c78c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800c500:	7d3b      	ldrb	r3, [r7, #20]
 800c502:	2b05      	cmp	r3, #5
 800c504:	f040 8142 	bne.w	800c78c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	220a      	movs	r2, #10
 800c50c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c510:	e13c      	b.n	800c78c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	895a      	ldrh	r2, [r3, #10]
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	791b      	ldrb	r3, [r3, #4]
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f002 f8d9 	bl	800e6d8 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	2204      	movs	r2, #4
 800c52a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800c52e:	e13a      	b.n	800c7a6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	791b      	ldrb	r3, [r3, #4]
 800c534:	4619      	mov	r1, r3
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f00c ffb4 	bl	80194a4 <USBH_LL_GetURBState>
 800c53c:	4603      	mov	r3, r0
 800c53e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c540:	7d3b      	ldrb	r3, [r7, #20]
 800c542:	2b01      	cmp	r3, #1
 800c544:	d12d      	bne.n	800c5a2 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c54a:	693a      	ldr	r2, [r7, #16]
 800c54c:	8952      	ldrh	r2, [r2, #10]
 800c54e:	4293      	cmp	r3, r2
 800c550:	d910      	bls.n	800c574 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c558:	693a      	ldr	r2, [r7, #16]
 800c55a:	8952      	ldrh	r2, [r2, #10]
 800c55c:	441a      	add	r2, r3
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c568:	693a      	ldr	r2, [r7, #16]
 800c56a:	8952      	ldrh	r2, [r2, #10]
 800c56c:	1a9a      	subs	r2, r3, r2
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	65da      	str	r2, [r3, #92]	; 0x5c
 800c572:	e002      	b.n	800c57a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	2200      	movs	r2, #0
 800c578:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00a      	beq.n	800c598 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	895a      	ldrh	r2, [r3, #10]
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	791b      	ldrb	r3, [r3, #4]
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f002 f8a1 	bl	800e6d8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800c596:	e0fb      	b.n	800c790 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	2207      	movs	r2, #7
 800c59c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c5a0:	e0f6      	b.n	800c790 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800c5a2:	7d3b      	ldrb	r3, [r7, #20]
 800c5a4:	2b05      	cmp	r3, #5
 800c5a6:	f040 80f3 	bne.w	800c790 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	2209      	movs	r2, #9
 800c5ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c5b2:	e0ed      	b.n	800c790 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	891a      	ldrh	r2, [r3, #8]
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	795b      	ldrb	r3, [r3, #5]
 800c5c2:	2001      	movs	r0, #1
 800c5c4:	9000      	str	r0, [sp, #0]
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f002 f861 	bl	800e68e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	2206      	movs	r2, #6
 800c5d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c5d4:	e0e7      	b.n	800c7a6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	795b      	ldrb	r3, [r3, #5]
 800c5da:	4619      	mov	r1, r3
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f00c ff61 	bl	80194a4 <USBH_LL_GetURBState>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c5e6:	7d3b      	ldrb	r3, [r7, #20]
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d12f      	bne.n	800c64c <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5f0:	693a      	ldr	r2, [r7, #16]
 800c5f2:	8912      	ldrh	r2, [r2, #8]
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d910      	bls.n	800c61a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5fe:	693a      	ldr	r2, [r7, #16]
 800c600:	8912      	ldrh	r2, [r2, #8]
 800c602:	441a      	add	r2, r3
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c60e:	693a      	ldr	r2, [r7, #16]
 800c610:	8912      	ldrh	r2, [r2, #8]
 800c612:	1a9a      	subs	r2, r3, r2
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	65da      	str	r2, [r3, #92]	; 0x5c
 800c618:	e002      	b.n	800c620 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	2200      	movs	r2, #0
 800c61e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c624:	2b00      	cmp	r3, #0
 800c626:	d00c      	beq.n	800c642 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	891a      	ldrh	r2, [r3, #8]
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	795b      	ldrb	r3, [r3, #5]
 800c636:	2001      	movs	r0, #1
 800c638:	9000      	str	r0, [sp, #0]
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f002 f827 	bl	800e68e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800c640:	e0a8      	b.n	800c794 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	2207      	movs	r2, #7
 800c646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c64a:	e0a3      	b.n	800c794 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c64c:	7d3b      	ldrb	r3, [r7, #20]
 800c64e:	2b02      	cmp	r3, #2
 800c650:	d104      	bne.n	800c65c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	2205      	movs	r2, #5
 800c656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c65a:	e09b      	b.n	800c794 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800c65c:	7d3b      	ldrb	r3, [r7, #20]
 800c65e:	2b05      	cmp	r3, #5
 800c660:	f040 8098 	bne.w	800c794 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	220a      	movs	r2, #10
 800c668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c66c:	e092      	b.n	800c794 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	791b      	ldrb	r3, [r3, #4]
 800c678:	220d      	movs	r2, #13
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f002 f82c 	bl	800e6d8 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	2208      	movs	r2, #8
 800c684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c688:	e08d      	b.n	800c7a6 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	791b      	ldrb	r3, [r3, #4]
 800c68e:	4619      	mov	r1, r3
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f00c ff07 	bl	80194a4 <USBH_LL_GetURBState>
 800c696:	4603      	mov	r3, r0
 800c698:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800c69a:	7d3b      	ldrb	r3, [r7, #20]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d115      	bne.n	800c6cc <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 f8a9 	bl	800c808 <USBH_MSC_DecodeCSW>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800c6ba:	7d7b      	ldrb	r3, [r7, #21]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d102      	bne.n	800c6c6 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800c6c4:	e068      	b.n	800c798 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800c6c6:	2302      	movs	r3, #2
 800c6c8:	75fb      	strb	r3, [r7, #23]
      break;
 800c6ca:	e065      	b.n	800c798 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800c6cc:	7d3b      	ldrb	r3, [r7, #20]
 800c6ce:	2b05      	cmp	r3, #5
 800c6d0:	d162      	bne.n	800c798 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	2209      	movs	r2, #9
 800c6d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c6da:	e05d      	b.n	800c798 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800c6dc:	78fb      	ldrb	r3, [r7, #3]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f864 	bl	800c7b0 <USBH_MSC_BOT_Abort>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c6ec:	7dbb      	ldrb	r3, [r7, #22]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d104      	bne.n	800c6fc <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	2207      	movs	r2, #7
 800c6f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800c6fa:	e04f      	b.n	800c79c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800c6fc:	7dbb      	ldrb	r3, [r7, #22]
 800c6fe:	2b04      	cmp	r3, #4
 800c700:	d14c      	bne.n	800c79c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	220b      	movs	r2, #11
 800c706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c70a:	e047      	b.n	800c79c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800c70c:	78fb      	ldrb	r3, [r7, #3]
 800c70e:	2201      	movs	r2, #1
 800c710:	4619      	mov	r1, r3
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 f84c 	bl	800c7b0 <USBH_MSC_BOT_Abort>
 800c718:	4603      	mov	r3, r0
 800c71a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c71c:	7dbb      	ldrb	r3, [r7, #22]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d11d      	bne.n	800c75e <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	795b      	ldrb	r3, [r3, #5]
 800c726:	4619      	mov	r1, r3
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f00c ff15 	bl	8019558 <USBH_LL_GetToggle>
 800c72e:	4603      	mov	r3, r0
 800c730:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	7959      	ldrb	r1, [r3, #5]
 800c736:	7bfb      	ldrb	r3, [r7, #15]
 800c738:	f1c3 0301 	rsb	r3, r3, #1
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	461a      	mov	r2, r3
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f00c fed9 	bl	80194f8 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	791b      	ldrb	r3, [r3, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	4619      	mov	r1, r3
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f00c fed2 	bl	80194f8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	2209      	movs	r2, #9
 800c758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800c75c:	e020      	b.n	800c7a0 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800c75e:	7dbb      	ldrb	r3, [r7, #22]
 800c760:	2b04      	cmp	r3, #4
 800c762:	d11d      	bne.n	800c7a0 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	220b      	movs	r2, #11
 800c768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c76c:	e018      	b.n	800c7a0 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7ff fdf2 	bl	800c358 <USBH_MSC_BOT_REQ_Reset>
 800c774:	4603      	mov	r3, r0
 800c776:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800c778:	7dfb      	ldrb	r3, [r7, #23]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d112      	bne.n	800c7a4 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	2201      	movs	r2, #1
 800c782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800c786:	e00d      	b.n	800c7a4 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800c788:	bf00      	nop
 800c78a:	e00c      	b.n	800c7a6 <USBH_MSC_BOT_Process+0x392>
      break;
 800c78c:	bf00      	nop
 800c78e:	e00a      	b.n	800c7a6 <USBH_MSC_BOT_Process+0x392>
      break;
 800c790:	bf00      	nop
 800c792:	e008      	b.n	800c7a6 <USBH_MSC_BOT_Process+0x392>
      break;
 800c794:	bf00      	nop
 800c796:	e006      	b.n	800c7a6 <USBH_MSC_BOT_Process+0x392>
      break;
 800c798:	bf00      	nop
 800c79a:	e004      	b.n	800c7a6 <USBH_MSC_BOT_Process+0x392>
      break;
 800c79c:	bf00      	nop
 800c79e:	e002      	b.n	800c7a6 <USBH_MSC_BOT_Process+0x392>
      break;
 800c7a0:	bf00      	nop
 800c7a2:	e000      	b.n	800c7a6 <USBH_MSC_BOT_Process+0x392>
      break;
 800c7a4:	bf00      	nop
  }
  return status;
 800c7a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3718      	adds	r7, #24
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	70fb      	strb	r3, [r7, #3]
 800c7bc:	4613      	mov	r3, r2
 800c7be:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800c7c0:	2302      	movs	r3, #2
 800c7c2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7ca:	69db      	ldr	r3, [r3, #28]
 800c7cc:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800c7ce:	78bb      	ldrb	r3, [r7, #2]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d002      	beq.n	800c7da <USBH_MSC_BOT_Abort+0x2a>
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d009      	beq.n	800c7ec <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800c7d8:	e011      	b.n	800c7fe <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	79db      	ldrb	r3, [r3, #7]
 800c7de:	4619      	mov	r1, r3
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f001 fb58 	bl	800de96 <USBH_ClrFeature>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ea:	e008      	b.n	800c7fe <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	799b      	ldrb	r3, [r3, #6]
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f001 fb4f 	bl	800de96 <USBH_ClrFeature>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c7fc:	bf00      	nop
  }
  return status;
 800c7fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c800:	4618      	mov	r0, r3
 800c802:	3710      	adds	r7, #16
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c816:	69db      	ldr	r3, [r3, #28]
 800c818:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800c81a:	2301      	movs	r3, #1
 800c81c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	791b      	ldrb	r3, [r3, #4]
 800c822:	4619      	mov	r1, r3
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f00c fdab 	bl	8019380 <USBH_LL_GetLastXferSize>
 800c82a:	4603      	mov	r3, r0
 800c82c:	2b0d      	cmp	r3, #13
 800c82e:	d002      	beq.n	800c836 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800c830:	2302      	movs	r3, #2
 800c832:	73fb      	strb	r3, [r7, #15]
 800c834:	e024      	b.n	800c880 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c83a:	4a14      	ldr	r2, [pc, #80]	; (800c88c <USBH_MSC_DecodeCSW+0x84>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d11d      	bne.n	800c87c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c848:	429a      	cmp	r2, r3
 800c84a:	d119      	bne.n	800c880 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c852:	2b00      	cmp	r3, #0
 800c854:	d102      	bne.n	800c85c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800c856:	2300      	movs	r3, #0
 800c858:	73fb      	strb	r3, [r7, #15]
 800c85a:	e011      	b.n	800c880 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c862:	2b01      	cmp	r3, #1
 800c864:	d102      	bne.n	800c86c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800c866:	2301      	movs	r3, #1
 800c868:	73fb      	strb	r3, [r7, #15]
 800c86a:	e009      	b.n	800c880 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c872:	2b02      	cmp	r3, #2
 800c874:	d104      	bne.n	800c880 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800c876:	2302      	movs	r3, #2
 800c878:	73fb      	strb	r3, [r7, #15]
 800c87a:	e001      	b.n	800c880 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800c87c:	2302      	movs	r3, #2
 800c87e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800c880:	7bfb      	ldrb	r3, [r7, #15]
}
 800c882:	4618      	mov	r0, r3
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	53425355 	.word	0x53425355

0800c890 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	460b      	mov	r3, r1
 800c89a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c89c:	2302      	movs	r3, #2
 800c89e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c8a6:	69db      	ldr	r3, [r3, #28]
 800c8a8:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d002      	beq.n	800c8ba <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800c8b4:	2b02      	cmp	r3, #2
 800c8b6:	d021      	beq.n	800c8fc <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c8b8:	e028      	b.n	800c90c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	220a      	movs	r2, #10
 800c8cc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	3363      	adds	r3, #99	; 0x63
 800c8d4:	2210      	movs	r2, #16
 800c8d6:	2100      	movs	r1, #0
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f00c ff11 	bl	8019700 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	2202      	movs	r2, #2
 800c8f2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	73fb      	strb	r3, [r7, #15]
      break;
 800c8fa:	e007      	b.n	800c90c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c8fc:	78fb      	ldrb	r3, [r7, #3]
 800c8fe:	4619      	mov	r1, r3
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f7ff fd87 	bl	800c414 <USBH_MSC_BOT_Process>
 800c906:	4603      	mov	r3, r0
 800c908:	73fb      	strb	r3, [r7, #15]
      break;
 800c90a:	bf00      	nop
  }

  return error;
 800c90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b086      	sub	sp, #24
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	60f8      	str	r0, [r7, #12]
 800c91e:	460b      	mov	r3, r1
 800c920:	607a      	str	r2, [r7, #4]
 800c922:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800c924:	2301      	movs	r3, #1
 800c926:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c92e:	69db      	ldr	r3, [r3, #28]
 800c930:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d002      	beq.n	800c942 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800c93c:	2b02      	cmp	r3, #2
 800c93e:	d027      	beq.n	800c990 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800c940:	e05f      	b.n	800ca02 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	2208      	movs	r2, #8
 800c946:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	2280      	movs	r2, #128	; 0x80
 800c94c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	220a      	movs	r2, #10
 800c954:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	3363      	adds	r3, #99	; 0x63
 800c95c:	2210      	movs	r2, #16
 800c95e:	2100      	movs	r1, #0
 800c960:	4618      	mov	r0, r3
 800c962:	f00c fecd 	bl	8019700 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	2225      	movs	r2, #37	; 0x25
 800c96a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	2201      	movs	r2, #1
 800c972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	2202      	movs	r2, #2
 800c97a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	f103 0210 	add.w	r2, r3, #16
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c98a:	2301      	movs	r3, #1
 800c98c:	75fb      	strb	r3, [r7, #23]
      break;
 800c98e:	e038      	b.n	800ca02 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c990:	7afb      	ldrb	r3, [r7, #11]
 800c992:	4619      	mov	r1, r3
 800c994:	68f8      	ldr	r0, [r7, #12]
 800c996:	f7ff fd3d 	bl	800c414 <USBH_MSC_BOT_Process>
 800c99a:	4603      	mov	r3, r0
 800c99c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c99e:	7dfb      	ldrb	r3, [r7, #23]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d12d      	bne.n	800ca00 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9aa:	3303      	adds	r3, #3
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9b6:	3302      	adds	r3, #2
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	021b      	lsls	r3, r3, #8
 800c9bc:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c9ca:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	061b      	lsls	r3, r3, #24
 800c9d6:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9e2:	3307      	adds	r3, #7
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	b29a      	uxth	r2, r3
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9ee:	3306      	adds	r3, #6
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	021b      	lsls	r3, r3, #8
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	809a      	strh	r2, [r3, #4]
      break;
 800ca00:	bf00      	nop
  }

  return error;
 800ca02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3718      	adds	r7, #24
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b086      	sub	sp, #24
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	460b      	mov	r3, r1
 800ca16:	607a      	str	r2, [r7, #4]
 800ca18:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800ca1a:	2302      	movs	r3, #2
 800ca1c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca24:	69db      	ldr	r3, [r3, #28]
 800ca26:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d002      	beq.n	800ca38 <USBH_MSC_SCSI_Inquiry+0x2c>
 800ca32:	2b02      	cmp	r3, #2
 800ca34:	d03d      	beq.n	800cab2 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800ca36:	e089      	b.n	800cb4c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	2224      	movs	r2, #36	; 0x24
 800ca3c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	2280      	movs	r2, #128	; 0x80
 800ca42:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	220a      	movs	r2, #10
 800ca4a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	3363      	adds	r3, #99	; 0x63
 800ca52:	220a      	movs	r2, #10
 800ca54:	2100      	movs	r1, #0
 800ca56:	4618      	mov	r0, r3
 800ca58:	f00c fe52 	bl	8019700 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	2212      	movs	r2, #18
 800ca60:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ca64:	7afb      	ldrb	r3, [r7, #11]
 800ca66:	015b      	lsls	r3, r3, #5
 800ca68:	b2da      	uxtb	r2, r3
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	2200      	movs	r2, #0
 800ca74:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	2224      	movs	r2, #36	; 0x24
 800ca84:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	2201      	movs	r2, #1
 800ca94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	2202      	movs	r2, #2
 800ca9c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	f103 0210 	add.w	r2, r3, #16
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800caac:	2301      	movs	r3, #1
 800caae:	75fb      	strb	r3, [r7, #23]
      break;
 800cab0:	e04c      	b.n	800cb4c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cab2:	7afb      	ldrb	r3, [r7, #11]
 800cab4:	4619      	mov	r1, r3
 800cab6:	68f8      	ldr	r0, [r7, #12]
 800cab8:	f7ff fcac 	bl	800c414 <USBH_MSC_BOT_Process>
 800cabc:	4603      	mov	r3, r0
 800cabe:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800cac0:	7dfb      	ldrb	r3, [r7, #23]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d141      	bne.n	800cb4a <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800cac6:	2222      	movs	r2, #34	; 0x22
 800cac8:	2100      	movs	r1, #0
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f00c fe18 	bl	8019700 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	f003 031f 	and.w	r3, r3, #31
 800cadc:	b2da      	uxtb	r2, r3
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	095b      	lsrs	r3, r3, #5
 800caec:	b2da      	uxtb	r2, r3
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caf8:	3301      	adds	r3, #1
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	b25b      	sxtb	r3, r3
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	da03      	bge.n	800cb0a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2201      	movs	r2, #1
 800cb06:	709a      	strb	r2, [r3, #2]
 800cb08:	e002      	b.n	800cb10 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	1cd8      	adds	r0, r3, #3
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb1a:	3308      	adds	r3, #8
 800cb1c:	2208      	movs	r2, #8
 800cb1e:	4619      	mov	r1, r3
 800cb20:	f00c fde0 	bl	80196e4 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f103 000c 	add.w	r0, r3, #12
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb30:	3310      	adds	r3, #16
 800cb32:	2210      	movs	r2, #16
 800cb34:	4619      	mov	r1, r3
 800cb36:	f00c fdd5 	bl	80196e4 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	331d      	adds	r3, #29
 800cb3e:	693a      	ldr	r2, [r7, #16]
 800cb40:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800cb44:	3220      	adds	r2, #32
 800cb46:	6812      	ldr	r2, [r2, #0]
 800cb48:	601a      	str	r2, [r3, #0]
      break;
 800cb4a:	bf00      	nop
  }

  return error;
 800cb4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3718      	adds	r7, #24
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b086      	sub	sp, #24
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	60f8      	str	r0, [r7, #12]
 800cb5e:	460b      	mov	r3, r1
 800cb60:	607a      	str	r2, [r7, #4]
 800cb62:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800cb64:	2302      	movs	r3, #2
 800cb66:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb6e:	69db      	ldr	r3, [r3, #28]
 800cb70:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d002      	beq.n	800cb82 <USBH_MSC_SCSI_RequestSense+0x2c>
 800cb7c:	2b02      	cmp	r3, #2
 800cb7e:	d03d      	beq.n	800cbfc <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800cb80:	e05d      	b.n	800cc3e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	220e      	movs	r2, #14
 800cb86:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	2280      	movs	r2, #128	; 0x80
 800cb8c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	220a      	movs	r2, #10
 800cb94:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	3363      	adds	r3, #99	; 0x63
 800cb9c:	2210      	movs	r2, #16
 800cb9e:	2100      	movs	r1, #0
 800cba0:	4618      	mov	r0, r3
 800cba2:	f00c fdad 	bl	8019700 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	2203      	movs	r2, #3
 800cbaa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800cbae:	7afb      	ldrb	r3, [r7, #11]
 800cbb0:	015b      	lsls	r3, r3, #5
 800cbb2:	b2da      	uxtb	r2, r3
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	220e      	movs	r2, #14
 800cbce:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	2201      	movs	r2, #1
 800cbde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	2202      	movs	r2, #2
 800cbe6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	f103 0210 	add.w	r2, r3, #16
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	75fb      	strb	r3, [r7, #23]
      break;
 800cbfa:	e020      	b.n	800cc3e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cbfc:	7afb      	ldrb	r3, [r7, #11]
 800cbfe:	4619      	mov	r1, r3
 800cc00:	68f8      	ldr	r0, [r7, #12]
 800cc02:	f7ff fc07 	bl	800c414 <USBH_MSC_BOT_Process>
 800cc06:	4603      	mov	r3, r0
 800cc08:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800cc0a:	7dfb      	ldrb	r3, [r7, #23]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d115      	bne.n	800cc3c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc16:	3302      	adds	r3, #2
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	f003 030f 	and.w	r3, r3, #15
 800cc1e:	b2da      	uxtb	r2, r3
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc2a:	7b1a      	ldrb	r2, [r3, #12]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc36:	7b5a      	ldrb	r2, [r3, #13]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	709a      	strb	r2, [r3, #2]
      break;
 800cc3c:	bf00      	nop
  }

  return error;
 800cc3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3718      	adds	r7, #24
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b086      	sub	sp, #24
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	607a      	str	r2, [r7, #4]
 800cc52:	603b      	str	r3, [r7, #0]
 800cc54:	460b      	mov	r3, r1
 800cc56:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800cc58:	2302      	movs	r3, #2
 800cc5a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc62:	69db      	ldr	r3, [r3, #28]
 800cc64:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d002      	beq.n	800cc76 <USBH_MSC_SCSI_Write+0x2e>
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	d047      	beq.n	800cd04 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800cc74:	e04e      	b.n	800cd14 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	6a3b      	ldr	r3, [r7, #32]
 800cc80:	fb03 f202 	mul.w	r2, r3, r2
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	220a      	movs	r2, #10
 800cc94:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	3363      	adds	r3, #99	; 0x63
 800cc9c:	2210      	movs	r2, #16
 800cc9e:	2100      	movs	r1, #0
 800cca0:	4618      	mov	r0, r3
 800cca2:	f00c fd2d 	bl	8019700 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	222a      	movs	r2, #42	; 0x2a
 800ccaa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ccae:	79fa      	ldrb	r2, [r7, #7]
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ccb6:	79ba      	ldrb	r2, [r7, #6]
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ccbe:	797a      	ldrb	r2, [r7, #5]
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ccc6:	1d3b      	adds	r3, r7, #4
 800ccc8:	781a      	ldrb	r2, [r3, #0]
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ccd0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ccda:	f107 0320 	add.w	r3, r7, #32
 800ccde:	781a      	ldrb	r2, [r3, #0]
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	2201      	movs	r2, #1
 800ccea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	2202      	movs	r2, #2
 800ccf2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	683a      	ldr	r2, [r7, #0]
 800ccfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	75fb      	strb	r3, [r7, #23]
      break;
 800cd02:	e007      	b.n	800cd14 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cd04:	7afb      	ldrb	r3, [r7, #11]
 800cd06:	4619      	mov	r1, r3
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f7ff fb83 	bl	800c414 <USBH_MSC_BOT_Process>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	75fb      	strb	r3, [r7, #23]
      break;
 800cd12:	bf00      	nop
  }

  return error;
 800cd14:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3718      	adds	r7, #24
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b086      	sub	sp, #24
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	60f8      	str	r0, [r7, #12]
 800cd26:	607a      	str	r2, [r7, #4]
 800cd28:	603b      	str	r3, [r7, #0]
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800cd2e:	2302      	movs	r3, #2
 800cd30:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd38:	69db      	ldr	r3, [r3, #28]
 800cd3a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d002      	beq.n	800cd4c <USBH_MSC_SCSI_Read+0x2e>
 800cd46:	2b02      	cmp	r3, #2
 800cd48:	d047      	beq.n	800cdda <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800cd4a:	e04e      	b.n	800cdea <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800cd52:	461a      	mov	r2, r3
 800cd54:	6a3b      	ldr	r3, [r7, #32]
 800cd56:	fb03 f202 	mul.w	r2, r3, r2
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	2280      	movs	r2, #128	; 0x80
 800cd62:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	220a      	movs	r2, #10
 800cd6a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	3363      	adds	r3, #99	; 0x63
 800cd72:	2210      	movs	r2, #16
 800cd74:	2100      	movs	r1, #0
 800cd76:	4618      	mov	r0, r3
 800cd78:	f00c fcc2 	bl	8019700 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	2228      	movs	r2, #40	; 0x28
 800cd80:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800cd84:	79fa      	ldrb	r2, [r7, #7]
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800cd8c:	79ba      	ldrb	r2, [r7, #6]
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800cd94:	797a      	ldrb	r2, [r7, #5]
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800cd9c:	1d3b      	adds	r3, r7, #4
 800cd9e:	781a      	ldrb	r2, [r3, #0]
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800cda6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800cdb0:	f107 0320 	add.w	r3, r7, #32
 800cdb4:	781a      	ldrb	r2, [r3, #0]
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	2202      	movs	r2, #2
 800cdc8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	683a      	ldr	r2, [r7, #0]
 800cdd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	75fb      	strb	r3, [r7, #23]
      break;
 800cdd8:	e007      	b.n	800cdea <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cdda:	7afb      	ldrb	r3, [r7, #11]
 800cddc:	4619      	mov	r1, r3
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f7ff fb18 	bl	800c414 <USBH_MSC_BOT_Process>
 800cde4:	4603      	mov	r3, r0
 800cde6:	75fb      	strb	r3, [r7, #23]
      break;
 800cde8:	bf00      	nop
  }

  return error;
 800cdea:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3718      	adds	r7, #24
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	4613      	mov	r3, r2
 800ce00:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d10a      	bne.n	800ce1e <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800ce08:	481c      	ldr	r0, [pc, #112]	; (800ce7c <USBH_Init+0x88>)
 800ce0a:	f00d f995 	bl	801a138 <iprintf>
 800ce0e:	481c      	ldr	r0, [pc, #112]	; (800ce80 <USBH_Init+0x8c>)
 800ce10:	f00d f992 	bl	801a138 <iprintf>
 800ce14:	200a      	movs	r0, #10
 800ce16:	f00d f9a7 	bl	801a168 <putchar>
    return USBH_FAIL;
 800ce1a:	2302      	movs	r3, #2
 800ce1c:	e029      	b.n	800ce72 <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	79fa      	ldrb	r2, [r7, #7]
 800ce22:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2200      	movs	r2, #0
 800ce32:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800ce36:	68f8      	ldr	r0, [r7, #12]
 800ce38:	f000 f824 	bl	800ce84 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2200      	movs	r2, #0
 800ce48:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2200      	movs	r2, #0
 800ce58:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d003      	beq.n	800ce6a <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	68ba      	ldr	r2, [r7, #8]
 800ce66:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	f00c f9d4 	bl	8019218 <USBH_LL_Init>

  return USBH_OK;
 800ce70:	2300      	movs	r3, #0
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3710      	adds	r7, #16
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	0801c4f4 	.word	0x0801c4f4
 800ce80:	0801c4fc 	.word	0x0801c4fc

0800ce84 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b085      	sub	sp, #20
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ce90:	2300      	movs	r3, #0
 800ce92:	60fb      	str	r3, [r7, #12]
 800ce94:	e009      	b.n	800ceaa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	33e0      	adds	r3, #224	; 0xe0
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	4413      	add	r3, r2
 800cea0:	2200      	movs	r2, #0
 800cea2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	3301      	adds	r3, #1
 800cea8:	60fb      	str	r3, [r7, #12]
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2b0e      	cmp	r3, #14
 800ceae:	d9f2      	bls.n	800ce96 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	60fb      	str	r3, [r7, #12]
 800ceb4:	e009      	b.n	800ceca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	4413      	add	r3, r2
 800cebc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cec0:	2200      	movs	r2, #0
 800cec2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	3301      	adds	r3, #1
 800cec8:	60fb      	str	r3, [r7, #12]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ced0:	d3f1      	bcc.n	800ceb6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2201      	movs	r2, #1
 800cee2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2201      	movs	r2, #1
 800cef0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2240      	movs	r2, #64	; 0x40
 800cef6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2200      	movs	r2, #0
 800cf02:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2201      	movs	r2, #1
 800cf0a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800cf1e:	2300      	movs	r3, #0
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3714      	adds	r7, #20
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cf36:	2300      	movs	r3, #0
 800cf38:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d01f      	beq.n	800cf80 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10e      	bne.n	800cf68 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cf50:	1c59      	adds	r1, r3, #1
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	33de      	adds	r3, #222	; 0xde
 800cf5c:	6839      	ldr	r1, [r7, #0]
 800cf5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800cf62:	2300      	movs	r3, #0
 800cf64:	73fb      	strb	r3, [r7, #15]
 800cf66:	e016      	b.n	800cf96 <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800cf68:	480d      	ldr	r0, [pc, #52]	; (800cfa0 <USBH_RegisterClass+0x74>)
 800cf6a:	f00d f8e5 	bl	801a138 <iprintf>
 800cf6e:	480d      	ldr	r0, [pc, #52]	; (800cfa4 <USBH_RegisterClass+0x78>)
 800cf70:	f00d f8e2 	bl	801a138 <iprintf>
 800cf74:	200a      	movs	r0, #10
 800cf76:	f00d f8f7 	bl	801a168 <putchar>
      status = USBH_FAIL;
 800cf7a:	2302      	movs	r3, #2
 800cf7c:	73fb      	strb	r3, [r7, #15]
 800cf7e:	e00a      	b.n	800cf96 <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800cf80:	4807      	ldr	r0, [pc, #28]	; (800cfa0 <USBH_RegisterClass+0x74>)
 800cf82:	f00d f8d9 	bl	801a138 <iprintf>
 800cf86:	4808      	ldr	r0, [pc, #32]	; (800cfa8 <USBH_RegisterClass+0x7c>)
 800cf88:	f00d f8d6 	bl	801a138 <iprintf>
 800cf8c:	200a      	movs	r0, #10
 800cf8e:	f00d f8eb 	bl	801a168 <putchar>
    status = USBH_FAIL;
 800cf92:	2302      	movs	r3, #2
 800cf94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cf96:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3710      	adds	r7, #16
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	0801c4f4 	.word	0x0801c4f4
 800cfa4:	0801c510 	.word	0x0801c510
 800cfa8:	0801c52c 	.word	0x0801c52c

0800cfac <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	460b      	mov	r3, r1
 800cfb6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800cfc2:	78fa      	ldrb	r2, [r7, #3]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d23c      	bcs.n	800d042 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	78fa      	ldrb	r2, [r7, #3]
 800cfcc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800cfd0:	78fb      	ldrb	r3, [r7, #3]
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	4823      	ldr	r0, [pc, #140]	; (800d064 <USBH_SelectInterface+0xb8>)
 800cfd6:	f00d f8af 	bl	801a138 <iprintf>
 800cfda:	200a      	movs	r0, #10
 800cfdc:	f00d f8c4 	bl	801a168 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800cfe0:	78fb      	ldrb	r3, [r7, #3]
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	211a      	movs	r1, #26
 800cfe6:	fb01 f303 	mul.w	r3, r1, r3
 800cfea:	4413      	add	r3, r2
 800cfec:	f203 3347 	addw	r3, r3, #839	; 0x347
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	4619      	mov	r1, r3
 800cff4:	481c      	ldr	r0, [pc, #112]	; (800d068 <USBH_SelectInterface+0xbc>)
 800cff6:	f00d f89f 	bl	801a138 <iprintf>
 800cffa:	200a      	movs	r0, #10
 800cffc:	f00d f8b4 	bl	801a168 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800d000:	78fb      	ldrb	r3, [r7, #3]
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	211a      	movs	r1, #26
 800d006:	fb01 f303 	mul.w	r3, r1, r3
 800d00a:	4413      	add	r3, r2
 800d00c:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	4619      	mov	r1, r3
 800d014:	4815      	ldr	r0, [pc, #84]	; (800d06c <USBH_SelectInterface+0xc0>)
 800d016:	f00d f88f 	bl	801a138 <iprintf>
 800d01a:	200a      	movs	r0, #10
 800d01c:	f00d f8a4 	bl	801a168 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800d020:	78fb      	ldrb	r3, [r7, #3]
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	211a      	movs	r1, #26
 800d026:	fb01 f303 	mul.w	r3, r1, r3
 800d02a:	4413      	add	r3, r2
 800d02c:	f203 3349 	addw	r3, r3, #841	; 0x349
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	4619      	mov	r1, r3
 800d034:	480e      	ldr	r0, [pc, #56]	; (800d070 <USBH_SelectInterface+0xc4>)
 800d036:	f00d f87f 	bl	801a138 <iprintf>
 800d03a:	200a      	movs	r0, #10
 800d03c:	f00d f894 	bl	801a168 <putchar>
 800d040:	e00a      	b.n	800d058 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800d042:	480c      	ldr	r0, [pc, #48]	; (800d074 <USBH_SelectInterface+0xc8>)
 800d044:	f00d f878 	bl	801a138 <iprintf>
 800d048:	480b      	ldr	r0, [pc, #44]	; (800d078 <USBH_SelectInterface+0xcc>)
 800d04a:	f00d f875 	bl	801a138 <iprintf>
 800d04e:	200a      	movs	r0, #10
 800d050:	f00d f88a 	bl	801a168 <putchar>
    status = USBH_FAIL;
 800d054:	2302      	movs	r3, #2
 800d056:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d058:	7bfb      	ldrb	r3, [r7, #15]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	0801c544 	.word	0x0801c544
 800d068:	0801c564 	.word	0x0801c564
 800d06c:	0801c574 	.word	0x0801c574
 800d070:	0801c584 	.word	0x0801c584
 800d074:	0801c4f4 	.word	0x0801c4f4
 800d078:	0801c594 	.word	0x0801c594

0800d07c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b087      	sub	sp, #28
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	4608      	mov	r0, r1
 800d086:	4611      	mov	r1, r2
 800d088:	461a      	mov	r2, r3
 800d08a:	4603      	mov	r3, r0
 800d08c:	70fb      	strb	r3, [r7, #3]
 800d08e:	460b      	mov	r3, r1
 800d090:	70bb      	strb	r3, [r7, #2]
 800d092:	4613      	mov	r3, r2
 800d094:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d096:	2300      	movs	r3, #0
 800d098:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800d09a:	2300      	movs	r3, #0
 800d09c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d0a4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d0a6:	e025      	b.n	800d0f4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d0a8:	7dfb      	ldrb	r3, [r7, #23]
 800d0aa:	221a      	movs	r2, #26
 800d0ac:	fb02 f303 	mul.w	r3, r2, r3
 800d0b0:	3308      	adds	r3, #8
 800d0b2:	68fa      	ldr	r2, [r7, #12]
 800d0b4:	4413      	add	r3, r2
 800d0b6:	3302      	adds	r3, #2
 800d0b8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	795b      	ldrb	r3, [r3, #5]
 800d0be:	78fa      	ldrb	r2, [r7, #3]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d002      	beq.n	800d0ca <USBH_FindInterface+0x4e>
 800d0c4:	78fb      	ldrb	r3, [r7, #3]
 800d0c6:	2bff      	cmp	r3, #255	; 0xff
 800d0c8:	d111      	bne.n	800d0ee <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d0ce:	78ba      	ldrb	r2, [r7, #2]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d002      	beq.n	800d0da <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d0d4:	78bb      	ldrb	r3, [r7, #2]
 800d0d6:	2bff      	cmp	r3, #255	; 0xff
 800d0d8:	d109      	bne.n	800d0ee <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d0de:	787a      	ldrb	r2, [r7, #1]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d002      	beq.n	800d0ea <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d0e4:	787b      	ldrb	r3, [r7, #1]
 800d0e6:	2bff      	cmp	r3, #255	; 0xff
 800d0e8:	d101      	bne.n	800d0ee <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d0ea:	7dfb      	ldrb	r3, [r7, #23]
 800d0ec:	e006      	b.n	800d0fc <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d0ee:	7dfb      	ldrb	r3, [r7, #23]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d0f4:	7dfb      	ldrb	r3, [r7, #23]
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d9d6      	bls.n	800d0a8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d0fa:	23ff      	movs	r3, #255	; 0xff
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	371c      	adds	r7, #28
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f00c f8bd 	bl	8019290 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800d116:	2101      	movs	r1, #1
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f00c f9d6 	bl	80194ca <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d11e:	2300      	movs	r3, #0
}
 800d120:	4618      	mov	r0, r3
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b088      	sub	sp, #32
 800d12c:	af04      	add	r7, sp, #16
 800d12e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d130:	2302      	movs	r3, #2
 800d132:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d134:	2300      	movs	r3, #0
 800d136:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	2b01      	cmp	r3, #1
 800d142:	d102      	bne.n	800d14a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2203      	movs	r2, #3
 800d148:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	2b0b      	cmp	r3, #11
 800d152:	f200 822b 	bhi.w	800d5ac <USBH_Process+0x484>
 800d156:	a201      	add	r2, pc, #4	; (adr r2, 800d15c <USBH_Process+0x34>)
 800d158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d15c:	0800d18d 	.word	0x0800d18d
 800d160:	0800d1cb 	.word	0x0800d1cb
 800d164:	0800d24b 	.word	0x0800d24b
 800d168:	0800d53b 	.word	0x0800d53b
 800d16c:	0800d5ad 	.word	0x0800d5ad
 800d170:	0800d2ef 	.word	0x0800d2ef
 800d174:	0800d4bd 	.word	0x0800d4bd
 800d178:	0800d33d 	.word	0x0800d33d
 800d17c:	0800d35d 	.word	0x0800d35d
 800d180:	0800d389 	.word	0x0800d389
 800d184:	0800d3c3 	.word	0x0800d3c3
 800d188:	0800d523 	.word	0x0800d523
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d192:	b2db      	uxtb	r3, r3
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 820b 	beq.w	800d5b0 <USBH_Process+0x488>
      {
        USBH_UsrLog("USB Device Connected");
 800d19a:	48b9      	ldr	r0, [pc, #740]	; (800d480 <USBH_Process+0x358>)
 800d19c:	f00c ffcc 	bl	801a138 <iprintf>
 800d1a0:	200a      	movs	r0, #10
 800d1a2:	f00c ffe1 	bl	801a168 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d1ac:	20c8      	movs	r0, #200	; 0xc8
 800d1ae:	f00c fa03 	bl	80195b8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f00c f8c9 	bl	801934a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d1c8:	e1f2      	b.n	800d5b0 <USBH_Process+0x488>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d10d      	bne.n	800d1f0 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800d1d4:	48ab      	ldr	r0, [pc, #684]	; (800d484 <USBH_Process+0x35c>)
 800d1d6:	f00c ffaf 	bl	801a138 <iprintf>
 800d1da:	200a      	movs	r0, #10
 800d1dc:	f00c ffc4 	bl	801a168 <putchar>
        phost->device.RstCnt = 0U;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2202      	movs	r2, #2
 800d1ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d1ee:	e1ec      	b.n	800d5ca <USBH_Process+0x4a2>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d1f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d1fa:	d91a      	bls.n	800d232 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d202:	3301      	adds	r3, #1
 800d204:	b2da      	uxtb	r2, r3
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d212:	2b03      	cmp	r3, #3
 800d214:	d909      	bls.n	800d22a <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800d216:	489c      	ldr	r0, [pc, #624]	; (800d488 <USBH_Process+0x360>)
 800d218:	f00c ff8e 	bl	801a138 <iprintf>
 800d21c:	200a      	movs	r0, #10
 800d21e:	f00c ffa3 	bl	801a168 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	220d      	movs	r2, #13
 800d226:	701a      	strb	r2, [r3, #0]
      break;
 800d228:	e1cf      	b.n	800d5ca <USBH_Process+0x4a2>
            phost->gState = HOST_IDLE;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2200      	movs	r2, #0
 800d22e:	701a      	strb	r2, [r3, #0]
      break;
 800d230:	e1cb      	b.n	800d5ca <USBH_Process+0x4a2>
          phost->Timeout += 10U;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d238:	f103 020a 	add.w	r2, r3, #10
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d242:	200a      	movs	r0, #10
 800d244:	f00c f9b8 	bl	80195b8 <USBH_Delay>
      break;
 800d248:	e1bf      	b.n	800d5ca <USBH_Process+0x4a2>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d250:	2b00      	cmp	r3, #0
 800d252:	d005      	beq.n	800d260 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d25a:	2104      	movs	r1, #4
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d260:	2064      	movs	r0, #100	; 0x64
 800d262:	f00c f9a9 	bl	80195b8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f00c f848 	bl	80192fc <USBH_LL_GetSpeed>
 800d26c:	4603      	mov	r3, r0
 800d26e:	461a      	mov	r2, r3
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2205      	movs	r2, #5
 800d27a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d27c:	2100      	movs	r1, #0
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f001 fa77 	bl	800e772 <USBH_AllocPipe>
 800d284:	4603      	mov	r3, r0
 800d286:	461a      	mov	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d28c:	2180      	movs	r1, #128	; 0x80
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f001 fa6f 	bl	800e772 <USBH_AllocPipe>
 800d294:	4603      	mov	r3, r0
 800d296:	461a      	mov	r2, r3
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	7919      	ldrb	r1, [r3, #4]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d2b0:	b292      	uxth	r2, r2
 800d2b2:	9202      	str	r2, [sp, #8]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	9201      	str	r2, [sp, #4]
 800d2b8:	9300      	str	r3, [sp, #0]
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2280      	movs	r2, #128	; 0x80
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f001 fa28 	bl	800e714 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	7959      	ldrb	r1, [r3, #5]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d2d8:	b292      	uxth	r2, r2
 800d2da:	9202      	str	r2, [sp, #8]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	9201      	str	r2, [sp, #4]
 800d2e0:	9300      	str	r3, [sp, #0]
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f001 fa14 	bl	800e714 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d2ec:	e16d      	b.n	800d5ca <USBH_Process+0x4a2>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 f97a 	bl	800d5e8 <USBH_HandleEnum>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d2f8:	7bbb      	ldrb	r3, [r7, #14]
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	f040 8159 	bne.w	800d5b4 <USBH_Process+0x48c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800d302:	4862      	ldr	r0, [pc, #392]	; (800d48c <USBH_Process+0x364>)
 800d304:	f00c ff18 	bl	801a138 <iprintf>
 800d308:	200a      	movs	r0, #10
 800d30a:	f00c ff2d 	bl	801a168 <putchar>

        phost->device.current_interface = 0U;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d109      	bne.n	800d334 <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800d320:	485b      	ldr	r0, [pc, #364]	; (800d490 <USBH_Process+0x368>)
 800d322:	f00c ff09 	bl	801a138 <iprintf>
 800d326:	200a      	movs	r0, #10
 800d328:	f00c ff1e 	bl	801a168 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2208      	movs	r2, #8
 800d330:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d332:	e13f      	b.n	800d5b4 <USBH_Process+0x48c>
          phost->gState = HOST_INPUT;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2207      	movs	r2, #7
 800d338:	701a      	strb	r2, [r3, #0]
      break;
 800d33a:	e13b      	b.n	800d5b4 <USBH_Process+0x48c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d342:	2b00      	cmp	r3, #0
 800d344:	f000 8138 	beq.w	800d5b8 <USBH_Process+0x490>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d34e:	2101      	movs	r1, #1
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2208      	movs	r2, #8
 800d358:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800d35a:	e12d      	b.n	800d5b8 <USBH_Process+0x490>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d362:	b29b      	uxth	r3, r3
 800d364:	4619      	mov	r1, r3
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 fd4e 	bl	800de08 <USBH_SetCfg>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	f040 8124 	bne.w	800d5bc <USBH_Process+0x494>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2209      	movs	r2, #9
 800d378:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800d37a:	4846      	ldr	r0, [pc, #280]	; (800d494 <USBH_Process+0x36c>)
 800d37c:	f00c fedc 	bl	801a138 <iprintf>
 800d380:	200a      	movs	r0, #10
 800d382:	f00c fef1 	bl	801a168 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d386:	e119      	b.n	800d5bc <USBH_Process+0x494>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d38e:	f003 0320 	and.w	r3, r3, #32
 800d392:	2b00      	cmp	r3, #0
 800d394:	d011      	beq.n	800d3ba <USBH_Process+0x292>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800d396:	2101      	movs	r1, #1
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 fd58 	bl	800de4e <USBH_SetFeature>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	f040 810d 	bne.w	800d5c0 <USBH_Process+0x498>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800d3a6:	483c      	ldr	r0, [pc, #240]	; (800d498 <USBH_Process+0x370>)
 800d3a8:	f00c fec6 	bl	801a138 <iprintf>
 800d3ac:	200a      	movs	r0, #10
 800d3ae:	f00c fedb 	bl	801a168 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	220a      	movs	r2, #10
 800d3b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d3b8:	e102      	b.n	800d5c0 <USBH_Process+0x498>
        phost->gState = HOST_CHECK_CLASS;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	220a      	movs	r2, #10
 800d3be:	701a      	strb	r2, [r3, #0]
      break;
 800d3c0:	e0fe      	b.n	800d5c0 <USBH_Process+0x498>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d106      	bne.n	800d3da <USBH_Process+0x2b2>
      {
        USBH_UsrLog("No Class has been registered.");
 800d3cc:	4833      	ldr	r0, [pc, #204]	; (800d49c <USBH_Process+0x374>)
 800d3ce:	f00c feb3 	bl	801a138 <iprintf>
 800d3d2:	200a      	movs	r0, #10
 800d3d4:	f00c fec8 	bl	801a168 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d3d8:	e0f7      	b.n	800d5ca <USBH_Process+0x4a2>
        phost->pActiveClass = NULL;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	73fb      	strb	r3, [r7, #15]
 800d3e6:	e016      	b.n	800d416 <USBH_Process+0x2ee>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d3e8:	7bfa      	ldrb	r2, [r7, #15]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	32de      	adds	r2, #222	; 0xde
 800d3ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3f2:	791a      	ldrb	r2, [r3, #4]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d108      	bne.n	800d410 <USBH_Process+0x2e8>
            phost->pActiveClass = phost->pClass[idx];
 800d3fe:	7bfa      	ldrb	r2, [r7, #15]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	32de      	adds	r2, #222	; 0xde
 800d404:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d40e:	e005      	b.n	800d41c <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d410:	7bfb      	ldrb	r3, [r7, #15]
 800d412:	3301      	adds	r3, #1
 800d414:	73fb      	strb	r3, [r7, #15]
 800d416:	7bfb      	ldrb	r3, [r7, #15]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d0e5      	beq.n	800d3e8 <USBH_Process+0x2c0>
        if (phost->pActiveClass != NULL)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d422:	2b00      	cmp	r3, #0
 800d424:	d040      	beq.n	800d4a8 <USBH_Process+0x380>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	4798      	blx	r3
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d114      	bne.n	800d462 <USBH_Process+0x33a>
            phost->gState = HOST_CLASS_REQUEST;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2206      	movs	r2, #6
 800d43c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4619      	mov	r1, r3
 800d448:	4815      	ldr	r0, [pc, #84]	; (800d4a0 <USBH_Process+0x378>)
 800d44a:	f00c fe75 	bl	801a138 <iprintf>
 800d44e:	200a      	movs	r0, #10
 800d450:	f00c fe8a 	bl	801a168 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d45a:	2103      	movs	r1, #3
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	4798      	blx	r3
      break;
 800d460:	e0b3      	b.n	800d5ca <USBH_Process+0x4a2>
            phost->gState = HOST_ABORT_STATE;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	220d      	movs	r2, #13
 800d466:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4619      	mov	r1, r3
 800d472:	480c      	ldr	r0, [pc, #48]	; (800d4a4 <USBH_Process+0x37c>)
 800d474:	f00c fe60 	bl	801a138 <iprintf>
 800d478:	200a      	movs	r0, #10
 800d47a:	f00c fe75 	bl	801a168 <putchar>
      break;
 800d47e:	e0a4      	b.n	800d5ca <USBH_Process+0x4a2>
 800d480:	0801c5b4 	.word	0x0801c5b4
 800d484:	0801c5cc 	.word	0x0801c5cc
 800d488:	0801c5e8 	.word	0x0801c5e8
 800d48c:	0801c614 	.word	0x0801c614
 800d490:	0801c628 	.word	0x0801c628
 800d494:	0801c650 	.word	0x0801c650
 800d498:	0801c66c 	.word	0x0801c66c
 800d49c:	0801c68c 	.word	0x0801c68c
 800d4a0:	0801c6ac 	.word	0x0801c6ac
 800d4a4:	0801c6c0 	.word	0x0801c6c0
          phost->gState = HOST_ABORT_STATE;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	220d      	movs	r2, #13
 800d4ac:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800d4ae:	4849      	ldr	r0, [pc, #292]	; (800d5d4 <USBH_Process+0x4ac>)
 800d4b0:	f00c fe42 	bl	801a138 <iprintf>
 800d4b4:	200a      	movs	r0, #10
 800d4b6:	f00c fe57 	bl	801a168 <putchar>
      break;
 800d4ba:	e086      	b.n	800d5ca <USBH_Process+0x4a2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d020      	beq.n	800d508 <USBH_Process+0x3e0>
      {
        status = phost->pActiveClass->Requests(phost);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4cc:	691b      	ldr	r3, [r3, #16]
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	4798      	blx	r3
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d4d6:	7bbb      	ldrb	r3, [r7, #14]
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d103      	bne.n	800d4e6 <USBH_Process+0x3be>
        {
          phost->gState = HOST_CLASS;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	220b      	movs	r2, #11
 800d4e2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d4e4:	e06e      	b.n	800d5c4 <USBH_Process+0x49c>
        else if (status == USBH_FAIL)
 800d4e6:	7bbb      	ldrb	r3, [r7, #14]
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	2b02      	cmp	r3, #2
 800d4ec:	d16a      	bne.n	800d5c4 <USBH_Process+0x49c>
          phost->gState = HOST_ABORT_STATE;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	220d      	movs	r2, #13
 800d4f2:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800d4f4:	4838      	ldr	r0, [pc, #224]	; (800d5d8 <USBH_Process+0x4b0>)
 800d4f6:	f00c fe1f 	bl	801a138 <iprintf>
 800d4fa:	4838      	ldr	r0, [pc, #224]	; (800d5dc <USBH_Process+0x4b4>)
 800d4fc:	f00c fe1c 	bl	801a138 <iprintf>
 800d500:	200a      	movs	r0, #10
 800d502:	f00c fe31 	bl	801a168 <putchar>
      break;
 800d506:	e05d      	b.n	800d5c4 <USBH_Process+0x49c>
        phost->gState = HOST_ABORT_STATE;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	220d      	movs	r2, #13
 800d50c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800d50e:	4832      	ldr	r0, [pc, #200]	; (800d5d8 <USBH_Process+0x4b0>)
 800d510:	f00c fe12 	bl	801a138 <iprintf>
 800d514:	4832      	ldr	r0, [pc, #200]	; (800d5e0 <USBH_Process+0x4b8>)
 800d516:	f00c fe0f 	bl	801a138 <iprintf>
 800d51a:	200a      	movs	r0, #10
 800d51c:	f00c fe24 	bl	801a168 <putchar>
      break;
 800d520:	e050      	b.n	800d5c4 <USBH_Process+0x49c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d04d      	beq.n	800d5c8 <USBH_Process+0x4a0>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d532:	695b      	ldr	r3, [r3, #20]
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	4798      	blx	r3
      }
      break;
 800d538:	e046      	b.n	800d5c8 <USBH_Process+0x4a0>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f7ff fc9e 	bl	800ce84 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d009      	beq.n	800d566 <USBH_Process+0x43e>
      {
        phost->pActiveClass->DeInit(phost);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d005      	beq.n	800d57c <USBH_Process+0x454>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d576:	2105      	movs	r1, #5
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800d57c:	4819      	ldr	r0, [pc, #100]	; (800d5e4 <USBH_Process+0x4bc>)
 800d57e:	f00c fddb 	bl	801a138 <iprintf>
 800d582:	200a      	movs	r0, #10
 800d584:	f00c fdf0 	bl	801a168 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	2b01      	cmp	r3, #1
 800d592:	d107      	bne.n	800d5a4 <USBH_Process+0x47c>
      {
        phost->device.is_ReEnumerated = 0U;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2200      	movs	r2, #0
 800d598:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f7ff fdb3 	bl	800d108 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d5a2:	e012      	b.n	800d5ca <USBH_Process+0x4a2>
        USBH_LL_Start(phost);
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f00b fe73 	bl	8019290 <USBH_LL_Start>
      break;
 800d5aa:	e00e      	b.n	800d5ca <USBH_Process+0x4a2>

    case HOST_ABORT_STATE:
    default :
      break;
 800d5ac:	bf00      	nop
 800d5ae:	e00c      	b.n	800d5ca <USBH_Process+0x4a2>
      break;
 800d5b0:	bf00      	nop
 800d5b2:	e00a      	b.n	800d5ca <USBH_Process+0x4a2>
      break;
 800d5b4:	bf00      	nop
 800d5b6:	e008      	b.n	800d5ca <USBH_Process+0x4a2>
    break;
 800d5b8:	bf00      	nop
 800d5ba:	e006      	b.n	800d5ca <USBH_Process+0x4a2>
      break;
 800d5bc:	bf00      	nop
 800d5be:	e004      	b.n	800d5ca <USBH_Process+0x4a2>
      break;
 800d5c0:	bf00      	nop
 800d5c2:	e002      	b.n	800d5ca <USBH_Process+0x4a2>
      break;
 800d5c4:	bf00      	nop
 800d5c6:	e000      	b.n	800d5ca <USBH_Process+0x4a2>
      break;
 800d5c8:	bf00      	nop
  }
  return USBH_OK;
 800d5ca:	2300      	movs	r3, #0
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3710      	adds	r7, #16
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	0801c6e0 	.word	0x0801c6e0
 800d5d8:	0801c4f4 	.word	0x0801c4f4
 800d5dc:	0801c708 	.word	0x0801c708
 800d5e0:	0801c730 	.word	0x0801c730
 800d5e4:	0801c748 	.word	0x0801c748

0800d5e8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b088      	sub	sp, #32
 800d5ec:	af04      	add	r7, sp, #16
 800d5ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	785b      	ldrb	r3, [r3, #1]
 800d5fc:	2b07      	cmp	r3, #7
 800d5fe:	f200 8280 	bhi.w	800db02 <USBH_HandleEnum+0x51a>
 800d602:	a201      	add	r2, pc, #4	; (adr r2, 800d608 <USBH_HandleEnum+0x20>)
 800d604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d608:	0800d629 	.word	0x0800d629
 800d60c:	0800d705 	.word	0x0800d705
 800d610:	0800d7b5 	.word	0x0800d7b5
 800d614:	0800d875 	.word	0x0800d875
 800d618:	0800d8fd 	.word	0x0800d8fd
 800d61c:	0800d9b1 	.word	0x0800d9b1
 800d620:	0800da25 	.word	0x0800da25
 800d624:	0800da97 	.word	0x0800da97
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d628:	2108      	movs	r1, #8
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 fb1c 	bl	800dc68 <USBH_Get_DevDesc>
 800d630:	4603      	mov	r3, r0
 800d632:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d634:	7bbb      	ldrb	r3, [r7, #14]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d130      	bne.n	800d69c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2201      	movs	r2, #1
 800d648:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	7919      	ldrb	r1, [r3, #4]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d65e:	b292      	uxth	r2, r2
 800d660:	9202      	str	r2, [sp, #8]
 800d662:	2200      	movs	r2, #0
 800d664:	9201      	str	r2, [sp, #4]
 800d666:	9300      	str	r3, [sp, #0]
 800d668:	4603      	mov	r3, r0
 800d66a:	2280      	movs	r2, #128	; 0x80
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f001 f851 	bl	800e714 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	7959      	ldrb	r1, [r3, #5]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d682:	687a      	ldr	r2, [r7, #4]
 800d684:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d686:	b292      	uxth	r2, r2
 800d688:	9202      	str	r2, [sp, #8]
 800d68a:	2200      	movs	r2, #0
 800d68c:	9201      	str	r2, [sp, #4]
 800d68e:	9300      	str	r3, [sp, #0]
 800d690:	4603      	mov	r3, r0
 800d692:	2200      	movs	r2, #0
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f001 f83d 	bl	800e714 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d69a:	e234      	b.n	800db06 <USBH_HandleEnum+0x51e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d69c:	7bbb      	ldrb	r3, [r7, #14]
 800d69e:	2b03      	cmp	r3, #3
 800d6a0:	f040 8231 	bne.w	800db06 <USBH_HandleEnum+0x51e>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800d6a4:	48b9      	ldr	r0, [pc, #740]	; (800d98c <USBH_HandleEnum+0x3a4>)
 800d6a6:	f00c fd47 	bl	801a138 <iprintf>
 800d6aa:	48b9      	ldr	r0, [pc, #740]	; (800d990 <USBH_HandleEnum+0x3a8>)
 800d6ac:	f00c fd44 	bl	801a138 <iprintf>
 800d6b0:	200a      	movs	r0, #10
 800d6b2:	f00c fd59 	bl	801a168 <putchar>
        phost->device.EnumCnt++;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d6bc:	3301      	adds	r3, #1
 800d6be:	b2da      	uxtb	r2, r3
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d6cc:	2b03      	cmp	r3, #3
 800d6ce:	d909      	bls.n	800d6e4 <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d6d0:	48b0      	ldr	r0, [pc, #704]	; (800d994 <USBH_HandleEnum+0x3ac>)
 800d6d2:	f00c fd31 	bl	801a138 <iprintf>
 800d6d6:	200a      	movs	r0, #10
 800d6d8:	f00c fd46 	bl	801a168 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	220d      	movs	r2, #13
 800d6e0:	701a      	strb	r2, [r3, #0]
      break;
 800d6e2:	e210      	b.n	800db06 <USBH_HandleEnum+0x51e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	795b      	ldrb	r3, [r3, #5]
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f001 f862 	bl	800e7b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	791b      	ldrb	r3, [r3, #4]
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f001 f85c 	bl	800e7b4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	701a      	strb	r2, [r3, #0]
      break;
 800d702:	e200      	b.n	800db06 <USBH_HandleEnum+0x51e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d704:	2112      	movs	r1, #18
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 faae 	bl	800dc68 <USBH_Get_DevDesc>
 800d70c:	4603      	mov	r3, r0
 800d70e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d710:	7bbb      	ldrb	r3, [r7, #14]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d117      	bne.n	800d746 <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 800d71c:	4619      	mov	r1, r3
 800d71e:	489e      	ldr	r0, [pc, #632]	; (800d998 <USBH_HandleEnum+0x3b0>)
 800d720:	f00c fd0a 	bl	801a138 <iprintf>
 800d724:	200a      	movs	r0, #10
 800d726:	f00c fd1f 	bl	801a168 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 800d730:	4619      	mov	r1, r3
 800d732:	489a      	ldr	r0, [pc, #616]	; (800d99c <USBH_HandleEnum+0x3b4>)
 800d734:	f00c fd00 	bl	801a138 <iprintf>
 800d738:	200a      	movs	r0, #10
 800d73a:	f00c fd15 	bl	801a168 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2202      	movs	r2, #2
 800d742:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d744:	e1e1      	b.n	800db0a <USBH_HandleEnum+0x522>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d746:	7bbb      	ldrb	r3, [r7, #14]
 800d748:	2b03      	cmp	r3, #3
 800d74a:	f040 81de 	bne.w	800db0a <USBH_HandleEnum+0x522>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800d74e:	488f      	ldr	r0, [pc, #572]	; (800d98c <USBH_HandleEnum+0x3a4>)
 800d750:	f00c fcf2 	bl	801a138 <iprintf>
 800d754:	4892      	ldr	r0, [pc, #584]	; (800d9a0 <USBH_HandleEnum+0x3b8>)
 800d756:	f00c fcef 	bl	801a138 <iprintf>
 800d75a:	200a      	movs	r0, #10
 800d75c:	f00c fd04 	bl	801a168 <putchar>
        phost->device.EnumCnt++;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d766:	3301      	adds	r3, #1
 800d768:	b2da      	uxtb	r2, r3
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d776:	2b03      	cmp	r3, #3
 800d778:	d909      	bls.n	800d78e <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d77a:	4886      	ldr	r0, [pc, #536]	; (800d994 <USBH_HandleEnum+0x3ac>)
 800d77c:	f00c fcdc 	bl	801a138 <iprintf>
 800d780:	200a      	movs	r0, #10
 800d782:	f00c fcf1 	bl	801a168 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	220d      	movs	r2, #13
 800d78a:	701a      	strb	r2, [r3, #0]
      break;
 800d78c:	e1bd      	b.n	800db0a <USBH_HandleEnum+0x522>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	795b      	ldrb	r3, [r3, #5]
 800d792:	4619      	mov	r1, r3
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f001 f80d 	bl	800e7b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	791b      	ldrb	r3, [r3, #4]
 800d79e:	4619      	mov	r1, r3
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f001 f807 	bl	800e7b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	701a      	strb	r2, [r3, #0]
      break;
 800d7b2:	e1aa      	b.n	800db0a <USBH_HandleEnum+0x522>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d7b4:	2101      	movs	r1, #1
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 fb02 	bl	800ddc0 <USBH_SetAddress>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d7c0:	7bbb      	ldrb	r3, [r7, #14]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d13c      	bne.n	800d840 <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 800d7c6:	2002      	movs	r0, #2
 800d7c8:	f00b fef6 	bl	80195b8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 800d7da:	4619      	mov	r1, r3
 800d7dc:	4871      	ldr	r0, [pc, #452]	; (800d9a4 <USBH_HandleEnum+0x3bc>)
 800d7de:	f00c fcab 	bl	801a138 <iprintf>
 800d7e2:	200a      	movs	r0, #10
 800d7e4:	f00c fcc0 	bl	801a168 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2203      	movs	r2, #3
 800d7ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	7919      	ldrb	r1, [r3, #4]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d802:	b292      	uxth	r2, r2
 800d804:	9202      	str	r2, [sp, #8]
 800d806:	2200      	movs	r2, #0
 800d808:	9201      	str	r2, [sp, #4]
 800d80a:	9300      	str	r3, [sp, #0]
 800d80c:	4603      	mov	r3, r0
 800d80e:	2280      	movs	r2, #128	; 0x80
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 ff7f 	bl	800e714 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	7959      	ldrb	r1, [r3, #5]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d826:	687a      	ldr	r2, [r7, #4]
 800d828:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d82a:	b292      	uxth	r2, r2
 800d82c:	9202      	str	r2, [sp, #8]
 800d82e:	2200      	movs	r2, #0
 800d830:	9201      	str	r2, [sp, #4]
 800d832:	9300      	str	r3, [sp, #0]
 800d834:	4603      	mov	r3, r0
 800d836:	2200      	movs	r2, #0
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 ff6b 	bl	800e714 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d83e:	e166      	b.n	800db0e <USBH_HandleEnum+0x526>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d840:	7bbb      	ldrb	r3, [r7, #14]
 800d842:	2b03      	cmp	r3, #3
 800d844:	f040 8163 	bne.w	800db0e <USBH_HandleEnum+0x526>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800d848:	4850      	ldr	r0, [pc, #320]	; (800d98c <USBH_HandleEnum+0x3a4>)
 800d84a:	f00c fc75 	bl	801a138 <iprintf>
 800d84e:	4856      	ldr	r0, [pc, #344]	; (800d9a8 <USBH_HandleEnum+0x3c0>)
 800d850:	f00c fc72 	bl	801a138 <iprintf>
 800d854:	200a      	movs	r0, #10
 800d856:	f00c fc87 	bl	801a168 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d85a:	484e      	ldr	r0, [pc, #312]	; (800d994 <USBH_HandleEnum+0x3ac>)
 800d85c:	f00c fc6c 	bl	801a138 <iprintf>
 800d860:	200a      	movs	r0, #10
 800d862:	f00c fc81 	bl	801a168 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	220d      	movs	r2, #13
 800d86a:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2200      	movs	r2, #0
 800d870:	705a      	strb	r2, [r3, #1]
      break;
 800d872:	e14c      	b.n	800db0e <USBH_HandleEnum+0x526>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d874:	2109      	movs	r1, #9
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 fa1e 	bl	800dcb8 <USBH_Get_CfgDesc>
 800d87c:	4603      	mov	r3, r0
 800d87e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d880:	7bbb      	ldrb	r3, [r7, #14]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d103      	bne.n	800d88e <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2204      	movs	r2, #4
 800d88a:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d88c:	e141      	b.n	800db12 <USBH_HandleEnum+0x52a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d88e:	7bbb      	ldrb	r3, [r7, #14]
 800d890:	2b03      	cmp	r3, #3
 800d892:	f040 813e 	bne.w	800db12 <USBH_HandleEnum+0x52a>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800d896:	483d      	ldr	r0, [pc, #244]	; (800d98c <USBH_HandleEnum+0x3a4>)
 800d898:	f00c fc4e 	bl	801a138 <iprintf>
 800d89c:	4843      	ldr	r0, [pc, #268]	; (800d9ac <USBH_HandleEnum+0x3c4>)
 800d89e:	f00c fc4b 	bl	801a138 <iprintf>
 800d8a2:	200a      	movs	r0, #10
 800d8a4:	f00c fc60 	bl	801a168 <putchar>
        phost->device.EnumCnt++;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	b2da      	uxtb	r2, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d8be:	2b03      	cmp	r3, #3
 800d8c0:	d909      	bls.n	800d8d6 <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d8c2:	4834      	ldr	r0, [pc, #208]	; (800d994 <USBH_HandleEnum+0x3ac>)
 800d8c4:	f00c fc38 	bl	801a138 <iprintf>
 800d8c8:	200a      	movs	r0, #10
 800d8ca:	f00c fc4d 	bl	801a168 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	220d      	movs	r2, #13
 800d8d2:	701a      	strb	r2, [r3, #0]
      break;
 800d8d4:	e11d      	b.n	800db12 <USBH_HandleEnum+0x52a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	795b      	ldrb	r3, [r3, #5]
 800d8da:	4619      	mov	r1, r3
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 ff69 	bl	800e7b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	791b      	ldrb	r3, [r3, #4]
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f000 ff63 	bl	800e7b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	701a      	strb	r2, [r3, #0]
      break;
 800d8fa:	e10a      	b.n	800db12 <USBH_HandleEnum+0x52a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d902:	4619      	mov	r1, r3
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f000 f9d7 	bl	800dcb8 <USBH_Get_CfgDesc>
 800d90a:	4603      	mov	r3, r0
 800d90c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d90e:	7bbb      	ldrb	r3, [r7, #14]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d103      	bne.n	800d91c <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2205      	movs	r2, #5
 800d918:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d91a:	e0fc      	b.n	800db16 <USBH_HandleEnum+0x52e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d91c:	7bbb      	ldrb	r3, [r7, #14]
 800d91e:	2b03      	cmp	r3, #3
 800d920:	f040 80f9 	bne.w	800db16 <USBH_HandleEnum+0x52e>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800d924:	4819      	ldr	r0, [pc, #100]	; (800d98c <USBH_HandleEnum+0x3a4>)
 800d926:	f00c fc07 	bl	801a138 <iprintf>
 800d92a:	4820      	ldr	r0, [pc, #128]	; (800d9ac <USBH_HandleEnum+0x3c4>)
 800d92c:	f00c fc04 	bl	801a138 <iprintf>
 800d930:	200a      	movs	r0, #10
 800d932:	f00c fc19 	bl	801a168 <putchar>
        phost->device.EnumCnt++;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d93c:	3301      	adds	r3, #1
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d94c:	2b03      	cmp	r3, #3
 800d94e:	d909      	bls.n	800d964 <USBH_HandleEnum+0x37c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800d950:	4810      	ldr	r0, [pc, #64]	; (800d994 <USBH_HandleEnum+0x3ac>)
 800d952:	f00c fbf1 	bl	801a138 <iprintf>
 800d956:	200a      	movs	r0, #10
 800d958:	f00c fc06 	bl	801a168 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	220d      	movs	r2, #13
 800d960:	701a      	strb	r2, [r3, #0]
      break;
 800d962:	e0d8      	b.n	800db16 <USBH_HandleEnum+0x52e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	795b      	ldrb	r3, [r3, #5]
 800d968:	4619      	mov	r1, r3
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 ff22 	bl	800e7b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	791b      	ldrb	r3, [r3, #4]
 800d974:	4619      	mov	r1, r3
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 ff1c 	bl	800e7b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	701a      	strb	r2, [r3, #0]
      break;
 800d988:	e0c5      	b.n	800db16 <USBH_HandleEnum+0x52e>
 800d98a:	bf00      	nop
 800d98c:	0801c4f4 	.word	0x0801c4f4
 800d990:	0801c760 	.word	0x0801c760
 800d994:	0801c794 	.word	0x0801c794
 800d998:	0801c7d4 	.word	0x0801c7d4
 800d99c:	0801c7e0 	.word	0x0801c7e0
 800d9a0:	0801c7ec 	.word	0x0801c7ec
 800d9a4:	0801c828 	.word	0x0801c828
 800d9a8:	0801c840 	.word	0x0801c840
 800d9ac:	0801c874 	.word	0x0801c874

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d02a      	beq.n	800da10 <USBH_HandleEnum+0x428>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d9c6:	23ff      	movs	r3, #255	; 0xff
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f000 f999 	bl	800dd00 <USBH_Get_StringDesc>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d9d2:	7bbb      	ldrb	r3, [r7, #14]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d10d      	bne.n	800d9f4 <USBH_HandleEnum+0x40c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d9de:	4619      	mov	r1, r3
 800d9e0:	4853      	ldr	r0, [pc, #332]	; (800db30 <USBH_HandleEnum+0x548>)
 800d9e2:	f00c fba9 	bl	801a138 <iprintf>
 800d9e6:	200a      	movs	r0, #10
 800d9e8:	f00c fbbe 	bl	801a168 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2206      	movs	r2, #6
 800d9f0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d9f2:	e092      	b.n	800db1a <USBH_HandleEnum+0x532>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d9f4:	7bbb      	ldrb	r3, [r7, #14]
 800d9f6:	2b03      	cmp	r3, #3
 800d9f8:	f040 808f 	bne.w	800db1a <USBH_HandleEnum+0x532>
          USBH_UsrLog("Manufacturer : N/A");
 800d9fc:	484d      	ldr	r0, [pc, #308]	; (800db34 <USBH_HandleEnum+0x54c>)
 800d9fe:	f00c fb9b 	bl	801a138 <iprintf>
 800da02:	200a      	movs	r0, #10
 800da04:	f00c fbb0 	bl	801a168 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2206      	movs	r2, #6
 800da0c:	705a      	strb	r2, [r3, #1]
      break;
 800da0e:	e084      	b.n	800db1a <USBH_HandleEnum+0x532>
        USBH_UsrLog("Manufacturer : N/A");
 800da10:	4848      	ldr	r0, [pc, #288]	; (800db34 <USBH_HandleEnum+0x54c>)
 800da12:	f00c fb91 	bl	801a138 <iprintf>
 800da16:	200a      	movs	r0, #10
 800da18:	f00c fba6 	bl	801a168 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2206      	movs	r2, #6
 800da20:	705a      	strb	r2, [r3, #1]
      break;
 800da22:	e07a      	b.n	800db1a <USBH_HandleEnum+0x532>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d029      	beq.n	800da82 <USBH_HandleEnum+0x49a>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800da3a:	23ff      	movs	r3, #255	; 0xff
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f000 f95f 	bl	800dd00 <USBH_Get_StringDesc>
 800da42:	4603      	mov	r3, r0
 800da44:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800da46:	7bbb      	ldrb	r3, [r7, #14]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d10d      	bne.n	800da68 <USBH_HandleEnum+0x480>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800da52:	4619      	mov	r1, r3
 800da54:	4838      	ldr	r0, [pc, #224]	; (800db38 <USBH_HandleEnum+0x550>)
 800da56:	f00c fb6f 	bl	801a138 <iprintf>
 800da5a:	200a      	movs	r0, #10
 800da5c:	f00c fb84 	bl	801a168 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2207      	movs	r2, #7
 800da64:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800da66:	e05a      	b.n	800db1e <USBH_HandleEnum+0x536>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800da68:	7bbb      	ldrb	r3, [r7, #14]
 800da6a:	2b03      	cmp	r3, #3
 800da6c:	d157      	bne.n	800db1e <USBH_HandleEnum+0x536>
          USBH_UsrLog("Product : N/A");
 800da6e:	4833      	ldr	r0, [pc, #204]	; (800db3c <USBH_HandleEnum+0x554>)
 800da70:	f00c fb62 	bl	801a138 <iprintf>
 800da74:	200a      	movs	r0, #10
 800da76:	f00c fb77 	bl	801a168 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2207      	movs	r2, #7
 800da7e:	705a      	strb	r2, [r3, #1]
      break;
 800da80:	e04d      	b.n	800db1e <USBH_HandleEnum+0x536>
        USBH_UsrLog("Product : N/A");
 800da82:	482e      	ldr	r0, [pc, #184]	; (800db3c <USBH_HandleEnum+0x554>)
 800da84:	f00c fb58 	bl	801a138 <iprintf>
 800da88:	200a      	movs	r0, #10
 800da8a:	f00c fb6d 	bl	801a168 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2207      	movs	r2, #7
 800da92:	705a      	strb	r2, [r3, #1]
      break;
 800da94:	e043      	b.n	800db1e <USBH_HandleEnum+0x536>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d027      	beq.n	800daf0 <USBH_HandleEnum+0x508>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800daac:	23ff      	movs	r3, #255	; 0xff
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 f926 	bl	800dd00 <USBH_Get_StringDesc>
 800dab4:	4603      	mov	r3, r0
 800dab6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dab8:	7bbb      	ldrb	r3, [r7, #14]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d10c      	bne.n	800dad8 <USBH_HandleEnum+0x4f0>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dac4:	4619      	mov	r1, r3
 800dac6:	481e      	ldr	r0, [pc, #120]	; (800db40 <USBH_HandleEnum+0x558>)
 800dac8:	f00c fb36 	bl	801a138 <iprintf>
 800dacc:	200a      	movs	r0, #10
 800dace:	f00c fb4b 	bl	801a168 <putchar>
          Status = USBH_OK;
 800dad2:	2300      	movs	r3, #0
 800dad4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800dad6:	e024      	b.n	800db22 <USBH_HandleEnum+0x53a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dad8:	7bbb      	ldrb	r3, [r7, #14]
 800dada:	2b03      	cmp	r3, #3
 800dadc:	d121      	bne.n	800db22 <USBH_HandleEnum+0x53a>
          USBH_UsrLog("Serial Number : N/A");
 800dade:	4819      	ldr	r0, [pc, #100]	; (800db44 <USBH_HandleEnum+0x55c>)
 800dae0:	f00c fb2a 	bl	801a138 <iprintf>
 800dae4:	200a      	movs	r0, #10
 800dae6:	f00c fb3f 	bl	801a168 <putchar>
          Status = USBH_OK;
 800daea:	2300      	movs	r3, #0
 800daec:	73fb      	strb	r3, [r7, #15]
      break;
 800daee:	e018      	b.n	800db22 <USBH_HandleEnum+0x53a>
        USBH_UsrLog("Serial Number : N/A");
 800daf0:	4814      	ldr	r0, [pc, #80]	; (800db44 <USBH_HandleEnum+0x55c>)
 800daf2:	f00c fb21 	bl	801a138 <iprintf>
 800daf6:	200a      	movs	r0, #10
 800daf8:	f00c fb36 	bl	801a168 <putchar>
        Status = USBH_OK;
 800dafc:	2300      	movs	r3, #0
 800dafe:	73fb      	strb	r3, [r7, #15]
      break;
 800db00:	e00f      	b.n	800db22 <USBH_HandleEnum+0x53a>

    default:
      break;
 800db02:	bf00      	nop
 800db04:	e00e      	b.n	800db24 <USBH_HandleEnum+0x53c>
      break;
 800db06:	bf00      	nop
 800db08:	e00c      	b.n	800db24 <USBH_HandleEnum+0x53c>
      break;
 800db0a:	bf00      	nop
 800db0c:	e00a      	b.n	800db24 <USBH_HandleEnum+0x53c>
      break;
 800db0e:	bf00      	nop
 800db10:	e008      	b.n	800db24 <USBH_HandleEnum+0x53c>
      break;
 800db12:	bf00      	nop
 800db14:	e006      	b.n	800db24 <USBH_HandleEnum+0x53c>
      break;
 800db16:	bf00      	nop
 800db18:	e004      	b.n	800db24 <USBH_HandleEnum+0x53c>
      break;
 800db1a:	bf00      	nop
 800db1c:	e002      	b.n	800db24 <USBH_HandleEnum+0x53c>
      break;
 800db1e:	bf00      	nop
 800db20:	e000      	b.n	800db24 <USBH_HandleEnum+0x53c>
      break;
 800db22:	bf00      	nop
  }
  return Status;
 800db24:	7bfb      	ldrb	r3, [r7, #15]
}
 800db26:	4618      	mov	r0, r3
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	0801c8b8 	.word	0x0801c8b8
 800db34:	0801c8cc 	.word	0x0801c8cc
 800db38:	0801c8e0 	.word	0x0801c8e0
 800db3c:	0801c8f0 	.word	0x0801c8f0
 800db40:	0801c900 	.word	0x0801c900
 800db44:	0801c914 	.word	0x0801c914

0800db48 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	683a      	ldr	r2, [r7, #0]
 800db56:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800db5a:	bf00      	nop
 800db5c:	370c      	adds	r7, #12
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr

0800db66 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b082      	sub	sp, #8
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800db74:	1c5a      	adds	r2, r3, #1
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 f804 	bl	800db8a <USBH_HandleSof>
}
 800db82:	bf00      	nop
 800db84:	3708      	adds	r7, #8
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b082      	sub	sp, #8
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	b2db      	uxtb	r3, r3
 800db98:	2b0b      	cmp	r3, #11
 800db9a:	d10a      	bne.n	800dbb2 <USBH_HandleSof+0x28>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d005      	beq.n	800dbb2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dbac:	699b      	ldr	r3, [r3, #24]
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	4798      	blx	r3
  }
}
 800dbb2:	bf00      	nop
 800dbb4:	3708      	adds	r7, #8
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800dbba:	b480      	push	{r7}
 800dbbc:	b083      	sub	sp, #12
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800dbca:	bf00      	nop
}
 800dbcc:	370c      	adds	r7, #12
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr

0800dbd6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800dbd6:	b480      	push	{r7}
 800dbd8:	b083      	sub	sp, #12
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800dbe6:	bf00      	nop
}
 800dbe8:	370c      	adds	r7, #12
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr

0800dbf2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800dbf2:	b480      	push	{r7}
 800dbf4:	b083      	sub	sp, #12
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2200      	movs	r2, #0
 800dc06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800dc12:	2300      	movs	r3, #0
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	370c      	adds	r7, #12
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2200      	movs	r2, #0
 800dc34:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f00b fb40 	bl	80192c6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	791b      	ldrb	r3, [r3, #4]
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 fdb1 	bl	800e7b4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	795b      	ldrb	r3, [r3, #5]
 800dc56:	4619      	mov	r1, r3
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f000 fdab 	bl	800e7b4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800dc5e:	2300      	movs	r3, #0
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b086      	sub	sp, #24
 800dc6c:	af02      	add	r7, sp, #8
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	460b      	mov	r3, r1
 800dc72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800dc7a:	78fb      	ldrb	r3, [r7, #3]
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	9300      	str	r3, [sp, #0]
 800dc80:	4613      	mov	r3, r2
 800dc82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dc86:	2100      	movs	r1, #0
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f000 f864 	bl	800dd56 <USBH_GetDescriptor>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	73fb      	strb	r3, [r7, #15]
 800dc92:	7bfb      	ldrb	r3, [r7, #15]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d10a      	bne.n	800dcae <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dca4:	78fa      	ldrb	r2, [r7, #3]
 800dca6:	b292      	uxth	r2, r2
 800dca8:	4619      	mov	r1, r3
 800dcaa:	f000 f918 	bl	800dede <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800dcae:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3710      	adds	r7, #16
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b086      	sub	sp, #24
 800dcbc:	af02      	add	r7, sp, #8
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	331c      	adds	r3, #28
 800dcc8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800dcca:	887b      	ldrh	r3, [r7, #2]
 800dccc:	9300      	str	r3, [sp, #0]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 f83d 	bl	800dd56 <USBH_GetDescriptor>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	72fb      	strb	r3, [r7, #11]
 800dce0:	7afb      	ldrb	r3, [r7, #11]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d107      	bne.n	800dcf6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800dcec:	887a      	ldrh	r2, [r7, #2]
 800dcee:	68f9      	ldr	r1, [r7, #12]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f000 f964 	bl	800dfbe <USBH_ParseCfgDesc>
  }

  return status;
 800dcf6:	7afb      	ldrb	r3, [r7, #11]
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3710      	adds	r7, #16
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b088      	sub	sp, #32
 800dd04:	af02      	add	r7, sp, #8
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	607a      	str	r2, [r7, #4]
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	460b      	mov	r3, r1
 800dd0e:	72fb      	strb	r3, [r7, #11]
 800dd10:	4613      	mov	r3, r2
 800dd12:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800dd14:	7afb      	ldrb	r3, [r7, #11]
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800dd1c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800dd24:	893b      	ldrh	r3, [r7, #8]
 800dd26:	9300      	str	r3, [sp, #0]
 800dd28:	460b      	mov	r3, r1
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	68f8      	ldr	r0, [r7, #12]
 800dd2e:	f000 f812 	bl	800dd56 <USBH_GetDescriptor>
 800dd32:	4603      	mov	r3, r0
 800dd34:	75fb      	strb	r3, [r7, #23]
 800dd36:	7dfb      	ldrb	r3, [r7, #23]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d107      	bne.n	800dd4c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dd42:	893a      	ldrh	r2, [r7, #8]
 800dd44:	6879      	ldr	r1, [r7, #4]
 800dd46:	4618      	mov	r0, r3
 800dd48:	f000 fa37 	bl	800e1ba <USBH_ParseStringDesc>
  }

  return status;
 800dd4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3718      	adds	r7, #24
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800dd56:	b580      	push	{r7, lr}
 800dd58:	b084      	sub	sp, #16
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	60f8      	str	r0, [r7, #12]
 800dd5e:	607b      	str	r3, [r7, #4]
 800dd60:	460b      	mov	r3, r1
 800dd62:	72fb      	strb	r3, [r7, #11]
 800dd64:	4613      	mov	r3, r2
 800dd66:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	789b      	ldrb	r3, [r3, #2]
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d11c      	bne.n	800ddaa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800dd70:	7afb      	ldrb	r3, [r7, #11]
 800dd72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dd76:	b2da      	uxtb	r2, r3
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2206      	movs	r2, #6
 800dd80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	893a      	ldrh	r2, [r7, #8]
 800dd86:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800dd88:	893b      	ldrh	r3, [r7, #8]
 800dd8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dd8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd92:	d104      	bne.n	800dd9e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f240 4209 	movw	r2, #1033	; 0x409
 800dd9a:	829a      	strh	r2, [r3, #20]
 800dd9c:	e002      	b.n	800dda4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	2200      	movs	r2, #0
 800dda2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	8b3a      	ldrh	r2, [r7, #24]
 800dda8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ddaa:	8b3b      	ldrh	r3, [r7, #24]
 800ddac:	461a      	mov	r2, r3
 800ddae:	6879      	ldr	r1, [r7, #4]
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	f000 fa50 	bl	800e256 <USBH_CtlReq>
 800ddb6:	4603      	mov	r3, r0
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3710      	adds	r7, #16
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	460b      	mov	r3, r1
 800ddca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	789b      	ldrb	r3, [r3, #2]
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d10f      	bne.n	800ddf4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2205      	movs	r2, #5
 800ddde:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800dde0:	78fb      	ldrb	r3, [r7, #3]
 800dde2:	b29a      	uxth	r2, r3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2200      	movs	r2, #0
 800ddec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 fa2c 	bl	800e256 <USBH_CtlReq>
 800ddfe:	4603      	mov	r3, r0
}
 800de00:	4618      	mov	r0, r3
 800de02:	3708      	adds	r7, #8
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	460b      	mov	r3, r1
 800de12:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	789b      	ldrb	r3, [r3, #2]
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d10e      	bne.n	800de3a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2200      	movs	r2, #0
 800de20:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2209      	movs	r2, #9
 800de26:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	887a      	ldrh	r2, [r7, #2]
 800de2c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2200      	movs	r2, #0
 800de32:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2200      	movs	r2, #0
 800de38:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800de3a:	2200      	movs	r2, #0
 800de3c:	2100      	movs	r1, #0
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 fa09 	bl	800e256 <USBH_CtlReq>
 800de44:	4603      	mov	r3, r0
}
 800de46:	4618      	mov	r0, r3
 800de48:	3708      	adds	r7, #8
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}

0800de4e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800de4e:	b580      	push	{r7, lr}
 800de50:	b082      	sub	sp, #8
 800de52:	af00      	add	r7, sp, #0
 800de54:	6078      	str	r0, [r7, #4]
 800de56:	460b      	mov	r3, r1
 800de58:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	789b      	ldrb	r3, [r3, #2]
 800de5e:	2b01      	cmp	r3, #1
 800de60:	d10f      	bne.n	800de82 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2203      	movs	r2, #3
 800de6c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800de6e:	78fb      	ldrb	r3, [r7, #3]
 800de70:	b29a      	uxth	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2200      	movs	r2, #0
 800de7a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2200      	movs	r2, #0
 800de80:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800de82:	2200      	movs	r2, #0
 800de84:	2100      	movs	r1, #0
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 f9e5 	bl	800e256 <USBH_CtlReq>
 800de8c:	4603      	mov	r3, r0
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3708      	adds	r7, #8
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}

0800de96 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800de96:	b580      	push	{r7, lr}
 800de98:	b082      	sub	sp, #8
 800de9a:	af00      	add	r7, sp, #0
 800de9c:	6078      	str	r0, [r7, #4]
 800de9e:	460b      	mov	r3, r1
 800dea0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	789b      	ldrb	r3, [r3, #2]
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	d10f      	bne.n	800deca <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2202      	movs	r2, #2
 800deae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2201      	movs	r2, #1
 800deb4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2200      	movs	r2, #0
 800deba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800debc:	78fb      	ldrb	r3, [r7, #3]
 800debe:	b29a      	uxth	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2200      	movs	r2, #0
 800dec8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800deca:	2200      	movs	r2, #0
 800decc:	2100      	movs	r1, #0
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 f9c1 	bl	800e256 <USBH_CtlReq>
 800ded4:	4603      	mov	r3, r0
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3708      	adds	r7, #8
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}

0800dede <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800dede:	b480      	push	{r7}
 800dee0:	b085      	sub	sp, #20
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	60f8      	str	r0, [r7, #12]
 800dee6:	60b9      	str	r1, [r7, #8]
 800dee8:	4613      	mov	r3, r2
 800deea:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	781a      	ldrb	r2, [r3, #0]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	785a      	ldrb	r2, [r3, #1]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	3302      	adds	r3, #2
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	b29a      	uxth	r2, r3
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	3303      	adds	r3, #3
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	021b      	lsls	r3, r3, #8
 800df0e:	b29b      	uxth	r3, r3
 800df10:	4313      	orrs	r3, r2
 800df12:	b29a      	uxth	r2, r3
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	791a      	ldrb	r2, [r3, #4]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	795a      	ldrb	r2, [r3, #5]
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	799a      	ldrb	r2, [r3, #6]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	79da      	ldrb	r2, [r3, #7]
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800df38:	88fb      	ldrh	r3, [r7, #6]
 800df3a:	2b08      	cmp	r3, #8
 800df3c:	d939      	bls.n	800dfb2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	3308      	adds	r3, #8
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	b29a      	uxth	r2, r3
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	3309      	adds	r3, #9
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	021b      	lsls	r3, r3, #8
 800df50:	b29b      	uxth	r3, r3
 800df52:	4313      	orrs	r3, r2
 800df54:	b29a      	uxth	r2, r3
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	330a      	adds	r3, #10
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	b29a      	uxth	r2, r3
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	330b      	adds	r3, #11
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	b29b      	uxth	r3, r3
 800df6a:	021b      	lsls	r3, r3, #8
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	4313      	orrs	r3, r2
 800df70:	b29a      	uxth	r2, r3
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	330c      	adds	r3, #12
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	b29a      	uxth	r2, r3
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	330d      	adds	r3, #13
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	b29b      	uxth	r3, r3
 800df86:	021b      	lsls	r3, r3, #8
 800df88:	b29b      	uxth	r3, r3
 800df8a:	4313      	orrs	r3, r2
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	7b9a      	ldrb	r2, [r3, #14]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	7bda      	ldrb	r2, [r3, #15]
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	7c1a      	ldrb	r2, [r3, #16]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	7c5a      	ldrb	r2, [r3, #17]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	745a      	strb	r2, [r3, #17]
  }
}
 800dfb2:	bf00      	nop
 800dfb4:	3714      	adds	r7, #20
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr

0800dfbe <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800dfbe:	b580      	push	{r7, lr}
 800dfc0:	b08a      	sub	sp, #40	; 0x28
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	60f8      	str	r0, [r7, #12]
 800dfc6:	60b9      	str	r1, [r7, #8]
 800dfc8:	4613      	mov	r3, r2
 800dfca:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	781a      	ldrb	r2, [r3, #0]
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	785a      	ldrb	r2, [r3, #1]
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	3302      	adds	r3, #2
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	b29a      	uxth	r2, r3
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	3303      	adds	r3, #3
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	b29b      	uxth	r3, r3
 800e000:	021b      	lsls	r3, r3, #8
 800e002:	b29b      	uxth	r3, r3
 800e004:	4313      	orrs	r3, r2
 800e006:	b29a      	uxth	r2, r3
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	791a      	ldrb	r2, [r3, #4]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	795a      	ldrb	r2, [r3, #5]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	799a      	ldrb	r2, [r3, #6]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	79da      	ldrb	r2, [r3, #7]
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	7a1a      	ldrb	r2, [r3, #8]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e034:	88fb      	ldrh	r3, [r7, #6]
 800e036:	2b09      	cmp	r3, #9
 800e038:	d95f      	bls.n	800e0fa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800e03a:	2309      	movs	r3, #9
 800e03c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800e03e:	2300      	movs	r3, #0
 800e040:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e042:	e051      	b.n	800e0e8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e044:	f107 0316 	add.w	r3, r7, #22
 800e048:	4619      	mov	r1, r3
 800e04a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e04c:	f000 f8e8 	bl	800e220 <USBH_GetNextDesc>
 800e050:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800e052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e054:	785b      	ldrb	r3, [r3, #1]
 800e056:	2b04      	cmp	r3, #4
 800e058:	d146      	bne.n	800e0e8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800e05a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e05e:	221a      	movs	r2, #26
 800e060:	fb02 f303 	mul.w	r3, r2, r3
 800e064:	3308      	adds	r3, #8
 800e066:	68fa      	ldr	r2, [r7, #12]
 800e068:	4413      	add	r3, r2
 800e06a:	3302      	adds	r3, #2
 800e06c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800e06e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e070:	69f8      	ldr	r0, [r7, #28]
 800e072:	f000 f846 	bl	800e102 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e076:	2300      	movs	r3, #0
 800e078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800e07c:	2300      	movs	r3, #0
 800e07e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e080:	e022      	b.n	800e0c8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e082:	f107 0316 	add.w	r3, r7, #22
 800e086:	4619      	mov	r1, r3
 800e088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e08a:	f000 f8c9 	bl	800e220 <USBH_GetNextDesc>
 800e08e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800e090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e092:	785b      	ldrb	r3, [r3, #1]
 800e094:	2b05      	cmp	r3, #5
 800e096:	d117      	bne.n	800e0c8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e098:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e09c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e0a0:	3201      	adds	r2, #1
 800e0a2:	00d2      	lsls	r2, r2, #3
 800e0a4:	211a      	movs	r1, #26
 800e0a6:	fb01 f303 	mul.w	r3, r1, r3
 800e0aa:	4413      	add	r3, r2
 800e0ac:	3308      	adds	r3, #8
 800e0ae:	68fa      	ldr	r2, [r7, #12]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	3304      	adds	r3, #4
 800e0b4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800e0b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0b8:	69b8      	ldr	r0, [r7, #24]
 800e0ba:	f000 f851 	bl	800e160 <USBH_ParseEPDesc>
            ep_ix++;
 800e0be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	791b      	ldrb	r3, [r3, #4]
 800e0cc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d204      	bcs.n	800e0de <USBH_ParseCfgDesc+0x120>
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	885a      	ldrh	r2, [r3, #2]
 800e0d8:	8afb      	ldrh	r3, [r7, #22]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d8d1      	bhi.n	800e082 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800e0de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e0e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	d804      	bhi.n	800e0fa <USBH_ParseCfgDesc+0x13c>
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	885a      	ldrh	r2, [r3, #2]
 800e0f4:	8afb      	ldrh	r3, [r7, #22]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d8a4      	bhi.n	800e044 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800e0fa:	bf00      	nop
 800e0fc:	3728      	adds	r7, #40	; 0x28
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}

0800e102 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800e102:	b480      	push	{r7}
 800e104:	b083      	sub	sp, #12
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
 800e10a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	781a      	ldrb	r2, [r3, #0]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	785a      	ldrb	r2, [r3, #1]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	789a      	ldrb	r2, [r3, #2]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	78da      	ldrb	r2, [r3, #3]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	791a      	ldrb	r2, [r3, #4]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	795a      	ldrb	r2, [r3, #5]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	799a      	ldrb	r2, [r3, #6]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	79da      	ldrb	r2, [r3, #7]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	7a1a      	ldrb	r2, [r3, #8]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	721a      	strb	r2, [r3, #8]
}
 800e154:	bf00      	nop
 800e156:	370c      	adds	r7, #12
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr

0800e160 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
 800e168:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	781a      	ldrb	r2, [r3, #0]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	785a      	ldrb	r2, [r3, #1]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	789a      	ldrb	r2, [r3, #2]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	78da      	ldrb	r2, [r3, #3]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	3304      	adds	r3, #4
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	b29a      	uxth	r2, r3
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	3305      	adds	r3, #5
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	b29b      	uxth	r3, r3
 800e19a:	021b      	lsls	r3, r3, #8
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	b29a      	uxth	r2, r3
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	799a      	ldrb	r2, [r3, #6]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	719a      	strb	r2, [r3, #6]
}
 800e1ae:	bf00      	nop
 800e1b0:	370c      	adds	r7, #12
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr

0800e1ba <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e1ba:	b480      	push	{r7}
 800e1bc:	b087      	sub	sp, #28
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	60f8      	str	r0, [r7, #12]
 800e1c2:	60b9      	str	r1, [r7, #8]
 800e1c4:	4613      	mov	r3, r2
 800e1c6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	2b03      	cmp	r3, #3
 800e1d0:	d120      	bne.n	800e214 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	1e9a      	subs	r2, r3, #2
 800e1d8:	88fb      	ldrh	r3, [r7, #6]
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	bf28      	it	cs
 800e1de:	4613      	movcs	r3, r2
 800e1e0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	3302      	adds	r3, #2
 800e1e6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	82fb      	strh	r3, [r7, #22]
 800e1ec:	e00b      	b.n	800e206 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e1ee:	8afb      	ldrh	r3, [r7, #22]
 800e1f0:	68fa      	ldr	r2, [r7, #12]
 800e1f2:	4413      	add	r3, r2
 800e1f4:	781a      	ldrb	r2, [r3, #0]
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e200:	8afb      	ldrh	r3, [r7, #22]
 800e202:	3302      	adds	r3, #2
 800e204:	82fb      	strh	r3, [r7, #22]
 800e206:	8afa      	ldrh	r2, [r7, #22]
 800e208:	8abb      	ldrh	r3, [r7, #20]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d3ef      	bcc.n	800e1ee <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	2200      	movs	r2, #0
 800e212:	701a      	strb	r2, [r3, #0]
  }
}
 800e214:	bf00      	nop
 800e216:	371c      	adds	r7, #28
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e220:	b480      	push	{r7}
 800e222:	b085      	sub	sp, #20
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	881a      	ldrh	r2, [r3, #0]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	b29b      	uxth	r3, r3
 800e234:	4413      	add	r3, r2
 800e236:	b29a      	uxth	r2, r3
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	4413      	add	r3, r2
 800e246:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e248:	68fb      	ldr	r3, [r7, #12]
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3714      	adds	r7, #20
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr

0800e256 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e256:	b580      	push	{r7, lr}
 800e258:	b086      	sub	sp, #24
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	60f8      	str	r0, [r7, #12]
 800e25e:	60b9      	str	r1, [r7, #8]
 800e260:	4613      	mov	r3, r2
 800e262:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e264:	2301      	movs	r3, #1
 800e266:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	789b      	ldrb	r3, [r3, #2]
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d002      	beq.n	800e276 <USBH_CtlReq+0x20>
 800e270:	2b02      	cmp	r3, #2
 800e272:	d00f      	beq.n	800e294 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e274:	e027      	b.n	800e2c6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	68ba      	ldr	r2, [r7, #8]
 800e27a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	88fa      	ldrh	r2, [r7, #6]
 800e280:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	2201      	movs	r2, #1
 800e286:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2202      	movs	r2, #2
 800e28c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e28e:	2301      	movs	r3, #1
 800e290:	75fb      	strb	r3, [r7, #23]
      break;
 800e292:	e018      	b.n	800e2c6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e294:	68f8      	ldr	r0, [r7, #12]
 800e296:	f000 f81b 	bl	800e2d0 <USBH_HandleControl>
 800e29a:	4603      	mov	r3, r0
 800e29c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e29e:	7dfb      	ldrb	r3, [r7, #23]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d002      	beq.n	800e2aa <USBH_CtlReq+0x54>
 800e2a4:	7dfb      	ldrb	r3, [r7, #23]
 800e2a6:	2b03      	cmp	r3, #3
 800e2a8:	d106      	bne.n	800e2b8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	761a      	strb	r2, [r3, #24]
      break;
 800e2b6:	e005      	b.n	800e2c4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e2b8:	7dfb      	ldrb	r3, [r7, #23]
 800e2ba:	2b02      	cmp	r3, #2
 800e2bc:	d102      	bne.n	800e2c4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	709a      	strb	r2, [r3, #2]
      break;
 800e2c4:	bf00      	nop
  }
  return status;
 800e2c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3718      	adds	r7, #24
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b086      	sub	sp, #24
 800e2d4:	af02      	add	r7, sp, #8
 800e2d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	7e1b      	ldrb	r3, [r3, #24]
 800e2e4:	3b01      	subs	r3, #1
 800e2e6:	2b0a      	cmp	r3, #10
 800e2e8:	f200 815f 	bhi.w	800e5aa <USBH_HandleControl+0x2da>
 800e2ec:	a201      	add	r2, pc, #4	; (adr r2, 800e2f4 <USBH_HandleControl+0x24>)
 800e2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2f2:	bf00      	nop
 800e2f4:	0800e321 	.word	0x0800e321
 800e2f8:	0800e33b 	.word	0x0800e33b
 800e2fc:	0800e3a5 	.word	0x0800e3a5
 800e300:	0800e3cb 	.word	0x0800e3cb
 800e304:	0800e403 	.word	0x0800e403
 800e308:	0800e42d 	.word	0x0800e42d
 800e30c:	0800e47f 	.word	0x0800e47f
 800e310:	0800e4a1 	.word	0x0800e4a1
 800e314:	0800e4dd 	.word	0x0800e4dd
 800e318:	0800e503 	.word	0x0800e503
 800e31c:	0800e541 	.word	0x0800e541
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f103 0110 	add.w	r1, r3, #16
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	795b      	ldrb	r3, [r3, #5]
 800e32a:	461a      	mov	r2, r3
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f000 f951 	bl	800e5d4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2202      	movs	r2, #2
 800e336:	761a      	strb	r2, [r3, #24]
      break;
 800e338:	e142      	b.n	800e5c0 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	795b      	ldrb	r3, [r3, #5]
 800e33e:	4619      	mov	r1, r3
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f00b f8af 	bl	80194a4 <USBH_LL_GetURBState>
 800e346:	4603      	mov	r3, r0
 800e348:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e34a:	7bbb      	ldrb	r3, [r7, #14]
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	d11e      	bne.n	800e38e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	7c1b      	ldrb	r3, [r3, #16]
 800e354:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e358:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	8adb      	ldrh	r3, [r3, #22]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d00a      	beq.n	800e378 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e362:	7b7b      	ldrb	r3, [r7, #13]
 800e364:	2b80      	cmp	r3, #128	; 0x80
 800e366:	d103      	bne.n	800e370 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2203      	movs	r2, #3
 800e36c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e36e:	e11e      	b.n	800e5ae <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2205      	movs	r2, #5
 800e374:	761a      	strb	r2, [r3, #24]
      break;
 800e376:	e11a      	b.n	800e5ae <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800e378:	7b7b      	ldrb	r3, [r7, #13]
 800e37a:	2b80      	cmp	r3, #128	; 0x80
 800e37c:	d103      	bne.n	800e386 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2209      	movs	r2, #9
 800e382:	761a      	strb	r2, [r3, #24]
      break;
 800e384:	e113      	b.n	800e5ae <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2207      	movs	r2, #7
 800e38a:	761a      	strb	r2, [r3, #24]
      break;
 800e38c:	e10f      	b.n	800e5ae <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e38e:	7bbb      	ldrb	r3, [r7, #14]
 800e390:	2b04      	cmp	r3, #4
 800e392:	d003      	beq.n	800e39c <USBH_HandleControl+0xcc>
 800e394:	7bbb      	ldrb	r3, [r7, #14]
 800e396:	2b02      	cmp	r3, #2
 800e398:	f040 8109 	bne.w	800e5ae <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	220b      	movs	r2, #11
 800e3a0:	761a      	strb	r2, [r3, #24]
      break;
 800e3a2:	e104      	b.n	800e5ae <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e3aa:	b29a      	uxth	r2, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6899      	ldr	r1, [r3, #8]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	899a      	ldrh	r2, [r3, #12]
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	791b      	ldrb	r3, [r3, #4]
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f000 f948 	bl	800e652 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2204      	movs	r2, #4
 800e3c6:	761a      	strb	r2, [r3, #24]
      break;
 800e3c8:	e0fa      	b.n	800e5c0 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	791b      	ldrb	r3, [r3, #4]
 800e3ce:	4619      	mov	r1, r3
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f00b f867 	bl	80194a4 <USBH_LL_GetURBState>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e3da:	7bbb      	ldrb	r3, [r7, #14]
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d102      	bne.n	800e3e6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2209      	movs	r2, #9
 800e3e4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e3e6:	7bbb      	ldrb	r3, [r7, #14]
 800e3e8:	2b05      	cmp	r3, #5
 800e3ea:	d102      	bne.n	800e3f2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e3ec:	2303      	movs	r3, #3
 800e3ee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e3f0:	e0df      	b.n	800e5b2 <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800e3f2:	7bbb      	ldrb	r3, [r7, #14]
 800e3f4:	2b04      	cmp	r3, #4
 800e3f6:	f040 80dc 	bne.w	800e5b2 <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	220b      	movs	r2, #11
 800e3fe:	761a      	strb	r2, [r3, #24]
      break;
 800e400:	e0d7      	b.n	800e5b2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6899      	ldr	r1, [r3, #8]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	899a      	ldrh	r2, [r3, #12]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	795b      	ldrb	r3, [r3, #5]
 800e40e:	2001      	movs	r0, #1
 800e410:	9000      	str	r0, [sp, #0]
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 f8f8 	bl	800e608 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e41e:	b29a      	uxth	r2, r3
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2206      	movs	r2, #6
 800e428:	761a      	strb	r2, [r3, #24]
      break;
 800e42a:	e0c9      	b.n	800e5c0 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	795b      	ldrb	r3, [r3, #5]
 800e430:	4619      	mov	r1, r3
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f00b f836 	bl	80194a4 <USBH_LL_GetURBState>
 800e438:	4603      	mov	r3, r0
 800e43a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e43c:	7bbb      	ldrb	r3, [r7, #14]
 800e43e:	2b01      	cmp	r3, #1
 800e440:	d103      	bne.n	800e44a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2207      	movs	r2, #7
 800e446:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e448:	e0b5      	b.n	800e5b6 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800e44a:	7bbb      	ldrb	r3, [r7, #14]
 800e44c:	2b05      	cmp	r3, #5
 800e44e:	d105      	bne.n	800e45c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	220c      	movs	r2, #12
 800e454:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e456:	2303      	movs	r3, #3
 800e458:	73fb      	strb	r3, [r7, #15]
      break;
 800e45a:	e0ac      	b.n	800e5b6 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e45c:	7bbb      	ldrb	r3, [r7, #14]
 800e45e:	2b02      	cmp	r3, #2
 800e460:	d103      	bne.n	800e46a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2205      	movs	r2, #5
 800e466:	761a      	strb	r2, [r3, #24]
      break;
 800e468:	e0a5      	b.n	800e5b6 <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800e46a:	7bbb      	ldrb	r3, [r7, #14]
 800e46c:	2b04      	cmp	r3, #4
 800e46e:	f040 80a2 	bne.w	800e5b6 <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	220b      	movs	r2, #11
 800e476:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e478:	2302      	movs	r3, #2
 800e47a:	73fb      	strb	r3, [r7, #15]
      break;
 800e47c:	e09b      	b.n	800e5b6 <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	791b      	ldrb	r3, [r3, #4]
 800e482:	2200      	movs	r2, #0
 800e484:	2100      	movs	r1, #0
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 f8e3 	bl	800e652 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e492:	b29a      	uxth	r2, r3
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2208      	movs	r2, #8
 800e49c:	761a      	strb	r2, [r3, #24]

      break;
 800e49e:	e08f      	b.n	800e5c0 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	791b      	ldrb	r3, [r3, #4]
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f00a fffc 	bl	80194a4 <USBH_LL_GetURBState>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e4b0:	7bbb      	ldrb	r3, [r7, #14]
 800e4b2:	2b01      	cmp	r3, #1
 800e4b4:	d105      	bne.n	800e4c2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	220d      	movs	r2, #13
 800e4ba:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e4c0:	e07b      	b.n	800e5ba <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800e4c2:	7bbb      	ldrb	r3, [r7, #14]
 800e4c4:	2b04      	cmp	r3, #4
 800e4c6:	d103      	bne.n	800e4d0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	220b      	movs	r2, #11
 800e4cc:	761a      	strb	r2, [r3, #24]
      break;
 800e4ce:	e074      	b.n	800e5ba <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800e4d0:	7bbb      	ldrb	r3, [r7, #14]
 800e4d2:	2b05      	cmp	r3, #5
 800e4d4:	d171      	bne.n	800e5ba <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800e4d6:	2303      	movs	r3, #3
 800e4d8:	73fb      	strb	r3, [r7, #15]
      break;
 800e4da:	e06e      	b.n	800e5ba <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	795b      	ldrb	r3, [r3, #5]
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	9200      	str	r2, [sp, #0]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f000 f88d 	bl	800e608 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	220a      	movs	r2, #10
 800e4fe:	761a      	strb	r2, [r3, #24]
      break;
 800e500:	e05e      	b.n	800e5c0 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	795b      	ldrb	r3, [r3, #5]
 800e506:	4619      	mov	r1, r3
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f00a ffcb 	bl	80194a4 <USBH_LL_GetURBState>
 800e50e:	4603      	mov	r3, r0
 800e510:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e512:	7bbb      	ldrb	r3, [r7, #14]
 800e514:	2b01      	cmp	r3, #1
 800e516:	d105      	bne.n	800e524 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e518:	2300      	movs	r3, #0
 800e51a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	220d      	movs	r2, #13
 800e520:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e522:	e04c      	b.n	800e5be <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e524:	7bbb      	ldrb	r3, [r7, #14]
 800e526:	2b02      	cmp	r3, #2
 800e528:	d103      	bne.n	800e532 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2209      	movs	r2, #9
 800e52e:	761a      	strb	r2, [r3, #24]
      break;
 800e530:	e045      	b.n	800e5be <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800e532:	7bbb      	ldrb	r3, [r7, #14]
 800e534:	2b04      	cmp	r3, #4
 800e536:	d142      	bne.n	800e5be <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	220b      	movs	r2, #11
 800e53c:	761a      	strb	r2, [r3, #24]
      break;
 800e53e:	e03e      	b.n	800e5be <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	7e5b      	ldrb	r3, [r3, #25]
 800e544:	3301      	adds	r3, #1
 800e546:	b2da      	uxtb	r2, r3
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	765a      	strb	r2, [r3, #25]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	7e5b      	ldrb	r3, [r3, #25]
 800e550:	2b02      	cmp	r3, #2
 800e552:	d806      	bhi.n	800e562 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2201      	movs	r2, #1
 800e558:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2201      	movs	r2, #1
 800e55e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e560:	e02e      	b.n	800e5c0 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e568:	2106      	movs	r1, #6
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2200      	movs	r2, #0
 800e572:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800e574:	4815      	ldr	r0, [pc, #84]	; (800e5cc <USBH_HandleControl+0x2fc>)
 800e576:	f00b fddf 	bl	801a138 <iprintf>
 800e57a:	4815      	ldr	r0, [pc, #84]	; (800e5d0 <USBH_HandleControl+0x300>)
 800e57c:	f00b fddc 	bl	801a138 <iprintf>
 800e580:	200a      	movs	r0, #10
 800e582:	f00b fdf1 	bl	801a168 <putchar>
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	795b      	ldrb	r3, [r3, #5]
 800e58a:	4619      	mov	r1, r3
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 f911 	bl	800e7b4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	791b      	ldrb	r3, [r3, #4]
 800e596:	4619      	mov	r1, r3
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f000 f90b 	bl	800e7b4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e5a4:	2302      	movs	r3, #2
 800e5a6:	73fb      	strb	r3, [r7, #15]
      break;
 800e5a8:	e00a      	b.n	800e5c0 <USBH_HandleControl+0x2f0>

    default:
      break;
 800e5aa:	bf00      	nop
 800e5ac:	e008      	b.n	800e5c0 <USBH_HandleControl+0x2f0>
      break;
 800e5ae:	bf00      	nop
 800e5b0:	e006      	b.n	800e5c0 <USBH_HandleControl+0x2f0>
      break;
 800e5b2:	bf00      	nop
 800e5b4:	e004      	b.n	800e5c0 <USBH_HandleControl+0x2f0>
      break;
 800e5b6:	bf00      	nop
 800e5b8:	e002      	b.n	800e5c0 <USBH_HandleControl+0x2f0>
      break;
 800e5ba:	bf00      	nop
 800e5bc:	e000      	b.n	800e5c0 <USBH_HandleControl+0x2f0>
      break;
 800e5be:	bf00      	nop
  }

  return status;
 800e5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	0801c928 	.word	0x0801c928
 800e5d0:	0801c930 	.word	0x0801c930

0800e5d4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b088      	sub	sp, #32
 800e5d8:	af04      	add	r7, sp, #16
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	4613      	mov	r3, r2
 800e5e0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e5e2:	79f9      	ldrb	r1, [r7, #7]
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	9303      	str	r3, [sp, #12]
 800e5e8:	2308      	movs	r3, #8
 800e5ea:	9302      	str	r3, [sp, #8]
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	9301      	str	r3, [sp, #4]
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	9300      	str	r3, [sp, #0]
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	68f8      	ldr	r0, [r7, #12]
 800e5fa:	f00a ff22 	bl	8019442 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800e5fe:	2300      	movs	r3, #0
}
 800e600:	4618      	mov	r0, r3
 800e602:	3710      	adds	r7, #16
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b088      	sub	sp, #32
 800e60c:	af04      	add	r7, sp, #16
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	60b9      	str	r1, [r7, #8]
 800e612:	4611      	mov	r1, r2
 800e614:	461a      	mov	r2, r3
 800e616:	460b      	mov	r3, r1
 800e618:	80fb      	strh	r3, [r7, #6]
 800e61a:	4613      	mov	r3, r2
 800e61c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e624:	2b00      	cmp	r3, #0
 800e626:	d001      	beq.n	800e62c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e628:	2300      	movs	r3, #0
 800e62a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e62c:	7979      	ldrb	r1, [r7, #5]
 800e62e:	7e3b      	ldrb	r3, [r7, #24]
 800e630:	9303      	str	r3, [sp, #12]
 800e632:	88fb      	ldrh	r3, [r7, #6]
 800e634:	9302      	str	r3, [sp, #8]
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	9301      	str	r3, [sp, #4]
 800e63a:	2301      	movs	r3, #1
 800e63c:	9300      	str	r3, [sp, #0]
 800e63e:	2300      	movs	r3, #0
 800e640:	2200      	movs	r2, #0
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f00a fefd 	bl	8019442 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e648:	2300      	movs	r3, #0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3710      	adds	r7, #16
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}

0800e652 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e652:	b580      	push	{r7, lr}
 800e654:	b088      	sub	sp, #32
 800e656:	af04      	add	r7, sp, #16
 800e658:	60f8      	str	r0, [r7, #12]
 800e65a:	60b9      	str	r1, [r7, #8]
 800e65c:	4611      	mov	r1, r2
 800e65e:	461a      	mov	r2, r3
 800e660:	460b      	mov	r3, r1
 800e662:	80fb      	strh	r3, [r7, #6]
 800e664:	4613      	mov	r3, r2
 800e666:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e668:	7979      	ldrb	r1, [r7, #5]
 800e66a:	2300      	movs	r3, #0
 800e66c:	9303      	str	r3, [sp, #12]
 800e66e:	88fb      	ldrh	r3, [r7, #6]
 800e670:	9302      	str	r3, [sp, #8]
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	9301      	str	r3, [sp, #4]
 800e676:	2301      	movs	r3, #1
 800e678:	9300      	str	r3, [sp, #0]
 800e67a:	2300      	movs	r3, #0
 800e67c:	2201      	movs	r2, #1
 800e67e:	68f8      	ldr	r0, [r7, #12]
 800e680:	f00a fedf 	bl	8019442 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e684:	2300      	movs	r3, #0

}
 800e686:	4618      	mov	r0, r3
 800e688:	3710      	adds	r7, #16
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}

0800e68e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e68e:	b580      	push	{r7, lr}
 800e690:	b088      	sub	sp, #32
 800e692:	af04      	add	r7, sp, #16
 800e694:	60f8      	str	r0, [r7, #12]
 800e696:	60b9      	str	r1, [r7, #8]
 800e698:	4611      	mov	r1, r2
 800e69a:	461a      	mov	r2, r3
 800e69c:	460b      	mov	r3, r1
 800e69e:	80fb      	strh	r3, [r7, #6]
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d001      	beq.n	800e6b2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e6b2:	7979      	ldrb	r1, [r7, #5]
 800e6b4:	7e3b      	ldrb	r3, [r7, #24]
 800e6b6:	9303      	str	r3, [sp, #12]
 800e6b8:	88fb      	ldrh	r3, [r7, #6]
 800e6ba:	9302      	str	r3, [sp, #8]
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	9301      	str	r3, [sp, #4]
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	9300      	str	r3, [sp, #0]
 800e6c4:	2302      	movs	r3, #2
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	68f8      	ldr	r0, [r7, #12]
 800e6ca:	f00a feba 	bl	8019442 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e6ce:	2300      	movs	r3, #0
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3710      	adds	r7, #16
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b088      	sub	sp, #32
 800e6dc:	af04      	add	r7, sp, #16
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	4611      	mov	r1, r2
 800e6e4:	461a      	mov	r2, r3
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	80fb      	strh	r3, [r7, #6]
 800e6ea:	4613      	mov	r3, r2
 800e6ec:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e6ee:	7979      	ldrb	r1, [r7, #5]
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	9303      	str	r3, [sp, #12]
 800e6f4:	88fb      	ldrh	r3, [r7, #6]
 800e6f6:	9302      	str	r3, [sp, #8]
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	9301      	str	r3, [sp, #4]
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	9300      	str	r3, [sp, #0]
 800e700:	2302      	movs	r3, #2
 800e702:	2201      	movs	r2, #1
 800e704:	68f8      	ldr	r0, [r7, #12]
 800e706:	f00a fe9c 	bl	8019442 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e70a:	2300      	movs	r3, #0
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3710      	adds	r7, #16
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b086      	sub	sp, #24
 800e718:	af04      	add	r7, sp, #16
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	4608      	mov	r0, r1
 800e71e:	4611      	mov	r1, r2
 800e720:	461a      	mov	r2, r3
 800e722:	4603      	mov	r3, r0
 800e724:	70fb      	strb	r3, [r7, #3]
 800e726:	460b      	mov	r3, r1
 800e728:	70bb      	strb	r3, [r7, #2]
 800e72a:	4613      	mov	r3, r2
 800e72c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e72e:	7878      	ldrb	r0, [r7, #1]
 800e730:	78ba      	ldrb	r2, [r7, #2]
 800e732:	78f9      	ldrb	r1, [r7, #3]
 800e734:	8b3b      	ldrh	r3, [r7, #24]
 800e736:	9302      	str	r3, [sp, #8]
 800e738:	7d3b      	ldrb	r3, [r7, #20]
 800e73a:	9301      	str	r3, [sp, #4]
 800e73c:	7c3b      	ldrb	r3, [r7, #16]
 800e73e:	9300      	str	r3, [sp, #0]
 800e740:	4603      	mov	r3, r0
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f00a fe2f 	bl	80193a6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e748:	2300      	movs	r3, #0
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3708      	adds	r7, #8
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}

0800e752 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e752:	b580      	push	{r7, lr}
 800e754:	b082      	sub	sp, #8
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
 800e75a:	460b      	mov	r3, r1
 800e75c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800e75e:	78fb      	ldrb	r3, [r7, #3]
 800e760:	4619      	mov	r1, r3
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f00a fe4e 	bl	8019404 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e768:	2300      	movs	r3, #0
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}

0800e772 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e772:	b580      	push	{r7, lr}
 800e774:	b084      	sub	sp, #16
 800e776:	af00      	add	r7, sp, #0
 800e778:	6078      	str	r0, [r7, #4]
 800e77a:	460b      	mov	r3, r1
 800e77c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f000 f836 	bl	800e7f0 <USBH_GetFreePipe>
 800e784:	4603      	mov	r3, r0
 800e786:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e788:	89fb      	ldrh	r3, [r7, #14]
 800e78a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e78e:	4293      	cmp	r3, r2
 800e790:	d00a      	beq.n	800e7a8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800e792:	78fa      	ldrb	r2, [r7, #3]
 800e794:	89fb      	ldrh	r3, [r7, #14]
 800e796:	f003 030f 	and.w	r3, r3, #15
 800e79a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e79e:	6879      	ldr	r1, [r7, #4]
 800e7a0:	33e0      	adds	r3, #224	; 0xe0
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	440b      	add	r3, r1
 800e7a6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e7a8:	89fb      	ldrh	r3, [r7, #14]
 800e7aa:	b2db      	uxtb	r3, r3
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3710      	adds	r7, #16
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b083      	sub	sp, #12
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	460b      	mov	r3, r1
 800e7be:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e7c0:	78fb      	ldrb	r3, [r7, #3]
 800e7c2:	2b0a      	cmp	r3, #10
 800e7c4:	d80d      	bhi.n	800e7e2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e7c6:	78fb      	ldrb	r3, [r7, #3]
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	33e0      	adds	r3, #224	; 0xe0
 800e7cc:	009b      	lsls	r3, r3, #2
 800e7ce:	4413      	add	r3, r2
 800e7d0:	685a      	ldr	r2, [r3, #4]
 800e7d2:	78fb      	ldrb	r3, [r7, #3]
 800e7d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e7d8:	6879      	ldr	r1, [r7, #4]
 800e7da:	33e0      	adds	r3, #224	; 0xe0
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	440b      	add	r3, r1
 800e7e0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e7e2:	2300      	movs	r3, #0
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	370c      	adds	r7, #12
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b085      	sub	sp, #20
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	73fb      	strb	r3, [r7, #15]
 800e800:	e00f      	b.n	800e822 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e802:	7bfb      	ldrb	r3, [r7, #15]
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	33e0      	adds	r3, #224	; 0xe0
 800e808:	009b      	lsls	r3, r3, #2
 800e80a:	4413      	add	r3, r2
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e812:	2b00      	cmp	r3, #0
 800e814:	d102      	bne.n	800e81c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e816:	7bfb      	ldrb	r3, [r7, #15]
 800e818:	b29b      	uxth	r3, r3
 800e81a:	e007      	b.n	800e82c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800e81c:	7bfb      	ldrb	r3, [r7, #15]
 800e81e:	3301      	adds	r3, #1
 800e820:	73fb      	strb	r3, [r7, #15]
 800e822:	7bfb      	ldrb	r3, [r7, #15]
 800e824:	2b0a      	cmp	r3, #10
 800e826:	d9ec      	bls.n	800e802 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e828:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3714      	adds	r7, #20
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e838:	b480      	push	{r7}
 800e83a:	b087      	sub	sp, #28
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	60f8      	str	r0, [r7, #12]
 800e840:	60b9      	str	r1, [r7, #8]
 800e842:	4613      	mov	r3, r2
 800e844:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e846:	2301      	movs	r3, #1
 800e848:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e84a:	2300      	movs	r3, #0
 800e84c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e84e:	4b1f      	ldr	r3, [pc, #124]	; (800e8cc <FATFS_LinkDriverEx+0x94>)
 800e850:	7a5b      	ldrb	r3, [r3, #9]
 800e852:	b2db      	uxtb	r3, r3
 800e854:	2b00      	cmp	r3, #0
 800e856:	d131      	bne.n	800e8bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e858:	4b1c      	ldr	r3, [pc, #112]	; (800e8cc <FATFS_LinkDriverEx+0x94>)
 800e85a:	7a5b      	ldrb	r3, [r3, #9]
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	461a      	mov	r2, r3
 800e860:	4b1a      	ldr	r3, [pc, #104]	; (800e8cc <FATFS_LinkDriverEx+0x94>)
 800e862:	2100      	movs	r1, #0
 800e864:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e866:	4b19      	ldr	r3, [pc, #100]	; (800e8cc <FATFS_LinkDriverEx+0x94>)
 800e868:	7a5b      	ldrb	r3, [r3, #9]
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	4a17      	ldr	r2, [pc, #92]	; (800e8cc <FATFS_LinkDriverEx+0x94>)
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	4413      	add	r3, r2
 800e872:	68fa      	ldr	r2, [r7, #12]
 800e874:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e876:	4b15      	ldr	r3, [pc, #84]	; (800e8cc <FATFS_LinkDriverEx+0x94>)
 800e878:	7a5b      	ldrb	r3, [r3, #9]
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	461a      	mov	r2, r3
 800e87e:	4b13      	ldr	r3, [pc, #76]	; (800e8cc <FATFS_LinkDriverEx+0x94>)
 800e880:	4413      	add	r3, r2
 800e882:	79fa      	ldrb	r2, [r7, #7]
 800e884:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e886:	4b11      	ldr	r3, [pc, #68]	; (800e8cc <FATFS_LinkDriverEx+0x94>)
 800e888:	7a5b      	ldrb	r3, [r3, #9]
 800e88a:	b2db      	uxtb	r3, r3
 800e88c:	1c5a      	adds	r2, r3, #1
 800e88e:	b2d1      	uxtb	r1, r2
 800e890:	4a0e      	ldr	r2, [pc, #56]	; (800e8cc <FATFS_LinkDriverEx+0x94>)
 800e892:	7251      	strb	r1, [r2, #9]
 800e894:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e896:	7dbb      	ldrb	r3, [r7, #22]
 800e898:	3330      	adds	r3, #48	; 0x30
 800e89a:	b2da      	uxtb	r2, r3
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	223a      	movs	r2, #58	; 0x3a
 800e8a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	3302      	adds	r3, #2
 800e8ac:	222f      	movs	r2, #47	; 0x2f
 800e8ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	3303      	adds	r3, #3
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e8bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	371c      	adds	r7, #28
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr
 800e8ca:	bf00      	nop
 800e8cc:	200007d8 	.word	0x200007d8

0800e8d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e8da:	2200      	movs	r2, #0
 800e8dc:	6839      	ldr	r1, [r7, #0]
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f7ff ffaa 	bl	800e838 <FATFS_LinkDriverEx>
 800e8e4:	4603      	mov	r3, r0
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3708      	adds	r7, #8
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}

0800e8ee <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e8ee:	b480      	push	{r7}
 800e8f0:	b083      	sub	sp, #12
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800e8f8:	88fb      	ldrh	r3, [r7, #6]
 800e8fa:	021b      	lsls	r3, r3, #8
 800e8fc:	b21a      	sxth	r2, r3
 800e8fe:	88fb      	ldrh	r3, [r7, #6]
 800e900:	0a1b      	lsrs	r3, r3, #8
 800e902:	b29b      	uxth	r3, r3
 800e904:	b21b      	sxth	r3, r3
 800e906:	4313      	orrs	r3, r2
 800e908:	b21b      	sxth	r3, r3
 800e90a:	b29b      	uxth	r3, r3
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	370c      	adds	r7, #12
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr

0800e918 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e918:	b480      	push	{r7}
 800e91a:	b083      	sub	sp, #12
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	061a      	lsls	r2, r3, #24
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	021b      	lsls	r3, r3, #8
 800e928:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e92c:	431a      	orrs	r2, r3
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	0a1b      	lsrs	r3, r3, #8
 800e932:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e936:	431a      	orrs	r2, r3
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	0e1b      	lsrs	r3, r3, #24
 800e93c:	4313      	orrs	r3, r2
}
 800e93e:	4618      	mov	r0, r3
 800e940:	370c      	adds	r7, #12
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr

0800e94a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b082      	sub	sp, #8
 800e94e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800e950:	2300      	movs	r3, #0
 800e952:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800e954:	f000 f8d8 	bl	800eb08 <mem_init>
  memp_init();
 800e958:	f000 fbea 	bl	800f130 <memp_init>
  pbuf_init();
  netif_init();
 800e95c:	f000 fca2 	bl	800f2a4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e960:	f007 feba 	bl	80166d8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e964:	f001 fda6 	bl	80104b4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800e968:	f007 fe2c 	bl	80165c4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800e96c:	bf00      	nop
 800e96e:	3708      	adds	r7, #8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
 800e97a:	4603      	mov	r3, r0
 800e97c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800e97e:	4b05      	ldr	r3, [pc, #20]	; (800e994 <ptr_to_mem+0x20>)
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	88fb      	ldrh	r3, [r7, #6]
 800e984:	4413      	add	r3, r2
}
 800e986:	4618      	mov	r0, r3
 800e988:	370c      	adds	r7, #12
 800e98a:	46bd      	mov	sp, r7
 800e98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e990:	4770      	bx	lr
 800e992:	bf00      	nop
 800e994:	200007e4 	.word	0x200007e4

0800e998 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800e9a0:	4b05      	ldr	r3, [pc, #20]	; (800e9b8 <mem_to_ptr+0x20>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	1ad3      	subs	r3, r2, r3
 800e9a8:	b29b      	uxth	r3, r3
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	370c      	adds	r7, #12
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b4:	4770      	bx	lr
 800e9b6:	bf00      	nop
 800e9b8:	200007e4 	.word	0x200007e4

0800e9bc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800e9bc:	b590      	push	{r4, r7, lr}
 800e9be:	b085      	sub	sp, #20
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800e9c4:	4b47      	ldr	r3, [pc, #284]	; (800eae4 <plug_holes+0x128>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d206      	bcs.n	800e9dc <plug_holes+0x20>
 800e9ce:	4b46      	ldr	r3, [pc, #280]	; (800eae8 <plug_holes+0x12c>)
 800e9d0:	f240 12df 	movw	r2, #479	; 0x1df
 800e9d4:	4945      	ldr	r1, [pc, #276]	; (800eaec <plug_holes+0x130>)
 800e9d6:	4846      	ldr	r0, [pc, #280]	; (800eaf0 <plug_holes+0x134>)
 800e9d8:	f00b fbae 	bl	801a138 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e9dc:	4b45      	ldr	r3, [pc, #276]	; (800eaf4 <plug_holes+0x138>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d306      	bcc.n	800e9f4 <plug_holes+0x38>
 800e9e6:	4b40      	ldr	r3, [pc, #256]	; (800eae8 <plug_holes+0x12c>)
 800e9e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e9ec:	4942      	ldr	r1, [pc, #264]	; (800eaf8 <plug_holes+0x13c>)
 800e9ee:	4840      	ldr	r0, [pc, #256]	; (800eaf0 <plug_holes+0x134>)
 800e9f0:	f00b fba2 	bl	801a138 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	791b      	ldrb	r3, [r3, #4]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d006      	beq.n	800ea0a <plug_holes+0x4e>
 800e9fc:	4b3a      	ldr	r3, [pc, #232]	; (800eae8 <plug_holes+0x12c>)
 800e9fe:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ea02:	493e      	ldr	r1, [pc, #248]	; (800eafc <plug_holes+0x140>)
 800ea04:	483a      	ldr	r0, [pc, #232]	; (800eaf0 <plug_holes+0x134>)
 800ea06:	f00b fb97 	bl	801a138 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	881b      	ldrh	r3, [r3, #0]
 800ea0e:	f646 5260 	movw	r2, #28000	; 0x6d60
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d906      	bls.n	800ea24 <plug_holes+0x68>
 800ea16:	4b34      	ldr	r3, [pc, #208]	; (800eae8 <plug_holes+0x12c>)
 800ea18:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ea1c:	4938      	ldr	r1, [pc, #224]	; (800eb00 <plug_holes+0x144>)
 800ea1e:	4834      	ldr	r0, [pc, #208]	; (800eaf0 <plug_holes+0x134>)
 800ea20:	f00b fb8a 	bl	801a138 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	881b      	ldrh	r3, [r3, #0]
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f7ff ffa3 	bl	800e974 <ptr_to_mem>
 800ea2e:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ea30:	687a      	ldr	r2, [r7, #4]
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d025      	beq.n	800ea84 <plug_holes+0xc8>
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	791b      	ldrb	r3, [r3, #4]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d121      	bne.n	800ea84 <plug_holes+0xc8>
 800ea40:	4b2c      	ldr	r3, [pc, #176]	; (800eaf4 <plug_holes+0x138>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	68fa      	ldr	r2, [r7, #12]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d01c      	beq.n	800ea84 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ea4a:	4b2e      	ldr	r3, [pc, #184]	; (800eb04 <plug_holes+0x148>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	68fa      	ldr	r2, [r7, #12]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d102      	bne.n	800ea5a <plug_holes+0x9e>
      lfree = mem;
 800ea54:	4a2b      	ldr	r2, [pc, #172]	; (800eb04 <plug_holes+0x148>)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	881a      	ldrh	r2, [r3, #0]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	881b      	ldrh	r3, [r3, #0]
 800ea66:	f646 5260 	movw	r2, #28000	; 0x6d60
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d00a      	beq.n	800ea84 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	881b      	ldrh	r3, [r3, #0]
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7ff ff7e 	bl	800e974 <ptr_to_mem>
 800ea78:	4604      	mov	r4, r0
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f7ff ff8c 	bl	800e998 <mem_to_ptr>
 800ea80:	4603      	mov	r3, r0
 800ea82:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	885b      	ldrh	r3, [r3, #2]
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7ff ff73 	bl	800e974 <ptr_to_mem>
 800ea8e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ea90:	68ba      	ldr	r2, [r7, #8]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	429a      	cmp	r2, r3
 800ea96:	d020      	beq.n	800eada <plug_holes+0x11e>
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	791b      	ldrb	r3, [r3, #4]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d11c      	bne.n	800eada <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800eaa0:	4b18      	ldr	r3, [pc, #96]	; (800eb04 <plug_holes+0x148>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	d102      	bne.n	800eab0 <plug_holes+0xf4>
      lfree = pmem;
 800eaaa:	4a16      	ldr	r2, [pc, #88]	; (800eb04 <plug_holes+0x148>)
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	881a      	ldrh	r2, [r3, #0]
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	881b      	ldrh	r3, [r3, #0]
 800eabc:	f646 5260 	movw	r2, #28000	; 0x6d60
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d00a      	beq.n	800eada <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	881b      	ldrh	r3, [r3, #0]
 800eac8:	4618      	mov	r0, r3
 800eaca:	f7ff ff53 	bl	800e974 <ptr_to_mem>
 800eace:	4604      	mov	r4, r0
 800ead0:	68b8      	ldr	r0, [r7, #8]
 800ead2:	f7ff ff61 	bl	800e998 <mem_to_ptr>
 800ead6:	4603      	mov	r3, r0
 800ead8:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800eada:	bf00      	nop
 800eadc:	3714      	adds	r7, #20
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd90      	pop	{r4, r7, pc}
 800eae2:	bf00      	nop
 800eae4:	200007e4 	.word	0x200007e4
 800eae8:	0801c958 	.word	0x0801c958
 800eaec:	0801c988 	.word	0x0801c988
 800eaf0:	0801c9a0 	.word	0x0801c9a0
 800eaf4:	200007e8 	.word	0x200007e8
 800eaf8:	0801c9c8 	.word	0x0801c9c8
 800eafc:	0801c9e4 	.word	0x0801c9e4
 800eb00:	0801ca00 	.word	0x0801ca00
 800eb04:	200007ec 	.word	0x200007ec

0800eb08 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800eb0e:	4b18      	ldr	r3, [pc, #96]	; (800eb70 <mem_init+0x68>)
 800eb10:	3303      	adds	r3, #3
 800eb12:	f023 0303 	bic.w	r3, r3, #3
 800eb16:	461a      	mov	r2, r3
 800eb18:	4b16      	ldr	r3, [pc, #88]	; (800eb74 <mem_init+0x6c>)
 800eb1a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800eb1c:	4b15      	ldr	r3, [pc, #84]	; (800eb74 <mem_init+0x6c>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f646 5260 	movw	r2, #28000	; 0x6d60
 800eb28:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2200      	movs	r2, #0
 800eb34:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800eb36:	f646 5060 	movw	r0, #28000	; 0x6d60
 800eb3a:	f7ff ff1b 	bl	800e974 <ptr_to_mem>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	4a0d      	ldr	r2, [pc, #52]	; (800eb78 <mem_init+0x70>)
 800eb42:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800eb44:	4b0c      	ldr	r3, [pc, #48]	; (800eb78 <mem_init+0x70>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	2201      	movs	r2, #1
 800eb4a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800eb4c:	4b0a      	ldr	r3, [pc, #40]	; (800eb78 <mem_init+0x70>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f646 5260 	movw	r2, #28000	; 0x6d60
 800eb54:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800eb56:	4b08      	ldr	r3, [pc, #32]	; (800eb78 <mem_init+0x70>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f646 5260 	movw	r2, #28000	; 0x6d60
 800eb5e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800eb60:	4b04      	ldr	r3, [pc, #16]	; (800eb74 <mem_init+0x6c>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	4a05      	ldr	r2, [pc, #20]	; (800eb7c <mem_init+0x74>)
 800eb66:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800eb68:	bf00      	nop
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	20007cc0 	.word	0x20007cc0
 800eb74:	200007e4 	.word	0x200007e4
 800eb78:	200007e8 	.word	0x200007e8
 800eb7c:	200007ec 	.word	0x200007ec

0800eb80 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b086      	sub	sp, #24
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f7ff ff05 	bl	800e998 <mem_to_ptr>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	881b      	ldrh	r3, [r3, #0]
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7ff feec 	bl	800e974 <ptr_to_mem>
 800eb9c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	885b      	ldrh	r3, [r3, #2]
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7ff fee6 	bl	800e974 <ptr_to_mem>
 800eba8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	881b      	ldrh	r3, [r3, #0]
 800ebae:	f646 5260 	movw	r2, #28000	; 0x6d60
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	d819      	bhi.n	800ebea <mem_link_valid+0x6a>
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	885b      	ldrh	r3, [r3, #2]
 800ebba:	f646 5260 	movw	r2, #28000	; 0x6d60
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d813      	bhi.n	800ebea <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ebc6:	8afa      	ldrh	r2, [r7, #22]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d004      	beq.n	800ebd6 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	881b      	ldrh	r3, [r3, #0]
 800ebd0:	8afa      	ldrh	r2, [r7, #22]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d109      	bne.n	800ebea <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ebd6:	4b08      	ldr	r3, [pc, #32]	; (800ebf8 <mem_link_valid+0x78>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ebda:	693a      	ldr	r2, [r7, #16]
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d006      	beq.n	800ebee <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	885b      	ldrh	r3, [r3, #2]
 800ebe4:	8afa      	ldrh	r2, [r7, #22]
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d001      	beq.n	800ebee <mem_link_valid+0x6e>
    return 0;
 800ebea:	2300      	movs	r3, #0
 800ebec:	e000      	b.n	800ebf0 <mem_link_valid+0x70>
  }
  return 1;
 800ebee:	2301      	movs	r3, #1
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3718      	adds	r7, #24
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	200007e8 	.word	0x200007e8

0800ebfc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d04c      	beq.n	800eca4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f003 0303 	and.w	r3, r3, #3
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d007      	beq.n	800ec24 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ec14:	4b25      	ldr	r3, [pc, #148]	; (800ecac <mem_free+0xb0>)
 800ec16:	f240 2273 	movw	r2, #627	; 0x273
 800ec1a:	4925      	ldr	r1, [pc, #148]	; (800ecb0 <mem_free+0xb4>)
 800ec1c:	4825      	ldr	r0, [pc, #148]	; (800ecb4 <mem_free+0xb8>)
 800ec1e:	f00b fa8b 	bl	801a138 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ec22:	e040      	b.n	800eca6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	3b08      	subs	r3, #8
 800ec28:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ec2a:	4b23      	ldr	r3, [pc, #140]	; (800ecb8 <mem_free+0xbc>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	68fa      	ldr	r2, [r7, #12]
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d306      	bcc.n	800ec42 <mem_free+0x46>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f103 020c 	add.w	r2, r3, #12
 800ec3a:	4b20      	ldr	r3, [pc, #128]	; (800ecbc <mem_free+0xc0>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d907      	bls.n	800ec52 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ec42:	4b1a      	ldr	r3, [pc, #104]	; (800ecac <mem_free+0xb0>)
 800ec44:	f240 227f 	movw	r2, #639	; 0x27f
 800ec48:	491d      	ldr	r1, [pc, #116]	; (800ecc0 <mem_free+0xc4>)
 800ec4a:	481a      	ldr	r0, [pc, #104]	; (800ecb4 <mem_free+0xb8>)
 800ec4c:	f00b fa74 	bl	801a138 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ec50:	e029      	b.n	800eca6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	791b      	ldrb	r3, [r3, #4]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d107      	bne.n	800ec6a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ec5a:	4b14      	ldr	r3, [pc, #80]	; (800ecac <mem_free+0xb0>)
 800ec5c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ec60:	4918      	ldr	r1, [pc, #96]	; (800ecc4 <mem_free+0xc8>)
 800ec62:	4814      	ldr	r0, [pc, #80]	; (800ecb4 <mem_free+0xb8>)
 800ec64:	f00b fa68 	bl	801a138 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ec68:	e01d      	b.n	800eca6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800ec6a:	68f8      	ldr	r0, [r7, #12]
 800ec6c:	f7ff ff88 	bl	800eb80 <mem_link_valid>
 800ec70:	4603      	mov	r3, r0
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d107      	bne.n	800ec86 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ec76:	4b0d      	ldr	r3, [pc, #52]	; (800ecac <mem_free+0xb0>)
 800ec78:	f240 2295 	movw	r2, #661	; 0x295
 800ec7c:	4912      	ldr	r1, [pc, #72]	; (800ecc8 <mem_free+0xcc>)
 800ec7e:	480d      	ldr	r0, [pc, #52]	; (800ecb4 <mem_free+0xb8>)
 800ec80:	f00b fa5a 	bl	801a138 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ec84:	e00f      	b.n	800eca6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ec8c:	4b0f      	ldr	r3, [pc, #60]	; (800eccc <mem_free+0xd0>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	68fa      	ldr	r2, [r7, #12]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d202      	bcs.n	800ec9c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ec96:	4a0d      	ldr	r2, [pc, #52]	; (800eccc <mem_free+0xd0>)
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f7ff fe8d 	bl	800e9bc <plug_holes>
 800eca2:	e000      	b.n	800eca6 <mem_free+0xaa>
    return;
 800eca4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800eca6:	3710      	adds	r7, #16
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}
 800ecac:	0801c958 	.word	0x0801c958
 800ecb0:	0801ca2c 	.word	0x0801ca2c
 800ecb4:	0801c9a0 	.word	0x0801c9a0
 800ecb8:	200007e4 	.word	0x200007e4
 800ecbc:	200007e8 	.word	0x200007e8
 800ecc0:	0801ca50 	.word	0x0801ca50
 800ecc4:	0801ca6c 	.word	0x0801ca6c
 800ecc8:	0801ca94 	.word	0x0801ca94
 800eccc:	200007ec 	.word	0x200007ec

0800ecd0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b088      	sub	sp, #32
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	460b      	mov	r3, r1
 800ecda:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ecdc:	887b      	ldrh	r3, [r7, #2]
 800ecde:	3303      	adds	r3, #3
 800ece0:	b29b      	uxth	r3, r3
 800ece2:	f023 0303 	bic.w	r3, r3, #3
 800ece6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ece8:	8bfb      	ldrh	r3, [r7, #30]
 800ecea:	2b0b      	cmp	r3, #11
 800ecec:	d801      	bhi.n	800ecf2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ecee:	230c      	movs	r3, #12
 800ecf0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ecf2:	8bfb      	ldrh	r3, [r7, #30]
 800ecf4:	f646 5260 	movw	r2, #28000	; 0x6d60
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	d803      	bhi.n	800ed04 <mem_trim+0x34>
 800ecfc:	8bfa      	ldrh	r2, [r7, #30]
 800ecfe:	887b      	ldrh	r3, [r7, #2]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d201      	bcs.n	800ed08 <mem_trim+0x38>
    return NULL;
 800ed04:	2300      	movs	r3, #0
 800ed06:	e0d0      	b.n	800eeaa <mem_trim+0x1da>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ed08:	4b6a      	ldr	r3, [pc, #424]	; (800eeb4 <mem_trim+0x1e4>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d304      	bcc.n	800ed1c <mem_trim+0x4c>
 800ed12:	4b69      	ldr	r3, [pc, #420]	; (800eeb8 <mem_trim+0x1e8>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d306      	bcc.n	800ed2a <mem_trim+0x5a>
 800ed1c:	4b67      	ldr	r3, [pc, #412]	; (800eebc <mem_trim+0x1ec>)
 800ed1e:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ed22:	4967      	ldr	r1, [pc, #412]	; (800eec0 <mem_trim+0x1f0>)
 800ed24:	4867      	ldr	r0, [pc, #412]	; (800eec4 <mem_trim+0x1f4>)
 800ed26:	f00b fa07 	bl	801a138 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ed2a:	4b62      	ldr	r3, [pc, #392]	; (800eeb4 <mem_trim+0x1e4>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d304      	bcc.n	800ed3e <mem_trim+0x6e>
 800ed34:	4b60      	ldr	r3, [pc, #384]	; (800eeb8 <mem_trim+0x1e8>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d301      	bcc.n	800ed42 <mem_trim+0x72>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	e0b3      	b.n	800eeaa <mem_trim+0x1da>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	3b08      	subs	r3, #8
 800ed46:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ed48:	69b8      	ldr	r0, [r7, #24]
 800ed4a:	f7ff fe25 	bl	800e998 <mem_to_ptr>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ed52:	69bb      	ldr	r3, [r7, #24]
 800ed54:	881a      	ldrh	r2, [r3, #0]
 800ed56:	8afb      	ldrh	r3, [r7, #22]
 800ed58:	1ad3      	subs	r3, r2, r3
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	3b08      	subs	r3, #8
 800ed5e:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ed60:	8bfa      	ldrh	r2, [r7, #30]
 800ed62:	8abb      	ldrh	r3, [r7, #20]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d906      	bls.n	800ed76 <mem_trim+0xa6>
 800ed68:	4b54      	ldr	r3, [pc, #336]	; (800eebc <mem_trim+0x1ec>)
 800ed6a:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ed6e:	4956      	ldr	r1, [pc, #344]	; (800eec8 <mem_trim+0x1f8>)
 800ed70:	4854      	ldr	r0, [pc, #336]	; (800eec4 <mem_trim+0x1f4>)
 800ed72:	f00b f9e1 	bl	801a138 <iprintf>
  if (newsize > size) {
 800ed76:	8bfa      	ldrh	r2, [r7, #30]
 800ed78:	8abb      	ldrh	r3, [r7, #20]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d901      	bls.n	800ed82 <mem_trim+0xb2>
    /* not supported */
    return NULL;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	e093      	b.n	800eeaa <mem_trim+0x1da>
  }
  if (newsize == size) {
 800ed82:	8bfa      	ldrh	r2, [r7, #30]
 800ed84:	8abb      	ldrh	r3, [r7, #20]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d101      	bne.n	800ed8e <mem_trim+0xbe>
    /* No change in size, simply return */
    return rmem;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	e08d      	b.n	800eeaa <mem_trim+0x1da>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800ed8e:	69bb      	ldr	r3, [r7, #24]
 800ed90:	881b      	ldrh	r3, [r3, #0]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7ff fdee 	bl	800e974 <ptr_to_mem>
 800ed98:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	791b      	ldrb	r3, [r3, #4]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d141      	bne.n	800ee26 <mem_trim+0x156>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800eda2:	69bb      	ldr	r3, [r7, #24]
 800eda4:	881b      	ldrh	r3, [r3, #0]
 800eda6:	f646 5260 	movw	r2, #28000	; 0x6d60
 800edaa:	4293      	cmp	r3, r2
 800edac:	d106      	bne.n	800edbc <mem_trim+0xec>
 800edae:	4b43      	ldr	r3, [pc, #268]	; (800eebc <mem_trim+0x1ec>)
 800edb0:	f240 22f5 	movw	r2, #757	; 0x2f5
 800edb4:	4945      	ldr	r1, [pc, #276]	; (800eecc <mem_trim+0x1fc>)
 800edb6:	4843      	ldr	r0, [pc, #268]	; (800eec4 <mem_trim+0x1f4>)
 800edb8:	f00b f9be 	bl	801a138 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	881b      	ldrh	r3, [r3, #0]
 800edc0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800edc2:	8afa      	ldrh	r2, [r7, #22]
 800edc4:	8bfb      	ldrh	r3, [r7, #30]
 800edc6:	4413      	add	r3, r2
 800edc8:	b29b      	uxth	r3, r3
 800edca:	3308      	adds	r3, #8
 800edcc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800edce:	4b40      	ldr	r3, [pc, #256]	; (800eed0 <mem_trim+0x200>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	693a      	ldr	r2, [r7, #16]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d106      	bne.n	800ede6 <mem_trim+0x116>
      lfree = ptr_to_mem(ptr2);
 800edd8:	89fb      	ldrh	r3, [r7, #14]
 800edda:	4618      	mov	r0, r3
 800eddc:	f7ff fdca 	bl	800e974 <ptr_to_mem>
 800ede0:	4603      	mov	r3, r0
 800ede2:	4a3b      	ldr	r2, [pc, #236]	; (800eed0 <mem_trim+0x200>)
 800ede4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ede6:	89fb      	ldrh	r3, [r7, #14]
 800ede8:	4618      	mov	r0, r3
 800edea:	f7ff fdc3 	bl	800e974 <ptr_to_mem>
 800edee:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	2200      	movs	r2, #0
 800edf4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	89ba      	ldrh	r2, [r7, #12]
 800edfa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	8afa      	ldrh	r2, [r7, #22]
 800ee00:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ee02:	69bb      	ldr	r3, [r7, #24]
 800ee04:	89fa      	ldrh	r2, [r7, #14]
 800ee06:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	881b      	ldrh	r3, [r3, #0]
 800ee0c:	f646 5260 	movw	r2, #28000	; 0x6d60
 800ee10:	4293      	cmp	r3, r2
 800ee12:	d049      	beq.n	800eea8 <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ee14:	693b      	ldr	r3, [r7, #16]
 800ee16:	881b      	ldrh	r3, [r3, #0]
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f7ff fdab 	bl	800e974 <ptr_to_mem>
 800ee1e:	4602      	mov	r2, r0
 800ee20:	89fb      	ldrh	r3, [r7, #14]
 800ee22:	8053      	strh	r3, [r2, #2]
 800ee24:	e040      	b.n	800eea8 <mem_trim+0x1d8>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ee26:	8bfb      	ldrh	r3, [r7, #30]
 800ee28:	f103 0214 	add.w	r2, r3, #20
 800ee2c:	8abb      	ldrh	r3, [r7, #20]
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d83a      	bhi.n	800eea8 <mem_trim+0x1d8>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ee32:	8afa      	ldrh	r2, [r7, #22]
 800ee34:	8bfb      	ldrh	r3, [r7, #30]
 800ee36:	4413      	add	r3, r2
 800ee38:	b29b      	uxth	r3, r3
 800ee3a:	3308      	adds	r3, #8
 800ee3c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ee3e:	69bb      	ldr	r3, [r7, #24]
 800ee40:	881b      	ldrh	r3, [r3, #0]
 800ee42:	f646 5260 	movw	r2, #28000	; 0x6d60
 800ee46:	4293      	cmp	r3, r2
 800ee48:	d106      	bne.n	800ee58 <mem_trim+0x188>
 800ee4a:	4b1c      	ldr	r3, [pc, #112]	; (800eebc <mem_trim+0x1ec>)
 800ee4c:	f240 3216 	movw	r2, #790	; 0x316
 800ee50:	491e      	ldr	r1, [pc, #120]	; (800eecc <mem_trim+0x1fc>)
 800ee52:	481c      	ldr	r0, [pc, #112]	; (800eec4 <mem_trim+0x1f4>)
 800ee54:	f00b f970 	bl	801a138 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ee58:	89fb      	ldrh	r3, [r7, #14]
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7ff fd8a 	bl	800e974 <ptr_to_mem>
 800ee60:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ee62:	4b1b      	ldr	r3, [pc, #108]	; (800eed0 <mem_trim+0x200>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	693a      	ldr	r2, [r7, #16]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d202      	bcs.n	800ee72 <mem_trim+0x1a2>
      lfree = mem2;
 800ee6c:	4a18      	ldr	r2, [pc, #96]	; (800eed0 <mem_trim+0x200>)
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	2200      	movs	r2, #0
 800ee76:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ee78:	69bb      	ldr	r3, [r7, #24]
 800ee7a:	881a      	ldrh	r2, [r3, #0]
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	8afa      	ldrh	r2, [r7, #22]
 800ee84:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	89fa      	ldrh	r2, [r7, #14]
 800ee8a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	881b      	ldrh	r3, [r3, #0]
 800ee90:	f646 5260 	movw	r2, #28000	; 0x6d60
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d007      	beq.n	800eea8 <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	881b      	ldrh	r3, [r3, #0]
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7ff fd69 	bl	800e974 <ptr_to_mem>
 800eea2:	4602      	mov	r2, r0
 800eea4:	89fb      	ldrh	r3, [r7, #14]
 800eea6:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800eea8:	687b      	ldr	r3, [r7, #4]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3720      	adds	r7, #32
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	200007e4 	.word	0x200007e4
 800eeb8:	200007e8 	.word	0x200007e8
 800eebc:	0801c958 	.word	0x0801c958
 800eec0:	0801cac8 	.word	0x0801cac8
 800eec4:	0801c9a0 	.word	0x0801c9a0
 800eec8:	0801cae0 	.word	0x0801cae0
 800eecc:	0801cb00 	.word	0x0801cb00
 800eed0:	200007ec 	.word	0x200007ec

0800eed4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b088      	sub	sp, #32
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	4603      	mov	r3, r0
 800eedc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800eede:	88fb      	ldrh	r3, [r7, #6]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d101      	bne.n	800eee8 <mem_malloc+0x14>
    return NULL;
 800eee4:	2300      	movs	r3, #0
 800eee6:	e0dd      	b.n	800f0a4 <mem_malloc+0x1d0>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800eee8:	88fb      	ldrh	r3, [r7, #6]
 800eeea:	3303      	adds	r3, #3
 800eeec:	b29b      	uxth	r3, r3
 800eeee:	f023 0303 	bic.w	r3, r3, #3
 800eef2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800eef4:	8bbb      	ldrh	r3, [r7, #28]
 800eef6:	2b0b      	cmp	r3, #11
 800eef8:	d801      	bhi.n	800eefe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800eefa:	230c      	movs	r3, #12
 800eefc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800eefe:	8bbb      	ldrh	r3, [r7, #28]
 800ef00:	f646 5260 	movw	r2, #28000	; 0x6d60
 800ef04:	4293      	cmp	r3, r2
 800ef06:	d803      	bhi.n	800ef10 <mem_malloc+0x3c>
 800ef08:	8bba      	ldrh	r2, [r7, #28]
 800ef0a:	88fb      	ldrh	r3, [r7, #6]
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d201      	bcs.n	800ef14 <mem_malloc+0x40>
    return NULL;
 800ef10:	2300      	movs	r3, #0
 800ef12:	e0c7      	b.n	800f0a4 <mem_malloc+0x1d0>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ef14:	4b65      	ldr	r3, [pc, #404]	; (800f0ac <mem_malloc+0x1d8>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7ff fd3d 	bl	800e998 <mem_to_ptr>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	83fb      	strh	r3, [r7, #30]
 800ef22:	e0b6      	b.n	800f092 <mem_malloc+0x1be>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ef24:	8bfb      	ldrh	r3, [r7, #30]
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7ff fd24 	bl	800e974 <ptr_to_mem>
 800ef2c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	791b      	ldrb	r3, [r3, #4]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	f040 80a6 	bne.w	800f084 <mem_malloc+0x1b0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	881b      	ldrh	r3, [r3, #0]
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	8bfb      	ldrh	r3, [r7, #30]
 800ef40:	1ad3      	subs	r3, r2, r3
 800ef42:	f1a3 0208 	sub.w	r2, r3, #8
 800ef46:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	f0c0 809b 	bcc.w	800f084 <mem_malloc+0x1b0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	881b      	ldrh	r3, [r3, #0]
 800ef52:	461a      	mov	r2, r3
 800ef54:	8bfb      	ldrh	r3, [r7, #30]
 800ef56:	1ad3      	subs	r3, r2, r3
 800ef58:	f1a3 0208 	sub.w	r2, r3, #8
 800ef5c:	8bbb      	ldrh	r3, [r7, #28]
 800ef5e:	3314      	adds	r3, #20
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d335      	bcc.n	800efd0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ef64:	8bfa      	ldrh	r2, [r7, #30]
 800ef66:	8bbb      	ldrh	r3, [r7, #28]
 800ef68:	4413      	add	r3, r2
 800ef6a:	b29b      	uxth	r3, r3
 800ef6c:	3308      	adds	r3, #8
 800ef6e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ef70:	8a7b      	ldrh	r3, [r7, #18]
 800ef72:	f646 5260 	movw	r2, #28000	; 0x6d60
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d106      	bne.n	800ef88 <mem_malloc+0xb4>
 800ef7a:	4b4d      	ldr	r3, [pc, #308]	; (800f0b0 <mem_malloc+0x1dc>)
 800ef7c:	f240 3287 	movw	r2, #903	; 0x387
 800ef80:	494c      	ldr	r1, [pc, #304]	; (800f0b4 <mem_malloc+0x1e0>)
 800ef82:	484d      	ldr	r0, [pc, #308]	; (800f0b8 <mem_malloc+0x1e4>)
 800ef84:	f00b f8d8 	bl	801a138 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ef88:	8a7b      	ldrh	r3, [r7, #18]
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7ff fcf2 	bl	800e974 <ptr_to_mem>
 800ef90:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	2200      	movs	r2, #0
 800ef96:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	881a      	ldrh	r2, [r3, #0]
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	8bfa      	ldrh	r2, [r7, #30]
 800efa4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	8a7a      	ldrh	r2, [r7, #18]
 800efaa:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	2201      	movs	r2, #1
 800efb0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	881b      	ldrh	r3, [r3, #0]
 800efb6:	f646 5260 	movw	r2, #28000	; 0x6d60
 800efba:	4293      	cmp	r3, r2
 800efbc:	d00b      	beq.n	800efd6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	881b      	ldrh	r3, [r3, #0]
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7ff fcd6 	bl	800e974 <ptr_to_mem>
 800efc8:	4602      	mov	r2, r0
 800efca:	8a7b      	ldrh	r3, [r7, #18]
 800efcc:	8053      	strh	r3, [r2, #2]
 800efce:	e002      	b.n	800efd6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	2201      	movs	r2, #1
 800efd4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800efd6:	4b35      	ldr	r3, [pc, #212]	; (800f0ac <mem_malloc+0x1d8>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	697a      	ldr	r2, [r7, #20]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d127      	bne.n	800f030 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800efe0:	4b32      	ldr	r3, [pc, #200]	; (800f0ac <mem_malloc+0x1d8>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800efe6:	e005      	b.n	800eff4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800efe8:	69bb      	ldr	r3, [r7, #24]
 800efea:	881b      	ldrh	r3, [r3, #0]
 800efec:	4618      	mov	r0, r3
 800efee:	f7ff fcc1 	bl	800e974 <ptr_to_mem>
 800eff2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800eff4:	69bb      	ldr	r3, [r7, #24]
 800eff6:	791b      	ldrb	r3, [r3, #4]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d004      	beq.n	800f006 <mem_malloc+0x132>
 800effc:	4b2f      	ldr	r3, [pc, #188]	; (800f0bc <mem_malloc+0x1e8>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	69ba      	ldr	r2, [r7, #24]
 800f002:	429a      	cmp	r2, r3
 800f004:	d1f0      	bne.n	800efe8 <mem_malloc+0x114>
          }
          lfree = cur;
 800f006:	4a29      	ldr	r2, [pc, #164]	; (800f0ac <mem_malloc+0x1d8>)
 800f008:	69bb      	ldr	r3, [r7, #24]
 800f00a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f00c:	4b27      	ldr	r3, [pc, #156]	; (800f0ac <mem_malloc+0x1d8>)
 800f00e:	681a      	ldr	r2, [r3, #0]
 800f010:	4b2a      	ldr	r3, [pc, #168]	; (800f0bc <mem_malloc+0x1e8>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	429a      	cmp	r2, r3
 800f016:	d00b      	beq.n	800f030 <mem_malloc+0x15c>
 800f018:	4b24      	ldr	r3, [pc, #144]	; (800f0ac <mem_malloc+0x1d8>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	791b      	ldrb	r3, [r3, #4]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d006      	beq.n	800f030 <mem_malloc+0x15c>
 800f022:	4b23      	ldr	r3, [pc, #140]	; (800f0b0 <mem_malloc+0x1dc>)
 800f024:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f028:	4925      	ldr	r1, [pc, #148]	; (800f0c0 <mem_malloc+0x1ec>)
 800f02a:	4823      	ldr	r0, [pc, #140]	; (800f0b8 <mem_malloc+0x1e4>)
 800f02c:	f00b f884 	bl	801a138 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f030:	8bba      	ldrh	r2, [r7, #28]
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	4413      	add	r3, r2
 800f036:	3308      	adds	r3, #8
 800f038:	4a20      	ldr	r2, [pc, #128]	; (800f0bc <mem_malloc+0x1e8>)
 800f03a:	6812      	ldr	r2, [r2, #0]
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d906      	bls.n	800f04e <mem_malloc+0x17a>
 800f040:	4b1b      	ldr	r3, [pc, #108]	; (800f0b0 <mem_malloc+0x1dc>)
 800f042:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f046:	491f      	ldr	r1, [pc, #124]	; (800f0c4 <mem_malloc+0x1f0>)
 800f048:	481b      	ldr	r0, [pc, #108]	; (800f0b8 <mem_malloc+0x1e4>)
 800f04a:	f00b f875 	bl	801a138 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	f003 0303 	and.w	r3, r3, #3
 800f054:	2b00      	cmp	r3, #0
 800f056:	d006      	beq.n	800f066 <mem_malloc+0x192>
 800f058:	4b15      	ldr	r3, [pc, #84]	; (800f0b0 <mem_malloc+0x1dc>)
 800f05a:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f05e:	491a      	ldr	r1, [pc, #104]	; (800f0c8 <mem_malloc+0x1f4>)
 800f060:	4815      	ldr	r0, [pc, #84]	; (800f0b8 <mem_malloc+0x1e4>)
 800f062:	f00b f869 	bl	801a138 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	f003 0303 	and.w	r3, r3, #3
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d006      	beq.n	800f07e <mem_malloc+0x1aa>
 800f070:	4b0f      	ldr	r3, [pc, #60]	; (800f0b0 <mem_malloc+0x1dc>)
 800f072:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f076:	4915      	ldr	r1, [pc, #84]	; (800f0cc <mem_malloc+0x1f8>)
 800f078:	480f      	ldr	r0, [pc, #60]	; (800f0b8 <mem_malloc+0x1e4>)
 800f07a:	f00b f85d 	bl	801a138 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	3308      	adds	r3, #8
 800f082:	e00f      	b.n	800f0a4 <mem_malloc+0x1d0>
         ptr = ptr_to_mem(ptr)->next) {
 800f084:	8bfb      	ldrh	r3, [r7, #30]
 800f086:	4618      	mov	r0, r3
 800f088:	f7ff fc74 	bl	800e974 <ptr_to_mem>
 800f08c:	4603      	mov	r3, r0
 800f08e:	881b      	ldrh	r3, [r3, #0]
 800f090:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f092:	8bfa      	ldrh	r2, [r7, #30]
 800f094:	8bbb      	ldrh	r3, [r7, #28]
 800f096:	f5c3 43da 	rsb	r3, r3, #27904	; 0x6d00
 800f09a:	3360      	adds	r3, #96	; 0x60
 800f09c:	429a      	cmp	r2, r3
 800f09e:	f4ff af41 	bcc.w	800ef24 <mem_malloc+0x50>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f0a2:	2300      	movs	r3, #0
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3720      	adds	r7, #32
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	200007ec 	.word	0x200007ec
 800f0b0:	0801c958 	.word	0x0801c958
 800f0b4:	0801cb00 	.word	0x0801cb00
 800f0b8:	0801c9a0 	.word	0x0801c9a0
 800f0bc:	200007e8 	.word	0x200007e8
 800f0c0:	0801cb14 	.word	0x0801cb14
 800f0c4:	0801cb30 	.word	0x0801cb30
 800f0c8:	0801cb60 	.word	0x0801cb60
 800f0cc:	0801cb90 	.word	0x0801cb90

0800f0d0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b085      	sub	sp, #20
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	689b      	ldr	r3, [r3, #8]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	3303      	adds	r3, #3
 800f0e6:	f023 0303 	bic.w	r3, r3, #3
 800f0ea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	60fb      	str	r3, [r7, #12]
 800f0f0:	e011      	b.n	800f116 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	689b      	ldr	r3, [r3, #8]
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	689b      	ldr	r3, [r3, #8]
 800f100:	68ba      	ldr	r2, [r7, #8]
 800f102:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	881b      	ldrh	r3, [r3, #0]
 800f108:	461a      	mov	r2, r3
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	4413      	add	r3, r2
 800f10e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	3301      	adds	r3, #1
 800f114:	60fb      	str	r3, [r7, #12]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	885b      	ldrh	r3, [r3, #2]
 800f11a:	461a      	mov	r2, r3
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	4293      	cmp	r3, r2
 800f120:	dbe7      	blt.n	800f0f2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f122:	bf00      	nop
 800f124:	bf00      	nop
 800f126:	3714      	adds	r7, #20
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr

0800f130 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f136:	2300      	movs	r3, #0
 800f138:	80fb      	strh	r3, [r7, #6]
 800f13a:	e009      	b.n	800f150 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f13c:	88fb      	ldrh	r3, [r7, #6]
 800f13e:	4a08      	ldr	r2, [pc, #32]	; (800f160 <memp_init+0x30>)
 800f140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f144:	4618      	mov	r0, r3
 800f146:	f7ff ffc3 	bl	800f0d0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f14a:	88fb      	ldrh	r3, [r7, #6]
 800f14c:	3301      	adds	r3, #1
 800f14e:	80fb      	strh	r3, [r7, #6]
 800f150:	88fb      	ldrh	r3, [r7, #6]
 800f152:	2b08      	cmp	r3, #8
 800f154:	d9f2      	bls.n	800f13c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f156:	bf00      	nop
 800f158:	bf00      	nop
 800f15a:	3708      	adds	r7, #8
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	0801f4f8 	.word	0x0801f4f8

0800f164 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b084      	sub	sp, #16
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	689b      	ldr	r3, [r3, #8]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d012      	beq.n	800f1a0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	689b      	ldr	r3, [r3, #8]
 800f17e:	68fa      	ldr	r2, [r7, #12]
 800f180:	6812      	ldr	r2, [r2, #0]
 800f182:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f003 0303 	and.w	r3, r3, #3
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d006      	beq.n	800f19c <do_memp_malloc_pool+0x38>
 800f18e:	4b07      	ldr	r3, [pc, #28]	; (800f1ac <do_memp_malloc_pool+0x48>)
 800f190:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f194:	4906      	ldr	r1, [pc, #24]	; (800f1b0 <do_memp_malloc_pool+0x4c>)
 800f196:	4807      	ldr	r0, [pc, #28]	; (800f1b4 <do_memp_malloc_pool+0x50>)
 800f198:	f00a ffce 	bl	801a138 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	e000      	b.n	800f1a2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f1a0:	2300      	movs	r3, #0
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3710      	adds	r7, #16
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	0801cbb4 	.word	0x0801cbb4
 800f1b0:	0801cbe4 	.word	0x0801cbe4
 800f1b4:	0801cc08 	.word	0x0801cc08

0800f1b8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	4603      	mov	r3, r0
 800f1c0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f1c2:	79fb      	ldrb	r3, [r7, #7]
 800f1c4:	2b08      	cmp	r3, #8
 800f1c6:	d908      	bls.n	800f1da <memp_malloc+0x22>
 800f1c8:	4b0a      	ldr	r3, [pc, #40]	; (800f1f4 <memp_malloc+0x3c>)
 800f1ca:	f240 1257 	movw	r2, #343	; 0x157
 800f1ce:	490a      	ldr	r1, [pc, #40]	; (800f1f8 <memp_malloc+0x40>)
 800f1d0:	480a      	ldr	r0, [pc, #40]	; (800f1fc <memp_malloc+0x44>)
 800f1d2:	f00a ffb1 	bl	801a138 <iprintf>
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	e008      	b.n	800f1ec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f1da:	79fb      	ldrb	r3, [r7, #7]
 800f1dc:	4a08      	ldr	r2, [pc, #32]	; (800f200 <memp_malloc+0x48>)
 800f1de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7ff ffbe 	bl	800f164 <do_memp_malloc_pool>
 800f1e8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3710      	adds	r7, #16
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}
 800f1f4:	0801cbb4 	.word	0x0801cbb4
 800f1f8:	0801cc44 	.word	0x0801cc44
 800f1fc:	0801cc08 	.word	0x0801cc08
 800f200:	0801f4f8 	.word	0x0801f4f8

0800f204 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	f003 0303 	and.w	r3, r3, #3
 800f214:	2b00      	cmp	r3, #0
 800f216:	d006      	beq.n	800f226 <do_memp_free_pool+0x22>
 800f218:	4b0a      	ldr	r3, [pc, #40]	; (800f244 <do_memp_free_pool+0x40>)
 800f21a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f21e:	490a      	ldr	r1, [pc, #40]	; (800f248 <do_memp_free_pool+0x44>)
 800f220:	480a      	ldr	r0, [pc, #40]	; (800f24c <do_memp_free_pool+0x48>)
 800f222:	f00a ff89 	bl	801a138 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	689b      	ldr	r3, [r3, #8]
 800f22e:	681a      	ldr	r2, [r3, #0]
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	689b      	ldr	r3, [r3, #8]
 800f238:	68fa      	ldr	r2, [r7, #12]
 800f23a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800f23c:	bf00      	nop
 800f23e:	3710      	adds	r7, #16
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	0801cbb4 	.word	0x0801cbb4
 800f248:	0801cc64 	.word	0x0801cc64
 800f24c:	0801cc08 	.word	0x0801cc08

0800f250 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	4603      	mov	r3, r0
 800f258:	6039      	str	r1, [r7, #0]
 800f25a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f25c:	79fb      	ldrb	r3, [r7, #7]
 800f25e:	2b08      	cmp	r3, #8
 800f260:	d907      	bls.n	800f272 <memp_free+0x22>
 800f262:	4b0c      	ldr	r3, [pc, #48]	; (800f294 <memp_free+0x44>)
 800f264:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f268:	490b      	ldr	r1, [pc, #44]	; (800f298 <memp_free+0x48>)
 800f26a:	480c      	ldr	r0, [pc, #48]	; (800f29c <memp_free+0x4c>)
 800f26c:	f00a ff64 	bl	801a138 <iprintf>
 800f270:	e00c      	b.n	800f28c <memp_free+0x3c>

  if (mem == NULL) {
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d008      	beq.n	800f28a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f278:	79fb      	ldrb	r3, [r7, #7]
 800f27a:	4a09      	ldr	r2, [pc, #36]	; (800f2a0 <memp_free+0x50>)
 800f27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f280:	6839      	ldr	r1, [r7, #0]
 800f282:	4618      	mov	r0, r3
 800f284:	f7ff ffbe 	bl	800f204 <do_memp_free_pool>
 800f288:	e000      	b.n	800f28c <memp_free+0x3c>
    return;
 800f28a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f28c:	3708      	adds	r7, #8
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}
 800f292:	bf00      	nop
 800f294:	0801cbb4 	.word	0x0801cbb4
 800f298:	0801cc84 	.word	0x0801cc84
 800f29c:	0801cc08 	.word	0x0801cc08
 800f2a0:	0801f4f8 	.word	0x0801f4f8

0800f2a4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f2a8:	bf00      	nop
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b0:	4770      	bx	lr
	...

0800f2b4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b086      	sub	sp, #24
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	60f8      	str	r0, [r7, #12]
 800f2bc:	60b9      	str	r1, [r7, #8]
 800f2be:	607a      	str	r2, [r7, #4]
 800f2c0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d108      	bne.n	800f2da <netif_add+0x26>
 800f2c8:	4b57      	ldr	r3, [pc, #348]	; (800f428 <netif_add+0x174>)
 800f2ca:	f240 1227 	movw	r2, #295	; 0x127
 800f2ce:	4957      	ldr	r1, [pc, #348]	; (800f42c <netif_add+0x178>)
 800f2d0:	4857      	ldr	r0, [pc, #348]	; (800f430 <netif_add+0x17c>)
 800f2d2:	f00a ff31 	bl	801a138 <iprintf>
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	e0a2      	b.n	800f420 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d108      	bne.n	800f2f2 <netif_add+0x3e>
 800f2e0:	4b51      	ldr	r3, [pc, #324]	; (800f428 <netif_add+0x174>)
 800f2e2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f2e6:	4953      	ldr	r1, [pc, #332]	; (800f434 <netif_add+0x180>)
 800f2e8:	4851      	ldr	r0, [pc, #324]	; (800f430 <netif_add+0x17c>)
 800f2ea:	f00a ff25 	bl	801a138 <iprintf>
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	e096      	b.n	800f420 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d101      	bne.n	800f2fc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f2f8:	4b4f      	ldr	r3, [pc, #316]	; (800f438 <netif_add+0x184>)
 800f2fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d101      	bne.n	800f306 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f302:	4b4d      	ldr	r3, [pc, #308]	; (800f438 <netif_add+0x184>)
 800f304:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d101      	bne.n	800f310 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f30c:	4b4a      	ldr	r3, [pc, #296]	; (800f438 <netif_add+0x184>)
 800f30e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2200      	movs	r2, #0
 800f314:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	2200      	movs	r2, #0
 800f31a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2200      	movs	r2, #0
 800f320:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	4a45      	ldr	r2, [pc, #276]	; (800f43c <netif_add+0x188>)
 800f326:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2200      	movs	r2, #0
 800f32c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2200      	movs	r2, #0
 800f332:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2200      	movs	r2, #0
 800f33a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	6a3a      	ldr	r2, [r7, #32]
 800f340:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f342:	4b3f      	ldr	r3, [pc, #252]	; (800f440 <netif_add+0x18c>)
 800f344:	781a      	ldrb	r2, [r3, #0]
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f350:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	68b9      	ldr	r1, [r7, #8]
 800f358:	68f8      	ldr	r0, [r7, #12]
 800f35a:	f000 f913 	bl	800f584 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f360:	68f8      	ldr	r0, [r7, #12]
 800f362:	4798      	blx	r3
 800f364:	4603      	mov	r3, r0
 800f366:	2b00      	cmp	r3, #0
 800f368:	d001      	beq.n	800f36e <netif_add+0xba>
    return NULL;
 800f36a:	2300      	movs	r3, #0
 800f36c:	e058      	b.n	800f420 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f374:	2bff      	cmp	r3, #255	; 0xff
 800f376:	d103      	bne.n	800f380 <netif_add+0xcc>
        netif->num = 0;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2200      	movs	r2, #0
 800f37c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800f380:	2300      	movs	r3, #0
 800f382:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f384:	4b2f      	ldr	r3, [pc, #188]	; (800f444 <netif_add+0x190>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	617b      	str	r3, [r7, #20]
 800f38a:	e02b      	b.n	800f3e4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f38c:	697a      	ldr	r2, [r7, #20]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	429a      	cmp	r2, r3
 800f392:	d106      	bne.n	800f3a2 <netif_add+0xee>
 800f394:	4b24      	ldr	r3, [pc, #144]	; (800f428 <netif_add+0x174>)
 800f396:	f240 128b 	movw	r2, #395	; 0x18b
 800f39a:	492b      	ldr	r1, [pc, #172]	; (800f448 <netif_add+0x194>)
 800f39c:	4824      	ldr	r0, [pc, #144]	; (800f430 <netif_add+0x17c>)
 800f39e:	f00a fecb 	bl	801a138 <iprintf>
        num_netifs++;
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	3301      	adds	r3, #1
 800f3a6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	2bff      	cmp	r3, #255	; 0xff
 800f3ac:	dd06      	ble.n	800f3bc <netif_add+0x108>
 800f3ae:	4b1e      	ldr	r3, [pc, #120]	; (800f428 <netif_add+0x174>)
 800f3b0:	f240 128d 	movw	r2, #397	; 0x18d
 800f3b4:	4925      	ldr	r1, [pc, #148]	; (800f44c <netif_add+0x198>)
 800f3b6:	481e      	ldr	r0, [pc, #120]	; (800f430 <netif_add+0x17c>)
 800f3b8:	f00a febe 	bl	801a138 <iprintf>
        if (netif2->num == netif->num) {
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d108      	bne.n	800f3de <netif_add+0x12a>
          netif->num++;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	b2da      	uxtb	r2, r3
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800f3dc:	e005      	b.n	800f3ea <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	617b      	str	r3, [r7, #20]
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d1d0      	bne.n	800f38c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d1be      	bne.n	800f36e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f3f6:	2bfe      	cmp	r3, #254	; 0xfe
 800f3f8:	d103      	bne.n	800f402 <netif_add+0x14e>
    netif_num = 0;
 800f3fa:	4b11      	ldr	r3, [pc, #68]	; (800f440 <netif_add+0x18c>)
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	701a      	strb	r2, [r3, #0]
 800f400:	e006      	b.n	800f410 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f408:	3301      	adds	r3, #1
 800f40a:	b2da      	uxtb	r2, r3
 800f40c:	4b0c      	ldr	r3, [pc, #48]	; (800f440 <netif_add+0x18c>)
 800f40e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f410:	4b0c      	ldr	r3, [pc, #48]	; (800f444 <netif_add+0x190>)
 800f412:	681a      	ldr	r2, [r3, #0]
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f418:	4a0a      	ldr	r2, [pc, #40]	; (800f444 <netif_add+0x190>)
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f41e:	68fb      	ldr	r3, [r7, #12]
}
 800f420:	4618      	mov	r0, r3
 800f422:	3718      	adds	r7, #24
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}
 800f428:	0801cca0 	.word	0x0801cca0
 800f42c:	0801cd34 	.word	0x0801cd34
 800f430:	0801ccf0 	.word	0x0801ccf0
 800f434:	0801cd50 	.word	0x0801cd50
 800f438:	0801f55c 	.word	0x0801f55c
 800f43c:	0800f797 	.word	0x0800f797
 800f440:	20000814 	.word	0x20000814
 800f444:	200188fc 	.word	0x200188fc
 800f448:	0801cd74 	.word	0x0801cd74
 800f44c:	0801cd88 	.word	0x0801cd88

0800f450 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f45a:	6839      	ldr	r1, [r7, #0]
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f002 fd83 	bl	8011f68 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f462:	6839      	ldr	r1, [r7, #0]
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f007 fac1 	bl	80169ec <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f46a:	bf00      	nop
 800f46c:	3708      	adds	r7, #8
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
	...

0800f474 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b086      	sub	sp, #24
 800f478:	af00      	add	r7, sp, #0
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d106      	bne.n	800f494 <netif_do_set_ipaddr+0x20>
 800f486:	4b1d      	ldr	r3, [pc, #116]	; (800f4fc <netif_do_set_ipaddr+0x88>)
 800f488:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f48c:	491c      	ldr	r1, [pc, #112]	; (800f500 <netif_do_set_ipaddr+0x8c>)
 800f48e:	481d      	ldr	r0, [pc, #116]	; (800f504 <netif_do_set_ipaddr+0x90>)
 800f490:	f00a fe52 	bl	801a138 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d106      	bne.n	800f4a8 <netif_do_set_ipaddr+0x34>
 800f49a:	4b18      	ldr	r3, [pc, #96]	; (800f4fc <netif_do_set_ipaddr+0x88>)
 800f49c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f4a0:	4917      	ldr	r1, [pc, #92]	; (800f500 <netif_do_set_ipaddr+0x8c>)
 800f4a2:	4818      	ldr	r0, [pc, #96]	; (800f504 <netif_do_set_ipaddr+0x90>)
 800f4a4:	f00a fe48 	bl	801a138 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	681a      	ldr	r2, [r3, #0]
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	3304      	adds	r3, #4
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d01c      	beq.n	800f4f0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	3304      	adds	r3, #4
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f4c6:	f107 0314 	add.w	r3, r7, #20
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f7ff ffbf 	bl	800f450 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d002      	beq.n	800f4de <netif_do_set_ipaddr+0x6a>
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	e000      	b.n	800f4e0 <netif_do_set_ipaddr+0x6c>
 800f4de:	2300      	movs	r3, #0
 800f4e0:	68fa      	ldr	r2, [r7, #12]
 800f4e2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f4e4:	2101      	movs	r1, #1
 800f4e6:	68f8      	ldr	r0, [r7, #12]
 800f4e8:	f000 f8d2 	bl	800f690 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	e000      	b.n	800f4f2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f4f0:	2300      	movs	r3, #0
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3718      	adds	r7, #24
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	0801cca0 	.word	0x0801cca0
 800f500:	0801cdb8 	.word	0x0801cdb8
 800f504:	0801ccf0 	.word	0x0801ccf0

0800f508 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f508:	b480      	push	{r7}
 800f50a:	b085      	sub	sp, #20
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	681a      	ldr	r2, [r3, #0]
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	3308      	adds	r3, #8
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	429a      	cmp	r2, r3
 800f520:	d00a      	beq.n	800f538 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d002      	beq.n	800f52e <netif_do_set_netmask+0x26>
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	e000      	b.n	800f530 <netif_do_set_netmask+0x28>
 800f52e:	2300      	movs	r3, #0
 800f530:	68fa      	ldr	r2, [r7, #12]
 800f532:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f534:	2301      	movs	r3, #1
 800f536:	e000      	b.n	800f53a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f538:	2300      	movs	r3, #0
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3714      	adds	r7, #20
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr

0800f546 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f546:	b480      	push	{r7}
 800f548:	b085      	sub	sp, #20
 800f54a:	af00      	add	r7, sp, #0
 800f54c:	60f8      	str	r0, [r7, #12]
 800f54e:	60b9      	str	r1, [r7, #8]
 800f550:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	330c      	adds	r3, #12
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d00a      	beq.n	800f576 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d002      	beq.n	800f56c <netif_do_set_gw+0x26>
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	e000      	b.n	800f56e <netif_do_set_gw+0x28>
 800f56c:	2300      	movs	r3, #0
 800f56e:	68fa      	ldr	r2, [r7, #12]
 800f570:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f572:	2301      	movs	r3, #1
 800f574:	e000      	b.n	800f578 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f576:	2300      	movs	r3, #0
}
 800f578:	4618      	mov	r0, r3
 800f57a:	3714      	adds	r7, #20
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b088      	sub	sp, #32
 800f588:	af00      	add	r7, sp, #0
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	607a      	str	r2, [r7, #4]
 800f590:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f592:	2300      	movs	r3, #0
 800f594:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f596:	2300      	movs	r3, #0
 800f598:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d101      	bne.n	800f5a4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f5a0:	4b1c      	ldr	r3, [pc, #112]	; (800f614 <netif_set_addr+0x90>)
 800f5a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d101      	bne.n	800f5ae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f5aa:	4b1a      	ldr	r3, [pc, #104]	; (800f614 <netif_set_addr+0x90>)
 800f5ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d101      	bne.n	800f5b8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f5b4:	4b17      	ldr	r3, [pc, #92]	; (800f614 <netif_set_addr+0x90>)
 800f5b6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d003      	beq.n	800f5c6 <netif_set_addr+0x42>
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d101      	bne.n	800f5ca <netif_set_addr+0x46>
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	e000      	b.n	800f5cc <netif_set_addr+0x48>
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d006      	beq.n	800f5e2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f5d4:	f107 0310 	add.w	r3, r7, #16
 800f5d8:	461a      	mov	r2, r3
 800f5da:	68b9      	ldr	r1, [r7, #8]
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	f7ff ff49 	bl	800f474 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f5e2:	69fa      	ldr	r2, [r7, #28]
 800f5e4:	6879      	ldr	r1, [r7, #4]
 800f5e6:	68f8      	ldr	r0, [r7, #12]
 800f5e8:	f7ff ff8e 	bl	800f508 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f5ec:	69ba      	ldr	r2, [r7, #24]
 800f5ee:	6839      	ldr	r1, [r7, #0]
 800f5f0:	68f8      	ldr	r0, [r7, #12]
 800f5f2:	f7ff ffa8 	bl	800f546 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d106      	bne.n	800f60a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f5fc:	f107 0310 	add.w	r3, r7, #16
 800f600:	461a      	mov	r2, r3
 800f602:	68b9      	ldr	r1, [r7, #8]
 800f604:	68f8      	ldr	r0, [r7, #12]
 800f606:	f7ff ff35 	bl	800f474 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f60a:	bf00      	nop
 800f60c:	3720      	adds	r7, #32
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop
 800f614:	0801f55c 	.word	0x0801f55c

0800f618 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f618:	b480      	push	{r7}
 800f61a:	b083      	sub	sp, #12
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f620:	4a04      	ldr	r2, [pc, #16]	; (800f634 <netif_set_default+0x1c>)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f626:	bf00      	nop
 800f628:	370c      	adds	r7, #12
 800f62a:	46bd      	mov	sp, r7
 800f62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f630:	4770      	bx	lr
 800f632:	bf00      	nop
 800f634:	20018900 	.word	0x20018900

0800f638 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d107      	bne.n	800f656 <netif_set_up+0x1e>
 800f646:	4b0f      	ldr	r3, [pc, #60]	; (800f684 <netif_set_up+0x4c>)
 800f648:	f44f 7254 	mov.w	r2, #848	; 0x350
 800f64c:	490e      	ldr	r1, [pc, #56]	; (800f688 <netif_set_up+0x50>)
 800f64e:	480f      	ldr	r0, [pc, #60]	; (800f68c <netif_set_up+0x54>)
 800f650:	f00a fd72 	bl	801a138 <iprintf>
 800f654:	e013      	b.n	800f67e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f65c:	f003 0301 	and.w	r3, r3, #1
 800f660:	2b00      	cmp	r3, #0
 800f662:	d10c      	bne.n	800f67e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f66a:	f043 0301 	orr.w	r3, r3, #1
 800f66e:	b2da      	uxtb	r2, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f676:	2103      	movs	r1, #3
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f000 f809 	bl	800f690 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800f67e:	3708      	adds	r7, #8
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}
 800f684:	0801cca0 	.word	0x0801cca0
 800f688:	0801ce28 	.word	0x0801ce28
 800f68c:	0801ccf0 	.word	0x0801ccf0

0800f690 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	460b      	mov	r3, r1
 800f69a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d106      	bne.n	800f6b0 <netif_issue_reports+0x20>
 800f6a2:	4b18      	ldr	r3, [pc, #96]	; (800f704 <netif_issue_reports+0x74>)
 800f6a4:	f240 326d 	movw	r2, #877	; 0x36d
 800f6a8:	4917      	ldr	r1, [pc, #92]	; (800f708 <netif_issue_reports+0x78>)
 800f6aa:	4818      	ldr	r0, [pc, #96]	; (800f70c <netif_issue_reports+0x7c>)
 800f6ac:	f00a fd44 	bl	801a138 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f6b6:	f003 0304 	and.w	r3, r3, #4
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d01e      	beq.n	800f6fc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f6c4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d017      	beq.n	800f6fc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f6cc:	78fb      	ldrb	r3, [r7, #3]
 800f6ce:	f003 0301 	and.w	r3, r3, #1
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d013      	beq.n	800f6fe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	3304      	adds	r3, #4
 800f6da:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d00e      	beq.n	800f6fe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f6e6:	f003 0308 	and.w	r3, r3, #8
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d007      	beq.n	800f6fe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	3304      	adds	r3, #4
 800f6f2:	4619      	mov	r1, r3
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f008 f8e3 	bl	80178c0 <etharp_request>
 800f6fa:	e000      	b.n	800f6fe <netif_issue_reports+0x6e>
    return;
 800f6fc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800f6fe:	3708      	adds	r7, #8
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}
 800f704:	0801cca0 	.word	0x0801cca0
 800f708:	0801ce44 	.word	0x0801ce44
 800f70c:	0801ccf0 	.word	0x0801ccf0

0800f710 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b082      	sub	sp, #8
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d107      	bne.n	800f72e <netif_set_down+0x1e>
 800f71e:	4b12      	ldr	r3, [pc, #72]	; (800f768 <netif_set_down+0x58>)
 800f720:	f240 329b 	movw	r2, #923	; 0x39b
 800f724:	4911      	ldr	r1, [pc, #68]	; (800f76c <netif_set_down+0x5c>)
 800f726:	4812      	ldr	r0, [pc, #72]	; (800f770 <netif_set_down+0x60>)
 800f728:	f00a fd06 	bl	801a138 <iprintf>
 800f72c:	e019      	b.n	800f762 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f734:	f003 0301 	and.w	r3, r3, #1
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d012      	beq.n	800f762 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f742:	f023 0301 	bic.w	r3, r3, #1
 800f746:	b2da      	uxtb	r2, r3
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f754:	f003 0308 	and.w	r3, r3, #8
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d002      	beq.n	800f762 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f007 fc6d 	bl	801703c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800f762:	3708      	adds	r7, #8
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}
 800f768:	0801cca0 	.word	0x0801cca0
 800f76c:	0801ce68 	.word	0x0801ce68
 800f770:	0801ccf0 	.word	0x0801ccf0

0800f774 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800f774:	b480      	push	{r7}
 800f776:	b083      	sub	sp, #12
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
 800f77c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d002      	beq.n	800f78a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	683a      	ldr	r2, [r7, #0]
 800f788:	61da      	str	r2, [r3, #28]
  }
}
 800f78a:	bf00      	nop
 800f78c:	370c      	adds	r7, #12
 800f78e:	46bd      	mov	sp, r7
 800f790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f794:	4770      	bx	lr

0800f796 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800f796:	b480      	push	{r7}
 800f798:	b085      	sub	sp, #20
 800f79a:	af00      	add	r7, sp, #0
 800f79c:	60f8      	str	r0, [r7, #12]
 800f79e:	60b9      	str	r1, [r7, #8]
 800f7a0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800f7a2:	f06f 030b 	mvn.w	r3, #11
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3714      	adds	r7, #20
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr
	...

0800f7b4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b085      	sub	sp, #20
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800f7be:	79fb      	ldrb	r3, [r7, #7]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d013      	beq.n	800f7ec <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800f7c4:	4b0d      	ldr	r3, [pc, #52]	; (800f7fc <netif_get_by_index+0x48>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	60fb      	str	r3, [r7, #12]
 800f7ca:	e00c      	b.n	800f7e6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	79fa      	ldrb	r2, [r7, #7]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d101      	bne.n	800f7e0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	e006      	b.n	800f7ee <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	60fb      	str	r3, [r7, #12]
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d1ef      	bne.n	800f7cc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800f7ec:	2300      	movs	r3, #0
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3714      	adds	r7, #20
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f8:	4770      	bx	lr
 800f7fa:	bf00      	nop
 800f7fc:	200188fc 	.word	0x200188fc

0800f800 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800f806:	4b0c      	ldr	r3, [pc, #48]	; (800f838 <pbuf_free_ooseq+0x38>)
 800f808:	2200      	movs	r2, #0
 800f80a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f80c:	4b0b      	ldr	r3, [pc, #44]	; (800f83c <pbuf_free_ooseq+0x3c>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	607b      	str	r3, [r7, #4]
 800f812:	e00a      	b.n	800f82a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d003      	beq.n	800f824 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f002 fbe1 	bl	8011fe4 <tcp_free_ooseq>
      return;
 800f822:	e005      	b.n	800f830 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	607b      	str	r3, [r7, #4]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d1f1      	bne.n	800f814 <pbuf_free_ooseq+0x14>
    }
  }
}
 800f830:	3708      	adds	r7, #8
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}
 800f836:	bf00      	nop
 800f838:	20018904 	.word	0x20018904
 800f83c:	2001890c 	.word	0x2001890c

0800f840 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f840:	b480      	push	{r7}
 800f842:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800f844:	4b03      	ldr	r3, [pc, #12]	; (800f854 <pbuf_pool_is_empty+0x14>)
 800f846:	2201      	movs	r2, #1
 800f848:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f84a:	bf00      	nop
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr
 800f854:	20018904 	.word	0x20018904

0800f858 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800f858:	b480      	push	{r7}
 800f85a:	b085      	sub	sp, #20
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	4611      	mov	r1, r2
 800f864:	461a      	mov	r2, r3
 800f866:	460b      	mov	r3, r1
 800f868:	80fb      	strh	r3, [r7, #6]
 800f86a:	4613      	mov	r3, r2
 800f86c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2200      	movs	r2, #0
 800f872:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	68ba      	ldr	r2, [r7, #8]
 800f878:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	88fa      	ldrh	r2, [r7, #6]
 800f87e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	88ba      	ldrh	r2, [r7, #4]
 800f884:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800f886:	8b3b      	ldrh	r3, [r7, #24]
 800f888:	b2da      	uxtb	r2, r3
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	7f3a      	ldrb	r2, [r7, #28]
 800f892:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	2201      	movs	r2, #1
 800f898:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	2200      	movs	r2, #0
 800f89e:	73da      	strb	r2, [r3, #15]
}
 800f8a0:	bf00      	nop
 800f8a2:	3714      	adds	r7, #20
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr

0800f8ac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b08c      	sub	sp, #48	; 0x30
 800f8b0:	af02      	add	r7, sp, #8
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	71fb      	strb	r3, [r7, #7]
 800f8b6:	460b      	mov	r3, r1
 800f8b8:	80bb      	strh	r3, [r7, #4]
 800f8ba:	4613      	mov	r3, r2
 800f8bc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800f8be:	79fb      	ldrb	r3, [r7, #7]
 800f8c0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800f8c2:	887b      	ldrh	r3, [r7, #2]
 800f8c4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f8c8:	d07f      	beq.n	800f9ca <pbuf_alloc+0x11e>
 800f8ca:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f8ce:	f300 80c8 	bgt.w	800fa62 <pbuf_alloc+0x1b6>
 800f8d2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f8d6:	d010      	beq.n	800f8fa <pbuf_alloc+0x4e>
 800f8d8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f8dc:	f300 80c1 	bgt.w	800fa62 <pbuf_alloc+0x1b6>
 800f8e0:	2b01      	cmp	r3, #1
 800f8e2:	d002      	beq.n	800f8ea <pbuf_alloc+0x3e>
 800f8e4:	2b41      	cmp	r3, #65	; 0x41
 800f8e6:	f040 80bc 	bne.w	800fa62 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800f8ea:	887a      	ldrh	r2, [r7, #2]
 800f8ec:	88bb      	ldrh	r3, [r7, #4]
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	2000      	movs	r0, #0
 800f8f2:	f000 f8d1 	bl	800fa98 <pbuf_alloc_reference>
 800f8f6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800f8f8:	e0bd      	b.n	800fa76 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800f8fe:	2300      	movs	r3, #0
 800f900:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800f902:	88bb      	ldrh	r3, [r7, #4]
 800f904:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f906:	2008      	movs	r0, #8
 800f908:	f7ff fc56 	bl	800f1b8 <memp_malloc>
 800f90c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d109      	bne.n	800f928 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800f914:	f7ff ff94 	bl	800f840 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800f918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d002      	beq.n	800f924 <pbuf_alloc+0x78>
            pbuf_free(p);
 800f91e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f920:	f000 faa8 	bl	800fe74 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800f924:	2300      	movs	r3, #0
 800f926:	e0a7      	b.n	800fa78 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f928:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f92a:	3303      	adds	r3, #3
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	f023 0303 	bic.w	r3, r3, #3
 800f932:	b29b      	uxth	r3, r3
 800f934:	f5c3 63af 	rsb	r3, r3, #1400	; 0x578
 800f938:	b29b      	uxth	r3, r3
 800f93a:	8b7a      	ldrh	r2, [r7, #26]
 800f93c:	4293      	cmp	r3, r2
 800f93e:	bf28      	it	cs
 800f940:	4613      	movcs	r3, r2
 800f942:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f944:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f946:	3310      	adds	r3, #16
 800f948:	693a      	ldr	r2, [r7, #16]
 800f94a:	4413      	add	r3, r2
 800f94c:	3303      	adds	r3, #3
 800f94e:	f023 0303 	bic.w	r3, r3, #3
 800f952:	4618      	mov	r0, r3
 800f954:	89f9      	ldrh	r1, [r7, #14]
 800f956:	8b7a      	ldrh	r2, [r7, #26]
 800f958:	2300      	movs	r3, #0
 800f95a:	9301      	str	r3, [sp, #4]
 800f95c:	887b      	ldrh	r3, [r7, #2]
 800f95e:	9300      	str	r3, [sp, #0]
 800f960:	460b      	mov	r3, r1
 800f962:	4601      	mov	r1, r0
 800f964:	6938      	ldr	r0, [r7, #16]
 800f966:	f7ff ff77 	bl	800f858 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f96a:	693b      	ldr	r3, [r7, #16]
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	f003 0303 	and.w	r3, r3, #3
 800f972:	2b00      	cmp	r3, #0
 800f974:	d006      	beq.n	800f984 <pbuf_alloc+0xd8>
 800f976:	4b42      	ldr	r3, [pc, #264]	; (800fa80 <pbuf_alloc+0x1d4>)
 800f978:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f97c:	4941      	ldr	r1, [pc, #260]	; (800fa84 <pbuf_alloc+0x1d8>)
 800f97e:	4842      	ldr	r0, [pc, #264]	; (800fa88 <pbuf_alloc+0x1dc>)
 800f980:	f00a fbda 	bl	801a138 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f984:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f986:	3303      	adds	r3, #3
 800f988:	f023 0303 	bic.w	r3, r3, #3
 800f98c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800f990:	d106      	bne.n	800f9a0 <pbuf_alloc+0xf4>
 800f992:	4b3b      	ldr	r3, [pc, #236]	; (800fa80 <pbuf_alloc+0x1d4>)
 800f994:	f44f 7281 	mov.w	r2, #258	; 0x102
 800f998:	493c      	ldr	r1, [pc, #240]	; (800fa8c <pbuf_alloc+0x1e0>)
 800f99a:	483b      	ldr	r0, [pc, #236]	; (800fa88 <pbuf_alloc+0x1dc>)
 800f99c:	f00a fbcc 	bl	801a138 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d102      	bne.n	800f9ac <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	627b      	str	r3, [r7, #36]	; 0x24
 800f9aa:	e002      	b.n	800f9b2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	693a      	ldr	r2, [r7, #16]
 800f9b0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f9b6:	8b7a      	ldrh	r2, [r7, #26]
 800f9b8:	89fb      	ldrh	r3, [r7, #14]
 800f9ba:	1ad3      	subs	r3, r2, r3
 800f9bc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800f9c2:	8b7b      	ldrh	r3, [r7, #26]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d19e      	bne.n	800f906 <pbuf_alloc+0x5a>
      break;
 800f9c8:	e055      	b.n	800fa76 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f9ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f9cc:	3303      	adds	r3, #3
 800f9ce:	b29b      	uxth	r3, r3
 800f9d0:	f023 0303 	bic.w	r3, r3, #3
 800f9d4:	b29a      	uxth	r2, r3
 800f9d6:	88bb      	ldrh	r3, [r7, #4]
 800f9d8:	3303      	adds	r3, #3
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	f023 0303 	bic.w	r3, r3, #3
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	4413      	add	r3, r2
 800f9e4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f9e6:	8b3b      	ldrh	r3, [r7, #24]
 800f9e8:	3310      	adds	r3, #16
 800f9ea:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f9ec:	8b3a      	ldrh	r2, [r7, #24]
 800f9ee:	88bb      	ldrh	r3, [r7, #4]
 800f9f0:	3303      	adds	r3, #3
 800f9f2:	f023 0303 	bic.w	r3, r3, #3
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d306      	bcc.n	800fa08 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f9fa:	8afa      	ldrh	r2, [r7, #22]
 800f9fc:	88bb      	ldrh	r3, [r7, #4]
 800f9fe:	3303      	adds	r3, #3
 800fa00:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d201      	bcs.n	800fa0c <pbuf_alloc+0x160>
        return NULL;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	e035      	b.n	800fa78 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800fa0c:	8afb      	ldrh	r3, [r7, #22]
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7ff fa60 	bl	800eed4 <mem_malloc>
 800fa14:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800fa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d101      	bne.n	800fa20 <pbuf_alloc+0x174>
        return NULL;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	e02b      	b.n	800fa78 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800fa20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fa22:	3310      	adds	r3, #16
 800fa24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa26:	4413      	add	r3, r2
 800fa28:	3303      	adds	r3, #3
 800fa2a:	f023 0303 	bic.w	r3, r3, #3
 800fa2e:	4618      	mov	r0, r3
 800fa30:	88b9      	ldrh	r1, [r7, #4]
 800fa32:	88ba      	ldrh	r2, [r7, #4]
 800fa34:	2300      	movs	r3, #0
 800fa36:	9301      	str	r3, [sp, #4]
 800fa38:	887b      	ldrh	r3, [r7, #2]
 800fa3a:	9300      	str	r3, [sp, #0]
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	4601      	mov	r1, r0
 800fa40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa42:	f7ff ff09 	bl	800f858 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800fa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	f003 0303 	and.w	r3, r3, #3
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d010      	beq.n	800fa74 <pbuf_alloc+0x1c8>
 800fa52:	4b0b      	ldr	r3, [pc, #44]	; (800fa80 <pbuf_alloc+0x1d4>)
 800fa54:	f44f 7291 	mov.w	r2, #290	; 0x122
 800fa58:	490d      	ldr	r1, [pc, #52]	; (800fa90 <pbuf_alloc+0x1e4>)
 800fa5a:	480b      	ldr	r0, [pc, #44]	; (800fa88 <pbuf_alloc+0x1dc>)
 800fa5c:	f00a fb6c 	bl	801a138 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800fa60:	e008      	b.n	800fa74 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800fa62:	4b07      	ldr	r3, [pc, #28]	; (800fa80 <pbuf_alloc+0x1d4>)
 800fa64:	f240 1227 	movw	r2, #295	; 0x127
 800fa68:	490a      	ldr	r1, [pc, #40]	; (800fa94 <pbuf_alloc+0x1e8>)
 800fa6a:	4807      	ldr	r0, [pc, #28]	; (800fa88 <pbuf_alloc+0x1dc>)
 800fa6c:	f00a fb64 	bl	801a138 <iprintf>
      return NULL;
 800fa70:	2300      	movs	r3, #0
 800fa72:	e001      	b.n	800fa78 <pbuf_alloc+0x1cc>
      break;
 800fa74:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800fa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3728      	adds	r7, #40	; 0x28
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}
 800fa80:	0801ced0 	.word	0x0801ced0
 800fa84:	0801cf00 	.word	0x0801cf00
 800fa88:	0801cf30 	.word	0x0801cf30
 800fa8c:	0801cf58 	.word	0x0801cf58
 800fa90:	0801cf8c 	.word	0x0801cf8c
 800fa94:	0801cfb8 	.word	0x0801cfb8

0800fa98 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b086      	sub	sp, #24
 800fa9c:	af02      	add	r7, sp, #8
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	460b      	mov	r3, r1
 800faa2:	807b      	strh	r3, [r7, #2]
 800faa4:	4613      	mov	r3, r2
 800faa6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800faa8:	883b      	ldrh	r3, [r7, #0]
 800faaa:	2b41      	cmp	r3, #65	; 0x41
 800faac:	d009      	beq.n	800fac2 <pbuf_alloc_reference+0x2a>
 800faae:	883b      	ldrh	r3, [r7, #0]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d006      	beq.n	800fac2 <pbuf_alloc_reference+0x2a>
 800fab4:	4b0f      	ldr	r3, [pc, #60]	; (800faf4 <pbuf_alloc_reference+0x5c>)
 800fab6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800faba:	490f      	ldr	r1, [pc, #60]	; (800faf8 <pbuf_alloc_reference+0x60>)
 800fabc:	480f      	ldr	r0, [pc, #60]	; (800fafc <pbuf_alloc_reference+0x64>)
 800fabe:	f00a fb3b 	bl	801a138 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800fac2:	2007      	movs	r0, #7
 800fac4:	f7ff fb78 	bl	800f1b8 <memp_malloc>
 800fac8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2b00      	cmp	r3, #0
 800face:	d101      	bne.n	800fad4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800fad0:	2300      	movs	r3, #0
 800fad2:	e00b      	b.n	800faec <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800fad4:	8879      	ldrh	r1, [r7, #2]
 800fad6:	887a      	ldrh	r2, [r7, #2]
 800fad8:	2300      	movs	r3, #0
 800fada:	9301      	str	r3, [sp, #4]
 800fadc:	883b      	ldrh	r3, [r7, #0]
 800fade:	9300      	str	r3, [sp, #0]
 800fae0:	460b      	mov	r3, r1
 800fae2:	6879      	ldr	r1, [r7, #4]
 800fae4:	68f8      	ldr	r0, [r7, #12]
 800fae6:	f7ff feb7 	bl	800f858 <pbuf_init_alloced_pbuf>
  return p;
 800faea:	68fb      	ldr	r3, [r7, #12]
}
 800faec:	4618      	mov	r0, r3
 800faee:	3710      	adds	r7, #16
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}
 800faf4:	0801ced0 	.word	0x0801ced0
 800faf8:	0801cfd4 	.word	0x0801cfd4
 800fafc:	0801cf30 	.word	0x0801cf30

0800fb00 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b088      	sub	sp, #32
 800fb04:	af02      	add	r7, sp, #8
 800fb06:	607b      	str	r3, [r7, #4]
 800fb08:	4603      	mov	r3, r0
 800fb0a:	73fb      	strb	r3, [r7, #15]
 800fb0c:	460b      	mov	r3, r1
 800fb0e:	81bb      	strh	r3, [r7, #12]
 800fb10:	4613      	mov	r3, r2
 800fb12:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800fb14:	7bfb      	ldrb	r3, [r7, #15]
 800fb16:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800fb18:	8a7b      	ldrh	r3, [r7, #18]
 800fb1a:	3303      	adds	r3, #3
 800fb1c:	f023 0203 	bic.w	r2, r3, #3
 800fb20:	89bb      	ldrh	r3, [r7, #12]
 800fb22:	441a      	add	r2, r3
 800fb24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d901      	bls.n	800fb2e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	e018      	b.n	800fb60 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800fb2e:	6a3b      	ldr	r3, [r7, #32]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d007      	beq.n	800fb44 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800fb34:	8a7b      	ldrh	r3, [r7, #18]
 800fb36:	3303      	adds	r3, #3
 800fb38:	f023 0303 	bic.w	r3, r3, #3
 800fb3c:	6a3a      	ldr	r2, [r7, #32]
 800fb3e:	4413      	add	r3, r2
 800fb40:	617b      	str	r3, [r7, #20]
 800fb42:	e001      	b.n	800fb48 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800fb44:	2300      	movs	r3, #0
 800fb46:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	89b9      	ldrh	r1, [r7, #12]
 800fb4c:	89ba      	ldrh	r2, [r7, #12]
 800fb4e:	2302      	movs	r3, #2
 800fb50:	9301      	str	r3, [sp, #4]
 800fb52:	897b      	ldrh	r3, [r7, #10]
 800fb54:	9300      	str	r3, [sp, #0]
 800fb56:	460b      	mov	r3, r1
 800fb58:	6979      	ldr	r1, [r7, #20]
 800fb5a:	f7ff fe7d 	bl	800f858 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800fb5e:	687b      	ldr	r3, [r7, #4]
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3718      	adds	r7, #24
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	460b      	mov	r3, r1
 800fb72:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d106      	bne.n	800fb88 <pbuf_realloc+0x20>
 800fb7a:	4b3a      	ldr	r3, [pc, #232]	; (800fc64 <pbuf_realloc+0xfc>)
 800fb7c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800fb80:	4939      	ldr	r1, [pc, #228]	; (800fc68 <pbuf_realloc+0x100>)
 800fb82:	483a      	ldr	r0, [pc, #232]	; (800fc6c <pbuf_realloc+0x104>)
 800fb84:	f00a fad8 	bl	801a138 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	891b      	ldrh	r3, [r3, #8]
 800fb8c:	887a      	ldrh	r2, [r7, #2]
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d263      	bcs.n	800fc5a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	891a      	ldrh	r2, [r3, #8]
 800fb96:	887b      	ldrh	r3, [r7, #2]
 800fb98:	1ad3      	subs	r3, r2, r3
 800fb9a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800fb9c:	887b      	ldrh	r3, [r7, #2]
 800fb9e:	817b      	strh	r3, [r7, #10]
  q = p;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800fba4:	e018      	b.n	800fbd8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	895b      	ldrh	r3, [r3, #10]
 800fbaa:	897a      	ldrh	r2, [r7, #10]
 800fbac:	1ad3      	subs	r3, r2, r3
 800fbae:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	891a      	ldrh	r2, [r3, #8]
 800fbb4:	893b      	ldrh	r3, [r7, #8]
 800fbb6:	1ad3      	subs	r3, r2, r3
 800fbb8:	b29a      	uxth	r2, r3
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d106      	bne.n	800fbd8 <pbuf_realloc+0x70>
 800fbca:	4b26      	ldr	r3, [pc, #152]	; (800fc64 <pbuf_realloc+0xfc>)
 800fbcc:	f240 12af 	movw	r2, #431	; 0x1af
 800fbd0:	4927      	ldr	r1, [pc, #156]	; (800fc70 <pbuf_realloc+0x108>)
 800fbd2:	4826      	ldr	r0, [pc, #152]	; (800fc6c <pbuf_realloc+0x104>)
 800fbd4:	f00a fab0 	bl	801a138 <iprintf>
  while (rem_len > q->len) {
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	895b      	ldrh	r3, [r3, #10]
 800fbdc:	897a      	ldrh	r2, [r7, #10]
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	d8e1      	bhi.n	800fba6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	7b1b      	ldrb	r3, [r3, #12]
 800fbe6:	f003 030f 	and.w	r3, r3, #15
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d121      	bne.n	800fc32 <pbuf_realloc+0xca>
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	895b      	ldrh	r3, [r3, #10]
 800fbf2:	897a      	ldrh	r2, [r7, #10]
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d01c      	beq.n	800fc32 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	7b5b      	ldrb	r3, [r3, #13]
 800fbfc:	f003 0302 	and.w	r3, r3, #2
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d116      	bne.n	800fc32 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	685a      	ldr	r2, [r3, #4]
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	1ad3      	subs	r3, r2, r3
 800fc0c:	b29a      	uxth	r2, r3
 800fc0e:	897b      	ldrh	r3, [r7, #10]
 800fc10:	4413      	add	r3, r2
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	4619      	mov	r1, r3
 800fc16:	68f8      	ldr	r0, [r7, #12]
 800fc18:	f7ff f85a 	bl	800ecd0 <mem_trim>
 800fc1c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d106      	bne.n	800fc32 <pbuf_realloc+0xca>
 800fc24:	4b0f      	ldr	r3, [pc, #60]	; (800fc64 <pbuf_realloc+0xfc>)
 800fc26:	f240 12bd 	movw	r2, #445	; 0x1bd
 800fc2a:	4912      	ldr	r1, [pc, #72]	; (800fc74 <pbuf_realloc+0x10c>)
 800fc2c:	480f      	ldr	r0, [pc, #60]	; (800fc6c <pbuf_realloc+0x104>)
 800fc2e:	f00a fa83 	bl	801a138 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	897a      	ldrh	r2, [r7, #10]
 800fc36:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	895a      	ldrh	r2, [r3, #10]
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d004      	beq.n	800fc52 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f000 f911 	bl	800fe74 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2200      	movs	r2, #0
 800fc56:	601a      	str	r2, [r3, #0]
 800fc58:	e000      	b.n	800fc5c <pbuf_realloc+0xf4>
    return;
 800fc5a:	bf00      	nop

}
 800fc5c:	3710      	adds	r7, #16
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	0801ced0 	.word	0x0801ced0
 800fc68:	0801cfe8 	.word	0x0801cfe8
 800fc6c:	0801cf30 	.word	0x0801cf30
 800fc70:	0801d000 	.word	0x0801d000
 800fc74:	0801d018 	.word	0x0801d018

0800fc78 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b086      	sub	sp, #24
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	60f8      	str	r0, [r7, #12]
 800fc80:	60b9      	str	r1, [r7, #8]
 800fc82:	4613      	mov	r3, r2
 800fc84:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d106      	bne.n	800fc9a <pbuf_add_header_impl+0x22>
 800fc8c:	4b2b      	ldr	r3, [pc, #172]	; (800fd3c <pbuf_add_header_impl+0xc4>)
 800fc8e:	f240 12df 	movw	r2, #479	; 0x1df
 800fc92:	492b      	ldr	r1, [pc, #172]	; (800fd40 <pbuf_add_header_impl+0xc8>)
 800fc94:	482b      	ldr	r0, [pc, #172]	; (800fd44 <pbuf_add_header_impl+0xcc>)
 800fc96:	f00a fa4f 	bl	801a138 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d003      	beq.n	800fca8 <pbuf_add_header_impl+0x30>
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fca6:	d301      	bcc.n	800fcac <pbuf_add_header_impl+0x34>
    return 1;
 800fca8:	2301      	movs	r3, #1
 800fcaa:	e043      	b.n	800fd34 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d101      	bne.n	800fcb6 <pbuf_add_header_impl+0x3e>
    return 0;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	e03e      	b.n	800fd34 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	891a      	ldrh	r2, [r3, #8]
 800fcbe:	8a7b      	ldrh	r3, [r7, #18]
 800fcc0:	4413      	add	r3, r2
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	8a7a      	ldrh	r2, [r7, #18]
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d901      	bls.n	800fcce <pbuf_add_header_impl+0x56>
    return 1;
 800fcca:	2301      	movs	r3, #1
 800fccc:	e032      	b.n	800fd34 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	7b1b      	ldrb	r3, [r3, #12]
 800fcd2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800fcd4:	8a3b      	ldrh	r3, [r7, #16]
 800fcd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d00c      	beq.n	800fcf8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	685a      	ldr	r2, [r3, #4]
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	425b      	negs	r3, r3
 800fce6:	4413      	add	r3, r2
 800fce8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	3310      	adds	r3, #16
 800fcee:	697a      	ldr	r2, [r7, #20]
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d20d      	bcs.n	800fd10 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	e01d      	b.n	800fd34 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800fcf8:	79fb      	ldrb	r3, [r7, #7]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d006      	beq.n	800fd0c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	685a      	ldr	r2, [r3, #4]
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	425b      	negs	r3, r3
 800fd06:	4413      	add	r3, r2
 800fd08:	617b      	str	r3, [r7, #20]
 800fd0a:	e001      	b.n	800fd10 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	e011      	b.n	800fd34 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	697a      	ldr	r2, [r7, #20]
 800fd14:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	895a      	ldrh	r2, [r3, #10]
 800fd1a:	8a7b      	ldrh	r3, [r7, #18]
 800fd1c:	4413      	add	r3, r2
 800fd1e:	b29a      	uxth	r2, r3
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	891a      	ldrh	r2, [r3, #8]
 800fd28:	8a7b      	ldrh	r3, [r7, #18]
 800fd2a:	4413      	add	r3, r2
 800fd2c:	b29a      	uxth	r2, r3
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	811a      	strh	r2, [r3, #8]


  return 0;
 800fd32:	2300      	movs	r3, #0
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3718      	adds	r7, #24
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}
 800fd3c:	0801ced0 	.word	0x0801ced0
 800fd40:	0801d034 	.word	0x0801d034
 800fd44:	0801cf30 	.word	0x0801cf30

0800fd48 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b082      	sub	sp, #8
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800fd52:	2200      	movs	r2, #0
 800fd54:	6839      	ldr	r1, [r7, #0]
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f7ff ff8e 	bl	800fc78 <pbuf_add_header_impl>
 800fd5c:	4603      	mov	r3, r0
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3708      	adds	r7, #8
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}
	...

0800fd68 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b084      	sub	sp, #16
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
 800fd70:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d106      	bne.n	800fd86 <pbuf_remove_header+0x1e>
 800fd78:	4b20      	ldr	r3, [pc, #128]	; (800fdfc <pbuf_remove_header+0x94>)
 800fd7a:	f240 224b 	movw	r2, #587	; 0x24b
 800fd7e:	4920      	ldr	r1, [pc, #128]	; (800fe00 <pbuf_remove_header+0x98>)
 800fd80:	4820      	ldr	r0, [pc, #128]	; (800fe04 <pbuf_remove_header+0x9c>)
 800fd82:	f00a f9d9 	bl	801a138 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d003      	beq.n	800fd94 <pbuf_remove_header+0x2c>
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd92:	d301      	bcc.n	800fd98 <pbuf_remove_header+0x30>
    return 1;
 800fd94:	2301      	movs	r3, #1
 800fd96:	e02c      	b.n	800fdf2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d101      	bne.n	800fda2 <pbuf_remove_header+0x3a>
    return 0;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	e027      	b.n	800fdf2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	895b      	ldrh	r3, [r3, #10]
 800fdaa:	89fa      	ldrh	r2, [r7, #14]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d908      	bls.n	800fdc2 <pbuf_remove_header+0x5a>
 800fdb0:	4b12      	ldr	r3, [pc, #72]	; (800fdfc <pbuf_remove_header+0x94>)
 800fdb2:	f240 2255 	movw	r2, #597	; 0x255
 800fdb6:	4914      	ldr	r1, [pc, #80]	; (800fe08 <pbuf_remove_header+0xa0>)
 800fdb8:	4812      	ldr	r0, [pc, #72]	; (800fe04 <pbuf_remove_header+0x9c>)
 800fdba:	f00a f9bd 	bl	801a138 <iprintf>
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	e017      	b.n	800fdf2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	685a      	ldr	r2, [r3, #4]
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	441a      	add	r2, r3
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	895a      	ldrh	r2, [r3, #10]
 800fdd8:	89fb      	ldrh	r3, [r7, #14]
 800fdda:	1ad3      	subs	r3, r2, r3
 800fddc:	b29a      	uxth	r2, r3
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	891a      	ldrh	r2, [r3, #8]
 800fde6:	89fb      	ldrh	r3, [r7, #14]
 800fde8:	1ad3      	subs	r3, r2, r3
 800fdea:	b29a      	uxth	r2, r3
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800fdf0:	2300      	movs	r3, #0
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3710      	adds	r7, #16
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
 800fdfa:	bf00      	nop
 800fdfc:	0801ced0 	.word	0x0801ced0
 800fe00:	0801d034 	.word	0x0801d034
 800fe04:	0801cf30 	.word	0x0801cf30
 800fe08:	0801d040 	.word	0x0801d040

0800fe0c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	460b      	mov	r3, r1
 800fe16:	807b      	strh	r3, [r7, #2]
 800fe18:	4613      	mov	r3, r2
 800fe1a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800fe1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	da08      	bge.n	800fe36 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800fe24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fe28:	425b      	negs	r3, r3
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7ff ff9b 	bl	800fd68 <pbuf_remove_header>
 800fe32:	4603      	mov	r3, r0
 800fe34:	e007      	b.n	800fe46 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800fe36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fe3a:	787a      	ldrb	r2, [r7, #1]
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f7ff ff1a 	bl	800fc78 <pbuf_add_header_impl>
 800fe44:	4603      	mov	r3, r0
  }
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3708      	adds	r7, #8
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}

0800fe4e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800fe4e:	b580      	push	{r7, lr}
 800fe50:	b082      	sub	sp, #8
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
 800fe56:	460b      	mov	r3, r1
 800fe58:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800fe5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fe5e:	2201      	movs	r2, #1
 800fe60:	4619      	mov	r1, r3
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f7ff ffd2 	bl	800fe0c <pbuf_header_impl>
 800fe68:	4603      	mov	r3, r0
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3708      	adds	r7, #8
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
	...

0800fe74 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b086      	sub	sp, #24
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d10b      	bne.n	800fe9a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d106      	bne.n	800fe96 <pbuf_free+0x22>
 800fe88:	4b38      	ldr	r3, [pc, #224]	; (800ff6c <pbuf_free+0xf8>)
 800fe8a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800fe8e:	4938      	ldr	r1, [pc, #224]	; (800ff70 <pbuf_free+0xfc>)
 800fe90:	4838      	ldr	r0, [pc, #224]	; (800ff74 <pbuf_free+0x100>)
 800fe92:	f00a f951 	bl	801a138 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800fe96:	2300      	movs	r3, #0
 800fe98:	e063      	b.n	800ff62 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800fe9e:	e05c      	b.n	800ff5a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	7b9b      	ldrb	r3, [r3, #14]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d106      	bne.n	800feb6 <pbuf_free+0x42>
 800fea8:	4b30      	ldr	r3, [pc, #192]	; (800ff6c <pbuf_free+0xf8>)
 800feaa:	f240 22f1 	movw	r2, #753	; 0x2f1
 800feae:	4932      	ldr	r1, [pc, #200]	; (800ff78 <pbuf_free+0x104>)
 800feb0:	4830      	ldr	r0, [pc, #192]	; (800ff74 <pbuf_free+0x100>)
 800feb2:	f00a f941 	bl	801a138 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	7b9b      	ldrb	r3, [r3, #14]
 800feba:	3b01      	subs	r3, #1
 800febc:	b2da      	uxtb	r2, r3
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	739a      	strb	r2, [r3, #14]
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	7b9b      	ldrb	r3, [r3, #14]
 800fec6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800fec8:	7dbb      	ldrb	r3, [r7, #22]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d143      	bne.n	800ff56 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	7b1b      	ldrb	r3, [r3, #12]
 800fed8:	f003 030f 	and.w	r3, r3, #15
 800fedc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	7b5b      	ldrb	r3, [r3, #13]
 800fee2:	f003 0302 	and.w	r3, r3, #2
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d011      	beq.n	800ff0e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	691b      	ldr	r3, [r3, #16]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d106      	bne.n	800ff04 <pbuf_free+0x90>
 800fef6:	4b1d      	ldr	r3, [pc, #116]	; (800ff6c <pbuf_free+0xf8>)
 800fef8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800fefc:	491f      	ldr	r1, [pc, #124]	; (800ff7c <pbuf_free+0x108>)
 800fefe:	481d      	ldr	r0, [pc, #116]	; (800ff74 <pbuf_free+0x100>)
 800ff00:	f00a f91a 	bl	801a138 <iprintf>
        pc->custom_free_function(p);
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	691b      	ldr	r3, [r3, #16]
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	4798      	blx	r3
 800ff0c:	e01d      	b.n	800ff4a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ff0e:	7bfb      	ldrb	r3, [r7, #15]
 800ff10:	2b02      	cmp	r3, #2
 800ff12:	d104      	bne.n	800ff1e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800ff14:	6879      	ldr	r1, [r7, #4]
 800ff16:	2008      	movs	r0, #8
 800ff18:	f7ff f99a 	bl	800f250 <memp_free>
 800ff1c:	e015      	b.n	800ff4a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ff1e:	7bfb      	ldrb	r3, [r7, #15]
 800ff20:	2b01      	cmp	r3, #1
 800ff22:	d104      	bne.n	800ff2e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800ff24:	6879      	ldr	r1, [r7, #4]
 800ff26:	2007      	movs	r0, #7
 800ff28:	f7ff f992 	bl	800f250 <memp_free>
 800ff2c:	e00d      	b.n	800ff4a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ff2e:	7bfb      	ldrb	r3, [r7, #15]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d103      	bne.n	800ff3c <pbuf_free+0xc8>
          mem_free(p);
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f7fe fe61 	bl	800ebfc <mem_free>
 800ff3a:	e006      	b.n	800ff4a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ff3c:	4b0b      	ldr	r3, [pc, #44]	; (800ff6c <pbuf_free+0xf8>)
 800ff3e:	f240 320f 	movw	r2, #783	; 0x30f
 800ff42:	490f      	ldr	r1, [pc, #60]	; (800ff80 <pbuf_free+0x10c>)
 800ff44:	480b      	ldr	r0, [pc, #44]	; (800ff74 <pbuf_free+0x100>)
 800ff46:	f00a f8f7 	bl	801a138 <iprintf>
        }
      }
      count++;
 800ff4a:	7dfb      	ldrb	r3, [r7, #23]
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	607b      	str	r3, [r7, #4]
 800ff54:	e001      	b.n	800ff5a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ff56:	2300      	movs	r3, #0
 800ff58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d19f      	bne.n	800fea0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ff60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3718      	adds	r7, #24
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
 800ff6a:	bf00      	nop
 800ff6c:	0801ced0 	.word	0x0801ced0
 800ff70:	0801d034 	.word	0x0801d034
 800ff74:	0801cf30 	.word	0x0801cf30
 800ff78:	0801d060 	.word	0x0801d060
 800ff7c:	0801d078 	.word	0x0801d078
 800ff80:	0801d09c 	.word	0x0801d09c

0800ff84 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ff84:	b480      	push	{r7}
 800ff86:	b085      	sub	sp, #20
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ff90:	e005      	b.n	800ff9e <pbuf_clen+0x1a>
    ++len;
 800ff92:	89fb      	ldrh	r3, [r7, #14]
 800ff94:	3301      	adds	r3, #1
 800ff96:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d1f6      	bne.n	800ff92 <pbuf_clen+0xe>
  }
  return len;
 800ffa4:	89fb      	ldrh	r3, [r7, #14]
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3714      	adds	r7, #20
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr
	...

0800ffb4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d010      	beq.n	800ffe4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	7b9b      	ldrb	r3, [r3, #14]
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	b2da      	uxtb	r2, r3
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	7b9b      	ldrb	r3, [r3, #14]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d106      	bne.n	800ffe4 <pbuf_ref+0x30>
 800ffd6:	4b05      	ldr	r3, [pc, #20]	; (800ffec <pbuf_ref+0x38>)
 800ffd8:	f240 3242 	movw	r2, #834	; 0x342
 800ffdc:	4904      	ldr	r1, [pc, #16]	; (800fff0 <pbuf_ref+0x3c>)
 800ffde:	4805      	ldr	r0, [pc, #20]	; (800fff4 <pbuf_ref+0x40>)
 800ffe0:	f00a f8aa 	bl	801a138 <iprintf>
  }
}
 800ffe4:	bf00      	nop
 800ffe6:	3708      	adds	r7, #8
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}
 800ffec:	0801ced0 	.word	0x0801ced0
 800fff0:	0801d0b0 	.word	0x0801d0b0
 800fff4:	0801cf30 	.word	0x0801cf30

0800fff8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b084      	sub	sp, #16
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d002      	beq.n	801000e <pbuf_cat+0x16>
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d107      	bne.n	801001e <pbuf_cat+0x26>
 801000e:	4b20      	ldr	r3, [pc, #128]	; (8010090 <pbuf_cat+0x98>)
 8010010:	f240 3259 	movw	r2, #857	; 0x359
 8010014:	491f      	ldr	r1, [pc, #124]	; (8010094 <pbuf_cat+0x9c>)
 8010016:	4820      	ldr	r0, [pc, #128]	; (8010098 <pbuf_cat+0xa0>)
 8010018:	f00a f88e 	bl	801a138 <iprintf>
 801001c:	e034      	b.n	8010088 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	60fb      	str	r3, [r7, #12]
 8010022:	e00a      	b.n	801003a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	891a      	ldrh	r2, [r3, #8]
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	891b      	ldrh	r3, [r3, #8]
 801002c:	4413      	add	r3, r2
 801002e:	b29a      	uxth	r2, r3
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	60fb      	str	r3, [r7, #12]
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d1f0      	bne.n	8010024 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	891a      	ldrh	r2, [r3, #8]
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	895b      	ldrh	r3, [r3, #10]
 801004a:	429a      	cmp	r2, r3
 801004c:	d006      	beq.n	801005c <pbuf_cat+0x64>
 801004e:	4b10      	ldr	r3, [pc, #64]	; (8010090 <pbuf_cat+0x98>)
 8010050:	f240 3262 	movw	r2, #866	; 0x362
 8010054:	4911      	ldr	r1, [pc, #68]	; (801009c <pbuf_cat+0xa4>)
 8010056:	4810      	ldr	r0, [pc, #64]	; (8010098 <pbuf_cat+0xa0>)
 8010058:	f00a f86e 	bl	801a138 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d006      	beq.n	8010072 <pbuf_cat+0x7a>
 8010064:	4b0a      	ldr	r3, [pc, #40]	; (8010090 <pbuf_cat+0x98>)
 8010066:	f240 3263 	movw	r2, #867	; 0x363
 801006a:	490d      	ldr	r1, [pc, #52]	; (80100a0 <pbuf_cat+0xa8>)
 801006c:	480a      	ldr	r0, [pc, #40]	; (8010098 <pbuf_cat+0xa0>)
 801006e:	f00a f863 	bl	801a138 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	891a      	ldrh	r2, [r3, #8]
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	891b      	ldrh	r3, [r3, #8]
 801007a:	4413      	add	r3, r2
 801007c:	b29a      	uxth	r2, r3
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	683a      	ldr	r2, [r7, #0]
 8010086:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010088:	3710      	adds	r7, #16
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}
 801008e:	bf00      	nop
 8010090:	0801ced0 	.word	0x0801ced0
 8010094:	0801d0c4 	.word	0x0801d0c4
 8010098:	0801cf30 	.word	0x0801cf30
 801009c:	0801d0fc 	.word	0x0801d0fc
 80100a0:	0801d12c 	.word	0x0801d12c

080100a4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b086      	sub	sp, #24
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80100ae:	2300      	movs	r3, #0
 80100b0:	617b      	str	r3, [r7, #20]
 80100b2:	2300      	movs	r3, #0
 80100b4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d008      	beq.n	80100ce <pbuf_copy+0x2a>
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d005      	beq.n	80100ce <pbuf_copy+0x2a>
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	891a      	ldrh	r2, [r3, #8]
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	891b      	ldrh	r3, [r3, #8]
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d209      	bcs.n	80100e2 <pbuf_copy+0x3e>
 80100ce:	4b57      	ldr	r3, [pc, #348]	; (801022c <pbuf_copy+0x188>)
 80100d0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80100d4:	4956      	ldr	r1, [pc, #344]	; (8010230 <pbuf_copy+0x18c>)
 80100d6:	4857      	ldr	r0, [pc, #348]	; (8010234 <pbuf_copy+0x190>)
 80100d8:	f00a f82e 	bl	801a138 <iprintf>
 80100dc:	f06f 030f 	mvn.w	r3, #15
 80100e0:	e09f      	b.n	8010222 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	895b      	ldrh	r3, [r3, #10]
 80100e6:	461a      	mov	r2, r3
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	1ad2      	subs	r2, r2, r3
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	895b      	ldrh	r3, [r3, #10]
 80100f0:	4619      	mov	r1, r3
 80100f2:	693b      	ldr	r3, [r7, #16]
 80100f4:	1acb      	subs	r3, r1, r3
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d306      	bcc.n	8010108 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	895b      	ldrh	r3, [r3, #10]
 80100fe:	461a      	mov	r2, r3
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	1ad3      	subs	r3, r2, r3
 8010104:	60fb      	str	r3, [r7, #12]
 8010106:	e005      	b.n	8010114 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	895b      	ldrh	r3, [r3, #10]
 801010c:	461a      	mov	r2, r3
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	1ad3      	subs	r3, r2, r3
 8010112:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	685a      	ldr	r2, [r3, #4]
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	18d0      	adds	r0, r2, r3
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	685a      	ldr	r2, [r3, #4]
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	4413      	add	r3, r2
 8010124:	68fa      	ldr	r2, [r7, #12]
 8010126:	4619      	mov	r1, r3
 8010128:	f009 fadc 	bl	80196e4 <memcpy>
    offset_to += len;
 801012c:	697a      	ldr	r2, [r7, #20]
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	4413      	add	r3, r2
 8010132:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010134:	693a      	ldr	r2, [r7, #16]
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	4413      	add	r3, r2
 801013a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	895b      	ldrh	r3, [r3, #10]
 8010140:	461a      	mov	r2, r3
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	4293      	cmp	r3, r2
 8010146:	d906      	bls.n	8010156 <pbuf_copy+0xb2>
 8010148:	4b38      	ldr	r3, [pc, #224]	; (801022c <pbuf_copy+0x188>)
 801014a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801014e:	493a      	ldr	r1, [pc, #232]	; (8010238 <pbuf_copy+0x194>)
 8010150:	4838      	ldr	r0, [pc, #224]	; (8010234 <pbuf_copy+0x190>)
 8010152:	f009 fff1 	bl	801a138 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	895b      	ldrh	r3, [r3, #10]
 801015a:	461a      	mov	r2, r3
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	4293      	cmp	r3, r2
 8010160:	d906      	bls.n	8010170 <pbuf_copy+0xcc>
 8010162:	4b32      	ldr	r3, [pc, #200]	; (801022c <pbuf_copy+0x188>)
 8010164:	f240 32da 	movw	r2, #986	; 0x3da
 8010168:	4934      	ldr	r1, [pc, #208]	; (801023c <pbuf_copy+0x198>)
 801016a:	4832      	ldr	r0, [pc, #200]	; (8010234 <pbuf_copy+0x190>)
 801016c:	f009 ffe4 	bl	801a138 <iprintf>
    if (offset_from >= p_from->len) {
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	895b      	ldrh	r3, [r3, #10]
 8010174:	461a      	mov	r2, r3
 8010176:	693b      	ldr	r3, [r7, #16]
 8010178:	4293      	cmp	r3, r2
 801017a:	d304      	bcc.n	8010186 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801017c:	2300      	movs	r3, #0
 801017e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	895b      	ldrh	r3, [r3, #10]
 801018a:	461a      	mov	r2, r3
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	4293      	cmp	r3, r2
 8010190:	d114      	bne.n	80101bc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010192:	2300      	movs	r3, #0
 8010194:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d10c      	bne.n	80101bc <pbuf_copy+0x118>
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d009      	beq.n	80101bc <pbuf_copy+0x118>
 80101a8:	4b20      	ldr	r3, [pc, #128]	; (801022c <pbuf_copy+0x188>)
 80101aa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80101ae:	4924      	ldr	r1, [pc, #144]	; (8010240 <pbuf_copy+0x19c>)
 80101b0:	4820      	ldr	r0, [pc, #128]	; (8010234 <pbuf_copy+0x190>)
 80101b2:	f009 ffc1 	bl	801a138 <iprintf>
 80101b6:	f06f 030f 	mvn.w	r3, #15
 80101ba:	e032      	b.n	8010222 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d013      	beq.n	80101ea <pbuf_copy+0x146>
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	895a      	ldrh	r2, [r3, #10]
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	891b      	ldrh	r3, [r3, #8]
 80101ca:	429a      	cmp	r2, r3
 80101cc:	d10d      	bne.n	80101ea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d009      	beq.n	80101ea <pbuf_copy+0x146>
 80101d6:	4b15      	ldr	r3, [pc, #84]	; (801022c <pbuf_copy+0x188>)
 80101d8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80101dc:	4919      	ldr	r1, [pc, #100]	; (8010244 <pbuf_copy+0x1a0>)
 80101de:	4815      	ldr	r0, [pc, #84]	; (8010234 <pbuf_copy+0x190>)
 80101e0:	f009 ffaa 	bl	801a138 <iprintf>
 80101e4:	f06f 0305 	mvn.w	r3, #5
 80101e8:	e01b      	b.n	8010222 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d013      	beq.n	8010218 <pbuf_copy+0x174>
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	895a      	ldrh	r2, [r3, #10]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	891b      	ldrh	r3, [r3, #8]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d10d      	bne.n	8010218 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d009      	beq.n	8010218 <pbuf_copy+0x174>
 8010204:	4b09      	ldr	r3, [pc, #36]	; (801022c <pbuf_copy+0x188>)
 8010206:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801020a:	490e      	ldr	r1, [pc, #56]	; (8010244 <pbuf_copy+0x1a0>)
 801020c:	4809      	ldr	r0, [pc, #36]	; (8010234 <pbuf_copy+0x190>)
 801020e:	f009 ff93 	bl	801a138 <iprintf>
 8010212:	f06f 0305 	mvn.w	r3, #5
 8010216:	e004      	b.n	8010222 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	f47f af61 	bne.w	80100e2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010220:	2300      	movs	r3, #0
}
 8010222:	4618      	mov	r0, r3
 8010224:	3718      	adds	r7, #24
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}
 801022a:	bf00      	nop
 801022c:	0801ced0 	.word	0x0801ced0
 8010230:	0801d178 	.word	0x0801d178
 8010234:	0801cf30 	.word	0x0801cf30
 8010238:	0801d1a8 	.word	0x0801d1a8
 801023c:	0801d1c0 	.word	0x0801d1c0
 8010240:	0801d1dc 	.word	0x0801d1dc
 8010244:	0801d1ec 	.word	0x0801d1ec

08010248 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b088      	sub	sp, #32
 801024c:	af00      	add	r7, sp, #0
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	60b9      	str	r1, [r7, #8]
 8010252:	4611      	mov	r1, r2
 8010254:	461a      	mov	r2, r3
 8010256:	460b      	mov	r3, r1
 8010258:	80fb      	strh	r3, [r7, #6]
 801025a:	4613      	mov	r3, r2
 801025c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801025e:	2300      	movs	r3, #0
 8010260:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010262:	2300      	movs	r3, #0
 8010264:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d108      	bne.n	801027e <pbuf_copy_partial+0x36>
 801026c:	4b2b      	ldr	r3, [pc, #172]	; (801031c <pbuf_copy_partial+0xd4>)
 801026e:	f240 420a 	movw	r2, #1034	; 0x40a
 8010272:	492b      	ldr	r1, [pc, #172]	; (8010320 <pbuf_copy_partial+0xd8>)
 8010274:	482b      	ldr	r0, [pc, #172]	; (8010324 <pbuf_copy_partial+0xdc>)
 8010276:	f009 ff5f 	bl	801a138 <iprintf>
 801027a:	2300      	movs	r3, #0
 801027c:	e04a      	b.n	8010314 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d108      	bne.n	8010296 <pbuf_copy_partial+0x4e>
 8010284:	4b25      	ldr	r3, [pc, #148]	; (801031c <pbuf_copy_partial+0xd4>)
 8010286:	f240 420b 	movw	r2, #1035	; 0x40b
 801028a:	4927      	ldr	r1, [pc, #156]	; (8010328 <pbuf_copy_partial+0xe0>)
 801028c:	4825      	ldr	r0, [pc, #148]	; (8010324 <pbuf_copy_partial+0xdc>)
 801028e:	f009 ff53 	bl	801a138 <iprintf>
 8010292:	2300      	movs	r3, #0
 8010294:	e03e      	b.n	8010314 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	61fb      	str	r3, [r7, #28]
 801029a:	e034      	b.n	8010306 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801029c:	88bb      	ldrh	r3, [r7, #4]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d00a      	beq.n	80102b8 <pbuf_copy_partial+0x70>
 80102a2:	69fb      	ldr	r3, [r7, #28]
 80102a4:	895b      	ldrh	r3, [r3, #10]
 80102a6:	88ba      	ldrh	r2, [r7, #4]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d305      	bcc.n	80102b8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80102ac:	69fb      	ldr	r3, [r7, #28]
 80102ae:	895b      	ldrh	r3, [r3, #10]
 80102b0:	88ba      	ldrh	r2, [r7, #4]
 80102b2:	1ad3      	subs	r3, r2, r3
 80102b4:	80bb      	strh	r3, [r7, #4]
 80102b6:	e023      	b.n	8010300 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80102b8:	69fb      	ldr	r3, [r7, #28]
 80102ba:	895a      	ldrh	r2, [r3, #10]
 80102bc:	88bb      	ldrh	r3, [r7, #4]
 80102be:	1ad3      	subs	r3, r2, r3
 80102c0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80102c2:	8b3a      	ldrh	r2, [r7, #24]
 80102c4:	88fb      	ldrh	r3, [r7, #6]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d901      	bls.n	80102ce <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80102ca:	88fb      	ldrh	r3, [r7, #6]
 80102cc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80102ce:	8b7b      	ldrh	r3, [r7, #26]
 80102d0:	68ba      	ldr	r2, [r7, #8]
 80102d2:	18d0      	adds	r0, r2, r3
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	685a      	ldr	r2, [r3, #4]
 80102d8:	88bb      	ldrh	r3, [r7, #4]
 80102da:	4413      	add	r3, r2
 80102dc:	8b3a      	ldrh	r2, [r7, #24]
 80102de:	4619      	mov	r1, r3
 80102e0:	f009 fa00 	bl	80196e4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80102e4:	8afa      	ldrh	r2, [r7, #22]
 80102e6:	8b3b      	ldrh	r3, [r7, #24]
 80102e8:	4413      	add	r3, r2
 80102ea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80102ec:	8b7a      	ldrh	r2, [r7, #26]
 80102ee:	8b3b      	ldrh	r3, [r7, #24]
 80102f0:	4413      	add	r3, r2
 80102f2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80102f4:	88fa      	ldrh	r2, [r7, #6]
 80102f6:	8b3b      	ldrh	r3, [r7, #24]
 80102f8:	1ad3      	subs	r3, r2, r3
 80102fa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80102fc:	2300      	movs	r3, #0
 80102fe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	61fb      	str	r3, [r7, #28]
 8010306:	88fb      	ldrh	r3, [r7, #6]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d002      	beq.n	8010312 <pbuf_copy_partial+0xca>
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d1c4      	bne.n	801029c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010312:	8afb      	ldrh	r3, [r7, #22]
}
 8010314:	4618      	mov	r0, r3
 8010316:	3720      	adds	r7, #32
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}
 801031c:	0801ced0 	.word	0x0801ced0
 8010320:	0801d218 	.word	0x0801d218
 8010324:	0801cf30 	.word	0x0801cf30
 8010328:	0801d238 	.word	0x0801d238

0801032c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b088      	sub	sp, #32
 8010330:	af00      	add	r7, sp, #0
 8010332:	60f8      	str	r0, [r7, #12]
 8010334:	60b9      	str	r1, [r7, #8]
 8010336:	4613      	mov	r3, r2
 8010338:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801033a:	88fb      	ldrh	r3, [r7, #6]
 801033c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 801033e:	2300      	movs	r3, #0
 8010340:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d109      	bne.n	801035c <pbuf_take+0x30>
 8010348:	4b3a      	ldr	r3, [pc, #232]	; (8010434 <pbuf_take+0x108>)
 801034a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801034e:	493a      	ldr	r1, [pc, #232]	; (8010438 <pbuf_take+0x10c>)
 8010350:	483a      	ldr	r0, [pc, #232]	; (801043c <pbuf_take+0x110>)
 8010352:	f009 fef1 	bl	801a138 <iprintf>
 8010356:	f06f 030f 	mvn.w	r3, #15
 801035a:	e067      	b.n	801042c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d109      	bne.n	8010376 <pbuf_take+0x4a>
 8010362:	4b34      	ldr	r3, [pc, #208]	; (8010434 <pbuf_take+0x108>)
 8010364:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8010368:	4935      	ldr	r1, [pc, #212]	; (8010440 <pbuf_take+0x114>)
 801036a:	4834      	ldr	r0, [pc, #208]	; (801043c <pbuf_take+0x110>)
 801036c:	f009 fee4 	bl	801a138 <iprintf>
 8010370:	f06f 030f 	mvn.w	r3, #15
 8010374:	e05a      	b.n	801042c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	891b      	ldrh	r3, [r3, #8]
 801037a:	88fa      	ldrh	r2, [r7, #6]
 801037c:	429a      	cmp	r2, r3
 801037e:	d909      	bls.n	8010394 <pbuf_take+0x68>
 8010380:	4b2c      	ldr	r3, [pc, #176]	; (8010434 <pbuf_take+0x108>)
 8010382:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8010386:	492f      	ldr	r1, [pc, #188]	; (8010444 <pbuf_take+0x118>)
 8010388:	482c      	ldr	r0, [pc, #176]	; (801043c <pbuf_take+0x110>)
 801038a:	f009 fed5 	bl	801a138 <iprintf>
 801038e:	f04f 33ff 	mov.w	r3, #4294967295
 8010392:	e04b      	b.n	801042c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d007      	beq.n	80103aa <pbuf_take+0x7e>
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d004      	beq.n	80103aa <pbuf_take+0x7e>
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	891b      	ldrh	r3, [r3, #8]
 80103a4:	88fa      	ldrh	r2, [r7, #6]
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d902      	bls.n	80103b0 <pbuf_take+0x84>
    return ERR_ARG;
 80103aa:	f06f 030f 	mvn.w	r3, #15
 80103ae:	e03d      	b.n	801042c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	61fb      	str	r3, [r7, #28]
 80103b4:	e028      	b.n	8010408 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d106      	bne.n	80103ca <pbuf_take+0x9e>
 80103bc:	4b1d      	ldr	r3, [pc, #116]	; (8010434 <pbuf_take+0x108>)
 80103be:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80103c2:	4921      	ldr	r1, [pc, #132]	; (8010448 <pbuf_take+0x11c>)
 80103c4:	481d      	ldr	r0, [pc, #116]	; (801043c <pbuf_take+0x110>)
 80103c6:	f009 feb7 	bl	801a138 <iprintf>
    buf_copy_len = total_copy_len;
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80103ce:	69fb      	ldr	r3, [r7, #28]
 80103d0:	895b      	ldrh	r3, [r3, #10]
 80103d2:	461a      	mov	r2, r3
 80103d4:	69bb      	ldr	r3, [r7, #24]
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d902      	bls.n	80103e0 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80103da:	69fb      	ldr	r3, [r7, #28]
 80103dc:	895b      	ldrh	r3, [r3, #10]
 80103de:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	6858      	ldr	r0, [r3, #4]
 80103e4:	68ba      	ldr	r2, [r7, #8]
 80103e6:	693b      	ldr	r3, [r7, #16]
 80103e8:	4413      	add	r3, r2
 80103ea:	69ba      	ldr	r2, [r7, #24]
 80103ec:	4619      	mov	r1, r3
 80103ee:	f009 f979 	bl	80196e4 <memcpy>
    total_copy_len -= buf_copy_len;
 80103f2:	697a      	ldr	r2, [r7, #20]
 80103f4:	69bb      	ldr	r3, [r7, #24]
 80103f6:	1ad3      	subs	r3, r2, r3
 80103f8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80103fa:	693a      	ldr	r2, [r7, #16]
 80103fc:	69bb      	ldr	r3, [r7, #24]
 80103fe:	4413      	add	r3, r2
 8010400:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010402:	69fb      	ldr	r3, [r7, #28]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	61fb      	str	r3, [r7, #28]
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d1d3      	bne.n	80103b6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d103      	bne.n	801041c <pbuf_take+0xf0>
 8010414:	88fb      	ldrh	r3, [r7, #6]
 8010416:	693a      	ldr	r2, [r7, #16]
 8010418:	429a      	cmp	r2, r3
 801041a:	d006      	beq.n	801042a <pbuf_take+0xfe>
 801041c:	4b05      	ldr	r3, [pc, #20]	; (8010434 <pbuf_take+0x108>)
 801041e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8010422:	490a      	ldr	r1, [pc, #40]	; (801044c <pbuf_take+0x120>)
 8010424:	4805      	ldr	r0, [pc, #20]	; (801043c <pbuf_take+0x110>)
 8010426:	f009 fe87 	bl	801a138 <iprintf>
  return ERR_OK;
 801042a:	2300      	movs	r3, #0
}
 801042c:	4618      	mov	r0, r3
 801042e:	3720      	adds	r7, #32
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}
 8010434:	0801ced0 	.word	0x0801ced0
 8010438:	0801d2a8 	.word	0x0801d2a8
 801043c:	0801cf30 	.word	0x0801cf30
 8010440:	0801d2c0 	.word	0x0801d2c0
 8010444:	0801d2dc 	.word	0x0801d2dc
 8010448:	0801d2fc 	.word	0x0801d2fc
 801044c:	0801d314 	.word	0x0801d314

08010450 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b084      	sub	sp, #16
 8010454:	af00      	add	r7, sp, #0
 8010456:	4603      	mov	r3, r0
 8010458:	603a      	str	r2, [r7, #0]
 801045a:	71fb      	strb	r3, [r7, #7]
 801045c:	460b      	mov	r3, r1
 801045e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	8919      	ldrh	r1, [r3, #8]
 8010464:	88ba      	ldrh	r2, [r7, #4]
 8010466:	79fb      	ldrb	r3, [r7, #7]
 8010468:	4618      	mov	r0, r3
 801046a:	f7ff fa1f 	bl	800f8ac <pbuf_alloc>
 801046e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d101      	bne.n	801047a <pbuf_clone+0x2a>
    return NULL;
 8010476:	2300      	movs	r3, #0
 8010478:	e011      	b.n	801049e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801047a:	6839      	ldr	r1, [r7, #0]
 801047c:	68f8      	ldr	r0, [r7, #12]
 801047e:	f7ff fe11 	bl	80100a4 <pbuf_copy>
 8010482:	4603      	mov	r3, r0
 8010484:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010486:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d006      	beq.n	801049c <pbuf_clone+0x4c>
 801048e:	4b06      	ldr	r3, [pc, #24]	; (80104a8 <pbuf_clone+0x58>)
 8010490:	f240 5224 	movw	r2, #1316	; 0x524
 8010494:	4905      	ldr	r1, [pc, #20]	; (80104ac <pbuf_clone+0x5c>)
 8010496:	4806      	ldr	r0, [pc, #24]	; (80104b0 <pbuf_clone+0x60>)
 8010498:	f009 fe4e 	bl	801a138 <iprintf>
  return q;
 801049c:	68fb      	ldr	r3, [r7, #12]
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3710      	adds	r7, #16
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	0801ced0 	.word	0x0801ced0
 80104ac:	0801d344 	.word	0x0801d344
 80104b0:	0801cf30 	.word	0x0801cf30

080104b4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80104b8:	f009 fe6c 	bl	801a194 <rand>
 80104bc:	4603      	mov	r3, r0
 80104be:	b29b      	uxth	r3, r3
 80104c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80104c4:	b29b      	uxth	r3, r3
 80104c6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80104ca:	b29a      	uxth	r2, r3
 80104cc:	4b01      	ldr	r3, [pc, #4]	; (80104d4 <tcp_init+0x20>)
 80104ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80104d0:	bf00      	nop
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	200005ac 	.word	0x200005ac

080104d8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	7d1b      	ldrb	r3, [r3, #20]
 80104e4:	2b01      	cmp	r3, #1
 80104e6:	d105      	bne.n	80104f4 <tcp_free+0x1c>
 80104e8:	4b06      	ldr	r3, [pc, #24]	; (8010504 <tcp_free+0x2c>)
 80104ea:	22d4      	movs	r2, #212	; 0xd4
 80104ec:	4906      	ldr	r1, [pc, #24]	; (8010508 <tcp_free+0x30>)
 80104ee:	4807      	ldr	r0, [pc, #28]	; (801050c <tcp_free+0x34>)
 80104f0:	f009 fe22 	bl	801a138 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80104f4:	6879      	ldr	r1, [r7, #4]
 80104f6:	2001      	movs	r0, #1
 80104f8:	f7fe feaa 	bl	800f250 <memp_free>
}
 80104fc:	bf00      	nop
 80104fe:	3708      	adds	r7, #8
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}
 8010504:	0801d3d0 	.word	0x0801d3d0
 8010508:	0801d400 	.word	0x0801d400
 801050c:	0801d414 	.word	0x0801d414

08010510 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b082      	sub	sp, #8
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	7d1b      	ldrb	r3, [r3, #20]
 801051c:	2b01      	cmp	r3, #1
 801051e:	d105      	bne.n	801052c <tcp_free_listen+0x1c>
 8010520:	4b06      	ldr	r3, [pc, #24]	; (801053c <tcp_free_listen+0x2c>)
 8010522:	22df      	movs	r2, #223	; 0xdf
 8010524:	4906      	ldr	r1, [pc, #24]	; (8010540 <tcp_free_listen+0x30>)
 8010526:	4807      	ldr	r0, [pc, #28]	; (8010544 <tcp_free_listen+0x34>)
 8010528:	f009 fe06 	bl	801a138 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801052c:	6879      	ldr	r1, [r7, #4]
 801052e:	2002      	movs	r0, #2
 8010530:	f7fe fe8e 	bl	800f250 <memp_free>
}
 8010534:	bf00      	nop
 8010536:	3708      	adds	r7, #8
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}
 801053c:	0801d3d0 	.word	0x0801d3d0
 8010540:	0801d43c 	.word	0x0801d43c
 8010544:	0801d414 	.word	0x0801d414

08010548 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801054c:	f001 f802 	bl	8011554 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010550:	4b07      	ldr	r3, [pc, #28]	; (8010570 <tcp_tmr+0x28>)
 8010552:	781b      	ldrb	r3, [r3, #0]
 8010554:	3301      	adds	r3, #1
 8010556:	b2da      	uxtb	r2, r3
 8010558:	4b05      	ldr	r3, [pc, #20]	; (8010570 <tcp_tmr+0x28>)
 801055a:	701a      	strb	r2, [r3, #0]
 801055c:	4b04      	ldr	r3, [pc, #16]	; (8010570 <tcp_tmr+0x28>)
 801055e:	781b      	ldrb	r3, [r3, #0]
 8010560:	f003 0301 	and.w	r3, r3, #1
 8010564:	2b00      	cmp	r3, #0
 8010566:	d001      	beq.n	801056c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010568:	f000 fcb4 	bl	8010ed4 <tcp_slowtmr>
  }
}
 801056c:	bf00      	nop
 801056e:	bd80      	pop	{r7, pc}
 8010570:	20000815 	.word	0x20000815

08010574 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b084      	sub	sp, #16
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d105      	bne.n	8010590 <tcp_remove_listener+0x1c>
 8010584:	4b0d      	ldr	r3, [pc, #52]	; (80105bc <tcp_remove_listener+0x48>)
 8010586:	22ff      	movs	r2, #255	; 0xff
 8010588:	490d      	ldr	r1, [pc, #52]	; (80105c0 <tcp_remove_listener+0x4c>)
 801058a:	480e      	ldr	r0, [pc, #56]	; (80105c4 <tcp_remove_listener+0x50>)
 801058c:	f009 fdd4 	bl	801a138 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	60fb      	str	r3, [r7, #12]
 8010594:	e00a      	b.n	80105ac <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801059a:	683a      	ldr	r2, [r7, #0]
 801059c:	429a      	cmp	r2, r3
 801059e:	d102      	bne.n	80105a6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	2200      	movs	r2, #0
 80105a4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	68db      	ldr	r3, [r3, #12]
 80105aa:	60fb      	str	r3, [r7, #12]
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d1f1      	bne.n	8010596 <tcp_remove_listener+0x22>
    }
  }
}
 80105b2:	bf00      	nop
 80105b4:	bf00      	nop
 80105b6:	3710      	adds	r7, #16
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}
 80105bc:	0801d3d0 	.word	0x0801d3d0
 80105c0:	0801d458 	.word	0x0801d458
 80105c4:	0801d414 	.word	0x0801d414

080105c8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d106      	bne.n	80105e4 <tcp_listen_closed+0x1c>
 80105d6:	4b14      	ldr	r3, [pc, #80]	; (8010628 <tcp_listen_closed+0x60>)
 80105d8:	f240 1211 	movw	r2, #273	; 0x111
 80105dc:	4913      	ldr	r1, [pc, #76]	; (801062c <tcp_listen_closed+0x64>)
 80105de:	4814      	ldr	r0, [pc, #80]	; (8010630 <tcp_listen_closed+0x68>)
 80105e0:	f009 fdaa 	bl	801a138 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	7d1b      	ldrb	r3, [r3, #20]
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	d006      	beq.n	80105fa <tcp_listen_closed+0x32>
 80105ec:	4b0e      	ldr	r3, [pc, #56]	; (8010628 <tcp_listen_closed+0x60>)
 80105ee:	f44f 7289 	mov.w	r2, #274	; 0x112
 80105f2:	4910      	ldr	r1, [pc, #64]	; (8010634 <tcp_listen_closed+0x6c>)
 80105f4:	480e      	ldr	r0, [pc, #56]	; (8010630 <tcp_listen_closed+0x68>)
 80105f6:	f009 fd9f 	bl	801a138 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80105fa:	2301      	movs	r3, #1
 80105fc:	60fb      	str	r3, [r7, #12]
 80105fe:	e00b      	b.n	8010618 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010600:	4a0d      	ldr	r2, [pc, #52]	; (8010638 <tcp_listen_closed+0x70>)
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	6879      	ldr	r1, [r7, #4]
 801060c:	4618      	mov	r0, r3
 801060e:	f7ff ffb1 	bl	8010574 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	3301      	adds	r3, #1
 8010616:	60fb      	str	r3, [r7, #12]
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2b03      	cmp	r3, #3
 801061c:	d9f0      	bls.n	8010600 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801061e:	bf00      	nop
 8010620:	bf00      	nop
 8010622:	3710      	adds	r7, #16
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}
 8010628:	0801d3d0 	.word	0x0801d3d0
 801062c:	0801d480 	.word	0x0801d480
 8010630:	0801d414 	.word	0x0801d414
 8010634:	0801d48c 	.word	0x0801d48c
 8010638:	0801f534 	.word	0x0801f534

0801063c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801063c:	b5b0      	push	{r4, r5, r7, lr}
 801063e:	b088      	sub	sp, #32
 8010640:	af04      	add	r7, sp, #16
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	460b      	mov	r3, r1
 8010646:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d106      	bne.n	801065c <tcp_close_shutdown+0x20>
 801064e:	4b63      	ldr	r3, [pc, #396]	; (80107dc <tcp_close_shutdown+0x1a0>)
 8010650:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010654:	4962      	ldr	r1, [pc, #392]	; (80107e0 <tcp_close_shutdown+0x1a4>)
 8010656:	4863      	ldr	r0, [pc, #396]	; (80107e4 <tcp_close_shutdown+0x1a8>)
 8010658:	f009 fd6e 	bl	801a138 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801065c:	78fb      	ldrb	r3, [r7, #3]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d067      	beq.n	8010732 <tcp_close_shutdown+0xf6>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	7d1b      	ldrb	r3, [r3, #20]
 8010666:	2b04      	cmp	r3, #4
 8010668:	d003      	beq.n	8010672 <tcp_close_shutdown+0x36>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	7d1b      	ldrb	r3, [r3, #20]
 801066e:	2b07      	cmp	r3, #7
 8010670:	d15f      	bne.n	8010732 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010676:	2b00      	cmp	r3, #0
 8010678:	d105      	bne.n	8010686 <tcp_close_shutdown+0x4a>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801067e:	f241 0268 	movw	r2, #4200	; 0x1068
 8010682:	4293      	cmp	r3, r2
 8010684:	d055      	beq.n	8010732 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	8b5b      	ldrh	r3, [r3, #26]
 801068a:	f003 0310 	and.w	r3, r3, #16
 801068e:	2b00      	cmp	r3, #0
 8010690:	d106      	bne.n	80106a0 <tcp_close_shutdown+0x64>
 8010692:	4b52      	ldr	r3, [pc, #328]	; (80107dc <tcp_close_shutdown+0x1a0>)
 8010694:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010698:	4953      	ldr	r1, [pc, #332]	; (80107e8 <tcp_close_shutdown+0x1ac>)
 801069a:	4852      	ldr	r0, [pc, #328]	; (80107e4 <tcp_close_shutdown+0x1a8>)
 801069c:	f009 fd4c 	bl	801a138 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80106a8:	687d      	ldr	r5, [r7, #4]
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	3304      	adds	r3, #4
 80106ae:	687a      	ldr	r2, [r7, #4]
 80106b0:	8ad2      	ldrh	r2, [r2, #22]
 80106b2:	6879      	ldr	r1, [r7, #4]
 80106b4:	8b09      	ldrh	r1, [r1, #24]
 80106b6:	9102      	str	r1, [sp, #8]
 80106b8:	9201      	str	r2, [sp, #4]
 80106ba:	9300      	str	r3, [sp, #0]
 80106bc:	462b      	mov	r3, r5
 80106be:	4622      	mov	r2, r4
 80106c0:	4601      	mov	r1, r0
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f005 fcfc 	bl	80160c0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f001 fad7 	bl	8011c7c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80106ce:	4b47      	ldr	r3, [pc, #284]	; (80107ec <tcp_close_shutdown+0x1b0>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	687a      	ldr	r2, [r7, #4]
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d105      	bne.n	80106e4 <tcp_close_shutdown+0xa8>
 80106d8:	4b44      	ldr	r3, [pc, #272]	; (80107ec <tcp_close_shutdown+0x1b0>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	68db      	ldr	r3, [r3, #12]
 80106de:	4a43      	ldr	r2, [pc, #268]	; (80107ec <tcp_close_shutdown+0x1b0>)
 80106e0:	6013      	str	r3, [r2, #0]
 80106e2:	e013      	b.n	801070c <tcp_close_shutdown+0xd0>
 80106e4:	4b41      	ldr	r3, [pc, #260]	; (80107ec <tcp_close_shutdown+0x1b0>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	60fb      	str	r3, [r7, #12]
 80106ea:	e00c      	b.n	8010706 <tcp_close_shutdown+0xca>
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	68db      	ldr	r3, [r3, #12]
 80106f0:	687a      	ldr	r2, [r7, #4]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d104      	bne.n	8010700 <tcp_close_shutdown+0xc4>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	68da      	ldr	r2, [r3, #12]
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	60da      	str	r2, [r3, #12]
 80106fe:	e005      	b.n	801070c <tcp_close_shutdown+0xd0>
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	68db      	ldr	r3, [r3, #12]
 8010704:	60fb      	str	r3, [r7, #12]
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d1ef      	bne.n	80106ec <tcp_close_shutdown+0xb0>
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2200      	movs	r2, #0
 8010710:	60da      	str	r2, [r3, #12]
 8010712:	4b37      	ldr	r3, [pc, #220]	; (80107f0 <tcp_close_shutdown+0x1b4>)
 8010714:	2201      	movs	r2, #1
 8010716:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010718:	4b36      	ldr	r3, [pc, #216]	; (80107f4 <tcp_close_shutdown+0x1b8>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	687a      	ldr	r2, [r7, #4]
 801071e:	429a      	cmp	r2, r3
 8010720:	d102      	bne.n	8010728 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010722:	f003 ff6d 	bl	8014600 <tcp_trigger_input_pcb_close>
 8010726:	e002      	b.n	801072e <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8010728:	6878      	ldr	r0, [r7, #4]
 801072a:	f7ff fed5 	bl	80104d8 <tcp_free>
      }
      return ERR_OK;
 801072e:	2300      	movs	r3, #0
 8010730:	e050      	b.n	80107d4 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	7d1b      	ldrb	r3, [r3, #20]
 8010736:	2b02      	cmp	r3, #2
 8010738:	d03b      	beq.n	80107b2 <tcp_close_shutdown+0x176>
 801073a:	2b02      	cmp	r3, #2
 801073c:	dc44      	bgt.n	80107c8 <tcp_close_shutdown+0x18c>
 801073e:	2b00      	cmp	r3, #0
 8010740:	d002      	beq.n	8010748 <tcp_close_shutdown+0x10c>
 8010742:	2b01      	cmp	r3, #1
 8010744:	d02a      	beq.n	801079c <tcp_close_shutdown+0x160>
 8010746:	e03f      	b.n	80107c8 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	8adb      	ldrh	r3, [r3, #22]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d021      	beq.n	8010794 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010750:	4b29      	ldr	r3, [pc, #164]	; (80107f8 <tcp_close_shutdown+0x1bc>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	687a      	ldr	r2, [r7, #4]
 8010756:	429a      	cmp	r2, r3
 8010758:	d105      	bne.n	8010766 <tcp_close_shutdown+0x12a>
 801075a:	4b27      	ldr	r3, [pc, #156]	; (80107f8 <tcp_close_shutdown+0x1bc>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	68db      	ldr	r3, [r3, #12]
 8010760:	4a25      	ldr	r2, [pc, #148]	; (80107f8 <tcp_close_shutdown+0x1bc>)
 8010762:	6013      	str	r3, [r2, #0]
 8010764:	e013      	b.n	801078e <tcp_close_shutdown+0x152>
 8010766:	4b24      	ldr	r3, [pc, #144]	; (80107f8 <tcp_close_shutdown+0x1bc>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	60bb      	str	r3, [r7, #8]
 801076c:	e00c      	b.n	8010788 <tcp_close_shutdown+0x14c>
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	68db      	ldr	r3, [r3, #12]
 8010772:	687a      	ldr	r2, [r7, #4]
 8010774:	429a      	cmp	r2, r3
 8010776:	d104      	bne.n	8010782 <tcp_close_shutdown+0x146>
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	68da      	ldr	r2, [r3, #12]
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	60da      	str	r2, [r3, #12]
 8010780:	e005      	b.n	801078e <tcp_close_shutdown+0x152>
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	68db      	ldr	r3, [r3, #12]
 8010786:	60bb      	str	r3, [r7, #8]
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d1ef      	bne.n	801076e <tcp_close_shutdown+0x132>
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2200      	movs	r2, #0
 8010792:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f7ff fe9f 	bl	80104d8 <tcp_free>
      break;
 801079a:	e01a      	b.n	80107d2 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f7ff ff13 	bl	80105c8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80107a2:	6879      	ldr	r1, [r7, #4]
 80107a4:	4815      	ldr	r0, [pc, #84]	; (80107fc <tcp_close_shutdown+0x1c0>)
 80107a6:	f001 fab9 	bl	8011d1c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f7ff feb0 	bl	8010510 <tcp_free_listen>
      break;
 80107b0:	e00f      	b.n	80107d2 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80107b2:	6879      	ldr	r1, [r7, #4]
 80107b4:	480d      	ldr	r0, [pc, #52]	; (80107ec <tcp_close_shutdown+0x1b0>)
 80107b6:	f001 fab1 	bl	8011d1c <tcp_pcb_remove>
 80107ba:	4b0d      	ldr	r3, [pc, #52]	; (80107f0 <tcp_close_shutdown+0x1b4>)
 80107bc:	2201      	movs	r2, #1
 80107be:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f7ff fe89 	bl	80104d8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80107c6:	e004      	b.n	80107d2 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f000 f819 	bl	8010800 <tcp_close_shutdown_fin>
 80107ce:	4603      	mov	r3, r0
 80107d0:	e000      	b.n	80107d4 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 80107d2:	2300      	movs	r3, #0
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3710      	adds	r7, #16
 80107d8:	46bd      	mov	sp, r7
 80107da:	bdb0      	pop	{r4, r5, r7, pc}
 80107dc:	0801d3d0 	.word	0x0801d3d0
 80107e0:	0801d4a4 	.word	0x0801d4a4
 80107e4:	0801d414 	.word	0x0801d414
 80107e8:	0801d4c4 	.word	0x0801d4c4
 80107ec:	2001890c 	.word	0x2001890c
 80107f0:	20018908 	.word	0x20018908
 80107f4:	20018920 	.word	0x20018920
 80107f8:	20018918 	.word	0x20018918
 80107fc:	20018914 	.word	0x20018914

08010800 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d106      	bne.n	801081c <tcp_close_shutdown_fin+0x1c>
 801080e:	4b2e      	ldr	r3, [pc, #184]	; (80108c8 <tcp_close_shutdown_fin+0xc8>)
 8010810:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010814:	492d      	ldr	r1, [pc, #180]	; (80108cc <tcp_close_shutdown_fin+0xcc>)
 8010816:	482e      	ldr	r0, [pc, #184]	; (80108d0 <tcp_close_shutdown_fin+0xd0>)
 8010818:	f009 fc8e 	bl	801a138 <iprintf>

  switch (pcb->state) {
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	7d1b      	ldrb	r3, [r3, #20]
 8010820:	2b07      	cmp	r3, #7
 8010822:	d020      	beq.n	8010866 <tcp_close_shutdown_fin+0x66>
 8010824:	2b07      	cmp	r3, #7
 8010826:	dc2b      	bgt.n	8010880 <tcp_close_shutdown_fin+0x80>
 8010828:	2b03      	cmp	r3, #3
 801082a:	d002      	beq.n	8010832 <tcp_close_shutdown_fin+0x32>
 801082c:	2b04      	cmp	r3, #4
 801082e:	d00d      	beq.n	801084c <tcp_close_shutdown_fin+0x4c>
 8010830:	e026      	b.n	8010880 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f004 fd52 	bl	80152dc <tcp_send_fin>
 8010838:	4603      	mov	r3, r0
 801083a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801083c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d11f      	bne.n	8010884 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2205      	movs	r2, #5
 8010848:	751a      	strb	r2, [r3, #20]
      }
      break;
 801084a:	e01b      	b.n	8010884 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f004 fd45 	bl	80152dc <tcp_send_fin>
 8010852:	4603      	mov	r3, r0
 8010854:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d114      	bne.n	8010888 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2205      	movs	r2, #5
 8010862:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010864:	e010      	b.n	8010888 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010866:	6878      	ldr	r0, [r7, #4]
 8010868:	f004 fd38 	bl	80152dc <tcp_send_fin>
 801086c:	4603      	mov	r3, r0
 801086e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d109      	bne.n	801088c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2209      	movs	r2, #9
 801087c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801087e:	e005      	b.n	801088c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010880:	2300      	movs	r3, #0
 8010882:	e01c      	b.n	80108be <tcp_close_shutdown_fin+0xbe>
      break;
 8010884:	bf00      	nop
 8010886:	e002      	b.n	801088e <tcp_close_shutdown_fin+0x8e>
      break;
 8010888:	bf00      	nop
 801088a:	e000      	b.n	801088e <tcp_close_shutdown_fin+0x8e>
      break;
 801088c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801088e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d103      	bne.n	801089e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f004 fe5e 	bl	8015558 <tcp_output>
 801089c:	e00d      	b.n	80108ba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801089e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108a6:	d108      	bne.n	80108ba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	8b5b      	ldrh	r3, [r3, #26]
 80108ac:	f043 0308 	orr.w	r3, r3, #8
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80108b6:	2300      	movs	r3, #0
 80108b8:	e001      	b.n	80108be <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80108ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3710      	adds	r7, #16
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	0801d3d0 	.word	0x0801d3d0
 80108cc:	0801d480 	.word	0x0801d480
 80108d0:	0801d414 	.word	0x0801d414

080108d4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d109      	bne.n	80108f6 <tcp_close+0x22>
 80108e2:	4b0f      	ldr	r3, [pc, #60]	; (8010920 <tcp_close+0x4c>)
 80108e4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80108e8:	490e      	ldr	r1, [pc, #56]	; (8010924 <tcp_close+0x50>)
 80108ea:	480f      	ldr	r0, [pc, #60]	; (8010928 <tcp_close+0x54>)
 80108ec:	f009 fc24 	bl	801a138 <iprintf>
 80108f0:	f06f 030f 	mvn.w	r3, #15
 80108f4:	e00f      	b.n	8010916 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	7d1b      	ldrb	r3, [r3, #20]
 80108fa:	2b01      	cmp	r3, #1
 80108fc:	d006      	beq.n	801090c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	8b5b      	ldrh	r3, [r3, #26]
 8010902:	f043 0310 	orr.w	r3, r3, #16
 8010906:	b29a      	uxth	r2, r3
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801090c:	2101      	movs	r1, #1
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f7ff fe94 	bl	801063c <tcp_close_shutdown>
 8010914:	4603      	mov	r3, r0
}
 8010916:	4618      	mov	r0, r3
 8010918:	3708      	adds	r7, #8
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}
 801091e:	bf00      	nop
 8010920:	0801d3d0 	.word	0x0801d3d0
 8010924:	0801d4e0 	.word	0x0801d4e0
 8010928:	0801d414 	.word	0x0801d414

0801092c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b08e      	sub	sp, #56	; 0x38
 8010930:	af04      	add	r7, sp, #16
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d107      	bne.n	801094c <tcp_abandon+0x20>
 801093c:	4b52      	ldr	r3, [pc, #328]	; (8010a88 <tcp_abandon+0x15c>)
 801093e:	f240 223d 	movw	r2, #573	; 0x23d
 8010942:	4952      	ldr	r1, [pc, #328]	; (8010a8c <tcp_abandon+0x160>)
 8010944:	4852      	ldr	r0, [pc, #328]	; (8010a90 <tcp_abandon+0x164>)
 8010946:	f009 fbf7 	bl	801a138 <iprintf>
 801094a:	e099      	b.n	8010a80 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	7d1b      	ldrb	r3, [r3, #20]
 8010950:	2b01      	cmp	r3, #1
 8010952:	d106      	bne.n	8010962 <tcp_abandon+0x36>
 8010954:	4b4c      	ldr	r3, [pc, #304]	; (8010a88 <tcp_abandon+0x15c>)
 8010956:	f44f 7210 	mov.w	r2, #576	; 0x240
 801095a:	494e      	ldr	r1, [pc, #312]	; (8010a94 <tcp_abandon+0x168>)
 801095c:	484c      	ldr	r0, [pc, #304]	; (8010a90 <tcp_abandon+0x164>)
 801095e:	f009 fbeb 	bl	801a138 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	7d1b      	ldrb	r3, [r3, #20]
 8010966:	2b0a      	cmp	r3, #10
 8010968:	d107      	bne.n	801097a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801096a:	6879      	ldr	r1, [r7, #4]
 801096c:	484a      	ldr	r0, [pc, #296]	; (8010a98 <tcp_abandon+0x16c>)
 801096e:	f001 f9d5 	bl	8011d1c <tcp_pcb_remove>
    tcp_free(pcb);
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f7ff fdb0 	bl	80104d8 <tcp_free>
 8010978:	e082      	b.n	8010a80 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801097a:	2300      	movs	r3, #0
 801097c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801097e:	2300      	movs	r3, #0
 8010980:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010986:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801098c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010994:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	691b      	ldr	r3, [r3, #16]
 801099a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	7d1b      	ldrb	r3, [r3, #20]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d126      	bne.n	80109f2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	8adb      	ldrh	r3, [r3, #22]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d02e      	beq.n	8010a0a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80109ac:	4b3b      	ldr	r3, [pc, #236]	; (8010a9c <tcp_abandon+0x170>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	687a      	ldr	r2, [r7, #4]
 80109b2:	429a      	cmp	r2, r3
 80109b4:	d105      	bne.n	80109c2 <tcp_abandon+0x96>
 80109b6:	4b39      	ldr	r3, [pc, #228]	; (8010a9c <tcp_abandon+0x170>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	68db      	ldr	r3, [r3, #12]
 80109bc:	4a37      	ldr	r2, [pc, #220]	; (8010a9c <tcp_abandon+0x170>)
 80109be:	6013      	str	r3, [r2, #0]
 80109c0:	e013      	b.n	80109ea <tcp_abandon+0xbe>
 80109c2:	4b36      	ldr	r3, [pc, #216]	; (8010a9c <tcp_abandon+0x170>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	61fb      	str	r3, [r7, #28]
 80109c8:	e00c      	b.n	80109e4 <tcp_abandon+0xb8>
 80109ca:	69fb      	ldr	r3, [r7, #28]
 80109cc:	68db      	ldr	r3, [r3, #12]
 80109ce:	687a      	ldr	r2, [r7, #4]
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d104      	bne.n	80109de <tcp_abandon+0xb2>
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	68da      	ldr	r2, [r3, #12]
 80109d8:	69fb      	ldr	r3, [r7, #28]
 80109da:	60da      	str	r2, [r3, #12]
 80109dc:	e005      	b.n	80109ea <tcp_abandon+0xbe>
 80109de:	69fb      	ldr	r3, [r7, #28]
 80109e0:	68db      	ldr	r3, [r3, #12]
 80109e2:	61fb      	str	r3, [r7, #28]
 80109e4:	69fb      	ldr	r3, [r7, #28]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d1ef      	bne.n	80109ca <tcp_abandon+0x9e>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2200      	movs	r2, #0
 80109ee:	60da      	str	r2, [r3, #12]
 80109f0:	e00b      	b.n	8010a0a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	8adb      	ldrh	r3, [r3, #22]
 80109fa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80109fc:	6879      	ldr	r1, [r7, #4]
 80109fe:	4828      	ldr	r0, [pc, #160]	; (8010aa0 <tcp_abandon+0x174>)
 8010a00:	f001 f98c 	bl	8011d1c <tcp_pcb_remove>
 8010a04:	4b27      	ldr	r3, [pc, #156]	; (8010aa4 <tcp_abandon+0x178>)
 8010a06:	2201      	movs	r2, #1
 8010a08:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d004      	beq.n	8010a1c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a16:	4618      	mov	r0, r3
 8010a18:	f000 fe7e 	bl	8011718 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d004      	beq.n	8010a2e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f000 fe75 	bl	8011718 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d004      	beq.n	8010a40 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f000 fe6c 	bl	8011718 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d00e      	beq.n	8010a64 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010a46:	6879      	ldr	r1, [r7, #4]
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	3304      	adds	r3, #4
 8010a4c:	687a      	ldr	r2, [r7, #4]
 8010a4e:	8b12      	ldrh	r2, [r2, #24]
 8010a50:	9202      	str	r2, [sp, #8]
 8010a52:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010a54:	9201      	str	r2, [sp, #4]
 8010a56:	9300      	str	r3, [sp, #0]
 8010a58:	460b      	mov	r3, r1
 8010a5a:	697a      	ldr	r2, [r7, #20]
 8010a5c:	69b9      	ldr	r1, [r7, #24]
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f005 fb2e 	bl	80160c0 <tcp_rst>
    }
    last_state = pcb->state;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	7d1b      	ldrb	r3, [r3, #20]
 8010a68:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	f7ff fd34 	bl	80104d8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010a70:	693b      	ldr	r3, [r7, #16]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d004      	beq.n	8010a80 <tcp_abandon+0x154>
 8010a76:	693b      	ldr	r3, [r7, #16]
 8010a78:	f06f 010c 	mvn.w	r1, #12
 8010a7c:	68f8      	ldr	r0, [r7, #12]
 8010a7e:	4798      	blx	r3
  }
}
 8010a80:	3728      	adds	r7, #40	; 0x28
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}
 8010a86:	bf00      	nop
 8010a88:	0801d3d0 	.word	0x0801d3d0
 8010a8c:	0801d514 	.word	0x0801d514
 8010a90:	0801d414 	.word	0x0801d414
 8010a94:	0801d530 	.word	0x0801d530
 8010a98:	2001891c 	.word	0x2001891c
 8010a9c:	20018918 	.word	0x20018918
 8010aa0:	2001890c 	.word	0x2001890c
 8010aa4:	20018908 	.word	0x20018908

08010aa8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b082      	sub	sp, #8
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010ab0:	2101      	movs	r1, #1
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f7ff ff3a 	bl	801092c <tcp_abandon>
}
 8010ab8:	bf00      	nop
 8010aba:	3708      	adds	r7, #8
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}

08010ac0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b084      	sub	sp, #16
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d106      	bne.n	8010adc <tcp_update_rcv_ann_wnd+0x1c>
 8010ace:	4b25      	ldr	r3, [pc, #148]	; (8010b64 <tcp_update_rcv_ann_wnd+0xa4>)
 8010ad0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010ad4:	4924      	ldr	r1, [pc, #144]	; (8010b68 <tcp_update_rcv_ann_wnd+0xa8>)
 8010ad6:	4825      	ldr	r0, [pc, #148]	; (8010b6c <tcp_update_rcv_ann_wnd+0xac>)
 8010ad8:	f009 fb2e 	bl	801a138 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ae0:	687a      	ldr	r2, [r7, #4]
 8010ae2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010ae4:	4413      	add	r3, r2
 8010ae6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aec:	687a      	ldr	r2, [r7, #4]
 8010aee:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010af0:	f640 0134 	movw	r1, #2100	; 0x834
 8010af4:	428a      	cmp	r2, r1
 8010af6:	bf28      	it	cs
 8010af8:	460a      	movcs	r2, r1
 8010afa:	b292      	uxth	r2, r2
 8010afc:	4413      	add	r3, r2
 8010afe:	68fa      	ldr	r2, [r7, #12]
 8010b00:	1ad3      	subs	r3, r2, r3
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	db08      	blt.n	8010b18 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b12:	68fa      	ldr	r2, [r7, #12]
 8010b14:	1ad3      	subs	r3, r2, r3
 8010b16:	e020      	b.n	8010b5a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b20:	1ad3      	subs	r3, r2, r3
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	dd03      	ble.n	8010b2e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010b2c:	e014      	b.n	8010b58 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b36:	1ad3      	subs	r3, r2, r3
 8010b38:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b40:	d306      	bcc.n	8010b50 <tcp_update_rcv_ann_wnd+0x90>
 8010b42:	4b08      	ldr	r3, [pc, #32]	; (8010b64 <tcp_update_rcv_ann_wnd+0xa4>)
 8010b44:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010b48:	4909      	ldr	r1, [pc, #36]	; (8010b70 <tcp_update_rcv_ann_wnd+0xb0>)
 8010b4a:	4808      	ldr	r0, [pc, #32]	; (8010b6c <tcp_update_rcv_ann_wnd+0xac>)
 8010b4c:	f009 faf4 	bl	801a138 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	b29a      	uxth	r2, r3
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010b58:	2300      	movs	r3, #0
  }
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3710      	adds	r7, #16
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	0801d3d0 	.word	0x0801d3d0
 8010b68:	0801d62c 	.word	0x0801d62c
 8010b6c:	0801d414 	.word	0x0801d414
 8010b70:	0801d650 	.word	0x0801d650

08010b74 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b084      	sub	sp, #16
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	460b      	mov	r3, r1
 8010b7e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d107      	bne.n	8010b96 <tcp_recved+0x22>
 8010b86:	4b20      	ldr	r3, [pc, #128]	; (8010c08 <tcp_recved+0x94>)
 8010b88:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010b8c:	491f      	ldr	r1, [pc, #124]	; (8010c0c <tcp_recved+0x98>)
 8010b8e:	4820      	ldr	r0, [pc, #128]	; (8010c10 <tcp_recved+0x9c>)
 8010b90:	f009 fad2 	bl	801a138 <iprintf>
 8010b94:	e034      	b.n	8010c00 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	7d1b      	ldrb	r3, [r3, #20]
 8010b9a:	2b01      	cmp	r3, #1
 8010b9c:	d106      	bne.n	8010bac <tcp_recved+0x38>
 8010b9e:	4b1a      	ldr	r3, [pc, #104]	; (8010c08 <tcp_recved+0x94>)
 8010ba0:	f240 32d2 	movw	r2, #978	; 0x3d2
 8010ba4:	491b      	ldr	r1, [pc, #108]	; (8010c14 <tcp_recved+0xa0>)
 8010ba6:	481a      	ldr	r0, [pc, #104]	; (8010c10 <tcp_recved+0x9c>)
 8010ba8:	f009 fac6 	bl	801a138 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010bb0:	887b      	ldrh	r3, [r7, #2]
 8010bb2:	4413      	add	r3, r2
 8010bb4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010bb6:	89fb      	ldrh	r3, [r7, #14]
 8010bb8:	f241 0268 	movw	r2, #4200	; 0x1068
 8010bbc:	4293      	cmp	r3, r2
 8010bbe:	d804      	bhi.n	8010bca <tcp_recved+0x56>
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010bc4:	89fa      	ldrh	r2, [r7, #14]
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	d204      	bcs.n	8010bd4 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f241 0268 	movw	r2, #4200	; 0x1068
 8010bd0:	851a      	strh	r2, [r3, #40]	; 0x28
 8010bd2:	e002      	b.n	8010bda <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	89fa      	ldrh	r2, [r7, #14]
 8010bd8:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f7ff ff70 	bl	8010ac0 <tcp_update_rcv_ann_wnd>
 8010be0:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	f240 4219 	movw	r2, #1049	; 0x419
 8010be8:	4293      	cmp	r3, r2
 8010bea:	d909      	bls.n	8010c00 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	8b5b      	ldrh	r3, [r3, #26]
 8010bf0:	f043 0302 	orr.w	r3, r3, #2
 8010bf4:	b29a      	uxth	r2, r3
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f004 fcac 	bl	8015558 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010c00:	3710      	adds	r7, #16
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
 8010c06:	bf00      	nop
 8010c08:	0801d3d0 	.word	0x0801d3d0
 8010c0c:	0801d66c 	.word	0x0801d66c
 8010c10:	0801d414 	.word	0x0801d414
 8010c14:	0801d684 	.word	0x0801d684

08010c18 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010c18:	b480      	push	{r7}
 8010c1a:	b083      	sub	sp, #12
 8010c1c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8010c22:	4b1e      	ldr	r3, [pc, #120]	; (8010c9c <tcp_new_port+0x84>)
 8010c24:	881b      	ldrh	r3, [r3, #0]
 8010c26:	3301      	adds	r3, #1
 8010c28:	b29a      	uxth	r2, r3
 8010c2a:	4b1c      	ldr	r3, [pc, #112]	; (8010c9c <tcp_new_port+0x84>)
 8010c2c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8010c2e:	4b1b      	ldr	r3, [pc, #108]	; (8010c9c <tcp_new_port+0x84>)
 8010c30:	881b      	ldrh	r3, [r3, #0]
 8010c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d103      	bne.n	8010c42 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010c3a:	4b18      	ldr	r3, [pc, #96]	; (8010c9c <tcp_new_port+0x84>)
 8010c3c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010c40:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010c42:	2300      	movs	r3, #0
 8010c44:	71fb      	strb	r3, [r7, #7]
 8010c46:	e01e      	b.n	8010c86 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010c48:	79fb      	ldrb	r3, [r7, #7]
 8010c4a:	4a15      	ldr	r2, [pc, #84]	; (8010ca0 <tcp_new_port+0x88>)
 8010c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	603b      	str	r3, [r7, #0]
 8010c54:	e011      	b.n	8010c7a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	8ada      	ldrh	r2, [r3, #22]
 8010c5a:	4b10      	ldr	r3, [pc, #64]	; (8010c9c <tcp_new_port+0x84>)
 8010c5c:	881b      	ldrh	r3, [r3, #0]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d108      	bne.n	8010c74 <tcp_new_port+0x5c>
        n++;
 8010c62:	88bb      	ldrh	r3, [r7, #4]
 8010c64:	3301      	adds	r3, #1
 8010c66:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8010c68:	88bb      	ldrh	r3, [r7, #4]
 8010c6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010c6e:	d3d8      	bcc.n	8010c22 <tcp_new_port+0xa>
          return 0;
 8010c70:	2300      	movs	r3, #0
 8010c72:	e00d      	b.n	8010c90 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	68db      	ldr	r3, [r3, #12]
 8010c78:	603b      	str	r3, [r7, #0]
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d1ea      	bne.n	8010c56 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010c80:	79fb      	ldrb	r3, [r7, #7]
 8010c82:	3301      	adds	r3, #1
 8010c84:	71fb      	strb	r3, [r7, #7]
 8010c86:	79fb      	ldrb	r3, [r7, #7]
 8010c88:	2b03      	cmp	r3, #3
 8010c8a:	d9dd      	bls.n	8010c48 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8010c8c:	4b03      	ldr	r3, [pc, #12]	; (8010c9c <tcp_new_port+0x84>)
 8010c8e:	881b      	ldrh	r3, [r3, #0]
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	370c      	adds	r7, #12
 8010c94:	46bd      	mov	sp, r7
 8010c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9a:	4770      	bx	lr
 8010c9c:	200005ac 	.word	0x200005ac
 8010ca0:	0801f534 	.word	0x0801f534

08010ca4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b08a      	sub	sp, #40	; 0x28
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	60f8      	str	r0, [r7, #12]
 8010cac:	60b9      	str	r1, [r7, #8]
 8010cae:	603b      	str	r3, [r7, #0]
 8010cb0:	4613      	mov	r3, r2
 8010cb2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d109      	bne.n	8010cd2 <tcp_connect+0x2e>
 8010cbe:	4b7d      	ldr	r3, [pc, #500]	; (8010eb4 <tcp_connect+0x210>)
 8010cc0:	f240 4235 	movw	r2, #1077	; 0x435
 8010cc4:	497c      	ldr	r1, [pc, #496]	; (8010eb8 <tcp_connect+0x214>)
 8010cc6:	487d      	ldr	r0, [pc, #500]	; (8010ebc <tcp_connect+0x218>)
 8010cc8:	f009 fa36 	bl	801a138 <iprintf>
 8010ccc:	f06f 030f 	mvn.w	r3, #15
 8010cd0:	e0ec      	b.n	8010eac <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d109      	bne.n	8010cec <tcp_connect+0x48>
 8010cd8:	4b76      	ldr	r3, [pc, #472]	; (8010eb4 <tcp_connect+0x210>)
 8010cda:	f240 4236 	movw	r2, #1078	; 0x436
 8010cde:	4978      	ldr	r1, [pc, #480]	; (8010ec0 <tcp_connect+0x21c>)
 8010ce0:	4876      	ldr	r0, [pc, #472]	; (8010ebc <tcp_connect+0x218>)
 8010ce2:	f009 fa29 	bl	801a138 <iprintf>
 8010ce6:	f06f 030f 	mvn.w	r3, #15
 8010cea:	e0df      	b.n	8010eac <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	7d1b      	ldrb	r3, [r3, #20]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d009      	beq.n	8010d08 <tcp_connect+0x64>
 8010cf4:	4b6f      	ldr	r3, [pc, #444]	; (8010eb4 <tcp_connect+0x210>)
 8010cf6:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8010cfa:	4972      	ldr	r1, [pc, #456]	; (8010ec4 <tcp_connect+0x220>)
 8010cfc:	486f      	ldr	r0, [pc, #444]	; (8010ebc <tcp_connect+0x218>)
 8010cfe:	f009 fa1b 	bl	801a138 <iprintf>
 8010d02:	f06f 0309 	mvn.w	r3, #9
 8010d06:	e0d1      	b.n	8010eac <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d002      	beq.n	8010d14 <tcp_connect+0x70>
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	e000      	b.n	8010d16 <tcp_connect+0x72>
 8010d14:	2300      	movs	r3, #0
 8010d16:	68fa      	ldr	r2, [r7, #12]
 8010d18:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	88fa      	ldrh	r2, [r7, #6]
 8010d1e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	7a1b      	ldrb	r3, [r3, #8]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d006      	beq.n	8010d36 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	7a1b      	ldrb	r3, [r3, #8]
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f7fe fd41 	bl	800f7b4 <netif_get_by_index>
 8010d32:	6278      	str	r0, [r7, #36]	; 0x24
 8010d34:	e005      	b.n	8010d42 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	3304      	adds	r3, #4
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f006 ff60 	bl	8017c00 <ip4_route>
 8010d40:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8010d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d102      	bne.n	8010d4e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8010d48:	f06f 0303 	mvn.w	r3, #3
 8010d4c:	e0ae      	b.n	8010eac <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d003      	beq.n	8010d5c <tcp_connect+0xb8>
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d111      	bne.n	8010d80 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8010d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d002      	beq.n	8010d68 <tcp_connect+0xc4>
 8010d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d64:	3304      	adds	r3, #4
 8010d66:	e000      	b.n	8010d6a <tcp_connect+0xc6>
 8010d68:	2300      	movs	r3, #0
 8010d6a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8010d6c:	69fb      	ldr	r3, [r7, #28]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d102      	bne.n	8010d78 <tcp_connect+0xd4>
      return ERR_RTE;
 8010d72:	f06f 0303 	mvn.w	r3, #3
 8010d76:	e099      	b.n	8010eac <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010d78:	69fb      	ldr	r3, [r7, #28]
 8010d7a:	681a      	ldr	r2, [r3, #0]
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	8adb      	ldrh	r3, [r3, #22]
 8010d84:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	8adb      	ldrh	r3, [r3, #22]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d10c      	bne.n	8010da8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8010d8e:	f7ff ff43 	bl	8010c18 <tcp_new_port>
 8010d92:	4603      	mov	r3, r0
 8010d94:	461a      	mov	r2, r3
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	8adb      	ldrh	r3, [r3, #22]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d102      	bne.n	8010da8 <tcp_connect+0x104>
      return ERR_BUF;
 8010da2:	f06f 0301 	mvn.w	r3, #1
 8010da6:	e081      	b.n	8010eac <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8010da8:	68f8      	ldr	r0, [r7, #12]
 8010daa:	f001 f84b 	bl	8011e44 <tcp_next_iss>
 8010dae:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	2200      	movs	r2, #0
 8010db4:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	697a      	ldr	r2, [r7, #20]
 8010dba:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	1e5a      	subs	r2, r3, #1
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	1e5a      	subs	r2, r3, #1
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	1e5a      	subs	r2, r3, #1
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	f241 0268 	movw	r2, #4200	; 0x1068
 8010dda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	f241 0268 	movw	r2, #4200	; 0x1068
 8010df2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010dfc:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	3304      	adds	r3, #4
 8010e06:	461a      	mov	r2, r3
 8010e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e0a:	f001 f841 	bl	8011e90 <tcp_eff_send_mss_netif>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	461a      	mov	r2, r3
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	2201      	movs	r2, #1
 8010e1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	683a      	ldr	r2, [r7, #0]
 8010e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8010e26:	2102      	movs	r1, #2
 8010e28:	68f8      	ldr	r0, [r7, #12]
 8010e2a:	f004 faa7 	bl	801537c <tcp_enqueue_flags>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8010e32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d136      	bne.n	8010ea8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	2202      	movs	r2, #2
 8010e3e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8010e40:	8b7b      	ldrh	r3, [r7, #26]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d021      	beq.n	8010e8a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8010e46:	4b20      	ldr	r3, [pc, #128]	; (8010ec8 <tcp_connect+0x224>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	68fa      	ldr	r2, [r7, #12]
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	d105      	bne.n	8010e5c <tcp_connect+0x1b8>
 8010e50:	4b1d      	ldr	r3, [pc, #116]	; (8010ec8 <tcp_connect+0x224>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	68db      	ldr	r3, [r3, #12]
 8010e56:	4a1c      	ldr	r2, [pc, #112]	; (8010ec8 <tcp_connect+0x224>)
 8010e58:	6013      	str	r3, [r2, #0]
 8010e5a:	e013      	b.n	8010e84 <tcp_connect+0x1e0>
 8010e5c:	4b1a      	ldr	r3, [pc, #104]	; (8010ec8 <tcp_connect+0x224>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	623b      	str	r3, [r7, #32]
 8010e62:	e00c      	b.n	8010e7e <tcp_connect+0x1da>
 8010e64:	6a3b      	ldr	r3, [r7, #32]
 8010e66:	68db      	ldr	r3, [r3, #12]
 8010e68:	68fa      	ldr	r2, [r7, #12]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d104      	bne.n	8010e78 <tcp_connect+0x1d4>
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	68da      	ldr	r2, [r3, #12]
 8010e72:	6a3b      	ldr	r3, [r7, #32]
 8010e74:	60da      	str	r2, [r3, #12]
 8010e76:	e005      	b.n	8010e84 <tcp_connect+0x1e0>
 8010e78:	6a3b      	ldr	r3, [r7, #32]
 8010e7a:	68db      	ldr	r3, [r3, #12]
 8010e7c:	623b      	str	r3, [r7, #32]
 8010e7e:	6a3b      	ldr	r3, [r7, #32]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d1ef      	bne.n	8010e64 <tcp_connect+0x1c0>
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	2200      	movs	r2, #0
 8010e88:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8010e8a:	4b10      	ldr	r3, [pc, #64]	; (8010ecc <tcp_connect+0x228>)
 8010e8c:	681a      	ldr	r2, [r3, #0]
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	60da      	str	r2, [r3, #12]
 8010e92:	4a0e      	ldr	r2, [pc, #56]	; (8010ecc <tcp_connect+0x228>)
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	6013      	str	r3, [r2, #0]
 8010e98:	f005 fad4 	bl	8016444 <tcp_timer_needed>
 8010e9c:	4b0c      	ldr	r3, [pc, #48]	; (8010ed0 <tcp_connect+0x22c>)
 8010e9e:	2201      	movs	r2, #1
 8010ea0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8010ea2:	68f8      	ldr	r0, [r7, #12]
 8010ea4:	f004 fb58 	bl	8015558 <tcp_output>
  }
  return ret;
 8010ea8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3728      	adds	r7, #40	; 0x28
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}
 8010eb4:	0801d3d0 	.word	0x0801d3d0
 8010eb8:	0801d6ac 	.word	0x0801d6ac
 8010ebc:	0801d414 	.word	0x0801d414
 8010ec0:	0801d6c8 	.word	0x0801d6c8
 8010ec4:	0801d6e4 	.word	0x0801d6e4
 8010ec8:	20018918 	.word	0x20018918
 8010ecc:	2001890c 	.word	0x2001890c
 8010ed0:	20018908 	.word	0x20018908

08010ed4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010ed4:	b5b0      	push	{r4, r5, r7, lr}
 8010ed6:	b090      	sub	sp, #64	; 0x40
 8010ed8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010eda:	2300      	movs	r3, #0
 8010edc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8010ee0:	4b94      	ldr	r3, [pc, #592]	; (8011134 <tcp_slowtmr+0x260>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	4a93      	ldr	r2, [pc, #588]	; (8011134 <tcp_slowtmr+0x260>)
 8010ee8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010eea:	4b93      	ldr	r3, [pc, #588]	; (8011138 <tcp_slowtmr+0x264>)
 8010eec:	781b      	ldrb	r3, [r3, #0]
 8010eee:	3301      	adds	r3, #1
 8010ef0:	b2da      	uxtb	r2, r3
 8010ef2:	4b91      	ldr	r3, [pc, #580]	; (8011138 <tcp_slowtmr+0x264>)
 8010ef4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8010efa:	4b90      	ldr	r3, [pc, #576]	; (801113c <tcp_slowtmr+0x268>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010f00:	e29f      	b.n	8011442 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f04:	7d1b      	ldrb	r3, [r3, #20]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d106      	bne.n	8010f18 <tcp_slowtmr+0x44>
 8010f0a:	4b8d      	ldr	r3, [pc, #564]	; (8011140 <tcp_slowtmr+0x26c>)
 8010f0c:	f240 42be 	movw	r2, #1214	; 0x4be
 8010f10:	498c      	ldr	r1, [pc, #560]	; (8011144 <tcp_slowtmr+0x270>)
 8010f12:	488d      	ldr	r0, [pc, #564]	; (8011148 <tcp_slowtmr+0x274>)
 8010f14:	f009 f910 	bl	801a138 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f1a:	7d1b      	ldrb	r3, [r3, #20]
 8010f1c:	2b01      	cmp	r3, #1
 8010f1e:	d106      	bne.n	8010f2e <tcp_slowtmr+0x5a>
 8010f20:	4b87      	ldr	r3, [pc, #540]	; (8011140 <tcp_slowtmr+0x26c>)
 8010f22:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010f26:	4989      	ldr	r1, [pc, #548]	; (801114c <tcp_slowtmr+0x278>)
 8010f28:	4887      	ldr	r0, [pc, #540]	; (8011148 <tcp_slowtmr+0x274>)
 8010f2a:	f009 f905 	bl	801a138 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f30:	7d1b      	ldrb	r3, [r3, #20]
 8010f32:	2b0a      	cmp	r3, #10
 8010f34:	d106      	bne.n	8010f44 <tcp_slowtmr+0x70>
 8010f36:	4b82      	ldr	r3, [pc, #520]	; (8011140 <tcp_slowtmr+0x26c>)
 8010f38:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010f3c:	4984      	ldr	r1, [pc, #528]	; (8011150 <tcp_slowtmr+0x27c>)
 8010f3e:	4882      	ldr	r0, [pc, #520]	; (8011148 <tcp_slowtmr+0x274>)
 8010f40:	f009 f8fa 	bl	801a138 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f46:	7f9a      	ldrb	r2, [r3, #30]
 8010f48:	4b7b      	ldr	r3, [pc, #492]	; (8011138 <tcp_slowtmr+0x264>)
 8010f4a:	781b      	ldrb	r3, [r3, #0]
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	d105      	bne.n	8010f5c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8010f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f52:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f56:	68db      	ldr	r3, [r3, #12]
 8010f58:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8010f5a:	e272      	b.n	8011442 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010f5c:	4b76      	ldr	r3, [pc, #472]	; (8011138 <tcp_slowtmr+0x264>)
 8010f5e:	781a      	ldrb	r2, [r3, #0]
 8010f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f62:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010f64:	2300      	movs	r3, #0
 8010f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f72:	7d1b      	ldrb	r3, [r3, #20]
 8010f74:	2b02      	cmp	r3, #2
 8010f76:	d10a      	bne.n	8010f8e <tcp_slowtmr+0xba>
 8010f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010f7e:	2b05      	cmp	r3, #5
 8010f80:	d905      	bls.n	8010f8e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8010f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f86:	3301      	adds	r3, #1
 8010f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010f8c:	e11e      	b.n	80111cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8010f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010f94:	2b0b      	cmp	r3, #11
 8010f96:	d905      	bls.n	8010fa4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f9c:	3301      	adds	r3, #1
 8010f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010fa2:	e113      	b.n	80111cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d075      	beq.n	801109a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8010fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d006      	beq.n	8010fc4 <tcp_slowtmr+0xf0>
 8010fb6:	4b62      	ldr	r3, [pc, #392]	; (8011140 <tcp_slowtmr+0x26c>)
 8010fb8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010fbc:	4965      	ldr	r1, [pc, #404]	; (8011154 <tcp_slowtmr+0x280>)
 8010fbe:	4862      	ldr	r0, [pc, #392]	; (8011148 <tcp_slowtmr+0x274>)
 8010fc0:	f009 f8ba 	bl	801a138 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d106      	bne.n	8010fda <tcp_slowtmr+0x106>
 8010fcc:	4b5c      	ldr	r3, [pc, #368]	; (8011140 <tcp_slowtmr+0x26c>)
 8010fce:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010fd2:	4961      	ldr	r1, [pc, #388]	; (8011158 <tcp_slowtmr+0x284>)
 8010fd4:	485c      	ldr	r0, [pc, #368]	; (8011148 <tcp_slowtmr+0x274>)
 8010fd6:	f009 f8af 	bl	801a138 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fdc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010fe0:	2b0b      	cmp	r3, #11
 8010fe2:	d905      	bls.n	8010ff0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8010fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fe8:	3301      	adds	r3, #1
 8010fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010fee:	e0ed      	b.n	80111cc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010ff6:	3b01      	subs	r3, #1
 8010ff8:	4a58      	ldr	r2, [pc, #352]	; (801115c <tcp_slowtmr+0x288>)
 8010ffa:	5cd3      	ldrb	r3, [r2, r3]
 8010ffc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8010ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011000:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011004:	7c7a      	ldrb	r2, [r7, #17]
 8011006:	429a      	cmp	r2, r3
 8011008:	d907      	bls.n	801101a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801100a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801100c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011010:	3301      	adds	r3, #1
 8011012:	b2da      	uxtb	r2, r3
 8011014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011016:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801101a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801101c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011020:	7c7a      	ldrb	r2, [r7, #17]
 8011022:	429a      	cmp	r2, r3
 8011024:	f200 80d2 	bhi.w	80111cc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011028:	2301      	movs	r3, #1
 801102a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801102c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801102e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011032:	2b00      	cmp	r3, #0
 8011034:	d108      	bne.n	8011048 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011038:	f005 f936 	bl	80162a8 <tcp_zero_window_probe>
 801103c:	4603      	mov	r3, r0
 801103e:	2b00      	cmp	r3, #0
 8011040:	d014      	beq.n	801106c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011042:	2300      	movs	r3, #0
 8011044:	623b      	str	r3, [r7, #32]
 8011046:	e011      	b.n	801106c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801104e:	4619      	mov	r1, r3
 8011050:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011052:	f003 fffb 	bl	801504c <tcp_split_unsent_seg>
 8011056:	4603      	mov	r3, r0
 8011058:	2b00      	cmp	r3, #0
 801105a:	d107      	bne.n	801106c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801105c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801105e:	f004 fa7b 	bl	8015558 <tcp_output>
 8011062:	4603      	mov	r3, r0
 8011064:	2b00      	cmp	r3, #0
 8011066:	d101      	bne.n	801106c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011068:	2300      	movs	r3, #0
 801106a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801106c:	6a3b      	ldr	r3, [r7, #32]
 801106e:	2b00      	cmp	r3, #0
 8011070:	f000 80ac 	beq.w	80111cc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011076:	2200      	movs	r2, #0
 8011078:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801107e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011082:	2b06      	cmp	r3, #6
 8011084:	f200 80a2 	bhi.w	80111cc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801108e:	3301      	adds	r3, #1
 8011090:	b2da      	uxtb	r2, r3
 8011092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011094:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011098:	e098      	b.n	80111cc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801109a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801109c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	db0f      	blt.n	80110c4 <tcp_slowtmr+0x1f0>
 80110a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80110aa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80110ae:	4293      	cmp	r3, r2
 80110b0:	d008      	beq.n	80110c4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80110b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	3301      	adds	r3, #1
 80110bc:	b29b      	uxth	r3, r3
 80110be:	b21a      	sxth	r2, r3
 80110c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80110c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80110ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110cc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80110d0:	429a      	cmp	r2, r3
 80110d2:	db7b      	blt.n	80111cc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80110d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110d6:	f004 fd31 	bl	8015b3c <tcp_rexmit_rto_prepare>
 80110da:	4603      	mov	r3, r0
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d007      	beq.n	80110f0 <tcp_slowtmr+0x21c>
 80110e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d171      	bne.n	80111cc <tcp_slowtmr+0x2f8>
 80110e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d06d      	beq.n	80111cc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80110f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f2:	7d1b      	ldrb	r3, [r3, #20]
 80110f4:	2b02      	cmp	r3, #2
 80110f6:	d03a      	beq.n	801116e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80110f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80110fe:	2b0c      	cmp	r3, #12
 8011100:	bf28      	it	cs
 8011102:	230c      	movcs	r3, #12
 8011104:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011108:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801110c:	10db      	asrs	r3, r3, #3
 801110e:	b21b      	sxth	r3, r3
 8011110:	461a      	mov	r2, r3
 8011112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011114:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011118:	4413      	add	r3, r2
 801111a:	7efa      	ldrb	r2, [r7, #27]
 801111c:	4910      	ldr	r1, [pc, #64]	; (8011160 <tcp_slowtmr+0x28c>)
 801111e:	5c8a      	ldrb	r2, [r1, r2]
 8011120:	4093      	lsls	r3, r2
 8011122:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011124:	697b      	ldr	r3, [r7, #20]
 8011126:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801112a:	4293      	cmp	r3, r2
 801112c:	dc1a      	bgt.n	8011164 <tcp_slowtmr+0x290>
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	b21a      	sxth	r2, r3
 8011132:	e019      	b.n	8011168 <tcp_slowtmr+0x294>
 8011134:	20018910 	.word	0x20018910
 8011138:	20000816 	.word	0x20000816
 801113c:	2001890c 	.word	0x2001890c
 8011140:	0801d3d0 	.word	0x0801d3d0
 8011144:	0801d714 	.word	0x0801d714
 8011148:	0801d414 	.word	0x0801d414
 801114c:	0801d740 	.word	0x0801d740
 8011150:	0801d76c 	.word	0x0801d76c
 8011154:	0801d79c 	.word	0x0801d79c
 8011158:	0801d7d0 	.word	0x0801d7d0
 801115c:	0801f52c 	.word	0x0801f52c
 8011160:	0801f51c 	.word	0x0801f51c
 8011164:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011170:	2200      	movs	r2, #0
 8011172:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011176:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011180:	4293      	cmp	r3, r2
 8011182:	bf28      	it	cs
 8011184:	4613      	movcs	r3, r2
 8011186:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011188:	8a7b      	ldrh	r3, [r7, #18]
 801118a:	085b      	lsrs	r3, r3, #1
 801118c:	b29a      	uxth	r2, r3
 801118e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011190:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011196:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801119a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801119c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801119e:	005b      	lsls	r3, r3, #1
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d206      	bcs.n	80111b4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80111a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111aa:	005b      	lsls	r3, r3, #1
 80111ac:	b29a      	uxth	r2, r3
 80111ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80111b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80111b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80111be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c0:	2200      	movs	r2, #0
 80111c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80111c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111c8:	f004 fd28 	bl	8015c1c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80111cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ce:	7d1b      	ldrb	r3, [r3, #20]
 80111d0:	2b06      	cmp	r3, #6
 80111d2:	d111      	bne.n	80111f8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80111d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d6:	8b5b      	ldrh	r3, [r3, #26]
 80111d8:	f003 0310 	and.w	r3, r3, #16
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d00b      	beq.n	80111f8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80111e0:	4b9d      	ldr	r3, [pc, #628]	; (8011458 <tcp_slowtmr+0x584>)
 80111e2:	681a      	ldr	r2, [r3, #0]
 80111e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e6:	6a1b      	ldr	r3, [r3, #32]
 80111e8:	1ad3      	subs	r3, r2, r3
 80111ea:	2b28      	cmp	r3, #40	; 0x28
 80111ec:	d904      	bls.n	80111f8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80111ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111f2:	3301      	adds	r3, #1
 80111f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80111f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fa:	7a5b      	ldrb	r3, [r3, #9]
 80111fc:	f003 0308 	and.w	r3, r3, #8
 8011200:	2b00      	cmp	r3, #0
 8011202:	d04c      	beq.n	801129e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8011204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011206:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011208:	2b04      	cmp	r3, #4
 801120a:	d003      	beq.n	8011214 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011210:	2b07      	cmp	r3, #7
 8011212:	d144      	bne.n	801129e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011214:	4b90      	ldr	r3, [pc, #576]	; (8011458 <tcp_slowtmr+0x584>)
 8011216:	681a      	ldr	r2, [r3, #0]
 8011218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121a:	6a1b      	ldr	r3, [r3, #32]
 801121c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011224:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8011228:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801122c:	498b      	ldr	r1, [pc, #556]	; (801145c <tcp_slowtmr+0x588>)
 801122e:	fba1 1303 	umull	r1, r3, r1, r3
 8011232:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011234:	429a      	cmp	r2, r3
 8011236:	d90a      	bls.n	801124e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801123c:	3301      	adds	r3, #1
 801123e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011242:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011246:	3301      	adds	r3, #1
 8011248:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801124c:	e027      	b.n	801129e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801124e:	4b82      	ldr	r3, [pc, #520]	; (8011458 <tcp_slowtmr+0x584>)
 8011250:	681a      	ldr	r2, [r3, #0]
 8011252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011254:	6a1b      	ldr	r3, [r3, #32]
 8011256:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801125e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011260:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011264:	4618      	mov	r0, r3
 8011266:	4b7e      	ldr	r3, [pc, #504]	; (8011460 <tcp_slowtmr+0x58c>)
 8011268:	fb03 f300 	mul.w	r3, r3, r0
 801126c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801126e:	497b      	ldr	r1, [pc, #492]	; (801145c <tcp_slowtmr+0x588>)
 8011270:	fba1 1303 	umull	r1, r3, r1, r3
 8011274:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011276:	429a      	cmp	r2, r3
 8011278:	d911      	bls.n	801129e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801127a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801127c:	f004 ffd4 	bl	8016228 <tcp_keepalive>
 8011280:	4603      	mov	r3, r0
 8011282:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011286:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801128a:	2b00      	cmp	r3, #0
 801128c:	d107      	bne.n	801129e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011290:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011294:	3301      	adds	r3, #1
 8011296:	b2da      	uxtb	r2, r3
 8011298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801129e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d011      	beq.n	80112ca <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80112a6:	4b6c      	ldr	r3, [pc, #432]	; (8011458 <tcp_slowtmr+0x584>)
 80112a8:	681a      	ldr	r2, [r3, #0]
 80112aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ac:	6a1b      	ldr	r3, [r3, #32]
 80112ae:	1ad2      	subs	r2, r2, r3
 80112b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80112b6:	4619      	mov	r1, r3
 80112b8:	460b      	mov	r3, r1
 80112ba:	005b      	lsls	r3, r3, #1
 80112bc:	440b      	add	r3, r1
 80112be:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d302      	bcc.n	80112ca <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80112c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112c6:	f000 fe8d 	bl	8011fe4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80112ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112cc:	7d1b      	ldrb	r3, [r3, #20]
 80112ce:	2b03      	cmp	r3, #3
 80112d0:	d10b      	bne.n	80112ea <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80112d2:	4b61      	ldr	r3, [pc, #388]	; (8011458 <tcp_slowtmr+0x584>)
 80112d4:	681a      	ldr	r2, [r3, #0]
 80112d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d8:	6a1b      	ldr	r3, [r3, #32]
 80112da:	1ad3      	subs	r3, r2, r3
 80112dc:	2b28      	cmp	r3, #40	; 0x28
 80112de:	d904      	bls.n	80112ea <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80112e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112e4:	3301      	adds	r3, #1
 80112e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80112ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ec:	7d1b      	ldrb	r3, [r3, #20]
 80112ee:	2b09      	cmp	r3, #9
 80112f0:	d10b      	bne.n	801130a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80112f2:	4b59      	ldr	r3, [pc, #356]	; (8011458 <tcp_slowtmr+0x584>)
 80112f4:	681a      	ldr	r2, [r3, #0]
 80112f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f8:	6a1b      	ldr	r3, [r3, #32]
 80112fa:	1ad3      	subs	r3, r2, r3
 80112fc:	2bf0      	cmp	r3, #240	; 0xf0
 80112fe:	d904      	bls.n	801130a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8011300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011304:	3301      	adds	r3, #1
 8011306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801130a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801130e:	2b00      	cmp	r3, #0
 8011310:	d060      	beq.n	80113d4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011318:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801131a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801131c:	f000 fcae 	bl	8011c7c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011322:	2b00      	cmp	r3, #0
 8011324:	d010      	beq.n	8011348 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011326:	4b4f      	ldr	r3, [pc, #316]	; (8011464 <tcp_slowtmr+0x590>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801132c:	429a      	cmp	r2, r3
 801132e:	d106      	bne.n	801133e <tcp_slowtmr+0x46a>
 8011330:	4b4d      	ldr	r3, [pc, #308]	; (8011468 <tcp_slowtmr+0x594>)
 8011332:	f240 526d 	movw	r2, #1389	; 0x56d
 8011336:	494d      	ldr	r1, [pc, #308]	; (801146c <tcp_slowtmr+0x598>)
 8011338:	484d      	ldr	r0, [pc, #308]	; (8011470 <tcp_slowtmr+0x59c>)
 801133a:	f008 fefd 	bl	801a138 <iprintf>
        prev->next = pcb->next;
 801133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011340:	68da      	ldr	r2, [r3, #12]
 8011342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011344:	60da      	str	r2, [r3, #12]
 8011346:	e00f      	b.n	8011368 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011348:	4b46      	ldr	r3, [pc, #280]	; (8011464 <tcp_slowtmr+0x590>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801134e:	429a      	cmp	r2, r3
 8011350:	d006      	beq.n	8011360 <tcp_slowtmr+0x48c>
 8011352:	4b45      	ldr	r3, [pc, #276]	; (8011468 <tcp_slowtmr+0x594>)
 8011354:	f240 5271 	movw	r2, #1393	; 0x571
 8011358:	4946      	ldr	r1, [pc, #280]	; (8011474 <tcp_slowtmr+0x5a0>)
 801135a:	4845      	ldr	r0, [pc, #276]	; (8011470 <tcp_slowtmr+0x59c>)
 801135c:	f008 feec 	bl	801a138 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011362:	68db      	ldr	r3, [r3, #12]
 8011364:	4a3f      	ldr	r2, [pc, #252]	; (8011464 <tcp_slowtmr+0x590>)
 8011366:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011368:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801136c:	2b00      	cmp	r3, #0
 801136e:	d013      	beq.n	8011398 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011372:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011376:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011378:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801137a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137c:	3304      	adds	r3, #4
 801137e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011380:	8ad2      	ldrh	r2, [r2, #22]
 8011382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011384:	8b09      	ldrh	r1, [r1, #24]
 8011386:	9102      	str	r1, [sp, #8]
 8011388:	9201      	str	r2, [sp, #4]
 801138a:	9300      	str	r3, [sp, #0]
 801138c:	462b      	mov	r3, r5
 801138e:	4622      	mov	r2, r4
 8011390:	4601      	mov	r1, r0
 8011392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011394:	f004 fe94 	bl	80160c0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801139a:	691b      	ldr	r3, [r3, #16]
 801139c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801139e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a0:	7d1b      	ldrb	r3, [r3, #20]
 80113a2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80113a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80113a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113aa:	68db      	ldr	r3, [r3, #12]
 80113ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80113ae:	6838      	ldr	r0, [r7, #0]
 80113b0:	f7ff f892 	bl	80104d8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80113b4:	4b30      	ldr	r3, [pc, #192]	; (8011478 <tcp_slowtmr+0x5a4>)
 80113b6:	2200      	movs	r2, #0
 80113b8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d004      	beq.n	80113ca <tcp_slowtmr+0x4f6>
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	f06f 010c 	mvn.w	r1, #12
 80113c6:	68b8      	ldr	r0, [r7, #8]
 80113c8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80113ca:	4b2b      	ldr	r3, [pc, #172]	; (8011478 <tcp_slowtmr+0x5a4>)
 80113cc:	781b      	ldrb	r3, [r3, #0]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d037      	beq.n	8011442 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80113d2:	e590      	b.n	8010ef6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80113d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80113d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80113de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e0:	7f1b      	ldrb	r3, [r3, #28]
 80113e2:	3301      	adds	r3, #1
 80113e4:	b2da      	uxtb	r2, r3
 80113e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80113ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ec:	7f1a      	ldrb	r2, [r3, #28]
 80113ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f0:	7f5b      	ldrb	r3, [r3, #29]
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d325      	bcc.n	8011442 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80113f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f8:	2200      	movs	r2, #0
 80113fa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80113fc:	4b1e      	ldr	r3, [pc, #120]	; (8011478 <tcp_slowtmr+0x5a4>)
 80113fe:	2200      	movs	r2, #0
 8011400:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011408:	2b00      	cmp	r3, #0
 801140a:	d00b      	beq.n	8011424 <tcp_slowtmr+0x550>
 801140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011414:	6912      	ldr	r2, [r2, #16]
 8011416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011418:	4610      	mov	r0, r2
 801141a:	4798      	blx	r3
 801141c:	4603      	mov	r3, r0
 801141e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011422:	e002      	b.n	801142a <tcp_slowtmr+0x556>
 8011424:	2300      	movs	r3, #0
 8011426:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801142a:	4b13      	ldr	r3, [pc, #76]	; (8011478 <tcp_slowtmr+0x5a4>)
 801142c:	781b      	ldrb	r3, [r3, #0]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d000      	beq.n	8011434 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8011432:	e560      	b.n	8010ef6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011434:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011438:	2b00      	cmp	r3, #0
 801143a:	d102      	bne.n	8011442 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801143c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801143e:	f004 f88b 	bl	8015558 <tcp_output>
  while (pcb != NULL) {
 8011442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011444:	2b00      	cmp	r3, #0
 8011446:	f47f ad5c 	bne.w	8010f02 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801144a:	2300      	movs	r3, #0
 801144c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801144e:	4b0b      	ldr	r3, [pc, #44]	; (801147c <tcp_slowtmr+0x5a8>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011454:	e067      	b.n	8011526 <tcp_slowtmr+0x652>
 8011456:	bf00      	nop
 8011458:	20018910 	.word	0x20018910
 801145c:	10624dd3 	.word	0x10624dd3
 8011460:	000124f8 	.word	0x000124f8
 8011464:	2001890c 	.word	0x2001890c
 8011468:	0801d3d0 	.word	0x0801d3d0
 801146c:	0801d808 	.word	0x0801d808
 8011470:	0801d414 	.word	0x0801d414
 8011474:	0801d834 	.word	0x0801d834
 8011478:	20018908 	.word	0x20018908
 801147c:	2001891c 	.word	0x2001891c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011482:	7d1b      	ldrb	r3, [r3, #20]
 8011484:	2b0a      	cmp	r3, #10
 8011486:	d006      	beq.n	8011496 <tcp_slowtmr+0x5c2>
 8011488:	4b2b      	ldr	r3, [pc, #172]	; (8011538 <tcp_slowtmr+0x664>)
 801148a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801148e:	492b      	ldr	r1, [pc, #172]	; (801153c <tcp_slowtmr+0x668>)
 8011490:	482b      	ldr	r0, [pc, #172]	; (8011540 <tcp_slowtmr+0x66c>)
 8011492:	f008 fe51 	bl	801a138 <iprintf>
    pcb_remove = 0;
 8011496:	2300      	movs	r3, #0
 8011498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801149c:	4b29      	ldr	r3, [pc, #164]	; (8011544 <tcp_slowtmr+0x670>)
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a2:	6a1b      	ldr	r3, [r3, #32]
 80114a4:	1ad3      	subs	r3, r2, r3
 80114a6:	2bf0      	cmp	r3, #240	; 0xf0
 80114a8:	d904      	bls.n	80114b4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80114aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114ae:	3301      	adds	r3, #1
 80114b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80114b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d02f      	beq.n	801151c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80114bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114be:	f000 fbdd 	bl	8011c7c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80114c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d010      	beq.n	80114ea <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80114c8:	4b1f      	ldr	r3, [pc, #124]	; (8011548 <tcp_slowtmr+0x674>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114ce:	429a      	cmp	r2, r3
 80114d0:	d106      	bne.n	80114e0 <tcp_slowtmr+0x60c>
 80114d2:	4b19      	ldr	r3, [pc, #100]	; (8011538 <tcp_slowtmr+0x664>)
 80114d4:	f240 52af 	movw	r2, #1455	; 0x5af
 80114d8:	491c      	ldr	r1, [pc, #112]	; (801154c <tcp_slowtmr+0x678>)
 80114da:	4819      	ldr	r0, [pc, #100]	; (8011540 <tcp_slowtmr+0x66c>)
 80114dc:	f008 fe2c 	bl	801a138 <iprintf>
        prev->next = pcb->next;
 80114e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114e2:	68da      	ldr	r2, [r3, #12]
 80114e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e6:	60da      	str	r2, [r3, #12]
 80114e8:	e00f      	b.n	801150a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80114ea:	4b17      	ldr	r3, [pc, #92]	; (8011548 <tcp_slowtmr+0x674>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d006      	beq.n	8011502 <tcp_slowtmr+0x62e>
 80114f4:	4b10      	ldr	r3, [pc, #64]	; (8011538 <tcp_slowtmr+0x664>)
 80114f6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80114fa:	4915      	ldr	r1, [pc, #84]	; (8011550 <tcp_slowtmr+0x67c>)
 80114fc:	4810      	ldr	r0, [pc, #64]	; (8011540 <tcp_slowtmr+0x66c>)
 80114fe:	f008 fe1b 	bl	801a138 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011504:	68db      	ldr	r3, [r3, #12]
 8011506:	4a10      	ldr	r2, [pc, #64]	; (8011548 <tcp_slowtmr+0x674>)
 8011508:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011510:	68db      	ldr	r3, [r3, #12]
 8011512:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011514:	69f8      	ldr	r0, [r7, #28]
 8011516:	f7fe ffdf 	bl	80104d8 <tcp_free>
 801151a:	e004      	b.n	8011526 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801151c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801151e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011522:	68db      	ldr	r3, [r3, #12]
 8011524:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011528:	2b00      	cmp	r3, #0
 801152a:	d1a9      	bne.n	8011480 <tcp_slowtmr+0x5ac>
    }
  }
}
 801152c:	bf00      	nop
 801152e:	bf00      	nop
 8011530:	3730      	adds	r7, #48	; 0x30
 8011532:	46bd      	mov	sp, r7
 8011534:	bdb0      	pop	{r4, r5, r7, pc}
 8011536:	bf00      	nop
 8011538:	0801d3d0 	.word	0x0801d3d0
 801153c:	0801d860 	.word	0x0801d860
 8011540:	0801d414 	.word	0x0801d414
 8011544:	20018910 	.word	0x20018910
 8011548:	2001891c 	.word	0x2001891c
 801154c:	0801d890 	.word	0x0801d890
 8011550:	0801d8b8 	.word	0x0801d8b8

08011554 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b082      	sub	sp, #8
 8011558:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801155a:	4b2d      	ldr	r3, [pc, #180]	; (8011610 <tcp_fasttmr+0xbc>)
 801155c:	781b      	ldrb	r3, [r3, #0]
 801155e:	3301      	adds	r3, #1
 8011560:	b2da      	uxtb	r2, r3
 8011562:	4b2b      	ldr	r3, [pc, #172]	; (8011610 <tcp_fasttmr+0xbc>)
 8011564:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011566:	4b2b      	ldr	r3, [pc, #172]	; (8011614 <tcp_fasttmr+0xc0>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801156c:	e048      	b.n	8011600 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	7f9a      	ldrb	r2, [r3, #30]
 8011572:	4b27      	ldr	r3, [pc, #156]	; (8011610 <tcp_fasttmr+0xbc>)
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	429a      	cmp	r2, r3
 8011578:	d03f      	beq.n	80115fa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801157a:	4b25      	ldr	r3, [pc, #148]	; (8011610 <tcp_fasttmr+0xbc>)
 801157c:	781a      	ldrb	r2, [r3, #0]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	8b5b      	ldrh	r3, [r3, #26]
 8011586:	f003 0301 	and.w	r3, r3, #1
 801158a:	2b00      	cmp	r3, #0
 801158c:	d010      	beq.n	80115b0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	8b5b      	ldrh	r3, [r3, #26]
 8011592:	f043 0302 	orr.w	r3, r3, #2
 8011596:	b29a      	uxth	r2, r3
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	f003 ffdb 	bl	8015558 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	8b5b      	ldrh	r3, [r3, #26]
 80115a6:	f023 0303 	bic.w	r3, r3, #3
 80115aa:	b29a      	uxth	r2, r3
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	8b5b      	ldrh	r3, [r3, #26]
 80115b4:	f003 0308 	and.w	r3, r3, #8
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d009      	beq.n	80115d0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	8b5b      	ldrh	r3, [r3, #26]
 80115c0:	f023 0308 	bic.w	r3, r3, #8
 80115c4:	b29a      	uxth	r2, r3
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f7ff f918 	bl	8010800 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	68db      	ldr	r3, [r3, #12]
 80115d4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d00a      	beq.n	80115f4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80115de:	4b0e      	ldr	r3, [pc, #56]	; (8011618 <tcp_fasttmr+0xc4>)
 80115e0:	2200      	movs	r2, #0
 80115e2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f000 f819 	bl	801161c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80115ea:	4b0b      	ldr	r3, [pc, #44]	; (8011618 <tcp_fasttmr+0xc4>)
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d000      	beq.n	80115f4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80115f2:	e7b8      	b.n	8011566 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	607b      	str	r3, [r7, #4]
 80115f8:	e002      	b.n	8011600 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	68db      	ldr	r3, [r3, #12]
 80115fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d1b3      	bne.n	801156e <tcp_fasttmr+0x1a>
    }
  }
}
 8011606:	bf00      	nop
 8011608:	bf00      	nop
 801160a:	3708      	adds	r7, #8
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}
 8011610:	20000816 	.word	0x20000816
 8011614:	2001890c 	.word	0x2001890c
 8011618:	20018908 	.word	0x20018908

0801161c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801161c:	b590      	push	{r4, r7, lr}
 801161e:	b085      	sub	sp, #20
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d109      	bne.n	801163e <tcp_process_refused_data+0x22>
 801162a:	4b38      	ldr	r3, [pc, #224]	; (801170c <tcp_process_refused_data+0xf0>)
 801162c:	f240 6209 	movw	r2, #1545	; 0x609
 8011630:	4937      	ldr	r1, [pc, #220]	; (8011710 <tcp_process_refused_data+0xf4>)
 8011632:	4838      	ldr	r0, [pc, #224]	; (8011714 <tcp_process_refused_data+0xf8>)
 8011634:	f008 fd80 	bl	801a138 <iprintf>
 8011638:	f06f 030f 	mvn.w	r3, #15
 801163c:	e061      	b.n	8011702 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011642:	7b5b      	ldrb	r3, [r3, #13]
 8011644:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801164a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2200      	movs	r2, #0
 8011650:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011658:	2b00      	cmp	r3, #0
 801165a:	d00b      	beq.n	8011674 <tcp_process_refused_data+0x58>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	6918      	ldr	r0, [r3, #16]
 8011666:	2300      	movs	r3, #0
 8011668:	68ba      	ldr	r2, [r7, #8]
 801166a:	6879      	ldr	r1, [r7, #4]
 801166c:	47a0      	blx	r4
 801166e:	4603      	mov	r3, r0
 8011670:	73fb      	strb	r3, [r7, #15]
 8011672:	e007      	b.n	8011684 <tcp_process_refused_data+0x68>
 8011674:	2300      	movs	r3, #0
 8011676:	68ba      	ldr	r2, [r7, #8]
 8011678:	6879      	ldr	r1, [r7, #4]
 801167a:	2000      	movs	r0, #0
 801167c:	f000 f8a6 	bl	80117cc <tcp_recv_null>
 8011680:	4603      	mov	r3, r0
 8011682:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d12b      	bne.n	80116e4 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801168c:	7bbb      	ldrb	r3, [r7, #14]
 801168e:	f003 0320 	and.w	r3, r3, #32
 8011692:	2b00      	cmp	r3, #0
 8011694:	d034      	beq.n	8011700 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801169a:	f241 0268 	movw	r2, #4200	; 0x1068
 801169e:	4293      	cmp	r3, r2
 80116a0:	d005      	beq.n	80116ae <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116a6:	3301      	adds	r3, #1
 80116a8:	b29a      	uxth	r2, r3
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d00b      	beq.n	80116d0 <tcp_process_refused_data+0xb4>
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6918      	ldr	r0, [r3, #16]
 80116c2:	2300      	movs	r3, #0
 80116c4:	2200      	movs	r2, #0
 80116c6:	6879      	ldr	r1, [r7, #4]
 80116c8:	47a0      	blx	r4
 80116ca:	4603      	mov	r3, r0
 80116cc:	73fb      	strb	r3, [r7, #15]
 80116ce:	e001      	b.n	80116d4 <tcp_process_refused_data+0xb8>
 80116d0:	2300      	movs	r3, #0
 80116d2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80116d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116d8:	f113 0f0d 	cmn.w	r3, #13
 80116dc:	d110      	bne.n	8011700 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80116de:	f06f 030c 	mvn.w	r3, #12
 80116e2:	e00e      	b.n	8011702 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80116e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116e8:	f113 0f0d 	cmn.w	r3, #13
 80116ec:	d102      	bne.n	80116f4 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80116ee:	f06f 030c 	mvn.w	r3, #12
 80116f2:	e006      	b.n	8011702 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	68ba      	ldr	r2, [r7, #8]
 80116f8:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80116fa:	f06f 0304 	mvn.w	r3, #4
 80116fe:	e000      	b.n	8011702 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8011700:	2300      	movs	r3, #0
}
 8011702:	4618      	mov	r0, r3
 8011704:	3714      	adds	r7, #20
 8011706:	46bd      	mov	sp, r7
 8011708:	bd90      	pop	{r4, r7, pc}
 801170a:	bf00      	nop
 801170c:	0801d3d0 	.word	0x0801d3d0
 8011710:	0801d8e0 	.word	0x0801d8e0
 8011714:	0801d414 	.word	0x0801d414

08011718 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b084      	sub	sp, #16
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011720:	e007      	b.n	8011732 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f000 f80a 	bl	8011742 <tcp_seg_free>
    seg = next;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d1f4      	bne.n	8011722 <tcp_segs_free+0xa>
  }
}
 8011738:	bf00      	nop
 801173a:	bf00      	nop
 801173c:	3710      	adds	r7, #16
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}

08011742 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011742:	b580      	push	{r7, lr}
 8011744:	b082      	sub	sp, #8
 8011746:	af00      	add	r7, sp, #0
 8011748:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d00c      	beq.n	801176a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	685b      	ldr	r3, [r3, #4]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d004      	beq.n	8011762 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	685b      	ldr	r3, [r3, #4]
 801175c:	4618      	mov	r0, r3
 801175e:	f7fe fb89 	bl	800fe74 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011762:	6879      	ldr	r1, [r7, #4]
 8011764:	2003      	movs	r0, #3
 8011766:	f7fd fd73 	bl	800f250 <memp_free>
  }
}
 801176a:	bf00      	nop
 801176c:	3708      	adds	r7, #8
 801176e:	46bd      	mov	sp, r7
 8011770:	bd80      	pop	{r7, pc}
	...

08011774 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b084      	sub	sp, #16
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d106      	bne.n	8011790 <tcp_seg_copy+0x1c>
 8011782:	4b0f      	ldr	r3, [pc, #60]	; (80117c0 <tcp_seg_copy+0x4c>)
 8011784:	f240 6282 	movw	r2, #1666	; 0x682
 8011788:	490e      	ldr	r1, [pc, #56]	; (80117c4 <tcp_seg_copy+0x50>)
 801178a:	480f      	ldr	r0, [pc, #60]	; (80117c8 <tcp_seg_copy+0x54>)
 801178c:	f008 fcd4 	bl	801a138 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011790:	2003      	movs	r0, #3
 8011792:	f7fd fd11 	bl	800f1b8 <memp_malloc>
 8011796:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d101      	bne.n	80117a2 <tcp_seg_copy+0x2e>
    return NULL;
 801179e:	2300      	movs	r3, #0
 80117a0:	e00a      	b.n	80117b8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80117a2:	2210      	movs	r2, #16
 80117a4:	6879      	ldr	r1, [r7, #4]
 80117a6:	68f8      	ldr	r0, [r7, #12]
 80117a8:	f007 ff9c 	bl	80196e4 <memcpy>
  pbuf_ref(cseg->p);
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7fe fbff 	bl	800ffb4 <pbuf_ref>
  return cseg;
 80117b6:	68fb      	ldr	r3, [r7, #12]
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	3710      	adds	r7, #16
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd80      	pop	{r7, pc}
 80117c0:	0801d3d0 	.word	0x0801d3d0
 80117c4:	0801d924 	.word	0x0801d924
 80117c8:	0801d414 	.word	0x0801d414

080117cc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b084      	sub	sp, #16
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	60f8      	str	r0, [r7, #12]
 80117d4:	60b9      	str	r1, [r7, #8]
 80117d6:	607a      	str	r2, [r7, #4]
 80117d8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d109      	bne.n	80117f4 <tcp_recv_null+0x28>
 80117e0:	4b12      	ldr	r3, [pc, #72]	; (801182c <tcp_recv_null+0x60>)
 80117e2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80117e6:	4912      	ldr	r1, [pc, #72]	; (8011830 <tcp_recv_null+0x64>)
 80117e8:	4812      	ldr	r0, [pc, #72]	; (8011834 <tcp_recv_null+0x68>)
 80117ea:	f008 fca5 	bl	801a138 <iprintf>
 80117ee:	f06f 030f 	mvn.w	r3, #15
 80117f2:	e016      	b.n	8011822 <tcp_recv_null+0x56>

  if (p != NULL) {
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d009      	beq.n	801180e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	891b      	ldrh	r3, [r3, #8]
 80117fe:	4619      	mov	r1, r3
 8011800:	68b8      	ldr	r0, [r7, #8]
 8011802:	f7ff f9b7 	bl	8010b74 <tcp_recved>
    pbuf_free(p);
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f7fe fb34 	bl	800fe74 <pbuf_free>
 801180c:	e008      	b.n	8011820 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801180e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d104      	bne.n	8011820 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011816:	68b8      	ldr	r0, [r7, #8]
 8011818:	f7ff f85c 	bl	80108d4 <tcp_close>
 801181c:	4603      	mov	r3, r0
 801181e:	e000      	b.n	8011822 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011820:	2300      	movs	r3, #0
}
 8011822:	4618      	mov	r0, r3
 8011824:	3710      	adds	r7, #16
 8011826:	46bd      	mov	sp, r7
 8011828:	bd80      	pop	{r7, pc}
 801182a:	bf00      	nop
 801182c:	0801d3d0 	.word	0x0801d3d0
 8011830:	0801d940 	.word	0x0801d940
 8011834:	0801d414 	.word	0x0801d414

08011838 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b086      	sub	sp, #24
 801183c:	af00      	add	r7, sp, #0
 801183e:	4603      	mov	r3, r0
 8011840:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011846:	2b00      	cmp	r3, #0
 8011848:	db01      	blt.n	801184e <tcp_kill_prio+0x16>
 801184a:	79fb      	ldrb	r3, [r7, #7]
 801184c:	e000      	b.n	8011850 <tcp_kill_prio+0x18>
 801184e:	237f      	movs	r3, #127	; 0x7f
 8011850:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011852:	7afb      	ldrb	r3, [r7, #11]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d034      	beq.n	80118c2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011858:	7afb      	ldrb	r3, [r7, #11]
 801185a:	3b01      	subs	r3, #1
 801185c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801185e:	2300      	movs	r3, #0
 8011860:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011862:	2300      	movs	r3, #0
 8011864:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011866:	4b19      	ldr	r3, [pc, #100]	; (80118cc <tcp_kill_prio+0x94>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	617b      	str	r3, [r7, #20]
 801186c:	e01f      	b.n	80118ae <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	7d5b      	ldrb	r3, [r3, #21]
 8011872:	7afa      	ldrb	r2, [r7, #11]
 8011874:	429a      	cmp	r2, r3
 8011876:	d80c      	bhi.n	8011892 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801187c:	7afa      	ldrb	r2, [r7, #11]
 801187e:	429a      	cmp	r2, r3
 8011880:	d112      	bne.n	80118a8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011882:	4b13      	ldr	r3, [pc, #76]	; (80118d0 <tcp_kill_prio+0x98>)
 8011884:	681a      	ldr	r2, [r3, #0]
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	6a1b      	ldr	r3, [r3, #32]
 801188a:	1ad3      	subs	r3, r2, r3
 801188c:	68fa      	ldr	r2, [r7, #12]
 801188e:	429a      	cmp	r2, r3
 8011890:	d80a      	bhi.n	80118a8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011892:	4b0f      	ldr	r3, [pc, #60]	; (80118d0 <tcp_kill_prio+0x98>)
 8011894:	681a      	ldr	r2, [r3, #0]
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	6a1b      	ldr	r3, [r3, #32]
 801189a:	1ad3      	subs	r3, r2, r3
 801189c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801189e:	697b      	ldr	r3, [r7, #20]
 80118a0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80118a2:	697b      	ldr	r3, [r7, #20]
 80118a4:	7d5b      	ldrb	r3, [r3, #21]
 80118a6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	68db      	ldr	r3, [r3, #12]
 80118ac:	617b      	str	r3, [r7, #20]
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d1dc      	bne.n	801186e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d004      	beq.n	80118c4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80118ba:	6938      	ldr	r0, [r7, #16]
 80118bc:	f7ff f8f4 	bl	8010aa8 <tcp_abort>
 80118c0:	e000      	b.n	80118c4 <tcp_kill_prio+0x8c>
    return;
 80118c2:	bf00      	nop
  }
}
 80118c4:	3718      	adds	r7, #24
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}
 80118ca:	bf00      	nop
 80118cc:	2001890c 	.word	0x2001890c
 80118d0:	20018910 	.word	0x20018910

080118d4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b086      	sub	sp, #24
 80118d8:	af00      	add	r7, sp, #0
 80118da:	4603      	mov	r3, r0
 80118dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80118de:	79fb      	ldrb	r3, [r7, #7]
 80118e0:	2b08      	cmp	r3, #8
 80118e2:	d009      	beq.n	80118f8 <tcp_kill_state+0x24>
 80118e4:	79fb      	ldrb	r3, [r7, #7]
 80118e6:	2b09      	cmp	r3, #9
 80118e8:	d006      	beq.n	80118f8 <tcp_kill_state+0x24>
 80118ea:	4b1a      	ldr	r3, [pc, #104]	; (8011954 <tcp_kill_state+0x80>)
 80118ec:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80118f0:	4919      	ldr	r1, [pc, #100]	; (8011958 <tcp_kill_state+0x84>)
 80118f2:	481a      	ldr	r0, [pc, #104]	; (801195c <tcp_kill_state+0x88>)
 80118f4:	f008 fc20 	bl	801a138 <iprintf>

  inactivity = 0;
 80118f8:	2300      	movs	r3, #0
 80118fa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80118fc:	2300      	movs	r3, #0
 80118fe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011900:	4b17      	ldr	r3, [pc, #92]	; (8011960 <tcp_kill_state+0x8c>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	617b      	str	r3, [r7, #20]
 8011906:	e017      	b.n	8011938 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	7d1b      	ldrb	r3, [r3, #20]
 801190c:	79fa      	ldrb	r2, [r7, #7]
 801190e:	429a      	cmp	r2, r3
 8011910:	d10f      	bne.n	8011932 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011912:	4b14      	ldr	r3, [pc, #80]	; (8011964 <tcp_kill_state+0x90>)
 8011914:	681a      	ldr	r2, [r3, #0]
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	6a1b      	ldr	r3, [r3, #32]
 801191a:	1ad3      	subs	r3, r2, r3
 801191c:	68fa      	ldr	r2, [r7, #12]
 801191e:	429a      	cmp	r2, r3
 8011920:	d807      	bhi.n	8011932 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011922:	4b10      	ldr	r3, [pc, #64]	; (8011964 <tcp_kill_state+0x90>)
 8011924:	681a      	ldr	r2, [r3, #0]
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	6a1b      	ldr	r3, [r3, #32]
 801192a:	1ad3      	subs	r3, r2, r3
 801192c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	68db      	ldr	r3, [r3, #12]
 8011936:	617b      	str	r3, [r7, #20]
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d1e4      	bne.n	8011908 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801193e:	693b      	ldr	r3, [r7, #16]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d003      	beq.n	801194c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011944:	2100      	movs	r1, #0
 8011946:	6938      	ldr	r0, [r7, #16]
 8011948:	f7fe fff0 	bl	801092c <tcp_abandon>
  }
}
 801194c:	bf00      	nop
 801194e:	3718      	adds	r7, #24
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}
 8011954:	0801d3d0 	.word	0x0801d3d0
 8011958:	0801d95c 	.word	0x0801d95c
 801195c:	0801d414 	.word	0x0801d414
 8011960:	2001890c 	.word	0x2001890c
 8011964:	20018910 	.word	0x20018910

08011968 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b084      	sub	sp, #16
 801196c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801196e:	2300      	movs	r3, #0
 8011970:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011972:	2300      	movs	r3, #0
 8011974:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011976:	4b12      	ldr	r3, [pc, #72]	; (80119c0 <tcp_kill_timewait+0x58>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	60fb      	str	r3, [r7, #12]
 801197c:	e012      	b.n	80119a4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801197e:	4b11      	ldr	r3, [pc, #68]	; (80119c4 <tcp_kill_timewait+0x5c>)
 8011980:	681a      	ldr	r2, [r3, #0]
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	6a1b      	ldr	r3, [r3, #32]
 8011986:	1ad3      	subs	r3, r2, r3
 8011988:	687a      	ldr	r2, [r7, #4]
 801198a:	429a      	cmp	r2, r3
 801198c:	d807      	bhi.n	801199e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801198e:	4b0d      	ldr	r3, [pc, #52]	; (80119c4 <tcp_kill_timewait+0x5c>)
 8011990:	681a      	ldr	r2, [r3, #0]
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	6a1b      	ldr	r3, [r3, #32]
 8011996:	1ad3      	subs	r3, r2, r3
 8011998:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	68db      	ldr	r3, [r3, #12]
 80119a2:	60fb      	str	r3, [r7, #12]
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d1e9      	bne.n	801197e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d002      	beq.n	80119b6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80119b0:	68b8      	ldr	r0, [r7, #8]
 80119b2:	f7ff f879 	bl	8010aa8 <tcp_abort>
  }
}
 80119b6:	bf00      	nop
 80119b8:	3710      	adds	r7, #16
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}
 80119be:	bf00      	nop
 80119c0:	2001891c 	.word	0x2001891c
 80119c4:	20018910 	.word	0x20018910

080119c8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b082      	sub	sp, #8
 80119cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80119ce:	4b10      	ldr	r3, [pc, #64]	; (8011a10 <tcp_handle_closepend+0x48>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80119d4:	e014      	b.n	8011a00 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	68db      	ldr	r3, [r3, #12]
 80119da:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	8b5b      	ldrh	r3, [r3, #26]
 80119e0:	f003 0308 	and.w	r3, r3, #8
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d009      	beq.n	80119fc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	8b5b      	ldrh	r3, [r3, #26]
 80119ec:	f023 0308 	bic.w	r3, r3, #8
 80119f0:	b29a      	uxth	r2, r3
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f7fe ff02 	bl	8010800 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d1e7      	bne.n	80119d6 <tcp_handle_closepend+0xe>
  }
}
 8011a06:	bf00      	nop
 8011a08:	bf00      	nop
 8011a0a:	3708      	adds	r7, #8
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}
 8011a10:	2001890c 	.word	0x2001890c

08011a14 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b084      	sub	sp, #16
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a1e:	2001      	movs	r0, #1
 8011a20:	f7fd fbca 	bl	800f1b8 <memp_malloc>
 8011a24:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d126      	bne.n	8011a7a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011a2c:	f7ff ffcc 	bl	80119c8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011a30:	f7ff ff9a 	bl	8011968 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a34:	2001      	movs	r0, #1
 8011a36:	f7fd fbbf 	bl	800f1b8 <memp_malloc>
 8011a3a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d11b      	bne.n	8011a7a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011a42:	2009      	movs	r0, #9
 8011a44:	f7ff ff46 	bl	80118d4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a48:	2001      	movs	r0, #1
 8011a4a:	f7fd fbb5 	bl	800f1b8 <memp_malloc>
 8011a4e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d111      	bne.n	8011a7a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011a56:	2008      	movs	r0, #8
 8011a58:	f7ff ff3c 	bl	80118d4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a5c:	2001      	movs	r0, #1
 8011a5e:	f7fd fbab 	bl	800f1b8 <memp_malloc>
 8011a62:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d107      	bne.n	8011a7a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011a6a:	79fb      	ldrb	r3, [r7, #7]
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f7ff fee3 	bl	8011838 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a72:	2001      	movs	r0, #1
 8011a74:	f7fd fba0 	bl	800f1b8 <memp_malloc>
 8011a78:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d03f      	beq.n	8011b00 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011a80:	229c      	movs	r2, #156	; 0x9c
 8011a82:	2100      	movs	r1, #0
 8011a84:	68f8      	ldr	r0, [r7, #12]
 8011a86:	f007 fe3b 	bl	8019700 <memset>
    pcb->prio = prio;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	79fa      	ldrb	r2, [r7, #7]
 8011a8e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	f241 0268 	movw	r2, #4200	; 0x1068
 8011a96:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	f241 0268 	movw	r2, #4200	; 0x1068
 8011aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	22ff      	movs	r2, #255	; 0xff
 8011aae:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011ab6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	2206      	movs	r2, #6
 8011abc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	2206      	movs	r2, #6
 8011ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011acc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	2201      	movs	r2, #1
 8011ad2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011ad6:	4b0d      	ldr	r3, [pc, #52]	; (8011b0c <tcp_alloc+0xf8>)
 8011ad8:	681a      	ldr	r2, [r3, #0]
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011ade:	4b0c      	ldr	r3, [pc, #48]	; (8011b10 <tcp_alloc+0xfc>)
 8011ae0:	781a      	ldrb	r2, [r3, #0]
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	f241 0268 	movw	r2, #4200	; 0x1068
 8011aec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	4a08      	ldr	r2, [pc, #32]	; (8011b14 <tcp_alloc+0x100>)
 8011af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	4a07      	ldr	r2, [pc, #28]	; (8011b18 <tcp_alloc+0x104>)
 8011afc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011b00:	68fb      	ldr	r3, [r7, #12]
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3710      	adds	r7, #16
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	20018910 	.word	0x20018910
 8011b10:	20000816 	.word	0x20000816
 8011b14:	080117cd 	.word	0x080117cd
 8011b18:	006ddd00 	.word	0x006ddd00

08011b1c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8011b20:	2040      	movs	r0, #64	; 0x40
 8011b22:	f7ff ff77 	bl	8011a14 <tcp_alloc>
 8011b26:	4603      	mov	r3, r0
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	bd80      	pop	{r7, pc}

08011b2c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8011b2c:	b480      	push	{r7}
 8011b2e:	b083      	sub	sp, #12
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
 8011b34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d002      	beq.n	8011b42 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	683a      	ldr	r2, [r7, #0]
 8011b40:	611a      	str	r2, [r3, #16]
  }
}
 8011b42:	bf00      	nop
 8011b44:	370c      	adds	r7, #12
 8011b46:	46bd      	mov	sp, r7
 8011b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4c:	4770      	bx	lr
	...

08011b50 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b082      	sub	sp, #8
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
 8011b58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d00e      	beq.n	8011b7e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	7d1b      	ldrb	r3, [r3, #20]
 8011b64:	2b01      	cmp	r3, #1
 8011b66:	d106      	bne.n	8011b76 <tcp_recv+0x26>
 8011b68:	4b07      	ldr	r3, [pc, #28]	; (8011b88 <tcp_recv+0x38>)
 8011b6a:	f240 72df 	movw	r2, #2015	; 0x7df
 8011b6e:	4907      	ldr	r1, [pc, #28]	; (8011b8c <tcp_recv+0x3c>)
 8011b70:	4807      	ldr	r0, [pc, #28]	; (8011b90 <tcp_recv+0x40>)
 8011b72:	f008 fae1 	bl	801a138 <iprintf>
    pcb->recv = recv;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	683a      	ldr	r2, [r7, #0]
 8011b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8011b7e:	bf00      	nop
 8011b80:	3708      	adds	r7, #8
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
 8011b86:	bf00      	nop
 8011b88:	0801d3d0 	.word	0x0801d3d0
 8011b8c:	0801d96c 	.word	0x0801d96c
 8011b90:	0801d414 	.word	0x0801d414

08011b94 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b082      	sub	sp, #8
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
 8011b9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d00e      	beq.n	8011bc2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	7d1b      	ldrb	r3, [r3, #20]
 8011ba8:	2b01      	cmp	r3, #1
 8011baa:	d106      	bne.n	8011bba <tcp_sent+0x26>
 8011bac:	4b07      	ldr	r3, [pc, #28]	; (8011bcc <tcp_sent+0x38>)
 8011bae:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8011bb2:	4907      	ldr	r1, [pc, #28]	; (8011bd0 <tcp_sent+0x3c>)
 8011bb4:	4807      	ldr	r0, [pc, #28]	; (8011bd4 <tcp_sent+0x40>)
 8011bb6:	f008 fabf 	bl	801a138 <iprintf>
    pcb->sent = sent;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	683a      	ldr	r2, [r7, #0]
 8011bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8011bc2:	bf00      	nop
 8011bc4:	3708      	adds	r7, #8
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}
 8011bca:	bf00      	nop
 8011bcc:	0801d3d0 	.word	0x0801d3d0
 8011bd0:	0801d994 	.word	0x0801d994
 8011bd4:	0801d414 	.word	0x0801d414

08011bd8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b082      	sub	sp, #8
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d00e      	beq.n	8011c06 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	7d1b      	ldrb	r3, [r3, #20]
 8011bec:	2b01      	cmp	r3, #1
 8011bee:	d106      	bne.n	8011bfe <tcp_err+0x26>
 8011bf0:	4b07      	ldr	r3, [pc, #28]	; (8011c10 <tcp_err+0x38>)
 8011bf2:	f640 020d 	movw	r2, #2061	; 0x80d
 8011bf6:	4907      	ldr	r1, [pc, #28]	; (8011c14 <tcp_err+0x3c>)
 8011bf8:	4807      	ldr	r0, [pc, #28]	; (8011c18 <tcp_err+0x40>)
 8011bfa:	f008 fa9d 	bl	801a138 <iprintf>
    pcb->errf = err;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	683a      	ldr	r2, [r7, #0]
 8011c02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8011c06:	bf00      	nop
 8011c08:	3708      	adds	r7, #8
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd80      	pop	{r7, pc}
 8011c0e:	bf00      	nop
 8011c10:	0801d3d0 	.word	0x0801d3d0
 8011c14:	0801d9bc 	.word	0x0801d9bc
 8011c18:	0801d414 	.word	0x0801d414

08011c1c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b084      	sub	sp, #16
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	60f8      	str	r0, [r7, #12]
 8011c24:	60b9      	str	r1, [r7, #8]
 8011c26:	4613      	mov	r3, r2
 8011c28:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d107      	bne.n	8011c40 <tcp_poll+0x24>
 8011c30:	4b0e      	ldr	r3, [pc, #56]	; (8011c6c <tcp_poll+0x50>)
 8011c32:	f640 023d 	movw	r2, #2109	; 0x83d
 8011c36:	490e      	ldr	r1, [pc, #56]	; (8011c70 <tcp_poll+0x54>)
 8011c38:	480e      	ldr	r0, [pc, #56]	; (8011c74 <tcp_poll+0x58>)
 8011c3a:	f008 fa7d 	bl	801a138 <iprintf>
 8011c3e:	e011      	b.n	8011c64 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	7d1b      	ldrb	r3, [r3, #20]
 8011c44:	2b01      	cmp	r3, #1
 8011c46:	d106      	bne.n	8011c56 <tcp_poll+0x3a>
 8011c48:	4b08      	ldr	r3, [pc, #32]	; (8011c6c <tcp_poll+0x50>)
 8011c4a:	f640 023e 	movw	r2, #2110	; 0x83e
 8011c4e:	490a      	ldr	r1, [pc, #40]	; (8011c78 <tcp_poll+0x5c>)
 8011c50:	4808      	ldr	r0, [pc, #32]	; (8011c74 <tcp_poll+0x58>)
 8011c52:	f008 fa71 	bl	801a138 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	68ba      	ldr	r2, [r7, #8]
 8011c5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	79fa      	ldrb	r2, [r7, #7]
 8011c62:	775a      	strb	r2, [r3, #29]
}
 8011c64:	3710      	adds	r7, #16
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
 8011c6a:	bf00      	nop
 8011c6c:	0801d3d0 	.word	0x0801d3d0
 8011c70:	0801d9e4 	.word	0x0801d9e4
 8011c74:	0801d414 	.word	0x0801d414
 8011c78:	0801d9fc 	.word	0x0801d9fc

08011c7c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d107      	bne.n	8011c9a <tcp_pcb_purge+0x1e>
 8011c8a:	4b21      	ldr	r3, [pc, #132]	; (8011d10 <tcp_pcb_purge+0x94>)
 8011c8c:	f640 0251 	movw	r2, #2129	; 0x851
 8011c90:	4920      	ldr	r1, [pc, #128]	; (8011d14 <tcp_pcb_purge+0x98>)
 8011c92:	4821      	ldr	r0, [pc, #132]	; (8011d18 <tcp_pcb_purge+0x9c>)
 8011c94:	f008 fa50 	bl	801a138 <iprintf>
 8011c98:	e037      	b.n	8011d0a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	7d1b      	ldrb	r3, [r3, #20]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d033      	beq.n	8011d0a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011ca6:	2b0a      	cmp	r3, #10
 8011ca8:	d02f      	beq.n	8011d0a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011cae:	2b01      	cmp	r3, #1
 8011cb0:	d02b      	beq.n	8011d0a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d007      	beq.n	8011cca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7fe f8d8 	bl	800fe74 <pbuf_free>
      pcb->refused_data = NULL;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d002      	beq.n	8011cd8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f000 f986 	bl	8011fe4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cde:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7ff fd17 	bl	8011718 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f7ff fd12 	bl	8011718 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	66da      	str	r2, [r3, #108]	; 0x6c
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2200      	movs	r2, #0
 8011d06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011d0a:	3708      	adds	r7, #8
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}
 8011d10:	0801d3d0 	.word	0x0801d3d0
 8011d14:	0801da1c 	.word	0x0801da1c
 8011d18:	0801d414 	.word	0x0801d414

08011d1c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b084      	sub	sp, #16
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d106      	bne.n	8011d3a <tcp_pcb_remove+0x1e>
 8011d2c:	4b3e      	ldr	r3, [pc, #248]	; (8011e28 <tcp_pcb_remove+0x10c>)
 8011d2e:	f640 0283 	movw	r2, #2179	; 0x883
 8011d32:	493e      	ldr	r1, [pc, #248]	; (8011e2c <tcp_pcb_remove+0x110>)
 8011d34:	483e      	ldr	r0, [pc, #248]	; (8011e30 <tcp_pcb_remove+0x114>)
 8011d36:	f008 f9ff 	bl	801a138 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d106      	bne.n	8011d4e <tcp_pcb_remove+0x32>
 8011d40:	4b39      	ldr	r3, [pc, #228]	; (8011e28 <tcp_pcb_remove+0x10c>)
 8011d42:	f640 0284 	movw	r2, #2180	; 0x884
 8011d46:	493b      	ldr	r1, [pc, #236]	; (8011e34 <tcp_pcb_remove+0x118>)
 8011d48:	4839      	ldr	r0, [pc, #228]	; (8011e30 <tcp_pcb_remove+0x114>)
 8011d4a:	f008 f9f5 	bl	801a138 <iprintf>

  TCP_RMV(pcblist, pcb);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	683a      	ldr	r2, [r7, #0]
 8011d54:	429a      	cmp	r2, r3
 8011d56:	d105      	bne.n	8011d64 <tcp_pcb_remove+0x48>
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	68da      	ldr	r2, [r3, #12]
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	601a      	str	r2, [r3, #0]
 8011d62:	e013      	b.n	8011d8c <tcp_pcb_remove+0x70>
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	60fb      	str	r3, [r7, #12]
 8011d6a:	e00c      	b.n	8011d86 <tcp_pcb_remove+0x6a>
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	683a      	ldr	r2, [r7, #0]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d104      	bne.n	8011d80 <tcp_pcb_remove+0x64>
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	68da      	ldr	r2, [r3, #12]
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	60da      	str	r2, [r3, #12]
 8011d7e:	e005      	b.n	8011d8c <tcp_pcb_remove+0x70>
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	60fb      	str	r3, [r7, #12]
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d1ef      	bne.n	8011d6c <tcp_pcb_remove+0x50>
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	2200      	movs	r2, #0
 8011d90:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011d92:	6838      	ldr	r0, [r7, #0]
 8011d94:	f7ff ff72 	bl	8011c7c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	7d1b      	ldrb	r3, [r3, #20]
 8011d9c:	2b0a      	cmp	r3, #10
 8011d9e:	d013      	beq.n	8011dc8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011da4:	2b01      	cmp	r3, #1
 8011da6:	d00f      	beq.n	8011dc8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	8b5b      	ldrh	r3, [r3, #26]
 8011dac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d009      	beq.n	8011dc8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	8b5b      	ldrh	r3, [r3, #26]
 8011db8:	f043 0302 	orr.w	r3, r3, #2
 8011dbc:	b29a      	uxth	r2, r3
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011dc2:	6838      	ldr	r0, [r7, #0]
 8011dc4:	f003 fbc8 	bl	8015558 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	7d1b      	ldrb	r3, [r3, #20]
 8011dcc:	2b01      	cmp	r3, #1
 8011dce:	d020      	beq.n	8011e12 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d006      	beq.n	8011de6 <tcp_pcb_remove+0xca>
 8011dd8:	4b13      	ldr	r3, [pc, #76]	; (8011e28 <tcp_pcb_remove+0x10c>)
 8011dda:	f640 0293 	movw	r2, #2195	; 0x893
 8011dde:	4916      	ldr	r1, [pc, #88]	; (8011e38 <tcp_pcb_remove+0x11c>)
 8011de0:	4813      	ldr	r0, [pc, #76]	; (8011e30 <tcp_pcb_remove+0x114>)
 8011de2:	f008 f9a9 	bl	801a138 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d006      	beq.n	8011dfc <tcp_pcb_remove+0xe0>
 8011dee:	4b0e      	ldr	r3, [pc, #56]	; (8011e28 <tcp_pcb_remove+0x10c>)
 8011df0:	f640 0294 	movw	r2, #2196	; 0x894
 8011df4:	4911      	ldr	r1, [pc, #68]	; (8011e3c <tcp_pcb_remove+0x120>)
 8011df6:	480e      	ldr	r0, [pc, #56]	; (8011e30 <tcp_pcb_remove+0x114>)
 8011df8:	f008 f99e 	bl	801a138 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d006      	beq.n	8011e12 <tcp_pcb_remove+0xf6>
 8011e04:	4b08      	ldr	r3, [pc, #32]	; (8011e28 <tcp_pcb_remove+0x10c>)
 8011e06:	f640 0296 	movw	r2, #2198	; 0x896
 8011e0a:	490d      	ldr	r1, [pc, #52]	; (8011e40 <tcp_pcb_remove+0x124>)
 8011e0c:	4808      	ldr	r0, [pc, #32]	; (8011e30 <tcp_pcb_remove+0x114>)
 8011e0e:	f008 f993 	bl	801a138 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	2200      	movs	r2, #0
 8011e16:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011e1e:	bf00      	nop
 8011e20:	3710      	adds	r7, #16
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}
 8011e26:	bf00      	nop
 8011e28:	0801d3d0 	.word	0x0801d3d0
 8011e2c:	0801da38 	.word	0x0801da38
 8011e30:	0801d414 	.word	0x0801d414
 8011e34:	0801da54 	.word	0x0801da54
 8011e38:	0801da74 	.word	0x0801da74
 8011e3c:	0801da8c 	.word	0x0801da8c
 8011e40:	0801daa8 	.word	0x0801daa8

08011e44 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b082      	sub	sp, #8
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d106      	bne.n	8011e60 <tcp_next_iss+0x1c>
 8011e52:	4b0a      	ldr	r3, [pc, #40]	; (8011e7c <tcp_next_iss+0x38>)
 8011e54:	f640 02af 	movw	r2, #2223	; 0x8af
 8011e58:	4909      	ldr	r1, [pc, #36]	; (8011e80 <tcp_next_iss+0x3c>)
 8011e5a:	480a      	ldr	r0, [pc, #40]	; (8011e84 <tcp_next_iss+0x40>)
 8011e5c:	f008 f96c 	bl	801a138 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011e60:	4b09      	ldr	r3, [pc, #36]	; (8011e88 <tcp_next_iss+0x44>)
 8011e62:	681a      	ldr	r2, [r3, #0]
 8011e64:	4b09      	ldr	r3, [pc, #36]	; (8011e8c <tcp_next_iss+0x48>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	4413      	add	r3, r2
 8011e6a:	4a07      	ldr	r2, [pc, #28]	; (8011e88 <tcp_next_iss+0x44>)
 8011e6c:	6013      	str	r3, [r2, #0]
  return iss;
 8011e6e:	4b06      	ldr	r3, [pc, #24]	; (8011e88 <tcp_next_iss+0x44>)
 8011e70:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3708      	adds	r7, #8
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	0801d3d0 	.word	0x0801d3d0
 8011e80:	0801dac0 	.word	0x0801dac0
 8011e84:	0801d414 	.word	0x0801d414
 8011e88:	200005b0 	.word	0x200005b0
 8011e8c:	20018910 	.word	0x20018910

08011e90 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b086      	sub	sp, #24
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	4603      	mov	r3, r0
 8011e98:	60b9      	str	r1, [r7, #8]
 8011e9a:	607a      	str	r2, [r7, #4]
 8011e9c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d106      	bne.n	8011eb2 <tcp_eff_send_mss_netif+0x22>
 8011ea4:	4b14      	ldr	r3, [pc, #80]	; (8011ef8 <tcp_eff_send_mss_netif+0x68>)
 8011ea6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011eaa:	4914      	ldr	r1, [pc, #80]	; (8011efc <tcp_eff_send_mss_netif+0x6c>)
 8011eac:	4814      	ldr	r0, [pc, #80]	; (8011f00 <tcp_eff_send_mss_netif+0x70>)
 8011eae:	f008 f943 	bl	801a138 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011eb2:	68bb      	ldr	r3, [r7, #8]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d101      	bne.n	8011ebc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011eb8:	89fb      	ldrh	r3, [r7, #14]
 8011eba:	e019      	b.n	8011ef0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011ec0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011ec2:	8afb      	ldrh	r3, [r7, #22]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d012      	beq.n	8011eee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011ec8:	2328      	movs	r3, #40	; 0x28
 8011eca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011ecc:	8afa      	ldrh	r2, [r7, #22]
 8011ece:	8abb      	ldrh	r3, [r7, #20]
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	d904      	bls.n	8011ede <tcp_eff_send_mss_netif+0x4e>
 8011ed4:	8afa      	ldrh	r2, [r7, #22]
 8011ed6:	8abb      	ldrh	r3, [r7, #20]
 8011ed8:	1ad3      	subs	r3, r2, r3
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	e000      	b.n	8011ee0 <tcp_eff_send_mss_netif+0x50>
 8011ede:	2300      	movs	r3, #0
 8011ee0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011ee2:	8a7a      	ldrh	r2, [r7, #18]
 8011ee4:	89fb      	ldrh	r3, [r7, #14]
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	bf28      	it	cs
 8011eea:	4613      	movcs	r3, r2
 8011eec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011eee:	89fb      	ldrh	r3, [r7, #14]
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3718      	adds	r7, #24
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}
 8011ef8:	0801d3d0 	.word	0x0801d3d0
 8011efc:	0801dadc 	.word	0x0801dadc
 8011f00:	0801d414 	.word	0x0801d414

08011f04 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b084      	sub	sp, #16
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d119      	bne.n	8011f4c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011f18:	4b10      	ldr	r3, [pc, #64]	; (8011f5c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011f1a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011f1e:	4910      	ldr	r1, [pc, #64]	; (8011f60 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011f20:	4810      	ldr	r0, [pc, #64]	; (8011f64 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011f22:	f008 f909 	bl	801a138 <iprintf>

  while (pcb != NULL) {
 8011f26:	e011      	b.n	8011f4c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	681a      	ldr	r2, [r3, #0]
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	429a      	cmp	r2, r3
 8011f32:	d108      	bne.n	8011f46 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	68db      	ldr	r3, [r3, #12]
 8011f38:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011f3a:	68f8      	ldr	r0, [r7, #12]
 8011f3c:	f7fe fdb4 	bl	8010aa8 <tcp_abort>
      pcb = next;
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	60fb      	str	r3, [r7, #12]
 8011f44:	e002      	b.n	8011f4c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	68db      	ldr	r3, [r3, #12]
 8011f4a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d1ea      	bne.n	8011f28 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011f52:	bf00      	nop
 8011f54:	bf00      	nop
 8011f56:	3710      	adds	r7, #16
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}
 8011f5c:	0801d3d0 	.word	0x0801d3d0
 8011f60:	0801db04 	.word	0x0801db04
 8011f64:	0801d414 	.word	0x0801d414

08011f68 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b084      	sub	sp, #16
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d02a      	beq.n	8011fce <tcp_netif_ip_addr_changed+0x66>
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d026      	beq.n	8011fce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011f80:	4b15      	ldr	r3, [pc, #84]	; (8011fd8 <tcp_netif_ip_addr_changed+0x70>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	4619      	mov	r1, r3
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f7ff ffbc 	bl	8011f04 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011f8c:	4b13      	ldr	r3, [pc, #76]	; (8011fdc <tcp_netif_ip_addr_changed+0x74>)
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	4619      	mov	r1, r3
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f7ff ffb6 	bl	8011f04 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d017      	beq.n	8011fce <tcp_netif_ip_addr_changed+0x66>
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d013      	beq.n	8011fce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011fa6:	4b0e      	ldr	r3, [pc, #56]	; (8011fe0 <tcp_netif_ip_addr_changed+0x78>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	60fb      	str	r3, [r7, #12]
 8011fac:	e00c      	b.n	8011fc8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	681a      	ldr	r2, [r3, #0]
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d103      	bne.n	8011fc2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	681a      	ldr	r2, [r3, #0]
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	68db      	ldr	r3, [r3, #12]
 8011fc6:	60fb      	str	r3, [r7, #12]
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d1ef      	bne.n	8011fae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011fce:	bf00      	nop
 8011fd0:	3710      	adds	r7, #16
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bd80      	pop	{r7, pc}
 8011fd6:	bf00      	nop
 8011fd8:	2001890c 	.word	0x2001890c
 8011fdc:	20018918 	.word	0x20018918
 8011fe0:	20018914 	.word	0x20018914

08011fe4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b082      	sub	sp, #8
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d007      	beq.n	8012004 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f7ff fb8d 	bl	8011718 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2200      	movs	r2, #0
 8012002:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012004:	bf00      	nop
 8012006:	3708      	adds	r7, #8
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}

0801200c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801200c:	b590      	push	{r4, r7, lr}
 801200e:	b08d      	sub	sp, #52	; 0x34
 8012010:	af04      	add	r7, sp, #16
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d105      	bne.n	8012028 <tcp_input+0x1c>
 801201c:	4b9b      	ldr	r3, [pc, #620]	; (801228c <tcp_input+0x280>)
 801201e:	2283      	movs	r2, #131	; 0x83
 8012020:	499b      	ldr	r1, [pc, #620]	; (8012290 <tcp_input+0x284>)
 8012022:	489c      	ldr	r0, [pc, #624]	; (8012294 <tcp_input+0x288>)
 8012024:	f008 f888 	bl	801a138 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	685b      	ldr	r3, [r3, #4]
 801202c:	4a9a      	ldr	r2, [pc, #616]	; (8012298 <tcp_input+0x28c>)
 801202e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	895b      	ldrh	r3, [r3, #10]
 8012034:	2b13      	cmp	r3, #19
 8012036:	f240 83c5 	bls.w	80127c4 <tcp_input+0x7b8>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801203a:	4b98      	ldr	r3, [pc, #608]	; (801229c <tcp_input+0x290>)
 801203c:	695b      	ldr	r3, [r3, #20]
 801203e:	4a97      	ldr	r2, [pc, #604]	; (801229c <tcp_input+0x290>)
 8012040:	6812      	ldr	r2, [r2, #0]
 8012042:	4611      	mov	r1, r2
 8012044:	4618      	mov	r0, r3
 8012046:	f006 f871 	bl	801812c <ip4_addr_isbroadcast_u32>
 801204a:	4603      	mov	r3, r0
 801204c:	2b00      	cmp	r3, #0
 801204e:	f040 83bb 	bne.w	80127c8 <tcp_input+0x7bc>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012052:	4b92      	ldr	r3, [pc, #584]	; (801229c <tcp_input+0x290>)
 8012054:	695b      	ldr	r3, [r3, #20]
 8012056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801205a:	2be0      	cmp	r3, #224	; 0xe0
 801205c:	f000 83b4 	beq.w	80127c8 <tcp_input+0x7bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012060:	4b8d      	ldr	r3, [pc, #564]	; (8012298 <tcp_input+0x28c>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	899b      	ldrh	r3, [r3, #12]
 8012066:	b29b      	uxth	r3, r3
 8012068:	4618      	mov	r0, r3
 801206a:	f7fc fc40 	bl	800e8ee <lwip_htons>
 801206e:	4603      	mov	r3, r0
 8012070:	0b1b      	lsrs	r3, r3, #12
 8012072:	b29b      	uxth	r3, r3
 8012074:	b2db      	uxtb	r3, r3
 8012076:	009b      	lsls	r3, r3, #2
 8012078:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801207a:	7cbb      	ldrb	r3, [r7, #18]
 801207c:	2b13      	cmp	r3, #19
 801207e:	f240 83a5 	bls.w	80127cc <tcp_input+0x7c0>
 8012082:	7cbb      	ldrb	r3, [r7, #18]
 8012084:	b29a      	uxth	r2, r3
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	891b      	ldrh	r3, [r3, #8]
 801208a:	429a      	cmp	r2, r3
 801208c:	f200 839e 	bhi.w	80127cc <tcp_input+0x7c0>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012090:	7cbb      	ldrb	r3, [r7, #18]
 8012092:	b29b      	uxth	r3, r3
 8012094:	3b14      	subs	r3, #20
 8012096:	b29a      	uxth	r2, r3
 8012098:	4b81      	ldr	r3, [pc, #516]	; (80122a0 <tcp_input+0x294>)
 801209a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801209c:	4b81      	ldr	r3, [pc, #516]	; (80122a4 <tcp_input+0x298>)
 801209e:	2200      	movs	r2, #0
 80120a0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	895a      	ldrh	r2, [r3, #10]
 80120a6:	7cbb      	ldrb	r3, [r7, #18]
 80120a8:	b29b      	uxth	r3, r3
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d309      	bcc.n	80120c2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80120ae:	4b7c      	ldr	r3, [pc, #496]	; (80122a0 <tcp_input+0x294>)
 80120b0:	881a      	ldrh	r2, [r3, #0]
 80120b2:	4b7d      	ldr	r3, [pc, #500]	; (80122a8 <tcp_input+0x29c>)
 80120b4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80120b6:	7cbb      	ldrb	r3, [r7, #18]
 80120b8:	4619      	mov	r1, r3
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f7fd fe54 	bl	800fd68 <pbuf_remove_header>
 80120c0:	e04e      	b.n	8012160 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d105      	bne.n	80120d6 <tcp_input+0xca>
 80120ca:	4b70      	ldr	r3, [pc, #448]	; (801228c <tcp_input+0x280>)
 80120cc:	22c2      	movs	r2, #194	; 0xc2
 80120ce:	4977      	ldr	r1, [pc, #476]	; (80122ac <tcp_input+0x2a0>)
 80120d0:	4870      	ldr	r0, [pc, #448]	; (8012294 <tcp_input+0x288>)
 80120d2:	f008 f831 	bl	801a138 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80120d6:	2114      	movs	r1, #20
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f7fd fe45 	bl	800fd68 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	895a      	ldrh	r2, [r3, #10]
 80120e2:	4b71      	ldr	r3, [pc, #452]	; (80122a8 <tcp_input+0x29c>)
 80120e4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80120e6:	4b6e      	ldr	r3, [pc, #440]	; (80122a0 <tcp_input+0x294>)
 80120e8:	881a      	ldrh	r2, [r3, #0]
 80120ea:	4b6f      	ldr	r3, [pc, #444]	; (80122a8 <tcp_input+0x29c>)
 80120ec:	881b      	ldrh	r3, [r3, #0]
 80120ee:	1ad3      	subs	r3, r2, r3
 80120f0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80120f2:	4b6d      	ldr	r3, [pc, #436]	; (80122a8 <tcp_input+0x29c>)
 80120f4:	881b      	ldrh	r3, [r3, #0]
 80120f6:	4619      	mov	r1, r3
 80120f8:	6878      	ldr	r0, [r7, #4]
 80120fa:	f7fd fe35 	bl	800fd68 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	895b      	ldrh	r3, [r3, #10]
 8012104:	8a3a      	ldrh	r2, [r7, #16]
 8012106:	429a      	cmp	r2, r3
 8012108:	f200 8362 	bhi.w	80127d0 <tcp_input+0x7c4>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	685b      	ldr	r3, [r3, #4]
 8012112:	4a64      	ldr	r2, [pc, #400]	; (80122a4 <tcp_input+0x298>)
 8012114:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	8a3a      	ldrh	r2, [r7, #16]
 801211c:	4611      	mov	r1, r2
 801211e:	4618      	mov	r0, r3
 8012120:	f7fd fe22 	bl	800fd68 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	891a      	ldrh	r2, [r3, #8]
 8012128:	8a3b      	ldrh	r3, [r7, #16]
 801212a:	1ad3      	subs	r3, r2, r3
 801212c:	b29a      	uxth	r2, r3
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	895b      	ldrh	r3, [r3, #10]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d005      	beq.n	8012146 <tcp_input+0x13a>
 801213a:	4b54      	ldr	r3, [pc, #336]	; (801228c <tcp_input+0x280>)
 801213c:	22df      	movs	r2, #223	; 0xdf
 801213e:	495c      	ldr	r1, [pc, #368]	; (80122b0 <tcp_input+0x2a4>)
 8012140:	4854      	ldr	r0, [pc, #336]	; (8012294 <tcp_input+0x288>)
 8012142:	f007 fff9 	bl	801a138 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	891a      	ldrh	r2, [r3, #8]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	891b      	ldrh	r3, [r3, #8]
 8012150:	429a      	cmp	r2, r3
 8012152:	d005      	beq.n	8012160 <tcp_input+0x154>
 8012154:	4b4d      	ldr	r3, [pc, #308]	; (801228c <tcp_input+0x280>)
 8012156:	22e0      	movs	r2, #224	; 0xe0
 8012158:	4956      	ldr	r1, [pc, #344]	; (80122b4 <tcp_input+0x2a8>)
 801215a:	484e      	ldr	r0, [pc, #312]	; (8012294 <tcp_input+0x288>)
 801215c:	f007 ffec 	bl	801a138 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012160:	4b4d      	ldr	r3, [pc, #308]	; (8012298 <tcp_input+0x28c>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	881b      	ldrh	r3, [r3, #0]
 8012166:	b29b      	uxth	r3, r3
 8012168:	4a4b      	ldr	r2, [pc, #300]	; (8012298 <tcp_input+0x28c>)
 801216a:	6814      	ldr	r4, [r2, #0]
 801216c:	4618      	mov	r0, r3
 801216e:	f7fc fbbe 	bl	800e8ee <lwip_htons>
 8012172:	4603      	mov	r3, r0
 8012174:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012176:	4b48      	ldr	r3, [pc, #288]	; (8012298 <tcp_input+0x28c>)
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	885b      	ldrh	r3, [r3, #2]
 801217c:	b29b      	uxth	r3, r3
 801217e:	4a46      	ldr	r2, [pc, #280]	; (8012298 <tcp_input+0x28c>)
 8012180:	6814      	ldr	r4, [r2, #0]
 8012182:	4618      	mov	r0, r3
 8012184:	f7fc fbb3 	bl	800e8ee <lwip_htons>
 8012188:	4603      	mov	r3, r0
 801218a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801218c:	4b42      	ldr	r3, [pc, #264]	; (8012298 <tcp_input+0x28c>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	4a41      	ldr	r2, [pc, #260]	; (8012298 <tcp_input+0x28c>)
 8012194:	6814      	ldr	r4, [r2, #0]
 8012196:	4618      	mov	r0, r3
 8012198:	f7fc fbbe 	bl	800e918 <lwip_htonl>
 801219c:	4603      	mov	r3, r0
 801219e:	6063      	str	r3, [r4, #4]
 80121a0:	6863      	ldr	r3, [r4, #4]
 80121a2:	4a45      	ldr	r2, [pc, #276]	; (80122b8 <tcp_input+0x2ac>)
 80121a4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80121a6:	4b3c      	ldr	r3, [pc, #240]	; (8012298 <tcp_input+0x28c>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	689b      	ldr	r3, [r3, #8]
 80121ac:	4a3a      	ldr	r2, [pc, #232]	; (8012298 <tcp_input+0x28c>)
 80121ae:	6814      	ldr	r4, [r2, #0]
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7fc fbb1 	bl	800e918 <lwip_htonl>
 80121b6:	4603      	mov	r3, r0
 80121b8:	60a3      	str	r3, [r4, #8]
 80121ba:	68a3      	ldr	r3, [r4, #8]
 80121bc:	4a3f      	ldr	r2, [pc, #252]	; (80122bc <tcp_input+0x2b0>)
 80121be:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80121c0:	4b35      	ldr	r3, [pc, #212]	; (8012298 <tcp_input+0x28c>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	89db      	ldrh	r3, [r3, #14]
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	4a33      	ldr	r2, [pc, #204]	; (8012298 <tcp_input+0x28c>)
 80121ca:	6814      	ldr	r4, [r2, #0]
 80121cc:	4618      	mov	r0, r3
 80121ce:	f7fc fb8e 	bl	800e8ee <lwip_htons>
 80121d2:	4603      	mov	r3, r0
 80121d4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80121d6:	4b30      	ldr	r3, [pc, #192]	; (8012298 <tcp_input+0x28c>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	899b      	ldrh	r3, [r3, #12]
 80121dc:	b29b      	uxth	r3, r3
 80121de:	4618      	mov	r0, r3
 80121e0:	f7fc fb85 	bl	800e8ee <lwip_htons>
 80121e4:	4603      	mov	r3, r0
 80121e6:	b2db      	uxtb	r3, r3
 80121e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80121ec:	b2da      	uxtb	r2, r3
 80121ee:	4b34      	ldr	r3, [pc, #208]	; (80122c0 <tcp_input+0x2b4>)
 80121f0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	891a      	ldrh	r2, [r3, #8]
 80121f6:	4b33      	ldr	r3, [pc, #204]	; (80122c4 <tcp_input+0x2b8>)
 80121f8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80121fa:	4b31      	ldr	r3, [pc, #196]	; (80122c0 <tcp_input+0x2b4>)
 80121fc:	781b      	ldrb	r3, [r3, #0]
 80121fe:	f003 0303 	and.w	r3, r3, #3
 8012202:	2b00      	cmp	r3, #0
 8012204:	d00c      	beq.n	8012220 <tcp_input+0x214>
    tcplen++;
 8012206:	4b2f      	ldr	r3, [pc, #188]	; (80122c4 <tcp_input+0x2b8>)
 8012208:	881b      	ldrh	r3, [r3, #0]
 801220a:	3301      	adds	r3, #1
 801220c:	b29a      	uxth	r2, r3
 801220e:	4b2d      	ldr	r3, [pc, #180]	; (80122c4 <tcp_input+0x2b8>)
 8012210:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	891a      	ldrh	r2, [r3, #8]
 8012216:	4b2b      	ldr	r3, [pc, #172]	; (80122c4 <tcp_input+0x2b8>)
 8012218:	881b      	ldrh	r3, [r3, #0]
 801221a:	429a      	cmp	r2, r3
 801221c:	f200 82da 	bhi.w	80127d4 <tcp_input+0x7c8>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012220:	2300      	movs	r3, #0
 8012222:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012224:	4b28      	ldr	r3, [pc, #160]	; (80122c8 <tcp_input+0x2bc>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	61fb      	str	r3, [r7, #28]
 801222a:	e09d      	b.n	8012368 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801222c:	69fb      	ldr	r3, [r7, #28]
 801222e:	7d1b      	ldrb	r3, [r3, #20]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d105      	bne.n	8012240 <tcp_input+0x234>
 8012234:	4b15      	ldr	r3, [pc, #84]	; (801228c <tcp_input+0x280>)
 8012236:	22fb      	movs	r2, #251	; 0xfb
 8012238:	4924      	ldr	r1, [pc, #144]	; (80122cc <tcp_input+0x2c0>)
 801223a:	4816      	ldr	r0, [pc, #88]	; (8012294 <tcp_input+0x288>)
 801223c:	f007 ff7c 	bl	801a138 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012240:	69fb      	ldr	r3, [r7, #28]
 8012242:	7d1b      	ldrb	r3, [r3, #20]
 8012244:	2b0a      	cmp	r3, #10
 8012246:	d105      	bne.n	8012254 <tcp_input+0x248>
 8012248:	4b10      	ldr	r3, [pc, #64]	; (801228c <tcp_input+0x280>)
 801224a:	22fc      	movs	r2, #252	; 0xfc
 801224c:	4920      	ldr	r1, [pc, #128]	; (80122d0 <tcp_input+0x2c4>)
 801224e:	4811      	ldr	r0, [pc, #68]	; (8012294 <tcp_input+0x288>)
 8012250:	f007 ff72 	bl	801a138 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012254:	69fb      	ldr	r3, [r7, #28]
 8012256:	7d1b      	ldrb	r3, [r3, #20]
 8012258:	2b01      	cmp	r3, #1
 801225a:	d105      	bne.n	8012268 <tcp_input+0x25c>
 801225c:	4b0b      	ldr	r3, [pc, #44]	; (801228c <tcp_input+0x280>)
 801225e:	22fd      	movs	r2, #253	; 0xfd
 8012260:	491c      	ldr	r1, [pc, #112]	; (80122d4 <tcp_input+0x2c8>)
 8012262:	480c      	ldr	r0, [pc, #48]	; (8012294 <tcp_input+0x288>)
 8012264:	f007 ff68 	bl	801a138 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012268:	69fb      	ldr	r3, [r7, #28]
 801226a:	7a1b      	ldrb	r3, [r3, #8]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d033      	beq.n	80122d8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012270:	69fb      	ldr	r3, [r7, #28]
 8012272:	7a1a      	ldrb	r2, [r3, #8]
 8012274:	4b09      	ldr	r3, [pc, #36]	; (801229c <tcp_input+0x290>)
 8012276:	685b      	ldr	r3, [r3, #4]
 8012278:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801227c:	3301      	adds	r3, #1
 801227e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012280:	429a      	cmp	r2, r3
 8012282:	d029      	beq.n	80122d8 <tcp_input+0x2cc>
      prev = pcb;
 8012284:	69fb      	ldr	r3, [r7, #28]
 8012286:	61bb      	str	r3, [r7, #24]
      continue;
 8012288:	e06b      	b.n	8012362 <tcp_input+0x356>
 801228a:	bf00      	nop
 801228c:	0801db38 	.word	0x0801db38
 8012290:	0801db6c 	.word	0x0801db6c
 8012294:	0801db84 	.word	0x0801db84
 8012298:	20000828 	.word	0x20000828
 801229c:	20007ca8 	.word	0x20007ca8
 80122a0:	2000082c 	.word	0x2000082c
 80122a4:	20000830 	.word	0x20000830
 80122a8:	2000082e 	.word	0x2000082e
 80122ac:	0801dbac 	.word	0x0801dbac
 80122b0:	0801dbbc 	.word	0x0801dbbc
 80122b4:	0801dbc8 	.word	0x0801dbc8
 80122b8:	20000838 	.word	0x20000838
 80122bc:	2000083c 	.word	0x2000083c
 80122c0:	20000844 	.word	0x20000844
 80122c4:	20000842 	.word	0x20000842
 80122c8:	2001890c 	.word	0x2001890c
 80122cc:	0801dbe8 	.word	0x0801dbe8
 80122d0:	0801dc10 	.word	0x0801dc10
 80122d4:	0801dc3c 	.word	0x0801dc3c
    }

    if (pcb->remote_port == tcphdr->src &&
 80122d8:	69fb      	ldr	r3, [r7, #28]
 80122da:	8b1a      	ldrh	r2, [r3, #24]
 80122dc:	4b94      	ldr	r3, [pc, #592]	; (8012530 <tcp_input+0x524>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	881b      	ldrh	r3, [r3, #0]
 80122e2:	b29b      	uxth	r3, r3
 80122e4:	429a      	cmp	r2, r3
 80122e6:	d13a      	bne.n	801235e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80122e8:	69fb      	ldr	r3, [r7, #28]
 80122ea:	8ada      	ldrh	r2, [r3, #22]
 80122ec:	4b90      	ldr	r3, [pc, #576]	; (8012530 <tcp_input+0x524>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	885b      	ldrh	r3, [r3, #2]
 80122f2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80122f4:	429a      	cmp	r2, r3
 80122f6:	d132      	bne.n	801235e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80122f8:	69fb      	ldr	r3, [r7, #28]
 80122fa:	685a      	ldr	r2, [r3, #4]
 80122fc:	4b8d      	ldr	r3, [pc, #564]	; (8012534 <tcp_input+0x528>)
 80122fe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012300:	429a      	cmp	r2, r3
 8012302:	d12c      	bne.n	801235e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012304:	69fb      	ldr	r3, [r7, #28]
 8012306:	681a      	ldr	r2, [r3, #0]
 8012308:	4b8a      	ldr	r3, [pc, #552]	; (8012534 <tcp_input+0x528>)
 801230a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801230c:	429a      	cmp	r2, r3
 801230e:	d126      	bne.n	801235e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012310:	69fb      	ldr	r3, [r7, #28]
 8012312:	68db      	ldr	r3, [r3, #12]
 8012314:	69fa      	ldr	r2, [r7, #28]
 8012316:	429a      	cmp	r2, r3
 8012318:	d106      	bne.n	8012328 <tcp_input+0x31c>
 801231a:	4b87      	ldr	r3, [pc, #540]	; (8012538 <tcp_input+0x52c>)
 801231c:	f240 120d 	movw	r2, #269	; 0x10d
 8012320:	4986      	ldr	r1, [pc, #536]	; (801253c <tcp_input+0x530>)
 8012322:	4887      	ldr	r0, [pc, #540]	; (8012540 <tcp_input+0x534>)
 8012324:	f007 ff08 	bl	801a138 <iprintf>
      if (prev != NULL) {
 8012328:	69bb      	ldr	r3, [r7, #24]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d00a      	beq.n	8012344 <tcp_input+0x338>
        prev->next = pcb->next;
 801232e:	69fb      	ldr	r3, [r7, #28]
 8012330:	68da      	ldr	r2, [r3, #12]
 8012332:	69bb      	ldr	r3, [r7, #24]
 8012334:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012336:	4b83      	ldr	r3, [pc, #524]	; (8012544 <tcp_input+0x538>)
 8012338:	681a      	ldr	r2, [r3, #0]
 801233a:	69fb      	ldr	r3, [r7, #28]
 801233c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801233e:	4a81      	ldr	r2, [pc, #516]	; (8012544 <tcp_input+0x538>)
 8012340:	69fb      	ldr	r3, [r7, #28]
 8012342:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012344:	69fb      	ldr	r3, [r7, #28]
 8012346:	68db      	ldr	r3, [r3, #12]
 8012348:	69fa      	ldr	r2, [r7, #28]
 801234a:	429a      	cmp	r2, r3
 801234c:	d111      	bne.n	8012372 <tcp_input+0x366>
 801234e:	4b7a      	ldr	r3, [pc, #488]	; (8012538 <tcp_input+0x52c>)
 8012350:	f240 1215 	movw	r2, #277	; 0x115
 8012354:	497c      	ldr	r1, [pc, #496]	; (8012548 <tcp_input+0x53c>)
 8012356:	487a      	ldr	r0, [pc, #488]	; (8012540 <tcp_input+0x534>)
 8012358:	f007 feee 	bl	801a138 <iprintf>
      break;
 801235c:	e009      	b.n	8012372 <tcp_input+0x366>
    }
    prev = pcb;
 801235e:	69fb      	ldr	r3, [r7, #28]
 8012360:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012362:	69fb      	ldr	r3, [r7, #28]
 8012364:	68db      	ldr	r3, [r3, #12]
 8012366:	61fb      	str	r3, [r7, #28]
 8012368:	69fb      	ldr	r3, [r7, #28]
 801236a:	2b00      	cmp	r3, #0
 801236c:	f47f af5e 	bne.w	801222c <tcp_input+0x220>
 8012370:	e000      	b.n	8012374 <tcp_input+0x368>
      break;
 8012372:	bf00      	nop
  }

  if (pcb == NULL) {
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	2b00      	cmp	r3, #0
 8012378:	f040 8095 	bne.w	80124a6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801237c:	4b73      	ldr	r3, [pc, #460]	; (801254c <tcp_input+0x540>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	61fb      	str	r3, [r7, #28]
 8012382:	e03f      	b.n	8012404 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012384:	69fb      	ldr	r3, [r7, #28]
 8012386:	7d1b      	ldrb	r3, [r3, #20]
 8012388:	2b0a      	cmp	r3, #10
 801238a:	d006      	beq.n	801239a <tcp_input+0x38e>
 801238c:	4b6a      	ldr	r3, [pc, #424]	; (8012538 <tcp_input+0x52c>)
 801238e:	f240 121f 	movw	r2, #287	; 0x11f
 8012392:	496f      	ldr	r1, [pc, #444]	; (8012550 <tcp_input+0x544>)
 8012394:	486a      	ldr	r0, [pc, #424]	; (8012540 <tcp_input+0x534>)
 8012396:	f007 fecf 	bl	801a138 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801239a:	69fb      	ldr	r3, [r7, #28]
 801239c:	7a1b      	ldrb	r3, [r3, #8]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d009      	beq.n	80123b6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80123a2:	69fb      	ldr	r3, [r7, #28]
 80123a4:	7a1a      	ldrb	r2, [r3, #8]
 80123a6:	4b63      	ldr	r3, [pc, #396]	; (8012534 <tcp_input+0x528>)
 80123a8:	685b      	ldr	r3, [r3, #4]
 80123aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80123ae:	3301      	adds	r3, #1
 80123b0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d122      	bne.n	80123fc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80123b6:	69fb      	ldr	r3, [r7, #28]
 80123b8:	8b1a      	ldrh	r2, [r3, #24]
 80123ba:	4b5d      	ldr	r3, [pc, #372]	; (8012530 <tcp_input+0x524>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	881b      	ldrh	r3, [r3, #0]
 80123c0:	b29b      	uxth	r3, r3
 80123c2:	429a      	cmp	r2, r3
 80123c4:	d11b      	bne.n	80123fe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80123c6:	69fb      	ldr	r3, [r7, #28]
 80123c8:	8ada      	ldrh	r2, [r3, #22]
 80123ca:	4b59      	ldr	r3, [pc, #356]	; (8012530 <tcp_input+0x524>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	885b      	ldrh	r3, [r3, #2]
 80123d0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80123d2:	429a      	cmp	r2, r3
 80123d4:	d113      	bne.n	80123fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80123d6:	69fb      	ldr	r3, [r7, #28]
 80123d8:	685a      	ldr	r2, [r3, #4]
 80123da:	4b56      	ldr	r3, [pc, #344]	; (8012534 <tcp_input+0x528>)
 80123dc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80123de:	429a      	cmp	r2, r3
 80123e0:	d10d      	bne.n	80123fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80123e2:	69fb      	ldr	r3, [r7, #28]
 80123e4:	681a      	ldr	r2, [r3, #0]
 80123e6:	4b53      	ldr	r3, [pc, #332]	; (8012534 <tcp_input+0x528>)
 80123e8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d107      	bne.n	80123fe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80123ee:	69f8      	ldr	r0, [r7, #28]
 80123f0:	f000 fb56 	bl	8012aa0 <tcp_timewait_input>
        }
        pbuf_free(p);
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f7fd fd3d 	bl	800fe74 <pbuf_free>
        return;
 80123fa:	e1f1      	b.n	80127e0 <tcp_input+0x7d4>
        continue;
 80123fc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80123fe:	69fb      	ldr	r3, [r7, #28]
 8012400:	68db      	ldr	r3, [r3, #12]
 8012402:	61fb      	str	r3, [r7, #28]
 8012404:	69fb      	ldr	r3, [r7, #28]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d1bc      	bne.n	8012384 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801240a:	2300      	movs	r3, #0
 801240c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801240e:	4b51      	ldr	r3, [pc, #324]	; (8012554 <tcp_input+0x548>)
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	617b      	str	r3, [r7, #20]
 8012414:	e02a      	b.n	801246c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	7a1b      	ldrb	r3, [r3, #8]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d00c      	beq.n	8012438 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801241e:	697b      	ldr	r3, [r7, #20]
 8012420:	7a1a      	ldrb	r2, [r3, #8]
 8012422:	4b44      	ldr	r3, [pc, #272]	; (8012534 <tcp_input+0x528>)
 8012424:	685b      	ldr	r3, [r3, #4]
 8012426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801242a:	3301      	adds	r3, #1
 801242c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801242e:	429a      	cmp	r2, r3
 8012430:	d002      	beq.n	8012438 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012432:	697b      	ldr	r3, [r7, #20]
 8012434:	61bb      	str	r3, [r7, #24]
        continue;
 8012436:	e016      	b.n	8012466 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	8ada      	ldrh	r2, [r3, #22]
 801243c:	4b3c      	ldr	r3, [pc, #240]	; (8012530 <tcp_input+0x524>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	885b      	ldrh	r3, [r3, #2]
 8012442:	b29b      	uxth	r3, r3
 8012444:	429a      	cmp	r2, r3
 8012446:	d10c      	bne.n	8012462 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012448:	697b      	ldr	r3, [r7, #20]
 801244a:	681a      	ldr	r2, [r3, #0]
 801244c:	4b39      	ldr	r3, [pc, #228]	; (8012534 <tcp_input+0x528>)
 801244e:	695b      	ldr	r3, [r3, #20]
 8012450:	429a      	cmp	r2, r3
 8012452:	d00f      	beq.n	8012474 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d00d      	beq.n	8012476 <tcp_input+0x46a>
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d009      	beq.n	8012476 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	68db      	ldr	r3, [r3, #12]
 801246a:	617b      	str	r3, [r7, #20]
 801246c:	697b      	ldr	r3, [r7, #20]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d1d1      	bne.n	8012416 <tcp_input+0x40a>
 8012472:	e000      	b.n	8012476 <tcp_input+0x46a>
            break;
 8012474:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d014      	beq.n	80124a6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801247c:	69bb      	ldr	r3, [r7, #24]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d00a      	beq.n	8012498 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012482:	697b      	ldr	r3, [r7, #20]
 8012484:	68da      	ldr	r2, [r3, #12]
 8012486:	69bb      	ldr	r3, [r7, #24]
 8012488:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801248a:	4b32      	ldr	r3, [pc, #200]	; (8012554 <tcp_input+0x548>)
 801248c:	681a      	ldr	r2, [r3, #0]
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012492:	4a30      	ldr	r2, [pc, #192]	; (8012554 <tcp_input+0x548>)
 8012494:	697b      	ldr	r3, [r7, #20]
 8012496:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012498:	6978      	ldr	r0, [r7, #20]
 801249a:	f000 fa03 	bl	80128a4 <tcp_listen_input>
      }
      pbuf_free(p);
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f7fd fce8 	bl	800fe74 <pbuf_free>
      return;
 80124a4:	e19c      	b.n	80127e0 <tcp_input+0x7d4>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80124a6:	69fb      	ldr	r3, [r7, #28]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	f000 8161 	beq.w	8012770 <tcp_input+0x764>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80124ae:	4b2a      	ldr	r3, [pc, #168]	; (8012558 <tcp_input+0x54c>)
 80124b0:	2200      	movs	r2, #0
 80124b2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	891a      	ldrh	r2, [r3, #8]
 80124b8:	4b27      	ldr	r3, [pc, #156]	; (8012558 <tcp_input+0x54c>)
 80124ba:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80124bc:	4a26      	ldr	r2, [pc, #152]	; (8012558 <tcp_input+0x54c>)
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80124c2:	4b1b      	ldr	r3, [pc, #108]	; (8012530 <tcp_input+0x524>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	4a24      	ldr	r2, [pc, #144]	; (8012558 <tcp_input+0x54c>)
 80124c8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80124ca:	4b24      	ldr	r3, [pc, #144]	; (801255c <tcp_input+0x550>)
 80124cc:	2200      	movs	r2, #0
 80124ce:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80124d0:	4b23      	ldr	r3, [pc, #140]	; (8012560 <tcp_input+0x554>)
 80124d2:	2200      	movs	r2, #0
 80124d4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80124d6:	4b23      	ldr	r3, [pc, #140]	; (8012564 <tcp_input+0x558>)
 80124d8:	2200      	movs	r2, #0
 80124da:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80124dc:	4b22      	ldr	r3, [pc, #136]	; (8012568 <tcp_input+0x55c>)
 80124de:	781b      	ldrb	r3, [r3, #0]
 80124e0:	f003 0308 	and.w	r3, r3, #8
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d006      	beq.n	80124f6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	7b5b      	ldrb	r3, [r3, #13]
 80124ec:	f043 0301 	orr.w	r3, r3, #1
 80124f0:	b2da      	uxtb	r2, r3
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80124f6:	69fb      	ldr	r3, [r7, #28]
 80124f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d038      	beq.n	8012570 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80124fe:	69f8      	ldr	r0, [r7, #28]
 8012500:	f7ff f88c 	bl	801161c <tcp_process_refused_data>
 8012504:	4603      	mov	r3, r0
 8012506:	f113 0f0d 	cmn.w	r3, #13
 801250a:	d007      	beq.n	801251c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801250c:	69fb      	ldr	r3, [r7, #28]
 801250e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012510:	2b00      	cmp	r3, #0
 8012512:	d02d      	beq.n	8012570 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012514:	4b15      	ldr	r3, [pc, #84]	; (801256c <tcp_input+0x560>)
 8012516:	881b      	ldrh	r3, [r3, #0]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d029      	beq.n	8012570 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801251c:	69fb      	ldr	r3, [r7, #28]
 801251e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012520:	2b00      	cmp	r3, #0
 8012522:	f040 8105 	bne.w	8012730 <tcp_input+0x724>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012526:	69f8      	ldr	r0, [r7, #28]
 8012528:	f003 fe1c 	bl	8016164 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801252c:	e100      	b.n	8012730 <tcp_input+0x724>
 801252e:	bf00      	nop
 8012530:	20000828 	.word	0x20000828
 8012534:	20007ca8 	.word	0x20007ca8
 8012538:	0801db38 	.word	0x0801db38
 801253c:	0801dc64 	.word	0x0801dc64
 8012540:	0801db84 	.word	0x0801db84
 8012544:	2001890c 	.word	0x2001890c
 8012548:	0801dc90 	.word	0x0801dc90
 801254c:	2001891c 	.word	0x2001891c
 8012550:	0801dcbc 	.word	0x0801dcbc
 8012554:	20018914 	.word	0x20018914
 8012558:	20000818 	.word	0x20000818
 801255c:	20000848 	.word	0x20000848
 8012560:	20000845 	.word	0x20000845
 8012564:	20000840 	.word	0x20000840
 8012568:	20000844 	.word	0x20000844
 801256c:	20000842 	.word	0x20000842
      }
    }
    tcp_input_pcb = pcb;
 8012570:	4a9d      	ldr	r2, [pc, #628]	; (80127e8 <tcp_input+0x7dc>)
 8012572:	69fb      	ldr	r3, [r7, #28]
 8012574:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012576:	69f8      	ldr	r0, [r7, #28]
 8012578:	f000 fb0c 	bl	8012b94 <tcp_process>
 801257c:	4603      	mov	r3, r0
 801257e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012580:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012584:	f113 0f0d 	cmn.w	r3, #13
 8012588:	f000 80d4 	beq.w	8012734 <tcp_input+0x728>
      if (recv_flags & TF_RESET) {
 801258c:	4b97      	ldr	r3, [pc, #604]	; (80127ec <tcp_input+0x7e0>)
 801258e:	781b      	ldrb	r3, [r3, #0]
 8012590:	f003 0308 	and.w	r3, r3, #8
 8012594:	2b00      	cmp	r3, #0
 8012596:	d015      	beq.n	80125c4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012598:	69fb      	ldr	r3, [r7, #28]
 801259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d008      	beq.n	80125b4 <tcp_input+0x5a8>
 80125a2:	69fb      	ldr	r3, [r7, #28]
 80125a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125a8:	69fa      	ldr	r2, [r7, #28]
 80125aa:	6912      	ldr	r2, [r2, #16]
 80125ac:	f06f 010d 	mvn.w	r1, #13
 80125b0:	4610      	mov	r0, r2
 80125b2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80125b4:	69f9      	ldr	r1, [r7, #28]
 80125b6:	488e      	ldr	r0, [pc, #568]	; (80127f0 <tcp_input+0x7e4>)
 80125b8:	f7ff fbb0 	bl	8011d1c <tcp_pcb_remove>
        tcp_free(pcb);
 80125bc:	69f8      	ldr	r0, [r7, #28]
 80125be:	f7fd ff8b 	bl	80104d8 <tcp_free>
 80125c2:	e0c2      	b.n	801274a <tcp_input+0x73e>
      } else {
        err = ERR_OK;
 80125c4:	2300      	movs	r3, #0
 80125c6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80125c8:	4b8a      	ldr	r3, [pc, #552]	; (80127f4 <tcp_input+0x7e8>)
 80125ca:	881b      	ldrh	r3, [r3, #0]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d01d      	beq.n	801260c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80125d0:	4b88      	ldr	r3, [pc, #544]	; (80127f4 <tcp_input+0x7e8>)
 80125d2:	881b      	ldrh	r3, [r3, #0]
 80125d4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80125d6:	69fb      	ldr	r3, [r7, #28]
 80125d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d00a      	beq.n	80125f6 <tcp_input+0x5ea>
 80125e0:	69fb      	ldr	r3, [r7, #28]
 80125e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80125e6:	69fa      	ldr	r2, [r7, #28]
 80125e8:	6910      	ldr	r0, [r2, #16]
 80125ea:	89fa      	ldrh	r2, [r7, #14]
 80125ec:	69f9      	ldr	r1, [r7, #28]
 80125ee:	4798      	blx	r3
 80125f0:	4603      	mov	r3, r0
 80125f2:	74fb      	strb	r3, [r7, #19]
 80125f4:	e001      	b.n	80125fa <tcp_input+0x5ee>
 80125f6:	2300      	movs	r3, #0
 80125f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80125fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80125fe:	f113 0f0d 	cmn.w	r3, #13
 8012602:	f000 8099 	beq.w	8012738 <tcp_input+0x72c>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012606:	4b7b      	ldr	r3, [pc, #492]	; (80127f4 <tcp_input+0x7e8>)
 8012608:	2200      	movs	r2, #0
 801260a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801260c:	69f8      	ldr	r0, [r7, #28]
 801260e:	f000 f909 	bl	8012824 <tcp_input_delayed_close>
 8012612:	4603      	mov	r3, r0
 8012614:	2b00      	cmp	r3, #0
 8012616:	f040 8091 	bne.w	801273c <tcp_input+0x730>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801261a:	4b77      	ldr	r3, [pc, #476]	; (80127f8 <tcp_input+0x7ec>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d041      	beq.n	80126a6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012622:	69fb      	ldr	r3, [r7, #28]
 8012624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012626:	2b00      	cmp	r3, #0
 8012628:	d006      	beq.n	8012638 <tcp_input+0x62c>
 801262a:	4b74      	ldr	r3, [pc, #464]	; (80127fc <tcp_input+0x7f0>)
 801262c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012630:	4973      	ldr	r1, [pc, #460]	; (8012800 <tcp_input+0x7f4>)
 8012632:	4874      	ldr	r0, [pc, #464]	; (8012804 <tcp_input+0x7f8>)
 8012634:	f007 fd80 	bl	801a138 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012638:	69fb      	ldr	r3, [r7, #28]
 801263a:	8b5b      	ldrh	r3, [r3, #26]
 801263c:	f003 0310 	and.w	r3, r3, #16
 8012640:	2b00      	cmp	r3, #0
 8012642:	d008      	beq.n	8012656 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012644:	4b6c      	ldr	r3, [pc, #432]	; (80127f8 <tcp_input+0x7ec>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	4618      	mov	r0, r3
 801264a:	f7fd fc13 	bl	800fe74 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801264e:	69f8      	ldr	r0, [r7, #28]
 8012650:	f7fe fa2a 	bl	8010aa8 <tcp_abort>
            goto aborted;
 8012654:	e079      	b.n	801274a <tcp_input+0x73e>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012656:	69fb      	ldr	r3, [r7, #28]
 8012658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801265c:	2b00      	cmp	r3, #0
 801265e:	d00c      	beq.n	801267a <tcp_input+0x66e>
 8012660:	69fb      	ldr	r3, [r7, #28]
 8012662:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012666:	69fb      	ldr	r3, [r7, #28]
 8012668:	6918      	ldr	r0, [r3, #16]
 801266a:	4b63      	ldr	r3, [pc, #396]	; (80127f8 <tcp_input+0x7ec>)
 801266c:	681a      	ldr	r2, [r3, #0]
 801266e:	2300      	movs	r3, #0
 8012670:	69f9      	ldr	r1, [r7, #28]
 8012672:	47a0      	blx	r4
 8012674:	4603      	mov	r3, r0
 8012676:	74fb      	strb	r3, [r7, #19]
 8012678:	e008      	b.n	801268c <tcp_input+0x680>
 801267a:	4b5f      	ldr	r3, [pc, #380]	; (80127f8 <tcp_input+0x7ec>)
 801267c:	681a      	ldr	r2, [r3, #0]
 801267e:	2300      	movs	r3, #0
 8012680:	69f9      	ldr	r1, [r7, #28]
 8012682:	2000      	movs	r0, #0
 8012684:	f7ff f8a2 	bl	80117cc <tcp_recv_null>
 8012688:	4603      	mov	r3, r0
 801268a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801268c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012690:	f113 0f0d 	cmn.w	r3, #13
 8012694:	d054      	beq.n	8012740 <tcp_input+0x734>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012696:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d003      	beq.n	80126a6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801269e:	4b56      	ldr	r3, [pc, #344]	; (80127f8 <tcp_input+0x7ec>)
 80126a0:	681a      	ldr	r2, [r3, #0]
 80126a2:	69fb      	ldr	r3, [r7, #28]
 80126a4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80126a6:	4b51      	ldr	r3, [pc, #324]	; (80127ec <tcp_input+0x7e0>)
 80126a8:	781b      	ldrb	r3, [r3, #0]
 80126aa:	f003 0320 	and.w	r3, r3, #32
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d031      	beq.n	8012716 <tcp_input+0x70a>
          if (pcb->refused_data != NULL) {
 80126b2:	69fb      	ldr	r3, [r7, #28]
 80126b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d009      	beq.n	80126ce <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80126ba:	69fb      	ldr	r3, [r7, #28]
 80126bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80126be:	7b5a      	ldrb	r2, [r3, #13]
 80126c0:	69fb      	ldr	r3, [r7, #28]
 80126c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80126c4:	f042 0220 	orr.w	r2, r2, #32
 80126c8:	b2d2      	uxtb	r2, r2
 80126ca:	735a      	strb	r2, [r3, #13]
 80126cc:	e023      	b.n	8012716 <tcp_input+0x70a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80126ce:	69fb      	ldr	r3, [r7, #28]
 80126d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80126d2:	f241 0268 	movw	r2, #4200	; 0x1068
 80126d6:	4293      	cmp	r3, r2
 80126d8:	d005      	beq.n	80126e6 <tcp_input+0x6da>
              pcb->rcv_wnd++;
 80126da:	69fb      	ldr	r3, [r7, #28]
 80126dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80126de:	3301      	adds	r3, #1
 80126e0:	b29a      	uxth	r2, r3
 80126e2:	69fb      	ldr	r3, [r7, #28]
 80126e4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80126e6:	69fb      	ldr	r3, [r7, #28]
 80126e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d00b      	beq.n	8012708 <tcp_input+0x6fc>
 80126f0:	69fb      	ldr	r3, [r7, #28]
 80126f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80126f6:	69fb      	ldr	r3, [r7, #28]
 80126f8:	6918      	ldr	r0, [r3, #16]
 80126fa:	2300      	movs	r3, #0
 80126fc:	2200      	movs	r2, #0
 80126fe:	69f9      	ldr	r1, [r7, #28]
 8012700:	47a0      	blx	r4
 8012702:	4603      	mov	r3, r0
 8012704:	74fb      	strb	r3, [r7, #19]
 8012706:	e001      	b.n	801270c <tcp_input+0x700>
 8012708:	2300      	movs	r3, #0
 801270a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801270c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012710:	f113 0f0d 	cmn.w	r3, #13
 8012714:	d016      	beq.n	8012744 <tcp_input+0x738>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012716:	4b34      	ldr	r3, [pc, #208]	; (80127e8 <tcp_input+0x7dc>)
 8012718:	2200      	movs	r2, #0
 801271a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801271c:	69f8      	ldr	r0, [r7, #28]
 801271e:	f000 f881 	bl	8012824 <tcp_input_delayed_close>
 8012722:	4603      	mov	r3, r0
 8012724:	2b00      	cmp	r3, #0
 8012726:	d10f      	bne.n	8012748 <tcp_input+0x73c>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012728:	69f8      	ldr	r0, [r7, #28]
 801272a:	f002 ff15 	bl	8015558 <tcp_output>
 801272e:	e00c      	b.n	801274a <tcp_input+0x73e>
        goto aborted;
 8012730:	bf00      	nop
 8012732:	e00a      	b.n	801274a <tcp_input+0x73e>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012734:	bf00      	nop
 8012736:	e008      	b.n	801274a <tcp_input+0x73e>
              goto aborted;
 8012738:	bf00      	nop
 801273a:	e006      	b.n	801274a <tcp_input+0x73e>
          goto aborted;
 801273c:	bf00      	nop
 801273e:	e004      	b.n	801274a <tcp_input+0x73e>
            goto aborted;
 8012740:	bf00      	nop
 8012742:	e002      	b.n	801274a <tcp_input+0x73e>
              goto aborted;
 8012744:	bf00      	nop
 8012746:	e000      	b.n	801274a <tcp_input+0x73e>
          goto aborted;
 8012748:	bf00      	nop
    tcp_input_pcb = NULL;
 801274a:	4b27      	ldr	r3, [pc, #156]	; (80127e8 <tcp_input+0x7dc>)
 801274c:	2200      	movs	r2, #0
 801274e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012750:	4b29      	ldr	r3, [pc, #164]	; (80127f8 <tcp_input+0x7ec>)
 8012752:	2200      	movs	r2, #0
 8012754:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012756:	4b2c      	ldr	r3, [pc, #176]	; (8012808 <tcp_input+0x7fc>)
 8012758:	685b      	ldr	r3, [r3, #4]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d03f      	beq.n	80127de <tcp_input+0x7d2>
      pbuf_free(inseg.p);
 801275e:	4b2a      	ldr	r3, [pc, #168]	; (8012808 <tcp_input+0x7fc>)
 8012760:	685b      	ldr	r3, [r3, #4]
 8012762:	4618      	mov	r0, r3
 8012764:	f7fd fb86 	bl	800fe74 <pbuf_free>
      inseg.p = NULL;
 8012768:	4b27      	ldr	r3, [pc, #156]	; (8012808 <tcp_input+0x7fc>)
 801276a:	2200      	movs	r2, #0
 801276c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801276e:	e036      	b.n	80127de <tcp_input+0x7d2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012770:	4b26      	ldr	r3, [pc, #152]	; (801280c <tcp_input+0x800>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	899b      	ldrh	r3, [r3, #12]
 8012776:	b29b      	uxth	r3, r3
 8012778:	4618      	mov	r0, r3
 801277a:	f7fc f8b8 	bl	800e8ee <lwip_htons>
 801277e:	4603      	mov	r3, r0
 8012780:	b2db      	uxtb	r3, r3
 8012782:	f003 0304 	and.w	r3, r3, #4
 8012786:	2b00      	cmp	r3, #0
 8012788:	d118      	bne.n	80127bc <tcp_input+0x7b0>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801278a:	4b21      	ldr	r3, [pc, #132]	; (8012810 <tcp_input+0x804>)
 801278c:	6819      	ldr	r1, [r3, #0]
 801278e:	4b21      	ldr	r3, [pc, #132]	; (8012814 <tcp_input+0x808>)
 8012790:	881b      	ldrh	r3, [r3, #0]
 8012792:	461a      	mov	r2, r3
 8012794:	4b20      	ldr	r3, [pc, #128]	; (8012818 <tcp_input+0x80c>)
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801279a:	4b1c      	ldr	r3, [pc, #112]	; (801280c <tcp_input+0x800>)
 801279c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801279e:	885b      	ldrh	r3, [r3, #2]
 80127a0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80127a2:	4a1a      	ldr	r2, [pc, #104]	; (801280c <tcp_input+0x800>)
 80127a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127a6:	8812      	ldrh	r2, [r2, #0]
 80127a8:	b292      	uxth	r2, r2
 80127aa:	9202      	str	r2, [sp, #8]
 80127ac:	9301      	str	r3, [sp, #4]
 80127ae:	4b1b      	ldr	r3, [pc, #108]	; (801281c <tcp_input+0x810>)
 80127b0:	9300      	str	r3, [sp, #0]
 80127b2:	4b1b      	ldr	r3, [pc, #108]	; (8012820 <tcp_input+0x814>)
 80127b4:	4602      	mov	r2, r0
 80127b6:	2000      	movs	r0, #0
 80127b8:	f003 fc82 	bl	80160c0 <tcp_rst>
    pbuf_free(p);
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f7fd fb59 	bl	800fe74 <pbuf_free>
  return;
 80127c2:	e00c      	b.n	80127de <tcp_input+0x7d2>
    goto dropped;
 80127c4:	bf00      	nop
 80127c6:	e006      	b.n	80127d6 <tcp_input+0x7ca>
    goto dropped;
 80127c8:	bf00      	nop
 80127ca:	e004      	b.n	80127d6 <tcp_input+0x7ca>
    goto dropped;
 80127cc:	bf00      	nop
 80127ce:	e002      	b.n	80127d6 <tcp_input+0x7ca>
      goto dropped;
 80127d0:	bf00      	nop
 80127d2:	e000      	b.n	80127d6 <tcp_input+0x7ca>
      goto dropped;
 80127d4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f7fd fb4c 	bl	800fe74 <pbuf_free>
 80127dc:	e000      	b.n	80127e0 <tcp_input+0x7d4>
  return;
 80127de:	bf00      	nop
}
 80127e0:	3724      	adds	r7, #36	; 0x24
 80127e2:	46bd      	mov	sp, r7
 80127e4:	bd90      	pop	{r4, r7, pc}
 80127e6:	bf00      	nop
 80127e8:	20018920 	.word	0x20018920
 80127ec:	20000845 	.word	0x20000845
 80127f0:	2001890c 	.word	0x2001890c
 80127f4:	20000840 	.word	0x20000840
 80127f8:	20000848 	.word	0x20000848
 80127fc:	0801db38 	.word	0x0801db38
 8012800:	0801dcec 	.word	0x0801dcec
 8012804:	0801db84 	.word	0x0801db84
 8012808:	20000818 	.word	0x20000818
 801280c:	20000828 	.word	0x20000828
 8012810:	2000083c 	.word	0x2000083c
 8012814:	20000842 	.word	0x20000842
 8012818:	20000838 	.word	0x20000838
 801281c:	20007cb8 	.word	0x20007cb8
 8012820:	20007cbc 	.word	0x20007cbc

08012824 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b082      	sub	sp, #8
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d106      	bne.n	8012840 <tcp_input_delayed_close+0x1c>
 8012832:	4b17      	ldr	r3, [pc, #92]	; (8012890 <tcp_input_delayed_close+0x6c>)
 8012834:	f240 225a 	movw	r2, #602	; 0x25a
 8012838:	4916      	ldr	r1, [pc, #88]	; (8012894 <tcp_input_delayed_close+0x70>)
 801283a:	4817      	ldr	r0, [pc, #92]	; (8012898 <tcp_input_delayed_close+0x74>)
 801283c:	f007 fc7c 	bl	801a138 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012840:	4b16      	ldr	r3, [pc, #88]	; (801289c <tcp_input_delayed_close+0x78>)
 8012842:	781b      	ldrb	r3, [r3, #0]
 8012844:	f003 0310 	and.w	r3, r3, #16
 8012848:	2b00      	cmp	r3, #0
 801284a:	d01c      	beq.n	8012886 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	8b5b      	ldrh	r3, [r3, #26]
 8012850:	f003 0310 	and.w	r3, r3, #16
 8012854:	2b00      	cmp	r3, #0
 8012856:	d10d      	bne.n	8012874 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801285e:	2b00      	cmp	r3, #0
 8012860:	d008      	beq.n	8012874 <tcp_input_delayed_close+0x50>
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012868:	687a      	ldr	r2, [r7, #4]
 801286a:	6912      	ldr	r2, [r2, #16]
 801286c:	f06f 010e 	mvn.w	r1, #14
 8012870:	4610      	mov	r0, r2
 8012872:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012874:	6879      	ldr	r1, [r7, #4]
 8012876:	480a      	ldr	r0, [pc, #40]	; (80128a0 <tcp_input_delayed_close+0x7c>)
 8012878:	f7ff fa50 	bl	8011d1c <tcp_pcb_remove>
    tcp_free(pcb);
 801287c:	6878      	ldr	r0, [r7, #4]
 801287e:	f7fd fe2b 	bl	80104d8 <tcp_free>
    return 1;
 8012882:	2301      	movs	r3, #1
 8012884:	e000      	b.n	8012888 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012886:	2300      	movs	r3, #0
}
 8012888:	4618      	mov	r0, r3
 801288a:	3708      	adds	r7, #8
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}
 8012890:	0801db38 	.word	0x0801db38
 8012894:	0801dd08 	.word	0x0801dd08
 8012898:	0801db84 	.word	0x0801db84
 801289c:	20000845 	.word	0x20000845
 80128a0:	2001890c 	.word	0x2001890c

080128a4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80128a4:	b590      	push	{r4, r7, lr}
 80128a6:	b08b      	sub	sp, #44	; 0x2c
 80128a8:	af04      	add	r7, sp, #16
 80128aa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80128ac:	4b6f      	ldr	r3, [pc, #444]	; (8012a6c <tcp_listen_input+0x1c8>)
 80128ae:	781b      	ldrb	r3, [r3, #0]
 80128b0:	f003 0304 	and.w	r3, r3, #4
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	f040 80d2 	bne.w	8012a5e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d106      	bne.n	80128ce <tcp_listen_input+0x2a>
 80128c0:	4b6b      	ldr	r3, [pc, #428]	; (8012a70 <tcp_listen_input+0x1cc>)
 80128c2:	f240 2281 	movw	r2, #641	; 0x281
 80128c6:	496b      	ldr	r1, [pc, #428]	; (8012a74 <tcp_listen_input+0x1d0>)
 80128c8:	486b      	ldr	r0, [pc, #428]	; (8012a78 <tcp_listen_input+0x1d4>)
 80128ca:	f007 fc35 	bl	801a138 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80128ce:	4b67      	ldr	r3, [pc, #412]	; (8012a6c <tcp_listen_input+0x1c8>)
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	f003 0310 	and.w	r3, r3, #16
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d019      	beq.n	801290e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80128da:	4b68      	ldr	r3, [pc, #416]	; (8012a7c <tcp_listen_input+0x1d8>)
 80128dc:	6819      	ldr	r1, [r3, #0]
 80128de:	4b68      	ldr	r3, [pc, #416]	; (8012a80 <tcp_listen_input+0x1dc>)
 80128e0:	881b      	ldrh	r3, [r3, #0]
 80128e2:	461a      	mov	r2, r3
 80128e4:	4b67      	ldr	r3, [pc, #412]	; (8012a84 <tcp_listen_input+0x1e0>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80128ea:	4b67      	ldr	r3, [pc, #412]	; (8012a88 <tcp_listen_input+0x1e4>)
 80128ec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80128ee:	885b      	ldrh	r3, [r3, #2]
 80128f0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80128f2:	4a65      	ldr	r2, [pc, #404]	; (8012a88 <tcp_listen_input+0x1e4>)
 80128f4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80128f6:	8812      	ldrh	r2, [r2, #0]
 80128f8:	b292      	uxth	r2, r2
 80128fa:	9202      	str	r2, [sp, #8]
 80128fc:	9301      	str	r3, [sp, #4]
 80128fe:	4b63      	ldr	r3, [pc, #396]	; (8012a8c <tcp_listen_input+0x1e8>)
 8012900:	9300      	str	r3, [sp, #0]
 8012902:	4b63      	ldr	r3, [pc, #396]	; (8012a90 <tcp_listen_input+0x1ec>)
 8012904:	4602      	mov	r2, r0
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	f003 fbda 	bl	80160c0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801290c:	e0a9      	b.n	8012a62 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801290e:	4b57      	ldr	r3, [pc, #348]	; (8012a6c <tcp_listen_input+0x1c8>)
 8012910:	781b      	ldrb	r3, [r3, #0]
 8012912:	f003 0302 	and.w	r3, r3, #2
 8012916:	2b00      	cmp	r3, #0
 8012918:	f000 80a3 	beq.w	8012a62 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	7d5b      	ldrb	r3, [r3, #21]
 8012920:	4618      	mov	r0, r3
 8012922:	f7ff f877 	bl	8011a14 <tcp_alloc>
 8012926:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d111      	bne.n	8012952 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	699b      	ldr	r3, [r3, #24]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d00a      	beq.n	801294c <tcp_listen_input+0xa8>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	699b      	ldr	r3, [r3, #24]
 801293a:	687a      	ldr	r2, [r7, #4]
 801293c:	6910      	ldr	r0, [r2, #16]
 801293e:	f04f 32ff 	mov.w	r2, #4294967295
 8012942:	2100      	movs	r1, #0
 8012944:	4798      	blx	r3
 8012946:	4603      	mov	r3, r0
 8012948:	73bb      	strb	r3, [r7, #14]
      return;
 801294a:	e08b      	b.n	8012a64 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801294c:	23f0      	movs	r3, #240	; 0xf0
 801294e:	73bb      	strb	r3, [r7, #14]
      return;
 8012950:	e088      	b.n	8012a64 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012952:	4b50      	ldr	r3, [pc, #320]	; (8012a94 <tcp_listen_input+0x1f0>)
 8012954:	695a      	ldr	r2, [r3, #20]
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801295a:	4b4e      	ldr	r3, [pc, #312]	; (8012a94 <tcp_listen_input+0x1f0>)
 801295c:	691a      	ldr	r2, [r3, #16]
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	8ada      	ldrh	r2, [r3, #22]
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801296a:	4b47      	ldr	r3, [pc, #284]	; (8012a88 <tcp_listen_input+0x1e4>)
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	881b      	ldrh	r3, [r3, #0]
 8012970:	b29a      	uxth	r2, r3
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	2203      	movs	r2, #3
 801297a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801297c:	4b41      	ldr	r3, [pc, #260]	; (8012a84 <tcp_listen_input+0x1e0>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	1c5a      	adds	r2, r3, #1
 8012982:	697b      	ldr	r3, [r7, #20]
 8012984:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801298e:	6978      	ldr	r0, [r7, #20]
 8012990:	f7ff fa58 	bl	8011e44 <tcp_next_iss>
 8012994:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012996:	697b      	ldr	r3, [r7, #20]
 8012998:	693a      	ldr	r2, [r7, #16]
 801299a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801299c:	697b      	ldr	r3, [r7, #20]
 801299e:	693a      	ldr	r2, [r7, #16]
 80129a0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	693a      	ldr	r2, [r7, #16]
 80129a6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	693a      	ldr	r2, [r7, #16]
 80129ac:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80129ae:	4b35      	ldr	r3, [pc, #212]	; (8012a84 <tcp_listen_input+0x1e0>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	1e5a      	subs	r2, r3, #1
 80129b4:	697b      	ldr	r3, [r7, #20]
 80129b6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	691a      	ldr	r2, [r3, #16]
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80129c0:	697b      	ldr	r3, [r7, #20]
 80129c2:	687a      	ldr	r2, [r7, #4]
 80129c4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	7a5b      	ldrb	r3, [r3, #9]
 80129ca:	f003 030c 	and.w	r3, r3, #12
 80129ce:	b2da      	uxtb	r2, r3
 80129d0:	697b      	ldr	r3, [r7, #20]
 80129d2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	7a1a      	ldrb	r2, [r3, #8]
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80129dc:	4b2e      	ldr	r3, [pc, #184]	; (8012a98 <tcp_listen_input+0x1f4>)
 80129de:	681a      	ldr	r2, [r3, #0]
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	60da      	str	r2, [r3, #12]
 80129e4:	4a2c      	ldr	r2, [pc, #176]	; (8012a98 <tcp_listen_input+0x1f4>)
 80129e6:	697b      	ldr	r3, [r7, #20]
 80129e8:	6013      	str	r3, [r2, #0]
 80129ea:	f003 fd2b 	bl	8016444 <tcp_timer_needed>
 80129ee:	4b2b      	ldr	r3, [pc, #172]	; (8012a9c <tcp_listen_input+0x1f8>)
 80129f0:	2201      	movs	r2, #1
 80129f2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80129f4:	6978      	ldr	r0, [r7, #20]
 80129f6:	f001 fd8d 	bl	8014514 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80129fa:	4b23      	ldr	r3, [pc, #140]	; (8012a88 <tcp_listen_input+0x1e4>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	89db      	ldrh	r3, [r3, #14]
 8012a00:	b29a      	uxth	r2, r3
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012a08:	697b      	ldr	r3, [r7, #20]
 8012a0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012a0e:	697b      	ldr	r3, [r7, #20]
 8012a10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	3304      	adds	r3, #4
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f005 f8ef 	bl	8017c00 <ip4_route>
 8012a22:	4601      	mov	r1, r0
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	3304      	adds	r3, #4
 8012a28:	461a      	mov	r2, r3
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	f7ff fa30 	bl	8011e90 <tcp_eff_send_mss_netif>
 8012a30:	4603      	mov	r3, r0
 8012a32:	461a      	mov	r2, r3
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012a38:	2112      	movs	r1, #18
 8012a3a:	6978      	ldr	r0, [r7, #20]
 8012a3c:	f002 fc9e 	bl	801537c <tcp_enqueue_flags>
 8012a40:	4603      	mov	r3, r0
 8012a42:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d004      	beq.n	8012a56 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012a4c:	2100      	movs	r1, #0
 8012a4e:	6978      	ldr	r0, [r7, #20]
 8012a50:	f7fd ff6c 	bl	801092c <tcp_abandon>
      return;
 8012a54:	e006      	b.n	8012a64 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012a56:	6978      	ldr	r0, [r7, #20]
 8012a58:	f002 fd7e 	bl	8015558 <tcp_output>
  return;
 8012a5c:	e001      	b.n	8012a62 <tcp_listen_input+0x1be>
    return;
 8012a5e:	bf00      	nop
 8012a60:	e000      	b.n	8012a64 <tcp_listen_input+0x1c0>
  return;
 8012a62:	bf00      	nop
}
 8012a64:	371c      	adds	r7, #28
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd90      	pop	{r4, r7, pc}
 8012a6a:	bf00      	nop
 8012a6c:	20000844 	.word	0x20000844
 8012a70:	0801db38 	.word	0x0801db38
 8012a74:	0801dd30 	.word	0x0801dd30
 8012a78:	0801db84 	.word	0x0801db84
 8012a7c:	2000083c 	.word	0x2000083c
 8012a80:	20000842 	.word	0x20000842
 8012a84:	20000838 	.word	0x20000838
 8012a88:	20000828 	.word	0x20000828
 8012a8c:	20007cb8 	.word	0x20007cb8
 8012a90:	20007cbc 	.word	0x20007cbc
 8012a94:	20007ca8 	.word	0x20007ca8
 8012a98:	2001890c 	.word	0x2001890c
 8012a9c:	20018908 	.word	0x20018908

08012aa0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b086      	sub	sp, #24
 8012aa4:	af04      	add	r7, sp, #16
 8012aa6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012aa8:	4b2f      	ldr	r3, [pc, #188]	; (8012b68 <tcp_timewait_input+0xc8>)
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	f003 0304 	and.w	r3, r3, #4
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d153      	bne.n	8012b5c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d106      	bne.n	8012ac8 <tcp_timewait_input+0x28>
 8012aba:	4b2c      	ldr	r3, [pc, #176]	; (8012b6c <tcp_timewait_input+0xcc>)
 8012abc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012ac0:	492b      	ldr	r1, [pc, #172]	; (8012b70 <tcp_timewait_input+0xd0>)
 8012ac2:	482c      	ldr	r0, [pc, #176]	; (8012b74 <tcp_timewait_input+0xd4>)
 8012ac4:	f007 fb38 	bl	801a138 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012ac8:	4b27      	ldr	r3, [pc, #156]	; (8012b68 <tcp_timewait_input+0xc8>)
 8012aca:	781b      	ldrb	r3, [r3, #0]
 8012acc:	f003 0302 	and.w	r3, r3, #2
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d02a      	beq.n	8012b2a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012ad4:	4b28      	ldr	r3, [pc, #160]	; (8012b78 <tcp_timewait_input+0xd8>)
 8012ad6:	681a      	ldr	r2, [r3, #0]
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012adc:	1ad3      	subs	r3, r2, r3
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	db2d      	blt.n	8012b3e <tcp_timewait_input+0x9e>
 8012ae2:	4b25      	ldr	r3, [pc, #148]	; (8012b78 <tcp_timewait_input+0xd8>)
 8012ae4:	681a      	ldr	r2, [r3, #0]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aea:	6879      	ldr	r1, [r7, #4]
 8012aec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012aee:	440b      	add	r3, r1
 8012af0:	1ad3      	subs	r3, r2, r3
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	dc23      	bgt.n	8012b3e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012af6:	4b21      	ldr	r3, [pc, #132]	; (8012b7c <tcp_timewait_input+0xdc>)
 8012af8:	6819      	ldr	r1, [r3, #0]
 8012afa:	4b21      	ldr	r3, [pc, #132]	; (8012b80 <tcp_timewait_input+0xe0>)
 8012afc:	881b      	ldrh	r3, [r3, #0]
 8012afe:	461a      	mov	r2, r3
 8012b00:	4b1d      	ldr	r3, [pc, #116]	; (8012b78 <tcp_timewait_input+0xd8>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b06:	4b1f      	ldr	r3, [pc, #124]	; (8012b84 <tcp_timewait_input+0xe4>)
 8012b08:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b0a:	885b      	ldrh	r3, [r3, #2]
 8012b0c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b0e:	4a1d      	ldr	r2, [pc, #116]	; (8012b84 <tcp_timewait_input+0xe4>)
 8012b10:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b12:	8812      	ldrh	r2, [r2, #0]
 8012b14:	b292      	uxth	r2, r2
 8012b16:	9202      	str	r2, [sp, #8]
 8012b18:	9301      	str	r3, [sp, #4]
 8012b1a:	4b1b      	ldr	r3, [pc, #108]	; (8012b88 <tcp_timewait_input+0xe8>)
 8012b1c:	9300      	str	r3, [sp, #0]
 8012b1e:	4b1b      	ldr	r3, [pc, #108]	; (8012b8c <tcp_timewait_input+0xec>)
 8012b20:	4602      	mov	r2, r0
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f003 facc 	bl	80160c0 <tcp_rst>
      return;
 8012b28:	e01b      	b.n	8012b62 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012b2a:	4b0f      	ldr	r3, [pc, #60]	; (8012b68 <tcp_timewait_input+0xc8>)
 8012b2c:	781b      	ldrb	r3, [r3, #0]
 8012b2e:	f003 0301 	and.w	r3, r3, #1
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d003      	beq.n	8012b3e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012b36:	4b16      	ldr	r3, [pc, #88]	; (8012b90 <tcp_timewait_input+0xf0>)
 8012b38:	681a      	ldr	r2, [r3, #0]
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012b3e:	4b10      	ldr	r3, [pc, #64]	; (8012b80 <tcp_timewait_input+0xe0>)
 8012b40:	881b      	ldrh	r3, [r3, #0]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d00c      	beq.n	8012b60 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	8b5b      	ldrh	r3, [r3, #26]
 8012b4a:	f043 0302 	orr.w	r3, r3, #2
 8012b4e:	b29a      	uxth	r2, r3
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f002 fcff 	bl	8015558 <tcp_output>
  }
  return;
 8012b5a:	e001      	b.n	8012b60 <tcp_timewait_input+0xc0>
    return;
 8012b5c:	bf00      	nop
 8012b5e:	e000      	b.n	8012b62 <tcp_timewait_input+0xc2>
  return;
 8012b60:	bf00      	nop
}
 8012b62:	3708      	adds	r7, #8
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}
 8012b68:	20000844 	.word	0x20000844
 8012b6c:	0801db38 	.word	0x0801db38
 8012b70:	0801dd50 	.word	0x0801dd50
 8012b74:	0801db84 	.word	0x0801db84
 8012b78:	20000838 	.word	0x20000838
 8012b7c:	2000083c 	.word	0x2000083c
 8012b80:	20000842 	.word	0x20000842
 8012b84:	20000828 	.word	0x20000828
 8012b88:	20007cb8 	.word	0x20007cb8
 8012b8c:	20007cbc 	.word	0x20007cbc
 8012b90:	20018910 	.word	0x20018910

08012b94 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012b94:	b590      	push	{r4, r7, lr}
 8012b96:	b08d      	sub	sp, #52	; 0x34
 8012b98:	af04      	add	r7, sp, #16
 8012b9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d106      	bne.n	8012bb8 <tcp_process+0x24>
 8012baa:	4ba5      	ldr	r3, [pc, #660]	; (8012e40 <tcp_process+0x2ac>)
 8012bac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012bb0:	49a4      	ldr	r1, [pc, #656]	; (8012e44 <tcp_process+0x2b0>)
 8012bb2:	48a5      	ldr	r0, [pc, #660]	; (8012e48 <tcp_process+0x2b4>)
 8012bb4:	f007 fac0 	bl	801a138 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012bb8:	4ba4      	ldr	r3, [pc, #656]	; (8012e4c <tcp_process+0x2b8>)
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	f003 0304 	and.w	r3, r3, #4
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d04e      	beq.n	8012c62 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	7d1b      	ldrb	r3, [r3, #20]
 8012bc8:	2b02      	cmp	r3, #2
 8012bca:	d108      	bne.n	8012bde <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012bd0:	4b9f      	ldr	r3, [pc, #636]	; (8012e50 <tcp_process+0x2bc>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d123      	bne.n	8012c20 <tcp_process+0x8c>
        acceptable = 1;
 8012bd8:	2301      	movs	r3, #1
 8012bda:	76fb      	strb	r3, [r7, #27]
 8012bdc:	e020      	b.n	8012c20 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012be2:	4b9c      	ldr	r3, [pc, #624]	; (8012e54 <tcp_process+0x2c0>)
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d102      	bne.n	8012bf0 <tcp_process+0x5c>
        acceptable = 1;
 8012bea:	2301      	movs	r3, #1
 8012bec:	76fb      	strb	r3, [r7, #27]
 8012bee:	e017      	b.n	8012c20 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012bf0:	4b98      	ldr	r3, [pc, #608]	; (8012e54 <tcp_process+0x2c0>)
 8012bf2:	681a      	ldr	r2, [r3, #0]
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bf8:	1ad3      	subs	r3, r2, r3
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	db10      	blt.n	8012c20 <tcp_process+0x8c>
 8012bfe:	4b95      	ldr	r3, [pc, #596]	; (8012e54 <tcp_process+0x2c0>)
 8012c00:	681a      	ldr	r2, [r3, #0]
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c06:	6879      	ldr	r1, [r7, #4]
 8012c08:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c0a:	440b      	add	r3, r1
 8012c0c:	1ad3      	subs	r3, r2, r3
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	dc06      	bgt.n	8012c20 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	8b5b      	ldrh	r3, [r3, #26]
 8012c16:	f043 0302 	orr.w	r3, r3, #2
 8012c1a:	b29a      	uxth	r2, r3
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012c20:	7efb      	ldrb	r3, [r7, #27]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d01b      	beq.n	8012c5e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	7d1b      	ldrb	r3, [r3, #20]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d106      	bne.n	8012c3c <tcp_process+0xa8>
 8012c2e:	4b84      	ldr	r3, [pc, #528]	; (8012e40 <tcp_process+0x2ac>)
 8012c30:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012c34:	4988      	ldr	r1, [pc, #544]	; (8012e58 <tcp_process+0x2c4>)
 8012c36:	4884      	ldr	r0, [pc, #528]	; (8012e48 <tcp_process+0x2b4>)
 8012c38:	f007 fa7e 	bl	801a138 <iprintf>
      recv_flags |= TF_RESET;
 8012c3c:	4b87      	ldr	r3, [pc, #540]	; (8012e5c <tcp_process+0x2c8>)
 8012c3e:	781b      	ldrb	r3, [r3, #0]
 8012c40:	f043 0308 	orr.w	r3, r3, #8
 8012c44:	b2da      	uxtb	r2, r3
 8012c46:	4b85      	ldr	r3, [pc, #532]	; (8012e5c <tcp_process+0x2c8>)
 8012c48:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	8b5b      	ldrh	r3, [r3, #26]
 8012c4e:	f023 0301 	bic.w	r3, r3, #1
 8012c52:	b29a      	uxth	r2, r3
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012c58:	f06f 030d 	mvn.w	r3, #13
 8012c5c:	e37a      	b.n	8013354 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	e378      	b.n	8013354 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012c62:	4b7a      	ldr	r3, [pc, #488]	; (8012e4c <tcp_process+0x2b8>)
 8012c64:	781b      	ldrb	r3, [r3, #0]
 8012c66:	f003 0302 	and.w	r3, r3, #2
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d010      	beq.n	8012c90 <tcp_process+0xfc>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	7d1b      	ldrb	r3, [r3, #20]
 8012c72:	2b02      	cmp	r3, #2
 8012c74:	d00c      	beq.n	8012c90 <tcp_process+0xfc>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	7d1b      	ldrb	r3, [r3, #20]
 8012c7a:	2b03      	cmp	r3, #3
 8012c7c:	d008      	beq.n	8012c90 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	8b5b      	ldrh	r3, [r3, #26]
 8012c82:	f043 0302 	orr.w	r3, r3, #2
 8012c86:	b29a      	uxth	r2, r3
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	e361      	b.n	8013354 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	8b5b      	ldrh	r3, [r3, #26]
 8012c94:	f003 0310 	and.w	r3, r3, #16
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d103      	bne.n	8012ca4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012c9c:	4b70      	ldr	r3, [pc, #448]	; (8012e60 <tcp_process+0x2cc>)
 8012c9e:	681a      	ldr	r2, [r3, #0]
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2200      	movs	r2, #0
 8012cb0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f001 fc2d 	bl	8014514 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	7d1b      	ldrb	r3, [r3, #20]
 8012cbe:	3b02      	subs	r3, #2
 8012cc0:	2b07      	cmp	r3, #7
 8012cc2:	f200 8337 	bhi.w	8013334 <tcp_process+0x7a0>
 8012cc6:	a201      	add	r2, pc, #4	; (adr r2, 8012ccc <tcp_process+0x138>)
 8012cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ccc:	08012ced 	.word	0x08012ced
 8012cd0:	08012f1d 	.word	0x08012f1d
 8012cd4:	08013095 	.word	0x08013095
 8012cd8:	080130bf 	.word	0x080130bf
 8012cdc:	080131e3 	.word	0x080131e3
 8012ce0:	08013095 	.word	0x08013095
 8012ce4:	0801326f 	.word	0x0801326f
 8012ce8:	080132ff 	.word	0x080132ff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012cec:	4b57      	ldr	r3, [pc, #348]	; (8012e4c <tcp_process+0x2b8>)
 8012cee:	781b      	ldrb	r3, [r3, #0]
 8012cf0:	f003 0310 	and.w	r3, r3, #16
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	f000 80e4 	beq.w	8012ec2 <tcp_process+0x32e>
 8012cfa:	4b54      	ldr	r3, [pc, #336]	; (8012e4c <tcp_process+0x2b8>)
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	f003 0302 	and.w	r3, r3, #2
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	f000 80dd 	beq.w	8012ec2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d0c:	1c5a      	adds	r2, r3, #1
 8012d0e:	4b50      	ldr	r3, [pc, #320]	; (8012e50 <tcp_process+0x2bc>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	429a      	cmp	r2, r3
 8012d14:	f040 80d5 	bne.w	8012ec2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012d18:	4b4e      	ldr	r3, [pc, #312]	; (8012e54 <tcp_process+0x2c0>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	1c5a      	adds	r2, r3, #1
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012d2a:	4b49      	ldr	r3, [pc, #292]	; (8012e50 <tcp_process+0x2bc>)
 8012d2c:	681a      	ldr	r2, [r3, #0]
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012d32:	4b4c      	ldr	r3, [pc, #304]	; (8012e64 <tcp_process+0x2d0>)
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	89db      	ldrh	r3, [r3, #14]
 8012d38:	b29a      	uxth	r2, r3
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012d4c:	4b41      	ldr	r3, [pc, #260]	; (8012e54 <tcp_process+0x2c0>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	1e5a      	subs	r2, r3, #1
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2204      	movs	r2, #4
 8012d5a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	3304      	adds	r3, #4
 8012d64:	4618      	mov	r0, r3
 8012d66:	f004 ff4b 	bl	8017c00 <ip4_route>
 8012d6a:	4601      	mov	r1, r0
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	3304      	adds	r3, #4
 8012d70:	461a      	mov	r2, r3
 8012d72:	4620      	mov	r0, r4
 8012d74:	f7ff f88c 	bl	8011e90 <tcp_eff_send_mss_netif>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	461a      	mov	r2, r3
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d84:	009a      	lsls	r2, r3, #2
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d8a:	005b      	lsls	r3, r3, #1
 8012d8c:	f241 111c 	movw	r1, #4380	; 0x111c
 8012d90:	428b      	cmp	r3, r1
 8012d92:	bf38      	it	cc
 8012d94:	460b      	movcc	r3, r1
 8012d96:	429a      	cmp	r2, r3
 8012d98:	d204      	bcs.n	8012da4 <tcp_process+0x210>
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d9e:	009b      	lsls	r3, r3, #2
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	e00d      	b.n	8012dc0 <tcp_process+0x22c>
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012da8:	005b      	lsls	r3, r3, #1
 8012daa:	f241 121c 	movw	r2, #4380	; 0x111c
 8012dae:	4293      	cmp	r3, r2
 8012db0:	d904      	bls.n	8012dbc <tcp_process+0x228>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012db6:	005b      	lsls	r3, r3, #1
 8012db8:	b29b      	uxth	r3, r3
 8012dba:	e001      	b.n	8012dc0 <tcp_process+0x22c>
 8012dbc:	f241 131c 	movw	r3, #4380	; 0x111c
 8012dc0:	687a      	ldr	r2, [r7, #4]
 8012dc2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d106      	bne.n	8012dde <tcp_process+0x24a>
 8012dd0:	4b1b      	ldr	r3, [pc, #108]	; (8012e40 <tcp_process+0x2ac>)
 8012dd2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012dd6:	4924      	ldr	r1, [pc, #144]	; (8012e68 <tcp_process+0x2d4>)
 8012dd8:	481b      	ldr	r0, [pc, #108]	; (8012e48 <tcp_process+0x2b4>)
 8012dda:	f007 f9ad 	bl	801a138 <iprintf>
        --pcb->snd_queuelen;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012de4:	3b01      	subs	r3, #1
 8012de6:	b29a      	uxth	r2, r3
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012df2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012df4:	69fb      	ldr	r3, [r7, #28]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d111      	bne.n	8012e1e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dfe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012e00:	69fb      	ldr	r3, [r7, #28]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d106      	bne.n	8012e14 <tcp_process+0x280>
 8012e06:	4b0e      	ldr	r3, [pc, #56]	; (8012e40 <tcp_process+0x2ac>)
 8012e08:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012e0c:	4917      	ldr	r1, [pc, #92]	; (8012e6c <tcp_process+0x2d8>)
 8012e0e:	480e      	ldr	r0, [pc, #56]	; (8012e48 <tcp_process+0x2b4>)
 8012e10:	f007 f992 	bl	801a138 <iprintf>
          pcb->unsent = rseg->next;
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	681a      	ldr	r2, [r3, #0]
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	66da      	str	r2, [r3, #108]	; 0x6c
 8012e1c:	e003      	b.n	8012e26 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8012e1e:	69fb      	ldr	r3, [r7, #28]
 8012e20:	681a      	ldr	r2, [r3, #0]
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012e26:	69f8      	ldr	r0, [r7, #28]
 8012e28:	f7fe fc8b 	bl	8011742 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d11d      	bne.n	8012e70 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e3a:	861a      	strh	r2, [r3, #48]	; 0x30
 8012e3c:	e01f      	b.n	8012e7e <tcp_process+0x2ea>
 8012e3e:	bf00      	nop
 8012e40:	0801db38 	.word	0x0801db38
 8012e44:	0801dd70 	.word	0x0801dd70
 8012e48:	0801db84 	.word	0x0801db84
 8012e4c:	20000844 	.word	0x20000844
 8012e50:	2000083c 	.word	0x2000083c
 8012e54:	20000838 	.word	0x20000838
 8012e58:	0801dd8c 	.word	0x0801dd8c
 8012e5c:	20000845 	.word	0x20000845
 8012e60:	20018910 	.word	0x20018910
 8012e64:	20000828 	.word	0x20000828
 8012e68:	0801ddac 	.word	0x0801ddac
 8012e6c:	0801ddc4 	.word	0x0801ddc4
        } else {
          pcb->rtime = 0;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2200      	movs	r2, #0
 8012e74:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2200      	movs	r2, #0
 8012e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d00a      	beq.n	8012e9e <tcp_process+0x30a>
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012e8e:	687a      	ldr	r2, [r7, #4]
 8012e90:	6910      	ldr	r0, [r2, #16]
 8012e92:	2200      	movs	r2, #0
 8012e94:	6879      	ldr	r1, [r7, #4]
 8012e96:	4798      	blx	r3
 8012e98:	4603      	mov	r3, r0
 8012e9a:	76bb      	strb	r3, [r7, #26]
 8012e9c:	e001      	b.n	8012ea2 <tcp_process+0x30e>
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012ea2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012ea6:	f113 0f0d 	cmn.w	r3, #13
 8012eaa:	d102      	bne.n	8012eb2 <tcp_process+0x31e>
          return ERR_ABRT;
 8012eac:	f06f 030c 	mvn.w	r3, #12
 8012eb0:	e250      	b.n	8013354 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	8b5b      	ldrh	r3, [r3, #26]
 8012eb6:	f043 0302 	orr.w	r3, r3, #2
 8012eba:	b29a      	uxth	r2, r3
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012ec0:	e23a      	b.n	8013338 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012ec2:	4b9d      	ldr	r3, [pc, #628]	; (8013138 <tcp_process+0x5a4>)
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	f003 0310 	and.w	r3, r3, #16
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	f000 8234 	beq.w	8013338 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ed0:	4b9a      	ldr	r3, [pc, #616]	; (801313c <tcp_process+0x5a8>)
 8012ed2:	6819      	ldr	r1, [r3, #0]
 8012ed4:	4b9a      	ldr	r3, [pc, #616]	; (8013140 <tcp_process+0x5ac>)
 8012ed6:	881b      	ldrh	r3, [r3, #0]
 8012ed8:	461a      	mov	r2, r3
 8012eda:	4b9a      	ldr	r3, [pc, #616]	; (8013144 <tcp_process+0x5b0>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ee0:	4b99      	ldr	r3, [pc, #612]	; (8013148 <tcp_process+0x5b4>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ee4:	885b      	ldrh	r3, [r3, #2]
 8012ee6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ee8:	4a97      	ldr	r2, [pc, #604]	; (8013148 <tcp_process+0x5b4>)
 8012eea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012eec:	8812      	ldrh	r2, [r2, #0]
 8012eee:	b292      	uxth	r2, r2
 8012ef0:	9202      	str	r2, [sp, #8]
 8012ef2:	9301      	str	r3, [sp, #4]
 8012ef4:	4b95      	ldr	r3, [pc, #596]	; (801314c <tcp_process+0x5b8>)
 8012ef6:	9300      	str	r3, [sp, #0]
 8012ef8:	4b95      	ldr	r3, [pc, #596]	; (8013150 <tcp_process+0x5bc>)
 8012efa:	4602      	mov	r2, r0
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	f003 f8df 	bl	80160c0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f08:	2b05      	cmp	r3, #5
 8012f0a:	f200 8215 	bhi.w	8013338 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2200      	movs	r2, #0
 8012f12:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f002 fea9 	bl	8015c6c <tcp_rexmit_rto>
      break;
 8012f1a:	e20d      	b.n	8013338 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012f1c:	4b86      	ldr	r3, [pc, #536]	; (8013138 <tcp_process+0x5a4>)
 8012f1e:	781b      	ldrb	r3, [r3, #0]
 8012f20:	f003 0310 	and.w	r3, r3, #16
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	f000 80a1 	beq.w	801306c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012f2a:	4b84      	ldr	r3, [pc, #528]	; (801313c <tcp_process+0x5a8>)
 8012f2c:	681a      	ldr	r2, [r3, #0]
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f32:	1ad3      	subs	r3, r2, r3
 8012f34:	3b01      	subs	r3, #1
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	db7e      	blt.n	8013038 <tcp_process+0x4a4>
 8012f3a:	4b80      	ldr	r3, [pc, #512]	; (801313c <tcp_process+0x5a8>)
 8012f3c:	681a      	ldr	r2, [r3, #0]
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f42:	1ad3      	subs	r3, r2, r3
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	dc77      	bgt.n	8013038 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	2204      	movs	r2, #4
 8012f4c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d102      	bne.n	8012f5c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012f56:	23fa      	movs	r3, #250	; 0xfa
 8012f58:	76bb      	strb	r3, [r7, #26]
 8012f5a:	e01d      	b.n	8012f98 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012f60:	699b      	ldr	r3, [r3, #24]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d106      	bne.n	8012f74 <tcp_process+0x3e0>
 8012f66:	4b7b      	ldr	r3, [pc, #492]	; (8013154 <tcp_process+0x5c0>)
 8012f68:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012f6c:	497a      	ldr	r1, [pc, #488]	; (8013158 <tcp_process+0x5c4>)
 8012f6e:	487b      	ldr	r0, [pc, #492]	; (801315c <tcp_process+0x5c8>)
 8012f70:	f007 f8e2 	bl	801a138 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012f78:	699b      	ldr	r3, [r3, #24]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d00a      	beq.n	8012f94 <tcp_process+0x400>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012f82:	699b      	ldr	r3, [r3, #24]
 8012f84:	687a      	ldr	r2, [r7, #4]
 8012f86:	6910      	ldr	r0, [r2, #16]
 8012f88:	2200      	movs	r2, #0
 8012f8a:	6879      	ldr	r1, [r7, #4]
 8012f8c:	4798      	blx	r3
 8012f8e:	4603      	mov	r3, r0
 8012f90:	76bb      	strb	r3, [r7, #26]
 8012f92:	e001      	b.n	8012f98 <tcp_process+0x404>
 8012f94:	23f0      	movs	r3, #240	; 0xf0
 8012f96:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012f98:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d00a      	beq.n	8012fb6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012fa0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012fa4:	f113 0f0d 	cmn.w	r3, #13
 8012fa8:	d002      	beq.n	8012fb0 <tcp_process+0x41c>
              tcp_abort(pcb);
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	f7fd fd7c 	bl	8010aa8 <tcp_abort>
            }
            return ERR_ABRT;
 8012fb0:	f06f 030c 	mvn.w	r3, #12
 8012fb4:	e1ce      	b.n	8013354 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f000 fae0 	bl	801357c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012fbc:	4b68      	ldr	r3, [pc, #416]	; (8013160 <tcp_process+0x5cc>)
 8012fbe:	881b      	ldrh	r3, [r3, #0]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d005      	beq.n	8012fd0 <tcp_process+0x43c>
            recv_acked--;
 8012fc4:	4b66      	ldr	r3, [pc, #408]	; (8013160 <tcp_process+0x5cc>)
 8012fc6:	881b      	ldrh	r3, [r3, #0]
 8012fc8:	3b01      	subs	r3, #1
 8012fca:	b29a      	uxth	r2, r3
 8012fcc:	4b64      	ldr	r3, [pc, #400]	; (8013160 <tcp_process+0x5cc>)
 8012fce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fd4:	009a      	lsls	r2, r3, #2
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fda:	005b      	lsls	r3, r3, #1
 8012fdc:	f241 111c 	movw	r1, #4380	; 0x111c
 8012fe0:	428b      	cmp	r3, r1
 8012fe2:	bf38      	it	cc
 8012fe4:	460b      	movcc	r3, r1
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	d204      	bcs.n	8012ff4 <tcp_process+0x460>
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fee:	009b      	lsls	r3, r3, #2
 8012ff0:	b29b      	uxth	r3, r3
 8012ff2:	e00d      	b.n	8013010 <tcp_process+0x47c>
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ff8:	005b      	lsls	r3, r3, #1
 8012ffa:	f241 121c 	movw	r2, #4380	; 0x111c
 8012ffe:	4293      	cmp	r3, r2
 8013000:	d904      	bls.n	801300c <tcp_process+0x478>
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013006:	005b      	lsls	r3, r3, #1
 8013008:	b29b      	uxth	r3, r3
 801300a:	e001      	b.n	8013010 <tcp_process+0x47c>
 801300c:	f241 131c 	movw	r3, #4380	; 0x111c
 8013010:	687a      	ldr	r2, [r7, #4]
 8013012:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013016:	4b53      	ldr	r3, [pc, #332]	; (8013164 <tcp_process+0x5d0>)
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	f003 0320 	and.w	r3, r3, #32
 801301e:	2b00      	cmp	r3, #0
 8013020:	d037      	beq.n	8013092 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	8b5b      	ldrh	r3, [r3, #26]
 8013026:	f043 0302 	orr.w	r3, r3, #2
 801302a:	b29a      	uxth	r2, r3
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2207      	movs	r2, #7
 8013034:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013036:	e02c      	b.n	8013092 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013038:	4b40      	ldr	r3, [pc, #256]	; (801313c <tcp_process+0x5a8>)
 801303a:	6819      	ldr	r1, [r3, #0]
 801303c:	4b40      	ldr	r3, [pc, #256]	; (8013140 <tcp_process+0x5ac>)
 801303e:	881b      	ldrh	r3, [r3, #0]
 8013040:	461a      	mov	r2, r3
 8013042:	4b40      	ldr	r3, [pc, #256]	; (8013144 <tcp_process+0x5b0>)
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013048:	4b3f      	ldr	r3, [pc, #252]	; (8013148 <tcp_process+0x5b4>)
 801304a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801304c:	885b      	ldrh	r3, [r3, #2]
 801304e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013050:	4a3d      	ldr	r2, [pc, #244]	; (8013148 <tcp_process+0x5b4>)
 8013052:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013054:	8812      	ldrh	r2, [r2, #0]
 8013056:	b292      	uxth	r2, r2
 8013058:	9202      	str	r2, [sp, #8]
 801305a:	9301      	str	r3, [sp, #4]
 801305c:	4b3b      	ldr	r3, [pc, #236]	; (801314c <tcp_process+0x5b8>)
 801305e:	9300      	str	r3, [sp, #0]
 8013060:	4b3b      	ldr	r3, [pc, #236]	; (8013150 <tcp_process+0x5bc>)
 8013062:	4602      	mov	r2, r0
 8013064:	6878      	ldr	r0, [r7, #4]
 8013066:	f003 f82b 	bl	80160c0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801306a:	e167      	b.n	801333c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801306c:	4b32      	ldr	r3, [pc, #200]	; (8013138 <tcp_process+0x5a4>)
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	f003 0302 	and.w	r3, r3, #2
 8013074:	2b00      	cmp	r3, #0
 8013076:	f000 8161 	beq.w	801333c <tcp_process+0x7a8>
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801307e:	1e5a      	subs	r2, r3, #1
 8013080:	4b30      	ldr	r3, [pc, #192]	; (8013144 <tcp_process+0x5b0>)
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	429a      	cmp	r2, r3
 8013086:	f040 8159 	bne.w	801333c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f002 fe10 	bl	8015cb0 <tcp_rexmit>
      break;
 8013090:	e154      	b.n	801333c <tcp_process+0x7a8>
 8013092:	e153      	b.n	801333c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013094:	6878      	ldr	r0, [r7, #4]
 8013096:	f000 fa71 	bl	801357c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801309a:	4b32      	ldr	r3, [pc, #200]	; (8013164 <tcp_process+0x5d0>)
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	f003 0320 	and.w	r3, r3, #32
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	f000 814c 	beq.w	8013340 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	8b5b      	ldrh	r3, [r3, #26]
 80130ac:	f043 0302 	orr.w	r3, r3, #2
 80130b0:	b29a      	uxth	r2, r3
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2207      	movs	r2, #7
 80130ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 80130bc:	e140      	b.n	8013340 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80130be:	6878      	ldr	r0, [r7, #4]
 80130c0:	f000 fa5c 	bl	801357c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80130c4:	4b27      	ldr	r3, [pc, #156]	; (8013164 <tcp_process+0x5d0>)
 80130c6:	781b      	ldrb	r3, [r3, #0]
 80130c8:	f003 0320 	and.w	r3, r3, #32
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d071      	beq.n	80131b4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80130d0:	4b19      	ldr	r3, [pc, #100]	; (8013138 <tcp_process+0x5a4>)
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	f003 0310 	and.w	r3, r3, #16
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d060      	beq.n	801319e <tcp_process+0x60a>
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80130e0:	4b16      	ldr	r3, [pc, #88]	; (801313c <tcp_process+0x5a8>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d15a      	bne.n	801319e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d156      	bne.n	801319e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	8b5b      	ldrh	r3, [r3, #26]
 80130f4:	f043 0302 	orr.w	r3, r3, #2
 80130f8:	b29a      	uxth	r2, r3
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f7fe fdbc 	bl	8011c7c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013104:	4b18      	ldr	r3, [pc, #96]	; (8013168 <tcp_process+0x5d4>)
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	687a      	ldr	r2, [r7, #4]
 801310a:	429a      	cmp	r2, r3
 801310c:	d105      	bne.n	801311a <tcp_process+0x586>
 801310e:	4b16      	ldr	r3, [pc, #88]	; (8013168 <tcp_process+0x5d4>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	68db      	ldr	r3, [r3, #12]
 8013114:	4a14      	ldr	r2, [pc, #80]	; (8013168 <tcp_process+0x5d4>)
 8013116:	6013      	str	r3, [r2, #0]
 8013118:	e02e      	b.n	8013178 <tcp_process+0x5e4>
 801311a:	4b13      	ldr	r3, [pc, #76]	; (8013168 <tcp_process+0x5d4>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	617b      	str	r3, [r7, #20]
 8013120:	e027      	b.n	8013172 <tcp_process+0x5de>
 8013122:	697b      	ldr	r3, [r7, #20]
 8013124:	68db      	ldr	r3, [r3, #12]
 8013126:	687a      	ldr	r2, [r7, #4]
 8013128:	429a      	cmp	r2, r3
 801312a:	d11f      	bne.n	801316c <tcp_process+0x5d8>
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	68da      	ldr	r2, [r3, #12]
 8013130:	697b      	ldr	r3, [r7, #20]
 8013132:	60da      	str	r2, [r3, #12]
 8013134:	e020      	b.n	8013178 <tcp_process+0x5e4>
 8013136:	bf00      	nop
 8013138:	20000844 	.word	0x20000844
 801313c:	2000083c 	.word	0x2000083c
 8013140:	20000842 	.word	0x20000842
 8013144:	20000838 	.word	0x20000838
 8013148:	20000828 	.word	0x20000828
 801314c:	20007cb8 	.word	0x20007cb8
 8013150:	20007cbc 	.word	0x20007cbc
 8013154:	0801db38 	.word	0x0801db38
 8013158:	0801ddd8 	.word	0x0801ddd8
 801315c:	0801db84 	.word	0x0801db84
 8013160:	20000840 	.word	0x20000840
 8013164:	20000845 	.word	0x20000845
 8013168:	2001890c 	.word	0x2001890c
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	68db      	ldr	r3, [r3, #12]
 8013170:	617b      	str	r3, [r7, #20]
 8013172:	697b      	ldr	r3, [r7, #20]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d1d4      	bne.n	8013122 <tcp_process+0x58e>
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	2200      	movs	r2, #0
 801317c:	60da      	str	r2, [r3, #12]
 801317e:	4b77      	ldr	r3, [pc, #476]	; (801335c <tcp_process+0x7c8>)
 8013180:	2201      	movs	r2, #1
 8013182:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	220a      	movs	r2, #10
 8013188:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801318a:	4b75      	ldr	r3, [pc, #468]	; (8013360 <tcp_process+0x7cc>)
 801318c:	681a      	ldr	r2, [r3, #0]
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	60da      	str	r2, [r3, #12]
 8013192:	4a73      	ldr	r2, [pc, #460]	; (8013360 <tcp_process+0x7cc>)
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6013      	str	r3, [r2, #0]
 8013198:	f003 f954 	bl	8016444 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801319c:	e0d2      	b.n	8013344 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	8b5b      	ldrh	r3, [r3, #26]
 80131a2:	f043 0302 	orr.w	r3, r3, #2
 80131a6:	b29a      	uxth	r2, r3
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	2208      	movs	r2, #8
 80131b0:	751a      	strb	r2, [r3, #20]
      break;
 80131b2:	e0c7      	b.n	8013344 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80131b4:	4b6b      	ldr	r3, [pc, #428]	; (8013364 <tcp_process+0x7d0>)
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	f003 0310 	and.w	r3, r3, #16
 80131bc:	2b00      	cmp	r3, #0
 80131be:	f000 80c1 	beq.w	8013344 <tcp_process+0x7b0>
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80131c6:	4b68      	ldr	r3, [pc, #416]	; (8013368 <tcp_process+0x7d4>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	429a      	cmp	r2, r3
 80131cc:	f040 80ba 	bne.w	8013344 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	f040 80b5 	bne.w	8013344 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2206      	movs	r2, #6
 80131de:	751a      	strb	r2, [r3, #20]
      break;
 80131e0:	e0b0      	b.n	8013344 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	f000 f9ca 	bl	801357c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80131e8:	4b60      	ldr	r3, [pc, #384]	; (801336c <tcp_process+0x7d8>)
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	f003 0320 	and.w	r3, r3, #32
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	f000 80a9 	beq.w	8013348 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	8b5b      	ldrh	r3, [r3, #26]
 80131fa:	f043 0302 	orr.w	r3, r3, #2
 80131fe:	b29a      	uxth	r2, r3
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	f7fe fd39 	bl	8011c7c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801320a:	4b59      	ldr	r3, [pc, #356]	; (8013370 <tcp_process+0x7dc>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	687a      	ldr	r2, [r7, #4]
 8013210:	429a      	cmp	r2, r3
 8013212:	d105      	bne.n	8013220 <tcp_process+0x68c>
 8013214:	4b56      	ldr	r3, [pc, #344]	; (8013370 <tcp_process+0x7dc>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	68db      	ldr	r3, [r3, #12]
 801321a:	4a55      	ldr	r2, [pc, #340]	; (8013370 <tcp_process+0x7dc>)
 801321c:	6013      	str	r3, [r2, #0]
 801321e:	e013      	b.n	8013248 <tcp_process+0x6b4>
 8013220:	4b53      	ldr	r3, [pc, #332]	; (8013370 <tcp_process+0x7dc>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	613b      	str	r3, [r7, #16]
 8013226:	e00c      	b.n	8013242 <tcp_process+0x6ae>
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	68db      	ldr	r3, [r3, #12]
 801322c:	687a      	ldr	r2, [r7, #4]
 801322e:	429a      	cmp	r2, r3
 8013230:	d104      	bne.n	801323c <tcp_process+0x6a8>
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	68da      	ldr	r2, [r3, #12]
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	60da      	str	r2, [r3, #12]
 801323a:	e005      	b.n	8013248 <tcp_process+0x6b4>
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	68db      	ldr	r3, [r3, #12]
 8013240:	613b      	str	r3, [r7, #16]
 8013242:	693b      	ldr	r3, [r7, #16]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d1ef      	bne.n	8013228 <tcp_process+0x694>
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	2200      	movs	r2, #0
 801324c:	60da      	str	r2, [r3, #12]
 801324e:	4b43      	ldr	r3, [pc, #268]	; (801335c <tcp_process+0x7c8>)
 8013250:	2201      	movs	r2, #1
 8013252:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	220a      	movs	r2, #10
 8013258:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801325a:	4b41      	ldr	r3, [pc, #260]	; (8013360 <tcp_process+0x7cc>)
 801325c:	681a      	ldr	r2, [r3, #0]
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	60da      	str	r2, [r3, #12]
 8013262:	4a3f      	ldr	r2, [pc, #252]	; (8013360 <tcp_process+0x7cc>)
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6013      	str	r3, [r2, #0]
 8013268:	f003 f8ec 	bl	8016444 <tcp_timer_needed>
      }
      break;
 801326c:	e06c      	b.n	8013348 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801326e:	6878      	ldr	r0, [r7, #4]
 8013270:	f000 f984 	bl	801357c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013274:	4b3b      	ldr	r3, [pc, #236]	; (8013364 <tcp_process+0x7d0>)
 8013276:	781b      	ldrb	r3, [r3, #0]
 8013278:	f003 0310 	and.w	r3, r3, #16
 801327c:	2b00      	cmp	r3, #0
 801327e:	d065      	beq.n	801334c <tcp_process+0x7b8>
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013284:	4b38      	ldr	r3, [pc, #224]	; (8013368 <tcp_process+0x7d4>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	429a      	cmp	r2, r3
 801328a:	d15f      	bne.n	801334c <tcp_process+0x7b8>
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013290:	2b00      	cmp	r3, #0
 8013292:	d15b      	bne.n	801334c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	f7fe fcf1 	bl	8011c7c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801329a:	4b35      	ldr	r3, [pc, #212]	; (8013370 <tcp_process+0x7dc>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	687a      	ldr	r2, [r7, #4]
 80132a0:	429a      	cmp	r2, r3
 80132a2:	d105      	bne.n	80132b0 <tcp_process+0x71c>
 80132a4:	4b32      	ldr	r3, [pc, #200]	; (8013370 <tcp_process+0x7dc>)
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	68db      	ldr	r3, [r3, #12]
 80132aa:	4a31      	ldr	r2, [pc, #196]	; (8013370 <tcp_process+0x7dc>)
 80132ac:	6013      	str	r3, [r2, #0]
 80132ae:	e013      	b.n	80132d8 <tcp_process+0x744>
 80132b0:	4b2f      	ldr	r3, [pc, #188]	; (8013370 <tcp_process+0x7dc>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	60fb      	str	r3, [r7, #12]
 80132b6:	e00c      	b.n	80132d2 <tcp_process+0x73e>
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	687a      	ldr	r2, [r7, #4]
 80132be:	429a      	cmp	r2, r3
 80132c0:	d104      	bne.n	80132cc <tcp_process+0x738>
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	68da      	ldr	r2, [r3, #12]
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	60da      	str	r2, [r3, #12]
 80132ca:	e005      	b.n	80132d8 <tcp_process+0x744>
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	68db      	ldr	r3, [r3, #12]
 80132d0:	60fb      	str	r3, [r7, #12]
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d1ef      	bne.n	80132b8 <tcp_process+0x724>
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2200      	movs	r2, #0
 80132dc:	60da      	str	r2, [r3, #12]
 80132de:	4b1f      	ldr	r3, [pc, #124]	; (801335c <tcp_process+0x7c8>)
 80132e0:	2201      	movs	r2, #1
 80132e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	220a      	movs	r2, #10
 80132e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80132ea:	4b1d      	ldr	r3, [pc, #116]	; (8013360 <tcp_process+0x7cc>)
 80132ec:	681a      	ldr	r2, [r3, #0]
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	60da      	str	r2, [r3, #12]
 80132f2:	4a1b      	ldr	r2, [pc, #108]	; (8013360 <tcp_process+0x7cc>)
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	6013      	str	r3, [r2, #0]
 80132f8:	f003 f8a4 	bl	8016444 <tcp_timer_needed>
      }
      break;
 80132fc:	e026      	b.n	801334c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f000 f93c 	bl	801357c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013304:	4b17      	ldr	r3, [pc, #92]	; (8013364 <tcp_process+0x7d0>)
 8013306:	781b      	ldrb	r3, [r3, #0]
 8013308:	f003 0310 	and.w	r3, r3, #16
 801330c:	2b00      	cmp	r3, #0
 801330e:	d01f      	beq.n	8013350 <tcp_process+0x7bc>
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013314:	4b14      	ldr	r3, [pc, #80]	; (8013368 <tcp_process+0x7d4>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	429a      	cmp	r2, r3
 801331a:	d119      	bne.n	8013350 <tcp_process+0x7bc>
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013320:	2b00      	cmp	r3, #0
 8013322:	d115      	bne.n	8013350 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013324:	4b11      	ldr	r3, [pc, #68]	; (801336c <tcp_process+0x7d8>)
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	f043 0310 	orr.w	r3, r3, #16
 801332c:	b2da      	uxtb	r2, r3
 801332e:	4b0f      	ldr	r3, [pc, #60]	; (801336c <tcp_process+0x7d8>)
 8013330:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013332:	e00d      	b.n	8013350 <tcp_process+0x7bc>
    default:
      break;
 8013334:	bf00      	nop
 8013336:	e00c      	b.n	8013352 <tcp_process+0x7be>
      break;
 8013338:	bf00      	nop
 801333a:	e00a      	b.n	8013352 <tcp_process+0x7be>
      break;
 801333c:	bf00      	nop
 801333e:	e008      	b.n	8013352 <tcp_process+0x7be>
      break;
 8013340:	bf00      	nop
 8013342:	e006      	b.n	8013352 <tcp_process+0x7be>
      break;
 8013344:	bf00      	nop
 8013346:	e004      	b.n	8013352 <tcp_process+0x7be>
      break;
 8013348:	bf00      	nop
 801334a:	e002      	b.n	8013352 <tcp_process+0x7be>
      break;
 801334c:	bf00      	nop
 801334e:	e000      	b.n	8013352 <tcp_process+0x7be>
      break;
 8013350:	bf00      	nop
  }
  return ERR_OK;
 8013352:	2300      	movs	r3, #0
}
 8013354:	4618      	mov	r0, r3
 8013356:	3724      	adds	r7, #36	; 0x24
 8013358:	46bd      	mov	sp, r7
 801335a:	bd90      	pop	{r4, r7, pc}
 801335c:	20018908 	.word	0x20018908
 8013360:	2001891c 	.word	0x2001891c
 8013364:	20000844 	.word	0x20000844
 8013368:	2000083c 	.word	0x2000083c
 801336c:	20000845 	.word	0x20000845
 8013370:	2001890c 	.word	0x2001890c

08013374 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013374:	b590      	push	{r4, r7, lr}
 8013376:	b085      	sub	sp, #20
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
 801337c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d106      	bne.n	8013392 <tcp_oos_insert_segment+0x1e>
 8013384:	4b3b      	ldr	r3, [pc, #236]	; (8013474 <tcp_oos_insert_segment+0x100>)
 8013386:	f240 421f 	movw	r2, #1055	; 0x41f
 801338a:	493b      	ldr	r1, [pc, #236]	; (8013478 <tcp_oos_insert_segment+0x104>)
 801338c:	483b      	ldr	r0, [pc, #236]	; (801347c <tcp_oos_insert_segment+0x108>)
 801338e:	f006 fed3 	bl	801a138 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	68db      	ldr	r3, [r3, #12]
 8013396:	899b      	ldrh	r3, [r3, #12]
 8013398:	b29b      	uxth	r3, r3
 801339a:	4618      	mov	r0, r3
 801339c:	f7fb faa7 	bl	800e8ee <lwip_htons>
 80133a0:	4603      	mov	r3, r0
 80133a2:	b2db      	uxtb	r3, r3
 80133a4:	f003 0301 	and.w	r3, r3, #1
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d028      	beq.n	80133fe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80133ac:	6838      	ldr	r0, [r7, #0]
 80133ae:	f7fe f9b3 	bl	8011718 <tcp_segs_free>
    next = NULL;
 80133b2:	2300      	movs	r3, #0
 80133b4:	603b      	str	r3, [r7, #0]
 80133b6:	e056      	b.n	8013466 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	68db      	ldr	r3, [r3, #12]
 80133bc:	899b      	ldrh	r3, [r3, #12]
 80133be:	b29b      	uxth	r3, r3
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7fb fa94 	bl	800e8ee <lwip_htons>
 80133c6:	4603      	mov	r3, r0
 80133c8:	b2db      	uxtb	r3, r3
 80133ca:	f003 0301 	and.w	r3, r3, #1
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d00d      	beq.n	80133ee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	68db      	ldr	r3, [r3, #12]
 80133d6:	899b      	ldrh	r3, [r3, #12]
 80133d8:	b29c      	uxth	r4, r3
 80133da:	2001      	movs	r0, #1
 80133dc:	f7fb fa87 	bl	800e8ee <lwip_htons>
 80133e0:	4603      	mov	r3, r0
 80133e2:	461a      	mov	r2, r3
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	68db      	ldr	r3, [r3, #12]
 80133e8:	4322      	orrs	r2, r4
 80133ea:	b292      	uxth	r2, r2
 80133ec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80133f8:	68f8      	ldr	r0, [r7, #12]
 80133fa:	f7fe f9a2 	bl	8011742 <tcp_seg_free>
    while (next &&
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d00e      	beq.n	8013422 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	891b      	ldrh	r3, [r3, #8]
 8013408:	461a      	mov	r2, r3
 801340a:	4b1d      	ldr	r3, [pc, #116]	; (8013480 <tcp_oos_insert_segment+0x10c>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	441a      	add	r2, r3
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	68db      	ldr	r3, [r3, #12]
 8013414:	685b      	ldr	r3, [r3, #4]
 8013416:	6839      	ldr	r1, [r7, #0]
 8013418:	8909      	ldrh	r1, [r1, #8]
 801341a:	440b      	add	r3, r1
 801341c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801341e:	2b00      	cmp	r3, #0
 8013420:	daca      	bge.n	80133b8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d01e      	beq.n	8013466 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	891b      	ldrh	r3, [r3, #8]
 801342c:	461a      	mov	r2, r3
 801342e:	4b14      	ldr	r3, [pc, #80]	; (8013480 <tcp_oos_insert_segment+0x10c>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	441a      	add	r2, r3
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	68db      	ldr	r3, [r3, #12]
 8013438:	685b      	ldr	r3, [r3, #4]
 801343a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801343c:	2b00      	cmp	r3, #0
 801343e:	dd12      	ble.n	8013466 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	68db      	ldr	r3, [r3, #12]
 8013444:	685b      	ldr	r3, [r3, #4]
 8013446:	b29a      	uxth	r2, r3
 8013448:	4b0d      	ldr	r3, [pc, #52]	; (8013480 <tcp_oos_insert_segment+0x10c>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	b29b      	uxth	r3, r3
 801344e:	1ad3      	subs	r3, r2, r3
 8013450:	b29a      	uxth	r2, r3
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	685a      	ldr	r2, [r3, #4]
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	891b      	ldrh	r3, [r3, #8]
 801345e:	4619      	mov	r1, r3
 8013460:	4610      	mov	r0, r2
 8013462:	f7fc fb81 	bl	800fb68 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	683a      	ldr	r2, [r7, #0]
 801346a:	601a      	str	r2, [r3, #0]
}
 801346c:	bf00      	nop
 801346e:	3714      	adds	r7, #20
 8013470:	46bd      	mov	sp, r7
 8013472:	bd90      	pop	{r4, r7, pc}
 8013474:	0801db38 	.word	0x0801db38
 8013478:	0801ddf8 	.word	0x0801ddf8
 801347c:	0801db84 	.word	0x0801db84
 8013480:	20000838 	.word	0x20000838

08013484 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013484:	b5b0      	push	{r4, r5, r7, lr}
 8013486:	b086      	sub	sp, #24
 8013488:	af00      	add	r7, sp, #0
 801348a:	60f8      	str	r0, [r7, #12]
 801348c:	60b9      	str	r1, [r7, #8]
 801348e:	607a      	str	r2, [r7, #4]
 8013490:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013492:	e03e      	b.n	8013512 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013498:	68bb      	ldr	r3, [r7, #8]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801349e:	697b      	ldr	r3, [r7, #20]
 80134a0:	685b      	ldr	r3, [r3, #4]
 80134a2:	4618      	mov	r0, r3
 80134a4:	f7fc fd6e 	bl	800ff84 <pbuf_clen>
 80134a8:	4603      	mov	r3, r0
 80134aa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134b2:	8a7a      	ldrh	r2, [r7, #18]
 80134b4:	429a      	cmp	r2, r3
 80134b6:	d906      	bls.n	80134c6 <tcp_free_acked_segments+0x42>
 80134b8:	4b2a      	ldr	r3, [pc, #168]	; (8013564 <tcp_free_acked_segments+0xe0>)
 80134ba:	f240 4257 	movw	r2, #1111	; 0x457
 80134be:	492a      	ldr	r1, [pc, #168]	; (8013568 <tcp_free_acked_segments+0xe4>)
 80134c0:	482a      	ldr	r0, [pc, #168]	; (801356c <tcp_free_acked_segments+0xe8>)
 80134c2:	f006 fe39 	bl	801a138 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80134cc:	8a7b      	ldrh	r3, [r7, #18]
 80134ce:	1ad3      	subs	r3, r2, r3
 80134d0:	b29a      	uxth	r2, r3
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	891a      	ldrh	r2, [r3, #8]
 80134dc:	4b24      	ldr	r3, [pc, #144]	; (8013570 <tcp_free_acked_segments+0xec>)
 80134de:	881b      	ldrh	r3, [r3, #0]
 80134e0:	4413      	add	r3, r2
 80134e2:	b29a      	uxth	r2, r3
 80134e4:	4b22      	ldr	r3, [pc, #136]	; (8013570 <tcp_free_acked_segments+0xec>)
 80134e6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80134e8:	6978      	ldr	r0, [r7, #20]
 80134ea:	f7fe f92a 	bl	8011742 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d00c      	beq.n	8013512 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80134f8:	68bb      	ldr	r3, [r7, #8]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d109      	bne.n	8013512 <tcp_free_acked_segments+0x8e>
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d106      	bne.n	8013512 <tcp_free_acked_segments+0x8e>
 8013504:	4b17      	ldr	r3, [pc, #92]	; (8013564 <tcp_free_acked_segments+0xe0>)
 8013506:	f240 4261 	movw	r2, #1121	; 0x461
 801350a:	491a      	ldr	r1, [pc, #104]	; (8013574 <tcp_free_acked_segments+0xf0>)
 801350c:	4817      	ldr	r0, [pc, #92]	; (801356c <tcp_free_acked_segments+0xe8>)
 801350e:	f006 fe13 	bl	801a138 <iprintf>
  while (seg_list != NULL &&
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d020      	beq.n	801355a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	68db      	ldr	r3, [r3, #12]
 801351c:	685b      	ldr	r3, [r3, #4]
 801351e:	4618      	mov	r0, r3
 8013520:	f7fb f9fa 	bl	800e918 <lwip_htonl>
 8013524:	4604      	mov	r4, r0
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	891b      	ldrh	r3, [r3, #8]
 801352a:	461d      	mov	r5, r3
 801352c:	68bb      	ldr	r3, [r7, #8]
 801352e:	68db      	ldr	r3, [r3, #12]
 8013530:	899b      	ldrh	r3, [r3, #12]
 8013532:	b29b      	uxth	r3, r3
 8013534:	4618      	mov	r0, r3
 8013536:	f7fb f9da 	bl	800e8ee <lwip_htons>
 801353a:	4603      	mov	r3, r0
 801353c:	b2db      	uxtb	r3, r3
 801353e:	f003 0303 	and.w	r3, r3, #3
 8013542:	2b00      	cmp	r3, #0
 8013544:	d001      	beq.n	801354a <tcp_free_acked_segments+0xc6>
 8013546:	2301      	movs	r3, #1
 8013548:	e000      	b.n	801354c <tcp_free_acked_segments+0xc8>
 801354a:	2300      	movs	r3, #0
 801354c:	442b      	add	r3, r5
 801354e:	18e2      	adds	r2, r4, r3
 8013550:	4b09      	ldr	r3, [pc, #36]	; (8013578 <tcp_free_acked_segments+0xf4>)
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013556:	2b00      	cmp	r3, #0
 8013558:	dd9c      	ble.n	8013494 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801355a:	68bb      	ldr	r3, [r7, #8]
}
 801355c:	4618      	mov	r0, r3
 801355e:	3718      	adds	r7, #24
 8013560:	46bd      	mov	sp, r7
 8013562:	bdb0      	pop	{r4, r5, r7, pc}
 8013564:	0801db38 	.word	0x0801db38
 8013568:	0801de20 	.word	0x0801de20
 801356c:	0801db84 	.word	0x0801db84
 8013570:	20000840 	.word	0x20000840
 8013574:	0801de48 	.word	0x0801de48
 8013578:	2000083c 	.word	0x2000083c

0801357c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801357c:	b5b0      	push	{r4, r5, r7, lr}
 801357e:	b094      	sub	sp, #80	; 0x50
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013584:	2300      	movs	r3, #0
 8013586:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d106      	bne.n	801359c <tcp_receive+0x20>
 801358e:	4ba6      	ldr	r3, [pc, #664]	; (8013828 <tcp_receive+0x2ac>)
 8013590:	f240 427b 	movw	r2, #1147	; 0x47b
 8013594:	49a5      	ldr	r1, [pc, #660]	; (801382c <tcp_receive+0x2b0>)
 8013596:	48a6      	ldr	r0, [pc, #664]	; (8013830 <tcp_receive+0x2b4>)
 8013598:	f006 fdce 	bl	801a138 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	7d1b      	ldrb	r3, [r3, #20]
 80135a0:	2b03      	cmp	r3, #3
 80135a2:	d806      	bhi.n	80135b2 <tcp_receive+0x36>
 80135a4:	4ba0      	ldr	r3, [pc, #640]	; (8013828 <tcp_receive+0x2ac>)
 80135a6:	f240 427c 	movw	r2, #1148	; 0x47c
 80135aa:	49a2      	ldr	r1, [pc, #648]	; (8013834 <tcp_receive+0x2b8>)
 80135ac:	48a0      	ldr	r0, [pc, #640]	; (8013830 <tcp_receive+0x2b4>)
 80135ae:	f006 fdc3 	bl	801a138 <iprintf>

  if (flags & TCP_ACK) {
 80135b2:	4ba1      	ldr	r3, [pc, #644]	; (8013838 <tcp_receive+0x2bc>)
 80135b4:	781b      	ldrb	r3, [r3, #0]
 80135b6:	f003 0310 	and.w	r3, r3, #16
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	f000 8263 	beq.w	8013a86 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80135c6:	461a      	mov	r2, r3
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135cc:	4413      	add	r3, r2
 80135ce:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80135d4:	4b99      	ldr	r3, [pc, #612]	; (801383c <tcp_receive+0x2c0>)
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	1ad3      	subs	r3, r2, r3
 80135da:	2b00      	cmp	r3, #0
 80135dc:	db1b      	blt.n	8013616 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80135e2:	4b96      	ldr	r3, [pc, #600]	; (801383c <tcp_receive+0x2c0>)
 80135e4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d106      	bne.n	80135f8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80135ee:	4b94      	ldr	r3, [pc, #592]	; (8013840 <tcp_receive+0x2c4>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	1ad3      	subs	r3, r2, r3
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	db0e      	blt.n	8013616 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80135fc:	4b90      	ldr	r3, [pc, #576]	; (8013840 <tcp_receive+0x2c4>)
 80135fe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013600:	429a      	cmp	r2, r3
 8013602:	d125      	bne.n	8013650 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013604:	4b8f      	ldr	r3, [pc, #572]	; (8013844 <tcp_receive+0x2c8>)
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	89db      	ldrh	r3, [r3, #14]
 801360a:	b29a      	uxth	r2, r3
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013612:	429a      	cmp	r2, r3
 8013614:	d91c      	bls.n	8013650 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013616:	4b8b      	ldr	r3, [pc, #556]	; (8013844 <tcp_receive+0x2c8>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	89db      	ldrh	r3, [r3, #14]
 801361c:	b29a      	uxth	r2, r3
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013630:	429a      	cmp	r2, r3
 8013632:	d205      	bcs.n	8013640 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013640:	4b7e      	ldr	r3, [pc, #504]	; (801383c <tcp_receive+0x2c0>)
 8013642:	681a      	ldr	r2, [r3, #0]
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013648:	4b7d      	ldr	r3, [pc, #500]	; (8013840 <tcp_receive+0x2c4>)
 801364a:	681a      	ldr	r2, [r3, #0]
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013650:	4b7b      	ldr	r3, [pc, #492]	; (8013840 <tcp_receive+0x2c4>)
 8013652:	681a      	ldr	r2, [r3, #0]
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013658:	1ad3      	subs	r3, r2, r3
 801365a:	2b00      	cmp	r3, #0
 801365c:	dc58      	bgt.n	8013710 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801365e:	4b7a      	ldr	r3, [pc, #488]	; (8013848 <tcp_receive+0x2cc>)
 8013660:	881b      	ldrh	r3, [r3, #0]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d14b      	bne.n	80136fe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801366a:	687a      	ldr	r2, [r7, #4]
 801366c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013670:	4413      	add	r3, r2
 8013672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013674:	429a      	cmp	r2, r3
 8013676:	d142      	bne.n	80136fe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801367e:	2b00      	cmp	r3, #0
 8013680:	db3d      	blt.n	80136fe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013686:	4b6e      	ldr	r3, [pc, #440]	; (8013840 <tcp_receive+0x2c4>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	429a      	cmp	r2, r3
 801368c:	d137      	bne.n	80136fe <tcp_receive+0x182>
              found_dupack = 1;
 801368e:	2301      	movs	r3, #1
 8013690:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013698:	2bff      	cmp	r3, #255	; 0xff
 801369a:	d007      	beq.n	80136ac <tcp_receive+0x130>
                ++pcb->dupacks;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80136a2:	3301      	adds	r3, #1
 80136a4:	b2da      	uxtb	r2, r3
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80136b2:	2b03      	cmp	r3, #3
 80136b4:	d91b      	bls.n	80136ee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136c0:	4413      	add	r3, r2
 80136c2:	b29a      	uxth	r2, r3
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80136ca:	429a      	cmp	r2, r3
 80136cc:	d30a      	bcc.n	80136e4 <tcp_receive+0x168>
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136d8:	4413      	add	r3, r2
 80136da:	b29a      	uxth	r2, r3
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80136e2:	e004      	b.n	80136ee <tcp_receive+0x172>
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80136f4:	2b02      	cmp	r3, #2
 80136f6:	d902      	bls.n	80136fe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80136f8:	6878      	ldr	r0, [r7, #4]
 80136fa:	f002 fb45 	bl	8015d88 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80136fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013700:	2b00      	cmp	r3, #0
 8013702:	f040 8160 	bne.w	80139c6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	2200      	movs	r2, #0
 801370a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801370e:	e15a      	b.n	80139c6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013710:	4b4b      	ldr	r3, [pc, #300]	; (8013840 <tcp_receive+0x2c4>)
 8013712:	681a      	ldr	r2, [r3, #0]
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013718:	1ad3      	subs	r3, r2, r3
 801371a:	3b01      	subs	r3, #1
 801371c:	2b00      	cmp	r3, #0
 801371e:	f2c0 814d 	blt.w	80139bc <tcp_receive+0x440>
 8013722:	4b47      	ldr	r3, [pc, #284]	; (8013840 <tcp_receive+0x2c4>)
 8013724:	681a      	ldr	r2, [r3, #0]
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801372a:	1ad3      	subs	r3, r2, r3
 801372c:	2b00      	cmp	r3, #0
 801372e:	f300 8145 	bgt.w	80139bc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	8b5b      	ldrh	r3, [r3, #26]
 8013736:	f003 0304 	and.w	r3, r3, #4
 801373a:	2b00      	cmp	r3, #0
 801373c:	d010      	beq.n	8013760 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	8b5b      	ldrh	r3, [r3, #26]
 8013742:	f023 0304 	bic.w	r3, r3, #4
 8013746:	b29a      	uxth	r2, r3
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2200      	movs	r2, #0
 801375c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	2200      	movs	r2, #0
 8013764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801376e:	10db      	asrs	r3, r3, #3
 8013770:	b21b      	sxth	r3, r3
 8013772:	b29a      	uxth	r2, r3
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801377a:	b29b      	uxth	r3, r3
 801377c:	4413      	add	r3, r2
 801377e:	b29b      	uxth	r3, r3
 8013780:	b21a      	sxth	r2, r3
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013788:	4b2d      	ldr	r3, [pc, #180]	; (8013840 <tcp_receive+0x2c4>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	b29a      	uxth	r2, r3
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013792:	b29b      	uxth	r3, r3
 8013794:	1ad3      	subs	r3, r2, r3
 8013796:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2200      	movs	r2, #0
 801379c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80137a0:	4b27      	ldr	r3, [pc, #156]	; (8013840 <tcp_receive+0x2c4>)
 80137a2:	681a      	ldr	r2, [r3, #0]
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	7d1b      	ldrb	r3, [r3, #20]
 80137ac:	2b03      	cmp	r3, #3
 80137ae:	f240 8096 	bls.w	80138de <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80137be:	429a      	cmp	r2, r3
 80137c0:	d244      	bcs.n	801384c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	8b5b      	ldrh	r3, [r3, #26]
 80137c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d001      	beq.n	80137d2 <tcp_receive+0x256>
 80137ce:	2301      	movs	r3, #1
 80137d0:	e000      	b.n	80137d4 <tcp_receive+0x258>
 80137d2:	2302      	movs	r3, #2
 80137d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80137d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80137dc:	b29a      	uxth	r2, r3
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137e2:	fb12 f303 	smulbb	r3, r2, r3
 80137e6:	b29b      	uxth	r3, r3
 80137e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80137ea:	4293      	cmp	r3, r2
 80137ec:	bf28      	it	cs
 80137ee:	4613      	movcs	r3, r2
 80137f0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80137f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80137fa:	4413      	add	r3, r2
 80137fc:	b29a      	uxth	r2, r3
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013804:	429a      	cmp	r2, r3
 8013806:	d309      	bcc.n	801381c <tcp_receive+0x2a0>
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801380e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013810:	4413      	add	r3, r2
 8013812:	b29a      	uxth	r2, r3
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801381a:	e060      	b.n	80138de <tcp_receive+0x362>
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013822:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013826:	e05a      	b.n	80138de <tcp_receive+0x362>
 8013828:	0801db38 	.word	0x0801db38
 801382c:	0801de68 	.word	0x0801de68
 8013830:	0801db84 	.word	0x0801db84
 8013834:	0801de84 	.word	0x0801de84
 8013838:	20000844 	.word	0x20000844
 801383c:	20000838 	.word	0x20000838
 8013840:	2000083c 	.word	0x2000083c
 8013844:	20000828 	.word	0x20000828
 8013848:	20000842 	.word	0x20000842
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013852:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013854:	4413      	add	r3, r2
 8013856:	b29a      	uxth	r2, r3
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801385e:	429a      	cmp	r2, r3
 8013860:	d309      	bcc.n	8013876 <tcp_receive+0x2fa>
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013868:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801386a:	4413      	add	r3, r2
 801386c:	b29a      	uxth	r2, r3
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013874:	e004      	b.n	8013880 <tcp_receive+0x304>
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801387c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801388c:	429a      	cmp	r2, r3
 801388e:	d326      	bcc.n	80138de <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801389c:	1ad3      	subs	r3, r2, r3
 801389e:	b29a      	uxth	r2, r3
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138b0:	4413      	add	r3, r2
 80138b2:	b29a      	uxth	r2, r3
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d30a      	bcc.n	80138d4 <tcp_receive+0x358>
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138c8:	4413      	add	r3, r2
 80138ca:	b29a      	uxth	r2, r3
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80138d2:	e004      	b.n	80138de <tcp_receive+0x362>
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138e6:	4a98      	ldr	r2, [pc, #608]	; (8013b48 <tcp_receive+0x5cc>)
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f7ff fdcb 	bl	8013484 <tcp_free_acked_segments>
 80138ee:	4602      	mov	r2, r0
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138fc:	4a93      	ldr	r2, [pc, #588]	; (8013b4c <tcp_receive+0x5d0>)
 80138fe:	6878      	ldr	r0, [r7, #4]
 8013900:	f7ff fdc0 	bl	8013484 <tcp_free_acked_segments>
 8013904:	4602      	mov	r2, r0
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801390e:	2b00      	cmp	r3, #0
 8013910:	d104      	bne.n	801391c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013918:	861a      	strh	r2, [r3, #48]	; 0x30
 801391a:	e002      	b.n	8013922 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2200      	movs	r2, #0
 8013920:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	2200      	movs	r2, #0
 8013926:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801392c:	2b00      	cmp	r3, #0
 801392e:	d103      	bne.n	8013938 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	2200      	movs	r2, #0
 8013934:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801393e:	4b84      	ldr	r3, [pc, #528]	; (8013b50 <tcp_receive+0x5d4>)
 8013940:	881b      	ldrh	r3, [r3, #0]
 8013942:	4413      	add	r3, r2
 8013944:	b29a      	uxth	r2, r3
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	8b5b      	ldrh	r3, [r3, #26]
 8013950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013954:	2b00      	cmp	r3, #0
 8013956:	d035      	beq.n	80139c4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801395c:	2b00      	cmp	r3, #0
 801395e:	d118      	bne.n	8013992 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013964:	2b00      	cmp	r3, #0
 8013966:	d00c      	beq.n	8013982 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013970:	68db      	ldr	r3, [r3, #12]
 8013972:	685b      	ldr	r3, [r3, #4]
 8013974:	4618      	mov	r0, r3
 8013976:	f7fa ffcf 	bl	800e918 <lwip_htonl>
 801397a:	4603      	mov	r3, r0
 801397c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801397e:	2b00      	cmp	r3, #0
 8013980:	dc20      	bgt.n	80139c4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	8b5b      	ldrh	r3, [r3, #26]
 8013986:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801398a:	b29a      	uxth	r2, r3
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013990:	e018      	b.n	80139c4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801399a:	68db      	ldr	r3, [r3, #12]
 801399c:	685b      	ldr	r3, [r3, #4]
 801399e:	4618      	mov	r0, r3
 80139a0:	f7fa ffba 	bl	800e918 <lwip_htonl>
 80139a4:	4603      	mov	r3, r0
 80139a6:	1ae3      	subs	r3, r4, r3
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	dc0b      	bgt.n	80139c4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	8b5b      	ldrh	r3, [r3, #26]
 80139b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80139b4:	b29a      	uxth	r2, r3
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80139ba:	e003      	b.n	80139c4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f002 fbd1 	bl	8016164 <tcp_send_empty_ack>
 80139c2:	e000      	b.n	80139c6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80139c4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d05b      	beq.n	8013a86 <tcp_receive+0x50a>
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80139d2:	4b60      	ldr	r3, [pc, #384]	; (8013b54 <tcp_receive+0x5d8>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	1ad3      	subs	r3, r2, r3
 80139d8:	2b00      	cmp	r3, #0
 80139da:	da54      	bge.n	8013a86 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80139dc:	4b5e      	ldr	r3, [pc, #376]	; (8013b58 <tcp_receive+0x5dc>)
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	b29a      	uxth	r2, r3
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139e6:	b29b      	uxth	r3, r3
 80139e8:	1ad3      	subs	r3, r2, r3
 80139ea:	b29b      	uxth	r3, r3
 80139ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80139f0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80139fa:	10db      	asrs	r3, r3, #3
 80139fc:	b21b      	sxth	r3, r3
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	1ad3      	subs	r3, r2, r3
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013a0e:	b29a      	uxth	r2, r3
 8013a10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013a14:	4413      	add	r3, r2
 8013a16:	b29b      	uxth	r3, r3
 8013a18:	b21a      	sxth	r2, r3
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8013a1e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	da05      	bge.n	8013a32 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8013a26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013a2a:	425b      	negs	r3, r3
 8013a2c:	b29b      	uxth	r3, r3
 8013a2e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013a32:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013a3c:	109b      	asrs	r3, r3, #2
 8013a3e:	b21b      	sxth	r3, r3
 8013a40:	b29b      	uxth	r3, r3
 8013a42:	1ad3      	subs	r3, r2, r3
 8013a44:	b29b      	uxth	r3, r3
 8013a46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013a50:	b29a      	uxth	r2, r3
 8013a52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013a56:	4413      	add	r3, r2
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	b21a      	sxth	r2, r3
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013a66:	10db      	asrs	r3, r3, #3
 8013a68:	b21b      	sxth	r3, r3
 8013a6a:	b29a      	uxth	r2, r3
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013a72:	b29b      	uxth	r3, r3
 8013a74:	4413      	add	r3, r2
 8013a76:	b29b      	uxth	r3, r3
 8013a78:	b21a      	sxth	r2, r3
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2200      	movs	r2, #0
 8013a84:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013a86:	4b35      	ldr	r3, [pc, #212]	; (8013b5c <tcp_receive+0x5e0>)
 8013a88:	881b      	ldrh	r3, [r3, #0]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	f000 84e1 	beq.w	8014452 <tcp_receive+0xed6>
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	7d1b      	ldrb	r3, [r3, #20]
 8013a94:	2b06      	cmp	r3, #6
 8013a96:	f200 84dc 	bhi.w	8014452 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a9e:	4b30      	ldr	r3, [pc, #192]	; (8013b60 <tcp_receive+0x5e4>)
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	1ad3      	subs	r3, r2, r3
 8013aa4:	3b01      	subs	r3, #1
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	f2c0 808e 	blt.w	8013bc8 <tcp_receive+0x64c>
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ab0:	4b2a      	ldr	r3, [pc, #168]	; (8013b5c <tcp_receive+0x5e0>)
 8013ab2:	881b      	ldrh	r3, [r3, #0]
 8013ab4:	4619      	mov	r1, r3
 8013ab6:	4b2a      	ldr	r3, [pc, #168]	; (8013b60 <tcp_receive+0x5e4>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	440b      	add	r3, r1
 8013abc:	1ad3      	subs	r3, r2, r3
 8013abe:	3301      	adds	r3, #1
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	f300 8081 	bgt.w	8013bc8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013ac6:	4b27      	ldr	r3, [pc, #156]	; (8013b64 <tcp_receive+0x5e8>)
 8013ac8:	685b      	ldr	r3, [r3, #4]
 8013aca:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ad0:	4b23      	ldr	r3, [pc, #140]	; (8013b60 <tcp_receive+0x5e4>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	1ad3      	subs	r3, r2, r3
 8013ad6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013ad8:	4b22      	ldr	r3, [pc, #136]	; (8013b64 <tcp_receive+0x5e8>)
 8013ada:	685b      	ldr	r3, [r3, #4]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d106      	bne.n	8013aee <tcp_receive+0x572>
 8013ae0:	4b21      	ldr	r3, [pc, #132]	; (8013b68 <tcp_receive+0x5ec>)
 8013ae2:	f240 5294 	movw	r2, #1428	; 0x594
 8013ae6:	4921      	ldr	r1, [pc, #132]	; (8013b6c <tcp_receive+0x5f0>)
 8013ae8:	4821      	ldr	r0, [pc, #132]	; (8013b70 <tcp_receive+0x5f4>)
 8013aea:	f006 fb25 	bl	801a138 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013af4:	4293      	cmp	r3, r2
 8013af6:	d906      	bls.n	8013b06 <tcp_receive+0x58a>
 8013af8:	4b1b      	ldr	r3, [pc, #108]	; (8013b68 <tcp_receive+0x5ec>)
 8013afa:	f240 5295 	movw	r2, #1429	; 0x595
 8013afe:	491d      	ldr	r1, [pc, #116]	; (8013b74 <tcp_receive+0x5f8>)
 8013b00:	481b      	ldr	r0, [pc, #108]	; (8013b70 <tcp_receive+0x5f4>)
 8013b02:	f006 fb19 	bl	801a138 <iprintf>
      off = (u16_t)off32;
 8013b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013b0c:	4b15      	ldr	r3, [pc, #84]	; (8013b64 <tcp_receive+0x5e8>)
 8013b0e:	685b      	ldr	r3, [r3, #4]
 8013b10:	891b      	ldrh	r3, [r3, #8]
 8013b12:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d906      	bls.n	8013b28 <tcp_receive+0x5ac>
 8013b1a:	4b13      	ldr	r3, [pc, #76]	; (8013b68 <tcp_receive+0x5ec>)
 8013b1c:	f240 5297 	movw	r2, #1431	; 0x597
 8013b20:	4915      	ldr	r1, [pc, #84]	; (8013b78 <tcp_receive+0x5fc>)
 8013b22:	4813      	ldr	r0, [pc, #76]	; (8013b70 <tcp_receive+0x5f4>)
 8013b24:	f006 fb08 	bl	801a138 <iprintf>
      inseg.len -= off;
 8013b28:	4b0e      	ldr	r3, [pc, #56]	; (8013b64 <tcp_receive+0x5e8>)
 8013b2a:	891a      	ldrh	r2, [r3, #8]
 8013b2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b30:	1ad3      	subs	r3, r2, r3
 8013b32:	b29a      	uxth	r2, r3
 8013b34:	4b0b      	ldr	r3, [pc, #44]	; (8013b64 <tcp_receive+0x5e8>)
 8013b36:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013b38:	4b0a      	ldr	r3, [pc, #40]	; (8013b64 <tcp_receive+0x5e8>)
 8013b3a:	685b      	ldr	r3, [r3, #4]
 8013b3c:	891a      	ldrh	r2, [r3, #8]
 8013b3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b42:	1ad3      	subs	r3, r2, r3
 8013b44:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013b46:	e029      	b.n	8013b9c <tcp_receive+0x620>
 8013b48:	0801dea0 	.word	0x0801dea0
 8013b4c:	0801dea8 	.word	0x0801dea8
 8013b50:	20000840 	.word	0x20000840
 8013b54:	2000083c 	.word	0x2000083c
 8013b58:	20018910 	.word	0x20018910
 8013b5c:	20000842 	.word	0x20000842
 8013b60:	20000838 	.word	0x20000838
 8013b64:	20000818 	.word	0x20000818
 8013b68:	0801db38 	.word	0x0801db38
 8013b6c:	0801deb0 	.word	0x0801deb0
 8013b70:	0801db84 	.word	0x0801db84
 8013b74:	0801dec0 	.word	0x0801dec0
 8013b78:	0801ded0 	.word	0x0801ded0
        off -= p->len;
 8013b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b7e:	895b      	ldrh	r3, [r3, #10]
 8013b80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b84:	1ad3      	subs	r3, r2, r3
 8013b86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b8c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013b8e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b92:	2200      	movs	r2, #0
 8013b94:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b9e:	895b      	ldrh	r3, [r3, #10]
 8013ba0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013ba4:	429a      	cmp	r2, r3
 8013ba6:	d8e9      	bhi.n	8013b7c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013ba8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013bac:	4619      	mov	r1, r3
 8013bae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013bb0:	f7fc f8da 	bl	800fd68 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bb8:	4a91      	ldr	r2, [pc, #580]	; (8013e00 <tcp_receive+0x884>)
 8013bba:	6013      	str	r3, [r2, #0]
 8013bbc:	4b91      	ldr	r3, [pc, #580]	; (8013e04 <tcp_receive+0x888>)
 8013bbe:	68db      	ldr	r3, [r3, #12]
 8013bc0:	4a8f      	ldr	r2, [pc, #572]	; (8013e00 <tcp_receive+0x884>)
 8013bc2:	6812      	ldr	r2, [r2, #0]
 8013bc4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013bc6:	e00d      	b.n	8013be4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013bc8:	4b8d      	ldr	r3, [pc, #564]	; (8013e00 <tcp_receive+0x884>)
 8013bca:	681a      	ldr	r2, [r3, #0]
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bd0:	1ad3      	subs	r3, r2, r3
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	da06      	bge.n	8013be4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	8b5b      	ldrh	r3, [r3, #26]
 8013bda:	f043 0302 	orr.w	r3, r3, #2
 8013bde:	b29a      	uxth	r2, r3
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013be4:	4b86      	ldr	r3, [pc, #536]	; (8013e00 <tcp_receive+0x884>)
 8013be6:	681a      	ldr	r2, [r3, #0]
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bec:	1ad3      	subs	r3, r2, r3
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	f2c0 842a 	blt.w	8014448 <tcp_receive+0xecc>
 8013bf4:	4b82      	ldr	r3, [pc, #520]	; (8013e00 <tcp_receive+0x884>)
 8013bf6:	681a      	ldr	r2, [r3, #0]
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bfc:	6879      	ldr	r1, [r7, #4]
 8013bfe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013c00:	440b      	add	r3, r1
 8013c02:	1ad3      	subs	r3, r2, r3
 8013c04:	3301      	adds	r3, #1
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	f300 841e 	bgt.w	8014448 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013c10:	4b7b      	ldr	r3, [pc, #492]	; (8013e00 <tcp_receive+0x884>)
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	429a      	cmp	r2, r3
 8013c16:	f040 829a 	bne.w	801414e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013c1a:	4b7a      	ldr	r3, [pc, #488]	; (8013e04 <tcp_receive+0x888>)
 8013c1c:	891c      	ldrh	r4, [r3, #8]
 8013c1e:	4b79      	ldr	r3, [pc, #484]	; (8013e04 <tcp_receive+0x888>)
 8013c20:	68db      	ldr	r3, [r3, #12]
 8013c22:	899b      	ldrh	r3, [r3, #12]
 8013c24:	b29b      	uxth	r3, r3
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7fa fe61 	bl	800e8ee <lwip_htons>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	b2db      	uxtb	r3, r3
 8013c30:	f003 0303 	and.w	r3, r3, #3
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d001      	beq.n	8013c3c <tcp_receive+0x6c0>
 8013c38:	2301      	movs	r3, #1
 8013c3a:	e000      	b.n	8013c3e <tcp_receive+0x6c2>
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	4423      	add	r3, r4
 8013c40:	b29a      	uxth	r2, r3
 8013c42:	4b71      	ldr	r3, [pc, #452]	; (8013e08 <tcp_receive+0x88c>)
 8013c44:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013c4a:	4b6f      	ldr	r3, [pc, #444]	; (8013e08 <tcp_receive+0x88c>)
 8013c4c:	881b      	ldrh	r3, [r3, #0]
 8013c4e:	429a      	cmp	r2, r3
 8013c50:	d275      	bcs.n	8013d3e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013c52:	4b6c      	ldr	r3, [pc, #432]	; (8013e04 <tcp_receive+0x888>)
 8013c54:	68db      	ldr	r3, [r3, #12]
 8013c56:	899b      	ldrh	r3, [r3, #12]
 8013c58:	b29b      	uxth	r3, r3
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7fa fe47 	bl	800e8ee <lwip_htons>
 8013c60:	4603      	mov	r3, r0
 8013c62:	b2db      	uxtb	r3, r3
 8013c64:	f003 0301 	and.w	r3, r3, #1
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d01f      	beq.n	8013cac <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013c6c:	4b65      	ldr	r3, [pc, #404]	; (8013e04 <tcp_receive+0x888>)
 8013c6e:	68db      	ldr	r3, [r3, #12]
 8013c70:	899b      	ldrh	r3, [r3, #12]
 8013c72:	b29b      	uxth	r3, r3
 8013c74:	b21b      	sxth	r3, r3
 8013c76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013c7a:	b21c      	sxth	r4, r3
 8013c7c:	4b61      	ldr	r3, [pc, #388]	; (8013e04 <tcp_receive+0x888>)
 8013c7e:	68db      	ldr	r3, [r3, #12]
 8013c80:	899b      	ldrh	r3, [r3, #12]
 8013c82:	b29b      	uxth	r3, r3
 8013c84:	4618      	mov	r0, r3
 8013c86:	f7fa fe32 	bl	800e8ee <lwip_htons>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	b2db      	uxtb	r3, r3
 8013c8e:	b29b      	uxth	r3, r3
 8013c90:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013c94:	b29b      	uxth	r3, r3
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7fa fe29 	bl	800e8ee <lwip_htons>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	b21b      	sxth	r3, r3
 8013ca0:	4323      	orrs	r3, r4
 8013ca2:	b21a      	sxth	r2, r3
 8013ca4:	4b57      	ldr	r3, [pc, #348]	; (8013e04 <tcp_receive+0x888>)
 8013ca6:	68db      	ldr	r3, [r3, #12]
 8013ca8:	b292      	uxth	r2, r2
 8013caa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013cb0:	4b54      	ldr	r3, [pc, #336]	; (8013e04 <tcp_receive+0x888>)
 8013cb2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013cb4:	4b53      	ldr	r3, [pc, #332]	; (8013e04 <tcp_receive+0x888>)
 8013cb6:	68db      	ldr	r3, [r3, #12]
 8013cb8:	899b      	ldrh	r3, [r3, #12]
 8013cba:	b29b      	uxth	r3, r3
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7fa fe16 	bl	800e8ee <lwip_htons>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	b2db      	uxtb	r3, r3
 8013cc6:	f003 0302 	and.w	r3, r3, #2
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d005      	beq.n	8013cda <tcp_receive+0x75e>
            inseg.len -= 1;
 8013cce:	4b4d      	ldr	r3, [pc, #308]	; (8013e04 <tcp_receive+0x888>)
 8013cd0:	891b      	ldrh	r3, [r3, #8]
 8013cd2:	3b01      	subs	r3, #1
 8013cd4:	b29a      	uxth	r2, r3
 8013cd6:	4b4b      	ldr	r3, [pc, #300]	; (8013e04 <tcp_receive+0x888>)
 8013cd8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013cda:	4b4a      	ldr	r3, [pc, #296]	; (8013e04 <tcp_receive+0x888>)
 8013cdc:	685b      	ldr	r3, [r3, #4]
 8013cde:	4a49      	ldr	r2, [pc, #292]	; (8013e04 <tcp_receive+0x888>)
 8013ce0:	8912      	ldrh	r2, [r2, #8]
 8013ce2:	4611      	mov	r1, r2
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7fb ff3f 	bl	800fb68 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013cea:	4b46      	ldr	r3, [pc, #280]	; (8013e04 <tcp_receive+0x888>)
 8013cec:	891c      	ldrh	r4, [r3, #8]
 8013cee:	4b45      	ldr	r3, [pc, #276]	; (8013e04 <tcp_receive+0x888>)
 8013cf0:	68db      	ldr	r3, [r3, #12]
 8013cf2:	899b      	ldrh	r3, [r3, #12]
 8013cf4:	b29b      	uxth	r3, r3
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7fa fdf9 	bl	800e8ee <lwip_htons>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	b2db      	uxtb	r3, r3
 8013d00:	f003 0303 	and.w	r3, r3, #3
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d001      	beq.n	8013d0c <tcp_receive+0x790>
 8013d08:	2301      	movs	r3, #1
 8013d0a:	e000      	b.n	8013d0e <tcp_receive+0x792>
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	4423      	add	r3, r4
 8013d10:	b29a      	uxth	r2, r3
 8013d12:	4b3d      	ldr	r3, [pc, #244]	; (8013e08 <tcp_receive+0x88c>)
 8013d14:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013d16:	4b3c      	ldr	r3, [pc, #240]	; (8013e08 <tcp_receive+0x88c>)
 8013d18:	881b      	ldrh	r3, [r3, #0]
 8013d1a:	461a      	mov	r2, r3
 8013d1c:	4b38      	ldr	r3, [pc, #224]	; (8013e00 <tcp_receive+0x884>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	441a      	add	r2, r3
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d26:	6879      	ldr	r1, [r7, #4]
 8013d28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013d2a:	440b      	add	r3, r1
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	d006      	beq.n	8013d3e <tcp_receive+0x7c2>
 8013d30:	4b36      	ldr	r3, [pc, #216]	; (8013e0c <tcp_receive+0x890>)
 8013d32:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013d36:	4936      	ldr	r1, [pc, #216]	; (8013e10 <tcp_receive+0x894>)
 8013d38:	4836      	ldr	r0, [pc, #216]	; (8013e14 <tcp_receive+0x898>)
 8013d3a:	f006 f9fd 	bl	801a138 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	f000 80e7 	beq.w	8013f16 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013d48:	4b2e      	ldr	r3, [pc, #184]	; (8013e04 <tcp_receive+0x888>)
 8013d4a:	68db      	ldr	r3, [r3, #12]
 8013d4c:	899b      	ldrh	r3, [r3, #12]
 8013d4e:	b29b      	uxth	r3, r3
 8013d50:	4618      	mov	r0, r3
 8013d52:	f7fa fdcc 	bl	800e8ee <lwip_htons>
 8013d56:	4603      	mov	r3, r0
 8013d58:	b2db      	uxtb	r3, r3
 8013d5a:	f003 0301 	and.w	r3, r3, #1
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d010      	beq.n	8013d84 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013d62:	e00a      	b.n	8013d7a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d68:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d6e:	681a      	ldr	r2, [r3, #0]
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013d74:	68f8      	ldr	r0, [r7, #12]
 8013d76:	f7fd fce4 	bl	8011742 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d1f0      	bne.n	8013d64 <tcp_receive+0x7e8>
 8013d82:	e0c8      	b.n	8013f16 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d88:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013d8a:	e052      	b.n	8013e32 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d8e:	68db      	ldr	r3, [r3, #12]
 8013d90:	899b      	ldrh	r3, [r3, #12]
 8013d92:	b29b      	uxth	r3, r3
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7fa fdaa 	bl	800e8ee <lwip_htons>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	b2db      	uxtb	r3, r3
 8013d9e:	f003 0301 	and.w	r3, r3, #1
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d03d      	beq.n	8013e22 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013da6:	4b17      	ldr	r3, [pc, #92]	; (8013e04 <tcp_receive+0x888>)
 8013da8:	68db      	ldr	r3, [r3, #12]
 8013daa:	899b      	ldrh	r3, [r3, #12]
 8013dac:	b29b      	uxth	r3, r3
 8013dae:	4618      	mov	r0, r3
 8013db0:	f7fa fd9d 	bl	800e8ee <lwip_htons>
 8013db4:	4603      	mov	r3, r0
 8013db6:	b2db      	uxtb	r3, r3
 8013db8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d130      	bne.n	8013e22 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013dc0:	4b10      	ldr	r3, [pc, #64]	; (8013e04 <tcp_receive+0x888>)
 8013dc2:	68db      	ldr	r3, [r3, #12]
 8013dc4:	899b      	ldrh	r3, [r3, #12]
 8013dc6:	b29c      	uxth	r4, r3
 8013dc8:	2001      	movs	r0, #1
 8013dca:	f7fa fd90 	bl	800e8ee <lwip_htons>
 8013dce:	4603      	mov	r3, r0
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	4b0c      	ldr	r3, [pc, #48]	; (8013e04 <tcp_receive+0x888>)
 8013dd4:	68db      	ldr	r3, [r3, #12]
 8013dd6:	4322      	orrs	r2, r4
 8013dd8:	b292      	uxth	r2, r2
 8013dda:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013ddc:	4b09      	ldr	r3, [pc, #36]	; (8013e04 <tcp_receive+0x888>)
 8013dde:	891c      	ldrh	r4, [r3, #8]
 8013de0:	4b08      	ldr	r3, [pc, #32]	; (8013e04 <tcp_receive+0x888>)
 8013de2:	68db      	ldr	r3, [r3, #12]
 8013de4:	899b      	ldrh	r3, [r3, #12]
 8013de6:	b29b      	uxth	r3, r3
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7fa fd80 	bl	800e8ee <lwip_htons>
 8013dee:	4603      	mov	r3, r0
 8013df0:	b2db      	uxtb	r3, r3
 8013df2:	f003 0303 	and.w	r3, r3, #3
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d00e      	beq.n	8013e18 <tcp_receive+0x89c>
 8013dfa:	2301      	movs	r3, #1
 8013dfc:	e00d      	b.n	8013e1a <tcp_receive+0x89e>
 8013dfe:	bf00      	nop
 8013e00:	20000838 	.word	0x20000838
 8013e04:	20000818 	.word	0x20000818
 8013e08:	20000842 	.word	0x20000842
 8013e0c:	0801db38 	.word	0x0801db38
 8013e10:	0801dee0 	.word	0x0801dee0
 8013e14:	0801db84 	.word	0x0801db84
 8013e18:	2300      	movs	r3, #0
 8013e1a:	4423      	add	r3, r4
 8013e1c:	b29a      	uxth	r2, r3
 8013e1e:	4b98      	ldr	r3, [pc, #608]	; (8014080 <tcp_receive+0xb04>)
 8013e20:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e24:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013e2c:	6938      	ldr	r0, [r7, #16]
 8013e2e:	f7fd fc88 	bl	8011742 <tcp_seg_free>
            while (next &&
 8013e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d00e      	beq.n	8013e56 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013e38:	4b91      	ldr	r3, [pc, #580]	; (8014080 <tcp_receive+0xb04>)
 8013e3a:	881b      	ldrh	r3, [r3, #0]
 8013e3c:	461a      	mov	r2, r3
 8013e3e:	4b91      	ldr	r3, [pc, #580]	; (8014084 <tcp_receive+0xb08>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	441a      	add	r2, r3
 8013e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e46:	68db      	ldr	r3, [r3, #12]
 8013e48:	685b      	ldr	r3, [r3, #4]
 8013e4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013e4c:	8909      	ldrh	r1, [r1, #8]
 8013e4e:	440b      	add	r3, r1
 8013e50:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	da9a      	bge.n	8013d8c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d059      	beq.n	8013f10 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8013e5c:	4b88      	ldr	r3, [pc, #544]	; (8014080 <tcp_receive+0xb04>)
 8013e5e:	881b      	ldrh	r3, [r3, #0]
 8013e60:	461a      	mov	r2, r3
 8013e62:	4b88      	ldr	r3, [pc, #544]	; (8014084 <tcp_receive+0xb08>)
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	441a      	add	r2, r3
 8013e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e6a:	68db      	ldr	r3, [r3, #12]
 8013e6c:	685b      	ldr	r3, [r3, #4]
 8013e6e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	dd4d      	ble.n	8013f10 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e76:	68db      	ldr	r3, [r3, #12]
 8013e78:	685b      	ldr	r3, [r3, #4]
 8013e7a:	b29a      	uxth	r2, r3
 8013e7c:	4b81      	ldr	r3, [pc, #516]	; (8014084 <tcp_receive+0xb08>)
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	b29b      	uxth	r3, r3
 8013e82:	1ad3      	subs	r3, r2, r3
 8013e84:	b29a      	uxth	r2, r3
 8013e86:	4b80      	ldr	r3, [pc, #512]	; (8014088 <tcp_receive+0xb0c>)
 8013e88:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013e8a:	4b7f      	ldr	r3, [pc, #508]	; (8014088 <tcp_receive+0xb0c>)
 8013e8c:	68db      	ldr	r3, [r3, #12]
 8013e8e:	899b      	ldrh	r3, [r3, #12]
 8013e90:	b29b      	uxth	r3, r3
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7fa fd2b 	bl	800e8ee <lwip_htons>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	b2db      	uxtb	r3, r3
 8013e9c:	f003 0302 	and.w	r3, r3, #2
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d005      	beq.n	8013eb0 <tcp_receive+0x934>
                inseg.len -= 1;
 8013ea4:	4b78      	ldr	r3, [pc, #480]	; (8014088 <tcp_receive+0xb0c>)
 8013ea6:	891b      	ldrh	r3, [r3, #8]
 8013ea8:	3b01      	subs	r3, #1
 8013eaa:	b29a      	uxth	r2, r3
 8013eac:	4b76      	ldr	r3, [pc, #472]	; (8014088 <tcp_receive+0xb0c>)
 8013eae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013eb0:	4b75      	ldr	r3, [pc, #468]	; (8014088 <tcp_receive+0xb0c>)
 8013eb2:	685b      	ldr	r3, [r3, #4]
 8013eb4:	4a74      	ldr	r2, [pc, #464]	; (8014088 <tcp_receive+0xb0c>)
 8013eb6:	8912      	ldrh	r2, [r2, #8]
 8013eb8:	4611      	mov	r1, r2
 8013eba:	4618      	mov	r0, r3
 8013ebc:	f7fb fe54 	bl	800fb68 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013ec0:	4b71      	ldr	r3, [pc, #452]	; (8014088 <tcp_receive+0xb0c>)
 8013ec2:	891c      	ldrh	r4, [r3, #8]
 8013ec4:	4b70      	ldr	r3, [pc, #448]	; (8014088 <tcp_receive+0xb0c>)
 8013ec6:	68db      	ldr	r3, [r3, #12]
 8013ec8:	899b      	ldrh	r3, [r3, #12]
 8013eca:	b29b      	uxth	r3, r3
 8013ecc:	4618      	mov	r0, r3
 8013ece:	f7fa fd0e 	bl	800e8ee <lwip_htons>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	b2db      	uxtb	r3, r3
 8013ed6:	f003 0303 	and.w	r3, r3, #3
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d001      	beq.n	8013ee2 <tcp_receive+0x966>
 8013ede:	2301      	movs	r3, #1
 8013ee0:	e000      	b.n	8013ee4 <tcp_receive+0x968>
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	4423      	add	r3, r4
 8013ee6:	b29a      	uxth	r2, r3
 8013ee8:	4b65      	ldr	r3, [pc, #404]	; (8014080 <tcp_receive+0xb04>)
 8013eea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013eec:	4b64      	ldr	r3, [pc, #400]	; (8014080 <tcp_receive+0xb04>)
 8013eee:	881b      	ldrh	r3, [r3, #0]
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	4b64      	ldr	r3, [pc, #400]	; (8014084 <tcp_receive+0xb08>)
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	441a      	add	r2, r3
 8013ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013efa:	68db      	ldr	r3, [r3, #12]
 8013efc:	685b      	ldr	r3, [r3, #4]
 8013efe:	429a      	cmp	r2, r3
 8013f00:	d006      	beq.n	8013f10 <tcp_receive+0x994>
 8013f02:	4b62      	ldr	r3, [pc, #392]	; (801408c <tcp_receive+0xb10>)
 8013f04:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013f08:	4961      	ldr	r1, [pc, #388]	; (8014090 <tcp_receive+0xb14>)
 8013f0a:	4862      	ldr	r0, [pc, #392]	; (8014094 <tcp_receive+0xb18>)
 8013f0c:	f006 f914 	bl	801a138 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013f14:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013f16:	4b5a      	ldr	r3, [pc, #360]	; (8014080 <tcp_receive+0xb04>)
 8013f18:	881b      	ldrh	r3, [r3, #0]
 8013f1a:	461a      	mov	r2, r3
 8013f1c:	4b59      	ldr	r3, [pc, #356]	; (8014084 <tcp_receive+0xb08>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	441a      	add	r2, r3
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013f2a:	4b55      	ldr	r3, [pc, #340]	; (8014080 <tcp_receive+0xb04>)
 8013f2c:	881b      	ldrh	r3, [r3, #0]
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	d206      	bcs.n	8013f40 <tcp_receive+0x9c4>
 8013f32:	4b56      	ldr	r3, [pc, #344]	; (801408c <tcp_receive+0xb10>)
 8013f34:	f240 6207 	movw	r2, #1543	; 0x607
 8013f38:	4957      	ldr	r1, [pc, #348]	; (8014098 <tcp_receive+0xb1c>)
 8013f3a:	4856      	ldr	r0, [pc, #344]	; (8014094 <tcp_receive+0xb18>)
 8013f3c:	f006 f8fc 	bl	801a138 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013f44:	4b4e      	ldr	r3, [pc, #312]	; (8014080 <tcp_receive+0xb04>)
 8013f46:	881b      	ldrh	r3, [r3, #0]
 8013f48:	1ad3      	subs	r3, r2, r3
 8013f4a:	b29a      	uxth	r2, r3
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013f50:	6878      	ldr	r0, [r7, #4]
 8013f52:	f7fc fdb5 	bl	8010ac0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013f56:	4b4c      	ldr	r3, [pc, #304]	; (8014088 <tcp_receive+0xb0c>)
 8013f58:	685b      	ldr	r3, [r3, #4]
 8013f5a:	891b      	ldrh	r3, [r3, #8]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d006      	beq.n	8013f6e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8013f60:	4b49      	ldr	r3, [pc, #292]	; (8014088 <tcp_receive+0xb0c>)
 8013f62:	685b      	ldr	r3, [r3, #4]
 8013f64:	4a4d      	ldr	r2, [pc, #308]	; (801409c <tcp_receive+0xb20>)
 8013f66:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013f68:	4b47      	ldr	r3, [pc, #284]	; (8014088 <tcp_receive+0xb0c>)
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013f6e:	4b46      	ldr	r3, [pc, #280]	; (8014088 <tcp_receive+0xb0c>)
 8013f70:	68db      	ldr	r3, [r3, #12]
 8013f72:	899b      	ldrh	r3, [r3, #12]
 8013f74:	b29b      	uxth	r3, r3
 8013f76:	4618      	mov	r0, r3
 8013f78:	f7fa fcb9 	bl	800e8ee <lwip_htons>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	b2db      	uxtb	r3, r3
 8013f80:	f003 0301 	and.w	r3, r3, #1
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	f000 80b8 	beq.w	80140fa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013f8a:	4b45      	ldr	r3, [pc, #276]	; (80140a0 <tcp_receive+0xb24>)
 8013f8c:	781b      	ldrb	r3, [r3, #0]
 8013f8e:	f043 0320 	orr.w	r3, r3, #32
 8013f92:	b2da      	uxtb	r2, r3
 8013f94:	4b42      	ldr	r3, [pc, #264]	; (80140a0 <tcp_receive+0xb24>)
 8013f96:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013f98:	e0af      	b.n	80140fa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f9e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fa4:	68db      	ldr	r3, [r3, #12]
 8013fa6:	685b      	ldr	r3, [r3, #4]
 8013fa8:	4a36      	ldr	r2, [pc, #216]	; (8014084 <tcp_receive+0xb08>)
 8013faa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013fac:	68bb      	ldr	r3, [r7, #8]
 8013fae:	891b      	ldrh	r3, [r3, #8]
 8013fb0:	461c      	mov	r4, r3
 8013fb2:	68bb      	ldr	r3, [r7, #8]
 8013fb4:	68db      	ldr	r3, [r3, #12]
 8013fb6:	899b      	ldrh	r3, [r3, #12]
 8013fb8:	b29b      	uxth	r3, r3
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f7fa fc97 	bl	800e8ee <lwip_htons>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	b2db      	uxtb	r3, r3
 8013fc4:	f003 0303 	and.w	r3, r3, #3
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d001      	beq.n	8013fd0 <tcp_receive+0xa54>
 8013fcc:	2301      	movs	r3, #1
 8013fce:	e000      	b.n	8013fd2 <tcp_receive+0xa56>
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	191a      	adds	r2, r3, r4
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fd8:	441a      	add	r2, r3
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013fe2:	461c      	mov	r4, r3
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	891b      	ldrh	r3, [r3, #8]
 8013fe8:	461d      	mov	r5, r3
 8013fea:	68bb      	ldr	r3, [r7, #8]
 8013fec:	68db      	ldr	r3, [r3, #12]
 8013fee:	899b      	ldrh	r3, [r3, #12]
 8013ff0:	b29b      	uxth	r3, r3
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7fa fc7b 	bl	800e8ee <lwip_htons>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	b2db      	uxtb	r3, r3
 8013ffc:	f003 0303 	and.w	r3, r3, #3
 8014000:	2b00      	cmp	r3, #0
 8014002:	d001      	beq.n	8014008 <tcp_receive+0xa8c>
 8014004:	2301      	movs	r3, #1
 8014006:	e000      	b.n	801400a <tcp_receive+0xa8e>
 8014008:	2300      	movs	r3, #0
 801400a:	442b      	add	r3, r5
 801400c:	429c      	cmp	r4, r3
 801400e:	d206      	bcs.n	801401e <tcp_receive+0xaa2>
 8014010:	4b1e      	ldr	r3, [pc, #120]	; (801408c <tcp_receive+0xb10>)
 8014012:	f240 622b 	movw	r2, #1579	; 0x62b
 8014016:	4923      	ldr	r1, [pc, #140]	; (80140a4 <tcp_receive+0xb28>)
 8014018:	481e      	ldr	r0, [pc, #120]	; (8014094 <tcp_receive+0xb18>)
 801401a:	f006 f88d 	bl	801a138 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	891b      	ldrh	r3, [r3, #8]
 8014022:	461c      	mov	r4, r3
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	68db      	ldr	r3, [r3, #12]
 8014028:	899b      	ldrh	r3, [r3, #12]
 801402a:	b29b      	uxth	r3, r3
 801402c:	4618      	mov	r0, r3
 801402e:	f7fa fc5e 	bl	800e8ee <lwip_htons>
 8014032:	4603      	mov	r3, r0
 8014034:	b2db      	uxtb	r3, r3
 8014036:	f003 0303 	and.w	r3, r3, #3
 801403a:	2b00      	cmp	r3, #0
 801403c:	d001      	beq.n	8014042 <tcp_receive+0xac6>
 801403e:	2301      	movs	r3, #1
 8014040:	e000      	b.n	8014044 <tcp_receive+0xac8>
 8014042:	2300      	movs	r3, #0
 8014044:	1919      	adds	r1, r3, r4
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801404a:	b28b      	uxth	r3, r1
 801404c:	1ad3      	subs	r3, r2, r3
 801404e:	b29a      	uxth	r2, r3
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014054:	6878      	ldr	r0, [r7, #4]
 8014056:	f7fc fd33 	bl	8010ac0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	685b      	ldr	r3, [r3, #4]
 801405e:	891b      	ldrh	r3, [r3, #8]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d028      	beq.n	80140b6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014064:	4b0d      	ldr	r3, [pc, #52]	; (801409c <tcp_receive+0xb20>)
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d01d      	beq.n	80140a8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801406c:	4b0b      	ldr	r3, [pc, #44]	; (801409c <tcp_receive+0xb20>)
 801406e:	681a      	ldr	r2, [r3, #0]
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	685b      	ldr	r3, [r3, #4]
 8014074:	4619      	mov	r1, r3
 8014076:	4610      	mov	r0, r2
 8014078:	f7fb ffbe 	bl	800fff8 <pbuf_cat>
 801407c:	e018      	b.n	80140b0 <tcp_receive+0xb34>
 801407e:	bf00      	nop
 8014080:	20000842 	.word	0x20000842
 8014084:	20000838 	.word	0x20000838
 8014088:	20000818 	.word	0x20000818
 801408c:	0801db38 	.word	0x0801db38
 8014090:	0801df18 	.word	0x0801df18
 8014094:	0801db84 	.word	0x0801db84
 8014098:	0801df54 	.word	0x0801df54
 801409c:	20000848 	.word	0x20000848
 80140a0:	20000845 	.word	0x20000845
 80140a4:	0801df74 	.word	0x0801df74
            } else {
              recv_data = cseg->p;
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	685b      	ldr	r3, [r3, #4]
 80140ac:	4a70      	ldr	r2, [pc, #448]	; (8014270 <tcp_receive+0xcf4>)
 80140ae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80140b0:	68bb      	ldr	r3, [r7, #8]
 80140b2:	2200      	movs	r2, #0
 80140b4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80140b6:	68bb      	ldr	r3, [r7, #8]
 80140b8:	68db      	ldr	r3, [r3, #12]
 80140ba:	899b      	ldrh	r3, [r3, #12]
 80140bc:	b29b      	uxth	r3, r3
 80140be:	4618      	mov	r0, r3
 80140c0:	f7fa fc15 	bl	800e8ee <lwip_htons>
 80140c4:	4603      	mov	r3, r0
 80140c6:	b2db      	uxtb	r3, r3
 80140c8:	f003 0301 	and.w	r3, r3, #1
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d00d      	beq.n	80140ec <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80140d0:	4b68      	ldr	r3, [pc, #416]	; (8014274 <tcp_receive+0xcf8>)
 80140d2:	781b      	ldrb	r3, [r3, #0]
 80140d4:	f043 0320 	orr.w	r3, r3, #32
 80140d8:	b2da      	uxtb	r2, r3
 80140da:	4b66      	ldr	r3, [pc, #408]	; (8014274 <tcp_receive+0xcf8>)
 80140dc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	7d1b      	ldrb	r3, [r3, #20]
 80140e2:	2b04      	cmp	r3, #4
 80140e4:	d102      	bne.n	80140ec <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2207      	movs	r2, #7
 80140ea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	681a      	ldr	r2, [r3, #0]
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80140f4:	68b8      	ldr	r0, [r7, #8]
 80140f6:	f7fd fb24 	bl	8011742 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d008      	beq.n	8014114 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014106:	68db      	ldr	r3, [r3, #12]
 8014108:	685a      	ldr	r2, [r3, #4]
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801410e:	429a      	cmp	r2, r3
 8014110:	f43f af43 	beq.w	8013f9a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	8b5b      	ldrh	r3, [r3, #26]
 8014118:	f003 0301 	and.w	r3, r3, #1
 801411c:	2b00      	cmp	r3, #0
 801411e:	d00e      	beq.n	801413e <tcp_receive+0xbc2>
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	8b5b      	ldrh	r3, [r3, #26]
 8014124:	f023 0301 	bic.w	r3, r3, #1
 8014128:	b29a      	uxth	r2, r3
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	835a      	strh	r2, [r3, #26]
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	8b5b      	ldrh	r3, [r3, #26]
 8014132:	f043 0302 	orr.w	r3, r3, #2
 8014136:	b29a      	uxth	r2, r3
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801413c:	e188      	b.n	8014450 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	8b5b      	ldrh	r3, [r3, #26]
 8014142:	f043 0301 	orr.w	r3, r3, #1
 8014146:	b29a      	uxth	r2, r3
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801414c:	e180      	b.n	8014450 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014152:	2b00      	cmp	r3, #0
 8014154:	d106      	bne.n	8014164 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014156:	4848      	ldr	r0, [pc, #288]	; (8014278 <tcp_receive+0xcfc>)
 8014158:	f7fd fb0c 	bl	8011774 <tcp_seg_copy>
 801415c:	4602      	mov	r2, r0
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	675a      	str	r2, [r3, #116]	; 0x74
 8014162:	e16d      	b.n	8014440 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014164:	2300      	movs	r3, #0
 8014166:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801416c:	63bb      	str	r3, [r7, #56]	; 0x38
 801416e:	e157      	b.n	8014420 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8014170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014172:	68db      	ldr	r3, [r3, #12]
 8014174:	685a      	ldr	r2, [r3, #4]
 8014176:	4b41      	ldr	r3, [pc, #260]	; (801427c <tcp_receive+0xd00>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	429a      	cmp	r2, r3
 801417c:	d11d      	bne.n	80141ba <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801417e:	4b3e      	ldr	r3, [pc, #248]	; (8014278 <tcp_receive+0xcfc>)
 8014180:	891a      	ldrh	r2, [r3, #8]
 8014182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014184:	891b      	ldrh	r3, [r3, #8]
 8014186:	429a      	cmp	r2, r3
 8014188:	f240 814f 	bls.w	801442a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801418c:	483a      	ldr	r0, [pc, #232]	; (8014278 <tcp_receive+0xcfc>)
 801418e:	f7fd faf1 	bl	8011774 <tcp_seg_copy>
 8014192:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014194:	697b      	ldr	r3, [r7, #20]
 8014196:	2b00      	cmp	r3, #0
 8014198:	f000 8149 	beq.w	801442e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801419c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d003      	beq.n	80141aa <tcp_receive+0xc2e>
                    prev->next = cseg;
 80141a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141a4:	697a      	ldr	r2, [r7, #20]
 80141a6:	601a      	str	r2, [r3, #0]
 80141a8:	e002      	b.n	80141b0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	697a      	ldr	r2, [r7, #20]
 80141ae:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80141b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80141b2:	6978      	ldr	r0, [r7, #20]
 80141b4:	f7ff f8de 	bl	8013374 <tcp_oos_insert_segment>
                }
                break;
 80141b8:	e139      	b.n	801442e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80141ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d117      	bne.n	80141f0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80141c0:	4b2e      	ldr	r3, [pc, #184]	; (801427c <tcp_receive+0xd00>)
 80141c2:	681a      	ldr	r2, [r3, #0]
 80141c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c6:	68db      	ldr	r3, [r3, #12]
 80141c8:	685b      	ldr	r3, [r3, #4]
 80141ca:	1ad3      	subs	r3, r2, r3
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	da57      	bge.n	8014280 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80141d0:	4829      	ldr	r0, [pc, #164]	; (8014278 <tcp_receive+0xcfc>)
 80141d2:	f7fd facf 	bl	8011774 <tcp_seg_copy>
 80141d6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80141d8:	69bb      	ldr	r3, [r7, #24]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	f000 8129 	beq.w	8014432 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	69ba      	ldr	r2, [r7, #24]
 80141e4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80141e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80141e8:	69b8      	ldr	r0, [r7, #24]
 80141ea:	f7ff f8c3 	bl	8013374 <tcp_oos_insert_segment>
                  }
                  break;
 80141ee:	e120      	b.n	8014432 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80141f0:	4b22      	ldr	r3, [pc, #136]	; (801427c <tcp_receive+0xd00>)
 80141f2:	681a      	ldr	r2, [r3, #0]
 80141f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141f6:	68db      	ldr	r3, [r3, #12]
 80141f8:	685b      	ldr	r3, [r3, #4]
 80141fa:	1ad3      	subs	r3, r2, r3
 80141fc:	3b01      	subs	r3, #1
 80141fe:	2b00      	cmp	r3, #0
 8014200:	db3e      	blt.n	8014280 <tcp_receive+0xd04>
 8014202:	4b1e      	ldr	r3, [pc, #120]	; (801427c <tcp_receive+0xd00>)
 8014204:	681a      	ldr	r2, [r3, #0]
 8014206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014208:	68db      	ldr	r3, [r3, #12]
 801420a:	685b      	ldr	r3, [r3, #4]
 801420c:	1ad3      	subs	r3, r2, r3
 801420e:	3301      	adds	r3, #1
 8014210:	2b00      	cmp	r3, #0
 8014212:	dc35      	bgt.n	8014280 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014214:	4818      	ldr	r0, [pc, #96]	; (8014278 <tcp_receive+0xcfc>)
 8014216:	f7fd faad 	bl	8011774 <tcp_seg_copy>
 801421a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801421c:	69fb      	ldr	r3, [r7, #28]
 801421e:	2b00      	cmp	r3, #0
 8014220:	f000 8109 	beq.w	8014436 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014226:	68db      	ldr	r3, [r3, #12]
 8014228:	685b      	ldr	r3, [r3, #4]
 801422a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801422c:	8912      	ldrh	r2, [r2, #8]
 801422e:	441a      	add	r2, r3
 8014230:	4b12      	ldr	r3, [pc, #72]	; (801427c <tcp_receive+0xd00>)
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	1ad3      	subs	r3, r2, r3
 8014236:	2b00      	cmp	r3, #0
 8014238:	dd12      	ble.n	8014260 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801423a:	4b10      	ldr	r3, [pc, #64]	; (801427c <tcp_receive+0xd00>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	b29a      	uxth	r2, r3
 8014240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014242:	68db      	ldr	r3, [r3, #12]
 8014244:	685b      	ldr	r3, [r3, #4]
 8014246:	b29b      	uxth	r3, r3
 8014248:	1ad3      	subs	r3, r2, r3
 801424a:	b29a      	uxth	r2, r3
 801424c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801424e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014252:	685a      	ldr	r2, [r3, #4]
 8014254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014256:	891b      	ldrh	r3, [r3, #8]
 8014258:	4619      	mov	r1, r3
 801425a:	4610      	mov	r0, r2
 801425c:	f7fb fc84 	bl	800fb68 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014262:	69fa      	ldr	r2, [r7, #28]
 8014264:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014266:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014268:	69f8      	ldr	r0, [r7, #28]
 801426a:	f7ff f883 	bl	8013374 <tcp_oos_insert_segment>
                  }
                  break;
 801426e:	e0e2      	b.n	8014436 <tcp_receive+0xeba>
 8014270:	20000848 	.word	0x20000848
 8014274:	20000845 	.word	0x20000845
 8014278:	20000818 	.word	0x20000818
 801427c:	20000838 	.word	0x20000838
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014282:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	2b00      	cmp	r3, #0
 801428a:	f040 80c6 	bne.w	801441a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801428e:	4b80      	ldr	r3, [pc, #512]	; (8014490 <tcp_receive+0xf14>)
 8014290:	681a      	ldr	r2, [r3, #0]
 8014292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014294:	68db      	ldr	r3, [r3, #12]
 8014296:	685b      	ldr	r3, [r3, #4]
 8014298:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801429a:	2b00      	cmp	r3, #0
 801429c:	f340 80bd 	ble.w	801441a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80142a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142a2:	68db      	ldr	r3, [r3, #12]
 80142a4:	899b      	ldrh	r3, [r3, #12]
 80142a6:	b29b      	uxth	r3, r3
 80142a8:	4618      	mov	r0, r3
 80142aa:	f7fa fb20 	bl	800e8ee <lwip_htons>
 80142ae:	4603      	mov	r3, r0
 80142b0:	b2db      	uxtb	r3, r3
 80142b2:	f003 0301 	and.w	r3, r3, #1
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	f040 80bf 	bne.w	801443a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80142bc:	4875      	ldr	r0, [pc, #468]	; (8014494 <tcp_receive+0xf18>)
 80142be:	f7fd fa59 	bl	8011774 <tcp_seg_copy>
 80142c2:	4602      	mov	r2, r0
 80142c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142c6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80142c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	f000 80b6 	beq.w	801443e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80142d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142d4:	68db      	ldr	r3, [r3, #12]
 80142d6:	685b      	ldr	r3, [r3, #4]
 80142d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142da:	8912      	ldrh	r2, [r2, #8]
 80142dc:	441a      	add	r2, r3
 80142de:	4b6c      	ldr	r3, [pc, #432]	; (8014490 <tcp_receive+0xf14>)
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	1ad3      	subs	r3, r2, r3
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	dd12      	ble.n	801430e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80142e8:	4b69      	ldr	r3, [pc, #420]	; (8014490 <tcp_receive+0xf14>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	b29a      	uxth	r2, r3
 80142ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142f0:	68db      	ldr	r3, [r3, #12]
 80142f2:	685b      	ldr	r3, [r3, #4]
 80142f4:	b29b      	uxth	r3, r3
 80142f6:	1ad3      	subs	r3, r2, r3
 80142f8:	b29a      	uxth	r2, r3
 80142fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142fc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80142fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014300:	685a      	ldr	r2, [r3, #4]
 8014302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014304:	891b      	ldrh	r3, [r3, #8]
 8014306:	4619      	mov	r1, r3
 8014308:	4610      	mov	r0, r2
 801430a:	f7fb fc2d 	bl	800fb68 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801430e:	4b62      	ldr	r3, [pc, #392]	; (8014498 <tcp_receive+0xf1c>)
 8014310:	881b      	ldrh	r3, [r3, #0]
 8014312:	461a      	mov	r2, r3
 8014314:	4b5e      	ldr	r3, [pc, #376]	; (8014490 <tcp_receive+0xf14>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	441a      	add	r2, r3
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801431e:	6879      	ldr	r1, [r7, #4]
 8014320:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014322:	440b      	add	r3, r1
 8014324:	1ad3      	subs	r3, r2, r3
 8014326:	2b00      	cmp	r3, #0
 8014328:	f340 8089 	ble.w	801443e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801432c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	68db      	ldr	r3, [r3, #12]
 8014332:	899b      	ldrh	r3, [r3, #12]
 8014334:	b29b      	uxth	r3, r3
 8014336:	4618      	mov	r0, r3
 8014338:	f7fa fad9 	bl	800e8ee <lwip_htons>
 801433c:	4603      	mov	r3, r0
 801433e:	b2db      	uxtb	r3, r3
 8014340:	f003 0301 	and.w	r3, r3, #1
 8014344:	2b00      	cmp	r3, #0
 8014346:	d022      	beq.n	801438e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	68db      	ldr	r3, [r3, #12]
 801434e:	899b      	ldrh	r3, [r3, #12]
 8014350:	b29b      	uxth	r3, r3
 8014352:	b21b      	sxth	r3, r3
 8014354:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014358:	b21c      	sxth	r4, r3
 801435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	68db      	ldr	r3, [r3, #12]
 8014360:	899b      	ldrh	r3, [r3, #12]
 8014362:	b29b      	uxth	r3, r3
 8014364:	4618      	mov	r0, r3
 8014366:	f7fa fac2 	bl	800e8ee <lwip_htons>
 801436a:	4603      	mov	r3, r0
 801436c:	b2db      	uxtb	r3, r3
 801436e:	b29b      	uxth	r3, r3
 8014370:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014374:	b29b      	uxth	r3, r3
 8014376:	4618      	mov	r0, r3
 8014378:	f7fa fab9 	bl	800e8ee <lwip_htons>
 801437c:	4603      	mov	r3, r0
 801437e:	b21b      	sxth	r3, r3
 8014380:	4323      	orrs	r3, r4
 8014382:	b21a      	sxth	r2, r3
 8014384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	68db      	ldr	r3, [r3, #12]
 801438a:	b292      	uxth	r2, r2
 801438c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014392:	b29a      	uxth	r2, r3
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014398:	4413      	add	r3, r2
 801439a:	b299      	uxth	r1, r3
 801439c:	4b3c      	ldr	r3, [pc, #240]	; (8014490 <tcp_receive+0xf14>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	b29a      	uxth	r2, r3
 80143a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	1a8a      	subs	r2, r1, r2
 80143a8:	b292      	uxth	r2, r2
 80143aa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80143ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	685a      	ldr	r2, [r3, #4]
 80143b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	891b      	ldrh	r3, [r3, #8]
 80143b8:	4619      	mov	r1, r3
 80143ba:	4610      	mov	r0, r2
 80143bc:	f7fb fbd4 	bl	800fb68 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80143c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	891c      	ldrh	r4, [r3, #8]
 80143c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	68db      	ldr	r3, [r3, #12]
 80143cc:	899b      	ldrh	r3, [r3, #12]
 80143ce:	b29b      	uxth	r3, r3
 80143d0:	4618      	mov	r0, r3
 80143d2:	f7fa fa8c 	bl	800e8ee <lwip_htons>
 80143d6:	4603      	mov	r3, r0
 80143d8:	b2db      	uxtb	r3, r3
 80143da:	f003 0303 	and.w	r3, r3, #3
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d001      	beq.n	80143e6 <tcp_receive+0xe6a>
 80143e2:	2301      	movs	r3, #1
 80143e4:	e000      	b.n	80143e8 <tcp_receive+0xe6c>
 80143e6:	2300      	movs	r3, #0
 80143e8:	4423      	add	r3, r4
 80143ea:	b29a      	uxth	r2, r3
 80143ec:	4b2a      	ldr	r3, [pc, #168]	; (8014498 <tcp_receive+0xf1c>)
 80143ee:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80143f0:	4b29      	ldr	r3, [pc, #164]	; (8014498 <tcp_receive+0xf1c>)
 80143f2:	881b      	ldrh	r3, [r3, #0]
 80143f4:	461a      	mov	r2, r3
 80143f6:	4b26      	ldr	r3, [pc, #152]	; (8014490 <tcp_receive+0xf14>)
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	441a      	add	r2, r3
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014400:	6879      	ldr	r1, [r7, #4]
 8014402:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014404:	440b      	add	r3, r1
 8014406:	429a      	cmp	r2, r3
 8014408:	d019      	beq.n	801443e <tcp_receive+0xec2>
 801440a:	4b24      	ldr	r3, [pc, #144]	; (801449c <tcp_receive+0xf20>)
 801440c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014410:	4923      	ldr	r1, [pc, #140]	; (80144a0 <tcp_receive+0xf24>)
 8014412:	4824      	ldr	r0, [pc, #144]	; (80144a4 <tcp_receive+0xf28>)
 8014414:	f005 fe90 	bl	801a138 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014418:	e011      	b.n	801443e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	63bb      	str	r3, [r7, #56]	; 0x38
 8014420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014422:	2b00      	cmp	r3, #0
 8014424:	f47f aea4 	bne.w	8014170 <tcp_receive+0xbf4>
 8014428:	e00a      	b.n	8014440 <tcp_receive+0xec4>
                break;
 801442a:	bf00      	nop
 801442c:	e008      	b.n	8014440 <tcp_receive+0xec4>
                break;
 801442e:	bf00      	nop
 8014430:	e006      	b.n	8014440 <tcp_receive+0xec4>
                  break;
 8014432:	bf00      	nop
 8014434:	e004      	b.n	8014440 <tcp_receive+0xec4>
                  break;
 8014436:	bf00      	nop
 8014438:	e002      	b.n	8014440 <tcp_receive+0xec4>
                  break;
 801443a:	bf00      	nop
 801443c:	e000      	b.n	8014440 <tcp_receive+0xec4>
                break;
 801443e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014440:	6878      	ldr	r0, [r7, #4]
 8014442:	f001 fe8f 	bl	8016164 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014446:	e003      	b.n	8014450 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f001 fe8b 	bl	8016164 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801444e:	e01a      	b.n	8014486 <tcp_receive+0xf0a>
 8014450:	e019      	b.n	8014486 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014452:	4b0f      	ldr	r3, [pc, #60]	; (8014490 <tcp_receive+0xf14>)
 8014454:	681a      	ldr	r2, [r3, #0]
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801445a:	1ad3      	subs	r3, r2, r3
 801445c:	2b00      	cmp	r3, #0
 801445e:	db0a      	blt.n	8014476 <tcp_receive+0xefa>
 8014460:	4b0b      	ldr	r3, [pc, #44]	; (8014490 <tcp_receive+0xf14>)
 8014462:	681a      	ldr	r2, [r3, #0]
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014468:	6879      	ldr	r1, [r7, #4]
 801446a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801446c:	440b      	add	r3, r1
 801446e:	1ad3      	subs	r3, r2, r3
 8014470:	3301      	adds	r3, #1
 8014472:	2b00      	cmp	r3, #0
 8014474:	dd07      	ble.n	8014486 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	8b5b      	ldrh	r3, [r3, #26]
 801447a:	f043 0302 	orr.w	r3, r3, #2
 801447e:	b29a      	uxth	r2, r3
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014484:	e7ff      	b.n	8014486 <tcp_receive+0xf0a>
 8014486:	bf00      	nop
 8014488:	3750      	adds	r7, #80	; 0x50
 801448a:	46bd      	mov	sp, r7
 801448c:	bdb0      	pop	{r4, r5, r7, pc}
 801448e:	bf00      	nop
 8014490:	20000838 	.word	0x20000838
 8014494:	20000818 	.word	0x20000818
 8014498:	20000842 	.word	0x20000842
 801449c:	0801db38 	.word	0x0801db38
 80144a0:	0801dee0 	.word	0x0801dee0
 80144a4:	0801db84 	.word	0x0801db84

080144a8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80144a8:	b480      	push	{r7}
 80144aa:	b083      	sub	sp, #12
 80144ac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80144ae:	4b15      	ldr	r3, [pc, #84]	; (8014504 <tcp_get_next_optbyte+0x5c>)
 80144b0:	881b      	ldrh	r3, [r3, #0]
 80144b2:	1c5a      	adds	r2, r3, #1
 80144b4:	b291      	uxth	r1, r2
 80144b6:	4a13      	ldr	r2, [pc, #76]	; (8014504 <tcp_get_next_optbyte+0x5c>)
 80144b8:	8011      	strh	r1, [r2, #0]
 80144ba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80144bc:	4b12      	ldr	r3, [pc, #72]	; (8014508 <tcp_get_next_optbyte+0x60>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d004      	beq.n	80144ce <tcp_get_next_optbyte+0x26>
 80144c4:	4b11      	ldr	r3, [pc, #68]	; (801450c <tcp_get_next_optbyte+0x64>)
 80144c6:	881b      	ldrh	r3, [r3, #0]
 80144c8:	88fa      	ldrh	r2, [r7, #6]
 80144ca:	429a      	cmp	r2, r3
 80144cc:	d208      	bcs.n	80144e0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80144ce:	4b10      	ldr	r3, [pc, #64]	; (8014510 <tcp_get_next_optbyte+0x68>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	3314      	adds	r3, #20
 80144d4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80144d6:	88fb      	ldrh	r3, [r7, #6]
 80144d8:	683a      	ldr	r2, [r7, #0]
 80144da:	4413      	add	r3, r2
 80144dc:	781b      	ldrb	r3, [r3, #0]
 80144de:	e00b      	b.n	80144f8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80144e0:	88fb      	ldrh	r3, [r7, #6]
 80144e2:	b2da      	uxtb	r2, r3
 80144e4:	4b09      	ldr	r3, [pc, #36]	; (801450c <tcp_get_next_optbyte+0x64>)
 80144e6:	881b      	ldrh	r3, [r3, #0]
 80144e8:	b2db      	uxtb	r3, r3
 80144ea:	1ad3      	subs	r3, r2, r3
 80144ec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80144ee:	4b06      	ldr	r3, [pc, #24]	; (8014508 <tcp_get_next_optbyte+0x60>)
 80144f0:	681a      	ldr	r2, [r3, #0]
 80144f2:	797b      	ldrb	r3, [r7, #5]
 80144f4:	4413      	add	r3, r2
 80144f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	370c      	adds	r7, #12
 80144fc:	46bd      	mov	sp, r7
 80144fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014502:	4770      	bx	lr
 8014504:	20000834 	.word	0x20000834
 8014508:	20000830 	.word	0x20000830
 801450c:	2000082e 	.word	0x2000082e
 8014510:	20000828 	.word	0x20000828

08014514 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b084      	sub	sp, #16
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d106      	bne.n	8014530 <tcp_parseopt+0x1c>
 8014522:	4b32      	ldr	r3, [pc, #200]	; (80145ec <tcp_parseopt+0xd8>)
 8014524:	f240 727d 	movw	r2, #1917	; 0x77d
 8014528:	4931      	ldr	r1, [pc, #196]	; (80145f0 <tcp_parseopt+0xdc>)
 801452a:	4832      	ldr	r0, [pc, #200]	; (80145f4 <tcp_parseopt+0xe0>)
 801452c:	f005 fe04 	bl	801a138 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014530:	4b31      	ldr	r3, [pc, #196]	; (80145f8 <tcp_parseopt+0xe4>)
 8014532:	881b      	ldrh	r3, [r3, #0]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d055      	beq.n	80145e4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014538:	4b30      	ldr	r3, [pc, #192]	; (80145fc <tcp_parseopt+0xe8>)
 801453a:	2200      	movs	r2, #0
 801453c:	801a      	strh	r2, [r3, #0]
 801453e:	e045      	b.n	80145cc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8014540:	f7ff ffb2 	bl	80144a8 <tcp_get_next_optbyte>
 8014544:	4603      	mov	r3, r0
 8014546:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014548:	7bfb      	ldrb	r3, [r7, #15]
 801454a:	2b02      	cmp	r3, #2
 801454c:	d006      	beq.n	801455c <tcp_parseopt+0x48>
 801454e:	2b02      	cmp	r3, #2
 8014550:	dc2b      	bgt.n	80145aa <tcp_parseopt+0x96>
 8014552:	2b00      	cmp	r3, #0
 8014554:	d041      	beq.n	80145da <tcp_parseopt+0xc6>
 8014556:	2b01      	cmp	r3, #1
 8014558:	d127      	bne.n	80145aa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801455a:	e037      	b.n	80145cc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801455c:	f7ff ffa4 	bl	80144a8 <tcp_get_next_optbyte>
 8014560:	4603      	mov	r3, r0
 8014562:	2b04      	cmp	r3, #4
 8014564:	d13b      	bne.n	80145de <tcp_parseopt+0xca>
 8014566:	4b25      	ldr	r3, [pc, #148]	; (80145fc <tcp_parseopt+0xe8>)
 8014568:	881b      	ldrh	r3, [r3, #0]
 801456a:	3301      	adds	r3, #1
 801456c:	4a22      	ldr	r2, [pc, #136]	; (80145f8 <tcp_parseopt+0xe4>)
 801456e:	8812      	ldrh	r2, [r2, #0]
 8014570:	4293      	cmp	r3, r2
 8014572:	da34      	bge.n	80145de <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014574:	f7ff ff98 	bl	80144a8 <tcp_get_next_optbyte>
 8014578:	4603      	mov	r3, r0
 801457a:	b29b      	uxth	r3, r3
 801457c:	021b      	lsls	r3, r3, #8
 801457e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014580:	f7ff ff92 	bl	80144a8 <tcp_get_next_optbyte>
 8014584:	4603      	mov	r3, r0
 8014586:	b29a      	uxth	r2, r3
 8014588:	89bb      	ldrh	r3, [r7, #12]
 801458a:	4313      	orrs	r3, r2
 801458c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801458e:	89bb      	ldrh	r3, [r7, #12]
 8014590:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8014594:	d804      	bhi.n	80145a0 <tcp_parseopt+0x8c>
 8014596:	89bb      	ldrh	r3, [r7, #12]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d001      	beq.n	80145a0 <tcp_parseopt+0x8c>
 801459c:	89ba      	ldrh	r2, [r7, #12]
 801459e:	e001      	b.n	80145a4 <tcp_parseopt+0x90>
 80145a0:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80145a8:	e010      	b.n	80145cc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80145aa:	f7ff ff7d 	bl	80144a8 <tcp_get_next_optbyte>
 80145ae:	4603      	mov	r3, r0
 80145b0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80145b2:	7afb      	ldrb	r3, [r7, #11]
 80145b4:	2b01      	cmp	r3, #1
 80145b6:	d914      	bls.n	80145e2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80145b8:	7afb      	ldrb	r3, [r7, #11]
 80145ba:	b29a      	uxth	r2, r3
 80145bc:	4b0f      	ldr	r3, [pc, #60]	; (80145fc <tcp_parseopt+0xe8>)
 80145be:	881b      	ldrh	r3, [r3, #0]
 80145c0:	4413      	add	r3, r2
 80145c2:	b29b      	uxth	r3, r3
 80145c4:	3b02      	subs	r3, #2
 80145c6:	b29a      	uxth	r2, r3
 80145c8:	4b0c      	ldr	r3, [pc, #48]	; (80145fc <tcp_parseopt+0xe8>)
 80145ca:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80145cc:	4b0b      	ldr	r3, [pc, #44]	; (80145fc <tcp_parseopt+0xe8>)
 80145ce:	881a      	ldrh	r2, [r3, #0]
 80145d0:	4b09      	ldr	r3, [pc, #36]	; (80145f8 <tcp_parseopt+0xe4>)
 80145d2:	881b      	ldrh	r3, [r3, #0]
 80145d4:	429a      	cmp	r2, r3
 80145d6:	d3b3      	bcc.n	8014540 <tcp_parseopt+0x2c>
 80145d8:	e004      	b.n	80145e4 <tcp_parseopt+0xd0>
          return;
 80145da:	bf00      	nop
 80145dc:	e002      	b.n	80145e4 <tcp_parseopt+0xd0>
            return;
 80145de:	bf00      	nop
 80145e0:	e000      	b.n	80145e4 <tcp_parseopt+0xd0>
            return;
 80145e2:	bf00      	nop
      }
    }
  }
}
 80145e4:	3710      	adds	r7, #16
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}
 80145ea:	bf00      	nop
 80145ec:	0801db38 	.word	0x0801db38
 80145f0:	0801df9c 	.word	0x0801df9c
 80145f4:	0801db84 	.word	0x0801db84
 80145f8:	2000082c 	.word	0x2000082c
 80145fc:	20000834 	.word	0x20000834

08014600 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014600:	b480      	push	{r7}
 8014602:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014604:	4b05      	ldr	r3, [pc, #20]	; (801461c <tcp_trigger_input_pcb_close+0x1c>)
 8014606:	781b      	ldrb	r3, [r3, #0]
 8014608:	f043 0310 	orr.w	r3, r3, #16
 801460c:	b2da      	uxtb	r2, r3
 801460e:	4b03      	ldr	r3, [pc, #12]	; (801461c <tcp_trigger_input_pcb_close+0x1c>)
 8014610:	701a      	strb	r2, [r3, #0]
}
 8014612:	bf00      	nop
 8014614:	46bd      	mov	sp, r7
 8014616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461a:	4770      	bx	lr
 801461c:	20000845 	.word	0x20000845

08014620 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b084      	sub	sp, #16
 8014624:	af00      	add	r7, sp, #0
 8014626:	60f8      	str	r0, [r7, #12]
 8014628:	60b9      	str	r1, [r7, #8]
 801462a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d00a      	beq.n	8014648 <tcp_route+0x28>
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	7a1b      	ldrb	r3, [r3, #8]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d006      	beq.n	8014648 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	7a1b      	ldrb	r3, [r3, #8]
 801463e:	4618      	mov	r0, r3
 8014640:	f7fb f8b8 	bl	800f7b4 <netif_get_by_index>
 8014644:	4603      	mov	r3, r0
 8014646:	e003      	b.n	8014650 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f003 fad9 	bl	8017c00 <ip4_route>
 801464e:	4603      	mov	r3, r0
  }
}
 8014650:	4618      	mov	r0, r3
 8014652:	3710      	adds	r7, #16
 8014654:	46bd      	mov	sp, r7
 8014656:	bd80      	pop	{r7, pc}

08014658 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014658:	b590      	push	{r4, r7, lr}
 801465a:	b087      	sub	sp, #28
 801465c:	af00      	add	r7, sp, #0
 801465e:	60f8      	str	r0, [r7, #12]
 8014660:	60b9      	str	r1, [r7, #8]
 8014662:	603b      	str	r3, [r7, #0]
 8014664:	4613      	mov	r3, r2
 8014666:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d105      	bne.n	801467a <tcp_create_segment+0x22>
 801466e:	4b44      	ldr	r3, [pc, #272]	; (8014780 <tcp_create_segment+0x128>)
 8014670:	22a3      	movs	r2, #163	; 0xa3
 8014672:	4944      	ldr	r1, [pc, #272]	; (8014784 <tcp_create_segment+0x12c>)
 8014674:	4844      	ldr	r0, [pc, #272]	; (8014788 <tcp_create_segment+0x130>)
 8014676:	f005 fd5f 	bl	801a138 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d105      	bne.n	801468c <tcp_create_segment+0x34>
 8014680:	4b3f      	ldr	r3, [pc, #252]	; (8014780 <tcp_create_segment+0x128>)
 8014682:	22a4      	movs	r2, #164	; 0xa4
 8014684:	4941      	ldr	r1, [pc, #260]	; (801478c <tcp_create_segment+0x134>)
 8014686:	4840      	ldr	r0, [pc, #256]	; (8014788 <tcp_create_segment+0x130>)
 8014688:	f005 fd56 	bl	801a138 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801468c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014690:	009b      	lsls	r3, r3, #2
 8014692:	b2db      	uxtb	r3, r3
 8014694:	f003 0304 	and.w	r3, r3, #4
 8014698:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801469a:	2003      	movs	r0, #3
 801469c:	f7fa fd8c 	bl	800f1b8 <memp_malloc>
 80146a0:	6138      	str	r0, [r7, #16]
 80146a2:	693b      	ldr	r3, [r7, #16]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d104      	bne.n	80146b2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80146a8:	68b8      	ldr	r0, [r7, #8]
 80146aa:	f7fb fbe3 	bl	800fe74 <pbuf_free>
    return NULL;
 80146ae:	2300      	movs	r3, #0
 80146b0:	e061      	b.n	8014776 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80146b2:	693b      	ldr	r3, [r7, #16]
 80146b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80146b8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	2200      	movs	r2, #0
 80146be:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80146c0:	693b      	ldr	r3, [r7, #16]
 80146c2:	68ba      	ldr	r2, [r7, #8]
 80146c4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	891a      	ldrh	r2, [r3, #8]
 80146ca:	7dfb      	ldrb	r3, [r7, #23]
 80146cc:	b29b      	uxth	r3, r3
 80146ce:	429a      	cmp	r2, r3
 80146d0:	d205      	bcs.n	80146de <tcp_create_segment+0x86>
 80146d2:	4b2b      	ldr	r3, [pc, #172]	; (8014780 <tcp_create_segment+0x128>)
 80146d4:	22b0      	movs	r2, #176	; 0xb0
 80146d6:	492e      	ldr	r1, [pc, #184]	; (8014790 <tcp_create_segment+0x138>)
 80146d8:	482b      	ldr	r0, [pc, #172]	; (8014788 <tcp_create_segment+0x130>)
 80146da:	f005 fd2d 	bl	801a138 <iprintf>
  seg->len = p->tot_len - optlen;
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	891a      	ldrh	r2, [r3, #8]
 80146e2:	7dfb      	ldrb	r3, [r7, #23]
 80146e4:	b29b      	uxth	r3, r3
 80146e6:	1ad3      	subs	r3, r2, r3
 80146e8:	b29a      	uxth	r2, r3
 80146ea:	693b      	ldr	r3, [r7, #16]
 80146ec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80146ee:	2114      	movs	r1, #20
 80146f0:	68b8      	ldr	r0, [r7, #8]
 80146f2:	f7fb fb29 	bl	800fd48 <pbuf_add_header>
 80146f6:	4603      	mov	r3, r0
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d004      	beq.n	8014706 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80146fc:	6938      	ldr	r0, [r7, #16]
 80146fe:	f7fd f820 	bl	8011742 <tcp_seg_free>
    return NULL;
 8014702:	2300      	movs	r3, #0
 8014704:	e037      	b.n	8014776 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014706:	693b      	ldr	r3, [r7, #16]
 8014708:	685b      	ldr	r3, [r3, #4]
 801470a:	685a      	ldr	r2, [r3, #4]
 801470c:	693b      	ldr	r3, [r7, #16]
 801470e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	8ada      	ldrh	r2, [r3, #22]
 8014714:	693b      	ldr	r3, [r7, #16]
 8014716:	68dc      	ldr	r4, [r3, #12]
 8014718:	4610      	mov	r0, r2
 801471a:	f7fa f8e8 	bl	800e8ee <lwip_htons>
 801471e:	4603      	mov	r3, r0
 8014720:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	8b1a      	ldrh	r2, [r3, #24]
 8014726:	693b      	ldr	r3, [r7, #16]
 8014728:	68dc      	ldr	r4, [r3, #12]
 801472a:	4610      	mov	r0, r2
 801472c:	f7fa f8df 	bl	800e8ee <lwip_htons>
 8014730:	4603      	mov	r3, r0
 8014732:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014734:	693b      	ldr	r3, [r7, #16]
 8014736:	68dc      	ldr	r4, [r3, #12]
 8014738:	6838      	ldr	r0, [r7, #0]
 801473a:	f7fa f8ed 	bl	800e918 <lwip_htonl>
 801473e:	4603      	mov	r3, r0
 8014740:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014742:	7dfb      	ldrb	r3, [r7, #23]
 8014744:	089b      	lsrs	r3, r3, #2
 8014746:	b2db      	uxtb	r3, r3
 8014748:	b29b      	uxth	r3, r3
 801474a:	3305      	adds	r3, #5
 801474c:	b29b      	uxth	r3, r3
 801474e:	031b      	lsls	r3, r3, #12
 8014750:	b29a      	uxth	r2, r3
 8014752:	79fb      	ldrb	r3, [r7, #7]
 8014754:	b29b      	uxth	r3, r3
 8014756:	4313      	orrs	r3, r2
 8014758:	b29a      	uxth	r2, r3
 801475a:	693b      	ldr	r3, [r7, #16]
 801475c:	68dc      	ldr	r4, [r3, #12]
 801475e:	4610      	mov	r0, r2
 8014760:	f7fa f8c5 	bl	800e8ee <lwip_htons>
 8014764:	4603      	mov	r3, r0
 8014766:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014768:	693b      	ldr	r3, [r7, #16]
 801476a:	68db      	ldr	r3, [r3, #12]
 801476c:	2200      	movs	r2, #0
 801476e:	749a      	strb	r2, [r3, #18]
 8014770:	2200      	movs	r2, #0
 8014772:	74da      	strb	r2, [r3, #19]
  return seg;
 8014774:	693b      	ldr	r3, [r7, #16]
}
 8014776:	4618      	mov	r0, r3
 8014778:	371c      	adds	r7, #28
 801477a:	46bd      	mov	sp, r7
 801477c:	bd90      	pop	{r4, r7, pc}
 801477e:	bf00      	nop
 8014780:	0801dfb8 	.word	0x0801dfb8
 8014784:	0801dfec 	.word	0x0801dfec
 8014788:	0801e00c 	.word	0x0801e00c
 801478c:	0801e034 	.word	0x0801e034
 8014790:	0801e058 	.word	0x0801e058

08014794 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b086      	sub	sp, #24
 8014798:	af00      	add	r7, sp, #0
 801479a:	607b      	str	r3, [r7, #4]
 801479c:	4603      	mov	r3, r0
 801479e:	73fb      	strb	r3, [r7, #15]
 80147a0:	460b      	mov	r3, r1
 80147a2:	81bb      	strh	r3, [r7, #12]
 80147a4:	4613      	mov	r3, r2
 80147a6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80147a8:	89bb      	ldrh	r3, [r7, #12]
 80147aa:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d105      	bne.n	80147be <tcp_pbuf_prealloc+0x2a>
 80147b2:	4b30      	ldr	r3, [pc, #192]	; (8014874 <tcp_pbuf_prealloc+0xe0>)
 80147b4:	22e8      	movs	r2, #232	; 0xe8
 80147b6:	4930      	ldr	r1, [pc, #192]	; (8014878 <tcp_pbuf_prealloc+0xe4>)
 80147b8:	4830      	ldr	r0, [pc, #192]	; (801487c <tcp_pbuf_prealloc+0xe8>)
 80147ba:	f005 fcbd 	bl	801a138 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80147be:	6a3b      	ldr	r3, [r7, #32]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d105      	bne.n	80147d0 <tcp_pbuf_prealloc+0x3c>
 80147c4:	4b2b      	ldr	r3, [pc, #172]	; (8014874 <tcp_pbuf_prealloc+0xe0>)
 80147c6:	22e9      	movs	r2, #233	; 0xe9
 80147c8:	492d      	ldr	r1, [pc, #180]	; (8014880 <tcp_pbuf_prealloc+0xec>)
 80147ca:	482c      	ldr	r0, [pc, #176]	; (801487c <tcp_pbuf_prealloc+0xe8>)
 80147cc:	f005 fcb4 	bl	801a138 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80147d0:	89ba      	ldrh	r2, [r7, #12]
 80147d2:	897b      	ldrh	r3, [r7, #10]
 80147d4:	429a      	cmp	r2, r3
 80147d6:	d221      	bcs.n	801481c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80147d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80147dc:	f003 0302 	and.w	r3, r3, #2
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d111      	bne.n	8014808 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80147e4:	6a3b      	ldr	r3, [r7, #32]
 80147e6:	8b5b      	ldrh	r3, [r3, #26]
 80147e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d115      	bne.n	801481c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80147f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d007      	beq.n	8014808 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80147f8:	6a3b      	ldr	r3, [r7, #32]
 80147fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d103      	bne.n	8014808 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8014800:	6a3b      	ldr	r3, [r7, #32]
 8014802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8014804:	2b00      	cmp	r3, #0
 8014806:	d009      	beq.n	801481c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014808:	89bb      	ldrh	r3, [r7, #12]
 801480a:	f203 537b 	addw	r3, r3, #1403	; 0x57b
 801480e:	f023 0203 	bic.w	r2, r3, #3
 8014812:	897b      	ldrh	r3, [r7, #10]
 8014814:	4293      	cmp	r3, r2
 8014816:	bf28      	it	cs
 8014818:	4613      	movcs	r3, r2
 801481a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801481c:	8af9      	ldrh	r1, [r7, #22]
 801481e:	7bfb      	ldrb	r3, [r7, #15]
 8014820:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014824:	4618      	mov	r0, r3
 8014826:	f7fb f841 	bl	800f8ac <pbuf_alloc>
 801482a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801482c:	693b      	ldr	r3, [r7, #16]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d101      	bne.n	8014836 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8014832:	2300      	movs	r3, #0
 8014834:	e019      	b.n	801486a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8014836:	693b      	ldr	r3, [r7, #16]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d006      	beq.n	801484c <tcp_pbuf_prealloc+0xb8>
 801483e:	4b0d      	ldr	r3, [pc, #52]	; (8014874 <tcp_pbuf_prealloc+0xe0>)
 8014840:	f240 120b 	movw	r2, #267	; 0x10b
 8014844:	490f      	ldr	r1, [pc, #60]	; (8014884 <tcp_pbuf_prealloc+0xf0>)
 8014846:	480d      	ldr	r0, [pc, #52]	; (801487c <tcp_pbuf_prealloc+0xe8>)
 8014848:	f005 fc76 	bl	801a138 <iprintf>
  *oversize = p->len - length;
 801484c:	693b      	ldr	r3, [r7, #16]
 801484e:	895a      	ldrh	r2, [r3, #10]
 8014850:	89bb      	ldrh	r3, [r7, #12]
 8014852:	1ad3      	subs	r3, r2, r3
 8014854:	b29a      	uxth	r2, r3
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	89ba      	ldrh	r2, [r7, #12]
 801485e:	811a      	strh	r2, [r3, #8]
 8014860:	693b      	ldr	r3, [r7, #16]
 8014862:	891a      	ldrh	r2, [r3, #8]
 8014864:	693b      	ldr	r3, [r7, #16]
 8014866:	815a      	strh	r2, [r3, #10]
  return p;
 8014868:	693b      	ldr	r3, [r7, #16]
}
 801486a:	4618      	mov	r0, r3
 801486c:	3718      	adds	r7, #24
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}
 8014872:	bf00      	nop
 8014874:	0801dfb8 	.word	0x0801dfb8
 8014878:	0801e070 	.word	0x0801e070
 801487c:	0801e00c 	.word	0x0801e00c
 8014880:	0801e094 	.word	0x0801e094
 8014884:	0801e0b4 	.word	0x0801e0b4

08014888 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b082      	sub	sp, #8
 801488c:	af00      	add	r7, sp, #0
 801488e:	6078      	str	r0, [r7, #4]
 8014890:	460b      	mov	r3, r1
 8014892:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d106      	bne.n	80148a8 <tcp_write_checks+0x20>
 801489a:	4b34      	ldr	r3, [pc, #208]	; (801496c <tcp_write_checks+0xe4>)
 801489c:	f240 1233 	movw	r2, #307	; 0x133
 80148a0:	4933      	ldr	r1, [pc, #204]	; (8014970 <tcp_write_checks+0xe8>)
 80148a2:	4834      	ldr	r0, [pc, #208]	; (8014974 <tcp_write_checks+0xec>)
 80148a4:	f005 fc48 	bl	801a138 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	7d1b      	ldrb	r3, [r3, #20]
 80148ac:	2b04      	cmp	r3, #4
 80148ae:	d00e      	beq.n	80148ce <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80148b4:	2b07      	cmp	r3, #7
 80148b6:	d00a      	beq.n	80148ce <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80148bc:	2b02      	cmp	r3, #2
 80148be:	d006      	beq.n	80148ce <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80148c4:	2b03      	cmp	r3, #3
 80148c6:	d002      	beq.n	80148ce <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80148c8:	f06f 030a 	mvn.w	r3, #10
 80148cc:	e049      	b.n	8014962 <tcp_write_checks+0xda>
  } else if (len == 0) {
 80148ce:	887b      	ldrh	r3, [r7, #2]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d101      	bne.n	80148d8 <tcp_write_checks+0x50>
    return ERR_OK;
 80148d4:	2300      	movs	r3, #0
 80148d6:	e044      	b.n	8014962 <tcp_write_checks+0xda>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80148de:	887a      	ldrh	r2, [r7, #2]
 80148e0:	429a      	cmp	r2, r3
 80148e2:	d909      	bls.n	80148f8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	8b5b      	ldrh	r3, [r3, #26]
 80148e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80148ec:	b29a      	uxth	r2, r3
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80148f2:	f04f 33ff 	mov.w	r3, #4294967295
 80148f6:	e034      	b.n	8014962 <tcp_write_checks+0xda>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80148fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014902:	d309      	bcc.n	8014918 <tcp_write_checks+0x90>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	8b5b      	ldrh	r3, [r3, #26]
 8014908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801490c:	b29a      	uxth	r2, r3
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8014912:	f04f 33ff 	mov.w	r3, #4294967295
 8014916:	e024      	b.n	8014962 <tcp_write_checks+0xda>
  }
  if (pcb->snd_queuelen != 0) {
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801491e:	2b00      	cmp	r3, #0
 8014920:	d00f      	beq.n	8014942 <tcp_write_checks+0xba>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014926:	2b00      	cmp	r3, #0
 8014928:	d11a      	bne.n	8014960 <tcp_write_checks+0xd8>
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801492e:	2b00      	cmp	r3, #0
 8014930:	d116      	bne.n	8014960 <tcp_write_checks+0xd8>
 8014932:	4b0e      	ldr	r3, [pc, #56]	; (801496c <tcp_write_checks+0xe4>)
 8014934:	f240 1255 	movw	r2, #341	; 0x155
 8014938:	490f      	ldr	r1, [pc, #60]	; (8014978 <tcp_write_checks+0xf0>)
 801493a:	480e      	ldr	r0, [pc, #56]	; (8014974 <tcp_write_checks+0xec>)
 801493c:	f005 fbfc 	bl	801a138 <iprintf>
 8014940:	e00e      	b.n	8014960 <tcp_write_checks+0xd8>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014946:	2b00      	cmp	r3, #0
 8014948:	d103      	bne.n	8014952 <tcp_write_checks+0xca>
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801494e:	2b00      	cmp	r3, #0
 8014950:	d006      	beq.n	8014960 <tcp_write_checks+0xd8>
 8014952:	4b06      	ldr	r3, [pc, #24]	; (801496c <tcp_write_checks+0xe4>)
 8014954:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8014958:	4908      	ldr	r1, [pc, #32]	; (801497c <tcp_write_checks+0xf4>)
 801495a:	4806      	ldr	r0, [pc, #24]	; (8014974 <tcp_write_checks+0xec>)
 801495c:	f005 fbec 	bl	801a138 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8014960:	2300      	movs	r3, #0
}
 8014962:	4618      	mov	r0, r3
 8014964:	3708      	adds	r7, #8
 8014966:	46bd      	mov	sp, r7
 8014968:	bd80      	pop	{r7, pc}
 801496a:	bf00      	nop
 801496c:	0801dfb8 	.word	0x0801dfb8
 8014970:	0801e0c8 	.word	0x0801e0c8
 8014974:	0801e00c 	.word	0x0801e00c
 8014978:	0801e0e8 	.word	0x0801e0e8
 801497c:	0801e124 	.word	0x0801e124

08014980 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8014980:	b590      	push	{r4, r7, lr}
 8014982:	b09b      	sub	sp, #108	; 0x6c
 8014984:	af04      	add	r7, sp, #16
 8014986:	60f8      	str	r0, [r7, #12]
 8014988:	60b9      	str	r1, [r7, #8]
 801498a:	4611      	mov	r1, r2
 801498c:	461a      	mov	r2, r3
 801498e:	460b      	mov	r3, r1
 8014990:	80fb      	strh	r3, [r7, #6]
 8014992:	4613      	mov	r3, r2
 8014994:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8014996:	2300      	movs	r3, #0
 8014998:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801499a:	2300      	movs	r3, #0
 801499c:	653b      	str	r3, [r7, #80]	; 0x50
 801499e:	2300      	movs	r3, #0
 80149a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80149a2:	2300      	movs	r3, #0
 80149a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80149a6:	2300      	movs	r3, #0
 80149a8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80149aa:	2300      	movs	r3, #0
 80149ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80149b0:	2300      	movs	r3, #0
 80149b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80149b6:	2300      	movs	r3, #0
 80149b8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80149ba:	2300      	movs	r3, #0
 80149bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80149be:	2300      	movs	r3, #0
 80149c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d109      	bne.n	80149dc <tcp_write+0x5c>
 80149c8:	4ba4      	ldr	r3, [pc, #656]	; (8014c5c <tcp_write+0x2dc>)
 80149ca:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80149ce:	49a4      	ldr	r1, [pc, #656]	; (8014c60 <tcp_write+0x2e0>)
 80149d0:	48a4      	ldr	r0, [pc, #656]	; (8014c64 <tcp_write+0x2e4>)
 80149d2:	f005 fbb1 	bl	801a138 <iprintf>
 80149d6:	f06f 030f 	mvn.w	r3, #15
 80149da:	e32c      	b.n	8015036 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80149e2:	085b      	lsrs	r3, r3, #1
 80149e4:	b29a      	uxth	r2, r3
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80149ea:	4293      	cmp	r3, r2
 80149ec:	bf28      	it	cs
 80149ee:	4613      	movcs	r3, r2
 80149f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80149f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d102      	bne.n	80149fe <tcp_write+0x7e>
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80149fc:	e000      	b.n	8014a00 <tcp_write+0x80>
 80149fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a00:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d109      	bne.n	8014a1c <tcp_write+0x9c>
 8014a08:	4b94      	ldr	r3, [pc, #592]	; (8014c5c <tcp_write+0x2dc>)
 8014a0a:	f240 12ad 	movw	r2, #429	; 0x1ad
 8014a0e:	4996      	ldr	r1, [pc, #600]	; (8014c68 <tcp_write+0x2e8>)
 8014a10:	4894      	ldr	r0, [pc, #592]	; (8014c64 <tcp_write+0x2e4>)
 8014a12:	f005 fb91 	bl	801a138 <iprintf>
 8014a16:	f06f 030f 	mvn.w	r3, #15
 8014a1a:	e30c      	b.n	8015036 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8014a1c:	88fb      	ldrh	r3, [r7, #6]
 8014a1e:	4619      	mov	r1, r3
 8014a20:	68f8      	ldr	r0, [r7, #12]
 8014a22:	f7ff ff31 	bl	8014888 <tcp_write_checks>
 8014a26:	4603      	mov	r3, r0
 8014a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8014a2c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d002      	beq.n	8014a3a <tcp_write+0xba>
    return err;
 8014a34:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014a38:	e2fd      	b.n	8015036 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014a40:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014a44:	2300      	movs	r3, #0
 8014a46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	f000 80f6 	beq.w	8014c40 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a58:	653b      	str	r3, [r7, #80]	; 0x50
 8014a5a:	e002      	b.n	8014a62 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8014a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d1f8      	bne.n	8014a5c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8014a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a6c:	7a9b      	ldrb	r3, [r3, #10]
 8014a6e:	009b      	lsls	r3, r3, #2
 8014a70:	b29b      	uxth	r3, r3
 8014a72:	f003 0304 	and.w	r3, r3, #4
 8014a76:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8014a78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a7c:	891b      	ldrh	r3, [r3, #8]
 8014a7e:	4619      	mov	r1, r3
 8014a80:	8c3b      	ldrh	r3, [r7, #32]
 8014a82:	440b      	add	r3, r1
 8014a84:	429a      	cmp	r2, r3
 8014a86:	da06      	bge.n	8014a96 <tcp_write+0x116>
 8014a88:	4b74      	ldr	r3, [pc, #464]	; (8014c5c <tcp_write+0x2dc>)
 8014a8a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014a8e:	4977      	ldr	r1, [pc, #476]	; (8014c6c <tcp_write+0x2ec>)
 8014a90:	4874      	ldr	r0, [pc, #464]	; (8014c64 <tcp_write+0x2e4>)
 8014a92:	f005 fb51 	bl	801a138 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8014a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a98:	891a      	ldrh	r2, [r3, #8]
 8014a9a:	8c3b      	ldrh	r3, [r7, #32]
 8014a9c:	4413      	add	r3, r2
 8014a9e:	b29b      	uxth	r3, r3
 8014aa0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014aa2:	1ad3      	subs	r3, r2, r3
 8014aa4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014aac:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8014aae:	8a7b      	ldrh	r3, [r7, #18]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d026      	beq.n	8014b02 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8014ab4:	8a7b      	ldrh	r3, [r7, #18]
 8014ab6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014ab8:	429a      	cmp	r2, r3
 8014aba:	d206      	bcs.n	8014aca <tcp_write+0x14a>
 8014abc:	4b67      	ldr	r3, [pc, #412]	; (8014c5c <tcp_write+0x2dc>)
 8014abe:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8014ac2:	496b      	ldr	r1, [pc, #428]	; (8014c70 <tcp_write+0x2f0>)
 8014ac4:	4867      	ldr	r0, [pc, #412]	; (8014c64 <tcp_write+0x2e4>)
 8014ac6:	f005 fb37 	bl	801a138 <iprintf>
      seg = last_unsent;
 8014aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014acc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014ace:	8a7b      	ldrh	r3, [r7, #18]
 8014ad0:	88fa      	ldrh	r2, [r7, #6]
 8014ad2:	4293      	cmp	r3, r2
 8014ad4:	bf28      	it	cs
 8014ad6:	4613      	movcs	r3, r2
 8014ad8:	b29b      	uxth	r3, r3
 8014ada:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014adc:	4293      	cmp	r3, r2
 8014ade:	bf28      	it	cs
 8014ae0:	4613      	movcs	r3, r2
 8014ae2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8014ae4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014ae8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014aea:	4413      	add	r3, r2
 8014aec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8014af0:	8a7a      	ldrh	r2, [r7, #18]
 8014af2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014af4:	1ad3      	subs	r3, r2, r3
 8014af6:	b29b      	uxth	r3, r3
 8014af8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8014afa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014afc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014afe:	1ad3      	subs	r3, r2, r3
 8014b00:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8014b02:	8a7b      	ldrh	r3, [r7, #18]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d00b      	beq.n	8014b20 <tcp_write+0x1a0>
 8014b08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014b0c:	88fb      	ldrh	r3, [r7, #6]
 8014b0e:	429a      	cmp	r2, r3
 8014b10:	d006      	beq.n	8014b20 <tcp_write+0x1a0>
 8014b12:	4b52      	ldr	r3, [pc, #328]	; (8014c5c <tcp_write+0x2dc>)
 8014b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014b18:	4956      	ldr	r1, [pc, #344]	; (8014c74 <tcp_write+0x2f4>)
 8014b1a:	4852      	ldr	r0, [pc, #328]	; (8014c64 <tcp_write+0x2e4>)
 8014b1c:	f005 fb0c 	bl	801a138 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8014b20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014b24:	88fb      	ldrh	r3, [r7, #6]
 8014b26:	429a      	cmp	r2, r3
 8014b28:	f080 8168 	bcs.w	8014dfc <tcp_write+0x47c>
 8014b2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	f000 8164 	beq.w	8014dfc <tcp_write+0x47c>
 8014b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b36:	891b      	ldrh	r3, [r3, #8]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	f000 815f 	beq.w	8014dfc <tcp_write+0x47c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8014b3e:	88fa      	ldrh	r2, [r7, #6]
 8014b40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014b44:	1ad2      	subs	r2, r2, r3
 8014b46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b48:	4293      	cmp	r3, r2
 8014b4a:	bfa8      	it	ge
 8014b4c:	4613      	movge	r3, r2
 8014b4e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8014b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b52:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014b54:	797b      	ldrb	r3, [r7, #5]
 8014b56:	f003 0301 	and.w	r3, r3, #1
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d027      	beq.n	8014bae <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8014b5e:	f107 0012 	add.w	r0, r7, #18
 8014b62:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014b64:	8bf9      	ldrh	r1, [r7, #30]
 8014b66:	2301      	movs	r3, #1
 8014b68:	9302      	str	r3, [sp, #8]
 8014b6a:	797b      	ldrb	r3, [r7, #5]
 8014b6c:	9301      	str	r3, [sp, #4]
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	9300      	str	r3, [sp, #0]
 8014b72:	4603      	mov	r3, r0
 8014b74:	2000      	movs	r0, #0
 8014b76:	f7ff fe0d 	bl	8014794 <tcp_pbuf_prealloc>
 8014b7a:	6578      	str	r0, [r7, #84]	; 0x54
 8014b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	f000 8227 	beq.w	8014fd2 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8014b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b86:	6858      	ldr	r0, [r3, #4]
 8014b88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014b8c:	68ba      	ldr	r2, [r7, #8]
 8014b8e:	4413      	add	r3, r2
 8014b90:	8bfa      	ldrh	r2, [r7, #30]
 8014b92:	4619      	mov	r1, r3
 8014b94:	f004 fda6 	bl	80196e4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8014b98:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014b9a:	f7fb f9f3 	bl	800ff84 <pbuf_clen>
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	461a      	mov	r2, r3
 8014ba2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014ba6:	4413      	add	r3, r2
 8014ba8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8014bac:	e041      	b.n	8014c32 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8014bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bb0:	685b      	ldr	r3, [r3, #4]
 8014bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8014bb4:	e002      	b.n	8014bbc <tcp_write+0x23c>
 8014bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	637b      	str	r3, [r7, #52]	; 0x34
 8014bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d1f8      	bne.n	8014bb6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bc6:	7b1b      	ldrb	r3, [r3, #12]
 8014bc8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d115      	bne.n	8014bfc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bd2:	685b      	ldr	r3, [r3, #4]
 8014bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014bd6:	8952      	ldrh	r2, [r2, #10]
 8014bd8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014bda:	68ba      	ldr	r2, [r7, #8]
 8014bdc:	429a      	cmp	r2, r3
 8014bde:	d10d      	bne.n	8014bfc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014be0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d006      	beq.n	8014bf6 <tcp_write+0x276>
 8014be8:	4b1c      	ldr	r3, [pc, #112]	; (8014c5c <tcp_write+0x2dc>)
 8014bea:	f240 2231 	movw	r2, #561	; 0x231
 8014bee:	4922      	ldr	r1, [pc, #136]	; (8014c78 <tcp_write+0x2f8>)
 8014bf0:	481c      	ldr	r0, [pc, #112]	; (8014c64 <tcp_write+0x2e4>)
 8014bf2:	f005 faa1 	bl	801a138 <iprintf>
          extendlen = seglen;
 8014bf6:	8bfb      	ldrh	r3, [r7, #30]
 8014bf8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014bfa:	e01a      	b.n	8014c32 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014bfc:	8bfb      	ldrh	r3, [r7, #30]
 8014bfe:	2201      	movs	r2, #1
 8014c00:	4619      	mov	r1, r3
 8014c02:	2000      	movs	r0, #0
 8014c04:	f7fa fe52 	bl	800f8ac <pbuf_alloc>
 8014c08:	6578      	str	r0, [r7, #84]	; 0x54
 8014c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	f000 81e2 	beq.w	8014fd6 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8014c12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014c16:	68ba      	ldr	r2, [r7, #8]
 8014c18:	441a      	add	r2, r3
 8014c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c1c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8014c1e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014c20:	f7fb f9b0 	bl	800ff84 <pbuf_clen>
 8014c24:	4603      	mov	r3, r0
 8014c26:	461a      	mov	r2, r3
 8014c28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014c2c:	4413      	add	r3, r2
 8014c2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8014c32:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014c36:	8bfb      	ldrh	r3, [r7, #30]
 8014c38:	4413      	add	r3, r2
 8014c3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8014c3e:	e0dd      	b.n	8014dfc <tcp_write+0x47c>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	f000 80d8 	beq.w	8014dfc <tcp_write+0x47c>
 8014c4c:	4b03      	ldr	r3, [pc, #12]	; (8014c5c <tcp_write+0x2dc>)
 8014c4e:	f240 224a 	movw	r2, #586	; 0x24a
 8014c52:	490a      	ldr	r1, [pc, #40]	; (8014c7c <tcp_write+0x2fc>)
 8014c54:	4803      	ldr	r0, [pc, #12]	; (8014c64 <tcp_write+0x2e4>)
 8014c56:	f005 fa6f 	bl	801a138 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8014c5a:	e0cf      	b.n	8014dfc <tcp_write+0x47c>
 8014c5c:	0801dfb8 	.word	0x0801dfb8
 8014c60:	0801e158 	.word	0x0801e158
 8014c64:	0801e00c 	.word	0x0801e00c
 8014c68:	0801e170 	.word	0x0801e170
 8014c6c:	0801e1a4 	.word	0x0801e1a4
 8014c70:	0801e1bc 	.word	0x0801e1bc
 8014c74:	0801e1dc 	.word	0x0801e1dc
 8014c78:	0801e1fc 	.word	0x0801e1fc
 8014c7c:	0801e228 	.word	0x0801e228
    struct pbuf *p;
    u16_t left = len - pos;
 8014c80:	88fa      	ldrh	r2, [r7, #6]
 8014c82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014c86:	1ad3      	subs	r3, r2, r3
 8014c88:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8014c8a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014c8e:	b29b      	uxth	r3, r3
 8014c90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014c92:	1ad3      	subs	r3, r2, r3
 8014c94:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8014c96:	8b7a      	ldrh	r2, [r7, #26]
 8014c98:	8bbb      	ldrh	r3, [r7, #28]
 8014c9a:	4293      	cmp	r3, r2
 8014c9c:	bf28      	it	cs
 8014c9e:	4613      	movcs	r3, r2
 8014ca0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014ca2:	797b      	ldrb	r3, [r7, #5]
 8014ca4:	f003 0301 	and.w	r3, r3, #1
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d036      	beq.n	8014d1a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014cac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014cb0:	b29a      	uxth	r2, r3
 8014cb2:	8b3b      	ldrh	r3, [r7, #24]
 8014cb4:	4413      	add	r3, r2
 8014cb6:	b299      	uxth	r1, r3
 8014cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	bf0c      	ite	eq
 8014cbe:	2301      	moveq	r3, #1
 8014cc0:	2300      	movne	r3, #0
 8014cc2:	b2db      	uxtb	r3, r3
 8014cc4:	f107 0012 	add.w	r0, r7, #18
 8014cc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014cca:	9302      	str	r3, [sp, #8]
 8014ccc:	797b      	ldrb	r3, [r7, #5]
 8014cce:	9301      	str	r3, [sp, #4]
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	9300      	str	r3, [sp, #0]
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	2036      	movs	r0, #54	; 0x36
 8014cd8:	f7ff fd5c 	bl	8014794 <tcp_pbuf_prealloc>
 8014cdc:	6338      	str	r0, [r7, #48]	; 0x30
 8014cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	f000 817a 	beq.w	8014fda <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8014ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ce8:	895b      	ldrh	r3, [r3, #10]
 8014cea:	8b3a      	ldrh	r2, [r7, #24]
 8014cec:	429a      	cmp	r2, r3
 8014cee:	d906      	bls.n	8014cfe <tcp_write+0x37e>
 8014cf0:	4b8d      	ldr	r3, [pc, #564]	; (8014f28 <tcp_write+0x5a8>)
 8014cf2:	f240 2266 	movw	r2, #614	; 0x266
 8014cf6:	498d      	ldr	r1, [pc, #564]	; (8014f2c <tcp_write+0x5ac>)
 8014cf8:	488d      	ldr	r0, [pc, #564]	; (8014f30 <tcp_write+0x5b0>)
 8014cfa:	f005 fa1d 	bl	801a138 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8014cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d00:	685a      	ldr	r2, [r3, #4]
 8014d02:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014d06:	18d0      	adds	r0, r2, r3
 8014d08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014d0c:	68ba      	ldr	r2, [r7, #8]
 8014d0e:	4413      	add	r3, r2
 8014d10:	8b3a      	ldrh	r2, [r7, #24]
 8014d12:	4619      	mov	r1, r3
 8014d14:	f004 fce6 	bl	80196e4 <memcpy>
 8014d18:	e02f      	b.n	8014d7a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8014d1a:	8a7b      	ldrh	r3, [r7, #18]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d006      	beq.n	8014d2e <tcp_write+0x3ae>
 8014d20:	4b81      	ldr	r3, [pc, #516]	; (8014f28 <tcp_write+0x5a8>)
 8014d22:	f240 2271 	movw	r2, #625	; 0x271
 8014d26:	4983      	ldr	r1, [pc, #524]	; (8014f34 <tcp_write+0x5b4>)
 8014d28:	4881      	ldr	r0, [pc, #516]	; (8014f30 <tcp_write+0x5b0>)
 8014d2a:	f005 fa05 	bl	801a138 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8014d2e:	8b3b      	ldrh	r3, [r7, #24]
 8014d30:	2201      	movs	r2, #1
 8014d32:	4619      	mov	r1, r3
 8014d34:	2036      	movs	r0, #54	; 0x36
 8014d36:	f7fa fdb9 	bl	800f8ac <pbuf_alloc>
 8014d3a:	6178      	str	r0, [r7, #20]
 8014d3c:	697b      	ldr	r3, [r7, #20]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	f000 814d 	beq.w	8014fde <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8014d44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014d48:	68ba      	ldr	r2, [r7, #8]
 8014d4a:	441a      	add	r2, r3
 8014d4c:	697b      	ldr	r3, [r7, #20]
 8014d4e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014d50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014d54:	b29b      	uxth	r3, r3
 8014d56:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d5a:	4619      	mov	r1, r3
 8014d5c:	2036      	movs	r0, #54	; 0x36
 8014d5e:	f7fa fda5 	bl	800f8ac <pbuf_alloc>
 8014d62:	6338      	str	r0, [r7, #48]	; 0x30
 8014d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d103      	bne.n	8014d72 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8014d6a:	6978      	ldr	r0, [r7, #20]
 8014d6c:	f7fb f882 	bl	800fe74 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8014d70:	e138      	b.n	8014fe4 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8014d72:	6979      	ldr	r1, [r7, #20]
 8014d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d76:	f7fb f93f 	bl	800fff8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8014d7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d7c:	f7fb f902 	bl	800ff84 <pbuf_clen>
 8014d80:	4603      	mov	r3, r0
 8014d82:	461a      	mov	r2, r3
 8014d84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014d88:	4413      	add	r3, r2
 8014d8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8014d8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014d96:	d903      	bls.n	8014da0 <tcp_write+0x420>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8014d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d9a:	f7fb f86b 	bl	800fe74 <pbuf_free>
      goto memerr;
 8014d9e:	e121      	b.n	8014fe4 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014da4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014da8:	441a      	add	r2, r3
 8014daa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014dae:	9300      	str	r3, [sp, #0]
 8014db0:	4613      	mov	r3, r2
 8014db2:	2200      	movs	r2, #0
 8014db4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014db6:	68f8      	ldr	r0, [r7, #12]
 8014db8:	f7ff fc4e 	bl	8014658 <tcp_create_segment>
 8014dbc:	64f8      	str	r0, [r7, #76]	; 0x4c
 8014dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	f000 810e 	beq.w	8014fe2 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8014dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d102      	bne.n	8014dd2 <tcp_write+0x452>
      queue = seg;
 8014dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dce:	647b      	str	r3, [r7, #68]	; 0x44
 8014dd0:	e00c      	b.n	8014dec <tcp_write+0x46c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d106      	bne.n	8014de6 <tcp_write+0x466>
 8014dd8:	4b53      	ldr	r3, [pc, #332]	; (8014f28 <tcp_write+0x5a8>)
 8014dda:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014dde:	4956      	ldr	r1, [pc, #344]	; (8014f38 <tcp_write+0x5b8>)
 8014de0:	4853      	ldr	r0, [pc, #332]	; (8014f30 <tcp_write+0x5b0>)
 8014de2:	f005 f9a9 	bl	801a138 <iprintf>
      prev_seg->next = seg;
 8014de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014de8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014dea:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8014dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dee:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014df0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014df4:	8b3b      	ldrh	r3, [r7, #24]
 8014df6:	4413      	add	r3, r2
 8014df8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8014dfc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014e00:	88fb      	ldrh	r3, [r7, #6]
 8014e02:	429a      	cmp	r2, r3
 8014e04:	f4ff af3c 	bcc.w	8014c80 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8014e08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d02c      	beq.n	8014e68 <tcp_write+0x4e8>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8014e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e10:	685b      	ldr	r3, [r3, #4]
 8014e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014e14:	e01e      	b.n	8014e54 <tcp_write+0x4d4>
      p->tot_len += oversize_used;
 8014e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e18:	891a      	ldrh	r2, [r3, #8]
 8014e1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e1c:	4413      	add	r3, r2
 8014e1e:	b29a      	uxth	r2, r3
 8014e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e22:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8014e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d110      	bne.n	8014e4e <tcp_write+0x4ce>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8014e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e2e:	685b      	ldr	r3, [r3, #4]
 8014e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e32:	8952      	ldrh	r2, [r2, #10]
 8014e34:	4413      	add	r3, r2
 8014e36:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014e38:	68b9      	ldr	r1, [r7, #8]
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f004 fc52 	bl	80196e4 <memcpy>
        p->len += oversize_used;
 8014e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e42:	895a      	ldrh	r2, [r3, #10]
 8014e44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e46:	4413      	add	r3, r2
 8014e48:	b29a      	uxth	r2, r3
 8014e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e4c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8014e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d1dd      	bne.n	8014e16 <tcp_write+0x496>
      }
    }
    last_unsent->len += oversize_used;
 8014e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e5c:	891a      	ldrh	r2, [r3, #8]
 8014e5e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e60:	4413      	add	r3, r2
 8014e62:	b29a      	uxth	r2, r3
 8014e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e66:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8014e68:	8a7a      	ldrh	r2, [r7, #18]
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8014e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d018      	beq.n	8014ea8 <tcp_write+0x528>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8014e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d106      	bne.n	8014e8a <tcp_write+0x50a>
 8014e7c:	4b2a      	ldr	r3, [pc, #168]	; (8014f28 <tcp_write+0x5a8>)
 8014e7e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8014e82:	492e      	ldr	r1, [pc, #184]	; (8014f3c <tcp_write+0x5bc>)
 8014e84:	482a      	ldr	r0, [pc, #168]	; (8014f30 <tcp_write+0x5b0>)
 8014e86:	f005 f957 	bl	801a138 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8014e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e8c:	685b      	ldr	r3, [r3, #4]
 8014e8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7fb f8b1 	bl	800fff8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8014e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e98:	891a      	ldrh	r2, [r3, #8]
 8014e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e9c:	891b      	ldrh	r3, [r3, #8]
 8014e9e:	4413      	add	r3, r2
 8014ea0:	b29a      	uxth	r2, r3
 8014ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ea4:	811a      	strh	r2, [r3, #8]
 8014ea6:	e037      	b.n	8014f18 <tcp_write+0x598>
  } else if (extendlen > 0) {
 8014ea8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d034      	beq.n	8014f18 <tcp_write+0x598>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8014eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d003      	beq.n	8014ebc <tcp_write+0x53c>
 8014eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014eb6:	685b      	ldr	r3, [r3, #4]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d106      	bne.n	8014eca <tcp_write+0x54a>
 8014ebc:	4b1a      	ldr	r3, [pc, #104]	; (8014f28 <tcp_write+0x5a8>)
 8014ebe:	f240 22e6 	movw	r2, #742	; 0x2e6
 8014ec2:	491f      	ldr	r1, [pc, #124]	; (8014f40 <tcp_write+0x5c0>)
 8014ec4:	481a      	ldr	r0, [pc, #104]	; (8014f30 <tcp_write+0x5b0>)
 8014ec6:	f005 f937 	bl	801a138 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ecc:	685b      	ldr	r3, [r3, #4]
 8014ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8014ed0:	e009      	b.n	8014ee6 <tcp_write+0x566>
      p->tot_len += extendlen;
 8014ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ed4:	891a      	ldrh	r2, [r3, #8]
 8014ed6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014ed8:	4413      	add	r3, r2
 8014eda:	b29a      	uxth	r2, r3
 8014edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ede:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8014ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d1f1      	bne.n	8014ed2 <tcp_write+0x552>
    }
    p->tot_len += extendlen;
 8014eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ef0:	891a      	ldrh	r2, [r3, #8]
 8014ef2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014ef4:	4413      	add	r3, r2
 8014ef6:	b29a      	uxth	r2, r3
 8014ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014efa:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8014efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014efe:	895a      	ldrh	r2, [r3, #10]
 8014f00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f02:	4413      	add	r3, r2
 8014f04:	b29a      	uxth	r2, r3
 8014f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f08:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8014f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f0c:	891a      	ldrh	r2, [r3, #8]
 8014f0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f10:	4413      	add	r3, r2
 8014f12:	b29a      	uxth	r2, r3
 8014f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f16:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8014f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d112      	bne.n	8014f44 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014f22:	66da      	str	r2, [r3, #108]	; 0x6c
 8014f24:	e011      	b.n	8014f4a <tcp_write+0x5ca>
 8014f26:	bf00      	nop
 8014f28:	0801dfb8 	.word	0x0801dfb8
 8014f2c:	0801e258 	.word	0x0801e258
 8014f30:	0801e00c 	.word	0x0801e00c
 8014f34:	0801e298 	.word	0x0801e298
 8014f38:	0801e2a8 	.word	0x0801e2a8
 8014f3c:	0801e2bc 	.word	0x0801e2bc
 8014f40:	0801e2f4 	.word	0x0801e2f4
  } else {
    last_unsent->next = queue;
 8014f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014f48:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014f4e:	88fb      	ldrh	r3, [r7, #6]
 8014f50:	441a      	add	r2, r3
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014f5c:	88fb      	ldrh	r3, [r7, #6]
 8014f5e:	1ad3      	subs	r3, r2, r3
 8014f60:	b29a      	uxth	r2, r3
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014f6e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d00e      	beq.n	8014f9a <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d10a      	bne.n	8014f9a <tcp_write+0x61a>
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d106      	bne.n	8014f9a <tcp_write+0x61a>
 8014f8c:	4b2c      	ldr	r3, [pc, #176]	; (8015040 <tcp_write+0x6c0>)
 8014f8e:	f240 3212 	movw	r2, #786	; 0x312
 8014f92:	492c      	ldr	r1, [pc, #176]	; (8015044 <tcp_write+0x6c4>)
 8014f94:	482c      	ldr	r0, [pc, #176]	; (8015048 <tcp_write+0x6c8>)
 8014f96:	f005 f8cf 	bl	801a138 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8014f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d016      	beq.n	8014fce <tcp_write+0x64e>
 8014fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fa2:	68db      	ldr	r3, [r3, #12]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d012      	beq.n	8014fce <tcp_write+0x64e>
 8014fa8:	797b      	ldrb	r3, [r7, #5]
 8014faa:	f003 0302 	and.w	r3, r3, #2
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d10d      	bne.n	8014fce <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8014fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fb4:	68db      	ldr	r3, [r3, #12]
 8014fb6:	899b      	ldrh	r3, [r3, #12]
 8014fb8:	b29c      	uxth	r4, r3
 8014fba:	2008      	movs	r0, #8
 8014fbc:	f7f9 fc97 	bl	800e8ee <lwip_htons>
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	461a      	mov	r2, r3
 8014fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fc6:	68db      	ldr	r3, [r3, #12]
 8014fc8:	4322      	orrs	r2, r4
 8014fca:	b292      	uxth	r2, r2
 8014fcc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8014fce:	2300      	movs	r3, #0
 8014fd0:	e031      	b.n	8015036 <tcp_write+0x6b6>
          goto memerr;
 8014fd2:	bf00      	nop
 8014fd4:	e006      	b.n	8014fe4 <tcp_write+0x664>
            goto memerr;
 8014fd6:	bf00      	nop
 8014fd8:	e004      	b.n	8014fe4 <tcp_write+0x664>
        goto memerr;
 8014fda:	bf00      	nop
 8014fdc:	e002      	b.n	8014fe4 <tcp_write+0x664>
        goto memerr;
 8014fde:	bf00      	nop
 8014fe0:	e000      	b.n	8014fe4 <tcp_write+0x664>
      goto memerr;
 8014fe2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	8b5b      	ldrh	r3, [r3, #26]
 8014fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014fec:	b29a      	uxth	r2, r3
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d002      	beq.n	8014ffe <tcp_write+0x67e>
    pbuf_free(concat_p);
 8014ff8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014ffa:	f7fa ff3b 	bl	800fe74 <pbuf_free>
  }
  if (queue != NULL) {
 8014ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015000:	2b00      	cmp	r3, #0
 8015002:	d002      	beq.n	801500a <tcp_write+0x68a>
    tcp_segs_free(queue);
 8015004:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015006:	f7fc fb87 	bl	8011718 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015010:	2b00      	cmp	r3, #0
 8015012:	d00e      	beq.n	8015032 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015018:	2b00      	cmp	r3, #0
 801501a:	d10a      	bne.n	8015032 <tcp_write+0x6b2>
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015020:	2b00      	cmp	r3, #0
 8015022:	d106      	bne.n	8015032 <tcp_write+0x6b2>
 8015024:	4b06      	ldr	r3, [pc, #24]	; (8015040 <tcp_write+0x6c0>)
 8015026:	f240 3227 	movw	r2, #807	; 0x327
 801502a:	4906      	ldr	r1, [pc, #24]	; (8015044 <tcp_write+0x6c4>)
 801502c:	4806      	ldr	r0, [pc, #24]	; (8015048 <tcp_write+0x6c8>)
 801502e:	f005 f883 	bl	801a138 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8015032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015036:	4618      	mov	r0, r3
 8015038:	375c      	adds	r7, #92	; 0x5c
 801503a:	46bd      	mov	sp, r7
 801503c:	bd90      	pop	{r4, r7, pc}
 801503e:	bf00      	nop
 8015040:	0801dfb8 	.word	0x0801dfb8
 8015044:	0801e32c 	.word	0x0801e32c
 8015048:	0801e00c 	.word	0x0801e00c

0801504c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801504c:	b590      	push	{r4, r7, lr}
 801504e:	b08b      	sub	sp, #44	; 0x2c
 8015050:	af02      	add	r7, sp, #8
 8015052:	6078      	str	r0, [r7, #4]
 8015054:	460b      	mov	r3, r1
 8015056:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015058:	2300      	movs	r3, #0
 801505a:	61fb      	str	r3, [r7, #28]
 801505c:	2300      	movs	r3, #0
 801505e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015060:	2300      	movs	r3, #0
 8015062:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d106      	bne.n	8015078 <tcp_split_unsent_seg+0x2c>
 801506a:	4b95      	ldr	r3, [pc, #596]	; (80152c0 <tcp_split_unsent_seg+0x274>)
 801506c:	f240 324b 	movw	r2, #843	; 0x34b
 8015070:	4994      	ldr	r1, [pc, #592]	; (80152c4 <tcp_split_unsent_seg+0x278>)
 8015072:	4895      	ldr	r0, [pc, #596]	; (80152c8 <tcp_split_unsent_seg+0x27c>)
 8015074:	f005 f860 	bl	801a138 <iprintf>

  useg = pcb->unsent;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801507c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801507e:	697b      	ldr	r3, [r7, #20]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d102      	bne.n	801508a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8015084:	f04f 33ff 	mov.w	r3, #4294967295
 8015088:	e116      	b.n	80152b8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801508a:	887b      	ldrh	r3, [r7, #2]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d109      	bne.n	80150a4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015090:	4b8b      	ldr	r3, [pc, #556]	; (80152c0 <tcp_split_unsent_seg+0x274>)
 8015092:	f240 3253 	movw	r2, #851	; 0x353
 8015096:	498d      	ldr	r1, [pc, #564]	; (80152cc <tcp_split_unsent_seg+0x280>)
 8015098:	488b      	ldr	r0, [pc, #556]	; (80152c8 <tcp_split_unsent_seg+0x27c>)
 801509a:	f005 f84d 	bl	801a138 <iprintf>
    return ERR_VAL;
 801509e:	f06f 0305 	mvn.w	r3, #5
 80150a2:	e109      	b.n	80152b8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80150a4:	697b      	ldr	r3, [r7, #20]
 80150a6:	891b      	ldrh	r3, [r3, #8]
 80150a8:	887a      	ldrh	r2, [r7, #2]
 80150aa:	429a      	cmp	r2, r3
 80150ac:	d301      	bcc.n	80150b2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80150ae:	2300      	movs	r3, #0
 80150b0:	e102      	b.n	80152b8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80150b6:	887a      	ldrh	r2, [r7, #2]
 80150b8:	429a      	cmp	r2, r3
 80150ba:	d906      	bls.n	80150ca <tcp_split_unsent_seg+0x7e>
 80150bc:	4b80      	ldr	r3, [pc, #512]	; (80152c0 <tcp_split_unsent_seg+0x274>)
 80150be:	f240 325b 	movw	r2, #859	; 0x35b
 80150c2:	4983      	ldr	r1, [pc, #524]	; (80152d0 <tcp_split_unsent_seg+0x284>)
 80150c4:	4880      	ldr	r0, [pc, #512]	; (80152c8 <tcp_split_unsent_seg+0x27c>)
 80150c6:	f005 f837 	bl	801a138 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80150ca:	697b      	ldr	r3, [r7, #20]
 80150cc:	891b      	ldrh	r3, [r3, #8]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d106      	bne.n	80150e0 <tcp_split_unsent_seg+0x94>
 80150d2:	4b7b      	ldr	r3, [pc, #492]	; (80152c0 <tcp_split_unsent_seg+0x274>)
 80150d4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80150d8:	497e      	ldr	r1, [pc, #504]	; (80152d4 <tcp_split_unsent_seg+0x288>)
 80150da:	487b      	ldr	r0, [pc, #492]	; (80152c8 <tcp_split_unsent_seg+0x27c>)
 80150dc:	f005 f82c 	bl	801a138 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	7a9b      	ldrb	r3, [r3, #10]
 80150e4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80150e6:	7bfb      	ldrb	r3, [r7, #15]
 80150e8:	009b      	lsls	r3, r3, #2
 80150ea:	b2db      	uxtb	r3, r3
 80150ec:	f003 0304 	and.w	r3, r3, #4
 80150f0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80150f2:	697b      	ldr	r3, [r7, #20]
 80150f4:	891a      	ldrh	r2, [r3, #8]
 80150f6:	887b      	ldrh	r3, [r7, #2]
 80150f8:	1ad3      	subs	r3, r2, r3
 80150fa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80150fc:	7bbb      	ldrb	r3, [r7, #14]
 80150fe:	b29a      	uxth	r2, r3
 8015100:	89bb      	ldrh	r3, [r7, #12]
 8015102:	4413      	add	r3, r2
 8015104:	b29b      	uxth	r3, r3
 8015106:	f44f 7220 	mov.w	r2, #640	; 0x280
 801510a:	4619      	mov	r1, r3
 801510c:	2036      	movs	r0, #54	; 0x36
 801510e:	f7fa fbcd 	bl	800f8ac <pbuf_alloc>
 8015112:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015114:	693b      	ldr	r3, [r7, #16]
 8015116:	2b00      	cmp	r3, #0
 8015118:	f000 80b7 	beq.w	801528a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801511c:	697b      	ldr	r3, [r7, #20]
 801511e:	685b      	ldr	r3, [r3, #4]
 8015120:	891a      	ldrh	r2, [r3, #8]
 8015122:	697b      	ldr	r3, [r7, #20]
 8015124:	891b      	ldrh	r3, [r3, #8]
 8015126:	1ad3      	subs	r3, r2, r3
 8015128:	b29a      	uxth	r2, r3
 801512a:	887b      	ldrh	r3, [r7, #2]
 801512c:	4413      	add	r3, r2
 801512e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015130:	697b      	ldr	r3, [r7, #20]
 8015132:	6858      	ldr	r0, [r3, #4]
 8015134:	693b      	ldr	r3, [r7, #16]
 8015136:	685a      	ldr	r2, [r3, #4]
 8015138:	7bbb      	ldrb	r3, [r7, #14]
 801513a:	18d1      	adds	r1, r2, r3
 801513c:	897b      	ldrh	r3, [r7, #10]
 801513e:	89ba      	ldrh	r2, [r7, #12]
 8015140:	f7fb f882 	bl	8010248 <pbuf_copy_partial>
 8015144:	4603      	mov	r3, r0
 8015146:	461a      	mov	r2, r3
 8015148:	89bb      	ldrh	r3, [r7, #12]
 801514a:	4293      	cmp	r3, r2
 801514c:	f040 809f 	bne.w	801528e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015150:	697b      	ldr	r3, [r7, #20]
 8015152:	68db      	ldr	r3, [r3, #12]
 8015154:	899b      	ldrh	r3, [r3, #12]
 8015156:	b29b      	uxth	r3, r3
 8015158:	4618      	mov	r0, r3
 801515a:	f7f9 fbc8 	bl	800e8ee <lwip_htons>
 801515e:	4603      	mov	r3, r0
 8015160:	b2db      	uxtb	r3, r3
 8015162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015166:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015168:	2300      	movs	r3, #0
 801516a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801516c:	7efb      	ldrb	r3, [r7, #27]
 801516e:	f003 0308 	and.w	r3, r3, #8
 8015172:	2b00      	cmp	r3, #0
 8015174:	d007      	beq.n	8015186 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8015176:	7efb      	ldrb	r3, [r7, #27]
 8015178:	f023 0308 	bic.w	r3, r3, #8
 801517c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801517e:	7ebb      	ldrb	r3, [r7, #26]
 8015180:	f043 0308 	orr.w	r3, r3, #8
 8015184:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8015186:	7efb      	ldrb	r3, [r7, #27]
 8015188:	f003 0301 	and.w	r3, r3, #1
 801518c:	2b00      	cmp	r3, #0
 801518e:	d007      	beq.n	80151a0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015190:	7efb      	ldrb	r3, [r7, #27]
 8015192:	f023 0301 	bic.w	r3, r3, #1
 8015196:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8015198:	7ebb      	ldrb	r3, [r7, #26]
 801519a:	f043 0301 	orr.w	r3, r3, #1
 801519e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80151a0:	697b      	ldr	r3, [r7, #20]
 80151a2:	68db      	ldr	r3, [r3, #12]
 80151a4:	685b      	ldr	r3, [r3, #4]
 80151a6:	4618      	mov	r0, r3
 80151a8:	f7f9 fbb6 	bl	800e918 <lwip_htonl>
 80151ac:	4602      	mov	r2, r0
 80151ae:	887b      	ldrh	r3, [r7, #2]
 80151b0:	18d1      	adds	r1, r2, r3
 80151b2:	7eba      	ldrb	r2, [r7, #26]
 80151b4:	7bfb      	ldrb	r3, [r7, #15]
 80151b6:	9300      	str	r3, [sp, #0]
 80151b8:	460b      	mov	r3, r1
 80151ba:	6939      	ldr	r1, [r7, #16]
 80151bc:	6878      	ldr	r0, [r7, #4]
 80151be:	f7ff fa4b 	bl	8014658 <tcp_create_segment>
 80151c2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80151c4:	69fb      	ldr	r3, [r7, #28]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d063      	beq.n	8015292 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80151ca:	697b      	ldr	r3, [r7, #20]
 80151cc:	685b      	ldr	r3, [r3, #4]
 80151ce:	4618      	mov	r0, r3
 80151d0:	f7fa fed8 	bl	800ff84 <pbuf_clen>
 80151d4:	4603      	mov	r3, r0
 80151d6:	461a      	mov	r2, r3
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80151de:	1a9b      	subs	r3, r3, r2
 80151e0:	b29a      	uxth	r2, r3
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80151e8:	697b      	ldr	r3, [r7, #20]
 80151ea:	6858      	ldr	r0, [r3, #4]
 80151ec:	697b      	ldr	r3, [r7, #20]
 80151ee:	685b      	ldr	r3, [r3, #4]
 80151f0:	891a      	ldrh	r2, [r3, #8]
 80151f2:	89bb      	ldrh	r3, [r7, #12]
 80151f4:	1ad3      	subs	r3, r2, r3
 80151f6:	b29b      	uxth	r3, r3
 80151f8:	4619      	mov	r1, r3
 80151fa:	f7fa fcb5 	bl	800fb68 <pbuf_realloc>
  useg->len -= remainder;
 80151fe:	697b      	ldr	r3, [r7, #20]
 8015200:	891a      	ldrh	r2, [r3, #8]
 8015202:	89bb      	ldrh	r3, [r7, #12]
 8015204:	1ad3      	subs	r3, r2, r3
 8015206:	b29a      	uxth	r2, r3
 8015208:	697b      	ldr	r3, [r7, #20]
 801520a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801520c:	697b      	ldr	r3, [r7, #20]
 801520e:	68db      	ldr	r3, [r3, #12]
 8015210:	899b      	ldrh	r3, [r3, #12]
 8015212:	b29c      	uxth	r4, r3
 8015214:	7efb      	ldrb	r3, [r7, #27]
 8015216:	b29b      	uxth	r3, r3
 8015218:	4618      	mov	r0, r3
 801521a:	f7f9 fb68 	bl	800e8ee <lwip_htons>
 801521e:	4603      	mov	r3, r0
 8015220:	461a      	mov	r2, r3
 8015222:	697b      	ldr	r3, [r7, #20]
 8015224:	68db      	ldr	r3, [r3, #12]
 8015226:	4322      	orrs	r2, r4
 8015228:	b292      	uxth	r2, r2
 801522a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801522c:	697b      	ldr	r3, [r7, #20]
 801522e:	685b      	ldr	r3, [r3, #4]
 8015230:	4618      	mov	r0, r3
 8015232:	f7fa fea7 	bl	800ff84 <pbuf_clen>
 8015236:	4603      	mov	r3, r0
 8015238:	461a      	mov	r2, r3
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015240:	4413      	add	r3, r2
 8015242:	b29a      	uxth	r2, r3
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801524a:	69fb      	ldr	r3, [r7, #28]
 801524c:	685b      	ldr	r3, [r3, #4]
 801524e:	4618      	mov	r0, r3
 8015250:	f7fa fe98 	bl	800ff84 <pbuf_clen>
 8015254:	4603      	mov	r3, r0
 8015256:	461a      	mov	r2, r3
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801525e:	4413      	add	r3, r2
 8015260:	b29a      	uxth	r2, r3
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015268:	697b      	ldr	r3, [r7, #20]
 801526a:	681a      	ldr	r2, [r3, #0]
 801526c:	69fb      	ldr	r3, [r7, #28]
 801526e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015270:	697b      	ldr	r3, [r7, #20]
 8015272:	69fa      	ldr	r2, [r7, #28]
 8015274:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8015276:	69fb      	ldr	r3, [r7, #28]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d103      	bne.n	8015286 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	2200      	movs	r2, #0
 8015282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8015286:	2300      	movs	r3, #0
 8015288:	e016      	b.n	80152b8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801528a:	bf00      	nop
 801528c:	e002      	b.n	8015294 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801528e:	bf00      	nop
 8015290:	e000      	b.n	8015294 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015292:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015294:	69fb      	ldr	r3, [r7, #28]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d006      	beq.n	80152a8 <tcp_split_unsent_seg+0x25c>
 801529a:	4b09      	ldr	r3, [pc, #36]	; (80152c0 <tcp_split_unsent_seg+0x274>)
 801529c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80152a0:	490d      	ldr	r1, [pc, #52]	; (80152d8 <tcp_split_unsent_seg+0x28c>)
 80152a2:	4809      	ldr	r0, [pc, #36]	; (80152c8 <tcp_split_unsent_seg+0x27c>)
 80152a4:	f004 ff48 	bl	801a138 <iprintf>
  if (p != NULL) {
 80152a8:	693b      	ldr	r3, [r7, #16]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d002      	beq.n	80152b4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80152ae:	6938      	ldr	r0, [r7, #16]
 80152b0:	f7fa fde0 	bl	800fe74 <pbuf_free>
  }

  return ERR_MEM;
 80152b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80152b8:	4618      	mov	r0, r3
 80152ba:	3724      	adds	r7, #36	; 0x24
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd90      	pop	{r4, r7, pc}
 80152c0:	0801dfb8 	.word	0x0801dfb8
 80152c4:	0801e34c 	.word	0x0801e34c
 80152c8:	0801e00c 	.word	0x0801e00c
 80152cc:	0801e370 	.word	0x0801e370
 80152d0:	0801e394 	.word	0x0801e394
 80152d4:	0801e3a4 	.word	0x0801e3a4
 80152d8:	0801e3b4 	.word	0x0801e3b4

080152dc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80152dc:	b590      	push	{r4, r7, lr}
 80152de:	b085      	sub	sp, #20
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d106      	bne.n	80152f8 <tcp_send_fin+0x1c>
 80152ea:	4b21      	ldr	r3, [pc, #132]	; (8015370 <tcp_send_fin+0x94>)
 80152ec:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80152f0:	4920      	ldr	r1, [pc, #128]	; (8015374 <tcp_send_fin+0x98>)
 80152f2:	4821      	ldr	r0, [pc, #132]	; (8015378 <tcp_send_fin+0x9c>)
 80152f4:	f004 ff20 	bl	801a138 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d02e      	beq.n	801535e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015304:	60fb      	str	r3, [r7, #12]
 8015306:	e002      	b.n	801530e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d1f8      	bne.n	8015308 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	68db      	ldr	r3, [r3, #12]
 801531a:	899b      	ldrh	r3, [r3, #12]
 801531c:	b29b      	uxth	r3, r3
 801531e:	4618      	mov	r0, r3
 8015320:	f7f9 fae5 	bl	800e8ee <lwip_htons>
 8015324:	4603      	mov	r3, r0
 8015326:	b2db      	uxtb	r3, r3
 8015328:	f003 0307 	and.w	r3, r3, #7
 801532c:	2b00      	cmp	r3, #0
 801532e:	d116      	bne.n	801535e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	68db      	ldr	r3, [r3, #12]
 8015334:	899b      	ldrh	r3, [r3, #12]
 8015336:	b29c      	uxth	r4, r3
 8015338:	2001      	movs	r0, #1
 801533a:	f7f9 fad8 	bl	800e8ee <lwip_htons>
 801533e:	4603      	mov	r3, r0
 8015340:	461a      	mov	r2, r3
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	68db      	ldr	r3, [r3, #12]
 8015346:	4322      	orrs	r2, r4
 8015348:	b292      	uxth	r2, r2
 801534a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	8b5b      	ldrh	r3, [r3, #26]
 8015350:	f043 0320 	orr.w	r3, r3, #32
 8015354:	b29a      	uxth	r2, r3
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801535a:	2300      	movs	r3, #0
 801535c:	e004      	b.n	8015368 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801535e:	2101      	movs	r1, #1
 8015360:	6878      	ldr	r0, [r7, #4]
 8015362:	f000 f80b 	bl	801537c <tcp_enqueue_flags>
 8015366:	4603      	mov	r3, r0
}
 8015368:	4618      	mov	r0, r3
 801536a:	3714      	adds	r7, #20
 801536c:	46bd      	mov	sp, r7
 801536e:	bd90      	pop	{r4, r7, pc}
 8015370:	0801dfb8 	.word	0x0801dfb8
 8015374:	0801e3c0 	.word	0x0801e3c0
 8015378:	0801e00c 	.word	0x0801e00c

0801537c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b08a      	sub	sp, #40	; 0x28
 8015380:	af02      	add	r7, sp, #8
 8015382:	6078      	str	r0, [r7, #4]
 8015384:	460b      	mov	r3, r1
 8015386:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015388:	2300      	movs	r3, #0
 801538a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801538c:	2300      	movs	r3, #0
 801538e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015390:	78fb      	ldrb	r3, [r7, #3]
 8015392:	f003 0303 	and.w	r3, r3, #3
 8015396:	2b00      	cmp	r3, #0
 8015398:	d106      	bne.n	80153a8 <tcp_enqueue_flags+0x2c>
 801539a:	4b67      	ldr	r3, [pc, #412]	; (8015538 <tcp_enqueue_flags+0x1bc>)
 801539c:	f240 4211 	movw	r2, #1041	; 0x411
 80153a0:	4966      	ldr	r1, [pc, #408]	; (801553c <tcp_enqueue_flags+0x1c0>)
 80153a2:	4867      	ldr	r0, [pc, #412]	; (8015540 <tcp_enqueue_flags+0x1c4>)
 80153a4:	f004 fec8 	bl	801a138 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d106      	bne.n	80153bc <tcp_enqueue_flags+0x40>
 80153ae:	4b62      	ldr	r3, [pc, #392]	; (8015538 <tcp_enqueue_flags+0x1bc>)
 80153b0:	f240 4213 	movw	r2, #1043	; 0x413
 80153b4:	4963      	ldr	r1, [pc, #396]	; (8015544 <tcp_enqueue_flags+0x1c8>)
 80153b6:	4862      	ldr	r0, [pc, #392]	; (8015540 <tcp_enqueue_flags+0x1c4>)
 80153b8:	f004 febe 	bl	801a138 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80153bc:	78fb      	ldrb	r3, [r7, #3]
 80153be:	f003 0302 	and.w	r3, r3, #2
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d001      	beq.n	80153ca <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80153c6:	2301      	movs	r3, #1
 80153c8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80153ca:	7ffb      	ldrb	r3, [r7, #31]
 80153cc:	009b      	lsls	r3, r3, #2
 80153ce:	b2db      	uxtb	r3, r3
 80153d0:	f003 0304 	and.w	r3, r3, #4
 80153d4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80153d6:	7dfb      	ldrb	r3, [r7, #23]
 80153d8:	b29b      	uxth	r3, r3
 80153da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80153de:	4619      	mov	r1, r3
 80153e0:	2036      	movs	r0, #54	; 0x36
 80153e2:	f7fa fa63 	bl	800f8ac <pbuf_alloc>
 80153e6:	6138      	str	r0, [r7, #16]
 80153e8:	693b      	ldr	r3, [r7, #16]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d109      	bne.n	8015402 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	8b5b      	ldrh	r3, [r3, #26]
 80153f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153f6:	b29a      	uxth	r2, r3
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80153fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015400:	e095      	b.n	801552e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015402:	693b      	ldr	r3, [r7, #16]
 8015404:	895a      	ldrh	r2, [r3, #10]
 8015406:	7dfb      	ldrb	r3, [r7, #23]
 8015408:	b29b      	uxth	r3, r3
 801540a:	429a      	cmp	r2, r3
 801540c:	d206      	bcs.n	801541c <tcp_enqueue_flags+0xa0>
 801540e:	4b4a      	ldr	r3, [pc, #296]	; (8015538 <tcp_enqueue_flags+0x1bc>)
 8015410:	f240 4239 	movw	r2, #1081	; 0x439
 8015414:	494c      	ldr	r1, [pc, #304]	; (8015548 <tcp_enqueue_flags+0x1cc>)
 8015416:	484a      	ldr	r0, [pc, #296]	; (8015540 <tcp_enqueue_flags+0x1c4>)
 8015418:	f004 fe8e 	bl	801a138 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015420:	78fa      	ldrb	r2, [r7, #3]
 8015422:	7ffb      	ldrb	r3, [r7, #31]
 8015424:	9300      	str	r3, [sp, #0]
 8015426:	460b      	mov	r3, r1
 8015428:	6939      	ldr	r1, [r7, #16]
 801542a:	6878      	ldr	r0, [r7, #4]
 801542c:	f7ff f914 	bl	8014658 <tcp_create_segment>
 8015430:	60f8      	str	r0, [r7, #12]
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d109      	bne.n	801544c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	8b5b      	ldrh	r3, [r3, #26]
 801543c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015440:	b29a      	uxth	r2, r3
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015446:	f04f 33ff 	mov.w	r3, #4294967295
 801544a:	e070      	b.n	801552e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	68db      	ldr	r3, [r3, #12]
 8015450:	f003 0303 	and.w	r3, r3, #3
 8015454:	2b00      	cmp	r3, #0
 8015456:	d006      	beq.n	8015466 <tcp_enqueue_flags+0xea>
 8015458:	4b37      	ldr	r3, [pc, #220]	; (8015538 <tcp_enqueue_flags+0x1bc>)
 801545a:	f240 4242 	movw	r2, #1090	; 0x442
 801545e:	493b      	ldr	r1, [pc, #236]	; (801554c <tcp_enqueue_flags+0x1d0>)
 8015460:	4837      	ldr	r0, [pc, #220]	; (8015540 <tcp_enqueue_flags+0x1c4>)
 8015462:	f004 fe69 	bl	801a138 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	891b      	ldrh	r3, [r3, #8]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d006      	beq.n	801547c <tcp_enqueue_flags+0x100>
 801546e:	4b32      	ldr	r3, [pc, #200]	; (8015538 <tcp_enqueue_flags+0x1bc>)
 8015470:	f240 4243 	movw	r2, #1091	; 0x443
 8015474:	4936      	ldr	r1, [pc, #216]	; (8015550 <tcp_enqueue_flags+0x1d4>)
 8015476:	4832      	ldr	r0, [pc, #200]	; (8015540 <tcp_enqueue_flags+0x1c4>)
 8015478:	f004 fe5e 	bl	801a138 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015480:	2b00      	cmp	r3, #0
 8015482:	d103      	bne.n	801548c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	68fa      	ldr	r2, [r7, #12]
 8015488:	66da      	str	r2, [r3, #108]	; 0x6c
 801548a:	e00d      	b.n	80154a8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015490:	61bb      	str	r3, [r7, #24]
 8015492:	e002      	b.n	801549a <tcp_enqueue_flags+0x11e>
 8015494:	69bb      	ldr	r3, [r7, #24]
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	61bb      	str	r3, [r7, #24]
 801549a:	69bb      	ldr	r3, [r7, #24]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d1f8      	bne.n	8015494 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80154a2:	69bb      	ldr	r3, [r7, #24]
 80154a4:	68fa      	ldr	r2, [r7, #12]
 80154a6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	2200      	movs	r2, #0
 80154ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80154b0:	78fb      	ldrb	r3, [r7, #3]
 80154b2:	f003 0302 	and.w	r3, r3, #2
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d104      	bne.n	80154c4 <tcp_enqueue_flags+0x148>
 80154ba:	78fb      	ldrb	r3, [r7, #3]
 80154bc:	f003 0301 	and.w	r3, r3, #1
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d004      	beq.n	80154ce <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80154c8:	1c5a      	adds	r2, r3, #1
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80154ce:	78fb      	ldrb	r3, [r7, #3]
 80154d0:	f003 0301 	and.w	r3, r3, #1
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d006      	beq.n	80154e6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	8b5b      	ldrh	r3, [r3, #26]
 80154dc:	f043 0320 	orr.w	r3, r3, #32
 80154e0:	b29a      	uxth	r2, r3
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	685b      	ldr	r3, [r3, #4]
 80154ea:	4618      	mov	r0, r3
 80154ec:	f7fa fd4a 	bl	800ff84 <pbuf_clen>
 80154f0:	4603      	mov	r3, r0
 80154f2:	461a      	mov	r2, r3
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80154fa:	4413      	add	r3, r2
 80154fc:	b29a      	uxth	r2, r3
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801550a:	2b00      	cmp	r3, #0
 801550c:	d00e      	beq.n	801552c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015512:	2b00      	cmp	r3, #0
 8015514:	d10a      	bne.n	801552c <tcp_enqueue_flags+0x1b0>
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801551a:	2b00      	cmp	r3, #0
 801551c:	d106      	bne.n	801552c <tcp_enqueue_flags+0x1b0>
 801551e:	4b06      	ldr	r3, [pc, #24]	; (8015538 <tcp_enqueue_flags+0x1bc>)
 8015520:	f240 4265 	movw	r2, #1125	; 0x465
 8015524:	490b      	ldr	r1, [pc, #44]	; (8015554 <tcp_enqueue_flags+0x1d8>)
 8015526:	4806      	ldr	r0, [pc, #24]	; (8015540 <tcp_enqueue_flags+0x1c4>)
 8015528:	f004 fe06 	bl	801a138 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801552c:	2300      	movs	r3, #0
}
 801552e:	4618      	mov	r0, r3
 8015530:	3720      	adds	r7, #32
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}
 8015536:	bf00      	nop
 8015538:	0801dfb8 	.word	0x0801dfb8
 801553c:	0801e3dc 	.word	0x0801e3dc
 8015540:	0801e00c 	.word	0x0801e00c
 8015544:	0801e434 	.word	0x0801e434
 8015548:	0801e454 	.word	0x0801e454
 801554c:	0801e490 	.word	0x0801e490
 8015550:	0801e4a8 	.word	0x0801e4a8
 8015554:	0801e4d4 	.word	0x0801e4d4

08015558 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015558:	b5b0      	push	{r4, r5, r7, lr}
 801555a:	b08a      	sub	sp, #40	; 0x28
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d106      	bne.n	8015574 <tcp_output+0x1c>
 8015566:	4b9e      	ldr	r3, [pc, #632]	; (80157e0 <tcp_output+0x288>)
 8015568:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801556c:	499d      	ldr	r1, [pc, #628]	; (80157e4 <tcp_output+0x28c>)
 801556e:	489e      	ldr	r0, [pc, #632]	; (80157e8 <tcp_output+0x290>)
 8015570:	f004 fde2 	bl	801a138 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	7d1b      	ldrb	r3, [r3, #20]
 8015578:	2b01      	cmp	r3, #1
 801557a:	d106      	bne.n	801558a <tcp_output+0x32>
 801557c:	4b98      	ldr	r3, [pc, #608]	; (80157e0 <tcp_output+0x288>)
 801557e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8015582:	499a      	ldr	r1, [pc, #616]	; (80157ec <tcp_output+0x294>)
 8015584:	4898      	ldr	r0, [pc, #608]	; (80157e8 <tcp_output+0x290>)
 8015586:	f004 fdd7 	bl	801a138 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801558a:	4b99      	ldr	r3, [pc, #612]	; (80157f0 <tcp_output+0x298>)
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	687a      	ldr	r2, [r7, #4]
 8015590:	429a      	cmp	r2, r3
 8015592:	d101      	bne.n	8015598 <tcp_output+0x40>
    return ERR_OK;
 8015594:	2300      	movs	r3, #0
 8015596:	e1ce      	b.n	8015936 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80155a4:	4293      	cmp	r3, r2
 80155a6:	bf28      	it	cs
 80155a8:	4613      	movcs	r3, r2
 80155aa:	b29b      	uxth	r3, r3
 80155ac:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80155b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d10b      	bne.n	80155d2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	8b5b      	ldrh	r3, [r3, #26]
 80155be:	f003 0302 	and.w	r3, r3, #2
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	f000 81aa 	beq.w	801591c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80155c8:	6878      	ldr	r0, [r7, #4]
 80155ca:	f000 fdcb 	bl	8016164 <tcp_send_empty_ack>
 80155ce:	4603      	mov	r3, r0
 80155d0:	e1b1      	b.n	8015936 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80155d2:	6879      	ldr	r1, [r7, #4]
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	3304      	adds	r3, #4
 80155d8:	461a      	mov	r2, r3
 80155da:	6878      	ldr	r0, [r7, #4]
 80155dc:	f7ff f820 	bl	8014620 <tcp_route>
 80155e0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d102      	bne.n	80155ee <tcp_output+0x96>
    return ERR_RTE;
 80155e8:	f06f 0303 	mvn.w	r3, #3
 80155ec:	e1a3      	b.n	8015936 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d003      	beq.n	80155fc <tcp_output+0xa4>
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d111      	bne.n	8015620 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80155fc:	697b      	ldr	r3, [r7, #20]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d002      	beq.n	8015608 <tcp_output+0xb0>
 8015602:	697b      	ldr	r3, [r7, #20]
 8015604:	3304      	adds	r3, #4
 8015606:	e000      	b.n	801560a <tcp_output+0xb2>
 8015608:	2300      	movs	r3, #0
 801560a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801560c:	693b      	ldr	r3, [r7, #16]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d102      	bne.n	8015618 <tcp_output+0xc0>
      return ERR_RTE;
 8015612:	f06f 0303 	mvn.w	r3, #3
 8015616:	e18e      	b.n	8015936 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015618:	693b      	ldr	r3, [r7, #16]
 801561a:	681a      	ldr	r2, [r3, #0]
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015622:	68db      	ldr	r3, [r3, #12]
 8015624:	685b      	ldr	r3, [r3, #4]
 8015626:	4618      	mov	r0, r3
 8015628:	f7f9 f976 	bl	800e918 <lwip_htonl>
 801562c:	4602      	mov	r2, r0
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015632:	1ad3      	subs	r3, r2, r3
 8015634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015636:	8912      	ldrh	r2, [r2, #8]
 8015638:	4413      	add	r3, r2
 801563a:	69ba      	ldr	r2, [r7, #24]
 801563c:	429a      	cmp	r2, r3
 801563e:	d227      	bcs.n	8015690 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015646:	461a      	mov	r2, r3
 8015648:	69bb      	ldr	r3, [r7, #24]
 801564a:	4293      	cmp	r3, r2
 801564c:	d114      	bne.n	8015678 <tcp_output+0x120>
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015652:	2b00      	cmp	r3, #0
 8015654:	d110      	bne.n	8015678 <tcp_output+0x120>
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801565c:	2b00      	cmp	r3, #0
 801565e:	d10b      	bne.n	8015678 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	2200      	movs	r2, #0
 8015664:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	2201      	movs	r2, #1
 801566c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	2200      	movs	r2, #0
 8015674:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	8b5b      	ldrh	r3, [r3, #26]
 801567c:	f003 0302 	and.w	r3, r3, #2
 8015680:	2b00      	cmp	r3, #0
 8015682:	f000 814d 	beq.w	8015920 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8015686:	6878      	ldr	r0, [r7, #4]
 8015688:	f000 fd6c 	bl	8016164 <tcp_send_empty_ack>
 801568c:	4603      	mov	r3, r0
 801568e:	e152      	b.n	8015936 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	2200      	movs	r2, #0
 8015694:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801569c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801569e:	6a3b      	ldr	r3, [r7, #32]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	f000 811c 	beq.w	80158de <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80156a6:	e002      	b.n	80156ae <tcp_output+0x156>
 80156a8:	6a3b      	ldr	r3, [r7, #32]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	623b      	str	r3, [r7, #32]
 80156ae:	6a3b      	ldr	r3, [r7, #32]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d1f8      	bne.n	80156a8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80156b6:	e112      	b.n	80158de <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80156b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ba:	68db      	ldr	r3, [r3, #12]
 80156bc:	899b      	ldrh	r3, [r3, #12]
 80156be:	b29b      	uxth	r3, r3
 80156c0:	4618      	mov	r0, r3
 80156c2:	f7f9 f914 	bl	800e8ee <lwip_htons>
 80156c6:	4603      	mov	r3, r0
 80156c8:	b2db      	uxtb	r3, r3
 80156ca:	f003 0304 	and.w	r3, r3, #4
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d006      	beq.n	80156e0 <tcp_output+0x188>
 80156d2:	4b43      	ldr	r3, [pc, #268]	; (80157e0 <tcp_output+0x288>)
 80156d4:	f240 5236 	movw	r2, #1334	; 0x536
 80156d8:	4946      	ldr	r1, [pc, #280]	; (80157f4 <tcp_output+0x29c>)
 80156da:	4843      	ldr	r0, [pc, #268]	; (80157e8 <tcp_output+0x290>)
 80156dc:	f004 fd2c 	bl	801a138 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d020      	beq.n	801572a <tcp_output+0x1d2>
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	8b5b      	ldrh	r3, [r3, #26]
 80156ec:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d11a      	bne.n	801572a <tcp_output+0x1d2>
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d00b      	beq.n	8015714 <tcp_output+0x1bc>
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d111      	bne.n	801572a <tcp_output+0x1d2>
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801570a:	891a      	ldrh	r2, [r3, #8]
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015710:	429a      	cmp	r2, r3
 8015712:	d20a      	bcs.n	801572a <tcp_output+0x1d2>
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801571a:	2b00      	cmp	r3, #0
 801571c:	d005      	beq.n	801572a <tcp_output+0x1d2>
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015728:	d301      	bcc.n	801572e <tcp_output+0x1d6>
 801572a:	2301      	movs	r3, #1
 801572c:	e000      	b.n	8015730 <tcp_output+0x1d8>
 801572e:	2300      	movs	r3, #0
 8015730:	2b00      	cmp	r3, #0
 8015732:	d106      	bne.n	8015742 <tcp_output+0x1ea>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	8b5b      	ldrh	r3, [r3, #26]
 8015738:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801573c:	2b00      	cmp	r3, #0
 801573e:	f000 80e3 	beq.w	8015908 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	7d1b      	ldrb	r3, [r3, #20]
 8015746:	2b02      	cmp	r3, #2
 8015748:	d00d      	beq.n	8015766 <tcp_output+0x20e>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801574c:	68db      	ldr	r3, [r3, #12]
 801574e:	899b      	ldrh	r3, [r3, #12]
 8015750:	b29c      	uxth	r4, r3
 8015752:	2010      	movs	r0, #16
 8015754:	f7f9 f8cb 	bl	800e8ee <lwip_htons>
 8015758:	4603      	mov	r3, r0
 801575a:	461a      	mov	r2, r3
 801575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801575e:	68db      	ldr	r3, [r3, #12]
 8015760:	4322      	orrs	r2, r4
 8015762:	b292      	uxth	r2, r2
 8015764:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015766:	697a      	ldr	r2, [r7, #20]
 8015768:	6879      	ldr	r1, [r7, #4]
 801576a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801576c:	f000 f908 	bl	8015980 <tcp_output_segment>
 8015770:	4603      	mov	r3, r0
 8015772:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d009      	beq.n	8015790 <tcp_output+0x238>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	8b5b      	ldrh	r3, [r3, #26]
 8015780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015784:	b29a      	uxth	r2, r3
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	835a      	strh	r2, [r3, #26]
      return err;
 801578a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801578e:	e0d2      	b.n	8015936 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015792:	681a      	ldr	r2, [r3, #0]
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	7d1b      	ldrb	r3, [r3, #20]
 801579c:	2b02      	cmp	r3, #2
 801579e:	d006      	beq.n	80157ae <tcp_output+0x256>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	8b5b      	ldrh	r3, [r3, #26]
 80157a4:	f023 0303 	bic.w	r3, r3, #3
 80157a8:	b29a      	uxth	r2, r3
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80157ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157b0:	68db      	ldr	r3, [r3, #12]
 80157b2:	685b      	ldr	r3, [r3, #4]
 80157b4:	4618      	mov	r0, r3
 80157b6:	f7f9 f8af 	bl	800e918 <lwip_htonl>
 80157ba:	4604      	mov	r4, r0
 80157bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157be:	891b      	ldrh	r3, [r3, #8]
 80157c0:	461d      	mov	r5, r3
 80157c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157c4:	68db      	ldr	r3, [r3, #12]
 80157c6:	899b      	ldrh	r3, [r3, #12]
 80157c8:	b29b      	uxth	r3, r3
 80157ca:	4618      	mov	r0, r3
 80157cc:	f7f9 f88f 	bl	800e8ee <lwip_htons>
 80157d0:	4603      	mov	r3, r0
 80157d2:	b2db      	uxtb	r3, r3
 80157d4:	f003 0303 	and.w	r3, r3, #3
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d00d      	beq.n	80157f8 <tcp_output+0x2a0>
 80157dc:	2301      	movs	r3, #1
 80157de:	e00c      	b.n	80157fa <tcp_output+0x2a2>
 80157e0:	0801dfb8 	.word	0x0801dfb8
 80157e4:	0801e4fc 	.word	0x0801e4fc
 80157e8:	0801e00c 	.word	0x0801e00c
 80157ec:	0801e514 	.word	0x0801e514
 80157f0:	20018920 	.word	0x20018920
 80157f4:	0801e53c 	.word	0x0801e53c
 80157f8:	2300      	movs	r3, #0
 80157fa:	442b      	add	r3, r5
 80157fc:	4423      	add	r3, r4
 80157fe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015804:	68bb      	ldr	r3, [r7, #8]
 8015806:	1ad3      	subs	r3, r2, r3
 8015808:	2b00      	cmp	r3, #0
 801580a:	da02      	bge.n	8015812 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	68ba      	ldr	r2, [r7, #8]
 8015810:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015814:	891b      	ldrh	r3, [r3, #8]
 8015816:	461c      	mov	r4, r3
 8015818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801581a:	68db      	ldr	r3, [r3, #12]
 801581c:	899b      	ldrh	r3, [r3, #12]
 801581e:	b29b      	uxth	r3, r3
 8015820:	4618      	mov	r0, r3
 8015822:	f7f9 f864 	bl	800e8ee <lwip_htons>
 8015826:	4603      	mov	r3, r0
 8015828:	b2db      	uxtb	r3, r3
 801582a:	f003 0303 	and.w	r3, r3, #3
 801582e:	2b00      	cmp	r3, #0
 8015830:	d001      	beq.n	8015836 <tcp_output+0x2de>
 8015832:	2301      	movs	r3, #1
 8015834:	e000      	b.n	8015838 <tcp_output+0x2e0>
 8015836:	2300      	movs	r3, #0
 8015838:	4423      	add	r3, r4
 801583a:	2b00      	cmp	r3, #0
 801583c:	d049      	beq.n	80158d2 <tcp_output+0x37a>
      seg->next = NULL;
 801583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015840:	2200      	movs	r2, #0
 8015842:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015848:	2b00      	cmp	r3, #0
 801584a:	d105      	bne.n	8015858 <tcp_output+0x300>
        pcb->unacked = seg;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015850:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015854:	623b      	str	r3, [r7, #32]
 8015856:	e03f      	b.n	80158d8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801585a:	68db      	ldr	r3, [r3, #12]
 801585c:	685b      	ldr	r3, [r3, #4]
 801585e:	4618      	mov	r0, r3
 8015860:	f7f9 f85a 	bl	800e918 <lwip_htonl>
 8015864:	4604      	mov	r4, r0
 8015866:	6a3b      	ldr	r3, [r7, #32]
 8015868:	68db      	ldr	r3, [r3, #12]
 801586a:	685b      	ldr	r3, [r3, #4]
 801586c:	4618      	mov	r0, r3
 801586e:	f7f9 f853 	bl	800e918 <lwip_htonl>
 8015872:	4603      	mov	r3, r0
 8015874:	1ae3      	subs	r3, r4, r3
 8015876:	2b00      	cmp	r3, #0
 8015878:	da24      	bge.n	80158c4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	3370      	adds	r3, #112	; 0x70
 801587e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015880:	e002      	b.n	8015888 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015882:	69fb      	ldr	r3, [r7, #28]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015888:	69fb      	ldr	r3, [r7, #28]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d011      	beq.n	80158b4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015890:	69fb      	ldr	r3, [r7, #28]
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	68db      	ldr	r3, [r3, #12]
 8015896:	685b      	ldr	r3, [r3, #4]
 8015898:	4618      	mov	r0, r3
 801589a:	f7f9 f83d 	bl	800e918 <lwip_htonl>
 801589e:	4604      	mov	r4, r0
 80158a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a2:	68db      	ldr	r3, [r3, #12]
 80158a4:	685b      	ldr	r3, [r3, #4]
 80158a6:	4618      	mov	r0, r3
 80158a8:	f7f9 f836 	bl	800e918 <lwip_htonl>
 80158ac:	4603      	mov	r3, r0
 80158ae:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	dbe6      	blt.n	8015882 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80158b4:	69fb      	ldr	r3, [r7, #28]
 80158b6:	681a      	ldr	r2, [r3, #0]
 80158b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ba:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80158bc:	69fb      	ldr	r3, [r7, #28]
 80158be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158c0:	601a      	str	r2, [r3, #0]
 80158c2:	e009      	b.n	80158d8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80158c4:	6a3b      	ldr	r3, [r7, #32]
 80158c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158c8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80158ca:	6a3b      	ldr	r3, [r7, #32]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	623b      	str	r3, [r7, #32]
 80158d0:	e002      	b.n	80158d8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80158d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80158d4:	f7fb ff35 	bl	8011742 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158dc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80158de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d012      	beq.n	801590a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80158e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158e6:	68db      	ldr	r3, [r3, #12]
 80158e8:	685b      	ldr	r3, [r3, #4]
 80158ea:	4618      	mov	r0, r3
 80158ec:	f7f9 f814 	bl	800e918 <lwip_htonl>
 80158f0:	4602      	mov	r2, r0
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158f6:	1ad3      	subs	r3, r2, r3
 80158f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158fa:	8912      	ldrh	r2, [r2, #8]
 80158fc:	4413      	add	r3, r2
  while (seg != NULL &&
 80158fe:	69ba      	ldr	r2, [r7, #24]
 8015900:	429a      	cmp	r2, r3
 8015902:	f4bf aed9 	bcs.w	80156b8 <tcp_output+0x160>
 8015906:	e000      	b.n	801590a <tcp_output+0x3b2>
      break;
 8015908:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801590e:	2b00      	cmp	r3, #0
 8015910:	d108      	bne.n	8015924 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	2200      	movs	r2, #0
 8015916:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801591a:	e004      	b.n	8015926 <tcp_output+0x3ce>
    goto output_done;
 801591c:	bf00      	nop
 801591e:	e002      	b.n	8015926 <tcp_output+0x3ce>
    goto output_done;
 8015920:	bf00      	nop
 8015922:	e000      	b.n	8015926 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015924:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	8b5b      	ldrh	r3, [r3, #26]
 801592a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801592e:	b29a      	uxth	r2, r3
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015934:	2300      	movs	r3, #0
}
 8015936:	4618      	mov	r0, r3
 8015938:	3728      	adds	r7, #40	; 0x28
 801593a:	46bd      	mov	sp, r7
 801593c:	bdb0      	pop	{r4, r5, r7, pc}
 801593e:	bf00      	nop

08015940 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b082      	sub	sp, #8
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d106      	bne.n	801595c <tcp_output_segment_busy+0x1c>
 801594e:	4b09      	ldr	r3, [pc, #36]	; (8015974 <tcp_output_segment_busy+0x34>)
 8015950:	f240 529a 	movw	r2, #1434	; 0x59a
 8015954:	4908      	ldr	r1, [pc, #32]	; (8015978 <tcp_output_segment_busy+0x38>)
 8015956:	4809      	ldr	r0, [pc, #36]	; (801597c <tcp_output_segment_busy+0x3c>)
 8015958:	f004 fbee 	bl	801a138 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	685b      	ldr	r3, [r3, #4]
 8015960:	7b9b      	ldrb	r3, [r3, #14]
 8015962:	2b01      	cmp	r3, #1
 8015964:	d001      	beq.n	801596a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015966:	2301      	movs	r3, #1
 8015968:	e000      	b.n	801596c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801596a:	2300      	movs	r3, #0
}
 801596c:	4618      	mov	r0, r3
 801596e:	3708      	adds	r7, #8
 8015970:	46bd      	mov	sp, r7
 8015972:	bd80      	pop	{r7, pc}
 8015974:	0801dfb8 	.word	0x0801dfb8
 8015978:	0801e554 	.word	0x0801e554
 801597c:	0801e00c 	.word	0x0801e00c

08015980 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015980:	b5b0      	push	{r4, r5, r7, lr}
 8015982:	b08c      	sub	sp, #48	; 0x30
 8015984:	af04      	add	r7, sp, #16
 8015986:	60f8      	str	r0, [r7, #12]
 8015988:	60b9      	str	r1, [r7, #8]
 801598a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d106      	bne.n	80159a0 <tcp_output_segment+0x20>
 8015992:	4b63      	ldr	r3, [pc, #396]	; (8015b20 <tcp_output_segment+0x1a0>)
 8015994:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015998:	4962      	ldr	r1, [pc, #392]	; (8015b24 <tcp_output_segment+0x1a4>)
 801599a:	4863      	ldr	r0, [pc, #396]	; (8015b28 <tcp_output_segment+0x1a8>)
 801599c:	f004 fbcc 	bl	801a138 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80159a0:	68bb      	ldr	r3, [r7, #8]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d106      	bne.n	80159b4 <tcp_output_segment+0x34>
 80159a6:	4b5e      	ldr	r3, [pc, #376]	; (8015b20 <tcp_output_segment+0x1a0>)
 80159a8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80159ac:	495f      	ldr	r1, [pc, #380]	; (8015b2c <tcp_output_segment+0x1ac>)
 80159ae:	485e      	ldr	r0, [pc, #376]	; (8015b28 <tcp_output_segment+0x1a8>)
 80159b0:	f004 fbc2 	bl	801a138 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d106      	bne.n	80159c8 <tcp_output_segment+0x48>
 80159ba:	4b59      	ldr	r3, [pc, #356]	; (8015b20 <tcp_output_segment+0x1a0>)
 80159bc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80159c0:	495b      	ldr	r1, [pc, #364]	; (8015b30 <tcp_output_segment+0x1b0>)
 80159c2:	4859      	ldr	r0, [pc, #356]	; (8015b28 <tcp_output_segment+0x1a8>)
 80159c4:	f004 fbb8 	bl	801a138 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80159c8:	68f8      	ldr	r0, [r7, #12]
 80159ca:	f7ff ffb9 	bl	8015940 <tcp_output_segment_busy>
 80159ce:	4603      	mov	r3, r0
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d001      	beq.n	80159d8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80159d4:	2300      	movs	r3, #0
 80159d6:	e09f      	b.n	8015b18 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80159d8:	68bb      	ldr	r3, [r7, #8]
 80159da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	68dc      	ldr	r4, [r3, #12]
 80159e0:	4610      	mov	r0, r2
 80159e2:	f7f8 ff99 	bl	800e918 <lwip_htonl>
 80159e6:	4603      	mov	r3, r0
 80159e8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80159ea:	68bb      	ldr	r3, [r7, #8]
 80159ec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	68dc      	ldr	r4, [r3, #12]
 80159f2:	4610      	mov	r0, r2
 80159f4:	f7f8 ff7b 	bl	800e8ee <lwip_htons>
 80159f8:	4603      	mov	r3, r0
 80159fa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80159fc:	68bb      	ldr	r3, [r7, #8]
 80159fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a00:	68ba      	ldr	r2, [r7, #8]
 8015a02:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015a04:	441a      	add	r2, r3
 8015a06:	68bb      	ldr	r3, [r7, #8]
 8015a08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	68db      	ldr	r3, [r3, #12]
 8015a0e:	3314      	adds	r3, #20
 8015a10:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	7a9b      	ldrb	r3, [r3, #10]
 8015a16:	f003 0301 	and.w	r3, r3, #1
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d015      	beq.n	8015a4a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015a1e:	68bb      	ldr	r3, [r7, #8]
 8015a20:	3304      	adds	r3, #4
 8015a22:	461a      	mov	r2, r3
 8015a24:	6879      	ldr	r1, [r7, #4]
 8015a26:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8015a2a:	f7fc fa31 	bl	8011e90 <tcp_eff_send_mss_netif>
 8015a2e:	4603      	mov	r3, r0
 8015a30:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015a32:	8b7b      	ldrh	r3, [r7, #26]
 8015a34:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f7f8 ff6d 	bl	800e918 <lwip_htonl>
 8015a3e:	4602      	mov	r2, r0
 8015a40:	69fb      	ldr	r3, [r7, #28]
 8015a42:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015a44:	69fb      	ldr	r3, [r7, #28]
 8015a46:	3304      	adds	r3, #4
 8015a48:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015a4a:	68bb      	ldr	r3, [r7, #8]
 8015a4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	da02      	bge.n	8015a5a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015a54:	68bb      	ldr	r3, [r7, #8]
 8015a56:	2200      	movs	r2, #0
 8015a58:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015a5a:	68bb      	ldr	r3, [r7, #8]
 8015a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d10c      	bne.n	8015a7c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015a62:	4b34      	ldr	r3, [pc, #208]	; (8015b34 <tcp_output_segment+0x1b4>)
 8015a64:	681a      	ldr	r2, [r3, #0]
 8015a66:	68bb      	ldr	r3, [r7, #8]
 8015a68:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	68db      	ldr	r3, [r3, #12]
 8015a6e:	685b      	ldr	r3, [r3, #4]
 8015a70:	4618      	mov	r0, r3
 8015a72:	f7f8 ff51 	bl	800e918 <lwip_htonl>
 8015a76:	4602      	mov	r2, r0
 8015a78:	68bb      	ldr	r3, [r7, #8]
 8015a7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	68da      	ldr	r2, [r3, #12]
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	685b      	ldr	r3, [r3, #4]
 8015a84:	685b      	ldr	r3, [r3, #4]
 8015a86:	1ad3      	subs	r3, r2, r3
 8015a88:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	685b      	ldr	r3, [r3, #4]
 8015a8e:	8959      	ldrh	r1, [r3, #10]
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	685b      	ldr	r3, [r3, #4]
 8015a94:	8b3a      	ldrh	r2, [r7, #24]
 8015a96:	1a8a      	subs	r2, r1, r2
 8015a98:	b292      	uxth	r2, r2
 8015a9a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	685b      	ldr	r3, [r3, #4]
 8015aa0:	8919      	ldrh	r1, [r3, #8]
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	685b      	ldr	r3, [r3, #4]
 8015aa6:	8b3a      	ldrh	r2, [r7, #24]
 8015aa8:	1a8a      	subs	r2, r1, r2
 8015aaa:	b292      	uxth	r2, r2
 8015aac:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	685b      	ldr	r3, [r3, #4]
 8015ab2:	68fa      	ldr	r2, [r7, #12]
 8015ab4:	68d2      	ldr	r2, [r2, #12]
 8015ab6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	68db      	ldr	r3, [r3, #12]
 8015abc:	2200      	movs	r2, #0
 8015abe:	741a      	strb	r2, [r3, #16]
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	68db      	ldr	r3, [r3, #12]
 8015ac8:	f103 0214 	add.w	r2, r3, #20
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	7a9b      	ldrb	r3, [r3, #10]
 8015ad0:	009b      	lsls	r3, r3, #2
 8015ad2:	f003 0304 	and.w	r3, r3, #4
 8015ad6:	4413      	add	r3, r2
 8015ad8:	69fa      	ldr	r2, [r7, #28]
 8015ada:	429a      	cmp	r2, r3
 8015adc:	d006      	beq.n	8015aec <tcp_output_segment+0x16c>
 8015ade:	4b10      	ldr	r3, [pc, #64]	; (8015b20 <tcp_output_segment+0x1a0>)
 8015ae0:	f240 621c 	movw	r2, #1564	; 0x61c
 8015ae4:	4914      	ldr	r1, [pc, #80]	; (8015b38 <tcp_output_segment+0x1b8>)
 8015ae6:	4810      	ldr	r0, [pc, #64]	; (8015b28 <tcp_output_segment+0x1a8>)
 8015ae8:	f004 fb26 	bl	801a138 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	6858      	ldr	r0, [r3, #4]
 8015af0:	68b9      	ldr	r1, [r7, #8]
 8015af2:	68bb      	ldr	r3, [r7, #8]
 8015af4:	1d1c      	adds	r4, r3, #4
 8015af6:	68bb      	ldr	r3, [r7, #8]
 8015af8:	7add      	ldrb	r5, [r3, #11]
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	7a9b      	ldrb	r3, [r3, #10]
 8015afe:	687a      	ldr	r2, [r7, #4]
 8015b00:	9202      	str	r2, [sp, #8]
 8015b02:	2206      	movs	r2, #6
 8015b04:	9201      	str	r2, [sp, #4]
 8015b06:	9300      	str	r3, [sp, #0]
 8015b08:	462b      	mov	r3, r5
 8015b0a:	4622      	mov	r2, r4
 8015b0c:	f002 fa36 	bl	8017f7c <ip4_output_if>
 8015b10:	4603      	mov	r3, r0
 8015b12:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015b14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015b18:	4618      	mov	r0, r3
 8015b1a:	3720      	adds	r7, #32
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8015b20:	0801dfb8 	.word	0x0801dfb8
 8015b24:	0801e57c 	.word	0x0801e57c
 8015b28:	0801e00c 	.word	0x0801e00c
 8015b2c:	0801e59c 	.word	0x0801e59c
 8015b30:	0801e5bc 	.word	0x0801e5bc
 8015b34:	20018910 	.word	0x20018910
 8015b38:	0801e5e0 	.word	0x0801e5e0

08015b3c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015b3c:	b5b0      	push	{r4, r5, r7, lr}
 8015b3e:	b084      	sub	sp, #16
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d106      	bne.n	8015b58 <tcp_rexmit_rto_prepare+0x1c>
 8015b4a:	4b31      	ldr	r3, [pc, #196]	; (8015c10 <tcp_rexmit_rto_prepare+0xd4>)
 8015b4c:	f240 6263 	movw	r2, #1635	; 0x663
 8015b50:	4930      	ldr	r1, [pc, #192]	; (8015c14 <tcp_rexmit_rto_prepare+0xd8>)
 8015b52:	4831      	ldr	r0, [pc, #196]	; (8015c18 <tcp_rexmit_rto_prepare+0xdc>)
 8015b54:	f004 faf0 	bl	801a138 <iprintf>

  if (pcb->unacked == NULL) {
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d102      	bne.n	8015b66 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015b60:	f06f 0305 	mvn.w	r3, #5
 8015b64:	e050      	b.n	8015c08 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b6a:	60fb      	str	r3, [r7, #12]
 8015b6c:	e00b      	b.n	8015b86 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015b6e:	68f8      	ldr	r0, [r7, #12]
 8015b70:	f7ff fee6 	bl	8015940 <tcp_output_segment_busy>
 8015b74:	4603      	mov	r3, r0
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d002      	beq.n	8015b80 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015b7a:	f06f 0305 	mvn.w	r3, #5
 8015b7e:	e043      	b.n	8015c08 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	60fb      	str	r3, [r7, #12]
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d1ef      	bne.n	8015b6e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015b8e:	68f8      	ldr	r0, [r7, #12]
 8015b90:	f7ff fed6 	bl	8015940 <tcp_output_segment_busy>
 8015b94:	4603      	mov	r3, r0
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d002      	beq.n	8015ba0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015b9a:	f06f 0305 	mvn.w	r3, #5
 8015b9e:	e033      	b.n	8015c08 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	8b5b      	ldrh	r3, [r3, #26]
 8015bba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015bbe:	b29a      	uxth	r2, r3
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	68db      	ldr	r3, [r3, #12]
 8015bc8:	685b      	ldr	r3, [r3, #4]
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f7f8 fea4 	bl	800e918 <lwip_htonl>
 8015bd0:	4604      	mov	r4, r0
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	891b      	ldrh	r3, [r3, #8]
 8015bd6:	461d      	mov	r5, r3
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	68db      	ldr	r3, [r3, #12]
 8015bdc:	899b      	ldrh	r3, [r3, #12]
 8015bde:	b29b      	uxth	r3, r3
 8015be0:	4618      	mov	r0, r3
 8015be2:	f7f8 fe84 	bl	800e8ee <lwip_htons>
 8015be6:	4603      	mov	r3, r0
 8015be8:	b2db      	uxtb	r3, r3
 8015bea:	f003 0303 	and.w	r3, r3, #3
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d001      	beq.n	8015bf6 <tcp_rexmit_rto_prepare+0xba>
 8015bf2:	2301      	movs	r3, #1
 8015bf4:	e000      	b.n	8015bf8 <tcp_rexmit_rto_prepare+0xbc>
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	442b      	add	r3, r5
 8015bfa:	18e2      	adds	r2, r4, r3
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	2200      	movs	r2, #0
 8015c04:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015c06:	2300      	movs	r3, #0
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	3710      	adds	r7, #16
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8015c10:	0801dfb8 	.word	0x0801dfb8
 8015c14:	0801e5f4 	.word	0x0801e5f4
 8015c18:	0801e00c 	.word	0x0801e00c

08015c1c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b082      	sub	sp, #8
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d106      	bne.n	8015c38 <tcp_rexmit_rto_commit+0x1c>
 8015c2a:	4b0d      	ldr	r3, [pc, #52]	; (8015c60 <tcp_rexmit_rto_commit+0x44>)
 8015c2c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015c30:	490c      	ldr	r1, [pc, #48]	; (8015c64 <tcp_rexmit_rto_commit+0x48>)
 8015c32:	480d      	ldr	r0, [pc, #52]	; (8015c68 <tcp_rexmit_rto_commit+0x4c>)
 8015c34:	f004 fa80 	bl	801a138 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015c3e:	2bff      	cmp	r3, #255	; 0xff
 8015c40:	d007      	beq.n	8015c52 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015c48:	3301      	adds	r3, #1
 8015c4a:	b2da      	uxtb	r2, r3
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015c52:	6878      	ldr	r0, [r7, #4]
 8015c54:	f7ff fc80 	bl	8015558 <tcp_output>
}
 8015c58:	bf00      	nop
 8015c5a:	3708      	adds	r7, #8
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	bd80      	pop	{r7, pc}
 8015c60:	0801dfb8 	.word	0x0801dfb8
 8015c64:	0801e618 	.word	0x0801e618
 8015c68:	0801e00c 	.word	0x0801e00c

08015c6c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b082      	sub	sp, #8
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d106      	bne.n	8015c88 <tcp_rexmit_rto+0x1c>
 8015c7a:	4b0a      	ldr	r3, [pc, #40]	; (8015ca4 <tcp_rexmit_rto+0x38>)
 8015c7c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015c80:	4909      	ldr	r1, [pc, #36]	; (8015ca8 <tcp_rexmit_rto+0x3c>)
 8015c82:	480a      	ldr	r0, [pc, #40]	; (8015cac <tcp_rexmit_rto+0x40>)
 8015c84:	f004 fa58 	bl	801a138 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015c88:	6878      	ldr	r0, [r7, #4]
 8015c8a:	f7ff ff57 	bl	8015b3c <tcp_rexmit_rto_prepare>
 8015c8e:	4603      	mov	r3, r0
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d102      	bne.n	8015c9a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015c94:	6878      	ldr	r0, [r7, #4]
 8015c96:	f7ff ffc1 	bl	8015c1c <tcp_rexmit_rto_commit>
  }
}
 8015c9a:	bf00      	nop
 8015c9c:	3708      	adds	r7, #8
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	bd80      	pop	{r7, pc}
 8015ca2:	bf00      	nop
 8015ca4:	0801dfb8 	.word	0x0801dfb8
 8015ca8:	0801e63c 	.word	0x0801e63c
 8015cac:	0801e00c 	.word	0x0801e00c

08015cb0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015cb0:	b590      	push	{r4, r7, lr}
 8015cb2:	b085      	sub	sp, #20
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d106      	bne.n	8015ccc <tcp_rexmit+0x1c>
 8015cbe:	4b2f      	ldr	r3, [pc, #188]	; (8015d7c <tcp_rexmit+0xcc>)
 8015cc0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015cc4:	492e      	ldr	r1, [pc, #184]	; (8015d80 <tcp_rexmit+0xd0>)
 8015cc6:	482f      	ldr	r0, [pc, #188]	; (8015d84 <tcp_rexmit+0xd4>)
 8015cc8:	f004 fa36 	bl	801a138 <iprintf>

  if (pcb->unacked == NULL) {
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d102      	bne.n	8015cda <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015cd4:	f06f 0305 	mvn.w	r3, #5
 8015cd8:	e04c      	b.n	8015d74 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015cde:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015ce0:	68b8      	ldr	r0, [r7, #8]
 8015ce2:	f7ff fe2d 	bl	8015940 <tcp_output_segment_busy>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d002      	beq.n	8015cf2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015cec:	f06f 0305 	mvn.w	r3, #5
 8015cf0:	e040      	b.n	8015d74 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015cf2:	68bb      	ldr	r3, [r7, #8]
 8015cf4:	681a      	ldr	r2, [r3, #0]
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	336c      	adds	r3, #108	; 0x6c
 8015cfe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015d00:	e002      	b.n	8015d08 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d011      	beq.n	8015d34 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	68db      	ldr	r3, [r3, #12]
 8015d16:	685b      	ldr	r3, [r3, #4]
 8015d18:	4618      	mov	r0, r3
 8015d1a:	f7f8 fdfd 	bl	800e918 <lwip_htonl>
 8015d1e:	4604      	mov	r4, r0
 8015d20:	68bb      	ldr	r3, [r7, #8]
 8015d22:	68db      	ldr	r3, [r3, #12]
 8015d24:	685b      	ldr	r3, [r3, #4]
 8015d26:	4618      	mov	r0, r3
 8015d28:	f7f8 fdf6 	bl	800e918 <lwip_htonl>
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	dbe6      	blt.n	8015d02 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	681a      	ldr	r2, [r3, #0]
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	68ba      	ldr	r2, [r7, #8]
 8015d40:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015d42:	68bb      	ldr	r3, [r7, #8]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d103      	bne.n	8015d52 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015d58:	2bff      	cmp	r3, #255	; 0xff
 8015d5a:	d007      	beq.n	8015d6c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015d62:	3301      	adds	r3, #1
 8015d64:	b2da      	uxtb	r2, r3
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	2200      	movs	r2, #0
 8015d70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015d72:	2300      	movs	r3, #0
}
 8015d74:	4618      	mov	r0, r3
 8015d76:	3714      	adds	r7, #20
 8015d78:	46bd      	mov	sp, r7
 8015d7a:	bd90      	pop	{r4, r7, pc}
 8015d7c:	0801dfb8 	.word	0x0801dfb8
 8015d80:	0801e658 	.word	0x0801e658
 8015d84:	0801e00c 	.word	0x0801e00c

08015d88 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b082      	sub	sp, #8
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d106      	bne.n	8015da4 <tcp_rexmit_fast+0x1c>
 8015d96:	4b2a      	ldr	r3, [pc, #168]	; (8015e40 <tcp_rexmit_fast+0xb8>)
 8015d98:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015d9c:	4929      	ldr	r1, [pc, #164]	; (8015e44 <tcp_rexmit_fast+0xbc>)
 8015d9e:	482a      	ldr	r0, [pc, #168]	; (8015e48 <tcp_rexmit_fast+0xc0>)
 8015da0:	f004 f9ca 	bl	801a138 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d044      	beq.n	8015e36 <tcp_rexmit_fast+0xae>
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	8b5b      	ldrh	r3, [r3, #26]
 8015db0:	f003 0304 	and.w	r3, r3, #4
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d13e      	bne.n	8015e36 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015db8:	6878      	ldr	r0, [r7, #4]
 8015dba:	f7ff ff79 	bl	8015cb0 <tcp_rexmit>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d138      	bne.n	8015e36 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015dd0:	4293      	cmp	r3, r2
 8015dd2:	bf28      	it	cs
 8015dd4:	4613      	movcs	r3, r2
 8015dd6:	b29b      	uxth	r3, r3
 8015dd8:	0fda      	lsrs	r2, r3, #31
 8015dda:	4413      	add	r3, r2
 8015ddc:	105b      	asrs	r3, r3, #1
 8015dde:	b29a      	uxth	r2, r3
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015dec:	461a      	mov	r2, r3
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015df2:	005b      	lsls	r3, r3, #1
 8015df4:	429a      	cmp	r2, r3
 8015df6:	d206      	bcs.n	8015e06 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015dfc:	005b      	lsls	r3, r3, #1
 8015dfe:	b29a      	uxth	r2, r3
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e10:	4619      	mov	r1, r3
 8015e12:	0049      	lsls	r1, r1, #1
 8015e14:	440b      	add	r3, r1
 8015e16:	b29b      	uxth	r3, r3
 8015e18:	4413      	add	r3, r2
 8015e1a:	b29a      	uxth	r2, r3
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	8b5b      	ldrh	r3, [r3, #26]
 8015e26:	f043 0304 	orr.w	r3, r3, #4
 8015e2a:	b29a      	uxth	r2, r3
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	2200      	movs	r2, #0
 8015e34:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015e36:	bf00      	nop
 8015e38:	3708      	adds	r7, #8
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	bd80      	pop	{r7, pc}
 8015e3e:	bf00      	nop
 8015e40:	0801dfb8 	.word	0x0801dfb8
 8015e44:	0801e670 	.word	0x0801e670
 8015e48:	0801e00c 	.word	0x0801e00c

08015e4c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b086      	sub	sp, #24
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	60f8      	str	r0, [r7, #12]
 8015e54:	607b      	str	r3, [r7, #4]
 8015e56:	460b      	mov	r3, r1
 8015e58:	817b      	strh	r3, [r7, #10]
 8015e5a:	4613      	mov	r3, r2
 8015e5c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015e5e:	897a      	ldrh	r2, [r7, #10]
 8015e60:	893b      	ldrh	r3, [r7, #8]
 8015e62:	4413      	add	r3, r2
 8015e64:	b29b      	uxth	r3, r3
 8015e66:	3314      	adds	r3, #20
 8015e68:	b29b      	uxth	r3, r3
 8015e6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e6e:	4619      	mov	r1, r3
 8015e70:	2022      	movs	r0, #34	; 0x22
 8015e72:	f7f9 fd1b 	bl	800f8ac <pbuf_alloc>
 8015e76:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015e78:	697b      	ldr	r3, [r7, #20]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d04d      	beq.n	8015f1a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015e7e:	897b      	ldrh	r3, [r7, #10]
 8015e80:	3313      	adds	r3, #19
 8015e82:	697a      	ldr	r2, [r7, #20]
 8015e84:	8952      	ldrh	r2, [r2, #10]
 8015e86:	4293      	cmp	r3, r2
 8015e88:	db06      	blt.n	8015e98 <tcp_output_alloc_header_common+0x4c>
 8015e8a:	4b26      	ldr	r3, [pc, #152]	; (8015f24 <tcp_output_alloc_header_common+0xd8>)
 8015e8c:	f240 7223 	movw	r2, #1827	; 0x723
 8015e90:	4925      	ldr	r1, [pc, #148]	; (8015f28 <tcp_output_alloc_header_common+0xdc>)
 8015e92:	4826      	ldr	r0, [pc, #152]	; (8015f2c <tcp_output_alloc_header_common+0xe0>)
 8015e94:	f004 f950 	bl	801a138 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015e98:	697b      	ldr	r3, [r7, #20]
 8015e9a:	685b      	ldr	r3, [r3, #4]
 8015e9c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015e9e:	8c3b      	ldrh	r3, [r7, #32]
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	f7f8 fd24 	bl	800e8ee <lwip_htons>
 8015ea6:	4603      	mov	r3, r0
 8015ea8:	461a      	mov	r2, r3
 8015eaa:	693b      	ldr	r3, [r7, #16]
 8015eac:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015eae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f7f8 fd1c 	bl	800e8ee <lwip_htons>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	461a      	mov	r2, r3
 8015eba:	693b      	ldr	r3, [r7, #16]
 8015ebc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015ebe:	693b      	ldr	r3, [r7, #16]
 8015ec0:	687a      	ldr	r2, [r7, #4]
 8015ec2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015ec4:	68f8      	ldr	r0, [r7, #12]
 8015ec6:	f7f8 fd27 	bl	800e918 <lwip_htonl>
 8015eca:	4602      	mov	r2, r0
 8015ecc:	693b      	ldr	r3, [r7, #16]
 8015ece:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015ed0:	897b      	ldrh	r3, [r7, #10]
 8015ed2:	089b      	lsrs	r3, r3, #2
 8015ed4:	b29b      	uxth	r3, r3
 8015ed6:	3305      	adds	r3, #5
 8015ed8:	b29b      	uxth	r3, r3
 8015eda:	031b      	lsls	r3, r3, #12
 8015edc:	b29a      	uxth	r2, r3
 8015ede:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015ee2:	b29b      	uxth	r3, r3
 8015ee4:	4313      	orrs	r3, r2
 8015ee6:	b29b      	uxth	r3, r3
 8015ee8:	4618      	mov	r0, r3
 8015eea:	f7f8 fd00 	bl	800e8ee <lwip_htons>
 8015eee:	4603      	mov	r3, r0
 8015ef0:	461a      	mov	r2, r3
 8015ef2:	693b      	ldr	r3, [r7, #16]
 8015ef4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015ef6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f7f8 fcf8 	bl	800e8ee <lwip_htons>
 8015efe:	4603      	mov	r3, r0
 8015f00:	461a      	mov	r2, r3
 8015f02:	693b      	ldr	r3, [r7, #16]
 8015f04:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015f06:	693b      	ldr	r3, [r7, #16]
 8015f08:	2200      	movs	r2, #0
 8015f0a:	741a      	strb	r2, [r3, #16]
 8015f0c:	2200      	movs	r2, #0
 8015f0e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015f10:	693b      	ldr	r3, [r7, #16]
 8015f12:	2200      	movs	r2, #0
 8015f14:	749a      	strb	r2, [r3, #18]
 8015f16:	2200      	movs	r2, #0
 8015f18:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015f1a:	697b      	ldr	r3, [r7, #20]
}
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	3718      	adds	r7, #24
 8015f20:	46bd      	mov	sp, r7
 8015f22:	bd80      	pop	{r7, pc}
 8015f24:	0801dfb8 	.word	0x0801dfb8
 8015f28:	0801e690 	.word	0x0801e690
 8015f2c:	0801e00c 	.word	0x0801e00c

08015f30 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015f30:	b5b0      	push	{r4, r5, r7, lr}
 8015f32:	b08a      	sub	sp, #40	; 0x28
 8015f34:	af04      	add	r7, sp, #16
 8015f36:	60f8      	str	r0, [r7, #12]
 8015f38:	607b      	str	r3, [r7, #4]
 8015f3a:	460b      	mov	r3, r1
 8015f3c:	817b      	strh	r3, [r7, #10]
 8015f3e:	4613      	mov	r3, r2
 8015f40:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d106      	bne.n	8015f56 <tcp_output_alloc_header+0x26>
 8015f48:	4b15      	ldr	r3, [pc, #84]	; (8015fa0 <tcp_output_alloc_header+0x70>)
 8015f4a:	f240 7242 	movw	r2, #1858	; 0x742
 8015f4e:	4915      	ldr	r1, [pc, #84]	; (8015fa4 <tcp_output_alloc_header+0x74>)
 8015f50:	4815      	ldr	r0, [pc, #84]	; (8015fa8 <tcp_output_alloc_header+0x78>)
 8015f52:	f004 f8f1 	bl	801a138 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	8adb      	ldrh	r3, [r3, #22]
 8015f5e:	68fa      	ldr	r2, [r7, #12]
 8015f60:	8b12      	ldrh	r2, [r2, #24]
 8015f62:	68f9      	ldr	r1, [r7, #12]
 8015f64:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015f66:	893d      	ldrh	r5, [r7, #8]
 8015f68:	897c      	ldrh	r4, [r7, #10]
 8015f6a:	9103      	str	r1, [sp, #12]
 8015f6c:	2110      	movs	r1, #16
 8015f6e:	9102      	str	r1, [sp, #8]
 8015f70:	9201      	str	r2, [sp, #4]
 8015f72:	9300      	str	r3, [sp, #0]
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	462a      	mov	r2, r5
 8015f78:	4621      	mov	r1, r4
 8015f7a:	f7ff ff67 	bl	8015e4c <tcp_output_alloc_header_common>
 8015f7e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015f80:	697b      	ldr	r3, [r7, #20]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d006      	beq.n	8015f94 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f8a:	68fa      	ldr	r2, [r7, #12]
 8015f8c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015f8e:	441a      	add	r2, r3
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015f94:	697b      	ldr	r3, [r7, #20]
}
 8015f96:	4618      	mov	r0, r3
 8015f98:	3718      	adds	r7, #24
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8015f9e:	bf00      	nop
 8015fa0:	0801dfb8 	.word	0x0801dfb8
 8015fa4:	0801e6c0 	.word	0x0801e6c0
 8015fa8:	0801e00c 	.word	0x0801e00c

08015fac <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b088      	sub	sp, #32
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	60f8      	str	r0, [r7, #12]
 8015fb4:	60b9      	str	r1, [r7, #8]
 8015fb6:	4611      	mov	r1, r2
 8015fb8:	461a      	mov	r2, r3
 8015fba:	460b      	mov	r3, r1
 8015fbc:	71fb      	strb	r3, [r7, #7]
 8015fbe:	4613      	mov	r3, r2
 8015fc0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015fc6:	68bb      	ldr	r3, [r7, #8]
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d106      	bne.n	8015fda <tcp_output_fill_options+0x2e>
 8015fcc:	4b13      	ldr	r3, [pc, #76]	; (801601c <tcp_output_fill_options+0x70>)
 8015fce:	f240 7256 	movw	r2, #1878	; 0x756
 8015fd2:	4913      	ldr	r1, [pc, #76]	; (8016020 <tcp_output_fill_options+0x74>)
 8015fd4:	4813      	ldr	r0, [pc, #76]	; (8016024 <tcp_output_fill_options+0x78>)
 8015fd6:	f004 f8af 	bl	801a138 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015fda:	68bb      	ldr	r3, [r7, #8]
 8015fdc:	685b      	ldr	r3, [r3, #4]
 8015fde:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015fe0:	69bb      	ldr	r3, [r7, #24]
 8015fe2:	3314      	adds	r3, #20
 8015fe4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015fe6:	69bb      	ldr	r3, [r7, #24]
 8015fe8:	f103 0214 	add.w	r2, r3, #20
 8015fec:	8bfb      	ldrh	r3, [r7, #30]
 8015fee:	009b      	lsls	r3, r3, #2
 8015ff0:	4619      	mov	r1, r3
 8015ff2:	79fb      	ldrb	r3, [r7, #7]
 8015ff4:	009b      	lsls	r3, r3, #2
 8015ff6:	f003 0304 	and.w	r3, r3, #4
 8015ffa:	440b      	add	r3, r1
 8015ffc:	4413      	add	r3, r2
 8015ffe:	697a      	ldr	r2, [r7, #20]
 8016000:	429a      	cmp	r2, r3
 8016002:	d006      	beq.n	8016012 <tcp_output_fill_options+0x66>
 8016004:	4b05      	ldr	r3, [pc, #20]	; (801601c <tcp_output_fill_options+0x70>)
 8016006:	f240 7275 	movw	r2, #1909	; 0x775
 801600a:	4907      	ldr	r1, [pc, #28]	; (8016028 <tcp_output_fill_options+0x7c>)
 801600c:	4805      	ldr	r0, [pc, #20]	; (8016024 <tcp_output_fill_options+0x78>)
 801600e:	f004 f893 	bl	801a138 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016012:	bf00      	nop
 8016014:	3720      	adds	r7, #32
 8016016:	46bd      	mov	sp, r7
 8016018:	bd80      	pop	{r7, pc}
 801601a:	bf00      	nop
 801601c:	0801dfb8 	.word	0x0801dfb8
 8016020:	0801e6e8 	.word	0x0801e6e8
 8016024:	0801e00c 	.word	0x0801e00c
 8016028:	0801e5e0 	.word	0x0801e5e0

0801602c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b08a      	sub	sp, #40	; 0x28
 8016030:	af04      	add	r7, sp, #16
 8016032:	60f8      	str	r0, [r7, #12]
 8016034:	60b9      	str	r1, [r7, #8]
 8016036:	607a      	str	r2, [r7, #4]
 8016038:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801603a:	68bb      	ldr	r3, [r7, #8]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d106      	bne.n	801604e <tcp_output_control_segment+0x22>
 8016040:	4b1c      	ldr	r3, [pc, #112]	; (80160b4 <tcp_output_control_segment+0x88>)
 8016042:	f240 7287 	movw	r2, #1927	; 0x787
 8016046:	491c      	ldr	r1, [pc, #112]	; (80160b8 <tcp_output_control_segment+0x8c>)
 8016048:	481c      	ldr	r0, [pc, #112]	; (80160bc <tcp_output_control_segment+0x90>)
 801604a:	f004 f875 	bl	801a138 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801604e:	683a      	ldr	r2, [r7, #0]
 8016050:	6879      	ldr	r1, [r7, #4]
 8016052:	68f8      	ldr	r0, [r7, #12]
 8016054:	f7fe fae4 	bl	8014620 <tcp_route>
 8016058:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801605a:	693b      	ldr	r3, [r7, #16]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d102      	bne.n	8016066 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016060:	23fc      	movs	r3, #252	; 0xfc
 8016062:	75fb      	strb	r3, [r7, #23]
 8016064:	e01c      	b.n	80160a0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d006      	beq.n	801607a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	7adb      	ldrb	r3, [r3, #11]
 8016070:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	7a9b      	ldrb	r3, [r3, #10]
 8016076:	757b      	strb	r3, [r7, #21]
 8016078:	e003      	b.n	8016082 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801607a:	23ff      	movs	r3, #255	; 0xff
 801607c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801607e:	2300      	movs	r3, #0
 8016080:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8016082:	7dba      	ldrb	r2, [r7, #22]
 8016084:	693b      	ldr	r3, [r7, #16]
 8016086:	9302      	str	r3, [sp, #8]
 8016088:	2306      	movs	r3, #6
 801608a:	9301      	str	r3, [sp, #4]
 801608c:	7d7b      	ldrb	r3, [r7, #21]
 801608e:	9300      	str	r3, [sp, #0]
 8016090:	4613      	mov	r3, r2
 8016092:	683a      	ldr	r2, [r7, #0]
 8016094:	6879      	ldr	r1, [r7, #4]
 8016096:	68b8      	ldr	r0, [r7, #8]
 8016098:	f001 ff70 	bl	8017f7c <ip4_output_if>
 801609c:	4603      	mov	r3, r0
 801609e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80160a0:	68b8      	ldr	r0, [r7, #8]
 80160a2:	f7f9 fee7 	bl	800fe74 <pbuf_free>
  return err;
 80160a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80160aa:	4618      	mov	r0, r3
 80160ac:	3718      	adds	r7, #24
 80160ae:	46bd      	mov	sp, r7
 80160b0:	bd80      	pop	{r7, pc}
 80160b2:	bf00      	nop
 80160b4:	0801dfb8 	.word	0x0801dfb8
 80160b8:	0801e710 	.word	0x0801e710
 80160bc:	0801e00c 	.word	0x0801e00c

080160c0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80160c0:	b590      	push	{r4, r7, lr}
 80160c2:	b08b      	sub	sp, #44	; 0x2c
 80160c4:	af04      	add	r7, sp, #16
 80160c6:	60f8      	str	r0, [r7, #12]
 80160c8:	60b9      	str	r1, [r7, #8]
 80160ca:	607a      	str	r2, [r7, #4]
 80160cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80160ce:	683b      	ldr	r3, [r7, #0]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d106      	bne.n	80160e2 <tcp_rst+0x22>
 80160d4:	4b1f      	ldr	r3, [pc, #124]	; (8016154 <tcp_rst+0x94>)
 80160d6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80160da:	491f      	ldr	r1, [pc, #124]	; (8016158 <tcp_rst+0x98>)
 80160dc:	481f      	ldr	r0, [pc, #124]	; (801615c <tcp_rst+0x9c>)
 80160de:	f004 f82b 	bl	801a138 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80160e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d106      	bne.n	80160f6 <tcp_rst+0x36>
 80160e8:	4b1a      	ldr	r3, [pc, #104]	; (8016154 <tcp_rst+0x94>)
 80160ea:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80160ee:	491c      	ldr	r1, [pc, #112]	; (8016160 <tcp_rst+0xa0>)
 80160f0:	481a      	ldr	r0, [pc, #104]	; (801615c <tcp_rst+0x9c>)
 80160f2:	f004 f821 	bl	801a138 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80160f6:	2300      	movs	r3, #0
 80160f8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80160fa:	f646 0310 	movw	r3, #26640	; 0x6810
 80160fe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016100:	7dfb      	ldrb	r3, [r7, #23]
 8016102:	b29c      	uxth	r4, r3
 8016104:	68b8      	ldr	r0, [r7, #8]
 8016106:	f7f8 fc07 	bl	800e918 <lwip_htonl>
 801610a:	4602      	mov	r2, r0
 801610c:	8abb      	ldrh	r3, [r7, #20]
 801610e:	9303      	str	r3, [sp, #12]
 8016110:	2314      	movs	r3, #20
 8016112:	9302      	str	r3, [sp, #8]
 8016114:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016116:	9301      	str	r3, [sp, #4]
 8016118:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801611a:	9300      	str	r3, [sp, #0]
 801611c:	4613      	mov	r3, r2
 801611e:	2200      	movs	r2, #0
 8016120:	4621      	mov	r1, r4
 8016122:	6878      	ldr	r0, [r7, #4]
 8016124:	f7ff fe92 	bl	8015e4c <tcp_output_alloc_header_common>
 8016128:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d00c      	beq.n	801614a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016130:	7dfb      	ldrb	r3, [r7, #23]
 8016132:	2200      	movs	r2, #0
 8016134:	6939      	ldr	r1, [r7, #16]
 8016136:	68f8      	ldr	r0, [r7, #12]
 8016138:	f7ff ff38 	bl	8015fac <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801613e:	683a      	ldr	r2, [r7, #0]
 8016140:	6939      	ldr	r1, [r7, #16]
 8016142:	68f8      	ldr	r0, [r7, #12]
 8016144:	f7ff ff72 	bl	801602c <tcp_output_control_segment>
 8016148:	e000      	b.n	801614c <tcp_rst+0x8c>
    return;
 801614a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801614c:	371c      	adds	r7, #28
 801614e:	46bd      	mov	sp, r7
 8016150:	bd90      	pop	{r4, r7, pc}
 8016152:	bf00      	nop
 8016154:	0801dfb8 	.word	0x0801dfb8
 8016158:	0801e73c 	.word	0x0801e73c
 801615c:	0801e00c 	.word	0x0801e00c
 8016160:	0801e758 	.word	0x0801e758

08016164 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016164:	b590      	push	{r4, r7, lr}
 8016166:	b087      	sub	sp, #28
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801616c:	2300      	movs	r3, #0
 801616e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016170:	2300      	movs	r3, #0
 8016172:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d106      	bne.n	8016188 <tcp_send_empty_ack+0x24>
 801617a:	4b28      	ldr	r3, [pc, #160]	; (801621c <tcp_send_empty_ack+0xb8>)
 801617c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016180:	4927      	ldr	r1, [pc, #156]	; (8016220 <tcp_send_empty_ack+0xbc>)
 8016182:	4828      	ldr	r0, [pc, #160]	; (8016224 <tcp_send_empty_ack+0xc0>)
 8016184:	f003 ffd8 	bl	801a138 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016188:	7dfb      	ldrb	r3, [r7, #23]
 801618a:	009b      	lsls	r3, r3, #2
 801618c:	b2db      	uxtb	r3, r3
 801618e:	f003 0304 	and.w	r3, r3, #4
 8016192:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016194:	7d7b      	ldrb	r3, [r7, #21]
 8016196:	b29c      	uxth	r4, r3
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801619c:	4618      	mov	r0, r3
 801619e:	f7f8 fbbb 	bl	800e918 <lwip_htonl>
 80161a2:	4603      	mov	r3, r0
 80161a4:	2200      	movs	r2, #0
 80161a6:	4621      	mov	r1, r4
 80161a8:	6878      	ldr	r0, [r7, #4]
 80161aa:	f7ff fec1 	bl	8015f30 <tcp_output_alloc_header>
 80161ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80161b0:	693b      	ldr	r3, [r7, #16]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d109      	bne.n	80161ca <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	8b5b      	ldrh	r3, [r3, #26]
 80161ba:	f043 0303 	orr.w	r3, r3, #3
 80161be:	b29a      	uxth	r2, r3
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80161c4:	f06f 0301 	mvn.w	r3, #1
 80161c8:	e023      	b.n	8016212 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80161ca:	7dbb      	ldrb	r3, [r7, #22]
 80161cc:	7dfa      	ldrb	r2, [r7, #23]
 80161ce:	6939      	ldr	r1, [r7, #16]
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f7ff feeb 	bl	8015fac <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80161d6:	687a      	ldr	r2, [r7, #4]
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	3304      	adds	r3, #4
 80161dc:	6939      	ldr	r1, [r7, #16]
 80161de:	6878      	ldr	r0, [r7, #4]
 80161e0:	f7ff ff24 	bl	801602c <tcp_output_control_segment>
 80161e4:	4603      	mov	r3, r0
 80161e6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80161e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d007      	beq.n	8016200 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	8b5b      	ldrh	r3, [r3, #26]
 80161f4:	f043 0303 	orr.w	r3, r3, #3
 80161f8:	b29a      	uxth	r2, r3
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	835a      	strh	r2, [r3, #26]
 80161fe:	e006      	b.n	801620e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	8b5b      	ldrh	r3, [r3, #26]
 8016204:	f023 0303 	bic.w	r3, r3, #3
 8016208:	b29a      	uxth	r2, r3
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801620e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016212:	4618      	mov	r0, r3
 8016214:	371c      	adds	r7, #28
 8016216:	46bd      	mov	sp, r7
 8016218:	bd90      	pop	{r4, r7, pc}
 801621a:	bf00      	nop
 801621c:	0801dfb8 	.word	0x0801dfb8
 8016220:	0801e774 	.word	0x0801e774
 8016224:	0801e00c 	.word	0x0801e00c

08016228 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016228:	b590      	push	{r4, r7, lr}
 801622a:	b087      	sub	sp, #28
 801622c:	af00      	add	r7, sp, #0
 801622e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016230:	2300      	movs	r3, #0
 8016232:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d106      	bne.n	8016248 <tcp_keepalive+0x20>
 801623a:	4b18      	ldr	r3, [pc, #96]	; (801629c <tcp_keepalive+0x74>)
 801623c:	f640 0224 	movw	r2, #2084	; 0x824
 8016240:	4917      	ldr	r1, [pc, #92]	; (80162a0 <tcp_keepalive+0x78>)
 8016242:	4818      	ldr	r0, [pc, #96]	; (80162a4 <tcp_keepalive+0x7c>)
 8016244:	f003 ff78 	bl	801a138 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016248:	7dfb      	ldrb	r3, [r7, #23]
 801624a:	b29c      	uxth	r4, r3
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016250:	3b01      	subs	r3, #1
 8016252:	4618      	mov	r0, r3
 8016254:	f7f8 fb60 	bl	800e918 <lwip_htonl>
 8016258:	4603      	mov	r3, r0
 801625a:	2200      	movs	r2, #0
 801625c:	4621      	mov	r1, r4
 801625e:	6878      	ldr	r0, [r7, #4]
 8016260:	f7ff fe66 	bl	8015f30 <tcp_output_alloc_header>
 8016264:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016266:	693b      	ldr	r3, [r7, #16]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d102      	bne.n	8016272 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801626c:	f04f 33ff 	mov.w	r3, #4294967295
 8016270:	e010      	b.n	8016294 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016272:	7dfb      	ldrb	r3, [r7, #23]
 8016274:	2200      	movs	r2, #0
 8016276:	6939      	ldr	r1, [r7, #16]
 8016278:	6878      	ldr	r0, [r7, #4]
 801627a:	f7ff fe97 	bl	8015fac <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801627e:	687a      	ldr	r2, [r7, #4]
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	3304      	adds	r3, #4
 8016284:	6939      	ldr	r1, [r7, #16]
 8016286:	6878      	ldr	r0, [r7, #4]
 8016288:	f7ff fed0 	bl	801602c <tcp_output_control_segment>
 801628c:	4603      	mov	r3, r0
 801628e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016290:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016294:	4618      	mov	r0, r3
 8016296:	371c      	adds	r7, #28
 8016298:	46bd      	mov	sp, r7
 801629a:	bd90      	pop	{r4, r7, pc}
 801629c:	0801dfb8 	.word	0x0801dfb8
 80162a0:	0801e794 	.word	0x0801e794
 80162a4:	0801e00c 	.word	0x0801e00c

080162a8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80162a8:	b590      	push	{r4, r7, lr}
 80162aa:	b08b      	sub	sp, #44	; 0x2c
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80162b0:	2300      	movs	r3, #0
 80162b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d106      	bne.n	80162ca <tcp_zero_window_probe+0x22>
 80162bc:	4b4c      	ldr	r3, [pc, #304]	; (80163f0 <tcp_zero_window_probe+0x148>)
 80162be:	f640 024f 	movw	r2, #2127	; 0x84f
 80162c2:	494c      	ldr	r1, [pc, #304]	; (80163f4 <tcp_zero_window_probe+0x14c>)
 80162c4:	484c      	ldr	r0, [pc, #304]	; (80163f8 <tcp_zero_window_probe+0x150>)
 80162c6:	f003 ff37 	bl	801a138 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162ce:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80162d0:	6a3b      	ldr	r3, [r7, #32]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d101      	bne.n	80162da <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80162d6:	2300      	movs	r3, #0
 80162d8:	e086      	b.n	80163e8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80162e0:	2bff      	cmp	r3, #255	; 0xff
 80162e2:	d007      	beq.n	80162f4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80162ea:	3301      	adds	r3, #1
 80162ec:	b2da      	uxtb	r2, r3
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80162f4:	6a3b      	ldr	r3, [r7, #32]
 80162f6:	68db      	ldr	r3, [r3, #12]
 80162f8:	899b      	ldrh	r3, [r3, #12]
 80162fa:	b29b      	uxth	r3, r3
 80162fc:	4618      	mov	r0, r3
 80162fe:	f7f8 faf6 	bl	800e8ee <lwip_htons>
 8016302:	4603      	mov	r3, r0
 8016304:	b2db      	uxtb	r3, r3
 8016306:	f003 0301 	and.w	r3, r3, #1
 801630a:	2b00      	cmp	r3, #0
 801630c:	d005      	beq.n	801631a <tcp_zero_window_probe+0x72>
 801630e:	6a3b      	ldr	r3, [r7, #32]
 8016310:	891b      	ldrh	r3, [r3, #8]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d101      	bne.n	801631a <tcp_zero_window_probe+0x72>
 8016316:	2301      	movs	r3, #1
 8016318:	e000      	b.n	801631c <tcp_zero_window_probe+0x74>
 801631a:	2300      	movs	r3, #0
 801631c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801631e:	7ffb      	ldrb	r3, [r7, #31]
 8016320:	2b00      	cmp	r3, #0
 8016322:	bf0c      	ite	eq
 8016324:	2301      	moveq	r3, #1
 8016326:	2300      	movne	r3, #0
 8016328:	b2db      	uxtb	r3, r3
 801632a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801632c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016330:	b299      	uxth	r1, r3
 8016332:	6a3b      	ldr	r3, [r7, #32]
 8016334:	68db      	ldr	r3, [r3, #12]
 8016336:	685b      	ldr	r3, [r3, #4]
 8016338:	8bba      	ldrh	r2, [r7, #28]
 801633a:	6878      	ldr	r0, [r7, #4]
 801633c:	f7ff fdf8 	bl	8015f30 <tcp_output_alloc_header>
 8016340:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016342:	69bb      	ldr	r3, [r7, #24]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d102      	bne.n	801634e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016348:	f04f 33ff 	mov.w	r3, #4294967295
 801634c:	e04c      	b.n	80163e8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801634e:	69bb      	ldr	r3, [r7, #24]
 8016350:	685b      	ldr	r3, [r3, #4]
 8016352:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016354:	7ffb      	ldrb	r3, [r7, #31]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d011      	beq.n	801637e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801635a:	697b      	ldr	r3, [r7, #20]
 801635c:	899b      	ldrh	r3, [r3, #12]
 801635e:	b29b      	uxth	r3, r3
 8016360:	b21b      	sxth	r3, r3
 8016362:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016366:	b21c      	sxth	r4, r3
 8016368:	2011      	movs	r0, #17
 801636a:	f7f8 fac0 	bl	800e8ee <lwip_htons>
 801636e:	4603      	mov	r3, r0
 8016370:	b21b      	sxth	r3, r3
 8016372:	4323      	orrs	r3, r4
 8016374:	b21b      	sxth	r3, r3
 8016376:	b29a      	uxth	r2, r3
 8016378:	697b      	ldr	r3, [r7, #20]
 801637a:	819a      	strh	r2, [r3, #12]
 801637c:	e010      	b.n	80163a0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801637e:	69bb      	ldr	r3, [r7, #24]
 8016380:	685b      	ldr	r3, [r3, #4]
 8016382:	3314      	adds	r3, #20
 8016384:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8016386:	6a3b      	ldr	r3, [r7, #32]
 8016388:	6858      	ldr	r0, [r3, #4]
 801638a:	6a3b      	ldr	r3, [r7, #32]
 801638c:	685b      	ldr	r3, [r3, #4]
 801638e:	891a      	ldrh	r2, [r3, #8]
 8016390:	6a3b      	ldr	r3, [r7, #32]
 8016392:	891b      	ldrh	r3, [r3, #8]
 8016394:	1ad3      	subs	r3, r2, r3
 8016396:	b29b      	uxth	r3, r3
 8016398:	2201      	movs	r2, #1
 801639a:	6939      	ldr	r1, [r7, #16]
 801639c:	f7f9 ff54 	bl	8010248 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80163a0:	6a3b      	ldr	r3, [r7, #32]
 80163a2:	68db      	ldr	r3, [r3, #12]
 80163a4:	685b      	ldr	r3, [r3, #4]
 80163a6:	4618      	mov	r0, r3
 80163a8:	f7f8 fab6 	bl	800e918 <lwip_htonl>
 80163ac:	4603      	mov	r3, r0
 80163ae:	3301      	adds	r3, #1
 80163b0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	1ad3      	subs	r3, r2, r3
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	da02      	bge.n	80163c4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	68fa      	ldr	r2, [r7, #12]
 80163c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80163c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163c8:	2200      	movs	r2, #0
 80163ca:	69b9      	ldr	r1, [r7, #24]
 80163cc:	6878      	ldr	r0, [r7, #4]
 80163ce:	f7ff fded 	bl	8015fac <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80163d2:	687a      	ldr	r2, [r7, #4]
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	3304      	adds	r3, #4
 80163d8:	69b9      	ldr	r1, [r7, #24]
 80163da:	6878      	ldr	r0, [r7, #4]
 80163dc:	f7ff fe26 	bl	801602c <tcp_output_control_segment>
 80163e0:	4603      	mov	r3, r0
 80163e2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80163e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80163e8:	4618      	mov	r0, r3
 80163ea:	372c      	adds	r7, #44	; 0x2c
 80163ec:	46bd      	mov	sp, r7
 80163ee:	bd90      	pop	{r4, r7, pc}
 80163f0:	0801dfb8 	.word	0x0801dfb8
 80163f4:	0801e7b0 	.word	0x0801e7b0
 80163f8:	0801e00c 	.word	0x0801e00c

080163fc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b082      	sub	sp, #8
 8016400:	af00      	add	r7, sp, #0
 8016402:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016404:	f7fa f8a0 	bl	8010548 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016408:	4b0a      	ldr	r3, [pc, #40]	; (8016434 <tcpip_tcp_timer+0x38>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d103      	bne.n	8016418 <tcpip_tcp_timer+0x1c>
 8016410:	4b09      	ldr	r3, [pc, #36]	; (8016438 <tcpip_tcp_timer+0x3c>)
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d005      	beq.n	8016424 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016418:	2200      	movs	r2, #0
 801641a:	4908      	ldr	r1, [pc, #32]	; (801643c <tcpip_tcp_timer+0x40>)
 801641c:	20fa      	movs	r0, #250	; 0xfa
 801641e:	f000 f8f3 	bl	8016608 <sys_timeout>
 8016422:	e003      	b.n	801642c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016424:	4b06      	ldr	r3, [pc, #24]	; (8016440 <tcpip_tcp_timer+0x44>)
 8016426:	2200      	movs	r2, #0
 8016428:	601a      	str	r2, [r3, #0]
  }
}
 801642a:	bf00      	nop
 801642c:	bf00      	nop
 801642e:	3708      	adds	r7, #8
 8016430:	46bd      	mov	sp, r7
 8016432:	bd80      	pop	{r7, pc}
 8016434:	2001890c 	.word	0x2001890c
 8016438:	2001891c 	.word	0x2001891c
 801643c:	080163fd 	.word	0x080163fd
 8016440:	20000854 	.word	0x20000854

08016444 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016448:	4b0a      	ldr	r3, [pc, #40]	; (8016474 <tcp_timer_needed+0x30>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d10f      	bne.n	8016470 <tcp_timer_needed+0x2c>
 8016450:	4b09      	ldr	r3, [pc, #36]	; (8016478 <tcp_timer_needed+0x34>)
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d103      	bne.n	8016460 <tcp_timer_needed+0x1c>
 8016458:	4b08      	ldr	r3, [pc, #32]	; (801647c <tcp_timer_needed+0x38>)
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d007      	beq.n	8016470 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016460:	4b04      	ldr	r3, [pc, #16]	; (8016474 <tcp_timer_needed+0x30>)
 8016462:	2201      	movs	r2, #1
 8016464:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016466:	2200      	movs	r2, #0
 8016468:	4905      	ldr	r1, [pc, #20]	; (8016480 <tcp_timer_needed+0x3c>)
 801646a:	20fa      	movs	r0, #250	; 0xfa
 801646c:	f000 f8cc 	bl	8016608 <sys_timeout>
  }
}
 8016470:	bf00      	nop
 8016472:	bd80      	pop	{r7, pc}
 8016474:	20000854 	.word	0x20000854
 8016478:	2001890c 	.word	0x2001890c
 801647c:	2001891c 	.word	0x2001891c
 8016480:	080163fd 	.word	0x080163fd

08016484 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b086      	sub	sp, #24
 8016488:	af00      	add	r7, sp, #0
 801648a:	60f8      	str	r0, [r7, #12]
 801648c:	60b9      	str	r1, [r7, #8]
 801648e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016490:	2006      	movs	r0, #6
 8016492:	f7f8 fe91 	bl	800f1b8 <memp_malloc>
 8016496:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016498:	693b      	ldr	r3, [r7, #16]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d109      	bne.n	80164b2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801649e:	693b      	ldr	r3, [r7, #16]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d151      	bne.n	8016548 <sys_timeout_abs+0xc4>
 80164a4:	4b2a      	ldr	r3, [pc, #168]	; (8016550 <sys_timeout_abs+0xcc>)
 80164a6:	22be      	movs	r2, #190	; 0xbe
 80164a8:	492a      	ldr	r1, [pc, #168]	; (8016554 <sys_timeout_abs+0xd0>)
 80164aa:	482b      	ldr	r0, [pc, #172]	; (8016558 <sys_timeout_abs+0xd4>)
 80164ac:	f003 fe44 	bl	801a138 <iprintf>
    return;
 80164b0:	e04a      	b.n	8016548 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80164b2:	693b      	ldr	r3, [r7, #16]
 80164b4:	2200      	movs	r2, #0
 80164b6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80164b8:	693b      	ldr	r3, [r7, #16]
 80164ba:	68ba      	ldr	r2, [r7, #8]
 80164bc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80164be:	693b      	ldr	r3, [r7, #16]
 80164c0:	687a      	ldr	r2, [r7, #4]
 80164c2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80164c4:	693b      	ldr	r3, [r7, #16]
 80164c6:	68fa      	ldr	r2, [r7, #12]
 80164c8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80164ca:	4b24      	ldr	r3, [pc, #144]	; (801655c <sys_timeout_abs+0xd8>)
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d103      	bne.n	80164da <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80164d2:	4a22      	ldr	r2, [pc, #136]	; (801655c <sys_timeout_abs+0xd8>)
 80164d4:	693b      	ldr	r3, [r7, #16]
 80164d6:	6013      	str	r3, [r2, #0]
    return;
 80164d8:	e037      	b.n	801654a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80164da:	693b      	ldr	r3, [r7, #16]
 80164dc:	685a      	ldr	r2, [r3, #4]
 80164de:	4b1f      	ldr	r3, [pc, #124]	; (801655c <sys_timeout_abs+0xd8>)
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	685b      	ldr	r3, [r3, #4]
 80164e4:	1ad3      	subs	r3, r2, r3
 80164e6:	0fdb      	lsrs	r3, r3, #31
 80164e8:	f003 0301 	and.w	r3, r3, #1
 80164ec:	b2db      	uxtb	r3, r3
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d007      	beq.n	8016502 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80164f2:	4b1a      	ldr	r3, [pc, #104]	; (801655c <sys_timeout_abs+0xd8>)
 80164f4:	681a      	ldr	r2, [r3, #0]
 80164f6:	693b      	ldr	r3, [r7, #16]
 80164f8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80164fa:	4a18      	ldr	r2, [pc, #96]	; (801655c <sys_timeout_abs+0xd8>)
 80164fc:	693b      	ldr	r3, [r7, #16]
 80164fe:	6013      	str	r3, [r2, #0]
 8016500:	e023      	b.n	801654a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016502:	4b16      	ldr	r3, [pc, #88]	; (801655c <sys_timeout_abs+0xd8>)
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	617b      	str	r3, [r7, #20]
 8016508:	e01a      	b.n	8016540 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801650a:	697b      	ldr	r3, [r7, #20]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d00b      	beq.n	801652a <sys_timeout_abs+0xa6>
 8016512:	693b      	ldr	r3, [r7, #16]
 8016514:	685a      	ldr	r2, [r3, #4]
 8016516:	697b      	ldr	r3, [r7, #20]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	685b      	ldr	r3, [r3, #4]
 801651c:	1ad3      	subs	r3, r2, r3
 801651e:	0fdb      	lsrs	r3, r3, #31
 8016520:	f003 0301 	and.w	r3, r3, #1
 8016524:	b2db      	uxtb	r3, r3
 8016526:	2b00      	cmp	r3, #0
 8016528:	d007      	beq.n	801653a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801652a:	697b      	ldr	r3, [r7, #20]
 801652c:	681a      	ldr	r2, [r3, #0]
 801652e:	693b      	ldr	r3, [r7, #16]
 8016530:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016532:	697b      	ldr	r3, [r7, #20]
 8016534:	693a      	ldr	r2, [r7, #16]
 8016536:	601a      	str	r2, [r3, #0]
        break;
 8016538:	e007      	b.n	801654a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801653a:	697b      	ldr	r3, [r7, #20]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	617b      	str	r3, [r7, #20]
 8016540:	697b      	ldr	r3, [r7, #20]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d1e1      	bne.n	801650a <sys_timeout_abs+0x86>
 8016546:	e000      	b.n	801654a <sys_timeout_abs+0xc6>
    return;
 8016548:	bf00      	nop
      }
    }
  }
}
 801654a:	3718      	adds	r7, #24
 801654c:	46bd      	mov	sp, r7
 801654e:	bd80      	pop	{r7, pc}
 8016550:	0801e7d4 	.word	0x0801e7d4
 8016554:	0801e808 	.word	0x0801e808
 8016558:	0801e848 	.word	0x0801e848
 801655c:	2000084c 	.word	0x2000084c

08016560 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b086      	sub	sp, #24
 8016564:	af00      	add	r7, sp, #0
 8016566:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801656c:	697b      	ldr	r3, [r7, #20]
 801656e:	685b      	ldr	r3, [r3, #4]
 8016570:	4798      	blx	r3

  now = sys_now();
 8016572:	f7f4 fecd 	bl	800b310 <sys_now>
 8016576:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016578:	697b      	ldr	r3, [r7, #20]
 801657a:	681a      	ldr	r2, [r3, #0]
 801657c:	4b0f      	ldr	r3, [pc, #60]	; (80165bc <lwip_cyclic_timer+0x5c>)
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	4413      	add	r3, r2
 8016582:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016584:	68fa      	ldr	r2, [r7, #12]
 8016586:	693b      	ldr	r3, [r7, #16]
 8016588:	1ad3      	subs	r3, r2, r3
 801658a:	0fdb      	lsrs	r3, r3, #31
 801658c:	f003 0301 	and.w	r3, r3, #1
 8016590:	b2db      	uxtb	r3, r3
 8016592:	2b00      	cmp	r3, #0
 8016594:	d009      	beq.n	80165aa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016596:	697b      	ldr	r3, [r7, #20]
 8016598:	681a      	ldr	r2, [r3, #0]
 801659a:	693b      	ldr	r3, [r7, #16]
 801659c:	4413      	add	r3, r2
 801659e:	687a      	ldr	r2, [r7, #4]
 80165a0:	4907      	ldr	r1, [pc, #28]	; (80165c0 <lwip_cyclic_timer+0x60>)
 80165a2:	4618      	mov	r0, r3
 80165a4:	f7ff ff6e 	bl	8016484 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80165a8:	e004      	b.n	80165b4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80165aa:	687a      	ldr	r2, [r7, #4]
 80165ac:	4904      	ldr	r1, [pc, #16]	; (80165c0 <lwip_cyclic_timer+0x60>)
 80165ae:	68f8      	ldr	r0, [r7, #12]
 80165b0:	f7ff ff68 	bl	8016484 <sys_timeout_abs>
}
 80165b4:	bf00      	nop
 80165b6:	3718      	adds	r7, #24
 80165b8:	46bd      	mov	sp, r7
 80165ba:	bd80      	pop	{r7, pc}
 80165bc:	20000850 	.word	0x20000850
 80165c0:	08016561 	.word	0x08016561

080165c4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80165c4:	b580      	push	{r7, lr}
 80165c6:	b082      	sub	sp, #8
 80165c8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80165ca:	2301      	movs	r3, #1
 80165cc:	607b      	str	r3, [r7, #4]
 80165ce:	e00e      	b.n	80165ee <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80165d0:	4a0b      	ldr	r2, [pc, #44]	; (8016600 <sys_timeouts_init+0x3c>)
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	00db      	lsls	r3, r3, #3
 80165dc:	4a08      	ldr	r2, [pc, #32]	; (8016600 <sys_timeouts_init+0x3c>)
 80165de:	4413      	add	r3, r2
 80165e0:	461a      	mov	r2, r3
 80165e2:	4908      	ldr	r1, [pc, #32]	; (8016604 <sys_timeouts_init+0x40>)
 80165e4:	f000 f810 	bl	8016608 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	3301      	adds	r3, #1
 80165ec:	607b      	str	r3, [r7, #4]
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	2b02      	cmp	r3, #2
 80165f2:	d9ed      	bls.n	80165d0 <sys_timeouts_init+0xc>
  }
}
 80165f4:	bf00      	nop
 80165f6:	bf00      	nop
 80165f8:	3708      	adds	r7, #8
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bd80      	pop	{r7, pc}
 80165fe:	bf00      	nop
 8016600:	0801f544 	.word	0x0801f544
 8016604:	08016561 	.word	0x08016561

08016608 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016608:	b580      	push	{r7, lr}
 801660a:	b086      	sub	sp, #24
 801660c:	af00      	add	r7, sp, #0
 801660e:	60f8      	str	r0, [r7, #12]
 8016610:	60b9      	str	r1, [r7, #8]
 8016612:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801661a:	d306      	bcc.n	801662a <sys_timeout+0x22>
 801661c:	4b0a      	ldr	r3, [pc, #40]	; (8016648 <sys_timeout+0x40>)
 801661e:	f240 1229 	movw	r2, #297	; 0x129
 8016622:	490a      	ldr	r1, [pc, #40]	; (801664c <sys_timeout+0x44>)
 8016624:	480a      	ldr	r0, [pc, #40]	; (8016650 <sys_timeout+0x48>)
 8016626:	f003 fd87 	bl	801a138 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801662a:	f7f4 fe71 	bl	800b310 <sys_now>
 801662e:	4602      	mov	r2, r0
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	4413      	add	r3, r2
 8016634:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8016636:	687a      	ldr	r2, [r7, #4]
 8016638:	68b9      	ldr	r1, [r7, #8]
 801663a:	6978      	ldr	r0, [r7, #20]
 801663c:	f7ff ff22 	bl	8016484 <sys_timeout_abs>
#endif
}
 8016640:	bf00      	nop
 8016642:	3718      	adds	r7, #24
 8016644:	46bd      	mov	sp, r7
 8016646:	bd80      	pop	{r7, pc}
 8016648:	0801e7d4 	.word	0x0801e7d4
 801664c:	0801e870 	.word	0x0801e870
 8016650:	0801e848 	.word	0x0801e848

08016654 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b084      	sub	sp, #16
 8016658:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801665a:	f7f4 fe59 	bl	800b310 <sys_now>
 801665e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8016660:	4b1a      	ldr	r3, [pc, #104]	; (80166cc <sys_check_timeouts+0x78>)
 8016662:	781b      	ldrb	r3, [r3, #0]
 8016664:	b2db      	uxtb	r3, r3
 8016666:	2b00      	cmp	r3, #0
 8016668:	d001      	beq.n	801666e <sys_check_timeouts+0x1a>
 801666a:	f7f9 f8c9 	bl	800f800 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801666e:	4b18      	ldr	r3, [pc, #96]	; (80166d0 <sys_check_timeouts+0x7c>)
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8016674:	68bb      	ldr	r3, [r7, #8]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d022      	beq.n	80166c0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801667a:	68bb      	ldr	r3, [r7, #8]
 801667c:	685b      	ldr	r3, [r3, #4]
 801667e:	68fa      	ldr	r2, [r7, #12]
 8016680:	1ad3      	subs	r3, r2, r3
 8016682:	0fdb      	lsrs	r3, r3, #31
 8016684:	f003 0301 	and.w	r3, r3, #1
 8016688:	b2db      	uxtb	r3, r3
 801668a:	2b00      	cmp	r3, #0
 801668c:	d11a      	bne.n	80166c4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801668e:	68bb      	ldr	r3, [r7, #8]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	4a0f      	ldr	r2, [pc, #60]	; (80166d0 <sys_check_timeouts+0x7c>)
 8016694:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016696:	68bb      	ldr	r3, [r7, #8]
 8016698:	689b      	ldr	r3, [r3, #8]
 801669a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801669c:	68bb      	ldr	r3, [r7, #8]
 801669e:	68db      	ldr	r3, [r3, #12]
 80166a0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80166a2:	68bb      	ldr	r3, [r7, #8]
 80166a4:	685b      	ldr	r3, [r3, #4]
 80166a6:	4a0b      	ldr	r2, [pc, #44]	; (80166d4 <sys_check_timeouts+0x80>)
 80166a8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80166aa:	68b9      	ldr	r1, [r7, #8]
 80166ac:	2006      	movs	r0, #6
 80166ae:	f7f8 fdcf 	bl	800f250 <memp_free>
    if (handler != NULL) {
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d0d3      	beq.n	8016660 <sys_check_timeouts+0xc>
      handler(arg);
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	6838      	ldr	r0, [r7, #0]
 80166bc:	4798      	blx	r3
  do {
 80166be:	e7cf      	b.n	8016660 <sys_check_timeouts+0xc>
      return;
 80166c0:	bf00      	nop
 80166c2:	e000      	b.n	80166c6 <sys_check_timeouts+0x72>
      return;
 80166c4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80166c6:	3710      	adds	r7, #16
 80166c8:	46bd      	mov	sp, r7
 80166ca:	bd80      	pop	{r7, pc}
 80166cc:	20018904 	.word	0x20018904
 80166d0:	2000084c 	.word	0x2000084c
 80166d4:	20000850 	.word	0x20000850

080166d8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80166d8:	b580      	push	{r7, lr}
 80166da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80166dc:	f003 fd5a 	bl	801a194 <rand>
 80166e0:	4603      	mov	r3, r0
 80166e2:	b29b      	uxth	r3, r3
 80166e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80166e8:	b29b      	uxth	r3, r3
 80166ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80166ee:	b29a      	uxth	r2, r3
 80166f0:	4b01      	ldr	r3, [pc, #4]	; (80166f8 <udp_init+0x20>)
 80166f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80166f4:	bf00      	nop
 80166f6:	bd80      	pop	{r7, pc}
 80166f8:	200005b4 	.word	0x200005b4

080166fc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b084      	sub	sp, #16
 8016700:	af00      	add	r7, sp, #0
 8016702:	60f8      	str	r0, [r7, #12]
 8016704:	60b9      	str	r1, [r7, #8]
 8016706:	4613      	mov	r3, r2
 8016708:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d105      	bne.n	801671c <udp_input_local_match+0x20>
 8016710:	4b27      	ldr	r3, [pc, #156]	; (80167b0 <udp_input_local_match+0xb4>)
 8016712:	2287      	movs	r2, #135	; 0x87
 8016714:	4927      	ldr	r1, [pc, #156]	; (80167b4 <udp_input_local_match+0xb8>)
 8016716:	4828      	ldr	r0, [pc, #160]	; (80167b8 <udp_input_local_match+0xbc>)
 8016718:	f003 fd0e 	bl	801a138 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801671c:	68bb      	ldr	r3, [r7, #8]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d105      	bne.n	801672e <udp_input_local_match+0x32>
 8016722:	4b23      	ldr	r3, [pc, #140]	; (80167b0 <udp_input_local_match+0xb4>)
 8016724:	2288      	movs	r2, #136	; 0x88
 8016726:	4925      	ldr	r1, [pc, #148]	; (80167bc <udp_input_local_match+0xc0>)
 8016728:	4823      	ldr	r0, [pc, #140]	; (80167b8 <udp_input_local_match+0xbc>)
 801672a:	f003 fd05 	bl	801a138 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	7a1b      	ldrb	r3, [r3, #8]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d00b      	beq.n	801674e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	7a1a      	ldrb	r2, [r3, #8]
 801673a:	4b21      	ldr	r3, [pc, #132]	; (80167c0 <udp_input_local_match+0xc4>)
 801673c:	685b      	ldr	r3, [r3, #4]
 801673e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016742:	3301      	adds	r3, #1
 8016744:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016746:	429a      	cmp	r2, r3
 8016748:	d001      	beq.n	801674e <udp_input_local_match+0x52>
    return 0;
 801674a:	2300      	movs	r3, #0
 801674c:	e02b      	b.n	80167a6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801674e:	79fb      	ldrb	r3, [r7, #7]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d018      	beq.n	8016786 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d013      	beq.n	8016782 <udp_input_local_match+0x86>
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d00f      	beq.n	8016782 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016762:	4b17      	ldr	r3, [pc, #92]	; (80167c0 <udp_input_local_match+0xc4>)
 8016764:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016766:	f1b3 3fff 	cmp.w	r3, #4294967295
 801676a:	d00a      	beq.n	8016782 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	681a      	ldr	r2, [r3, #0]
 8016770:	4b13      	ldr	r3, [pc, #76]	; (80167c0 <udp_input_local_match+0xc4>)
 8016772:	695b      	ldr	r3, [r3, #20]
 8016774:	405a      	eors	r2, r3
 8016776:	68bb      	ldr	r3, [r7, #8]
 8016778:	3308      	adds	r3, #8
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801677e:	2b00      	cmp	r3, #0
 8016780:	d110      	bne.n	80167a4 <udp_input_local_match+0xa8>
          return 1;
 8016782:	2301      	movs	r3, #1
 8016784:	e00f      	b.n	80167a6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d009      	beq.n	80167a0 <udp_input_local_match+0xa4>
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d005      	beq.n	80167a0 <udp_input_local_match+0xa4>
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	681a      	ldr	r2, [r3, #0]
 8016798:	4b09      	ldr	r3, [pc, #36]	; (80167c0 <udp_input_local_match+0xc4>)
 801679a:	695b      	ldr	r3, [r3, #20]
 801679c:	429a      	cmp	r2, r3
 801679e:	d101      	bne.n	80167a4 <udp_input_local_match+0xa8>
        return 1;
 80167a0:	2301      	movs	r3, #1
 80167a2:	e000      	b.n	80167a6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80167a4:	2300      	movs	r3, #0
}
 80167a6:	4618      	mov	r0, r3
 80167a8:	3710      	adds	r7, #16
 80167aa:	46bd      	mov	sp, r7
 80167ac:	bd80      	pop	{r7, pc}
 80167ae:	bf00      	nop
 80167b0:	0801e8bc 	.word	0x0801e8bc
 80167b4:	0801e8ec 	.word	0x0801e8ec
 80167b8:	0801e910 	.word	0x0801e910
 80167bc:	0801e938 	.word	0x0801e938
 80167c0:	20007ca8 	.word	0x20007ca8

080167c4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80167c4:	b590      	push	{r4, r7, lr}
 80167c6:	b08d      	sub	sp, #52	; 0x34
 80167c8:	af02      	add	r7, sp, #8
 80167ca:	6078      	str	r0, [r7, #4]
 80167cc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80167ce:	2300      	movs	r3, #0
 80167d0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d105      	bne.n	80167e4 <udp_input+0x20>
 80167d8:	4b7c      	ldr	r3, [pc, #496]	; (80169cc <udp_input+0x208>)
 80167da:	22cf      	movs	r2, #207	; 0xcf
 80167dc:	497c      	ldr	r1, [pc, #496]	; (80169d0 <udp_input+0x20c>)
 80167de:	487d      	ldr	r0, [pc, #500]	; (80169d4 <udp_input+0x210>)
 80167e0:	f003 fcaa 	bl	801a138 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80167e4:	683b      	ldr	r3, [r7, #0]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d105      	bne.n	80167f6 <udp_input+0x32>
 80167ea:	4b78      	ldr	r3, [pc, #480]	; (80169cc <udp_input+0x208>)
 80167ec:	22d0      	movs	r2, #208	; 0xd0
 80167ee:	497a      	ldr	r1, [pc, #488]	; (80169d8 <udp_input+0x214>)
 80167f0:	4878      	ldr	r0, [pc, #480]	; (80169d4 <udp_input+0x210>)
 80167f2:	f003 fca1 	bl	801a138 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	895b      	ldrh	r3, [r3, #10]
 80167fa:	2b07      	cmp	r3, #7
 80167fc:	d803      	bhi.n	8016806 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80167fe:	6878      	ldr	r0, [r7, #4]
 8016800:	f7f9 fb38 	bl	800fe74 <pbuf_free>
    goto end;
 8016804:	e0de      	b.n	80169c4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	685b      	ldr	r3, [r3, #4]
 801680a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801680c:	4b73      	ldr	r3, [pc, #460]	; (80169dc <udp_input+0x218>)
 801680e:	695b      	ldr	r3, [r3, #20]
 8016810:	4a72      	ldr	r2, [pc, #456]	; (80169dc <udp_input+0x218>)
 8016812:	6812      	ldr	r2, [r2, #0]
 8016814:	4611      	mov	r1, r2
 8016816:	4618      	mov	r0, r3
 8016818:	f001 fc88 	bl	801812c <ip4_addr_isbroadcast_u32>
 801681c:	4603      	mov	r3, r0
 801681e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016820:	697b      	ldr	r3, [r7, #20]
 8016822:	881b      	ldrh	r3, [r3, #0]
 8016824:	b29b      	uxth	r3, r3
 8016826:	4618      	mov	r0, r3
 8016828:	f7f8 f861 	bl	800e8ee <lwip_htons>
 801682c:	4603      	mov	r3, r0
 801682e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016830:	697b      	ldr	r3, [r7, #20]
 8016832:	885b      	ldrh	r3, [r3, #2]
 8016834:	b29b      	uxth	r3, r3
 8016836:	4618      	mov	r0, r3
 8016838:	f7f8 f859 	bl	800e8ee <lwip_htons>
 801683c:	4603      	mov	r3, r0
 801683e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016840:	2300      	movs	r3, #0
 8016842:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016844:	2300      	movs	r3, #0
 8016846:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016848:	2300      	movs	r3, #0
 801684a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801684c:	4b64      	ldr	r3, [pc, #400]	; (80169e0 <udp_input+0x21c>)
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	627b      	str	r3, [r7, #36]	; 0x24
 8016852:	e054      	b.n	80168fe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016856:	8a5b      	ldrh	r3, [r3, #18]
 8016858:	89fa      	ldrh	r2, [r7, #14]
 801685a:	429a      	cmp	r2, r3
 801685c:	d14a      	bne.n	80168f4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801685e:	7cfb      	ldrb	r3, [r7, #19]
 8016860:	461a      	mov	r2, r3
 8016862:	6839      	ldr	r1, [r7, #0]
 8016864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016866:	f7ff ff49 	bl	80166fc <udp_input_local_match>
 801686a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801686c:	2b00      	cmp	r3, #0
 801686e:	d041      	beq.n	80168f4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016872:	7c1b      	ldrb	r3, [r3, #16]
 8016874:	f003 0304 	and.w	r3, r3, #4
 8016878:	2b00      	cmp	r3, #0
 801687a:	d11d      	bne.n	80168b8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801687c:	69fb      	ldr	r3, [r7, #28]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d102      	bne.n	8016888 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016884:	61fb      	str	r3, [r7, #28]
 8016886:	e017      	b.n	80168b8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016888:	7cfb      	ldrb	r3, [r7, #19]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d014      	beq.n	80168b8 <udp_input+0xf4>
 801688e:	4b53      	ldr	r3, [pc, #332]	; (80169dc <udp_input+0x218>)
 8016890:	695b      	ldr	r3, [r3, #20]
 8016892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016896:	d10f      	bne.n	80168b8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016898:	69fb      	ldr	r3, [r7, #28]
 801689a:	681a      	ldr	r2, [r3, #0]
 801689c:	683b      	ldr	r3, [r7, #0]
 801689e:	3304      	adds	r3, #4
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	429a      	cmp	r2, r3
 80168a4:	d008      	beq.n	80168b8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80168a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168a8:	681a      	ldr	r2, [r3, #0]
 80168aa:	683b      	ldr	r3, [r7, #0]
 80168ac:	3304      	adds	r3, #4
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	429a      	cmp	r2, r3
 80168b2:	d101      	bne.n	80168b8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80168b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168b6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80168b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ba:	8a9b      	ldrh	r3, [r3, #20]
 80168bc:	8a3a      	ldrh	r2, [r7, #16]
 80168be:	429a      	cmp	r2, r3
 80168c0:	d118      	bne.n	80168f4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80168c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168c4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d005      	beq.n	80168d6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80168ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168cc:	685a      	ldr	r2, [r3, #4]
 80168ce:	4b43      	ldr	r3, [pc, #268]	; (80169dc <udp_input+0x218>)
 80168d0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80168d2:	429a      	cmp	r2, r3
 80168d4:	d10e      	bne.n	80168f4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80168d6:	6a3b      	ldr	r3, [r7, #32]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d014      	beq.n	8016906 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80168dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168de:	68da      	ldr	r2, [r3, #12]
 80168e0:	6a3b      	ldr	r3, [r7, #32]
 80168e2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80168e4:	4b3e      	ldr	r3, [pc, #248]	; (80169e0 <udp_input+0x21c>)
 80168e6:	681a      	ldr	r2, [r3, #0]
 80168e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ea:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80168ec:	4a3c      	ldr	r2, [pc, #240]	; (80169e0 <udp_input+0x21c>)
 80168ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168f0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80168f2:	e008      	b.n	8016906 <udp_input+0x142>
      }
    }

    prev = pcb;
 80168f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168f6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80168f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168fa:	68db      	ldr	r3, [r3, #12]
 80168fc:	627b      	str	r3, [r7, #36]	; 0x24
 80168fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016900:	2b00      	cmp	r3, #0
 8016902:	d1a7      	bne.n	8016854 <udp_input+0x90>
 8016904:	e000      	b.n	8016908 <udp_input+0x144>
        break;
 8016906:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801690a:	2b00      	cmp	r3, #0
 801690c:	d101      	bne.n	8016912 <udp_input+0x14e>
    pcb = uncon_pcb;
 801690e:	69fb      	ldr	r3, [r7, #28]
 8016910:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016914:	2b00      	cmp	r3, #0
 8016916:	d002      	beq.n	801691e <udp_input+0x15a>
    for_us = 1;
 8016918:	2301      	movs	r3, #1
 801691a:	76fb      	strb	r3, [r7, #27]
 801691c:	e00a      	b.n	8016934 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801691e:	683b      	ldr	r3, [r7, #0]
 8016920:	3304      	adds	r3, #4
 8016922:	681a      	ldr	r2, [r3, #0]
 8016924:	4b2d      	ldr	r3, [pc, #180]	; (80169dc <udp_input+0x218>)
 8016926:	695b      	ldr	r3, [r3, #20]
 8016928:	429a      	cmp	r2, r3
 801692a:	bf0c      	ite	eq
 801692c:	2301      	moveq	r3, #1
 801692e:	2300      	movne	r3, #0
 8016930:	b2db      	uxtb	r3, r3
 8016932:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016934:	7efb      	ldrb	r3, [r7, #27]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d041      	beq.n	80169be <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801693a:	2108      	movs	r1, #8
 801693c:	6878      	ldr	r0, [r7, #4]
 801693e:	f7f9 fa13 	bl	800fd68 <pbuf_remove_header>
 8016942:	4603      	mov	r3, r0
 8016944:	2b00      	cmp	r3, #0
 8016946:	d00a      	beq.n	801695e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016948:	4b20      	ldr	r3, [pc, #128]	; (80169cc <udp_input+0x208>)
 801694a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801694e:	4925      	ldr	r1, [pc, #148]	; (80169e4 <udp_input+0x220>)
 8016950:	4820      	ldr	r0, [pc, #128]	; (80169d4 <udp_input+0x210>)
 8016952:	f003 fbf1 	bl	801a138 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016956:	6878      	ldr	r0, [r7, #4]
 8016958:	f7f9 fa8c 	bl	800fe74 <pbuf_free>
      goto end;
 801695c:	e032      	b.n	80169c4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016960:	2b00      	cmp	r3, #0
 8016962:	d012      	beq.n	801698a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016966:	699b      	ldr	r3, [r3, #24]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d00a      	beq.n	8016982 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801696e:	699c      	ldr	r4, [r3, #24]
 8016970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016972:	69d8      	ldr	r0, [r3, #28]
 8016974:	8a3b      	ldrh	r3, [r7, #16]
 8016976:	9300      	str	r3, [sp, #0]
 8016978:	4b1b      	ldr	r3, [pc, #108]	; (80169e8 <udp_input+0x224>)
 801697a:	687a      	ldr	r2, [r7, #4]
 801697c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801697e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016980:	e021      	b.n	80169c6 <udp_input+0x202>
        pbuf_free(p);
 8016982:	6878      	ldr	r0, [r7, #4]
 8016984:	f7f9 fa76 	bl	800fe74 <pbuf_free>
        goto end;
 8016988:	e01c      	b.n	80169c4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801698a:	7cfb      	ldrb	r3, [r7, #19]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d112      	bne.n	80169b6 <udp_input+0x1f2>
 8016990:	4b12      	ldr	r3, [pc, #72]	; (80169dc <udp_input+0x218>)
 8016992:	695b      	ldr	r3, [r3, #20]
 8016994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016998:	2be0      	cmp	r3, #224	; 0xe0
 801699a:	d00c      	beq.n	80169b6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801699c:	4b0f      	ldr	r3, [pc, #60]	; (80169dc <udp_input+0x218>)
 801699e:	899b      	ldrh	r3, [r3, #12]
 80169a0:	3308      	adds	r3, #8
 80169a2:	b29b      	uxth	r3, r3
 80169a4:	b21b      	sxth	r3, r3
 80169a6:	4619      	mov	r1, r3
 80169a8:	6878      	ldr	r0, [r7, #4]
 80169aa:	f7f9 fa50 	bl	800fe4e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80169ae:	2103      	movs	r1, #3
 80169b0:	6878      	ldr	r0, [r7, #4]
 80169b2:	f001 f89b 	bl	8017aec <icmp_dest_unreach>
      pbuf_free(p);
 80169b6:	6878      	ldr	r0, [r7, #4]
 80169b8:	f7f9 fa5c 	bl	800fe74 <pbuf_free>
  return;
 80169bc:	e003      	b.n	80169c6 <udp_input+0x202>
    pbuf_free(p);
 80169be:	6878      	ldr	r0, [r7, #4]
 80169c0:	f7f9 fa58 	bl	800fe74 <pbuf_free>
  return;
 80169c4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80169c6:	372c      	adds	r7, #44	; 0x2c
 80169c8:	46bd      	mov	sp, r7
 80169ca:	bd90      	pop	{r4, r7, pc}
 80169cc:	0801e8bc 	.word	0x0801e8bc
 80169d0:	0801e960 	.word	0x0801e960
 80169d4:	0801e910 	.word	0x0801e910
 80169d8:	0801e978 	.word	0x0801e978
 80169dc:	20007ca8 	.word	0x20007ca8
 80169e0:	20018924 	.word	0x20018924
 80169e4:	0801e994 	.word	0x0801e994
 80169e8:	20007cb8 	.word	0x20007cb8

080169ec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80169ec:	b480      	push	{r7}
 80169ee:	b085      	sub	sp, #20
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6078      	str	r0, [r7, #4]
 80169f4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d01e      	beq.n	8016a3a <udp_netif_ip_addr_changed+0x4e>
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d01a      	beq.n	8016a3a <udp_netif_ip_addr_changed+0x4e>
 8016a04:	683b      	ldr	r3, [r7, #0]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d017      	beq.n	8016a3a <udp_netif_ip_addr_changed+0x4e>
 8016a0a:	683b      	ldr	r3, [r7, #0]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d013      	beq.n	8016a3a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016a12:	4b0d      	ldr	r3, [pc, #52]	; (8016a48 <udp_netif_ip_addr_changed+0x5c>)
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	60fb      	str	r3, [r7, #12]
 8016a18:	e00c      	b.n	8016a34 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	681a      	ldr	r2, [r3, #0]
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	429a      	cmp	r2, r3
 8016a24:	d103      	bne.n	8016a2e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016a26:	683b      	ldr	r3, [r7, #0]
 8016a28:	681a      	ldr	r2, [r3, #0]
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	68db      	ldr	r3, [r3, #12]
 8016a32:	60fb      	str	r3, [r7, #12]
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d1ef      	bne.n	8016a1a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016a3a:	bf00      	nop
 8016a3c:	3714      	adds	r7, #20
 8016a3e:	46bd      	mov	sp, r7
 8016a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a44:	4770      	bx	lr
 8016a46:	bf00      	nop
 8016a48:	20018924 	.word	0x20018924

08016a4c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b082      	sub	sp, #8
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016a54:	4915      	ldr	r1, [pc, #84]	; (8016aac <etharp_free_entry+0x60>)
 8016a56:	687a      	ldr	r2, [r7, #4]
 8016a58:	4613      	mov	r3, r2
 8016a5a:	005b      	lsls	r3, r3, #1
 8016a5c:	4413      	add	r3, r2
 8016a5e:	00db      	lsls	r3, r3, #3
 8016a60:	440b      	add	r3, r1
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d013      	beq.n	8016a90 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016a68:	4910      	ldr	r1, [pc, #64]	; (8016aac <etharp_free_entry+0x60>)
 8016a6a:	687a      	ldr	r2, [r7, #4]
 8016a6c:	4613      	mov	r3, r2
 8016a6e:	005b      	lsls	r3, r3, #1
 8016a70:	4413      	add	r3, r2
 8016a72:	00db      	lsls	r3, r3, #3
 8016a74:	440b      	add	r3, r1
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	4618      	mov	r0, r3
 8016a7a:	f7f9 f9fb 	bl	800fe74 <pbuf_free>
    arp_table[i].q = NULL;
 8016a7e:	490b      	ldr	r1, [pc, #44]	; (8016aac <etharp_free_entry+0x60>)
 8016a80:	687a      	ldr	r2, [r7, #4]
 8016a82:	4613      	mov	r3, r2
 8016a84:	005b      	lsls	r3, r3, #1
 8016a86:	4413      	add	r3, r2
 8016a88:	00db      	lsls	r3, r3, #3
 8016a8a:	440b      	add	r3, r1
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016a90:	4906      	ldr	r1, [pc, #24]	; (8016aac <etharp_free_entry+0x60>)
 8016a92:	687a      	ldr	r2, [r7, #4]
 8016a94:	4613      	mov	r3, r2
 8016a96:	005b      	lsls	r3, r3, #1
 8016a98:	4413      	add	r3, r2
 8016a9a:	00db      	lsls	r3, r3, #3
 8016a9c:	440b      	add	r3, r1
 8016a9e:	3314      	adds	r3, #20
 8016aa0:	2200      	movs	r2, #0
 8016aa2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016aa4:	bf00      	nop
 8016aa6:	3708      	adds	r7, #8
 8016aa8:	46bd      	mov	sp, r7
 8016aaa:	bd80      	pop	{r7, pc}
 8016aac:	20000858 	.word	0x20000858

08016ab0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b082      	sub	sp, #8
 8016ab4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	607b      	str	r3, [r7, #4]
 8016aba:	e096      	b.n	8016bea <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016abc:	494f      	ldr	r1, [pc, #316]	; (8016bfc <etharp_tmr+0x14c>)
 8016abe:	687a      	ldr	r2, [r7, #4]
 8016ac0:	4613      	mov	r3, r2
 8016ac2:	005b      	lsls	r3, r3, #1
 8016ac4:	4413      	add	r3, r2
 8016ac6:	00db      	lsls	r3, r3, #3
 8016ac8:	440b      	add	r3, r1
 8016aca:	3314      	adds	r3, #20
 8016acc:	781b      	ldrb	r3, [r3, #0]
 8016ace:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016ad0:	78fb      	ldrb	r3, [r7, #3]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	f000 8086 	beq.w	8016be4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016ad8:	4948      	ldr	r1, [pc, #288]	; (8016bfc <etharp_tmr+0x14c>)
 8016ada:	687a      	ldr	r2, [r7, #4]
 8016adc:	4613      	mov	r3, r2
 8016ade:	005b      	lsls	r3, r3, #1
 8016ae0:	4413      	add	r3, r2
 8016ae2:	00db      	lsls	r3, r3, #3
 8016ae4:	440b      	add	r3, r1
 8016ae6:	3312      	adds	r3, #18
 8016ae8:	881b      	ldrh	r3, [r3, #0]
 8016aea:	3301      	adds	r3, #1
 8016aec:	b298      	uxth	r0, r3
 8016aee:	4943      	ldr	r1, [pc, #268]	; (8016bfc <etharp_tmr+0x14c>)
 8016af0:	687a      	ldr	r2, [r7, #4]
 8016af2:	4613      	mov	r3, r2
 8016af4:	005b      	lsls	r3, r3, #1
 8016af6:	4413      	add	r3, r2
 8016af8:	00db      	lsls	r3, r3, #3
 8016afa:	440b      	add	r3, r1
 8016afc:	3312      	adds	r3, #18
 8016afe:	4602      	mov	r2, r0
 8016b00:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016b02:	493e      	ldr	r1, [pc, #248]	; (8016bfc <etharp_tmr+0x14c>)
 8016b04:	687a      	ldr	r2, [r7, #4]
 8016b06:	4613      	mov	r3, r2
 8016b08:	005b      	lsls	r3, r3, #1
 8016b0a:	4413      	add	r3, r2
 8016b0c:	00db      	lsls	r3, r3, #3
 8016b0e:	440b      	add	r3, r1
 8016b10:	3312      	adds	r3, #18
 8016b12:	881b      	ldrh	r3, [r3, #0]
 8016b14:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016b18:	d215      	bcs.n	8016b46 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016b1a:	4938      	ldr	r1, [pc, #224]	; (8016bfc <etharp_tmr+0x14c>)
 8016b1c:	687a      	ldr	r2, [r7, #4]
 8016b1e:	4613      	mov	r3, r2
 8016b20:	005b      	lsls	r3, r3, #1
 8016b22:	4413      	add	r3, r2
 8016b24:	00db      	lsls	r3, r3, #3
 8016b26:	440b      	add	r3, r1
 8016b28:	3314      	adds	r3, #20
 8016b2a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016b2c:	2b01      	cmp	r3, #1
 8016b2e:	d10e      	bne.n	8016b4e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016b30:	4932      	ldr	r1, [pc, #200]	; (8016bfc <etharp_tmr+0x14c>)
 8016b32:	687a      	ldr	r2, [r7, #4]
 8016b34:	4613      	mov	r3, r2
 8016b36:	005b      	lsls	r3, r3, #1
 8016b38:	4413      	add	r3, r2
 8016b3a:	00db      	lsls	r3, r3, #3
 8016b3c:	440b      	add	r3, r1
 8016b3e:	3312      	adds	r3, #18
 8016b40:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016b42:	2b04      	cmp	r3, #4
 8016b44:	d903      	bls.n	8016b4e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016b46:	6878      	ldr	r0, [r7, #4]
 8016b48:	f7ff ff80 	bl	8016a4c <etharp_free_entry>
 8016b4c:	e04a      	b.n	8016be4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016b4e:	492b      	ldr	r1, [pc, #172]	; (8016bfc <etharp_tmr+0x14c>)
 8016b50:	687a      	ldr	r2, [r7, #4]
 8016b52:	4613      	mov	r3, r2
 8016b54:	005b      	lsls	r3, r3, #1
 8016b56:	4413      	add	r3, r2
 8016b58:	00db      	lsls	r3, r3, #3
 8016b5a:	440b      	add	r3, r1
 8016b5c:	3314      	adds	r3, #20
 8016b5e:	781b      	ldrb	r3, [r3, #0]
 8016b60:	2b03      	cmp	r3, #3
 8016b62:	d10a      	bne.n	8016b7a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016b64:	4925      	ldr	r1, [pc, #148]	; (8016bfc <etharp_tmr+0x14c>)
 8016b66:	687a      	ldr	r2, [r7, #4]
 8016b68:	4613      	mov	r3, r2
 8016b6a:	005b      	lsls	r3, r3, #1
 8016b6c:	4413      	add	r3, r2
 8016b6e:	00db      	lsls	r3, r3, #3
 8016b70:	440b      	add	r3, r1
 8016b72:	3314      	adds	r3, #20
 8016b74:	2204      	movs	r2, #4
 8016b76:	701a      	strb	r2, [r3, #0]
 8016b78:	e034      	b.n	8016be4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016b7a:	4920      	ldr	r1, [pc, #128]	; (8016bfc <etharp_tmr+0x14c>)
 8016b7c:	687a      	ldr	r2, [r7, #4]
 8016b7e:	4613      	mov	r3, r2
 8016b80:	005b      	lsls	r3, r3, #1
 8016b82:	4413      	add	r3, r2
 8016b84:	00db      	lsls	r3, r3, #3
 8016b86:	440b      	add	r3, r1
 8016b88:	3314      	adds	r3, #20
 8016b8a:	781b      	ldrb	r3, [r3, #0]
 8016b8c:	2b04      	cmp	r3, #4
 8016b8e:	d10a      	bne.n	8016ba6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016b90:	491a      	ldr	r1, [pc, #104]	; (8016bfc <etharp_tmr+0x14c>)
 8016b92:	687a      	ldr	r2, [r7, #4]
 8016b94:	4613      	mov	r3, r2
 8016b96:	005b      	lsls	r3, r3, #1
 8016b98:	4413      	add	r3, r2
 8016b9a:	00db      	lsls	r3, r3, #3
 8016b9c:	440b      	add	r3, r1
 8016b9e:	3314      	adds	r3, #20
 8016ba0:	2202      	movs	r2, #2
 8016ba2:	701a      	strb	r2, [r3, #0]
 8016ba4:	e01e      	b.n	8016be4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016ba6:	4915      	ldr	r1, [pc, #84]	; (8016bfc <etharp_tmr+0x14c>)
 8016ba8:	687a      	ldr	r2, [r7, #4]
 8016baa:	4613      	mov	r3, r2
 8016bac:	005b      	lsls	r3, r3, #1
 8016bae:	4413      	add	r3, r2
 8016bb0:	00db      	lsls	r3, r3, #3
 8016bb2:	440b      	add	r3, r1
 8016bb4:	3314      	adds	r3, #20
 8016bb6:	781b      	ldrb	r3, [r3, #0]
 8016bb8:	2b01      	cmp	r3, #1
 8016bba:	d113      	bne.n	8016be4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016bbc:	490f      	ldr	r1, [pc, #60]	; (8016bfc <etharp_tmr+0x14c>)
 8016bbe:	687a      	ldr	r2, [r7, #4]
 8016bc0:	4613      	mov	r3, r2
 8016bc2:	005b      	lsls	r3, r3, #1
 8016bc4:	4413      	add	r3, r2
 8016bc6:	00db      	lsls	r3, r3, #3
 8016bc8:	440b      	add	r3, r1
 8016bca:	3308      	adds	r3, #8
 8016bcc:	6818      	ldr	r0, [r3, #0]
 8016bce:	687a      	ldr	r2, [r7, #4]
 8016bd0:	4613      	mov	r3, r2
 8016bd2:	005b      	lsls	r3, r3, #1
 8016bd4:	4413      	add	r3, r2
 8016bd6:	00db      	lsls	r3, r3, #3
 8016bd8:	4a08      	ldr	r2, [pc, #32]	; (8016bfc <etharp_tmr+0x14c>)
 8016bda:	4413      	add	r3, r2
 8016bdc:	3304      	adds	r3, #4
 8016bde:	4619      	mov	r1, r3
 8016be0:	f000 fe6e 	bl	80178c0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	3301      	adds	r3, #1
 8016be8:	607b      	str	r3, [r7, #4]
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	2b09      	cmp	r3, #9
 8016bee:	f77f af65 	ble.w	8016abc <etharp_tmr+0xc>
      }
    }
  }
}
 8016bf2:	bf00      	nop
 8016bf4:	bf00      	nop
 8016bf6:	3708      	adds	r7, #8
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}
 8016bfc:	20000858 	.word	0x20000858

08016c00 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b08a      	sub	sp, #40	; 0x28
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	60f8      	str	r0, [r7, #12]
 8016c08:	460b      	mov	r3, r1
 8016c0a:	607a      	str	r2, [r7, #4]
 8016c0c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016c0e:	230a      	movs	r3, #10
 8016c10:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016c12:	230a      	movs	r3, #10
 8016c14:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016c16:	230a      	movs	r3, #10
 8016c18:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016c1e:	230a      	movs	r3, #10
 8016c20:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016c22:	2300      	movs	r3, #0
 8016c24:	83bb      	strh	r3, [r7, #28]
 8016c26:	2300      	movs	r3, #0
 8016c28:	837b      	strh	r3, [r7, #26]
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016c2e:	2300      	movs	r3, #0
 8016c30:	843b      	strh	r3, [r7, #32]
 8016c32:	e0ae      	b.n	8016d92 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016c34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c38:	49a6      	ldr	r1, [pc, #664]	; (8016ed4 <etharp_find_entry+0x2d4>)
 8016c3a:	4613      	mov	r3, r2
 8016c3c:	005b      	lsls	r3, r3, #1
 8016c3e:	4413      	add	r3, r2
 8016c40:	00db      	lsls	r3, r3, #3
 8016c42:	440b      	add	r3, r1
 8016c44:	3314      	adds	r3, #20
 8016c46:	781b      	ldrb	r3, [r3, #0]
 8016c48:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016c4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016c4e:	2b0a      	cmp	r3, #10
 8016c50:	d105      	bne.n	8016c5e <etharp_find_entry+0x5e>
 8016c52:	7dfb      	ldrb	r3, [r7, #23]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d102      	bne.n	8016c5e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016c58:	8c3b      	ldrh	r3, [r7, #32]
 8016c5a:	847b      	strh	r3, [r7, #34]	; 0x22
 8016c5c:	e095      	b.n	8016d8a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016c5e:	7dfb      	ldrb	r3, [r7, #23]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	f000 8092 	beq.w	8016d8a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016c66:	7dfb      	ldrb	r3, [r7, #23]
 8016c68:	2b01      	cmp	r3, #1
 8016c6a:	d009      	beq.n	8016c80 <etharp_find_entry+0x80>
 8016c6c:	7dfb      	ldrb	r3, [r7, #23]
 8016c6e:	2b01      	cmp	r3, #1
 8016c70:	d806      	bhi.n	8016c80 <etharp_find_entry+0x80>
 8016c72:	4b99      	ldr	r3, [pc, #612]	; (8016ed8 <etharp_find_entry+0x2d8>)
 8016c74:	f240 1223 	movw	r2, #291	; 0x123
 8016c78:	4998      	ldr	r1, [pc, #608]	; (8016edc <etharp_find_entry+0x2dc>)
 8016c7a:	4899      	ldr	r0, [pc, #612]	; (8016ee0 <etharp_find_entry+0x2e0>)
 8016c7c:	f003 fa5c 	bl	801a138 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d020      	beq.n	8016cc8 <etharp_find_entry+0xc8>
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	6819      	ldr	r1, [r3, #0]
 8016c8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c8e:	4891      	ldr	r0, [pc, #580]	; (8016ed4 <etharp_find_entry+0x2d4>)
 8016c90:	4613      	mov	r3, r2
 8016c92:	005b      	lsls	r3, r3, #1
 8016c94:	4413      	add	r3, r2
 8016c96:	00db      	lsls	r3, r3, #3
 8016c98:	4403      	add	r3, r0
 8016c9a:	3304      	adds	r3, #4
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	4299      	cmp	r1, r3
 8016ca0:	d112      	bne.n	8016cc8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d00c      	beq.n	8016cc2 <etharp_find_entry+0xc2>
 8016ca8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cac:	4989      	ldr	r1, [pc, #548]	; (8016ed4 <etharp_find_entry+0x2d4>)
 8016cae:	4613      	mov	r3, r2
 8016cb0:	005b      	lsls	r3, r3, #1
 8016cb2:	4413      	add	r3, r2
 8016cb4:	00db      	lsls	r3, r3, #3
 8016cb6:	440b      	add	r3, r1
 8016cb8:	3308      	adds	r3, #8
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	687a      	ldr	r2, [r7, #4]
 8016cbe:	429a      	cmp	r2, r3
 8016cc0:	d102      	bne.n	8016cc8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016cc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016cc6:	e100      	b.n	8016eca <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016cc8:	7dfb      	ldrb	r3, [r7, #23]
 8016cca:	2b01      	cmp	r3, #1
 8016ccc:	d140      	bne.n	8016d50 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016cce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cd2:	4980      	ldr	r1, [pc, #512]	; (8016ed4 <etharp_find_entry+0x2d4>)
 8016cd4:	4613      	mov	r3, r2
 8016cd6:	005b      	lsls	r3, r3, #1
 8016cd8:	4413      	add	r3, r2
 8016cda:	00db      	lsls	r3, r3, #3
 8016cdc:	440b      	add	r3, r1
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d01a      	beq.n	8016d1a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016ce4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ce8:	497a      	ldr	r1, [pc, #488]	; (8016ed4 <etharp_find_entry+0x2d4>)
 8016cea:	4613      	mov	r3, r2
 8016cec:	005b      	lsls	r3, r3, #1
 8016cee:	4413      	add	r3, r2
 8016cf0:	00db      	lsls	r3, r3, #3
 8016cf2:	440b      	add	r3, r1
 8016cf4:	3312      	adds	r3, #18
 8016cf6:	881b      	ldrh	r3, [r3, #0]
 8016cf8:	8bba      	ldrh	r2, [r7, #28]
 8016cfa:	429a      	cmp	r2, r3
 8016cfc:	d845      	bhi.n	8016d8a <etharp_find_entry+0x18a>
            old_queue = i;
 8016cfe:	8c3b      	ldrh	r3, [r7, #32]
 8016d00:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016d02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d06:	4973      	ldr	r1, [pc, #460]	; (8016ed4 <etharp_find_entry+0x2d4>)
 8016d08:	4613      	mov	r3, r2
 8016d0a:	005b      	lsls	r3, r3, #1
 8016d0c:	4413      	add	r3, r2
 8016d0e:	00db      	lsls	r3, r3, #3
 8016d10:	440b      	add	r3, r1
 8016d12:	3312      	adds	r3, #18
 8016d14:	881b      	ldrh	r3, [r3, #0]
 8016d16:	83bb      	strh	r3, [r7, #28]
 8016d18:	e037      	b.n	8016d8a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016d1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d1e:	496d      	ldr	r1, [pc, #436]	; (8016ed4 <etharp_find_entry+0x2d4>)
 8016d20:	4613      	mov	r3, r2
 8016d22:	005b      	lsls	r3, r3, #1
 8016d24:	4413      	add	r3, r2
 8016d26:	00db      	lsls	r3, r3, #3
 8016d28:	440b      	add	r3, r1
 8016d2a:	3312      	adds	r3, #18
 8016d2c:	881b      	ldrh	r3, [r3, #0]
 8016d2e:	8b7a      	ldrh	r2, [r7, #26]
 8016d30:	429a      	cmp	r2, r3
 8016d32:	d82a      	bhi.n	8016d8a <etharp_find_entry+0x18a>
            old_pending = i;
 8016d34:	8c3b      	ldrh	r3, [r7, #32]
 8016d36:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016d38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d3c:	4965      	ldr	r1, [pc, #404]	; (8016ed4 <etharp_find_entry+0x2d4>)
 8016d3e:	4613      	mov	r3, r2
 8016d40:	005b      	lsls	r3, r3, #1
 8016d42:	4413      	add	r3, r2
 8016d44:	00db      	lsls	r3, r3, #3
 8016d46:	440b      	add	r3, r1
 8016d48:	3312      	adds	r3, #18
 8016d4a:	881b      	ldrh	r3, [r3, #0]
 8016d4c:	837b      	strh	r3, [r7, #26]
 8016d4e:	e01c      	b.n	8016d8a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016d50:	7dfb      	ldrb	r3, [r7, #23]
 8016d52:	2b01      	cmp	r3, #1
 8016d54:	d919      	bls.n	8016d8a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016d56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d5a:	495e      	ldr	r1, [pc, #376]	; (8016ed4 <etharp_find_entry+0x2d4>)
 8016d5c:	4613      	mov	r3, r2
 8016d5e:	005b      	lsls	r3, r3, #1
 8016d60:	4413      	add	r3, r2
 8016d62:	00db      	lsls	r3, r3, #3
 8016d64:	440b      	add	r3, r1
 8016d66:	3312      	adds	r3, #18
 8016d68:	881b      	ldrh	r3, [r3, #0]
 8016d6a:	8b3a      	ldrh	r2, [r7, #24]
 8016d6c:	429a      	cmp	r2, r3
 8016d6e:	d80c      	bhi.n	8016d8a <etharp_find_entry+0x18a>
            old_stable = i;
 8016d70:	8c3b      	ldrh	r3, [r7, #32]
 8016d72:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016d74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d78:	4956      	ldr	r1, [pc, #344]	; (8016ed4 <etharp_find_entry+0x2d4>)
 8016d7a:	4613      	mov	r3, r2
 8016d7c:	005b      	lsls	r3, r3, #1
 8016d7e:	4413      	add	r3, r2
 8016d80:	00db      	lsls	r3, r3, #3
 8016d82:	440b      	add	r3, r1
 8016d84:	3312      	adds	r3, #18
 8016d86:	881b      	ldrh	r3, [r3, #0]
 8016d88:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d8a:	8c3b      	ldrh	r3, [r7, #32]
 8016d8c:	3301      	adds	r3, #1
 8016d8e:	b29b      	uxth	r3, r3
 8016d90:	843b      	strh	r3, [r7, #32]
 8016d92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016d96:	2b09      	cmp	r3, #9
 8016d98:	f77f af4c 	ble.w	8016c34 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016d9c:	7afb      	ldrb	r3, [r7, #11]
 8016d9e:	f003 0302 	and.w	r3, r3, #2
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d108      	bne.n	8016db8 <etharp_find_entry+0x1b8>
 8016da6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016daa:	2b0a      	cmp	r3, #10
 8016dac:	d107      	bne.n	8016dbe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016dae:	7afb      	ldrb	r3, [r7, #11]
 8016db0:	f003 0301 	and.w	r3, r3, #1
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d102      	bne.n	8016dbe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016db8:	f04f 33ff 	mov.w	r3, #4294967295
 8016dbc:	e085      	b.n	8016eca <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016dbe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016dc2:	2b09      	cmp	r3, #9
 8016dc4:	dc02      	bgt.n	8016dcc <etharp_find_entry+0x1cc>
    i = empty;
 8016dc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016dc8:	843b      	strh	r3, [r7, #32]
 8016dca:	e039      	b.n	8016e40 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016dcc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016dd0:	2b09      	cmp	r3, #9
 8016dd2:	dc14      	bgt.n	8016dfe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016dd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016dd6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016dd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ddc:	493d      	ldr	r1, [pc, #244]	; (8016ed4 <etharp_find_entry+0x2d4>)
 8016dde:	4613      	mov	r3, r2
 8016de0:	005b      	lsls	r3, r3, #1
 8016de2:	4413      	add	r3, r2
 8016de4:	00db      	lsls	r3, r3, #3
 8016de6:	440b      	add	r3, r1
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d018      	beq.n	8016e20 <etharp_find_entry+0x220>
 8016dee:	4b3a      	ldr	r3, [pc, #232]	; (8016ed8 <etharp_find_entry+0x2d8>)
 8016df0:	f240 126d 	movw	r2, #365	; 0x16d
 8016df4:	493b      	ldr	r1, [pc, #236]	; (8016ee4 <etharp_find_entry+0x2e4>)
 8016df6:	483a      	ldr	r0, [pc, #232]	; (8016ee0 <etharp_find_entry+0x2e0>)
 8016df8:	f003 f99e 	bl	801a138 <iprintf>
 8016dfc:	e010      	b.n	8016e20 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016dfe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016e02:	2b09      	cmp	r3, #9
 8016e04:	dc02      	bgt.n	8016e0c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016e06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016e08:	843b      	strh	r3, [r7, #32]
 8016e0a:	e009      	b.n	8016e20 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016e0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016e10:	2b09      	cmp	r3, #9
 8016e12:	dc02      	bgt.n	8016e1a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016e14:	8bfb      	ldrh	r3, [r7, #30]
 8016e16:	843b      	strh	r3, [r7, #32]
 8016e18:	e002      	b.n	8016e20 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8016e1e:	e054      	b.n	8016eca <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016e20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016e24:	2b09      	cmp	r3, #9
 8016e26:	dd06      	ble.n	8016e36 <etharp_find_entry+0x236>
 8016e28:	4b2b      	ldr	r3, [pc, #172]	; (8016ed8 <etharp_find_entry+0x2d8>)
 8016e2a:	f240 127f 	movw	r2, #383	; 0x17f
 8016e2e:	492e      	ldr	r1, [pc, #184]	; (8016ee8 <etharp_find_entry+0x2e8>)
 8016e30:	482b      	ldr	r0, [pc, #172]	; (8016ee0 <etharp_find_entry+0x2e0>)
 8016e32:	f003 f981 	bl	801a138 <iprintf>
    etharp_free_entry(i);
 8016e36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	f7ff fe06 	bl	8016a4c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016e40:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016e44:	2b09      	cmp	r3, #9
 8016e46:	dd06      	ble.n	8016e56 <etharp_find_entry+0x256>
 8016e48:	4b23      	ldr	r3, [pc, #140]	; (8016ed8 <etharp_find_entry+0x2d8>)
 8016e4a:	f240 1283 	movw	r2, #387	; 0x183
 8016e4e:	4926      	ldr	r1, [pc, #152]	; (8016ee8 <etharp_find_entry+0x2e8>)
 8016e50:	4823      	ldr	r0, [pc, #140]	; (8016ee0 <etharp_find_entry+0x2e0>)
 8016e52:	f003 f971 	bl	801a138 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016e56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e5a:	491e      	ldr	r1, [pc, #120]	; (8016ed4 <etharp_find_entry+0x2d4>)
 8016e5c:	4613      	mov	r3, r2
 8016e5e:	005b      	lsls	r3, r3, #1
 8016e60:	4413      	add	r3, r2
 8016e62:	00db      	lsls	r3, r3, #3
 8016e64:	440b      	add	r3, r1
 8016e66:	3314      	adds	r3, #20
 8016e68:	781b      	ldrb	r3, [r3, #0]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d006      	beq.n	8016e7c <etharp_find_entry+0x27c>
 8016e6e:	4b1a      	ldr	r3, [pc, #104]	; (8016ed8 <etharp_find_entry+0x2d8>)
 8016e70:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016e74:	491d      	ldr	r1, [pc, #116]	; (8016eec <etharp_find_entry+0x2ec>)
 8016e76:	481a      	ldr	r0, [pc, #104]	; (8016ee0 <etharp_find_entry+0x2e0>)
 8016e78:	f003 f95e 	bl	801a138 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d00b      	beq.n	8016e9a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016e82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	6819      	ldr	r1, [r3, #0]
 8016e8a:	4812      	ldr	r0, [pc, #72]	; (8016ed4 <etharp_find_entry+0x2d4>)
 8016e8c:	4613      	mov	r3, r2
 8016e8e:	005b      	lsls	r3, r3, #1
 8016e90:	4413      	add	r3, r2
 8016e92:	00db      	lsls	r3, r3, #3
 8016e94:	4403      	add	r3, r0
 8016e96:	3304      	adds	r3, #4
 8016e98:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016e9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e9e:	490d      	ldr	r1, [pc, #52]	; (8016ed4 <etharp_find_entry+0x2d4>)
 8016ea0:	4613      	mov	r3, r2
 8016ea2:	005b      	lsls	r3, r3, #1
 8016ea4:	4413      	add	r3, r2
 8016ea6:	00db      	lsls	r3, r3, #3
 8016ea8:	440b      	add	r3, r1
 8016eaa:	3312      	adds	r3, #18
 8016eac:	2200      	movs	r2, #0
 8016eae:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016eb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016eb4:	4907      	ldr	r1, [pc, #28]	; (8016ed4 <etharp_find_entry+0x2d4>)
 8016eb6:	4613      	mov	r3, r2
 8016eb8:	005b      	lsls	r3, r3, #1
 8016eba:	4413      	add	r3, r2
 8016ebc:	00db      	lsls	r3, r3, #3
 8016ebe:	440b      	add	r3, r1
 8016ec0:	3308      	adds	r3, #8
 8016ec2:	687a      	ldr	r2, [r7, #4]
 8016ec4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016ec6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016eca:	4618      	mov	r0, r3
 8016ecc:	3728      	adds	r7, #40	; 0x28
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	bd80      	pop	{r7, pc}
 8016ed2:	bf00      	nop
 8016ed4:	20000858 	.word	0x20000858
 8016ed8:	0801ec20 	.word	0x0801ec20
 8016edc:	0801ec58 	.word	0x0801ec58
 8016ee0:	0801ec98 	.word	0x0801ec98
 8016ee4:	0801ecc0 	.word	0x0801ecc0
 8016ee8:	0801ecd8 	.word	0x0801ecd8
 8016eec:	0801ecec 	.word	0x0801ecec

08016ef0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b088      	sub	sp, #32
 8016ef4:	af02      	add	r7, sp, #8
 8016ef6:	60f8      	str	r0, [r7, #12]
 8016ef8:	60b9      	str	r1, [r7, #8]
 8016efa:	607a      	str	r2, [r7, #4]
 8016efc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016f04:	2b06      	cmp	r3, #6
 8016f06:	d006      	beq.n	8016f16 <etharp_update_arp_entry+0x26>
 8016f08:	4b48      	ldr	r3, [pc, #288]	; (801702c <etharp_update_arp_entry+0x13c>)
 8016f0a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016f0e:	4948      	ldr	r1, [pc, #288]	; (8017030 <etharp_update_arp_entry+0x140>)
 8016f10:	4848      	ldr	r0, [pc, #288]	; (8017034 <etharp_update_arp_entry+0x144>)
 8016f12:	f003 f911 	bl	801a138 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016f16:	68bb      	ldr	r3, [r7, #8]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d012      	beq.n	8016f42 <etharp_update_arp_entry+0x52>
 8016f1c:	68bb      	ldr	r3, [r7, #8]
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d00e      	beq.n	8016f42 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016f24:	68bb      	ldr	r3, [r7, #8]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	68f9      	ldr	r1, [r7, #12]
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	f001 f8fe 	bl	801812c <ip4_addr_isbroadcast_u32>
 8016f30:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d105      	bne.n	8016f42 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016f36:	68bb      	ldr	r3, [r7, #8]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016f3e:	2be0      	cmp	r3, #224	; 0xe0
 8016f40:	d102      	bne.n	8016f48 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016f42:	f06f 030f 	mvn.w	r3, #15
 8016f46:	e06c      	b.n	8017022 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016f48:	78fb      	ldrb	r3, [r7, #3]
 8016f4a:	68fa      	ldr	r2, [r7, #12]
 8016f4c:	4619      	mov	r1, r3
 8016f4e:	68b8      	ldr	r0, [r7, #8]
 8016f50:	f7ff fe56 	bl	8016c00 <etharp_find_entry>
 8016f54:	4603      	mov	r3, r0
 8016f56:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016f58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	da02      	bge.n	8016f66 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016f60:	8afb      	ldrh	r3, [r7, #22]
 8016f62:	b25b      	sxtb	r3, r3
 8016f64:	e05d      	b.n	8017022 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016f66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f6a:	4933      	ldr	r1, [pc, #204]	; (8017038 <etharp_update_arp_entry+0x148>)
 8016f6c:	4613      	mov	r3, r2
 8016f6e:	005b      	lsls	r3, r3, #1
 8016f70:	4413      	add	r3, r2
 8016f72:	00db      	lsls	r3, r3, #3
 8016f74:	440b      	add	r3, r1
 8016f76:	3314      	adds	r3, #20
 8016f78:	2202      	movs	r2, #2
 8016f7a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016f7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f80:	492d      	ldr	r1, [pc, #180]	; (8017038 <etharp_update_arp_entry+0x148>)
 8016f82:	4613      	mov	r3, r2
 8016f84:	005b      	lsls	r3, r3, #1
 8016f86:	4413      	add	r3, r2
 8016f88:	00db      	lsls	r3, r3, #3
 8016f8a:	440b      	add	r3, r1
 8016f8c:	3308      	adds	r3, #8
 8016f8e:	68fa      	ldr	r2, [r7, #12]
 8016f90:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016f92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f96:	4613      	mov	r3, r2
 8016f98:	005b      	lsls	r3, r3, #1
 8016f9a:	4413      	add	r3, r2
 8016f9c:	00db      	lsls	r3, r3, #3
 8016f9e:	3308      	adds	r3, #8
 8016fa0:	4a25      	ldr	r2, [pc, #148]	; (8017038 <etharp_update_arp_entry+0x148>)
 8016fa2:	4413      	add	r3, r2
 8016fa4:	3304      	adds	r3, #4
 8016fa6:	2206      	movs	r2, #6
 8016fa8:	6879      	ldr	r1, [r7, #4]
 8016faa:	4618      	mov	r0, r3
 8016fac:	f002 fb9a 	bl	80196e4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016fb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016fb4:	4920      	ldr	r1, [pc, #128]	; (8017038 <etharp_update_arp_entry+0x148>)
 8016fb6:	4613      	mov	r3, r2
 8016fb8:	005b      	lsls	r3, r3, #1
 8016fba:	4413      	add	r3, r2
 8016fbc:	00db      	lsls	r3, r3, #3
 8016fbe:	440b      	add	r3, r1
 8016fc0:	3312      	adds	r3, #18
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016fc6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016fca:	491b      	ldr	r1, [pc, #108]	; (8017038 <etharp_update_arp_entry+0x148>)
 8016fcc:	4613      	mov	r3, r2
 8016fce:	005b      	lsls	r3, r3, #1
 8016fd0:	4413      	add	r3, r2
 8016fd2:	00db      	lsls	r3, r3, #3
 8016fd4:	440b      	add	r3, r1
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d021      	beq.n	8017020 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016fdc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016fe0:	4915      	ldr	r1, [pc, #84]	; (8017038 <etharp_update_arp_entry+0x148>)
 8016fe2:	4613      	mov	r3, r2
 8016fe4:	005b      	lsls	r3, r3, #1
 8016fe6:	4413      	add	r3, r2
 8016fe8:	00db      	lsls	r3, r3, #3
 8016fea:	440b      	add	r3, r1
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016ff0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ff4:	4910      	ldr	r1, [pc, #64]	; (8017038 <etharp_update_arp_entry+0x148>)
 8016ff6:	4613      	mov	r3, r2
 8016ff8:	005b      	lsls	r3, r3, #1
 8016ffa:	4413      	add	r3, r2
 8016ffc:	00db      	lsls	r3, r3, #3
 8016ffe:	440b      	add	r3, r1
 8017000:	2200      	movs	r2, #0
 8017002:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801700a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801700e:	9300      	str	r3, [sp, #0]
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	6939      	ldr	r1, [r7, #16]
 8017014:	68f8      	ldr	r0, [r7, #12]
 8017016:	f001 ff91 	bl	8018f3c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801701a:	6938      	ldr	r0, [r7, #16]
 801701c:	f7f8 ff2a 	bl	800fe74 <pbuf_free>
  }
  return ERR_OK;
 8017020:	2300      	movs	r3, #0
}
 8017022:	4618      	mov	r0, r3
 8017024:	3718      	adds	r7, #24
 8017026:	46bd      	mov	sp, r7
 8017028:	bd80      	pop	{r7, pc}
 801702a:	bf00      	nop
 801702c:	0801ec20 	.word	0x0801ec20
 8017030:	0801ed18 	.word	0x0801ed18
 8017034:	0801ec98 	.word	0x0801ec98
 8017038:	20000858 	.word	0x20000858

0801703c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801703c:	b580      	push	{r7, lr}
 801703e:	b084      	sub	sp, #16
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017044:	2300      	movs	r3, #0
 8017046:	60fb      	str	r3, [r7, #12]
 8017048:	e01e      	b.n	8017088 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801704a:	4913      	ldr	r1, [pc, #76]	; (8017098 <etharp_cleanup_netif+0x5c>)
 801704c:	68fa      	ldr	r2, [r7, #12]
 801704e:	4613      	mov	r3, r2
 8017050:	005b      	lsls	r3, r3, #1
 8017052:	4413      	add	r3, r2
 8017054:	00db      	lsls	r3, r3, #3
 8017056:	440b      	add	r3, r1
 8017058:	3314      	adds	r3, #20
 801705a:	781b      	ldrb	r3, [r3, #0]
 801705c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801705e:	7afb      	ldrb	r3, [r7, #11]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d00e      	beq.n	8017082 <etharp_cleanup_netif+0x46>
 8017064:	490c      	ldr	r1, [pc, #48]	; (8017098 <etharp_cleanup_netif+0x5c>)
 8017066:	68fa      	ldr	r2, [r7, #12]
 8017068:	4613      	mov	r3, r2
 801706a:	005b      	lsls	r3, r3, #1
 801706c:	4413      	add	r3, r2
 801706e:	00db      	lsls	r3, r3, #3
 8017070:	440b      	add	r3, r1
 8017072:	3308      	adds	r3, #8
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	687a      	ldr	r2, [r7, #4]
 8017078:	429a      	cmp	r2, r3
 801707a:	d102      	bne.n	8017082 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801707c:	68f8      	ldr	r0, [r7, #12]
 801707e:	f7ff fce5 	bl	8016a4c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	3301      	adds	r3, #1
 8017086:	60fb      	str	r3, [r7, #12]
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	2b09      	cmp	r3, #9
 801708c:	dddd      	ble.n	801704a <etharp_cleanup_netif+0xe>
    }
  }
}
 801708e:	bf00      	nop
 8017090:	bf00      	nop
 8017092:	3710      	adds	r7, #16
 8017094:	46bd      	mov	sp, r7
 8017096:	bd80      	pop	{r7, pc}
 8017098:	20000858 	.word	0x20000858

0801709c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801709c:	b5b0      	push	{r4, r5, r7, lr}
 801709e:	b08a      	sub	sp, #40	; 0x28
 80170a0:	af04      	add	r7, sp, #16
 80170a2:	6078      	str	r0, [r7, #4]
 80170a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80170a6:	683b      	ldr	r3, [r7, #0]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d107      	bne.n	80170bc <etharp_input+0x20>
 80170ac:	4b3d      	ldr	r3, [pc, #244]	; (80171a4 <etharp_input+0x108>)
 80170ae:	f240 228a 	movw	r2, #650	; 0x28a
 80170b2:	493d      	ldr	r1, [pc, #244]	; (80171a8 <etharp_input+0x10c>)
 80170b4:	483d      	ldr	r0, [pc, #244]	; (80171ac <etharp_input+0x110>)
 80170b6:	f003 f83f 	bl	801a138 <iprintf>
 80170ba:	e06f      	b.n	801719c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	685b      	ldr	r3, [r3, #4]
 80170c0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80170c2:	693b      	ldr	r3, [r7, #16]
 80170c4:	881b      	ldrh	r3, [r3, #0]
 80170c6:	b29b      	uxth	r3, r3
 80170c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80170cc:	d10c      	bne.n	80170e8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80170ce:	693b      	ldr	r3, [r7, #16]
 80170d0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80170d2:	2b06      	cmp	r3, #6
 80170d4:	d108      	bne.n	80170e8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80170d6:	693b      	ldr	r3, [r7, #16]
 80170d8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80170da:	2b04      	cmp	r3, #4
 80170dc:	d104      	bne.n	80170e8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80170de:	693b      	ldr	r3, [r7, #16]
 80170e0:	885b      	ldrh	r3, [r3, #2]
 80170e2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80170e4:	2b08      	cmp	r3, #8
 80170e6:	d003      	beq.n	80170f0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80170e8:	6878      	ldr	r0, [r7, #4]
 80170ea:	f7f8 fec3 	bl	800fe74 <pbuf_free>
    return;
 80170ee:	e055      	b.n	801719c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80170f0:	693b      	ldr	r3, [r7, #16]
 80170f2:	330e      	adds	r3, #14
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80170f8:	693b      	ldr	r3, [r7, #16]
 80170fa:	3318      	adds	r3, #24
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017100:	683b      	ldr	r3, [r7, #0]
 8017102:	3304      	adds	r3, #4
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	2b00      	cmp	r3, #0
 8017108:	d102      	bne.n	8017110 <etharp_input+0x74>
    for_us = 0;
 801710a:	2300      	movs	r3, #0
 801710c:	75fb      	strb	r3, [r7, #23]
 801710e:	e009      	b.n	8017124 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017110:	68ba      	ldr	r2, [r7, #8]
 8017112:	683b      	ldr	r3, [r7, #0]
 8017114:	3304      	adds	r3, #4
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	429a      	cmp	r2, r3
 801711a:	bf0c      	ite	eq
 801711c:	2301      	moveq	r3, #1
 801711e:	2300      	movne	r3, #0
 8017120:	b2db      	uxtb	r3, r3
 8017122:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017124:	693b      	ldr	r3, [r7, #16]
 8017126:	f103 0208 	add.w	r2, r3, #8
 801712a:	7dfb      	ldrb	r3, [r7, #23]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d001      	beq.n	8017134 <etharp_input+0x98>
 8017130:	2301      	movs	r3, #1
 8017132:	e000      	b.n	8017136 <etharp_input+0x9a>
 8017134:	2302      	movs	r3, #2
 8017136:	f107 010c 	add.w	r1, r7, #12
 801713a:	6838      	ldr	r0, [r7, #0]
 801713c:	f7ff fed8 	bl	8016ef0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017140:	693b      	ldr	r3, [r7, #16]
 8017142:	88db      	ldrh	r3, [r3, #6]
 8017144:	b29b      	uxth	r3, r3
 8017146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801714a:	d003      	beq.n	8017154 <etharp_input+0xb8>
 801714c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017150:	d01e      	beq.n	8017190 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017152:	e020      	b.n	8017196 <etharp_input+0xfa>
      if (for_us) {
 8017154:	7dfb      	ldrb	r3, [r7, #23]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d01c      	beq.n	8017194 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801715a:	683b      	ldr	r3, [r7, #0]
 801715c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017160:	693b      	ldr	r3, [r7, #16]
 8017162:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017166:	683b      	ldr	r3, [r7, #0]
 8017168:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801716c:	683b      	ldr	r3, [r7, #0]
 801716e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017170:	693a      	ldr	r2, [r7, #16]
 8017172:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017174:	2102      	movs	r1, #2
 8017176:	9103      	str	r1, [sp, #12]
 8017178:	f107 010c 	add.w	r1, r7, #12
 801717c:	9102      	str	r1, [sp, #8]
 801717e:	9201      	str	r2, [sp, #4]
 8017180:	9300      	str	r3, [sp, #0]
 8017182:	462b      	mov	r3, r5
 8017184:	4622      	mov	r2, r4
 8017186:	4601      	mov	r1, r0
 8017188:	6838      	ldr	r0, [r7, #0]
 801718a:	f000 faeb 	bl	8017764 <etharp_raw>
      break;
 801718e:	e001      	b.n	8017194 <etharp_input+0xf8>
      break;
 8017190:	bf00      	nop
 8017192:	e000      	b.n	8017196 <etharp_input+0xfa>
      break;
 8017194:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017196:	6878      	ldr	r0, [r7, #4]
 8017198:	f7f8 fe6c 	bl	800fe74 <pbuf_free>
}
 801719c:	3718      	adds	r7, #24
 801719e:	46bd      	mov	sp, r7
 80171a0:	bdb0      	pop	{r4, r5, r7, pc}
 80171a2:	bf00      	nop
 80171a4:	0801ec20 	.word	0x0801ec20
 80171a8:	0801ed70 	.word	0x0801ed70
 80171ac:	0801ec98 	.word	0x0801ec98

080171b0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80171b0:	b580      	push	{r7, lr}
 80171b2:	b086      	sub	sp, #24
 80171b4:	af02      	add	r7, sp, #8
 80171b6:	60f8      	str	r0, [r7, #12]
 80171b8:	60b9      	str	r1, [r7, #8]
 80171ba:	4613      	mov	r3, r2
 80171bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80171be:	79fa      	ldrb	r2, [r7, #7]
 80171c0:	4944      	ldr	r1, [pc, #272]	; (80172d4 <etharp_output_to_arp_index+0x124>)
 80171c2:	4613      	mov	r3, r2
 80171c4:	005b      	lsls	r3, r3, #1
 80171c6:	4413      	add	r3, r2
 80171c8:	00db      	lsls	r3, r3, #3
 80171ca:	440b      	add	r3, r1
 80171cc:	3314      	adds	r3, #20
 80171ce:	781b      	ldrb	r3, [r3, #0]
 80171d0:	2b01      	cmp	r3, #1
 80171d2:	d806      	bhi.n	80171e2 <etharp_output_to_arp_index+0x32>
 80171d4:	4b40      	ldr	r3, [pc, #256]	; (80172d8 <etharp_output_to_arp_index+0x128>)
 80171d6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80171da:	4940      	ldr	r1, [pc, #256]	; (80172dc <etharp_output_to_arp_index+0x12c>)
 80171dc:	4840      	ldr	r0, [pc, #256]	; (80172e0 <etharp_output_to_arp_index+0x130>)
 80171de:	f002 ffab 	bl	801a138 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80171e2:	79fa      	ldrb	r2, [r7, #7]
 80171e4:	493b      	ldr	r1, [pc, #236]	; (80172d4 <etharp_output_to_arp_index+0x124>)
 80171e6:	4613      	mov	r3, r2
 80171e8:	005b      	lsls	r3, r3, #1
 80171ea:	4413      	add	r3, r2
 80171ec:	00db      	lsls	r3, r3, #3
 80171ee:	440b      	add	r3, r1
 80171f0:	3314      	adds	r3, #20
 80171f2:	781b      	ldrb	r3, [r3, #0]
 80171f4:	2b02      	cmp	r3, #2
 80171f6:	d153      	bne.n	80172a0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80171f8:	79fa      	ldrb	r2, [r7, #7]
 80171fa:	4936      	ldr	r1, [pc, #216]	; (80172d4 <etharp_output_to_arp_index+0x124>)
 80171fc:	4613      	mov	r3, r2
 80171fe:	005b      	lsls	r3, r3, #1
 8017200:	4413      	add	r3, r2
 8017202:	00db      	lsls	r3, r3, #3
 8017204:	440b      	add	r3, r1
 8017206:	3312      	adds	r3, #18
 8017208:	881b      	ldrh	r3, [r3, #0]
 801720a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801720e:	d919      	bls.n	8017244 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017210:	79fa      	ldrb	r2, [r7, #7]
 8017212:	4613      	mov	r3, r2
 8017214:	005b      	lsls	r3, r3, #1
 8017216:	4413      	add	r3, r2
 8017218:	00db      	lsls	r3, r3, #3
 801721a:	4a2e      	ldr	r2, [pc, #184]	; (80172d4 <etharp_output_to_arp_index+0x124>)
 801721c:	4413      	add	r3, r2
 801721e:	3304      	adds	r3, #4
 8017220:	4619      	mov	r1, r3
 8017222:	68f8      	ldr	r0, [r7, #12]
 8017224:	f000 fb4c 	bl	80178c0 <etharp_request>
 8017228:	4603      	mov	r3, r0
 801722a:	2b00      	cmp	r3, #0
 801722c:	d138      	bne.n	80172a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801722e:	79fa      	ldrb	r2, [r7, #7]
 8017230:	4928      	ldr	r1, [pc, #160]	; (80172d4 <etharp_output_to_arp_index+0x124>)
 8017232:	4613      	mov	r3, r2
 8017234:	005b      	lsls	r3, r3, #1
 8017236:	4413      	add	r3, r2
 8017238:	00db      	lsls	r3, r3, #3
 801723a:	440b      	add	r3, r1
 801723c:	3314      	adds	r3, #20
 801723e:	2203      	movs	r2, #3
 8017240:	701a      	strb	r2, [r3, #0]
 8017242:	e02d      	b.n	80172a0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017244:	79fa      	ldrb	r2, [r7, #7]
 8017246:	4923      	ldr	r1, [pc, #140]	; (80172d4 <etharp_output_to_arp_index+0x124>)
 8017248:	4613      	mov	r3, r2
 801724a:	005b      	lsls	r3, r3, #1
 801724c:	4413      	add	r3, r2
 801724e:	00db      	lsls	r3, r3, #3
 8017250:	440b      	add	r3, r1
 8017252:	3312      	adds	r3, #18
 8017254:	881b      	ldrh	r3, [r3, #0]
 8017256:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801725a:	d321      	bcc.n	80172a0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801725c:	79fa      	ldrb	r2, [r7, #7]
 801725e:	4613      	mov	r3, r2
 8017260:	005b      	lsls	r3, r3, #1
 8017262:	4413      	add	r3, r2
 8017264:	00db      	lsls	r3, r3, #3
 8017266:	4a1b      	ldr	r2, [pc, #108]	; (80172d4 <etharp_output_to_arp_index+0x124>)
 8017268:	4413      	add	r3, r2
 801726a:	1d19      	adds	r1, r3, #4
 801726c:	79fa      	ldrb	r2, [r7, #7]
 801726e:	4613      	mov	r3, r2
 8017270:	005b      	lsls	r3, r3, #1
 8017272:	4413      	add	r3, r2
 8017274:	00db      	lsls	r3, r3, #3
 8017276:	3308      	adds	r3, #8
 8017278:	4a16      	ldr	r2, [pc, #88]	; (80172d4 <etharp_output_to_arp_index+0x124>)
 801727a:	4413      	add	r3, r2
 801727c:	3304      	adds	r3, #4
 801727e:	461a      	mov	r2, r3
 8017280:	68f8      	ldr	r0, [r7, #12]
 8017282:	f000 fafb 	bl	801787c <etharp_request_dst>
 8017286:	4603      	mov	r3, r0
 8017288:	2b00      	cmp	r3, #0
 801728a:	d109      	bne.n	80172a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801728c:	79fa      	ldrb	r2, [r7, #7]
 801728e:	4911      	ldr	r1, [pc, #68]	; (80172d4 <etharp_output_to_arp_index+0x124>)
 8017290:	4613      	mov	r3, r2
 8017292:	005b      	lsls	r3, r3, #1
 8017294:	4413      	add	r3, r2
 8017296:	00db      	lsls	r3, r3, #3
 8017298:	440b      	add	r3, r1
 801729a:	3314      	adds	r3, #20
 801729c:	2203      	movs	r2, #3
 801729e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80172a6:	79fa      	ldrb	r2, [r7, #7]
 80172a8:	4613      	mov	r3, r2
 80172aa:	005b      	lsls	r3, r3, #1
 80172ac:	4413      	add	r3, r2
 80172ae:	00db      	lsls	r3, r3, #3
 80172b0:	3308      	adds	r3, #8
 80172b2:	4a08      	ldr	r2, [pc, #32]	; (80172d4 <etharp_output_to_arp_index+0x124>)
 80172b4:	4413      	add	r3, r2
 80172b6:	3304      	adds	r3, #4
 80172b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80172bc:	9200      	str	r2, [sp, #0]
 80172be:	460a      	mov	r2, r1
 80172c0:	68b9      	ldr	r1, [r7, #8]
 80172c2:	68f8      	ldr	r0, [r7, #12]
 80172c4:	f001 fe3a 	bl	8018f3c <ethernet_output>
 80172c8:	4603      	mov	r3, r0
}
 80172ca:	4618      	mov	r0, r3
 80172cc:	3710      	adds	r7, #16
 80172ce:	46bd      	mov	sp, r7
 80172d0:	bd80      	pop	{r7, pc}
 80172d2:	bf00      	nop
 80172d4:	20000858 	.word	0x20000858
 80172d8:	0801ec20 	.word	0x0801ec20
 80172dc:	0801ed90 	.word	0x0801ed90
 80172e0:	0801ec98 	.word	0x0801ec98

080172e4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b08a      	sub	sp, #40	; 0x28
 80172e8:	af02      	add	r7, sp, #8
 80172ea:	60f8      	str	r0, [r7, #12]
 80172ec:	60b9      	str	r1, [r7, #8]
 80172ee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d106      	bne.n	8017308 <etharp_output+0x24>
 80172fa:	4b73      	ldr	r3, [pc, #460]	; (80174c8 <etharp_output+0x1e4>)
 80172fc:	f240 321e 	movw	r2, #798	; 0x31e
 8017300:	4972      	ldr	r1, [pc, #456]	; (80174cc <etharp_output+0x1e8>)
 8017302:	4873      	ldr	r0, [pc, #460]	; (80174d0 <etharp_output+0x1ec>)
 8017304:	f002 ff18 	bl	801a138 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017308:	68bb      	ldr	r3, [r7, #8]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d106      	bne.n	801731c <etharp_output+0x38>
 801730e:	4b6e      	ldr	r3, [pc, #440]	; (80174c8 <etharp_output+0x1e4>)
 8017310:	f240 321f 	movw	r2, #799	; 0x31f
 8017314:	496f      	ldr	r1, [pc, #444]	; (80174d4 <etharp_output+0x1f0>)
 8017316:	486e      	ldr	r0, [pc, #440]	; (80174d0 <etharp_output+0x1ec>)
 8017318:	f002 ff0e 	bl	801a138 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d106      	bne.n	8017330 <etharp_output+0x4c>
 8017322:	4b69      	ldr	r3, [pc, #420]	; (80174c8 <etharp_output+0x1e4>)
 8017324:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017328:	496b      	ldr	r1, [pc, #428]	; (80174d8 <etharp_output+0x1f4>)
 801732a:	4869      	ldr	r0, [pc, #420]	; (80174d0 <etharp_output+0x1ec>)
 801732c:	f002 ff04 	bl	801a138 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	68f9      	ldr	r1, [r7, #12]
 8017336:	4618      	mov	r0, r3
 8017338:	f000 fef8 	bl	801812c <ip4_addr_isbroadcast_u32>
 801733c:	4603      	mov	r3, r0
 801733e:	2b00      	cmp	r3, #0
 8017340:	d002      	beq.n	8017348 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017342:	4b66      	ldr	r3, [pc, #408]	; (80174dc <etharp_output+0x1f8>)
 8017344:	61fb      	str	r3, [r7, #28]
 8017346:	e0af      	b.n	80174a8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017350:	2be0      	cmp	r3, #224	; 0xe0
 8017352:	d118      	bne.n	8017386 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017354:	2301      	movs	r3, #1
 8017356:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017358:	2300      	movs	r3, #0
 801735a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801735c:	235e      	movs	r3, #94	; 0x5e
 801735e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	3301      	adds	r3, #1
 8017364:	781b      	ldrb	r3, [r3, #0]
 8017366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801736a:	b2db      	uxtb	r3, r3
 801736c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	3302      	adds	r3, #2
 8017372:	781b      	ldrb	r3, [r3, #0]
 8017374:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	3303      	adds	r3, #3
 801737a:	781b      	ldrb	r3, [r3, #0]
 801737c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801737e:	f107 0310 	add.w	r3, r7, #16
 8017382:	61fb      	str	r3, [r7, #28]
 8017384:	e090      	b.n	80174a8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	681a      	ldr	r2, [r3, #0]
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	3304      	adds	r3, #4
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	405a      	eors	r2, r3
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	3308      	adds	r3, #8
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	4013      	ands	r3, r2
 801739a:	2b00      	cmp	r3, #0
 801739c:	d012      	beq.n	80173c4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80173a4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80173a8:	4293      	cmp	r3, r2
 80173aa:	d00b      	beq.n	80173c4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	330c      	adds	r3, #12
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d003      	beq.n	80173be <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	330c      	adds	r3, #12
 80173ba:	61bb      	str	r3, [r7, #24]
 80173bc:	e002      	b.n	80173c4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80173be:	f06f 0303 	mvn.w	r3, #3
 80173c2:	e07d      	b.n	80174c0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80173c4:	4b46      	ldr	r3, [pc, #280]	; (80174e0 <etharp_output+0x1fc>)
 80173c6:	781b      	ldrb	r3, [r3, #0]
 80173c8:	4619      	mov	r1, r3
 80173ca:	4a46      	ldr	r2, [pc, #280]	; (80174e4 <etharp_output+0x200>)
 80173cc:	460b      	mov	r3, r1
 80173ce:	005b      	lsls	r3, r3, #1
 80173d0:	440b      	add	r3, r1
 80173d2:	00db      	lsls	r3, r3, #3
 80173d4:	4413      	add	r3, r2
 80173d6:	3314      	adds	r3, #20
 80173d8:	781b      	ldrb	r3, [r3, #0]
 80173da:	2b01      	cmp	r3, #1
 80173dc:	d925      	bls.n	801742a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80173de:	4b40      	ldr	r3, [pc, #256]	; (80174e0 <etharp_output+0x1fc>)
 80173e0:	781b      	ldrb	r3, [r3, #0]
 80173e2:	4619      	mov	r1, r3
 80173e4:	4a3f      	ldr	r2, [pc, #252]	; (80174e4 <etharp_output+0x200>)
 80173e6:	460b      	mov	r3, r1
 80173e8:	005b      	lsls	r3, r3, #1
 80173ea:	440b      	add	r3, r1
 80173ec:	00db      	lsls	r3, r3, #3
 80173ee:	4413      	add	r3, r2
 80173f0:	3308      	adds	r3, #8
 80173f2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80173f4:	68fa      	ldr	r2, [r7, #12]
 80173f6:	429a      	cmp	r2, r3
 80173f8:	d117      	bne.n	801742a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80173fa:	69bb      	ldr	r3, [r7, #24]
 80173fc:	681a      	ldr	r2, [r3, #0]
 80173fe:	4b38      	ldr	r3, [pc, #224]	; (80174e0 <etharp_output+0x1fc>)
 8017400:	781b      	ldrb	r3, [r3, #0]
 8017402:	4618      	mov	r0, r3
 8017404:	4937      	ldr	r1, [pc, #220]	; (80174e4 <etharp_output+0x200>)
 8017406:	4603      	mov	r3, r0
 8017408:	005b      	lsls	r3, r3, #1
 801740a:	4403      	add	r3, r0
 801740c:	00db      	lsls	r3, r3, #3
 801740e:	440b      	add	r3, r1
 8017410:	3304      	adds	r3, #4
 8017412:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017414:	429a      	cmp	r2, r3
 8017416:	d108      	bne.n	801742a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017418:	4b31      	ldr	r3, [pc, #196]	; (80174e0 <etharp_output+0x1fc>)
 801741a:	781b      	ldrb	r3, [r3, #0]
 801741c:	461a      	mov	r2, r3
 801741e:	68b9      	ldr	r1, [r7, #8]
 8017420:	68f8      	ldr	r0, [r7, #12]
 8017422:	f7ff fec5 	bl	80171b0 <etharp_output_to_arp_index>
 8017426:	4603      	mov	r3, r0
 8017428:	e04a      	b.n	80174c0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801742a:	2300      	movs	r3, #0
 801742c:	75fb      	strb	r3, [r7, #23]
 801742e:	e031      	b.n	8017494 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017430:	7dfa      	ldrb	r2, [r7, #23]
 8017432:	492c      	ldr	r1, [pc, #176]	; (80174e4 <etharp_output+0x200>)
 8017434:	4613      	mov	r3, r2
 8017436:	005b      	lsls	r3, r3, #1
 8017438:	4413      	add	r3, r2
 801743a:	00db      	lsls	r3, r3, #3
 801743c:	440b      	add	r3, r1
 801743e:	3314      	adds	r3, #20
 8017440:	781b      	ldrb	r3, [r3, #0]
 8017442:	2b01      	cmp	r3, #1
 8017444:	d923      	bls.n	801748e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017446:	7dfa      	ldrb	r2, [r7, #23]
 8017448:	4926      	ldr	r1, [pc, #152]	; (80174e4 <etharp_output+0x200>)
 801744a:	4613      	mov	r3, r2
 801744c:	005b      	lsls	r3, r3, #1
 801744e:	4413      	add	r3, r2
 8017450:	00db      	lsls	r3, r3, #3
 8017452:	440b      	add	r3, r1
 8017454:	3308      	adds	r3, #8
 8017456:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017458:	68fa      	ldr	r2, [r7, #12]
 801745a:	429a      	cmp	r2, r3
 801745c:	d117      	bne.n	801748e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801745e:	69bb      	ldr	r3, [r7, #24]
 8017460:	6819      	ldr	r1, [r3, #0]
 8017462:	7dfa      	ldrb	r2, [r7, #23]
 8017464:	481f      	ldr	r0, [pc, #124]	; (80174e4 <etharp_output+0x200>)
 8017466:	4613      	mov	r3, r2
 8017468:	005b      	lsls	r3, r3, #1
 801746a:	4413      	add	r3, r2
 801746c:	00db      	lsls	r3, r3, #3
 801746e:	4403      	add	r3, r0
 8017470:	3304      	adds	r3, #4
 8017472:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017474:	4299      	cmp	r1, r3
 8017476:	d10a      	bne.n	801748e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017478:	4a19      	ldr	r2, [pc, #100]	; (80174e0 <etharp_output+0x1fc>)
 801747a:	7dfb      	ldrb	r3, [r7, #23]
 801747c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801747e:	7dfb      	ldrb	r3, [r7, #23]
 8017480:	461a      	mov	r2, r3
 8017482:	68b9      	ldr	r1, [r7, #8]
 8017484:	68f8      	ldr	r0, [r7, #12]
 8017486:	f7ff fe93 	bl	80171b0 <etharp_output_to_arp_index>
 801748a:	4603      	mov	r3, r0
 801748c:	e018      	b.n	80174c0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801748e:	7dfb      	ldrb	r3, [r7, #23]
 8017490:	3301      	adds	r3, #1
 8017492:	75fb      	strb	r3, [r7, #23]
 8017494:	7dfb      	ldrb	r3, [r7, #23]
 8017496:	2b09      	cmp	r3, #9
 8017498:	d9ca      	bls.n	8017430 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801749a:	68ba      	ldr	r2, [r7, #8]
 801749c:	69b9      	ldr	r1, [r7, #24]
 801749e:	68f8      	ldr	r0, [r7, #12]
 80174a0:	f000 f822 	bl	80174e8 <etharp_query>
 80174a4:	4603      	mov	r3, r0
 80174a6:	e00b      	b.n	80174c0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80174ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80174b2:	9300      	str	r3, [sp, #0]
 80174b4:	69fb      	ldr	r3, [r7, #28]
 80174b6:	68b9      	ldr	r1, [r7, #8]
 80174b8:	68f8      	ldr	r0, [r7, #12]
 80174ba:	f001 fd3f 	bl	8018f3c <ethernet_output>
 80174be:	4603      	mov	r3, r0
}
 80174c0:	4618      	mov	r0, r3
 80174c2:	3720      	adds	r7, #32
 80174c4:	46bd      	mov	sp, r7
 80174c6:	bd80      	pop	{r7, pc}
 80174c8:	0801ec20 	.word	0x0801ec20
 80174cc:	0801ed70 	.word	0x0801ed70
 80174d0:	0801ec98 	.word	0x0801ec98
 80174d4:	0801edc0 	.word	0x0801edc0
 80174d8:	0801ed60 	.word	0x0801ed60
 80174dc:	0801f560 	.word	0x0801f560
 80174e0:	20000948 	.word	0x20000948
 80174e4:	20000858 	.word	0x20000858

080174e8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b08c      	sub	sp, #48	; 0x30
 80174ec:	af02      	add	r7, sp, #8
 80174ee:	60f8      	str	r0, [r7, #12]
 80174f0:	60b9      	str	r1, [r7, #8]
 80174f2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	3326      	adds	r3, #38	; 0x26
 80174f8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80174fa:	23ff      	movs	r3, #255	; 0xff
 80174fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017500:	2300      	movs	r3, #0
 8017502:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017504:	68bb      	ldr	r3, [r7, #8]
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	68f9      	ldr	r1, [r7, #12]
 801750a:	4618      	mov	r0, r3
 801750c:	f000 fe0e 	bl	801812c <ip4_addr_isbroadcast_u32>
 8017510:	4603      	mov	r3, r0
 8017512:	2b00      	cmp	r3, #0
 8017514:	d10c      	bne.n	8017530 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017516:	68bb      	ldr	r3, [r7, #8]
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801751e:	2be0      	cmp	r3, #224	; 0xe0
 8017520:	d006      	beq.n	8017530 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017522:	68bb      	ldr	r3, [r7, #8]
 8017524:	2b00      	cmp	r3, #0
 8017526:	d003      	beq.n	8017530 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017528:	68bb      	ldr	r3, [r7, #8]
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	2b00      	cmp	r3, #0
 801752e:	d102      	bne.n	8017536 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017530:	f06f 030f 	mvn.w	r3, #15
 8017534:	e101      	b.n	801773a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017536:	68fa      	ldr	r2, [r7, #12]
 8017538:	2101      	movs	r1, #1
 801753a:	68b8      	ldr	r0, [r7, #8]
 801753c:	f7ff fb60 	bl	8016c00 <etharp_find_entry>
 8017540:	4603      	mov	r3, r0
 8017542:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017544:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017548:	2b00      	cmp	r3, #0
 801754a:	da02      	bge.n	8017552 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801754c:	8a7b      	ldrh	r3, [r7, #18]
 801754e:	b25b      	sxtb	r3, r3
 8017550:	e0f3      	b.n	801773a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017552:	8a7b      	ldrh	r3, [r7, #18]
 8017554:	2b7e      	cmp	r3, #126	; 0x7e
 8017556:	d906      	bls.n	8017566 <etharp_query+0x7e>
 8017558:	4b7a      	ldr	r3, [pc, #488]	; (8017744 <etharp_query+0x25c>)
 801755a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801755e:	497a      	ldr	r1, [pc, #488]	; (8017748 <etharp_query+0x260>)
 8017560:	487a      	ldr	r0, [pc, #488]	; (801774c <etharp_query+0x264>)
 8017562:	f002 fde9 	bl	801a138 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017566:	8a7b      	ldrh	r3, [r7, #18]
 8017568:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801756a:	7c7a      	ldrb	r2, [r7, #17]
 801756c:	4978      	ldr	r1, [pc, #480]	; (8017750 <etharp_query+0x268>)
 801756e:	4613      	mov	r3, r2
 8017570:	005b      	lsls	r3, r3, #1
 8017572:	4413      	add	r3, r2
 8017574:	00db      	lsls	r3, r3, #3
 8017576:	440b      	add	r3, r1
 8017578:	3314      	adds	r3, #20
 801757a:	781b      	ldrb	r3, [r3, #0]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d115      	bne.n	80175ac <etharp_query+0xc4>
    is_new_entry = 1;
 8017580:	2301      	movs	r3, #1
 8017582:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017584:	7c7a      	ldrb	r2, [r7, #17]
 8017586:	4972      	ldr	r1, [pc, #456]	; (8017750 <etharp_query+0x268>)
 8017588:	4613      	mov	r3, r2
 801758a:	005b      	lsls	r3, r3, #1
 801758c:	4413      	add	r3, r2
 801758e:	00db      	lsls	r3, r3, #3
 8017590:	440b      	add	r3, r1
 8017592:	3314      	adds	r3, #20
 8017594:	2201      	movs	r2, #1
 8017596:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017598:	7c7a      	ldrb	r2, [r7, #17]
 801759a:	496d      	ldr	r1, [pc, #436]	; (8017750 <etharp_query+0x268>)
 801759c:	4613      	mov	r3, r2
 801759e:	005b      	lsls	r3, r3, #1
 80175a0:	4413      	add	r3, r2
 80175a2:	00db      	lsls	r3, r3, #3
 80175a4:	440b      	add	r3, r1
 80175a6:	3308      	adds	r3, #8
 80175a8:	68fa      	ldr	r2, [r7, #12]
 80175aa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80175ac:	7c7a      	ldrb	r2, [r7, #17]
 80175ae:	4968      	ldr	r1, [pc, #416]	; (8017750 <etharp_query+0x268>)
 80175b0:	4613      	mov	r3, r2
 80175b2:	005b      	lsls	r3, r3, #1
 80175b4:	4413      	add	r3, r2
 80175b6:	00db      	lsls	r3, r3, #3
 80175b8:	440b      	add	r3, r1
 80175ba:	3314      	adds	r3, #20
 80175bc:	781b      	ldrb	r3, [r3, #0]
 80175be:	2b01      	cmp	r3, #1
 80175c0:	d011      	beq.n	80175e6 <etharp_query+0xfe>
 80175c2:	7c7a      	ldrb	r2, [r7, #17]
 80175c4:	4962      	ldr	r1, [pc, #392]	; (8017750 <etharp_query+0x268>)
 80175c6:	4613      	mov	r3, r2
 80175c8:	005b      	lsls	r3, r3, #1
 80175ca:	4413      	add	r3, r2
 80175cc:	00db      	lsls	r3, r3, #3
 80175ce:	440b      	add	r3, r1
 80175d0:	3314      	adds	r3, #20
 80175d2:	781b      	ldrb	r3, [r3, #0]
 80175d4:	2b01      	cmp	r3, #1
 80175d6:	d806      	bhi.n	80175e6 <etharp_query+0xfe>
 80175d8:	4b5a      	ldr	r3, [pc, #360]	; (8017744 <etharp_query+0x25c>)
 80175da:	f240 32cd 	movw	r2, #973	; 0x3cd
 80175de:	495d      	ldr	r1, [pc, #372]	; (8017754 <etharp_query+0x26c>)
 80175e0:	485a      	ldr	r0, [pc, #360]	; (801774c <etharp_query+0x264>)
 80175e2:	f002 fda9 	bl	801a138 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80175e6:	6a3b      	ldr	r3, [r7, #32]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d102      	bne.n	80175f2 <etharp_query+0x10a>
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d10c      	bne.n	801760c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80175f2:	68b9      	ldr	r1, [r7, #8]
 80175f4:	68f8      	ldr	r0, [r7, #12]
 80175f6:	f000 f963 	bl	80178c0 <etharp_request>
 80175fa:	4603      	mov	r3, r0
 80175fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d102      	bne.n	801760c <etharp_query+0x124>
      return result;
 8017606:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801760a:	e096      	b.n	801773a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	2b00      	cmp	r3, #0
 8017610:	d106      	bne.n	8017620 <etharp_query+0x138>
 8017612:	4b4c      	ldr	r3, [pc, #304]	; (8017744 <etharp_query+0x25c>)
 8017614:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017618:	494f      	ldr	r1, [pc, #316]	; (8017758 <etharp_query+0x270>)
 801761a:	484c      	ldr	r0, [pc, #304]	; (801774c <etharp_query+0x264>)
 801761c:	f002 fd8c 	bl	801a138 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017620:	7c7a      	ldrb	r2, [r7, #17]
 8017622:	494b      	ldr	r1, [pc, #300]	; (8017750 <etharp_query+0x268>)
 8017624:	4613      	mov	r3, r2
 8017626:	005b      	lsls	r3, r3, #1
 8017628:	4413      	add	r3, r2
 801762a:	00db      	lsls	r3, r3, #3
 801762c:	440b      	add	r3, r1
 801762e:	3314      	adds	r3, #20
 8017630:	781b      	ldrb	r3, [r3, #0]
 8017632:	2b01      	cmp	r3, #1
 8017634:	d917      	bls.n	8017666 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017636:	4a49      	ldr	r2, [pc, #292]	; (801775c <etharp_query+0x274>)
 8017638:	7c7b      	ldrb	r3, [r7, #17]
 801763a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801763c:	7c7a      	ldrb	r2, [r7, #17]
 801763e:	4613      	mov	r3, r2
 8017640:	005b      	lsls	r3, r3, #1
 8017642:	4413      	add	r3, r2
 8017644:	00db      	lsls	r3, r3, #3
 8017646:	3308      	adds	r3, #8
 8017648:	4a41      	ldr	r2, [pc, #260]	; (8017750 <etharp_query+0x268>)
 801764a:	4413      	add	r3, r2
 801764c:	3304      	adds	r3, #4
 801764e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017652:	9200      	str	r2, [sp, #0]
 8017654:	697a      	ldr	r2, [r7, #20]
 8017656:	6879      	ldr	r1, [r7, #4]
 8017658:	68f8      	ldr	r0, [r7, #12]
 801765a:	f001 fc6f 	bl	8018f3c <ethernet_output>
 801765e:	4603      	mov	r3, r0
 8017660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017664:	e067      	b.n	8017736 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017666:	7c7a      	ldrb	r2, [r7, #17]
 8017668:	4939      	ldr	r1, [pc, #228]	; (8017750 <etharp_query+0x268>)
 801766a:	4613      	mov	r3, r2
 801766c:	005b      	lsls	r3, r3, #1
 801766e:	4413      	add	r3, r2
 8017670:	00db      	lsls	r3, r3, #3
 8017672:	440b      	add	r3, r1
 8017674:	3314      	adds	r3, #20
 8017676:	781b      	ldrb	r3, [r3, #0]
 8017678:	2b01      	cmp	r3, #1
 801767a:	d15c      	bne.n	8017736 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801767c:	2300      	movs	r3, #0
 801767e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017684:	e01c      	b.n	80176c0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017686:	69fb      	ldr	r3, [r7, #28]
 8017688:	895a      	ldrh	r2, [r3, #10]
 801768a:	69fb      	ldr	r3, [r7, #28]
 801768c:	891b      	ldrh	r3, [r3, #8]
 801768e:	429a      	cmp	r2, r3
 8017690:	d10a      	bne.n	80176a8 <etharp_query+0x1c0>
 8017692:	69fb      	ldr	r3, [r7, #28]
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d006      	beq.n	80176a8 <etharp_query+0x1c0>
 801769a:	4b2a      	ldr	r3, [pc, #168]	; (8017744 <etharp_query+0x25c>)
 801769c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80176a0:	492f      	ldr	r1, [pc, #188]	; (8017760 <etharp_query+0x278>)
 80176a2:	482a      	ldr	r0, [pc, #168]	; (801774c <etharp_query+0x264>)
 80176a4:	f002 fd48 	bl	801a138 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80176a8:	69fb      	ldr	r3, [r7, #28]
 80176aa:	7b1b      	ldrb	r3, [r3, #12]
 80176ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d002      	beq.n	80176ba <etharp_query+0x1d2>
        copy_needed = 1;
 80176b4:	2301      	movs	r3, #1
 80176b6:	61bb      	str	r3, [r7, #24]
        break;
 80176b8:	e005      	b.n	80176c6 <etharp_query+0x1de>
      }
      p = p->next;
 80176ba:	69fb      	ldr	r3, [r7, #28]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	61fb      	str	r3, [r7, #28]
    while (p) {
 80176c0:	69fb      	ldr	r3, [r7, #28]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d1df      	bne.n	8017686 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80176c6:	69bb      	ldr	r3, [r7, #24]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d007      	beq.n	80176dc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80176cc:	687a      	ldr	r2, [r7, #4]
 80176ce:	f44f 7120 	mov.w	r1, #640	; 0x280
 80176d2:	200e      	movs	r0, #14
 80176d4:	f7f8 febc 	bl	8010450 <pbuf_clone>
 80176d8:	61f8      	str	r0, [r7, #28]
 80176da:	e004      	b.n	80176e6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80176e0:	69f8      	ldr	r0, [r7, #28]
 80176e2:	f7f8 fc67 	bl	800ffb4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80176e6:	69fb      	ldr	r3, [r7, #28]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d021      	beq.n	8017730 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80176ec:	7c7a      	ldrb	r2, [r7, #17]
 80176ee:	4918      	ldr	r1, [pc, #96]	; (8017750 <etharp_query+0x268>)
 80176f0:	4613      	mov	r3, r2
 80176f2:	005b      	lsls	r3, r3, #1
 80176f4:	4413      	add	r3, r2
 80176f6:	00db      	lsls	r3, r3, #3
 80176f8:	440b      	add	r3, r1
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d00a      	beq.n	8017716 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017700:	7c7a      	ldrb	r2, [r7, #17]
 8017702:	4913      	ldr	r1, [pc, #76]	; (8017750 <etharp_query+0x268>)
 8017704:	4613      	mov	r3, r2
 8017706:	005b      	lsls	r3, r3, #1
 8017708:	4413      	add	r3, r2
 801770a:	00db      	lsls	r3, r3, #3
 801770c:	440b      	add	r3, r1
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	4618      	mov	r0, r3
 8017712:	f7f8 fbaf 	bl	800fe74 <pbuf_free>
      }
      arp_table[i].q = p;
 8017716:	7c7a      	ldrb	r2, [r7, #17]
 8017718:	490d      	ldr	r1, [pc, #52]	; (8017750 <etharp_query+0x268>)
 801771a:	4613      	mov	r3, r2
 801771c:	005b      	lsls	r3, r3, #1
 801771e:	4413      	add	r3, r2
 8017720:	00db      	lsls	r3, r3, #3
 8017722:	440b      	add	r3, r1
 8017724:	69fa      	ldr	r2, [r7, #28]
 8017726:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017728:	2300      	movs	r3, #0
 801772a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801772e:	e002      	b.n	8017736 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017730:	23ff      	movs	r3, #255	; 0xff
 8017732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017736:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801773a:	4618      	mov	r0, r3
 801773c:	3728      	adds	r7, #40	; 0x28
 801773e:	46bd      	mov	sp, r7
 8017740:	bd80      	pop	{r7, pc}
 8017742:	bf00      	nop
 8017744:	0801ec20 	.word	0x0801ec20
 8017748:	0801edcc 	.word	0x0801edcc
 801774c:	0801ec98 	.word	0x0801ec98
 8017750:	20000858 	.word	0x20000858
 8017754:	0801eddc 	.word	0x0801eddc
 8017758:	0801edc0 	.word	0x0801edc0
 801775c:	20000948 	.word	0x20000948
 8017760:	0801ee04 	.word	0x0801ee04

08017764 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b08a      	sub	sp, #40	; 0x28
 8017768:	af02      	add	r7, sp, #8
 801776a:	60f8      	str	r0, [r7, #12]
 801776c:	60b9      	str	r1, [r7, #8]
 801776e:	607a      	str	r2, [r7, #4]
 8017770:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017772:	2300      	movs	r3, #0
 8017774:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d106      	bne.n	801778a <etharp_raw+0x26>
 801777c:	4b3a      	ldr	r3, [pc, #232]	; (8017868 <etharp_raw+0x104>)
 801777e:	f240 4257 	movw	r2, #1111	; 0x457
 8017782:	493a      	ldr	r1, [pc, #232]	; (801786c <etharp_raw+0x108>)
 8017784:	483a      	ldr	r0, [pc, #232]	; (8017870 <etharp_raw+0x10c>)
 8017786:	f002 fcd7 	bl	801a138 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801778a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801778e:	211c      	movs	r1, #28
 8017790:	200e      	movs	r0, #14
 8017792:	f7f8 f88b 	bl	800f8ac <pbuf_alloc>
 8017796:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017798:	69bb      	ldr	r3, [r7, #24]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d102      	bne.n	80177a4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801779e:	f04f 33ff 	mov.w	r3, #4294967295
 80177a2:	e05d      	b.n	8017860 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80177a4:	69bb      	ldr	r3, [r7, #24]
 80177a6:	895b      	ldrh	r3, [r3, #10]
 80177a8:	2b1b      	cmp	r3, #27
 80177aa:	d806      	bhi.n	80177ba <etharp_raw+0x56>
 80177ac:	4b2e      	ldr	r3, [pc, #184]	; (8017868 <etharp_raw+0x104>)
 80177ae:	f240 4262 	movw	r2, #1122	; 0x462
 80177b2:	4930      	ldr	r1, [pc, #192]	; (8017874 <etharp_raw+0x110>)
 80177b4:	482e      	ldr	r0, [pc, #184]	; (8017870 <etharp_raw+0x10c>)
 80177b6:	f002 fcbf 	bl	801a138 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80177ba:	69bb      	ldr	r3, [r7, #24]
 80177bc:	685b      	ldr	r3, [r3, #4]
 80177be:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80177c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80177c2:	4618      	mov	r0, r3
 80177c4:	f7f7 f893 	bl	800e8ee <lwip_htons>
 80177c8:	4603      	mov	r3, r0
 80177ca:	461a      	mov	r2, r3
 80177cc:	697b      	ldr	r3, [r7, #20]
 80177ce:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80177d6:	2b06      	cmp	r3, #6
 80177d8:	d006      	beq.n	80177e8 <etharp_raw+0x84>
 80177da:	4b23      	ldr	r3, [pc, #140]	; (8017868 <etharp_raw+0x104>)
 80177dc:	f240 4269 	movw	r2, #1129	; 0x469
 80177e0:	4925      	ldr	r1, [pc, #148]	; (8017878 <etharp_raw+0x114>)
 80177e2:	4823      	ldr	r0, [pc, #140]	; (8017870 <etharp_raw+0x10c>)
 80177e4:	f002 fca8 	bl	801a138 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80177e8:	697b      	ldr	r3, [r7, #20]
 80177ea:	3308      	adds	r3, #8
 80177ec:	2206      	movs	r2, #6
 80177ee:	6839      	ldr	r1, [r7, #0]
 80177f0:	4618      	mov	r0, r3
 80177f2:	f001 ff77 	bl	80196e4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80177f6:	697b      	ldr	r3, [r7, #20]
 80177f8:	3312      	adds	r3, #18
 80177fa:	2206      	movs	r2, #6
 80177fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80177fe:	4618      	mov	r0, r3
 8017800:	f001 ff70 	bl	80196e4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017804:	697b      	ldr	r3, [r7, #20]
 8017806:	330e      	adds	r3, #14
 8017808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801780a:	6812      	ldr	r2, [r2, #0]
 801780c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801780e:	697b      	ldr	r3, [r7, #20]
 8017810:	3318      	adds	r3, #24
 8017812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017814:	6812      	ldr	r2, [r2, #0]
 8017816:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017818:	697b      	ldr	r3, [r7, #20]
 801781a:	2200      	movs	r2, #0
 801781c:	701a      	strb	r2, [r3, #0]
 801781e:	2200      	movs	r2, #0
 8017820:	f042 0201 	orr.w	r2, r2, #1
 8017824:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017826:	697b      	ldr	r3, [r7, #20]
 8017828:	2200      	movs	r2, #0
 801782a:	f042 0208 	orr.w	r2, r2, #8
 801782e:	709a      	strb	r2, [r3, #2]
 8017830:	2200      	movs	r2, #0
 8017832:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017834:	697b      	ldr	r3, [r7, #20]
 8017836:	2206      	movs	r2, #6
 8017838:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801783a:	697b      	ldr	r3, [r7, #20]
 801783c:	2204      	movs	r2, #4
 801783e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017840:	f640 0306 	movw	r3, #2054	; 0x806
 8017844:	9300      	str	r3, [sp, #0]
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	68ba      	ldr	r2, [r7, #8]
 801784a:	69b9      	ldr	r1, [r7, #24]
 801784c:	68f8      	ldr	r0, [r7, #12]
 801784e:	f001 fb75 	bl	8018f3c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017852:	69b8      	ldr	r0, [r7, #24]
 8017854:	f7f8 fb0e 	bl	800fe74 <pbuf_free>
  p = NULL;
 8017858:	2300      	movs	r3, #0
 801785a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801785c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017860:	4618      	mov	r0, r3
 8017862:	3720      	adds	r7, #32
 8017864:	46bd      	mov	sp, r7
 8017866:	bd80      	pop	{r7, pc}
 8017868:	0801ec20 	.word	0x0801ec20
 801786c:	0801ed70 	.word	0x0801ed70
 8017870:	0801ec98 	.word	0x0801ec98
 8017874:	0801ee20 	.word	0x0801ee20
 8017878:	0801ee54 	.word	0x0801ee54

0801787c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801787c:	b580      	push	{r7, lr}
 801787e:	b088      	sub	sp, #32
 8017880:	af04      	add	r7, sp, #16
 8017882:	60f8      	str	r0, [r7, #12]
 8017884:	60b9      	str	r1, [r7, #8]
 8017886:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017898:	2201      	movs	r2, #1
 801789a:	9203      	str	r2, [sp, #12]
 801789c:	68ba      	ldr	r2, [r7, #8]
 801789e:	9202      	str	r2, [sp, #8]
 80178a0:	4a06      	ldr	r2, [pc, #24]	; (80178bc <etharp_request_dst+0x40>)
 80178a2:	9201      	str	r2, [sp, #4]
 80178a4:	9300      	str	r3, [sp, #0]
 80178a6:	4603      	mov	r3, r0
 80178a8:	687a      	ldr	r2, [r7, #4]
 80178aa:	68f8      	ldr	r0, [r7, #12]
 80178ac:	f7ff ff5a 	bl	8017764 <etharp_raw>
 80178b0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80178b2:	4618      	mov	r0, r3
 80178b4:	3710      	adds	r7, #16
 80178b6:	46bd      	mov	sp, r7
 80178b8:	bd80      	pop	{r7, pc}
 80178ba:	bf00      	nop
 80178bc:	0801f568 	.word	0x0801f568

080178c0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b082      	sub	sp, #8
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
 80178c8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80178ca:	4a05      	ldr	r2, [pc, #20]	; (80178e0 <etharp_request+0x20>)
 80178cc:	6839      	ldr	r1, [r7, #0]
 80178ce:	6878      	ldr	r0, [r7, #4]
 80178d0:	f7ff ffd4 	bl	801787c <etharp_request_dst>
 80178d4:	4603      	mov	r3, r0
}
 80178d6:	4618      	mov	r0, r3
 80178d8:	3708      	adds	r7, #8
 80178da:	46bd      	mov	sp, r7
 80178dc:	bd80      	pop	{r7, pc}
 80178de:	bf00      	nop
 80178e0:	0801f560 	.word	0x0801f560

080178e4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b08e      	sub	sp, #56	; 0x38
 80178e8:	af04      	add	r7, sp, #16
 80178ea:	6078      	str	r0, [r7, #4]
 80178ec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80178ee:	4b79      	ldr	r3, [pc, #484]	; (8017ad4 <icmp_input+0x1f0>)
 80178f0:	689b      	ldr	r3, [r3, #8]
 80178f2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80178f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178f6:	781b      	ldrb	r3, [r3, #0]
 80178f8:	f003 030f 	and.w	r3, r3, #15
 80178fc:	b2db      	uxtb	r3, r3
 80178fe:	009b      	lsls	r3, r3, #2
 8017900:	b2db      	uxtb	r3, r3
 8017902:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017904:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017906:	2b13      	cmp	r3, #19
 8017908:	f240 80cd 	bls.w	8017aa6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	895b      	ldrh	r3, [r3, #10]
 8017910:	2b03      	cmp	r3, #3
 8017912:	f240 80ca 	bls.w	8017aaa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	685b      	ldr	r3, [r3, #4]
 801791a:	781b      	ldrb	r3, [r3, #0]
 801791c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017920:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017924:	2b00      	cmp	r3, #0
 8017926:	f000 80b7 	beq.w	8017a98 <icmp_input+0x1b4>
 801792a:	2b08      	cmp	r3, #8
 801792c:	f040 80b7 	bne.w	8017a9e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017930:	4b69      	ldr	r3, [pc, #420]	; (8017ad8 <icmp_input+0x1f4>)
 8017932:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017934:	4b67      	ldr	r3, [pc, #412]	; (8017ad4 <icmp_input+0x1f0>)
 8017936:	695b      	ldr	r3, [r3, #20]
 8017938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801793c:	2be0      	cmp	r3, #224	; 0xe0
 801793e:	f000 80bb 	beq.w	8017ab8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017942:	4b64      	ldr	r3, [pc, #400]	; (8017ad4 <icmp_input+0x1f0>)
 8017944:	695b      	ldr	r3, [r3, #20]
 8017946:	4a63      	ldr	r2, [pc, #396]	; (8017ad4 <icmp_input+0x1f0>)
 8017948:	6812      	ldr	r2, [r2, #0]
 801794a:	4611      	mov	r1, r2
 801794c:	4618      	mov	r0, r3
 801794e:	f000 fbed 	bl	801812c <ip4_addr_isbroadcast_u32>
 8017952:	4603      	mov	r3, r0
 8017954:	2b00      	cmp	r3, #0
 8017956:	f040 80b1 	bne.w	8017abc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	891b      	ldrh	r3, [r3, #8]
 801795e:	2b07      	cmp	r3, #7
 8017960:	f240 80a5 	bls.w	8017aae <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017964:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017966:	330e      	adds	r3, #14
 8017968:	4619      	mov	r1, r3
 801796a:	6878      	ldr	r0, [r7, #4]
 801796c:	f7f8 f9ec 	bl	800fd48 <pbuf_add_header>
 8017970:	4603      	mov	r3, r0
 8017972:	2b00      	cmp	r3, #0
 8017974:	d04b      	beq.n	8017a0e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	891a      	ldrh	r2, [r3, #8]
 801797a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801797c:	4413      	add	r3, r2
 801797e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	891b      	ldrh	r3, [r3, #8]
 8017984:	8b7a      	ldrh	r2, [r7, #26]
 8017986:	429a      	cmp	r2, r3
 8017988:	f0c0 809a 	bcc.w	8017ac0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801798c:	8b7b      	ldrh	r3, [r7, #26]
 801798e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017992:	4619      	mov	r1, r3
 8017994:	200e      	movs	r0, #14
 8017996:	f7f7 ff89 	bl	800f8ac <pbuf_alloc>
 801799a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801799c:	697b      	ldr	r3, [r7, #20]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	f000 8090 	beq.w	8017ac4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80179a4:	697b      	ldr	r3, [r7, #20]
 80179a6:	895b      	ldrh	r3, [r3, #10]
 80179a8:	461a      	mov	r2, r3
 80179aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80179ac:	3308      	adds	r3, #8
 80179ae:	429a      	cmp	r2, r3
 80179b0:	d203      	bcs.n	80179ba <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80179b2:	6978      	ldr	r0, [r7, #20]
 80179b4:	f7f8 fa5e 	bl	800fe74 <pbuf_free>
          goto icmperr;
 80179b8:	e085      	b.n	8017ac6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80179ba:	697b      	ldr	r3, [r7, #20]
 80179bc:	685b      	ldr	r3, [r3, #4]
 80179be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80179c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80179c2:	4618      	mov	r0, r3
 80179c4:	f001 fe8e 	bl	80196e4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80179c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80179ca:	4619      	mov	r1, r3
 80179cc:	6978      	ldr	r0, [r7, #20]
 80179ce:	f7f8 f9cb 	bl	800fd68 <pbuf_remove_header>
 80179d2:	4603      	mov	r3, r0
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d009      	beq.n	80179ec <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80179d8:	4b40      	ldr	r3, [pc, #256]	; (8017adc <icmp_input+0x1f8>)
 80179da:	22b6      	movs	r2, #182	; 0xb6
 80179dc:	4940      	ldr	r1, [pc, #256]	; (8017ae0 <icmp_input+0x1fc>)
 80179de:	4841      	ldr	r0, [pc, #260]	; (8017ae4 <icmp_input+0x200>)
 80179e0:	f002 fbaa 	bl	801a138 <iprintf>
          pbuf_free(r);
 80179e4:	6978      	ldr	r0, [r7, #20]
 80179e6:	f7f8 fa45 	bl	800fe74 <pbuf_free>
          goto icmperr;
 80179ea:	e06c      	b.n	8017ac6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80179ec:	6879      	ldr	r1, [r7, #4]
 80179ee:	6978      	ldr	r0, [r7, #20]
 80179f0:	f7f8 fb58 	bl	80100a4 <pbuf_copy>
 80179f4:	4603      	mov	r3, r0
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d003      	beq.n	8017a02 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80179fa:	6978      	ldr	r0, [r7, #20]
 80179fc:	f7f8 fa3a 	bl	800fe74 <pbuf_free>
          goto icmperr;
 8017a00:	e061      	b.n	8017ac6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017a02:	6878      	ldr	r0, [r7, #4]
 8017a04:	f7f8 fa36 	bl	800fe74 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017a08:	697b      	ldr	r3, [r7, #20]
 8017a0a:	607b      	str	r3, [r7, #4]
 8017a0c:	e00f      	b.n	8017a2e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017a0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017a10:	330e      	adds	r3, #14
 8017a12:	4619      	mov	r1, r3
 8017a14:	6878      	ldr	r0, [r7, #4]
 8017a16:	f7f8 f9a7 	bl	800fd68 <pbuf_remove_header>
 8017a1a:	4603      	mov	r3, r0
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d006      	beq.n	8017a2e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017a20:	4b2e      	ldr	r3, [pc, #184]	; (8017adc <icmp_input+0x1f8>)
 8017a22:	22c7      	movs	r2, #199	; 0xc7
 8017a24:	4930      	ldr	r1, [pc, #192]	; (8017ae8 <icmp_input+0x204>)
 8017a26:	482f      	ldr	r0, [pc, #188]	; (8017ae4 <icmp_input+0x200>)
 8017a28:	f002 fb86 	bl	801a138 <iprintf>
          goto icmperr;
 8017a2c:	e04b      	b.n	8017ac6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	685b      	ldr	r3, [r3, #4]
 8017a32:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017a34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017a36:	4619      	mov	r1, r3
 8017a38:	6878      	ldr	r0, [r7, #4]
 8017a3a:	f7f8 f985 	bl	800fd48 <pbuf_add_header>
 8017a3e:	4603      	mov	r3, r0
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d12b      	bne.n	8017a9c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	685b      	ldr	r3, [r3, #4]
 8017a48:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017a4a:	69fb      	ldr	r3, [r7, #28]
 8017a4c:	681a      	ldr	r2, [r3, #0]
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017a52:	4b20      	ldr	r3, [pc, #128]	; (8017ad4 <icmp_input+0x1f0>)
 8017a54:	691a      	ldr	r2, [r3, #16]
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017a5a:	693b      	ldr	r3, [r7, #16]
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017a60:	693b      	ldr	r3, [r7, #16]
 8017a62:	2200      	movs	r2, #0
 8017a64:	709a      	strb	r2, [r3, #2]
 8017a66:	2200      	movs	r2, #0
 8017a68:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	22ff      	movs	r2, #255	; 0xff
 8017a6e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	2200      	movs	r2, #0
 8017a74:	729a      	strb	r2, [r3, #10]
 8017a76:	2200      	movs	r2, #0
 8017a78:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017a7a:	683b      	ldr	r3, [r7, #0]
 8017a7c:	9302      	str	r3, [sp, #8]
 8017a7e:	2301      	movs	r3, #1
 8017a80:	9301      	str	r3, [sp, #4]
 8017a82:	2300      	movs	r3, #0
 8017a84:	9300      	str	r3, [sp, #0]
 8017a86:	23ff      	movs	r3, #255	; 0xff
 8017a88:	2200      	movs	r2, #0
 8017a8a:	69f9      	ldr	r1, [r7, #28]
 8017a8c:	6878      	ldr	r0, [r7, #4]
 8017a8e:	f000 fa75 	bl	8017f7c <ip4_output_if>
 8017a92:	4603      	mov	r3, r0
 8017a94:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017a96:	e001      	b.n	8017a9c <icmp_input+0x1b8>
      break;
 8017a98:	bf00      	nop
 8017a9a:	e000      	b.n	8017a9e <icmp_input+0x1ba>
      break;
 8017a9c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017a9e:	6878      	ldr	r0, [r7, #4]
 8017aa0:	f7f8 f9e8 	bl	800fe74 <pbuf_free>
  return;
 8017aa4:	e013      	b.n	8017ace <icmp_input+0x1ea>
    goto lenerr;
 8017aa6:	bf00      	nop
 8017aa8:	e002      	b.n	8017ab0 <icmp_input+0x1cc>
    goto lenerr;
 8017aaa:	bf00      	nop
 8017aac:	e000      	b.n	8017ab0 <icmp_input+0x1cc>
        goto lenerr;
 8017aae:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017ab0:	6878      	ldr	r0, [r7, #4]
 8017ab2:	f7f8 f9df 	bl	800fe74 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017ab6:	e00a      	b.n	8017ace <icmp_input+0x1ea>
        goto icmperr;
 8017ab8:	bf00      	nop
 8017aba:	e004      	b.n	8017ac6 <icmp_input+0x1e2>
        goto icmperr;
 8017abc:	bf00      	nop
 8017abe:	e002      	b.n	8017ac6 <icmp_input+0x1e2>
          goto icmperr;
 8017ac0:	bf00      	nop
 8017ac2:	e000      	b.n	8017ac6 <icmp_input+0x1e2>
          goto icmperr;
 8017ac4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017ac6:	6878      	ldr	r0, [r7, #4]
 8017ac8:	f7f8 f9d4 	bl	800fe74 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017acc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017ace:	3728      	adds	r7, #40	; 0x28
 8017ad0:	46bd      	mov	sp, r7
 8017ad2:	bd80      	pop	{r7, pc}
 8017ad4:	20007ca8 	.word	0x20007ca8
 8017ad8:	20007cbc 	.word	0x20007cbc
 8017adc:	0801ee98 	.word	0x0801ee98
 8017ae0:	0801eed0 	.word	0x0801eed0
 8017ae4:	0801ef08 	.word	0x0801ef08
 8017ae8:	0801ef30 	.word	0x0801ef30

08017aec <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b082      	sub	sp, #8
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	6078      	str	r0, [r7, #4]
 8017af4:	460b      	mov	r3, r1
 8017af6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017af8:	78fb      	ldrb	r3, [r7, #3]
 8017afa:	461a      	mov	r2, r3
 8017afc:	2103      	movs	r1, #3
 8017afe:	6878      	ldr	r0, [r7, #4]
 8017b00:	f000 f814 	bl	8017b2c <icmp_send_response>
}
 8017b04:	bf00      	nop
 8017b06:	3708      	adds	r7, #8
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	bd80      	pop	{r7, pc}

08017b0c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017b0c:	b580      	push	{r7, lr}
 8017b0e:	b082      	sub	sp, #8
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	6078      	str	r0, [r7, #4]
 8017b14:	460b      	mov	r3, r1
 8017b16:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017b18:	78fb      	ldrb	r3, [r7, #3]
 8017b1a:	461a      	mov	r2, r3
 8017b1c:	210b      	movs	r1, #11
 8017b1e:	6878      	ldr	r0, [r7, #4]
 8017b20:	f000 f804 	bl	8017b2c <icmp_send_response>
}
 8017b24:	bf00      	nop
 8017b26:	3708      	adds	r7, #8
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	bd80      	pop	{r7, pc}

08017b2c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017b2c:	b580      	push	{r7, lr}
 8017b2e:	b08c      	sub	sp, #48	; 0x30
 8017b30:	af04      	add	r7, sp, #16
 8017b32:	6078      	str	r0, [r7, #4]
 8017b34:	460b      	mov	r3, r1
 8017b36:	70fb      	strb	r3, [r7, #3]
 8017b38:	4613      	mov	r3, r2
 8017b3a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017b3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017b40:	2124      	movs	r1, #36	; 0x24
 8017b42:	2022      	movs	r0, #34	; 0x22
 8017b44:	f7f7 feb2 	bl	800f8ac <pbuf_alloc>
 8017b48:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017b4a:	69fb      	ldr	r3, [r7, #28]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d04c      	beq.n	8017bea <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017b50:	69fb      	ldr	r3, [r7, #28]
 8017b52:	895b      	ldrh	r3, [r3, #10]
 8017b54:	2b23      	cmp	r3, #35	; 0x23
 8017b56:	d806      	bhi.n	8017b66 <icmp_send_response+0x3a>
 8017b58:	4b26      	ldr	r3, [pc, #152]	; (8017bf4 <icmp_send_response+0xc8>)
 8017b5a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017b5e:	4926      	ldr	r1, [pc, #152]	; (8017bf8 <icmp_send_response+0xcc>)
 8017b60:	4826      	ldr	r0, [pc, #152]	; (8017bfc <icmp_send_response+0xd0>)
 8017b62:	f002 fae9 	bl	801a138 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	685b      	ldr	r3, [r3, #4]
 8017b6a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017b6c:	69fb      	ldr	r3, [r7, #28]
 8017b6e:	685b      	ldr	r3, [r3, #4]
 8017b70:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017b72:	697b      	ldr	r3, [r7, #20]
 8017b74:	78fa      	ldrb	r2, [r7, #3]
 8017b76:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017b78:	697b      	ldr	r3, [r7, #20]
 8017b7a:	78ba      	ldrb	r2, [r7, #2]
 8017b7c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017b7e:	697b      	ldr	r3, [r7, #20]
 8017b80:	2200      	movs	r2, #0
 8017b82:	711a      	strb	r2, [r3, #4]
 8017b84:	2200      	movs	r2, #0
 8017b86:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017b88:	697b      	ldr	r3, [r7, #20]
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	719a      	strb	r2, [r3, #6]
 8017b8e:	2200      	movs	r2, #0
 8017b90:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017b92:	69fb      	ldr	r3, [r7, #28]
 8017b94:	685b      	ldr	r3, [r3, #4]
 8017b96:	f103 0008 	add.w	r0, r3, #8
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	685b      	ldr	r3, [r3, #4]
 8017b9e:	221c      	movs	r2, #28
 8017ba0:	4619      	mov	r1, r3
 8017ba2:	f001 fd9f 	bl	80196e4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017ba6:	69bb      	ldr	r3, [r7, #24]
 8017ba8:	68db      	ldr	r3, [r3, #12]
 8017baa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017bac:	f107 030c 	add.w	r3, r7, #12
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f000 f825 	bl	8017c00 <ip4_route>
 8017bb6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017bb8:	693b      	ldr	r3, [r7, #16]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d011      	beq.n	8017be2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017bbe:	697b      	ldr	r3, [r7, #20]
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	709a      	strb	r2, [r3, #2]
 8017bc4:	2200      	movs	r2, #0
 8017bc6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017bc8:	f107 020c 	add.w	r2, r7, #12
 8017bcc:	693b      	ldr	r3, [r7, #16]
 8017bce:	9302      	str	r3, [sp, #8]
 8017bd0:	2301      	movs	r3, #1
 8017bd2:	9301      	str	r3, [sp, #4]
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	9300      	str	r3, [sp, #0]
 8017bd8:	23ff      	movs	r3, #255	; 0xff
 8017bda:	2100      	movs	r1, #0
 8017bdc:	69f8      	ldr	r0, [r7, #28]
 8017bde:	f000 f9cd 	bl	8017f7c <ip4_output_if>
  }
  pbuf_free(q);
 8017be2:	69f8      	ldr	r0, [r7, #28]
 8017be4:	f7f8 f946 	bl	800fe74 <pbuf_free>
 8017be8:	e000      	b.n	8017bec <icmp_send_response+0xc0>
    return;
 8017bea:	bf00      	nop
}
 8017bec:	3720      	adds	r7, #32
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	bd80      	pop	{r7, pc}
 8017bf2:	bf00      	nop
 8017bf4:	0801ee98 	.word	0x0801ee98
 8017bf8:	0801ef64 	.word	0x0801ef64
 8017bfc:	0801ef08 	.word	0x0801ef08

08017c00 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017c00:	b480      	push	{r7}
 8017c02:	b085      	sub	sp, #20
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017c08:	4b33      	ldr	r3, [pc, #204]	; (8017cd8 <ip4_route+0xd8>)
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	60fb      	str	r3, [r7, #12]
 8017c0e:	e036      	b.n	8017c7e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c16:	f003 0301 	and.w	r3, r3, #1
 8017c1a:	b2db      	uxtb	r3, r3
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d02b      	beq.n	8017c78 <ip4_route+0x78>
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c26:	089b      	lsrs	r3, r3, #2
 8017c28:	f003 0301 	and.w	r3, r3, #1
 8017c2c:	b2db      	uxtb	r3, r3
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d022      	beq.n	8017c78 <ip4_route+0x78>
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	3304      	adds	r3, #4
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d01d      	beq.n	8017c78 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	681a      	ldr	r2, [r3, #0]
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	3304      	adds	r3, #4
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	405a      	eors	r2, r3
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	3308      	adds	r3, #8
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	4013      	ands	r3, r2
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d101      	bne.n	8017c58 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	e038      	b.n	8017cca <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c5e:	f003 0302 	and.w	r3, r3, #2
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d108      	bne.n	8017c78 <ip4_route+0x78>
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	681a      	ldr	r2, [r3, #0]
 8017c6a:	68fb      	ldr	r3, [r7, #12]
 8017c6c:	330c      	adds	r3, #12
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	429a      	cmp	r2, r3
 8017c72:	d101      	bne.n	8017c78 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017c74:	68fb      	ldr	r3, [r7, #12]
 8017c76:	e028      	b.n	8017cca <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	60fb      	str	r3, [r7, #12]
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d1c5      	bne.n	8017c10 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017c84:	4b15      	ldr	r3, [pc, #84]	; (8017cdc <ip4_route+0xdc>)
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d01a      	beq.n	8017cc2 <ip4_route+0xc2>
 8017c8c:	4b13      	ldr	r3, [pc, #76]	; (8017cdc <ip4_route+0xdc>)
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c94:	f003 0301 	and.w	r3, r3, #1
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d012      	beq.n	8017cc2 <ip4_route+0xc2>
 8017c9c:	4b0f      	ldr	r3, [pc, #60]	; (8017cdc <ip4_route+0xdc>)
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ca4:	f003 0304 	and.w	r3, r3, #4
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d00a      	beq.n	8017cc2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017cac:	4b0b      	ldr	r3, [pc, #44]	; (8017cdc <ip4_route+0xdc>)
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	3304      	adds	r3, #4
 8017cb2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d004      	beq.n	8017cc2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	b2db      	uxtb	r3, r3
 8017cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8017cc0:	d101      	bne.n	8017cc6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	e001      	b.n	8017cca <ip4_route+0xca>
  }

  return netif_default;
 8017cc6:	4b05      	ldr	r3, [pc, #20]	; (8017cdc <ip4_route+0xdc>)
 8017cc8:	681b      	ldr	r3, [r3, #0]
}
 8017cca:	4618      	mov	r0, r3
 8017ccc:	3714      	adds	r7, #20
 8017cce:	46bd      	mov	sp, r7
 8017cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd4:	4770      	bx	lr
 8017cd6:	bf00      	nop
 8017cd8:	200188fc 	.word	0x200188fc
 8017cdc:	20018900 	.word	0x20018900

08017ce0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017ce0:	b580      	push	{r7, lr}
 8017ce2:	b082      	sub	sp, #8
 8017ce4:	af00      	add	r7, sp, #0
 8017ce6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017cee:	f003 0301 	and.w	r3, r3, #1
 8017cf2:	b2db      	uxtb	r3, r3
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d016      	beq.n	8017d26 <ip4_input_accept+0x46>
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	3304      	adds	r3, #4
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d011      	beq.n	8017d26 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017d02:	4b0b      	ldr	r3, [pc, #44]	; (8017d30 <ip4_input_accept+0x50>)
 8017d04:	695a      	ldr	r2, [r3, #20]
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	3304      	adds	r3, #4
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	429a      	cmp	r2, r3
 8017d0e:	d008      	beq.n	8017d22 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017d10:	4b07      	ldr	r3, [pc, #28]	; (8017d30 <ip4_input_accept+0x50>)
 8017d12:	695b      	ldr	r3, [r3, #20]
 8017d14:	6879      	ldr	r1, [r7, #4]
 8017d16:	4618      	mov	r0, r3
 8017d18:	f000 fa08 	bl	801812c <ip4_addr_isbroadcast_u32>
 8017d1c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d001      	beq.n	8017d26 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017d22:	2301      	movs	r3, #1
 8017d24:	e000      	b.n	8017d28 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017d26:	2300      	movs	r3, #0
}
 8017d28:	4618      	mov	r0, r3
 8017d2a:	3708      	adds	r7, #8
 8017d2c:	46bd      	mov	sp, r7
 8017d2e:	bd80      	pop	{r7, pc}
 8017d30:	20007ca8 	.word	0x20007ca8

08017d34 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017d34:	b580      	push	{r7, lr}
 8017d36:	b086      	sub	sp, #24
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	6078      	str	r0, [r7, #4]
 8017d3c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	685b      	ldr	r3, [r3, #4]
 8017d42:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017d44:	697b      	ldr	r3, [r7, #20]
 8017d46:	781b      	ldrb	r3, [r3, #0]
 8017d48:	091b      	lsrs	r3, r3, #4
 8017d4a:	b2db      	uxtb	r3, r3
 8017d4c:	2b04      	cmp	r3, #4
 8017d4e:	d004      	beq.n	8017d5a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017d50:	6878      	ldr	r0, [r7, #4]
 8017d52:	f7f8 f88f 	bl	800fe74 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017d56:	2300      	movs	r3, #0
 8017d58:	e107      	b.n	8017f6a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017d5a:	697b      	ldr	r3, [r7, #20]
 8017d5c:	781b      	ldrb	r3, [r3, #0]
 8017d5e:	f003 030f 	and.w	r3, r3, #15
 8017d62:	b2db      	uxtb	r3, r3
 8017d64:	009b      	lsls	r3, r3, #2
 8017d66:	b2db      	uxtb	r3, r3
 8017d68:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017d6a:	697b      	ldr	r3, [r7, #20]
 8017d6c:	885b      	ldrh	r3, [r3, #2]
 8017d6e:	b29b      	uxth	r3, r3
 8017d70:	4618      	mov	r0, r3
 8017d72:	f7f6 fdbc 	bl	800e8ee <lwip_htons>
 8017d76:	4603      	mov	r3, r0
 8017d78:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	891b      	ldrh	r3, [r3, #8]
 8017d7e:	89ba      	ldrh	r2, [r7, #12]
 8017d80:	429a      	cmp	r2, r3
 8017d82:	d204      	bcs.n	8017d8e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017d84:	89bb      	ldrh	r3, [r7, #12]
 8017d86:	4619      	mov	r1, r3
 8017d88:	6878      	ldr	r0, [r7, #4]
 8017d8a:	f7f7 feed 	bl	800fb68 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	895b      	ldrh	r3, [r3, #10]
 8017d92:	89fa      	ldrh	r2, [r7, #14]
 8017d94:	429a      	cmp	r2, r3
 8017d96:	d807      	bhi.n	8017da8 <ip4_input+0x74>
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	891b      	ldrh	r3, [r3, #8]
 8017d9c:	89ba      	ldrh	r2, [r7, #12]
 8017d9e:	429a      	cmp	r2, r3
 8017da0:	d802      	bhi.n	8017da8 <ip4_input+0x74>
 8017da2:	89fb      	ldrh	r3, [r7, #14]
 8017da4:	2b13      	cmp	r3, #19
 8017da6:	d804      	bhi.n	8017db2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017da8:	6878      	ldr	r0, [r7, #4]
 8017daa:	f7f8 f863 	bl	800fe74 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017dae:	2300      	movs	r3, #0
 8017db0:	e0db      	b.n	8017f6a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017db2:	697b      	ldr	r3, [r7, #20]
 8017db4:	691b      	ldr	r3, [r3, #16]
 8017db6:	4a6f      	ldr	r2, [pc, #444]	; (8017f74 <ip4_input+0x240>)
 8017db8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017dba:	697b      	ldr	r3, [r7, #20]
 8017dbc:	68db      	ldr	r3, [r3, #12]
 8017dbe:	4a6d      	ldr	r2, [pc, #436]	; (8017f74 <ip4_input+0x240>)
 8017dc0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017dc2:	4b6c      	ldr	r3, [pc, #432]	; (8017f74 <ip4_input+0x240>)
 8017dc4:	695b      	ldr	r3, [r3, #20]
 8017dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017dca:	2be0      	cmp	r3, #224	; 0xe0
 8017dcc:	d112      	bne.n	8017df4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017dce:	683b      	ldr	r3, [r7, #0]
 8017dd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017dd4:	f003 0301 	and.w	r3, r3, #1
 8017dd8:	b2db      	uxtb	r3, r3
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d007      	beq.n	8017dee <ip4_input+0xba>
 8017dde:	683b      	ldr	r3, [r7, #0]
 8017de0:	3304      	adds	r3, #4
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d002      	beq.n	8017dee <ip4_input+0xba>
      netif = inp;
 8017de8:	683b      	ldr	r3, [r7, #0]
 8017dea:	613b      	str	r3, [r7, #16]
 8017dec:	e02a      	b.n	8017e44 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017dee:	2300      	movs	r3, #0
 8017df0:	613b      	str	r3, [r7, #16]
 8017df2:	e027      	b.n	8017e44 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017df4:	6838      	ldr	r0, [r7, #0]
 8017df6:	f7ff ff73 	bl	8017ce0 <ip4_input_accept>
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d002      	beq.n	8017e06 <ip4_input+0xd2>
      netif = inp;
 8017e00:	683b      	ldr	r3, [r7, #0]
 8017e02:	613b      	str	r3, [r7, #16]
 8017e04:	e01e      	b.n	8017e44 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017e06:	2300      	movs	r3, #0
 8017e08:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017e0a:	4b5a      	ldr	r3, [pc, #360]	; (8017f74 <ip4_input+0x240>)
 8017e0c:	695b      	ldr	r3, [r3, #20]
 8017e0e:	b2db      	uxtb	r3, r3
 8017e10:	2b7f      	cmp	r3, #127	; 0x7f
 8017e12:	d017      	beq.n	8017e44 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017e14:	4b58      	ldr	r3, [pc, #352]	; (8017f78 <ip4_input+0x244>)
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	613b      	str	r3, [r7, #16]
 8017e1a:	e00e      	b.n	8017e3a <ip4_input+0x106>
          if (netif == inp) {
 8017e1c:	693a      	ldr	r2, [r7, #16]
 8017e1e:	683b      	ldr	r3, [r7, #0]
 8017e20:	429a      	cmp	r2, r3
 8017e22:	d006      	beq.n	8017e32 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017e24:	6938      	ldr	r0, [r7, #16]
 8017e26:	f7ff ff5b 	bl	8017ce0 <ip4_input_accept>
 8017e2a:	4603      	mov	r3, r0
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d108      	bne.n	8017e42 <ip4_input+0x10e>
 8017e30:	e000      	b.n	8017e34 <ip4_input+0x100>
            continue;
 8017e32:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017e34:	693b      	ldr	r3, [r7, #16]
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	613b      	str	r3, [r7, #16]
 8017e3a:	693b      	ldr	r3, [r7, #16]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d1ed      	bne.n	8017e1c <ip4_input+0xe8>
 8017e40:	e000      	b.n	8017e44 <ip4_input+0x110>
            break;
 8017e42:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017e44:	4b4b      	ldr	r3, [pc, #300]	; (8017f74 <ip4_input+0x240>)
 8017e46:	691b      	ldr	r3, [r3, #16]
 8017e48:	6839      	ldr	r1, [r7, #0]
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f000 f96e 	bl	801812c <ip4_addr_isbroadcast_u32>
 8017e50:	4603      	mov	r3, r0
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d105      	bne.n	8017e62 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017e56:	4b47      	ldr	r3, [pc, #284]	; (8017f74 <ip4_input+0x240>)
 8017e58:	691b      	ldr	r3, [r3, #16]
 8017e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017e5e:	2be0      	cmp	r3, #224	; 0xe0
 8017e60:	d104      	bne.n	8017e6c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017e62:	6878      	ldr	r0, [r7, #4]
 8017e64:	f7f8 f806 	bl	800fe74 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017e68:	2300      	movs	r3, #0
 8017e6a:	e07e      	b.n	8017f6a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017e6c:	693b      	ldr	r3, [r7, #16]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d104      	bne.n	8017e7c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017e72:	6878      	ldr	r0, [r7, #4]
 8017e74:	f7f7 fffe 	bl	800fe74 <pbuf_free>
    return ERR_OK;
 8017e78:	2300      	movs	r3, #0
 8017e7a:	e076      	b.n	8017f6a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017e7c:	697b      	ldr	r3, [r7, #20]
 8017e7e:	88db      	ldrh	r3, [r3, #6]
 8017e80:	b29b      	uxth	r3, r3
 8017e82:	461a      	mov	r2, r3
 8017e84:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017e88:	4013      	ands	r3, r2
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d00b      	beq.n	8017ea6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017e8e:	6878      	ldr	r0, [r7, #4]
 8017e90:	f000 fc92 	bl	80187b8 <ip4_reass>
 8017e94:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d101      	bne.n	8017ea0 <ip4_input+0x16c>
      return ERR_OK;
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	e064      	b.n	8017f6a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	685b      	ldr	r3, [r3, #4]
 8017ea4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017ea6:	4a33      	ldr	r2, [pc, #204]	; (8017f74 <ip4_input+0x240>)
 8017ea8:	693b      	ldr	r3, [r7, #16]
 8017eaa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017eac:	4a31      	ldr	r2, [pc, #196]	; (8017f74 <ip4_input+0x240>)
 8017eae:	683b      	ldr	r3, [r7, #0]
 8017eb0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017eb2:	4a30      	ldr	r2, [pc, #192]	; (8017f74 <ip4_input+0x240>)
 8017eb4:	697b      	ldr	r3, [r7, #20]
 8017eb6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017eb8:	697b      	ldr	r3, [r7, #20]
 8017eba:	781b      	ldrb	r3, [r3, #0]
 8017ebc:	f003 030f 	and.w	r3, r3, #15
 8017ec0:	b2db      	uxtb	r3, r3
 8017ec2:	009b      	lsls	r3, r3, #2
 8017ec4:	b2db      	uxtb	r3, r3
 8017ec6:	b29a      	uxth	r2, r3
 8017ec8:	4b2a      	ldr	r3, [pc, #168]	; (8017f74 <ip4_input+0x240>)
 8017eca:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017ecc:	89fb      	ldrh	r3, [r7, #14]
 8017ece:	4619      	mov	r1, r3
 8017ed0:	6878      	ldr	r0, [r7, #4]
 8017ed2:	f7f7 ff49 	bl	800fd68 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017ed6:	697b      	ldr	r3, [r7, #20]
 8017ed8:	7a5b      	ldrb	r3, [r3, #9]
 8017eda:	2b11      	cmp	r3, #17
 8017edc:	d006      	beq.n	8017eec <ip4_input+0x1b8>
 8017ede:	2b11      	cmp	r3, #17
 8017ee0:	dc13      	bgt.n	8017f0a <ip4_input+0x1d6>
 8017ee2:	2b01      	cmp	r3, #1
 8017ee4:	d00c      	beq.n	8017f00 <ip4_input+0x1cc>
 8017ee6:	2b06      	cmp	r3, #6
 8017ee8:	d005      	beq.n	8017ef6 <ip4_input+0x1c2>
 8017eea:	e00e      	b.n	8017f0a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017eec:	6839      	ldr	r1, [r7, #0]
 8017eee:	6878      	ldr	r0, [r7, #4]
 8017ef0:	f7fe fc68 	bl	80167c4 <udp_input>
        break;
 8017ef4:	e026      	b.n	8017f44 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017ef6:	6839      	ldr	r1, [r7, #0]
 8017ef8:	6878      	ldr	r0, [r7, #4]
 8017efa:	f7fa f887 	bl	801200c <tcp_input>
        break;
 8017efe:	e021      	b.n	8017f44 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017f00:	6839      	ldr	r1, [r7, #0]
 8017f02:	6878      	ldr	r0, [r7, #4]
 8017f04:	f7ff fcee 	bl	80178e4 <icmp_input>
        break;
 8017f08:	e01c      	b.n	8017f44 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017f0a:	4b1a      	ldr	r3, [pc, #104]	; (8017f74 <ip4_input+0x240>)
 8017f0c:	695b      	ldr	r3, [r3, #20]
 8017f0e:	6939      	ldr	r1, [r7, #16]
 8017f10:	4618      	mov	r0, r3
 8017f12:	f000 f90b 	bl	801812c <ip4_addr_isbroadcast_u32>
 8017f16:	4603      	mov	r3, r0
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d10f      	bne.n	8017f3c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017f1c:	4b15      	ldr	r3, [pc, #84]	; (8017f74 <ip4_input+0x240>)
 8017f1e:	695b      	ldr	r3, [r3, #20]
 8017f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017f24:	2be0      	cmp	r3, #224	; 0xe0
 8017f26:	d009      	beq.n	8017f3c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017f28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017f2c:	4619      	mov	r1, r3
 8017f2e:	6878      	ldr	r0, [r7, #4]
 8017f30:	f7f7 ff8d 	bl	800fe4e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017f34:	2102      	movs	r1, #2
 8017f36:	6878      	ldr	r0, [r7, #4]
 8017f38:	f7ff fdd8 	bl	8017aec <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017f3c:	6878      	ldr	r0, [r7, #4]
 8017f3e:	f7f7 ff99 	bl	800fe74 <pbuf_free>
        break;
 8017f42:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017f44:	4b0b      	ldr	r3, [pc, #44]	; (8017f74 <ip4_input+0x240>)
 8017f46:	2200      	movs	r2, #0
 8017f48:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017f4a:	4b0a      	ldr	r3, [pc, #40]	; (8017f74 <ip4_input+0x240>)
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017f50:	4b08      	ldr	r3, [pc, #32]	; (8017f74 <ip4_input+0x240>)
 8017f52:	2200      	movs	r2, #0
 8017f54:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017f56:	4b07      	ldr	r3, [pc, #28]	; (8017f74 <ip4_input+0x240>)
 8017f58:	2200      	movs	r2, #0
 8017f5a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017f5c:	4b05      	ldr	r3, [pc, #20]	; (8017f74 <ip4_input+0x240>)
 8017f5e:	2200      	movs	r2, #0
 8017f60:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017f62:	4b04      	ldr	r3, [pc, #16]	; (8017f74 <ip4_input+0x240>)
 8017f64:	2200      	movs	r2, #0
 8017f66:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017f68:	2300      	movs	r3, #0
}
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	3718      	adds	r7, #24
 8017f6e:	46bd      	mov	sp, r7
 8017f70:	bd80      	pop	{r7, pc}
 8017f72:	bf00      	nop
 8017f74:	20007ca8 	.word	0x20007ca8
 8017f78:	200188fc 	.word	0x200188fc

08017f7c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b08a      	sub	sp, #40	; 0x28
 8017f80:	af04      	add	r7, sp, #16
 8017f82:	60f8      	str	r0, [r7, #12]
 8017f84:	60b9      	str	r1, [r7, #8]
 8017f86:	607a      	str	r2, [r7, #4]
 8017f88:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017f8a:	68bb      	ldr	r3, [r7, #8]
 8017f8c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d009      	beq.n	8017fa8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017f94:	68bb      	ldr	r3, [r7, #8]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d003      	beq.n	8017fa2 <ip4_output_if+0x26>
 8017f9a:	68bb      	ldr	r3, [r7, #8]
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d102      	bne.n	8017fa8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fa4:	3304      	adds	r3, #4
 8017fa6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017fa8:	78fa      	ldrb	r2, [r7, #3]
 8017faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fac:	9302      	str	r3, [sp, #8]
 8017fae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017fb2:	9301      	str	r3, [sp, #4]
 8017fb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017fb8:	9300      	str	r3, [sp, #0]
 8017fba:	4613      	mov	r3, r2
 8017fbc:	687a      	ldr	r2, [r7, #4]
 8017fbe:	6979      	ldr	r1, [r7, #20]
 8017fc0:	68f8      	ldr	r0, [r7, #12]
 8017fc2:	f000 f805 	bl	8017fd0 <ip4_output_if_src>
 8017fc6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017fc8:	4618      	mov	r0, r3
 8017fca:	3718      	adds	r7, #24
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	bd80      	pop	{r7, pc}

08017fd0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b088      	sub	sp, #32
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	60f8      	str	r0, [r7, #12]
 8017fd8:	60b9      	str	r1, [r7, #8]
 8017fda:	607a      	str	r2, [r7, #4]
 8017fdc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	7b9b      	ldrb	r3, [r3, #14]
 8017fe2:	2b01      	cmp	r3, #1
 8017fe4:	d006      	beq.n	8017ff4 <ip4_output_if_src+0x24>
 8017fe6:	4b4b      	ldr	r3, [pc, #300]	; (8018114 <ip4_output_if_src+0x144>)
 8017fe8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017fec:	494a      	ldr	r1, [pc, #296]	; (8018118 <ip4_output_if_src+0x148>)
 8017fee:	484b      	ldr	r0, [pc, #300]	; (801811c <ip4_output_if_src+0x14c>)
 8017ff0:	f002 f8a2 	bl	801a138 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d060      	beq.n	80180bc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017ffa:	2314      	movs	r3, #20
 8017ffc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017ffe:	2114      	movs	r1, #20
 8018000:	68f8      	ldr	r0, [r7, #12]
 8018002:	f7f7 fea1 	bl	800fd48 <pbuf_add_header>
 8018006:	4603      	mov	r3, r0
 8018008:	2b00      	cmp	r3, #0
 801800a:	d002      	beq.n	8018012 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801800c:	f06f 0301 	mvn.w	r3, #1
 8018010:	e07c      	b.n	801810c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	685b      	ldr	r3, [r3, #4]
 8018016:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	895b      	ldrh	r3, [r3, #10]
 801801c:	2b13      	cmp	r3, #19
 801801e:	d806      	bhi.n	801802e <ip4_output_if_src+0x5e>
 8018020:	4b3c      	ldr	r3, [pc, #240]	; (8018114 <ip4_output_if_src+0x144>)
 8018022:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018026:	493e      	ldr	r1, [pc, #248]	; (8018120 <ip4_output_if_src+0x150>)
 8018028:	483c      	ldr	r0, [pc, #240]	; (801811c <ip4_output_if_src+0x14c>)
 801802a:	f002 f885 	bl	801a138 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801802e:	69fb      	ldr	r3, [r7, #28]
 8018030:	78fa      	ldrb	r2, [r7, #3]
 8018032:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018034:	69fb      	ldr	r3, [r7, #28]
 8018036:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801803a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	681a      	ldr	r2, [r3, #0]
 8018040:	69fb      	ldr	r3, [r7, #28]
 8018042:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018044:	8b7b      	ldrh	r3, [r7, #26]
 8018046:	089b      	lsrs	r3, r3, #2
 8018048:	b29b      	uxth	r3, r3
 801804a:	b2db      	uxtb	r3, r3
 801804c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018050:	b2da      	uxtb	r2, r3
 8018052:	69fb      	ldr	r3, [r7, #28]
 8018054:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018056:	69fb      	ldr	r3, [r7, #28]
 8018058:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801805c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	891b      	ldrh	r3, [r3, #8]
 8018062:	4618      	mov	r0, r3
 8018064:	f7f6 fc43 	bl	800e8ee <lwip_htons>
 8018068:	4603      	mov	r3, r0
 801806a:	461a      	mov	r2, r3
 801806c:	69fb      	ldr	r3, [r7, #28]
 801806e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018070:	69fb      	ldr	r3, [r7, #28]
 8018072:	2200      	movs	r2, #0
 8018074:	719a      	strb	r2, [r3, #6]
 8018076:	2200      	movs	r2, #0
 8018078:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801807a:	4b2a      	ldr	r3, [pc, #168]	; (8018124 <ip4_output_if_src+0x154>)
 801807c:	881b      	ldrh	r3, [r3, #0]
 801807e:	4618      	mov	r0, r3
 8018080:	f7f6 fc35 	bl	800e8ee <lwip_htons>
 8018084:	4603      	mov	r3, r0
 8018086:	461a      	mov	r2, r3
 8018088:	69fb      	ldr	r3, [r7, #28]
 801808a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801808c:	4b25      	ldr	r3, [pc, #148]	; (8018124 <ip4_output_if_src+0x154>)
 801808e:	881b      	ldrh	r3, [r3, #0]
 8018090:	3301      	adds	r3, #1
 8018092:	b29a      	uxth	r2, r3
 8018094:	4b23      	ldr	r3, [pc, #140]	; (8018124 <ip4_output_if_src+0x154>)
 8018096:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018098:	68bb      	ldr	r3, [r7, #8]
 801809a:	2b00      	cmp	r3, #0
 801809c:	d104      	bne.n	80180a8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801809e:	4b22      	ldr	r3, [pc, #136]	; (8018128 <ip4_output_if_src+0x158>)
 80180a0:	681a      	ldr	r2, [r3, #0]
 80180a2:	69fb      	ldr	r3, [r7, #28]
 80180a4:	60da      	str	r2, [r3, #12]
 80180a6:	e003      	b.n	80180b0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80180a8:	68bb      	ldr	r3, [r7, #8]
 80180aa:	681a      	ldr	r2, [r3, #0]
 80180ac:	69fb      	ldr	r3, [r7, #28]
 80180ae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80180b0:	69fb      	ldr	r3, [r7, #28]
 80180b2:	2200      	movs	r2, #0
 80180b4:	729a      	strb	r2, [r3, #10]
 80180b6:	2200      	movs	r2, #0
 80180b8:	72da      	strb	r2, [r3, #11]
 80180ba:	e00f      	b.n	80180dc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80180bc:	68fb      	ldr	r3, [r7, #12]
 80180be:	895b      	ldrh	r3, [r3, #10]
 80180c0:	2b13      	cmp	r3, #19
 80180c2:	d802      	bhi.n	80180ca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80180c4:	f06f 0301 	mvn.w	r3, #1
 80180c8:	e020      	b.n	801810c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	685b      	ldr	r3, [r3, #4]
 80180ce:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80180d0:	69fb      	ldr	r3, [r7, #28]
 80180d2:	691b      	ldr	r3, [r3, #16]
 80180d4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80180d6:	f107 0314 	add.w	r3, r7, #20
 80180da:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80180dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d00c      	beq.n	80180fe <ip4_output_if_src+0x12e>
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	891a      	ldrh	r2, [r3, #8]
 80180e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80180ec:	429a      	cmp	r2, r3
 80180ee:	d906      	bls.n	80180fe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80180f0:	687a      	ldr	r2, [r7, #4]
 80180f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80180f4:	68f8      	ldr	r0, [r7, #12]
 80180f6:	f000 fd4d 	bl	8018b94 <ip4_frag>
 80180fa:	4603      	mov	r3, r0
 80180fc:	e006      	b.n	801810c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80180fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018100:	695b      	ldr	r3, [r3, #20]
 8018102:	687a      	ldr	r2, [r7, #4]
 8018104:	68f9      	ldr	r1, [r7, #12]
 8018106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018108:	4798      	blx	r3
 801810a:	4603      	mov	r3, r0
}
 801810c:	4618      	mov	r0, r3
 801810e:	3720      	adds	r7, #32
 8018110:	46bd      	mov	sp, r7
 8018112:	bd80      	pop	{r7, pc}
 8018114:	0801ef90 	.word	0x0801ef90
 8018118:	0801efc4 	.word	0x0801efc4
 801811c:	0801efd0 	.word	0x0801efd0
 8018120:	0801eff8 	.word	0x0801eff8
 8018124:	2000094a 	.word	0x2000094a
 8018128:	0801f55c 	.word	0x0801f55c

0801812c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801812c:	b480      	push	{r7}
 801812e:	b085      	sub	sp, #20
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
 8018134:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018140:	d002      	beq.n	8018148 <ip4_addr_isbroadcast_u32+0x1c>
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	2b00      	cmp	r3, #0
 8018146:	d101      	bne.n	801814c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018148:	2301      	movs	r3, #1
 801814a:	e02a      	b.n	80181a2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801814c:	683b      	ldr	r3, [r7, #0]
 801814e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018152:	f003 0302 	and.w	r3, r3, #2
 8018156:	2b00      	cmp	r3, #0
 8018158:	d101      	bne.n	801815e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801815a:	2300      	movs	r3, #0
 801815c:	e021      	b.n	80181a2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801815e:	683b      	ldr	r3, [r7, #0]
 8018160:	3304      	adds	r3, #4
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	687a      	ldr	r2, [r7, #4]
 8018166:	429a      	cmp	r2, r3
 8018168:	d101      	bne.n	801816e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801816a:	2300      	movs	r3, #0
 801816c:	e019      	b.n	80181a2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801816e:	68fa      	ldr	r2, [r7, #12]
 8018170:	683b      	ldr	r3, [r7, #0]
 8018172:	3304      	adds	r3, #4
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	405a      	eors	r2, r3
 8018178:	683b      	ldr	r3, [r7, #0]
 801817a:	3308      	adds	r3, #8
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	4013      	ands	r3, r2
 8018180:	2b00      	cmp	r3, #0
 8018182:	d10d      	bne.n	80181a0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018184:	683b      	ldr	r3, [r7, #0]
 8018186:	3308      	adds	r3, #8
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	43da      	mvns	r2, r3
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018190:	683b      	ldr	r3, [r7, #0]
 8018192:	3308      	adds	r3, #8
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018198:	429a      	cmp	r2, r3
 801819a:	d101      	bne.n	80181a0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801819c:	2301      	movs	r3, #1
 801819e:	e000      	b.n	80181a2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80181a0:	2300      	movs	r3, #0
  }
}
 80181a2:	4618      	mov	r0, r3
 80181a4:	3714      	adds	r7, #20
 80181a6:	46bd      	mov	sp, r7
 80181a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ac:	4770      	bx	lr
	...

080181b0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b084      	sub	sp, #16
 80181b4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80181b6:	2300      	movs	r3, #0
 80181b8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80181ba:	4b12      	ldr	r3, [pc, #72]	; (8018204 <ip_reass_tmr+0x54>)
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80181c0:	e018      	b.n	80181f4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	7fdb      	ldrb	r3, [r3, #31]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d00b      	beq.n	80181e2 <ip_reass_tmr+0x32>
      r->timer--;
 80181ca:	68fb      	ldr	r3, [r7, #12]
 80181cc:	7fdb      	ldrb	r3, [r3, #31]
 80181ce:	3b01      	subs	r3, #1
 80181d0:	b2da      	uxtb	r2, r3
 80181d2:	68fb      	ldr	r3, [r7, #12]
 80181d4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	60fb      	str	r3, [r7, #12]
 80181e0:	e008      	b.n	80181f4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80181e2:	68fb      	ldr	r3, [r7, #12]
 80181e4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80181ec:	68b9      	ldr	r1, [r7, #8]
 80181ee:	6878      	ldr	r0, [r7, #4]
 80181f0:	f000 f80a 	bl	8018208 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80181f4:	68fb      	ldr	r3, [r7, #12]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d1e3      	bne.n	80181c2 <ip_reass_tmr+0x12>
    }
  }
}
 80181fa:	bf00      	nop
 80181fc:	bf00      	nop
 80181fe:	3710      	adds	r7, #16
 8018200:	46bd      	mov	sp, r7
 8018202:	bd80      	pop	{r7, pc}
 8018204:	2000094c 	.word	0x2000094c

08018208 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018208:	b580      	push	{r7, lr}
 801820a:	b088      	sub	sp, #32
 801820c:	af00      	add	r7, sp, #0
 801820e:	6078      	str	r0, [r7, #4]
 8018210:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018212:	2300      	movs	r3, #0
 8018214:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018216:	683a      	ldr	r2, [r7, #0]
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	429a      	cmp	r2, r3
 801821c:	d105      	bne.n	801822a <ip_reass_free_complete_datagram+0x22>
 801821e:	4b45      	ldr	r3, [pc, #276]	; (8018334 <ip_reass_free_complete_datagram+0x12c>)
 8018220:	22ab      	movs	r2, #171	; 0xab
 8018222:	4945      	ldr	r1, [pc, #276]	; (8018338 <ip_reass_free_complete_datagram+0x130>)
 8018224:	4845      	ldr	r0, [pc, #276]	; (801833c <ip_reass_free_complete_datagram+0x134>)
 8018226:	f001 ff87 	bl	801a138 <iprintf>
  if (prev != NULL) {
 801822a:	683b      	ldr	r3, [r7, #0]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d00a      	beq.n	8018246 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018230:	683b      	ldr	r3, [r7, #0]
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	687a      	ldr	r2, [r7, #4]
 8018236:	429a      	cmp	r2, r3
 8018238:	d005      	beq.n	8018246 <ip_reass_free_complete_datagram+0x3e>
 801823a:	4b3e      	ldr	r3, [pc, #248]	; (8018334 <ip_reass_free_complete_datagram+0x12c>)
 801823c:	22ad      	movs	r2, #173	; 0xad
 801823e:	4940      	ldr	r1, [pc, #256]	; (8018340 <ip_reass_free_complete_datagram+0x138>)
 8018240:	483e      	ldr	r0, [pc, #248]	; (801833c <ip_reass_free_complete_datagram+0x134>)
 8018242:	f001 ff79 	bl	801a138 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	685b      	ldr	r3, [r3, #4]
 801824a:	685b      	ldr	r3, [r3, #4]
 801824c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801824e:	697b      	ldr	r3, [r7, #20]
 8018250:	889b      	ldrh	r3, [r3, #4]
 8018252:	b29b      	uxth	r3, r3
 8018254:	2b00      	cmp	r3, #0
 8018256:	d12a      	bne.n	80182ae <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	685b      	ldr	r3, [r3, #4]
 801825c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801825e:	697b      	ldr	r3, [r7, #20]
 8018260:	681a      	ldr	r2, [r3, #0]
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018266:	69bb      	ldr	r3, [r7, #24]
 8018268:	6858      	ldr	r0, [r3, #4]
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	3308      	adds	r3, #8
 801826e:	2214      	movs	r2, #20
 8018270:	4619      	mov	r1, r3
 8018272:	f001 fa37 	bl	80196e4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018276:	2101      	movs	r1, #1
 8018278:	69b8      	ldr	r0, [r7, #24]
 801827a:	f7ff fc47 	bl	8017b0c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801827e:	69b8      	ldr	r0, [r7, #24]
 8018280:	f7f7 fe80 	bl	800ff84 <pbuf_clen>
 8018284:	4603      	mov	r3, r0
 8018286:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018288:	8bfa      	ldrh	r2, [r7, #30]
 801828a:	8a7b      	ldrh	r3, [r7, #18]
 801828c:	4413      	add	r3, r2
 801828e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018292:	db05      	blt.n	80182a0 <ip_reass_free_complete_datagram+0x98>
 8018294:	4b27      	ldr	r3, [pc, #156]	; (8018334 <ip_reass_free_complete_datagram+0x12c>)
 8018296:	22bc      	movs	r2, #188	; 0xbc
 8018298:	492a      	ldr	r1, [pc, #168]	; (8018344 <ip_reass_free_complete_datagram+0x13c>)
 801829a:	4828      	ldr	r0, [pc, #160]	; (801833c <ip_reass_free_complete_datagram+0x134>)
 801829c:	f001 ff4c 	bl	801a138 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80182a0:	8bfa      	ldrh	r2, [r7, #30]
 80182a2:	8a7b      	ldrh	r3, [r7, #18]
 80182a4:	4413      	add	r3, r2
 80182a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80182a8:	69b8      	ldr	r0, [r7, #24]
 80182aa:	f7f7 fde3 	bl	800fe74 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	685b      	ldr	r3, [r3, #4]
 80182b2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80182b4:	e01f      	b.n	80182f6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80182b6:	69bb      	ldr	r3, [r7, #24]
 80182b8:	685b      	ldr	r3, [r3, #4]
 80182ba:	617b      	str	r3, [r7, #20]
    pcur = p;
 80182bc:	69bb      	ldr	r3, [r7, #24]
 80182be:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80182c0:	697b      	ldr	r3, [r7, #20]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80182c6:	68f8      	ldr	r0, [r7, #12]
 80182c8:	f7f7 fe5c 	bl	800ff84 <pbuf_clen>
 80182cc:	4603      	mov	r3, r0
 80182ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80182d0:	8bfa      	ldrh	r2, [r7, #30]
 80182d2:	8a7b      	ldrh	r3, [r7, #18]
 80182d4:	4413      	add	r3, r2
 80182d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80182da:	db05      	blt.n	80182e8 <ip_reass_free_complete_datagram+0xe0>
 80182dc:	4b15      	ldr	r3, [pc, #84]	; (8018334 <ip_reass_free_complete_datagram+0x12c>)
 80182de:	22cc      	movs	r2, #204	; 0xcc
 80182e0:	4918      	ldr	r1, [pc, #96]	; (8018344 <ip_reass_free_complete_datagram+0x13c>)
 80182e2:	4816      	ldr	r0, [pc, #88]	; (801833c <ip_reass_free_complete_datagram+0x134>)
 80182e4:	f001 ff28 	bl	801a138 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80182e8:	8bfa      	ldrh	r2, [r7, #30]
 80182ea:	8a7b      	ldrh	r3, [r7, #18]
 80182ec:	4413      	add	r3, r2
 80182ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80182f0:	68f8      	ldr	r0, [r7, #12]
 80182f2:	f7f7 fdbf 	bl	800fe74 <pbuf_free>
  while (p != NULL) {
 80182f6:	69bb      	ldr	r3, [r7, #24]
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d1dc      	bne.n	80182b6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80182fc:	6839      	ldr	r1, [r7, #0]
 80182fe:	6878      	ldr	r0, [r7, #4]
 8018300:	f000 f8c2 	bl	8018488 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018304:	4b10      	ldr	r3, [pc, #64]	; (8018348 <ip_reass_free_complete_datagram+0x140>)
 8018306:	881b      	ldrh	r3, [r3, #0]
 8018308:	8bfa      	ldrh	r2, [r7, #30]
 801830a:	429a      	cmp	r2, r3
 801830c:	d905      	bls.n	801831a <ip_reass_free_complete_datagram+0x112>
 801830e:	4b09      	ldr	r3, [pc, #36]	; (8018334 <ip_reass_free_complete_datagram+0x12c>)
 8018310:	22d2      	movs	r2, #210	; 0xd2
 8018312:	490e      	ldr	r1, [pc, #56]	; (801834c <ip_reass_free_complete_datagram+0x144>)
 8018314:	4809      	ldr	r0, [pc, #36]	; (801833c <ip_reass_free_complete_datagram+0x134>)
 8018316:	f001 ff0f 	bl	801a138 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801831a:	4b0b      	ldr	r3, [pc, #44]	; (8018348 <ip_reass_free_complete_datagram+0x140>)
 801831c:	881a      	ldrh	r2, [r3, #0]
 801831e:	8bfb      	ldrh	r3, [r7, #30]
 8018320:	1ad3      	subs	r3, r2, r3
 8018322:	b29a      	uxth	r2, r3
 8018324:	4b08      	ldr	r3, [pc, #32]	; (8018348 <ip_reass_free_complete_datagram+0x140>)
 8018326:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018328:	8bfb      	ldrh	r3, [r7, #30]
}
 801832a:	4618      	mov	r0, r3
 801832c:	3720      	adds	r7, #32
 801832e:	46bd      	mov	sp, r7
 8018330:	bd80      	pop	{r7, pc}
 8018332:	bf00      	nop
 8018334:	0801f028 	.word	0x0801f028
 8018338:	0801f064 	.word	0x0801f064
 801833c:	0801f070 	.word	0x0801f070
 8018340:	0801f098 	.word	0x0801f098
 8018344:	0801f0ac 	.word	0x0801f0ac
 8018348:	20000950 	.word	0x20000950
 801834c:	0801f0cc 	.word	0x0801f0cc

08018350 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018350:	b580      	push	{r7, lr}
 8018352:	b08a      	sub	sp, #40	; 0x28
 8018354:	af00      	add	r7, sp, #0
 8018356:	6078      	str	r0, [r7, #4]
 8018358:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801835a:	2300      	movs	r3, #0
 801835c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801835e:	2300      	movs	r3, #0
 8018360:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018362:	2300      	movs	r3, #0
 8018364:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018366:	2300      	movs	r3, #0
 8018368:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801836a:	2300      	movs	r3, #0
 801836c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801836e:	4b28      	ldr	r3, [pc, #160]	; (8018410 <ip_reass_remove_oldest_datagram+0xc0>)
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018374:	e030      	b.n	80183d8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018378:	695a      	ldr	r2, [r3, #20]
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	68db      	ldr	r3, [r3, #12]
 801837e:	429a      	cmp	r2, r3
 8018380:	d10c      	bne.n	801839c <ip_reass_remove_oldest_datagram+0x4c>
 8018382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018384:	699a      	ldr	r2, [r3, #24]
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	691b      	ldr	r3, [r3, #16]
 801838a:	429a      	cmp	r2, r3
 801838c:	d106      	bne.n	801839c <ip_reass_remove_oldest_datagram+0x4c>
 801838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018390:	899a      	ldrh	r2, [r3, #12]
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	889b      	ldrh	r3, [r3, #4]
 8018396:	b29b      	uxth	r3, r3
 8018398:	429a      	cmp	r2, r3
 801839a:	d014      	beq.n	80183c6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801839c:	693b      	ldr	r3, [r7, #16]
 801839e:	3301      	adds	r3, #1
 80183a0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80183a2:	6a3b      	ldr	r3, [r7, #32]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d104      	bne.n	80183b2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80183a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183aa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80183ac:	69fb      	ldr	r3, [r7, #28]
 80183ae:	61bb      	str	r3, [r7, #24]
 80183b0:	e009      	b.n	80183c6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80183b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183b4:	7fda      	ldrb	r2, [r3, #31]
 80183b6:	6a3b      	ldr	r3, [r7, #32]
 80183b8:	7fdb      	ldrb	r3, [r3, #31]
 80183ba:	429a      	cmp	r2, r3
 80183bc:	d803      	bhi.n	80183c6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80183be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183c0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80183c2:	69fb      	ldr	r3, [r7, #28]
 80183c4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80183c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d001      	beq.n	80183d2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80183ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183d0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80183d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80183d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d1cb      	bne.n	8018376 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80183de:	6a3b      	ldr	r3, [r7, #32]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d008      	beq.n	80183f6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80183e4:	69b9      	ldr	r1, [r7, #24]
 80183e6:	6a38      	ldr	r0, [r7, #32]
 80183e8:	f7ff ff0e 	bl	8018208 <ip_reass_free_complete_datagram>
 80183ec:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80183ee:	697a      	ldr	r2, [r7, #20]
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	4413      	add	r3, r2
 80183f4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80183f6:	697a      	ldr	r2, [r7, #20]
 80183f8:	683b      	ldr	r3, [r7, #0]
 80183fa:	429a      	cmp	r2, r3
 80183fc:	da02      	bge.n	8018404 <ip_reass_remove_oldest_datagram+0xb4>
 80183fe:	693b      	ldr	r3, [r7, #16]
 8018400:	2b01      	cmp	r3, #1
 8018402:	dcac      	bgt.n	801835e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018404:	697b      	ldr	r3, [r7, #20]
}
 8018406:	4618      	mov	r0, r3
 8018408:	3728      	adds	r7, #40	; 0x28
 801840a:	46bd      	mov	sp, r7
 801840c:	bd80      	pop	{r7, pc}
 801840e:	bf00      	nop
 8018410:	2000094c 	.word	0x2000094c

08018414 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018414:	b580      	push	{r7, lr}
 8018416:	b084      	sub	sp, #16
 8018418:	af00      	add	r7, sp, #0
 801841a:	6078      	str	r0, [r7, #4]
 801841c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801841e:	2004      	movs	r0, #4
 8018420:	f7f6 feca 	bl	800f1b8 <memp_malloc>
 8018424:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	2b00      	cmp	r3, #0
 801842a:	d110      	bne.n	801844e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801842c:	6839      	ldr	r1, [r7, #0]
 801842e:	6878      	ldr	r0, [r7, #4]
 8018430:	f7ff ff8e 	bl	8018350 <ip_reass_remove_oldest_datagram>
 8018434:	4602      	mov	r2, r0
 8018436:	683b      	ldr	r3, [r7, #0]
 8018438:	4293      	cmp	r3, r2
 801843a:	dc03      	bgt.n	8018444 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801843c:	2004      	movs	r0, #4
 801843e:	f7f6 febb 	bl	800f1b8 <memp_malloc>
 8018442:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d101      	bne.n	801844e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801844a:	2300      	movs	r3, #0
 801844c:	e016      	b.n	801847c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801844e:	2220      	movs	r2, #32
 8018450:	2100      	movs	r1, #0
 8018452:	68f8      	ldr	r0, [r7, #12]
 8018454:	f001 f954 	bl	8019700 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	220f      	movs	r2, #15
 801845c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801845e:	4b09      	ldr	r3, [pc, #36]	; (8018484 <ip_reass_enqueue_new_datagram+0x70>)
 8018460:	681a      	ldr	r2, [r3, #0]
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018466:	4a07      	ldr	r2, [pc, #28]	; (8018484 <ip_reass_enqueue_new_datagram+0x70>)
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	3308      	adds	r3, #8
 8018470:	2214      	movs	r2, #20
 8018472:	6879      	ldr	r1, [r7, #4]
 8018474:	4618      	mov	r0, r3
 8018476:	f001 f935 	bl	80196e4 <memcpy>
  return ipr;
 801847a:	68fb      	ldr	r3, [r7, #12]
}
 801847c:	4618      	mov	r0, r3
 801847e:	3710      	adds	r7, #16
 8018480:	46bd      	mov	sp, r7
 8018482:	bd80      	pop	{r7, pc}
 8018484:	2000094c 	.word	0x2000094c

08018488 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018488:	b580      	push	{r7, lr}
 801848a:	b082      	sub	sp, #8
 801848c:	af00      	add	r7, sp, #0
 801848e:	6078      	str	r0, [r7, #4]
 8018490:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018492:	4b10      	ldr	r3, [pc, #64]	; (80184d4 <ip_reass_dequeue_datagram+0x4c>)
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	687a      	ldr	r2, [r7, #4]
 8018498:	429a      	cmp	r2, r3
 801849a:	d104      	bne.n	80184a6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	4a0c      	ldr	r2, [pc, #48]	; (80184d4 <ip_reass_dequeue_datagram+0x4c>)
 80184a2:	6013      	str	r3, [r2, #0]
 80184a4:	e00d      	b.n	80184c2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80184a6:	683b      	ldr	r3, [r7, #0]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d106      	bne.n	80184ba <ip_reass_dequeue_datagram+0x32>
 80184ac:	4b0a      	ldr	r3, [pc, #40]	; (80184d8 <ip_reass_dequeue_datagram+0x50>)
 80184ae:	f240 1245 	movw	r2, #325	; 0x145
 80184b2:	490a      	ldr	r1, [pc, #40]	; (80184dc <ip_reass_dequeue_datagram+0x54>)
 80184b4:	480a      	ldr	r0, [pc, #40]	; (80184e0 <ip_reass_dequeue_datagram+0x58>)
 80184b6:	f001 fe3f 	bl	801a138 <iprintf>
    prev->next = ipr->next;
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	681a      	ldr	r2, [r3, #0]
 80184be:	683b      	ldr	r3, [r7, #0]
 80184c0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80184c2:	6879      	ldr	r1, [r7, #4]
 80184c4:	2004      	movs	r0, #4
 80184c6:	f7f6 fec3 	bl	800f250 <memp_free>
}
 80184ca:	bf00      	nop
 80184cc:	3708      	adds	r7, #8
 80184ce:	46bd      	mov	sp, r7
 80184d0:	bd80      	pop	{r7, pc}
 80184d2:	bf00      	nop
 80184d4:	2000094c 	.word	0x2000094c
 80184d8:	0801f028 	.word	0x0801f028
 80184dc:	0801f0f0 	.word	0x0801f0f0
 80184e0:	0801f070 	.word	0x0801f070

080184e4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80184e4:	b580      	push	{r7, lr}
 80184e6:	b08c      	sub	sp, #48	; 0x30
 80184e8:	af00      	add	r7, sp, #0
 80184ea:	60f8      	str	r0, [r7, #12]
 80184ec:	60b9      	str	r1, [r7, #8]
 80184ee:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80184f0:	2300      	movs	r3, #0
 80184f2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80184f4:	2301      	movs	r3, #1
 80184f6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80184f8:	68bb      	ldr	r3, [r7, #8]
 80184fa:	685b      	ldr	r3, [r3, #4]
 80184fc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80184fe:	69fb      	ldr	r3, [r7, #28]
 8018500:	885b      	ldrh	r3, [r3, #2]
 8018502:	b29b      	uxth	r3, r3
 8018504:	4618      	mov	r0, r3
 8018506:	f7f6 f9f2 	bl	800e8ee <lwip_htons>
 801850a:	4603      	mov	r3, r0
 801850c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801850e:	69fb      	ldr	r3, [r7, #28]
 8018510:	781b      	ldrb	r3, [r3, #0]
 8018512:	f003 030f 	and.w	r3, r3, #15
 8018516:	b2db      	uxtb	r3, r3
 8018518:	009b      	lsls	r3, r3, #2
 801851a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801851c:	7e7b      	ldrb	r3, [r7, #25]
 801851e:	b29b      	uxth	r3, r3
 8018520:	8b7a      	ldrh	r2, [r7, #26]
 8018522:	429a      	cmp	r2, r3
 8018524:	d202      	bcs.n	801852c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018526:	f04f 33ff 	mov.w	r3, #4294967295
 801852a:	e135      	b.n	8018798 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801852c:	7e7b      	ldrb	r3, [r7, #25]
 801852e:	b29b      	uxth	r3, r3
 8018530:	8b7a      	ldrh	r2, [r7, #26]
 8018532:	1ad3      	subs	r3, r2, r3
 8018534:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018536:	69fb      	ldr	r3, [r7, #28]
 8018538:	88db      	ldrh	r3, [r3, #6]
 801853a:	b29b      	uxth	r3, r3
 801853c:	4618      	mov	r0, r3
 801853e:	f7f6 f9d6 	bl	800e8ee <lwip_htons>
 8018542:	4603      	mov	r3, r0
 8018544:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018548:	b29b      	uxth	r3, r3
 801854a:	00db      	lsls	r3, r3, #3
 801854c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801854e:	68bb      	ldr	r3, [r7, #8]
 8018550:	685b      	ldr	r3, [r3, #4]
 8018552:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018556:	2200      	movs	r2, #0
 8018558:	701a      	strb	r2, [r3, #0]
 801855a:	2200      	movs	r2, #0
 801855c:	705a      	strb	r2, [r3, #1]
 801855e:	2200      	movs	r2, #0
 8018560:	709a      	strb	r2, [r3, #2]
 8018562:	2200      	movs	r2, #0
 8018564:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018568:	8afa      	ldrh	r2, [r7, #22]
 801856a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801856c:	8afa      	ldrh	r2, [r7, #22]
 801856e:	8b7b      	ldrh	r3, [r7, #26]
 8018570:	4413      	add	r3, r2
 8018572:	b29a      	uxth	r2, r3
 8018574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018576:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801857a:	88db      	ldrh	r3, [r3, #6]
 801857c:	b29b      	uxth	r3, r3
 801857e:	8afa      	ldrh	r2, [r7, #22]
 8018580:	429a      	cmp	r2, r3
 8018582:	d902      	bls.n	801858a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018584:	f04f 33ff 	mov.w	r3, #4294967295
 8018588:	e106      	b.n	8018798 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	685b      	ldr	r3, [r3, #4]
 801858e:	627b      	str	r3, [r7, #36]	; 0x24
 8018590:	e068      	b.n	8018664 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018594:	685b      	ldr	r3, [r3, #4]
 8018596:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801859a:	889b      	ldrh	r3, [r3, #4]
 801859c:	b29a      	uxth	r2, r3
 801859e:	693b      	ldr	r3, [r7, #16]
 80185a0:	889b      	ldrh	r3, [r3, #4]
 80185a2:	b29b      	uxth	r3, r3
 80185a4:	429a      	cmp	r2, r3
 80185a6:	d235      	bcs.n	8018614 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80185a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80185ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80185ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d020      	beq.n	80185f6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80185b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185b6:	889b      	ldrh	r3, [r3, #4]
 80185b8:	b29a      	uxth	r2, r3
 80185ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185bc:	88db      	ldrh	r3, [r3, #6]
 80185be:	b29b      	uxth	r3, r3
 80185c0:	429a      	cmp	r2, r3
 80185c2:	d307      	bcc.n	80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80185c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185c6:	88db      	ldrh	r3, [r3, #6]
 80185c8:	b29a      	uxth	r2, r3
 80185ca:	693b      	ldr	r3, [r7, #16]
 80185cc:	889b      	ldrh	r3, [r3, #4]
 80185ce:	b29b      	uxth	r3, r3
 80185d0:	429a      	cmp	r2, r3
 80185d2:	d902      	bls.n	80185da <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80185d4:	f04f 33ff 	mov.w	r3, #4294967295
 80185d8:	e0de      	b.n	8018798 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80185da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185dc:	68ba      	ldr	r2, [r7, #8]
 80185de:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80185e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185e2:	88db      	ldrh	r3, [r3, #6]
 80185e4:	b29a      	uxth	r2, r3
 80185e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185e8:	889b      	ldrh	r3, [r3, #4]
 80185ea:	b29b      	uxth	r3, r3
 80185ec:	429a      	cmp	r2, r3
 80185ee:	d03d      	beq.n	801866c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80185f0:	2300      	movs	r3, #0
 80185f2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80185f4:	e03a      	b.n	801866c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80185f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185f8:	88db      	ldrh	r3, [r3, #6]
 80185fa:	b29a      	uxth	r2, r3
 80185fc:	693b      	ldr	r3, [r7, #16]
 80185fe:	889b      	ldrh	r3, [r3, #4]
 8018600:	b29b      	uxth	r3, r3
 8018602:	429a      	cmp	r2, r3
 8018604:	d902      	bls.n	801860c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018606:	f04f 33ff 	mov.w	r3, #4294967295
 801860a:	e0c5      	b.n	8018798 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	68ba      	ldr	r2, [r7, #8]
 8018610:	605a      	str	r2, [r3, #4]
      break;
 8018612:	e02b      	b.n	801866c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018616:	889b      	ldrh	r3, [r3, #4]
 8018618:	b29a      	uxth	r2, r3
 801861a:	693b      	ldr	r3, [r7, #16]
 801861c:	889b      	ldrh	r3, [r3, #4]
 801861e:	b29b      	uxth	r3, r3
 8018620:	429a      	cmp	r2, r3
 8018622:	d102      	bne.n	801862a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018624:	f04f 33ff 	mov.w	r3, #4294967295
 8018628:	e0b6      	b.n	8018798 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801862a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801862c:	889b      	ldrh	r3, [r3, #4]
 801862e:	b29a      	uxth	r2, r3
 8018630:	693b      	ldr	r3, [r7, #16]
 8018632:	88db      	ldrh	r3, [r3, #6]
 8018634:	b29b      	uxth	r3, r3
 8018636:	429a      	cmp	r2, r3
 8018638:	d202      	bcs.n	8018640 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801863a:	f04f 33ff 	mov.w	r3, #4294967295
 801863e:	e0ab      	b.n	8018798 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018642:	2b00      	cmp	r3, #0
 8018644:	d009      	beq.n	801865a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018648:	88db      	ldrh	r3, [r3, #6]
 801864a:	b29a      	uxth	r2, r3
 801864c:	693b      	ldr	r3, [r7, #16]
 801864e:	889b      	ldrh	r3, [r3, #4]
 8018650:	b29b      	uxth	r3, r3
 8018652:	429a      	cmp	r2, r3
 8018654:	d001      	beq.n	801865a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018656:	2300      	movs	r3, #0
 8018658:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801865a:	693b      	ldr	r3, [r7, #16]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018660:	693b      	ldr	r3, [r7, #16]
 8018662:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018666:	2b00      	cmp	r3, #0
 8018668:	d193      	bne.n	8018592 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801866a:	e000      	b.n	801866e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801866c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018670:	2b00      	cmp	r3, #0
 8018672:	d12d      	bne.n	80186d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018676:	2b00      	cmp	r3, #0
 8018678:	d01c      	beq.n	80186b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801867a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801867c:	88db      	ldrh	r3, [r3, #6]
 801867e:	b29a      	uxth	r2, r3
 8018680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018682:	889b      	ldrh	r3, [r3, #4]
 8018684:	b29b      	uxth	r3, r3
 8018686:	429a      	cmp	r2, r3
 8018688:	d906      	bls.n	8018698 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801868a:	4b45      	ldr	r3, [pc, #276]	; (80187a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801868c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018690:	4944      	ldr	r1, [pc, #272]	; (80187a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018692:	4845      	ldr	r0, [pc, #276]	; (80187a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018694:	f001 fd50 	bl	801a138 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801869a:	68ba      	ldr	r2, [r7, #8]
 801869c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186a0:	88db      	ldrh	r3, [r3, #6]
 80186a2:	b29a      	uxth	r2, r3
 80186a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186a6:	889b      	ldrh	r3, [r3, #4]
 80186a8:	b29b      	uxth	r3, r3
 80186aa:	429a      	cmp	r2, r3
 80186ac:	d010      	beq.n	80186d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80186ae:	2300      	movs	r3, #0
 80186b0:	623b      	str	r3, [r7, #32]
 80186b2:	e00d      	b.n	80186d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	685b      	ldr	r3, [r3, #4]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d006      	beq.n	80186ca <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80186bc:	4b38      	ldr	r3, [pc, #224]	; (80187a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80186be:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80186c2:	493a      	ldr	r1, [pc, #232]	; (80187ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80186c4:	4838      	ldr	r0, [pc, #224]	; (80187a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80186c6:	f001 fd37 	bl	801a138 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	68ba      	ldr	r2, [r7, #8]
 80186ce:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d105      	bne.n	80186e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	7f9b      	ldrb	r3, [r3, #30]
 80186da:	f003 0301 	and.w	r3, r3, #1
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d059      	beq.n	8018796 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80186e2:	6a3b      	ldr	r3, [r7, #32]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d04f      	beq.n	8018788 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	685b      	ldr	r3, [r3, #4]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d006      	beq.n	80186fe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	685b      	ldr	r3, [r3, #4]
 80186f4:	685b      	ldr	r3, [r3, #4]
 80186f6:	889b      	ldrh	r3, [r3, #4]
 80186f8:	b29b      	uxth	r3, r3
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d002      	beq.n	8018704 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80186fe:	2300      	movs	r3, #0
 8018700:	623b      	str	r3, [r7, #32]
 8018702:	e041      	b.n	8018788 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018706:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801870a:	681b      	ldr	r3, [r3, #0]
 801870c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801870e:	e012      	b.n	8018736 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018712:	685b      	ldr	r3, [r3, #4]
 8018714:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018718:	88db      	ldrh	r3, [r3, #6]
 801871a:	b29a      	uxth	r2, r3
 801871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801871e:	889b      	ldrh	r3, [r3, #4]
 8018720:	b29b      	uxth	r3, r3
 8018722:	429a      	cmp	r2, r3
 8018724:	d002      	beq.n	801872c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018726:	2300      	movs	r3, #0
 8018728:	623b      	str	r3, [r7, #32]
            break;
 801872a:	e007      	b.n	801873c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801872c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801872e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018738:	2b00      	cmp	r3, #0
 801873a:	d1e9      	bne.n	8018710 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801873c:	6a3b      	ldr	r3, [r7, #32]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d022      	beq.n	8018788 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	685b      	ldr	r3, [r3, #4]
 8018746:	2b00      	cmp	r3, #0
 8018748:	d106      	bne.n	8018758 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801874a:	4b15      	ldr	r3, [pc, #84]	; (80187a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801874c:	f240 12df 	movw	r2, #479	; 0x1df
 8018750:	4917      	ldr	r1, [pc, #92]	; (80187b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018752:	4815      	ldr	r0, [pc, #84]	; (80187a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018754:	f001 fcf0 	bl	801a138 <iprintf>
          LWIP_ASSERT("sanity check",
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	685b      	ldr	r3, [r3, #4]
 801875c:	685b      	ldr	r3, [r3, #4]
 801875e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018760:	429a      	cmp	r2, r3
 8018762:	d106      	bne.n	8018772 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018764:	4b0e      	ldr	r3, [pc, #56]	; (80187a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018766:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801876a:	4911      	ldr	r1, [pc, #68]	; (80187b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801876c:	480e      	ldr	r0, [pc, #56]	; (80187a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801876e:	f001 fce3 	bl	801a138 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	2b00      	cmp	r3, #0
 8018778:	d006      	beq.n	8018788 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801877a:	4b09      	ldr	r3, [pc, #36]	; (80187a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801877c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018780:	490c      	ldr	r1, [pc, #48]	; (80187b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018782:	4809      	ldr	r0, [pc, #36]	; (80187a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018784:	f001 fcd8 	bl	801a138 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018788:	6a3b      	ldr	r3, [r7, #32]
 801878a:	2b00      	cmp	r3, #0
 801878c:	bf14      	ite	ne
 801878e:	2301      	movne	r3, #1
 8018790:	2300      	moveq	r3, #0
 8018792:	b2db      	uxtb	r3, r3
 8018794:	e000      	b.n	8018798 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018796:	2300      	movs	r3, #0
}
 8018798:	4618      	mov	r0, r3
 801879a:	3730      	adds	r7, #48	; 0x30
 801879c:	46bd      	mov	sp, r7
 801879e:	bd80      	pop	{r7, pc}
 80187a0:	0801f028 	.word	0x0801f028
 80187a4:	0801f10c 	.word	0x0801f10c
 80187a8:	0801f070 	.word	0x0801f070
 80187ac:	0801f12c 	.word	0x0801f12c
 80187b0:	0801f164 	.word	0x0801f164
 80187b4:	0801f174 	.word	0x0801f174

080187b8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b08e      	sub	sp, #56	; 0x38
 80187bc:	af00      	add	r7, sp, #0
 80187be:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	685b      	ldr	r3, [r3, #4]
 80187c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80187c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c8:	781b      	ldrb	r3, [r3, #0]
 80187ca:	f003 030f 	and.w	r3, r3, #15
 80187ce:	b2db      	uxtb	r3, r3
 80187d0:	009b      	lsls	r3, r3, #2
 80187d2:	b2db      	uxtb	r3, r3
 80187d4:	2b14      	cmp	r3, #20
 80187d6:	f040 8167 	bne.w	8018aa8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80187da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187dc:	88db      	ldrh	r3, [r3, #6]
 80187de:	b29b      	uxth	r3, r3
 80187e0:	4618      	mov	r0, r3
 80187e2:	f7f6 f884 	bl	800e8ee <lwip_htons>
 80187e6:	4603      	mov	r3, r0
 80187e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80187ec:	b29b      	uxth	r3, r3
 80187ee:	00db      	lsls	r3, r3, #3
 80187f0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80187f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187f4:	885b      	ldrh	r3, [r3, #2]
 80187f6:	b29b      	uxth	r3, r3
 80187f8:	4618      	mov	r0, r3
 80187fa:	f7f6 f878 	bl	800e8ee <lwip_htons>
 80187fe:	4603      	mov	r3, r0
 8018800:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018804:	781b      	ldrb	r3, [r3, #0]
 8018806:	f003 030f 	and.w	r3, r3, #15
 801880a:	b2db      	uxtb	r3, r3
 801880c:	009b      	lsls	r3, r3, #2
 801880e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018812:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018816:	b29b      	uxth	r3, r3
 8018818:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801881a:	429a      	cmp	r2, r3
 801881c:	f0c0 8146 	bcc.w	8018aac <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018820:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018824:	b29b      	uxth	r3, r3
 8018826:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018828:	1ad3      	subs	r3, r2, r3
 801882a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801882c:	6878      	ldr	r0, [r7, #4]
 801882e:	f7f7 fba9 	bl	800ff84 <pbuf_clen>
 8018832:	4603      	mov	r3, r0
 8018834:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018836:	4b9f      	ldr	r3, [pc, #636]	; (8018ab4 <ip4_reass+0x2fc>)
 8018838:	881b      	ldrh	r3, [r3, #0]
 801883a:	461a      	mov	r2, r3
 801883c:	8c3b      	ldrh	r3, [r7, #32]
 801883e:	4413      	add	r3, r2
 8018840:	2b0a      	cmp	r3, #10
 8018842:	dd10      	ble.n	8018866 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018844:	8c3b      	ldrh	r3, [r7, #32]
 8018846:	4619      	mov	r1, r3
 8018848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801884a:	f7ff fd81 	bl	8018350 <ip_reass_remove_oldest_datagram>
 801884e:	4603      	mov	r3, r0
 8018850:	2b00      	cmp	r3, #0
 8018852:	f000 812d 	beq.w	8018ab0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018856:	4b97      	ldr	r3, [pc, #604]	; (8018ab4 <ip4_reass+0x2fc>)
 8018858:	881b      	ldrh	r3, [r3, #0]
 801885a:	461a      	mov	r2, r3
 801885c:	8c3b      	ldrh	r3, [r7, #32]
 801885e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018860:	2b0a      	cmp	r3, #10
 8018862:	f300 8125 	bgt.w	8018ab0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018866:	4b94      	ldr	r3, [pc, #592]	; (8018ab8 <ip4_reass+0x300>)
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	633b      	str	r3, [r7, #48]	; 0x30
 801886c:	e015      	b.n	801889a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801886e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018870:	695a      	ldr	r2, [r3, #20]
 8018872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018874:	68db      	ldr	r3, [r3, #12]
 8018876:	429a      	cmp	r2, r3
 8018878:	d10c      	bne.n	8018894 <ip4_reass+0xdc>
 801887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801887c:	699a      	ldr	r2, [r3, #24]
 801887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018880:	691b      	ldr	r3, [r3, #16]
 8018882:	429a      	cmp	r2, r3
 8018884:	d106      	bne.n	8018894 <ip4_reass+0xdc>
 8018886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018888:	899a      	ldrh	r2, [r3, #12]
 801888a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801888c:	889b      	ldrh	r3, [r3, #4]
 801888e:	b29b      	uxth	r3, r3
 8018890:	429a      	cmp	r2, r3
 8018892:	d006      	beq.n	80188a2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	633b      	str	r3, [r7, #48]	; 0x30
 801889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801889c:	2b00      	cmp	r3, #0
 801889e:	d1e6      	bne.n	801886e <ip4_reass+0xb6>
 80188a0:	e000      	b.n	80188a4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80188a2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80188a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d109      	bne.n	80188be <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80188aa:	8c3b      	ldrh	r3, [r7, #32]
 80188ac:	4619      	mov	r1, r3
 80188ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80188b0:	f7ff fdb0 	bl	8018414 <ip_reass_enqueue_new_datagram>
 80188b4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80188b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d11c      	bne.n	80188f6 <ip4_reass+0x13e>
      goto nullreturn;
 80188bc:	e109      	b.n	8018ad2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80188be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188c0:	88db      	ldrh	r3, [r3, #6]
 80188c2:	b29b      	uxth	r3, r3
 80188c4:	4618      	mov	r0, r3
 80188c6:	f7f6 f812 	bl	800e8ee <lwip_htons>
 80188ca:	4603      	mov	r3, r0
 80188cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d110      	bne.n	80188f6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80188d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188d6:	89db      	ldrh	r3, [r3, #14]
 80188d8:	4618      	mov	r0, r3
 80188da:	f7f6 f808 	bl	800e8ee <lwip_htons>
 80188de:	4603      	mov	r3, r0
 80188e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d006      	beq.n	80188f6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80188e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188ea:	3308      	adds	r3, #8
 80188ec:	2214      	movs	r2, #20
 80188ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80188f0:	4618      	mov	r0, r3
 80188f2:	f000 fef7 	bl	80196e4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80188f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188f8:	88db      	ldrh	r3, [r3, #6]
 80188fa:	b29b      	uxth	r3, r3
 80188fc:	f003 0320 	and.w	r3, r3, #32
 8018900:	2b00      	cmp	r3, #0
 8018902:	bf0c      	ite	eq
 8018904:	2301      	moveq	r3, #1
 8018906:	2300      	movne	r3, #0
 8018908:	b2db      	uxtb	r3, r3
 801890a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801890c:	69fb      	ldr	r3, [r7, #28]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d00e      	beq.n	8018930 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018912:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018914:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018916:	4413      	add	r3, r2
 8018918:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801891a:	8b7a      	ldrh	r2, [r7, #26]
 801891c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801891e:	429a      	cmp	r2, r3
 8018920:	f0c0 80a0 	bcc.w	8018a64 <ip4_reass+0x2ac>
 8018924:	8b7b      	ldrh	r3, [r7, #26]
 8018926:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801892a:	4293      	cmp	r3, r2
 801892c:	f200 809a 	bhi.w	8018a64 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018930:	69fa      	ldr	r2, [r7, #28]
 8018932:	6879      	ldr	r1, [r7, #4]
 8018934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018936:	f7ff fdd5 	bl	80184e4 <ip_reass_chain_frag_into_datagram_and_validate>
 801893a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801893c:	697b      	ldr	r3, [r7, #20]
 801893e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018942:	f000 8091 	beq.w	8018a68 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018946:	4b5b      	ldr	r3, [pc, #364]	; (8018ab4 <ip4_reass+0x2fc>)
 8018948:	881a      	ldrh	r2, [r3, #0]
 801894a:	8c3b      	ldrh	r3, [r7, #32]
 801894c:	4413      	add	r3, r2
 801894e:	b29a      	uxth	r2, r3
 8018950:	4b58      	ldr	r3, [pc, #352]	; (8018ab4 <ip4_reass+0x2fc>)
 8018952:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018954:	69fb      	ldr	r3, [r7, #28]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d00d      	beq.n	8018976 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801895a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801895c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801895e:	4413      	add	r3, r2
 8018960:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018964:	8a7a      	ldrh	r2, [r7, #18]
 8018966:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801896a:	7f9b      	ldrb	r3, [r3, #30]
 801896c:	f043 0301 	orr.w	r3, r3, #1
 8018970:	b2da      	uxtb	r2, r3
 8018972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018974:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018976:	697b      	ldr	r3, [r7, #20]
 8018978:	2b01      	cmp	r3, #1
 801897a:	d171      	bne.n	8018a60 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801897e:	8b9b      	ldrh	r3, [r3, #28]
 8018980:	3314      	adds	r3, #20
 8018982:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018986:	685b      	ldr	r3, [r3, #4]
 8018988:	685b      	ldr	r3, [r3, #4]
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801898e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018990:	685b      	ldr	r3, [r3, #4]
 8018992:	685b      	ldr	r3, [r3, #4]
 8018994:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018998:	3308      	adds	r3, #8
 801899a:	2214      	movs	r2, #20
 801899c:	4619      	mov	r1, r3
 801899e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80189a0:	f000 fea0 	bl	80196e4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80189a4:	8a3b      	ldrh	r3, [r7, #16]
 80189a6:	4618      	mov	r0, r3
 80189a8:	f7f5 ffa1 	bl	800e8ee <lwip_htons>
 80189ac:	4603      	mov	r3, r0
 80189ae:	461a      	mov	r2, r3
 80189b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189b2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80189b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189b6:	2200      	movs	r2, #0
 80189b8:	719a      	strb	r2, [r3, #6]
 80189ba:	2200      	movs	r2, #0
 80189bc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80189be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189c0:	2200      	movs	r2, #0
 80189c2:	729a      	strb	r2, [r3, #10]
 80189c4:	2200      	movs	r2, #0
 80189c6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80189c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189ca:	685b      	ldr	r3, [r3, #4]
 80189cc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80189ce:	e00d      	b.n	80189ec <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80189d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189d2:	685b      	ldr	r3, [r3, #4]
 80189d4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80189d6:	2114      	movs	r1, #20
 80189d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80189da:	f7f7 f9c5 	bl	800fd68 <pbuf_remove_header>
      pbuf_cat(p, r);
 80189de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80189e0:	6878      	ldr	r0, [r7, #4]
 80189e2:	f7f7 fb09 	bl	800fff8 <pbuf_cat>
      r = iprh->next_pbuf;
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80189ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d1ee      	bne.n	80189d0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80189f2:	4b31      	ldr	r3, [pc, #196]	; (8018ab8 <ip4_reass+0x300>)
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80189f8:	429a      	cmp	r2, r3
 80189fa:	d102      	bne.n	8018a02 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80189fc:	2300      	movs	r3, #0
 80189fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018a00:	e010      	b.n	8018a24 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018a02:	4b2d      	ldr	r3, [pc, #180]	; (8018ab8 <ip4_reass+0x300>)
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018a08:	e007      	b.n	8018a1a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018a10:	429a      	cmp	r2, r3
 8018a12:	d006      	beq.n	8018a22 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d1f4      	bne.n	8018a0a <ip4_reass+0x252>
 8018a20:	e000      	b.n	8018a24 <ip4_reass+0x26c>
          break;
 8018a22:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018a24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018a26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018a28:	f7ff fd2e 	bl	8018488 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018a2c:	6878      	ldr	r0, [r7, #4]
 8018a2e:	f7f7 faa9 	bl	800ff84 <pbuf_clen>
 8018a32:	4603      	mov	r3, r0
 8018a34:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018a36:	4b1f      	ldr	r3, [pc, #124]	; (8018ab4 <ip4_reass+0x2fc>)
 8018a38:	881b      	ldrh	r3, [r3, #0]
 8018a3a:	8c3a      	ldrh	r2, [r7, #32]
 8018a3c:	429a      	cmp	r2, r3
 8018a3e:	d906      	bls.n	8018a4e <ip4_reass+0x296>
 8018a40:	4b1e      	ldr	r3, [pc, #120]	; (8018abc <ip4_reass+0x304>)
 8018a42:	f240 229b 	movw	r2, #667	; 0x29b
 8018a46:	491e      	ldr	r1, [pc, #120]	; (8018ac0 <ip4_reass+0x308>)
 8018a48:	481e      	ldr	r0, [pc, #120]	; (8018ac4 <ip4_reass+0x30c>)
 8018a4a:	f001 fb75 	bl	801a138 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018a4e:	4b19      	ldr	r3, [pc, #100]	; (8018ab4 <ip4_reass+0x2fc>)
 8018a50:	881a      	ldrh	r2, [r3, #0]
 8018a52:	8c3b      	ldrh	r3, [r7, #32]
 8018a54:	1ad3      	subs	r3, r2, r3
 8018a56:	b29a      	uxth	r2, r3
 8018a58:	4b16      	ldr	r3, [pc, #88]	; (8018ab4 <ip4_reass+0x2fc>)
 8018a5a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	e03c      	b.n	8018ada <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018a60:	2300      	movs	r3, #0
 8018a62:	e03a      	b.n	8018ada <ip4_reass+0x322>
      goto nullreturn_ipr;
 8018a64:	bf00      	nop
 8018a66:	e000      	b.n	8018a6a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8018a68:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d106      	bne.n	8018a7e <ip4_reass+0x2c6>
 8018a70:	4b12      	ldr	r3, [pc, #72]	; (8018abc <ip4_reass+0x304>)
 8018a72:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018a76:	4914      	ldr	r1, [pc, #80]	; (8018ac8 <ip4_reass+0x310>)
 8018a78:	4812      	ldr	r0, [pc, #72]	; (8018ac4 <ip4_reass+0x30c>)
 8018a7a:	f001 fb5d 	bl	801a138 <iprintf>
  if (ipr->p == NULL) {
 8018a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a80:	685b      	ldr	r3, [r3, #4]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d124      	bne.n	8018ad0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018a86:	4b0c      	ldr	r3, [pc, #48]	; (8018ab8 <ip4_reass+0x300>)
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018a8c:	429a      	cmp	r2, r3
 8018a8e:	d006      	beq.n	8018a9e <ip4_reass+0x2e6>
 8018a90:	4b0a      	ldr	r3, [pc, #40]	; (8018abc <ip4_reass+0x304>)
 8018a92:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018a96:	490d      	ldr	r1, [pc, #52]	; (8018acc <ip4_reass+0x314>)
 8018a98:	480a      	ldr	r0, [pc, #40]	; (8018ac4 <ip4_reass+0x30c>)
 8018a9a:	f001 fb4d 	bl	801a138 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018a9e:	2100      	movs	r1, #0
 8018aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018aa2:	f7ff fcf1 	bl	8018488 <ip_reass_dequeue_datagram>
 8018aa6:	e014      	b.n	8018ad2 <ip4_reass+0x31a>
    goto nullreturn;
 8018aa8:	bf00      	nop
 8018aaa:	e012      	b.n	8018ad2 <ip4_reass+0x31a>
    goto nullreturn;
 8018aac:	bf00      	nop
 8018aae:	e010      	b.n	8018ad2 <ip4_reass+0x31a>
      goto nullreturn;
 8018ab0:	bf00      	nop
 8018ab2:	e00e      	b.n	8018ad2 <ip4_reass+0x31a>
 8018ab4:	20000950 	.word	0x20000950
 8018ab8:	2000094c 	.word	0x2000094c
 8018abc:	0801f028 	.word	0x0801f028
 8018ac0:	0801f198 	.word	0x0801f198
 8018ac4:	0801f070 	.word	0x0801f070
 8018ac8:	0801f1b4 	.word	0x0801f1b4
 8018acc:	0801f1c0 	.word	0x0801f1c0
  }

nullreturn:
 8018ad0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018ad2:	6878      	ldr	r0, [r7, #4]
 8018ad4:	f7f7 f9ce 	bl	800fe74 <pbuf_free>
  return NULL;
 8018ad8:	2300      	movs	r3, #0
}
 8018ada:	4618      	mov	r0, r3
 8018adc:	3738      	adds	r7, #56	; 0x38
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	bd80      	pop	{r7, pc}
 8018ae2:	bf00      	nop

08018ae4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018ae4:	b580      	push	{r7, lr}
 8018ae6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018ae8:	2005      	movs	r0, #5
 8018aea:	f7f6 fb65 	bl	800f1b8 <memp_malloc>
 8018aee:	4603      	mov	r3, r0
}
 8018af0:	4618      	mov	r0, r3
 8018af2:	bd80      	pop	{r7, pc}

08018af4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018af4:	b580      	push	{r7, lr}
 8018af6:	b082      	sub	sp, #8
 8018af8:	af00      	add	r7, sp, #0
 8018afa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d106      	bne.n	8018b10 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018b02:	4b07      	ldr	r3, [pc, #28]	; (8018b20 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018b04:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018b08:	4906      	ldr	r1, [pc, #24]	; (8018b24 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018b0a:	4807      	ldr	r0, [pc, #28]	; (8018b28 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018b0c:	f001 fb14 	bl	801a138 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018b10:	6879      	ldr	r1, [r7, #4]
 8018b12:	2005      	movs	r0, #5
 8018b14:	f7f6 fb9c 	bl	800f250 <memp_free>
}
 8018b18:	bf00      	nop
 8018b1a:	3708      	adds	r7, #8
 8018b1c:	46bd      	mov	sp, r7
 8018b1e:	bd80      	pop	{r7, pc}
 8018b20:	0801f028 	.word	0x0801f028
 8018b24:	0801f1e0 	.word	0x0801f1e0
 8018b28:	0801f070 	.word	0x0801f070

08018b2c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018b2c:	b580      	push	{r7, lr}
 8018b2e:	b084      	sub	sp, #16
 8018b30:	af00      	add	r7, sp, #0
 8018b32:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d106      	bne.n	8018b4c <ipfrag_free_pbuf_custom+0x20>
 8018b3e:	4b11      	ldr	r3, [pc, #68]	; (8018b84 <ipfrag_free_pbuf_custom+0x58>)
 8018b40:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018b44:	4910      	ldr	r1, [pc, #64]	; (8018b88 <ipfrag_free_pbuf_custom+0x5c>)
 8018b46:	4811      	ldr	r0, [pc, #68]	; (8018b8c <ipfrag_free_pbuf_custom+0x60>)
 8018b48:	f001 faf6 	bl	801a138 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018b4c:	68fa      	ldr	r2, [r7, #12]
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	429a      	cmp	r2, r3
 8018b52:	d006      	beq.n	8018b62 <ipfrag_free_pbuf_custom+0x36>
 8018b54:	4b0b      	ldr	r3, [pc, #44]	; (8018b84 <ipfrag_free_pbuf_custom+0x58>)
 8018b56:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018b5a:	490d      	ldr	r1, [pc, #52]	; (8018b90 <ipfrag_free_pbuf_custom+0x64>)
 8018b5c:	480b      	ldr	r0, [pc, #44]	; (8018b8c <ipfrag_free_pbuf_custom+0x60>)
 8018b5e:	f001 faeb 	bl	801a138 <iprintf>
  if (pcr->original != NULL) {
 8018b62:	68fb      	ldr	r3, [r7, #12]
 8018b64:	695b      	ldr	r3, [r3, #20]
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d004      	beq.n	8018b74 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018b6a:	68fb      	ldr	r3, [r7, #12]
 8018b6c:	695b      	ldr	r3, [r3, #20]
 8018b6e:	4618      	mov	r0, r3
 8018b70:	f7f7 f980 	bl	800fe74 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018b74:	68f8      	ldr	r0, [r7, #12]
 8018b76:	f7ff ffbd 	bl	8018af4 <ip_frag_free_pbuf_custom_ref>
}
 8018b7a:	bf00      	nop
 8018b7c:	3710      	adds	r7, #16
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	bd80      	pop	{r7, pc}
 8018b82:	bf00      	nop
 8018b84:	0801f028 	.word	0x0801f028
 8018b88:	0801f1ec 	.word	0x0801f1ec
 8018b8c:	0801f070 	.word	0x0801f070
 8018b90:	0801f1f8 	.word	0x0801f1f8

08018b94 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018b94:	b580      	push	{r7, lr}
 8018b96:	b094      	sub	sp, #80	; 0x50
 8018b98:	af02      	add	r7, sp, #8
 8018b9a:	60f8      	str	r0, [r7, #12]
 8018b9c:	60b9      	str	r1, [r7, #8]
 8018b9e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018ba6:	68bb      	ldr	r3, [r7, #8]
 8018ba8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018baa:	3b14      	subs	r3, #20
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	da00      	bge.n	8018bb2 <ip4_frag+0x1e>
 8018bb0:	3307      	adds	r3, #7
 8018bb2:	10db      	asrs	r3, r3, #3
 8018bb4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018bb6:	2314      	movs	r3, #20
 8018bb8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018bba:	68fb      	ldr	r3, [r7, #12]
 8018bbc:	685b      	ldr	r3, [r3, #4]
 8018bbe:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018bc2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bc6:	781b      	ldrb	r3, [r3, #0]
 8018bc8:	f003 030f 	and.w	r3, r3, #15
 8018bcc:	b2db      	uxtb	r3, r3
 8018bce:	009b      	lsls	r3, r3, #2
 8018bd0:	b2db      	uxtb	r3, r3
 8018bd2:	2b14      	cmp	r3, #20
 8018bd4:	d002      	beq.n	8018bdc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018bd6:	f06f 0305 	mvn.w	r3, #5
 8018bda:	e110      	b.n	8018dfe <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	895b      	ldrh	r3, [r3, #10]
 8018be0:	2b13      	cmp	r3, #19
 8018be2:	d809      	bhi.n	8018bf8 <ip4_frag+0x64>
 8018be4:	4b88      	ldr	r3, [pc, #544]	; (8018e08 <ip4_frag+0x274>)
 8018be6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018bea:	4988      	ldr	r1, [pc, #544]	; (8018e0c <ip4_frag+0x278>)
 8018bec:	4888      	ldr	r0, [pc, #544]	; (8018e10 <ip4_frag+0x27c>)
 8018bee:	f001 faa3 	bl	801a138 <iprintf>
 8018bf2:	f06f 0305 	mvn.w	r3, #5
 8018bf6:	e102      	b.n	8018dfe <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bfa:	88db      	ldrh	r3, [r3, #6]
 8018bfc:	b29b      	uxth	r3, r3
 8018bfe:	4618      	mov	r0, r3
 8018c00:	f7f5 fe75 	bl	800e8ee <lwip_htons>
 8018c04:	4603      	mov	r3, r0
 8018c06:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018c08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018c0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018c0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018c12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018c18:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018c1a:	68fb      	ldr	r3, [r7, #12]
 8018c1c:	891b      	ldrh	r3, [r3, #8]
 8018c1e:	3b14      	subs	r3, #20
 8018c20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018c24:	e0e1      	b.n	8018dea <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018c26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018c28:	00db      	lsls	r3, r3, #3
 8018c2a:	b29b      	uxth	r3, r3
 8018c2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018c30:	4293      	cmp	r3, r2
 8018c32:	bf28      	it	cs
 8018c34:	4613      	movcs	r3, r2
 8018c36:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018c38:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018c3c:	2114      	movs	r1, #20
 8018c3e:	200e      	movs	r0, #14
 8018c40:	f7f6 fe34 	bl	800f8ac <pbuf_alloc>
 8018c44:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	f000 80d5 	beq.w	8018df8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c50:	895b      	ldrh	r3, [r3, #10]
 8018c52:	2b13      	cmp	r3, #19
 8018c54:	d806      	bhi.n	8018c64 <ip4_frag+0xd0>
 8018c56:	4b6c      	ldr	r3, [pc, #432]	; (8018e08 <ip4_frag+0x274>)
 8018c58:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018c5c:	496d      	ldr	r1, [pc, #436]	; (8018e14 <ip4_frag+0x280>)
 8018c5e:	486c      	ldr	r0, [pc, #432]	; (8018e10 <ip4_frag+0x27c>)
 8018c60:	f001 fa6a 	bl	801a138 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c66:	685b      	ldr	r3, [r3, #4]
 8018c68:	2214      	movs	r2, #20
 8018c6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	f000 fd39 	bl	80196e4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c74:	685b      	ldr	r3, [r3, #4]
 8018c76:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018c78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018c7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018c7e:	e064      	b.n	8018d4a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	895a      	ldrh	r2, [r3, #10]
 8018c84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018c86:	1ad3      	subs	r3, r2, r3
 8018c88:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	895b      	ldrh	r3, [r3, #10]
 8018c8e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018c90:	429a      	cmp	r2, r3
 8018c92:	d906      	bls.n	8018ca2 <ip4_frag+0x10e>
 8018c94:	4b5c      	ldr	r3, [pc, #368]	; (8018e08 <ip4_frag+0x274>)
 8018c96:	f240 322d 	movw	r2, #813	; 0x32d
 8018c9a:	495f      	ldr	r1, [pc, #380]	; (8018e18 <ip4_frag+0x284>)
 8018c9c:	485c      	ldr	r0, [pc, #368]	; (8018e10 <ip4_frag+0x27c>)
 8018c9e:	f001 fa4b 	bl	801a138 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018ca2:	8bfa      	ldrh	r2, [r7, #30]
 8018ca4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018ca8:	4293      	cmp	r3, r2
 8018caa:	bf28      	it	cs
 8018cac:	4613      	movcs	r3, r2
 8018cae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018cb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d105      	bne.n	8018cc6 <ip4_frag+0x132>
        poff = 0;
 8018cba:	2300      	movs	r3, #0
 8018cbc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018cbe:	68fb      	ldr	r3, [r7, #12]
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	60fb      	str	r3, [r7, #12]
        continue;
 8018cc4:	e041      	b.n	8018d4a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018cc6:	f7ff ff0d 	bl	8018ae4 <ip_frag_alloc_pbuf_custom_ref>
 8018cca:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018ccc:	69bb      	ldr	r3, [r7, #24]
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d103      	bne.n	8018cda <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018cd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018cd4:	f7f7 f8ce 	bl	800fe74 <pbuf_free>
        goto memerr;
 8018cd8:	e08f      	b.n	8018dfa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018cda:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018ce0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018ce2:	4413      	add	r3, r2
 8018ce4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018ce8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018cec:	9201      	str	r2, [sp, #4]
 8018cee:	9300      	str	r3, [sp, #0]
 8018cf0:	4603      	mov	r3, r0
 8018cf2:	2241      	movs	r2, #65	; 0x41
 8018cf4:	2000      	movs	r0, #0
 8018cf6:	f7f6 ff03 	bl	800fb00 <pbuf_alloced_custom>
 8018cfa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018cfc:	697b      	ldr	r3, [r7, #20]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d106      	bne.n	8018d10 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018d02:	69b8      	ldr	r0, [r7, #24]
 8018d04:	f7ff fef6 	bl	8018af4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018d08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018d0a:	f7f7 f8b3 	bl	800fe74 <pbuf_free>
        goto memerr;
 8018d0e:	e074      	b.n	8018dfa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018d10:	68f8      	ldr	r0, [r7, #12]
 8018d12:	f7f7 f94f 	bl	800ffb4 <pbuf_ref>
      pcr->original = p;
 8018d16:	69bb      	ldr	r3, [r7, #24]
 8018d18:	68fa      	ldr	r2, [r7, #12]
 8018d1a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018d1c:	69bb      	ldr	r3, [r7, #24]
 8018d1e:	4a3f      	ldr	r2, [pc, #252]	; (8018e1c <ip4_frag+0x288>)
 8018d20:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018d22:	6979      	ldr	r1, [r7, #20]
 8018d24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018d26:	f7f7 f967 	bl	800fff8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018d2a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018d2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018d32:	1ad3      	subs	r3, r2, r3
 8018d34:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018d38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d004      	beq.n	8018d4a <ip4_frag+0x1b6>
        poff = 0;
 8018d40:	2300      	movs	r3, #0
 8018d42:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018d4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d196      	bne.n	8018c80 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018d52:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018d54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018d58:	4413      	add	r3, r2
 8018d5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018d5c:	68bb      	ldr	r3, [r7, #8]
 8018d5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018d60:	f1a3 0213 	sub.w	r2, r3, #19
 8018d64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018d68:	429a      	cmp	r2, r3
 8018d6a:	bfcc      	ite	gt
 8018d6c:	2301      	movgt	r3, #1
 8018d6e:	2300      	movle	r3, #0
 8018d70:	b2db      	uxtb	r3, r3
 8018d72:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018d74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018d78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018d7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018d7e:	6a3b      	ldr	r3, [r7, #32]
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d002      	beq.n	8018d8a <ip4_frag+0x1f6>
 8018d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d003      	beq.n	8018d92 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018d8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018d8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018d90:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018d92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018d94:	4618      	mov	r0, r3
 8018d96:	f7f5 fdaa 	bl	800e8ee <lwip_htons>
 8018d9a:	4603      	mov	r3, r0
 8018d9c:	461a      	mov	r2, r3
 8018d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018da0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018da2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018da4:	3314      	adds	r3, #20
 8018da6:	b29b      	uxth	r3, r3
 8018da8:	4618      	mov	r0, r3
 8018daa:	f7f5 fda0 	bl	800e8ee <lwip_htons>
 8018dae:	4603      	mov	r3, r0
 8018db0:	461a      	mov	r2, r3
 8018db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018db4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018db8:	2200      	movs	r2, #0
 8018dba:	729a      	strb	r2, [r3, #10]
 8018dbc:	2200      	movs	r2, #0
 8018dbe:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018dc0:	68bb      	ldr	r3, [r7, #8]
 8018dc2:	695b      	ldr	r3, [r3, #20]
 8018dc4:	687a      	ldr	r2, [r7, #4]
 8018dc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018dc8:	68b8      	ldr	r0, [r7, #8]
 8018dca:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018dcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018dce:	f7f7 f851 	bl	800fe74 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018dd2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018dd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018dd8:	1ad3      	subs	r3, r2, r3
 8018dda:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018dde:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018de2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018de4:	4413      	add	r3, r2
 8018de6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018dea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	f47f af19 	bne.w	8018c26 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018df4:	2300      	movs	r3, #0
 8018df6:	e002      	b.n	8018dfe <ip4_frag+0x26a>
      goto memerr;
 8018df8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018dfe:	4618      	mov	r0, r3
 8018e00:	3748      	adds	r7, #72	; 0x48
 8018e02:	46bd      	mov	sp, r7
 8018e04:	bd80      	pop	{r7, pc}
 8018e06:	bf00      	nop
 8018e08:	0801f028 	.word	0x0801f028
 8018e0c:	0801f204 	.word	0x0801f204
 8018e10:	0801f070 	.word	0x0801f070
 8018e14:	0801f220 	.word	0x0801f220
 8018e18:	0801f240 	.word	0x0801f240
 8018e1c:	08018b2d 	.word	0x08018b2d

08018e20 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018e20:	b580      	push	{r7, lr}
 8018e22:	b086      	sub	sp, #24
 8018e24:	af00      	add	r7, sp, #0
 8018e26:	6078      	str	r0, [r7, #4]
 8018e28:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018e2a:	230e      	movs	r3, #14
 8018e2c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	895b      	ldrh	r3, [r3, #10]
 8018e32:	2b0e      	cmp	r3, #14
 8018e34:	d96e      	bls.n	8018f14 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	7bdb      	ldrb	r3, [r3, #15]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d106      	bne.n	8018e4c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018e3e:	683b      	ldr	r3, [r7, #0]
 8018e40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018e44:	3301      	adds	r3, #1
 8018e46:	b2da      	uxtb	r2, r3
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	685b      	ldr	r3, [r3, #4]
 8018e50:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018e52:	693b      	ldr	r3, [r7, #16]
 8018e54:	7b1a      	ldrb	r2, [r3, #12]
 8018e56:	7b5b      	ldrb	r3, [r3, #13]
 8018e58:	021b      	lsls	r3, r3, #8
 8018e5a:	4313      	orrs	r3, r2
 8018e5c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018e5e:	693b      	ldr	r3, [r7, #16]
 8018e60:	781b      	ldrb	r3, [r3, #0]
 8018e62:	f003 0301 	and.w	r3, r3, #1
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d023      	beq.n	8018eb2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018e6a:	693b      	ldr	r3, [r7, #16]
 8018e6c:	781b      	ldrb	r3, [r3, #0]
 8018e6e:	2b01      	cmp	r3, #1
 8018e70:	d10f      	bne.n	8018e92 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018e72:	693b      	ldr	r3, [r7, #16]
 8018e74:	785b      	ldrb	r3, [r3, #1]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d11b      	bne.n	8018eb2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018e7a:	693b      	ldr	r3, [r7, #16]
 8018e7c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018e7e:	2b5e      	cmp	r3, #94	; 0x5e
 8018e80:	d117      	bne.n	8018eb2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	7b5b      	ldrb	r3, [r3, #13]
 8018e86:	f043 0310 	orr.w	r3, r3, #16
 8018e8a:	b2da      	uxtb	r2, r3
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	735a      	strb	r2, [r3, #13]
 8018e90:	e00f      	b.n	8018eb2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018e92:	693b      	ldr	r3, [r7, #16]
 8018e94:	2206      	movs	r2, #6
 8018e96:	4928      	ldr	r1, [pc, #160]	; (8018f38 <ethernet_input+0x118>)
 8018e98:	4618      	mov	r0, r3
 8018e9a:	f000 fc15 	bl	80196c8 <memcmp>
 8018e9e:	4603      	mov	r3, r0
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d106      	bne.n	8018eb2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	7b5b      	ldrb	r3, [r3, #13]
 8018ea8:	f043 0308 	orr.w	r3, r3, #8
 8018eac:	b2da      	uxtb	r2, r3
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018eb2:	89fb      	ldrh	r3, [r7, #14]
 8018eb4:	2b08      	cmp	r3, #8
 8018eb6:	d003      	beq.n	8018ec0 <ethernet_input+0xa0>
 8018eb8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018ebc:	d014      	beq.n	8018ee8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018ebe:	e032      	b.n	8018f26 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018ec0:	683b      	ldr	r3, [r7, #0]
 8018ec2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018ec6:	f003 0308 	and.w	r3, r3, #8
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d024      	beq.n	8018f18 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018ece:	8afb      	ldrh	r3, [r7, #22]
 8018ed0:	4619      	mov	r1, r3
 8018ed2:	6878      	ldr	r0, [r7, #4]
 8018ed4:	f7f6 ff48 	bl	800fd68 <pbuf_remove_header>
 8018ed8:	4603      	mov	r3, r0
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d11e      	bne.n	8018f1c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018ede:	6839      	ldr	r1, [r7, #0]
 8018ee0:	6878      	ldr	r0, [r7, #4]
 8018ee2:	f7fe ff27 	bl	8017d34 <ip4_input>
      break;
 8018ee6:	e013      	b.n	8018f10 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018ee8:	683b      	ldr	r3, [r7, #0]
 8018eea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018eee:	f003 0308 	and.w	r3, r3, #8
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d014      	beq.n	8018f20 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018ef6:	8afb      	ldrh	r3, [r7, #22]
 8018ef8:	4619      	mov	r1, r3
 8018efa:	6878      	ldr	r0, [r7, #4]
 8018efc:	f7f6 ff34 	bl	800fd68 <pbuf_remove_header>
 8018f00:	4603      	mov	r3, r0
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d10e      	bne.n	8018f24 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018f06:	6839      	ldr	r1, [r7, #0]
 8018f08:	6878      	ldr	r0, [r7, #4]
 8018f0a:	f7fe f8c7 	bl	801709c <etharp_input>
      break;
 8018f0e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018f10:	2300      	movs	r3, #0
 8018f12:	e00c      	b.n	8018f2e <ethernet_input+0x10e>
    goto free_and_return;
 8018f14:	bf00      	nop
 8018f16:	e006      	b.n	8018f26 <ethernet_input+0x106>
        goto free_and_return;
 8018f18:	bf00      	nop
 8018f1a:	e004      	b.n	8018f26 <ethernet_input+0x106>
        goto free_and_return;
 8018f1c:	bf00      	nop
 8018f1e:	e002      	b.n	8018f26 <ethernet_input+0x106>
        goto free_and_return;
 8018f20:	bf00      	nop
 8018f22:	e000      	b.n	8018f26 <ethernet_input+0x106>
        goto free_and_return;
 8018f24:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018f26:	6878      	ldr	r0, [r7, #4]
 8018f28:	f7f6 ffa4 	bl	800fe74 <pbuf_free>
  return ERR_OK;
 8018f2c:	2300      	movs	r3, #0
}
 8018f2e:	4618      	mov	r0, r3
 8018f30:	3718      	adds	r7, #24
 8018f32:	46bd      	mov	sp, r7
 8018f34:	bd80      	pop	{r7, pc}
 8018f36:	bf00      	nop
 8018f38:	0801f560 	.word	0x0801f560

08018f3c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018f3c:	b580      	push	{r7, lr}
 8018f3e:	b086      	sub	sp, #24
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	60f8      	str	r0, [r7, #12]
 8018f44:	60b9      	str	r1, [r7, #8]
 8018f46:	607a      	str	r2, [r7, #4]
 8018f48:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018f4a:	8c3b      	ldrh	r3, [r7, #32]
 8018f4c:	4618      	mov	r0, r3
 8018f4e:	f7f5 fcce 	bl	800e8ee <lwip_htons>
 8018f52:	4603      	mov	r3, r0
 8018f54:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018f56:	210e      	movs	r1, #14
 8018f58:	68b8      	ldr	r0, [r7, #8]
 8018f5a:	f7f6 fef5 	bl	800fd48 <pbuf_add_header>
 8018f5e:	4603      	mov	r3, r0
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d125      	bne.n	8018fb0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018f64:	68bb      	ldr	r3, [r7, #8]
 8018f66:	685b      	ldr	r3, [r3, #4]
 8018f68:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018f6a:	693b      	ldr	r3, [r7, #16]
 8018f6c:	8afa      	ldrh	r2, [r7, #22]
 8018f6e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018f70:	693b      	ldr	r3, [r7, #16]
 8018f72:	2206      	movs	r2, #6
 8018f74:	6839      	ldr	r1, [r7, #0]
 8018f76:	4618      	mov	r0, r3
 8018f78:	f000 fbb4 	bl	80196e4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018f7c:	693b      	ldr	r3, [r7, #16]
 8018f7e:	3306      	adds	r3, #6
 8018f80:	2206      	movs	r2, #6
 8018f82:	6879      	ldr	r1, [r7, #4]
 8018f84:	4618      	mov	r0, r3
 8018f86:	f000 fbad 	bl	80196e4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018f90:	2b06      	cmp	r3, #6
 8018f92:	d006      	beq.n	8018fa2 <ethernet_output+0x66>
 8018f94:	4b0a      	ldr	r3, [pc, #40]	; (8018fc0 <ethernet_output+0x84>)
 8018f96:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018f9a:	490a      	ldr	r1, [pc, #40]	; (8018fc4 <ethernet_output+0x88>)
 8018f9c:	480a      	ldr	r0, [pc, #40]	; (8018fc8 <ethernet_output+0x8c>)
 8018f9e:	f001 f8cb 	bl	801a138 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	699b      	ldr	r3, [r3, #24]
 8018fa6:	68b9      	ldr	r1, [r7, #8]
 8018fa8:	68f8      	ldr	r0, [r7, #12]
 8018faa:	4798      	blx	r3
 8018fac:	4603      	mov	r3, r0
 8018fae:	e002      	b.n	8018fb6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018fb0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018fb2:	f06f 0301 	mvn.w	r3, #1
}
 8018fb6:	4618      	mov	r0, r3
 8018fb8:	3718      	adds	r7, #24
 8018fba:	46bd      	mov	sp, r7
 8018fbc:	bd80      	pop	{r7, pc}
 8018fbe:	bf00      	nop
 8018fc0:	0801f250 	.word	0x0801f250
 8018fc4:	0801f288 	.word	0x0801f288
 8018fc8:	0801f2bc 	.word	0x0801f2bc

08018fcc <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b082      	sub	sp, #8
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8018fd4:	1d39      	adds	r1, r7, #4
 8018fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8018fda:	2201      	movs	r2, #1
 8018fdc:	4803      	ldr	r0, [pc, #12]	; (8018fec <__io_putchar+0x20>)
 8018fde:	f7ef fc68 	bl	80088b2 <HAL_UART_Transmit>
  return ch;
 8018fe2:	687b      	ldr	r3, [r7, #4]
}
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	3708      	adds	r7, #8
 8018fe8:	46bd      	mov	sp, r7
 8018fea:	bd80      	pop	{r7, pc}
 8018fec:	20002ac0 	.word	0x20002ac0

08018ff0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8018ff4:	2201      	movs	r2, #1
 8018ff6:	490e      	ldr	r1, [pc, #56]	; (8019030 <MX_USB_HOST_Init+0x40>)
 8018ff8:	480e      	ldr	r0, [pc, #56]	; (8019034 <MX_USB_HOST_Init+0x44>)
 8018ffa:	f7f3 fefb 	bl	800cdf4 <USBH_Init>
 8018ffe:	4603      	mov	r3, r0
 8019000:	2b00      	cmp	r3, #0
 8019002:	d001      	beq.n	8019008 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8019004:	f7e8 fa52 	bl	80014ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8019008:	490b      	ldr	r1, [pc, #44]	; (8019038 <MX_USB_HOST_Init+0x48>)
 801900a:	480a      	ldr	r0, [pc, #40]	; (8019034 <MX_USB_HOST_Init+0x44>)
 801900c:	f7f3 ff8e 	bl	800cf2c <USBH_RegisterClass>
 8019010:	4603      	mov	r3, r0
 8019012:	2b00      	cmp	r3, #0
 8019014:	d001      	beq.n	801901a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8019016:	f7e8 fa49 	bl	80014ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801901a:	4806      	ldr	r0, [pc, #24]	; (8019034 <MX_USB_HOST_Init+0x44>)
 801901c:	f7f4 f874 	bl	800d108 <USBH_Start>
 8019020:	4603      	mov	r3, r0
 8019022:	2b00      	cmp	r3, #0
 8019024:	d001      	beq.n	801902a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8019026:	f7e8 fa41 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801902a:	bf00      	nop
 801902c:	bd80      	pop	{r7, pc}
 801902e:	bf00      	nop
 8019030:	08019051 	.word	0x08019051
 8019034:	20018928 	.word	0x20018928
 8019038:	2000058c 	.word	0x2000058c

0801903c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 801903c:	b580      	push	{r7, lr}
 801903e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8019040:	4802      	ldr	r0, [pc, #8]	; (801904c <MX_USB_HOST_Process+0x10>)
 8019042:	f7f4 f871 	bl	800d128 <USBH_Process>
}
 8019046:	bf00      	nop
 8019048:	bd80      	pop	{r7, pc}
 801904a:	bf00      	nop
 801904c:	20018928 	.word	0x20018928

08019050 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8019050:	b480      	push	{r7}
 8019052:	b083      	sub	sp, #12
 8019054:	af00      	add	r7, sp, #0
 8019056:	6078      	str	r0, [r7, #4]
 8019058:	460b      	mov	r3, r1
 801905a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801905c:	78fb      	ldrb	r3, [r7, #3]
 801905e:	3b01      	subs	r3, #1
 8019060:	2b04      	cmp	r3, #4
 8019062:	d819      	bhi.n	8019098 <USBH_UserProcess+0x48>
 8019064:	a201      	add	r2, pc, #4	; (adr r2, 801906c <USBH_UserProcess+0x1c>)
 8019066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801906a:	bf00      	nop
 801906c:	08019099 	.word	0x08019099
 8019070:	08019089 	.word	0x08019089
 8019074:	08019099 	.word	0x08019099
 8019078:	08019091 	.word	0x08019091
 801907c:	08019081 	.word	0x08019081
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8019080:	4b09      	ldr	r3, [pc, #36]	; (80190a8 <USBH_UserProcess+0x58>)
 8019082:	2203      	movs	r2, #3
 8019084:	701a      	strb	r2, [r3, #0]
  break;
 8019086:	e008      	b.n	801909a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8019088:	4b07      	ldr	r3, [pc, #28]	; (80190a8 <USBH_UserProcess+0x58>)
 801908a:	2202      	movs	r2, #2
 801908c:	701a      	strb	r2, [r3, #0]
//  {
//    printf("USB Device Process Error\n");
//    /* Error : Hang Here */
//    while(1);
//  }
  break;
 801908e:	e004      	b.n	801909a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8019090:	4b05      	ldr	r3, [pc, #20]	; (80190a8 <USBH_UserProcess+0x58>)
 8019092:	2201      	movs	r2, #1
 8019094:	701a      	strb	r2, [r3, #0]
  break;
 8019096:	e000      	b.n	801909a <USBH_UserProcess+0x4a>

  default:
  break;
 8019098:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801909a:	bf00      	nop
 801909c:	370c      	adds	r7, #12
 801909e:	46bd      	mov	sp, r7
 80190a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a4:	4770      	bx	lr
 80190a6:	bf00      	nop
 80190a8:	20000952 	.word	0x20000952

080190ac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80190ac:	b580      	push	{r7, lr}
 80190ae:	b08a      	sub	sp, #40	; 0x28
 80190b0:	af00      	add	r7, sp, #0
 80190b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80190b4:	f107 0314 	add.w	r3, r7, #20
 80190b8:	2200      	movs	r2, #0
 80190ba:	601a      	str	r2, [r3, #0]
 80190bc:	605a      	str	r2, [r3, #4]
 80190be:	609a      	str	r2, [r3, #8]
 80190c0:	60da      	str	r2, [r3, #12]
 80190c2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80190cc:	d147      	bne.n	801915e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80190ce:	2300      	movs	r3, #0
 80190d0:	613b      	str	r3, [r7, #16]
 80190d2:	4b25      	ldr	r3, [pc, #148]	; (8019168 <HAL_HCD_MspInit+0xbc>)
 80190d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190d6:	4a24      	ldr	r2, [pc, #144]	; (8019168 <HAL_HCD_MspInit+0xbc>)
 80190d8:	f043 0301 	orr.w	r3, r3, #1
 80190dc:	6313      	str	r3, [r2, #48]	; 0x30
 80190de:	4b22      	ldr	r3, [pc, #136]	; (8019168 <HAL_HCD_MspInit+0xbc>)
 80190e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190e2:	f003 0301 	and.w	r3, r3, #1
 80190e6:	613b      	str	r3, [r7, #16]
 80190e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80190ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80190ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80190f0:	2300      	movs	r3, #0
 80190f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80190f4:	2300      	movs	r3, #0
 80190f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80190f8:	f107 0314 	add.w	r3, r7, #20
 80190fc:	4619      	mov	r1, r3
 80190fe:	481b      	ldr	r0, [pc, #108]	; (801916c <HAL_HCD_MspInit+0xc0>)
 8019100:	f7ec ff2c 	bl	8005f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019104:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801910a:	2302      	movs	r3, #2
 801910c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801910e:	2300      	movs	r3, #0
 8019110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019112:	2303      	movs	r3, #3
 8019114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019116:	230a      	movs	r3, #10
 8019118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801911a:	f107 0314 	add.w	r3, r7, #20
 801911e:	4619      	mov	r1, r3
 8019120:	4812      	ldr	r0, [pc, #72]	; (801916c <HAL_HCD_MspInit+0xc0>)
 8019122:	f7ec ff1b 	bl	8005f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019126:	4b10      	ldr	r3, [pc, #64]	; (8019168 <HAL_HCD_MspInit+0xbc>)
 8019128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801912a:	4a0f      	ldr	r2, [pc, #60]	; (8019168 <HAL_HCD_MspInit+0xbc>)
 801912c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019130:	6353      	str	r3, [r2, #52]	; 0x34
 8019132:	2300      	movs	r3, #0
 8019134:	60fb      	str	r3, [r7, #12]
 8019136:	4b0c      	ldr	r3, [pc, #48]	; (8019168 <HAL_HCD_MspInit+0xbc>)
 8019138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801913a:	4a0b      	ldr	r2, [pc, #44]	; (8019168 <HAL_HCD_MspInit+0xbc>)
 801913c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019140:	6453      	str	r3, [r2, #68]	; 0x44
 8019142:	4b09      	ldr	r3, [pc, #36]	; (8019168 <HAL_HCD_MspInit+0xbc>)
 8019144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801914a:	60fb      	str	r3, [r7, #12]
 801914c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801914e:	2200      	movs	r2, #0
 8019150:	2100      	movs	r1, #0
 8019152:	2043      	movs	r0, #67	; 0x43
 8019154:	f7e9 fc39 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019158:	2043      	movs	r0, #67	; 0x43
 801915a:	f7e9 fc52 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801915e:	bf00      	nop
 8019160:	3728      	adds	r7, #40	; 0x28
 8019162:	46bd      	mov	sp, r7
 8019164:	bd80      	pop	{r7, pc}
 8019166:	bf00      	nop
 8019168:	40023800 	.word	0x40023800
 801916c:	40020000 	.word	0x40020000

08019170 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8019170:	b580      	push	{r7, lr}
 8019172:	b082      	sub	sp, #8
 8019174:	af00      	add	r7, sp, #0
 8019176:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801917e:	4618      	mov	r0, r3
 8019180:	f7f4 fcf1 	bl	800db66 <USBH_LL_IncTimer>
}
 8019184:	bf00      	nop
 8019186:	3708      	adds	r7, #8
 8019188:	46bd      	mov	sp, r7
 801918a:	bd80      	pop	{r7, pc}

0801918c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801918c:	b580      	push	{r7, lr}
 801918e:	b082      	sub	sp, #8
 8019190:	af00      	add	r7, sp, #0
 8019192:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801919a:	4618      	mov	r0, r3
 801919c:	f7f4 fd29 	bl	800dbf2 <USBH_LL_Connect>
}
 80191a0:	bf00      	nop
 80191a2:	3708      	adds	r7, #8
 80191a4:	46bd      	mov	sp, r7
 80191a6:	bd80      	pop	{r7, pc}

080191a8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80191a8:	b580      	push	{r7, lr}
 80191aa:	b082      	sub	sp, #8
 80191ac:	af00      	add	r7, sp, #0
 80191ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80191b6:	4618      	mov	r0, r3
 80191b8:	f7f4 fd32 	bl	800dc20 <USBH_LL_Disconnect>
}
 80191bc:	bf00      	nop
 80191be:	3708      	adds	r7, #8
 80191c0:	46bd      	mov	sp, r7
 80191c2:	bd80      	pop	{r7, pc}

080191c4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80191c4:	b480      	push	{r7}
 80191c6:	b083      	sub	sp, #12
 80191c8:	af00      	add	r7, sp, #0
 80191ca:	6078      	str	r0, [r7, #4]
 80191cc:	460b      	mov	r3, r1
 80191ce:	70fb      	strb	r3, [r7, #3]
 80191d0:	4613      	mov	r3, r2
 80191d2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80191d4:	bf00      	nop
 80191d6:	370c      	adds	r7, #12
 80191d8:	46bd      	mov	sp, r7
 80191da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191de:	4770      	bx	lr

080191e0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80191e0:	b580      	push	{r7, lr}
 80191e2:	b082      	sub	sp, #8
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80191ee:	4618      	mov	r0, r3
 80191f0:	f7f4 fce3 	bl	800dbba <USBH_LL_PortEnabled>
}
 80191f4:	bf00      	nop
 80191f6:	3708      	adds	r7, #8
 80191f8:	46bd      	mov	sp, r7
 80191fa:	bd80      	pop	{r7, pc}

080191fc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80191fc:	b580      	push	{r7, lr}
 80191fe:	b082      	sub	sp, #8
 8019200:	af00      	add	r7, sp, #0
 8019202:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801920a:	4618      	mov	r0, r3
 801920c:	f7f4 fce3 	bl	800dbd6 <USBH_LL_PortDisabled>
}
 8019210:	bf00      	nop
 8019212:	3708      	adds	r7, #8
 8019214:	46bd      	mov	sp, r7
 8019216:	bd80      	pop	{r7, pc}

08019218 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b082      	sub	sp, #8
 801921c:	af00      	add	r7, sp, #0
 801921e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8019226:	2b01      	cmp	r3, #1
 8019228:	d12a      	bne.n	8019280 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801922a:	4a18      	ldr	r2, [pc, #96]	; (801928c <USBH_LL_Init+0x74>)
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	4a15      	ldr	r2, [pc, #84]	; (801928c <USBH_LL_Init+0x74>)
 8019236:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801923a:	4b14      	ldr	r3, [pc, #80]	; (801928c <USBH_LL_Init+0x74>)
 801923c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019240:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8019242:	4b12      	ldr	r3, [pc, #72]	; (801928c <USBH_LL_Init+0x74>)
 8019244:	2208      	movs	r2, #8
 8019246:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8019248:	4b10      	ldr	r3, [pc, #64]	; (801928c <USBH_LL_Init+0x74>)
 801924a:	2201      	movs	r2, #1
 801924c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801924e:	4b0f      	ldr	r3, [pc, #60]	; (801928c <USBH_LL_Init+0x74>)
 8019250:	2200      	movs	r2, #0
 8019252:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8019254:	4b0d      	ldr	r3, [pc, #52]	; (801928c <USBH_LL_Init+0x74>)
 8019256:	2202      	movs	r2, #2
 8019258:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801925a:	4b0c      	ldr	r3, [pc, #48]	; (801928c <USBH_LL_Init+0x74>)
 801925c:	2200      	movs	r2, #0
 801925e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8019260:	480a      	ldr	r0, [pc, #40]	; (801928c <USBH_LL_Init+0x74>)
 8019262:	f7ed f848 	bl	80062f6 <HAL_HCD_Init>
 8019266:	4603      	mov	r3, r0
 8019268:	2b00      	cmp	r3, #0
 801926a:	d001      	beq.n	8019270 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801926c:	f7e8 f91e 	bl	80014ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8019270:	4806      	ldr	r0, [pc, #24]	; (801928c <USBH_LL_Init+0x74>)
 8019272:	f7ed fc2c 	bl	8006ace <HAL_HCD_GetCurrentFrame>
 8019276:	4603      	mov	r3, r0
 8019278:	4619      	mov	r1, r3
 801927a:	6878      	ldr	r0, [r7, #4]
 801927c:	f7f4 fc64 	bl	800db48 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8019280:	2300      	movs	r3, #0
}
 8019282:	4618      	mov	r0, r3
 8019284:	3708      	adds	r7, #8
 8019286:	46bd      	mov	sp, r7
 8019288:	bd80      	pop	{r7, pc}
 801928a:	bf00      	nop
 801928c:	20018d00 	.word	0x20018d00

08019290 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8019290:	b580      	push	{r7, lr}
 8019292:	b084      	sub	sp, #16
 8019294:	af00      	add	r7, sp, #0
 8019296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019298:	2300      	movs	r3, #0
 801929a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801929c:	2300      	movs	r3, #0
 801929e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80192a6:	4618      	mov	r0, r3
 80192a8:	f7ed fb9b 	bl	80069e2 <HAL_HCD_Start>
 80192ac:	4603      	mov	r3, r0
 80192ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80192b0:	7bfb      	ldrb	r3, [r7, #15]
 80192b2:	4618      	mov	r0, r3
 80192b4:	f000 f98c 	bl	80195d0 <USBH_Get_USB_Status>
 80192b8:	4603      	mov	r3, r0
 80192ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80192bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80192be:	4618      	mov	r0, r3
 80192c0:	3710      	adds	r7, #16
 80192c2:	46bd      	mov	sp, r7
 80192c4:	bd80      	pop	{r7, pc}

080192c6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80192c6:	b580      	push	{r7, lr}
 80192c8:	b084      	sub	sp, #16
 80192ca:	af00      	add	r7, sp, #0
 80192cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192ce:	2300      	movs	r3, #0
 80192d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80192d2:	2300      	movs	r3, #0
 80192d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80192dc:	4618      	mov	r0, r3
 80192de:	f7ed fba3 	bl	8006a28 <HAL_HCD_Stop>
 80192e2:	4603      	mov	r3, r0
 80192e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80192e6:	7bfb      	ldrb	r3, [r7, #15]
 80192e8:	4618      	mov	r0, r3
 80192ea:	f000 f971 	bl	80195d0 <USBH_Get_USB_Status>
 80192ee:	4603      	mov	r3, r0
 80192f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80192f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80192f4:	4618      	mov	r0, r3
 80192f6:	3710      	adds	r7, #16
 80192f8:	46bd      	mov	sp, r7
 80192fa:	bd80      	pop	{r7, pc}

080192fc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80192fc:	b580      	push	{r7, lr}
 80192fe:	b084      	sub	sp, #16
 8019300:	af00      	add	r7, sp, #0
 8019302:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8019304:	2301      	movs	r3, #1
 8019306:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801930e:	4618      	mov	r0, r3
 8019310:	f7ed fbeb 	bl	8006aea <HAL_HCD_GetCurrentSpeed>
 8019314:	4603      	mov	r3, r0
 8019316:	2b02      	cmp	r3, #2
 8019318:	d00c      	beq.n	8019334 <USBH_LL_GetSpeed+0x38>
 801931a:	2b02      	cmp	r3, #2
 801931c:	d80d      	bhi.n	801933a <USBH_LL_GetSpeed+0x3e>
 801931e:	2b00      	cmp	r3, #0
 8019320:	d002      	beq.n	8019328 <USBH_LL_GetSpeed+0x2c>
 8019322:	2b01      	cmp	r3, #1
 8019324:	d003      	beq.n	801932e <USBH_LL_GetSpeed+0x32>
 8019326:	e008      	b.n	801933a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8019328:	2300      	movs	r3, #0
 801932a:	73fb      	strb	r3, [r7, #15]
    break;
 801932c:	e008      	b.n	8019340 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801932e:	2301      	movs	r3, #1
 8019330:	73fb      	strb	r3, [r7, #15]
    break;
 8019332:	e005      	b.n	8019340 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8019334:	2302      	movs	r3, #2
 8019336:	73fb      	strb	r3, [r7, #15]
    break;
 8019338:	e002      	b.n	8019340 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801933a:	2301      	movs	r3, #1
 801933c:	73fb      	strb	r3, [r7, #15]
    break;
 801933e:	bf00      	nop
  }
  return  speed;
 8019340:	7bfb      	ldrb	r3, [r7, #15]
}
 8019342:	4618      	mov	r0, r3
 8019344:	3710      	adds	r7, #16
 8019346:	46bd      	mov	sp, r7
 8019348:	bd80      	pop	{r7, pc}

0801934a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801934a:	b580      	push	{r7, lr}
 801934c:	b084      	sub	sp, #16
 801934e:	af00      	add	r7, sp, #0
 8019350:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019352:	2300      	movs	r3, #0
 8019354:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019356:	2300      	movs	r3, #0
 8019358:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019360:	4618      	mov	r0, r3
 8019362:	f7ed fb7e 	bl	8006a62 <HAL_HCD_ResetPort>
 8019366:	4603      	mov	r3, r0
 8019368:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801936a:	7bfb      	ldrb	r3, [r7, #15]
 801936c:	4618      	mov	r0, r3
 801936e:	f000 f92f 	bl	80195d0 <USBH_Get_USB_Status>
 8019372:	4603      	mov	r3, r0
 8019374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019376:	7bbb      	ldrb	r3, [r7, #14]
}
 8019378:	4618      	mov	r0, r3
 801937a:	3710      	adds	r7, #16
 801937c:	46bd      	mov	sp, r7
 801937e:	bd80      	pop	{r7, pc}

08019380 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019380:	b580      	push	{r7, lr}
 8019382:	b082      	sub	sp, #8
 8019384:	af00      	add	r7, sp, #0
 8019386:	6078      	str	r0, [r7, #4]
 8019388:	460b      	mov	r3, r1
 801938a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019392:	78fa      	ldrb	r2, [r7, #3]
 8019394:	4611      	mov	r1, r2
 8019396:	4618      	mov	r0, r3
 8019398:	f7ed fb85 	bl	8006aa6 <HAL_HCD_HC_GetXferCount>
 801939c:	4603      	mov	r3, r0
}
 801939e:	4618      	mov	r0, r3
 80193a0:	3708      	adds	r7, #8
 80193a2:	46bd      	mov	sp, r7
 80193a4:	bd80      	pop	{r7, pc}

080193a6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80193a6:	b590      	push	{r4, r7, lr}
 80193a8:	b089      	sub	sp, #36	; 0x24
 80193aa:	af04      	add	r7, sp, #16
 80193ac:	6078      	str	r0, [r7, #4]
 80193ae:	4608      	mov	r0, r1
 80193b0:	4611      	mov	r1, r2
 80193b2:	461a      	mov	r2, r3
 80193b4:	4603      	mov	r3, r0
 80193b6:	70fb      	strb	r3, [r7, #3]
 80193b8:	460b      	mov	r3, r1
 80193ba:	70bb      	strb	r3, [r7, #2]
 80193bc:	4613      	mov	r3, r2
 80193be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80193c0:	2300      	movs	r3, #0
 80193c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80193c4:	2300      	movs	r3, #0
 80193c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80193ce:	787c      	ldrb	r4, [r7, #1]
 80193d0:	78ba      	ldrb	r2, [r7, #2]
 80193d2:	78f9      	ldrb	r1, [r7, #3]
 80193d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80193d6:	9302      	str	r3, [sp, #8]
 80193d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80193dc:	9301      	str	r3, [sp, #4]
 80193de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80193e2:	9300      	str	r3, [sp, #0]
 80193e4:	4623      	mov	r3, r4
 80193e6:	f7ec ffe8 	bl	80063ba <HAL_HCD_HC_Init>
 80193ea:	4603      	mov	r3, r0
 80193ec:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80193ee:	7bfb      	ldrb	r3, [r7, #15]
 80193f0:	4618      	mov	r0, r3
 80193f2:	f000 f8ed 	bl	80195d0 <USBH_Get_USB_Status>
 80193f6:	4603      	mov	r3, r0
 80193f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80193fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80193fc:	4618      	mov	r0, r3
 80193fe:	3714      	adds	r7, #20
 8019400:	46bd      	mov	sp, r7
 8019402:	bd90      	pop	{r4, r7, pc}

08019404 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019404:	b580      	push	{r7, lr}
 8019406:	b084      	sub	sp, #16
 8019408:	af00      	add	r7, sp, #0
 801940a:	6078      	str	r0, [r7, #4]
 801940c:	460b      	mov	r3, r1
 801940e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019410:	2300      	movs	r3, #0
 8019412:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019414:	2300      	movs	r3, #0
 8019416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801941e:	78fa      	ldrb	r2, [r7, #3]
 8019420:	4611      	mov	r1, r2
 8019422:	4618      	mov	r0, r3
 8019424:	f7ed f858 	bl	80064d8 <HAL_HCD_HC_Halt>
 8019428:	4603      	mov	r3, r0
 801942a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801942c:	7bfb      	ldrb	r3, [r7, #15]
 801942e:	4618      	mov	r0, r3
 8019430:	f000 f8ce 	bl	80195d0 <USBH_Get_USB_Status>
 8019434:	4603      	mov	r3, r0
 8019436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019438:	7bbb      	ldrb	r3, [r7, #14]
}
 801943a:	4618      	mov	r0, r3
 801943c:	3710      	adds	r7, #16
 801943e:	46bd      	mov	sp, r7
 8019440:	bd80      	pop	{r7, pc}

08019442 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8019442:	b590      	push	{r4, r7, lr}
 8019444:	b089      	sub	sp, #36	; 0x24
 8019446:	af04      	add	r7, sp, #16
 8019448:	6078      	str	r0, [r7, #4]
 801944a:	4608      	mov	r0, r1
 801944c:	4611      	mov	r1, r2
 801944e:	461a      	mov	r2, r3
 8019450:	4603      	mov	r3, r0
 8019452:	70fb      	strb	r3, [r7, #3]
 8019454:	460b      	mov	r3, r1
 8019456:	70bb      	strb	r3, [r7, #2]
 8019458:	4613      	mov	r3, r2
 801945a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801945c:	2300      	movs	r3, #0
 801945e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019460:	2300      	movs	r3, #0
 8019462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801946a:	787c      	ldrb	r4, [r7, #1]
 801946c:	78ba      	ldrb	r2, [r7, #2]
 801946e:	78f9      	ldrb	r1, [r7, #3]
 8019470:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019474:	9303      	str	r3, [sp, #12]
 8019476:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019478:	9302      	str	r3, [sp, #8]
 801947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801947c:	9301      	str	r3, [sp, #4]
 801947e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019482:	9300      	str	r3, [sp, #0]
 8019484:	4623      	mov	r3, r4
 8019486:	f7ed f84b 	bl	8006520 <HAL_HCD_HC_SubmitRequest>
 801948a:	4603      	mov	r3, r0
 801948c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801948e:	7bfb      	ldrb	r3, [r7, #15]
 8019490:	4618      	mov	r0, r3
 8019492:	f000 f89d 	bl	80195d0 <USBH_Get_USB_Status>
 8019496:	4603      	mov	r3, r0
 8019498:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801949a:	7bbb      	ldrb	r3, [r7, #14]
}
 801949c:	4618      	mov	r0, r3
 801949e:	3714      	adds	r7, #20
 80194a0:	46bd      	mov	sp, r7
 80194a2:	bd90      	pop	{r4, r7, pc}

080194a4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80194a4:	b580      	push	{r7, lr}
 80194a6:	b082      	sub	sp, #8
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	6078      	str	r0, [r7, #4]
 80194ac:	460b      	mov	r3, r1
 80194ae:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80194b6:	78fa      	ldrb	r2, [r7, #3]
 80194b8:	4611      	mov	r1, r2
 80194ba:	4618      	mov	r0, r3
 80194bc:	f7ed fadf 	bl	8006a7e <HAL_HCD_HC_GetURBState>
 80194c0:	4603      	mov	r3, r0
}
 80194c2:	4618      	mov	r0, r3
 80194c4:	3708      	adds	r7, #8
 80194c6:	46bd      	mov	sp, r7
 80194c8:	bd80      	pop	{r7, pc}

080194ca <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80194ca:	b580      	push	{r7, lr}
 80194cc:	b082      	sub	sp, #8
 80194ce:	af00      	add	r7, sp, #0
 80194d0:	6078      	str	r0, [r7, #4]
 80194d2:	460b      	mov	r3, r1
 80194d4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80194dc:	2b01      	cmp	r3, #1
 80194de:	d103      	bne.n	80194e8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80194e0:	78fb      	ldrb	r3, [r7, #3]
 80194e2:	4618      	mov	r0, r3
 80194e4:	f000 f8a0 	bl	8019628 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80194e8:	20c8      	movs	r0, #200	; 0xc8
 80194ea:	f7e9 f96f 	bl	80027cc <HAL_Delay>
  return USBH_OK;
 80194ee:	2300      	movs	r3, #0
}
 80194f0:	4618      	mov	r0, r3
 80194f2:	3708      	adds	r7, #8
 80194f4:	46bd      	mov	sp, r7
 80194f6:	bd80      	pop	{r7, pc}

080194f8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80194f8:	b480      	push	{r7}
 80194fa:	b085      	sub	sp, #20
 80194fc:	af00      	add	r7, sp, #0
 80194fe:	6078      	str	r0, [r7, #4]
 8019500:	460b      	mov	r3, r1
 8019502:	70fb      	strb	r3, [r7, #3]
 8019504:	4613      	mov	r3, r2
 8019506:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801950e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8019510:	78fb      	ldrb	r3, [r7, #3]
 8019512:	68fa      	ldr	r2, [r7, #12]
 8019514:	212c      	movs	r1, #44	; 0x2c
 8019516:	fb01 f303 	mul.w	r3, r1, r3
 801951a:	4413      	add	r3, r2
 801951c:	333b      	adds	r3, #59	; 0x3b
 801951e:	781b      	ldrb	r3, [r3, #0]
 8019520:	2b00      	cmp	r3, #0
 8019522:	d009      	beq.n	8019538 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8019524:	78fb      	ldrb	r3, [r7, #3]
 8019526:	68fa      	ldr	r2, [r7, #12]
 8019528:	212c      	movs	r1, #44	; 0x2c
 801952a:	fb01 f303 	mul.w	r3, r1, r3
 801952e:	4413      	add	r3, r2
 8019530:	3354      	adds	r3, #84	; 0x54
 8019532:	78ba      	ldrb	r2, [r7, #2]
 8019534:	701a      	strb	r2, [r3, #0]
 8019536:	e008      	b.n	801954a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8019538:	78fb      	ldrb	r3, [r7, #3]
 801953a:	68fa      	ldr	r2, [r7, #12]
 801953c:	212c      	movs	r1, #44	; 0x2c
 801953e:	fb01 f303 	mul.w	r3, r1, r3
 8019542:	4413      	add	r3, r2
 8019544:	3355      	adds	r3, #85	; 0x55
 8019546:	78ba      	ldrb	r2, [r7, #2]
 8019548:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801954a:	2300      	movs	r3, #0
}
 801954c:	4618      	mov	r0, r3
 801954e:	3714      	adds	r7, #20
 8019550:	46bd      	mov	sp, r7
 8019552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019556:	4770      	bx	lr

08019558 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019558:	b480      	push	{r7}
 801955a:	b085      	sub	sp, #20
 801955c:	af00      	add	r7, sp, #0
 801955e:	6078      	str	r0, [r7, #4]
 8019560:	460b      	mov	r3, r1
 8019562:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8019564:	2300      	movs	r3, #0
 8019566:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801956e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8019570:	78fb      	ldrb	r3, [r7, #3]
 8019572:	68ba      	ldr	r2, [r7, #8]
 8019574:	212c      	movs	r1, #44	; 0x2c
 8019576:	fb01 f303 	mul.w	r3, r1, r3
 801957a:	4413      	add	r3, r2
 801957c:	333b      	adds	r3, #59	; 0x3b
 801957e:	781b      	ldrb	r3, [r3, #0]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d009      	beq.n	8019598 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8019584:	78fb      	ldrb	r3, [r7, #3]
 8019586:	68ba      	ldr	r2, [r7, #8]
 8019588:	212c      	movs	r1, #44	; 0x2c
 801958a:	fb01 f303 	mul.w	r3, r1, r3
 801958e:	4413      	add	r3, r2
 8019590:	3354      	adds	r3, #84	; 0x54
 8019592:	781b      	ldrb	r3, [r3, #0]
 8019594:	73fb      	strb	r3, [r7, #15]
 8019596:	e008      	b.n	80195aa <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8019598:	78fb      	ldrb	r3, [r7, #3]
 801959a:	68ba      	ldr	r2, [r7, #8]
 801959c:	212c      	movs	r1, #44	; 0x2c
 801959e:	fb01 f303 	mul.w	r3, r1, r3
 80195a2:	4413      	add	r3, r2
 80195a4:	3355      	adds	r3, #85	; 0x55
 80195a6:	781b      	ldrb	r3, [r3, #0]
 80195a8:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80195aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80195ac:	4618      	mov	r0, r3
 80195ae:	3714      	adds	r7, #20
 80195b0:	46bd      	mov	sp, r7
 80195b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b6:	4770      	bx	lr

080195b8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80195b8:	b580      	push	{r7, lr}
 80195ba:	b082      	sub	sp, #8
 80195bc:	af00      	add	r7, sp, #0
 80195be:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80195c0:	6878      	ldr	r0, [r7, #4]
 80195c2:	f7e9 f903 	bl	80027cc <HAL_Delay>
}
 80195c6:	bf00      	nop
 80195c8:	3708      	adds	r7, #8
 80195ca:	46bd      	mov	sp, r7
 80195cc:	bd80      	pop	{r7, pc}
	...

080195d0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80195d0:	b480      	push	{r7}
 80195d2:	b085      	sub	sp, #20
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	4603      	mov	r3, r0
 80195d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80195da:	2300      	movs	r3, #0
 80195dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80195de:	79fb      	ldrb	r3, [r7, #7]
 80195e0:	2b03      	cmp	r3, #3
 80195e2:	d817      	bhi.n	8019614 <USBH_Get_USB_Status+0x44>
 80195e4:	a201      	add	r2, pc, #4	; (adr r2, 80195ec <USBH_Get_USB_Status+0x1c>)
 80195e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195ea:	bf00      	nop
 80195ec:	080195fd 	.word	0x080195fd
 80195f0:	08019603 	.word	0x08019603
 80195f4:	08019609 	.word	0x08019609
 80195f8:	0801960f 	.word	0x0801960f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80195fc:	2300      	movs	r3, #0
 80195fe:	73fb      	strb	r3, [r7, #15]
    break;
 8019600:	e00b      	b.n	801961a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8019602:	2302      	movs	r3, #2
 8019604:	73fb      	strb	r3, [r7, #15]
    break;
 8019606:	e008      	b.n	801961a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8019608:	2301      	movs	r3, #1
 801960a:	73fb      	strb	r3, [r7, #15]
    break;
 801960c:	e005      	b.n	801961a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801960e:	2302      	movs	r3, #2
 8019610:	73fb      	strb	r3, [r7, #15]
    break;
 8019612:	e002      	b.n	801961a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8019614:	2302      	movs	r3, #2
 8019616:	73fb      	strb	r3, [r7, #15]
    break;
 8019618:	bf00      	nop
  }
  return usb_status;
 801961a:	7bfb      	ldrb	r3, [r7, #15]
}
 801961c:	4618      	mov	r0, r3
 801961e:	3714      	adds	r7, #20
 8019620:	46bd      	mov	sp, r7
 8019622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019626:	4770      	bx	lr

08019628 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8019628:	b580      	push	{r7, lr}
 801962a:	b084      	sub	sp, #16
 801962c:	af00      	add	r7, sp, #0
 801962e:	4603      	mov	r3, r0
 8019630:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8019632:	79fb      	ldrb	r3, [r7, #7]
 8019634:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8019636:	79fb      	ldrb	r3, [r7, #7]
 8019638:	2b00      	cmp	r3, #0
 801963a:	d102      	bne.n	8019642 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 801963c:	2300      	movs	r3, #0
 801963e:	73fb      	strb	r3, [r7, #15]
 8019640:	e001      	b.n	8019646 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8019642:	2301      	movs	r3, #1
 8019644:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,(GPIO_PinState)data);
 8019646:	7bfb      	ldrb	r3, [r7, #15]
 8019648:	461a      	mov	r2, r3
 801964a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801964e:	4803      	ldr	r0, [pc, #12]	; (801965c <MX_DriverVbusFS+0x34>)
 8019650:	f7ec fe38 	bl	80062c4 <HAL_GPIO_WritePin>
}
 8019654:	bf00      	nop
 8019656:	3710      	adds	r7, #16
 8019658:	46bd      	mov	sp, r7
 801965a:	bd80      	pop	{r7, pc}
 801965c:	40020400 	.word	0x40020400

08019660 <__libc_init_array>:
 8019660:	b570      	push	{r4, r5, r6, lr}
 8019662:	4d0d      	ldr	r5, [pc, #52]	; (8019698 <__libc_init_array+0x38>)
 8019664:	4c0d      	ldr	r4, [pc, #52]	; (801969c <__libc_init_array+0x3c>)
 8019666:	1b64      	subs	r4, r4, r5
 8019668:	10a4      	asrs	r4, r4, #2
 801966a:	2600      	movs	r6, #0
 801966c:	42a6      	cmp	r6, r4
 801966e:	d109      	bne.n	8019684 <__libc_init_array+0x24>
 8019670:	4d0b      	ldr	r5, [pc, #44]	; (80196a0 <__libc_init_array+0x40>)
 8019672:	4c0c      	ldr	r4, [pc, #48]	; (80196a4 <__libc_init_array+0x44>)
 8019674:	f002 fdbc 	bl	801c1f0 <_init>
 8019678:	1b64      	subs	r4, r4, r5
 801967a:	10a4      	asrs	r4, r4, #2
 801967c:	2600      	movs	r6, #0
 801967e:	42a6      	cmp	r6, r4
 8019680:	d105      	bne.n	801968e <__libc_init_array+0x2e>
 8019682:	bd70      	pop	{r4, r5, r6, pc}
 8019684:	f855 3b04 	ldr.w	r3, [r5], #4
 8019688:	4798      	blx	r3
 801968a:	3601      	adds	r6, #1
 801968c:	e7ee      	b.n	801966c <__libc_init_array+0xc>
 801968e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019692:	4798      	blx	r3
 8019694:	3601      	adds	r6, #1
 8019696:	e7f2      	b.n	801967e <__libc_init_array+0x1e>
 8019698:	0801f9b8 	.word	0x0801f9b8
 801969c:	0801f9b8 	.word	0x0801f9b8
 80196a0:	0801f9b8 	.word	0x0801f9b8
 80196a4:	0801f9bc 	.word	0x0801f9bc

080196a8 <malloc>:
 80196a8:	4b02      	ldr	r3, [pc, #8]	; (80196b4 <malloc+0xc>)
 80196aa:	4601      	mov	r1, r0
 80196ac:	6818      	ldr	r0, [r3, #0]
 80196ae:	f000 b87f 	b.w	80197b0 <_malloc_r>
 80196b2:	bf00      	nop
 80196b4:	200005b8 	.word	0x200005b8

080196b8 <free>:
 80196b8:	4b02      	ldr	r3, [pc, #8]	; (80196c4 <free+0xc>)
 80196ba:	4601      	mov	r1, r0
 80196bc:	6818      	ldr	r0, [r3, #0]
 80196be:	f000 b827 	b.w	8019710 <_free_r>
 80196c2:	bf00      	nop
 80196c4:	200005b8 	.word	0x200005b8

080196c8 <memcmp>:
 80196c8:	b530      	push	{r4, r5, lr}
 80196ca:	3901      	subs	r1, #1
 80196cc:	2400      	movs	r4, #0
 80196ce:	42a2      	cmp	r2, r4
 80196d0:	d101      	bne.n	80196d6 <memcmp+0xe>
 80196d2:	2000      	movs	r0, #0
 80196d4:	e005      	b.n	80196e2 <memcmp+0x1a>
 80196d6:	5d03      	ldrb	r3, [r0, r4]
 80196d8:	3401      	adds	r4, #1
 80196da:	5d0d      	ldrb	r5, [r1, r4]
 80196dc:	42ab      	cmp	r3, r5
 80196de:	d0f6      	beq.n	80196ce <memcmp+0x6>
 80196e0:	1b58      	subs	r0, r3, r5
 80196e2:	bd30      	pop	{r4, r5, pc}

080196e4 <memcpy>:
 80196e4:	440a      	add	r2, r1
 80196e6:	4291      	cmp	r1, r2
 80196e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80196ec:	d100      	bne.n	80196f0 <memcpy+0xc>
 80196ee:	4770      	bx	lr
 80196f0:	b510      	push	{r4, lr}
 80196f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80196f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80196fa:	4291      	cmp	r1, r2
 80196fc:	d1f9      	bne.n	80196f2 <memcpy+0xe>
 80196fe:	bd10      	pop	{r4, pc}

08019700 <memset>:
 8019700:	4402      	add	r2, r0
 8019702:	4603      	mov	r3, r0
 8019704:	4293      	cmp	r3, r2
 8019706:	d100      	bne.n	801970a <memset+0xa>
 8019708:	4770      	bx	lr
 801970a:	f803 1b01 	strb.w	r1, [r3], #1
 801970e:	e7f9      	b.n	8019704 <memset+0x4>

08019710 <_free_r>:
 8019710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019712:	2900      	cmp	r1, #0
 8019714:	d048      	beq.n	80197a8 <_free_r+0x98>
 8019716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801971a:	9001      	str	r0, [sp, #4]
 801971c:	2b00      	cmp	r3, #0
 801971e:	f1a1 0404 	sub.w	r4, r1, #4
 8019722:	bfb8      	it	lt
 8019724:	18e4      	addlt	r4, r4, r3
 8019726:	f001 ff11 	bl	801b54c <__malloc_lock>
 801972a:	4a20      	ldr	r2, [pc, #128]	; (80197ac <_free_r+0x9c>)
 801972c:	9801      	ldr	r0, [sp, #4]
 801972e:	6813      	ldr	r3, [r2, #0]
 8019730:	4615      	mov	r5, r2
 8019732:	b933      	cbnz	r3, 8019742 <_free_r+0x32>
 8019734:	6063      	str	r3, [r4, #4]
 8019736:	6014      	str	r4, [r2, #0]
 8019738:	b003      	add	sp, #12
 801973a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801973e:	f001 bf0b 	b.w	801b558 <__malloc_unlock>
 8019742:	42a3      	cmp	r3, r4
 8019744:	d90b      	bls.n	801975e <_free_r+0x4e>
 8019746:	6821      	ldr	r1, [r4, #0]
 8019748:	1862      	adds	r2, r4, r1
 801974a:	4293      	cmp	r3, r2
 801974c:	bf04      	itt	eq
 801974e:	681a      	ldreq	r2, [r3, #0]
 8019750:	685b      	ldreq	r3, [r3, #4]
 8019752:	6063      	str	r3, [r4, #4]
 8019754:	bf04      	itt	eq
 8019756:	1852      	addeq	r2, r2, r1
 8019758:	6022      	streq	r2, [r4, #0]
 801975a:	602c      	str	r4, [r5, #0]
 801975c:	e7ec      	b.n	8019738 <_free_r+0x28>
 801975e:	461a      	mov	r2, r3
 8019760:	685b      	ldr	r3, [r3, #4]
 8019762:	b10b      	cbz	r3, 8019768 <_free_r+0x58>
 8019764:	42a3      	cmp	r3, r4
 8019766:	d9fa      	bls.n	801975e <_free_r+0x4e>
 8019768:	6811      	ldr	r1, [r2, #0]
 801976a:	1855      	adds	r5, r2, r1
 801976c:	42a5      	cmp	r5, r4
 801976e:	d10b      	bne.n	8019788 <_free_r+0x78>
 8019770:	6824      	ldr	r4, [r4, #0]
 8019772:	4421      	add	r1, r4
 8019774:	1854      	adds	r4, r2, r1
 8019776:	42a3      	cmp	r3, r4
 8019778:	6011      	str	r1, [r2, #0]
 801977a:	d1dd      	bne.n	8019738 <_free_r+0x28>
 801977c:	681c      	ldr	r4, [r3, #0]
 801977e:	685b      	ldr	r3, [r3, #4]
 8019780:	6053      	str	r3, [r2, #4]
 8019782:	4421      	add	r1, r4
 8019784:	6011      	str	r1, [r2, #0]
 8019786:	e7d7      	b.n	8019738 <_free_r+0x28>
 8019788:	d902      	bls.n	8019790 <_free_r+0x80>
 801978a:	230c      	movs	r3, #12
 801978c:	6003      	str	r3, [r0, #0]
 801978e:	e7d3      	b.n	8019738 <_free_r+0x28>
 8019790:	6825      	ldr	r5, [r4, #0]
 8019792:	1961      	adds	r1, r4, r5
 8019794:	428b      	cmp	r3, r1
 8019796:	bf04      	itt	eq
 8019798:	6819      	ldreq	r1, [r3, #0]
 801979a:	685b      	ldreq	r3, [r3, #4]
 801979c:	6063      	str	r3, [r4, #4]
 801979e:	bf04      	itt	eq
 80197a0:	1949      	addeq	r1, r1, r5
 80197a2:	6021      	streq	r1, [r4, #0]
 80197a4:	6054      	str	r4, [r2, #4]
 80197a6:	e7c7      	b.n	8019738 <_free_r+0x28>
 80197a8:	b003      	add	sp, #12
 80197aa:	bd30      	pop	{r4, r5, pc}
 80197ac:	20000954 	.word	0x20000954

080197b0 <_malloc_r>:
 80197b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197b2:	1ccd      	adds	r5, r1, #3
 80197b4:	f025 0503 	bic.w	r5, r5, #3
 80197b8:	3508      	adds	r5, #8
 80197ba:	2d0c      	cmp	r5, #12
 80197bc:	bf38      	it	cc
 80197be:	250c      	movcc	r5, #12
 80197c0:	2d00      	cmp	r5, #0
 80197c2:	4606      	mov	r6, r0
 80197c4:	db01      	blt.n	80197ca <_malloc_r+0x1a>
 80197c6:	42a9      	cmp	r1, r5
 80197c8:	d903      	bls.n	80197d2 <_malloc_r+0x22>
 80197ca:	230c      	movs	r3, #12
 80197cc:	6033      	str	r3, [r6, #0]
 80197ce:	2000      	movs	r0, #0
 80197d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197d2:	f001 febb 	bl	801b54c <__malloc_lock>
 80197d6:	4921      	ldr	r1, [pc, #132]	; (801985c <_malloc_r+0xac>)
 80197d8:	680a      	ldr	r2, [r1, #0]
 80197da:	4614      	mov	r4, r2
 80197dc:	b99c      	cbnz	r4, 8019806 <_malloc_r+0x56>
 80197de:	4f20      	ldr	r7, [pc, #128]	; (8019860 <_malloc_r+0xb0>)
 80197e0:	683b      	ldr	r3, [r7, #0]
 80197e2:	b923      	cbnz	r3, 80197ee <_malloc_r+0x3e>
 80197e4:	4621      	mov	r1, r4
 80197e6:	4630      	mov	r0, r6
 80197e8:	f000 fd14 	bl	801a214 <_sbrk_r>
 80197ec:	6038      	str	r0, [r7, #0]
 80197ee:	4629      	mov	r1, r5
 80197f0:	4630      	mov	r0, r6
 80197f2:	f000 fd0f 	bl	801a214 <_sbrk_r>
 80197f6:	1c43      	adds	r3, r0, #1
 80197f8:	d123      	bne.n	8019842 <_malloc_r+0x92>
 80197fa:	230c      	movs	r3, #12
 80197fc:	6033      	str	r3, [r6, #0]
 80197fe:	4630      	mov	r0, r6
 8019800:	f001 feaa 	bl	801b558 <__malloc_unlock>
 8019804:	e7e3      	b.n	80197ce <_malloc_r+0x1e>
 8019806:	6823      	ldr	r3, [r4, #0]
 8019808:	1b5b      	subs	r3, r3, r5
 801980a:	d417      	bmi.n	801983c <_malloc_r+0x8c>
 801980c:	2b0b      	cmp	r3, #11
 801980e:	d903      	bls.n	8019818 <_malloc_r+0x68>
 8019810:	6023      	str	r3, [r4, #0]
 8019812:	441c      	add	r4, r3
 8019814:	6025      	str	r5, [r4, #0]
 8019816:	e004      	b.n	8019822 <_malloc_r+0x72>
 8019818:	6863      	ldr	r3, [r4, #4]
 801981a:	42a2      	cmp	r2, r4
 801981c:	bf0c      	ite	eq
 801981e:	600b      	streq	r3, [r1, #0]
 8019820:	6053      	strne	r3, [r2, #4]
 8019822:	4630      	mov	r0, r6
 8019824:	f001 fe98 	bl	801b558 <__malloc_unlock>
 8019828:	f104 000b 	add.w	r0, r4, #11
 801982c:	1d23      	adds	r3, r4, #4
 801982e:	f020 0007 	bic.w	r0, r0, #7
 8019832:	1ac2      	subs	r2, r0, r3
 8019834:	d0cc      	beq.n	80197d0 <_malloc_r+0x20>
 8019836:	1a1b      	subs	r3, r3, r0
 8019838:	50a3      	str	r3, [r4, r2]
 801983a:	e7c9      	b.n	80197d0 <_malloc_r+0x20>
 801983c:	4622      	mov	r2, r4
 801983e:	6864      	ldr	r4, [r4, #4]
 8019840:	e7cc      	b.n	80197dc <_malloc_r+0x2c>
 8019842:	1cc4      	adds	r4, r0, #3
 8019844:	f024 0403 	bic.w	r4, r4, #3
 8019848:	42a0      	cmp	r0, r4
 801984a:	d0e3      	beq.n	8019814 <_malloc_r+0x64>
 801984c:	1a21      	subs	r1, r4, r0
 801984e:	4630      	mov	r0, r6
 8019850:	f000 fce0 	bl	801a214 <_sbrk_r>
 8019854:	3001      	adds	r0, #1
 8019856:	d1dd      	bne.n	8019814 <_malloc_r+0x64>
 8019858:	e7cf      	b.n	80197fa <_malloc_r+0x4a>
 801985a:	bf00      	nop
 801985c:	20000954 	.word	0x20000954
 8019860:	20000958 	.word	0x20000958

08019864 <__cvt>:
 8019864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019868:	ec55 4b10 	vmov	r4, r5, d0
 801986c:	2d00      	cmp	r5, #0
 801986e:	460e      	mov	r6, r1
 8019870:	4619      	mov	r1, r3
 8019872:	462b      	mov	r3, r5
 8019874:	bfbb      	ittet	lt
 8019876:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801987a:	461d      	movlt	r5, r3
 801987c:	2300      	movge	r3, #0
 801987e:	232d      	movlt	r3, #45	; 0x2d
 8019880:	700b      	strb	r3, [r1, #0]
 8019882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019884:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019888:	4691      	mov	r9, r2
 801988a:	f023 0820 	bic.w	r8, r3, #32
 801988e:	bfbc      	itt	lt
 8019890:	4622      	movlt	r2, r4
 8019892:	4614      	movlt	r4, r2
 8019894:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019898:	d005      	beq.n	80198a6 <__cvt+0x42>
 801989a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801989e:	d100      	bne.n	80198a2 <__cvt+0x3e>
 80198a0:	3601      	adds	r6, #1
 80198a2:	2102      	movs	r1, #2
 80198a4:	e000      	b.n	80198a8 <__cvt+0x44>
 80198a6:	2103      	movs	r1, #3
 80198a8:	ab03      	add	r3, sp, #12
 80198aa:	9301      	str	r3, [sp, #4]
 80198ac:	ab02      	add	r3, sp, #8
 80198ae:	9300      	str	r3, [sp, #0]
 80198b0:	ec45 4b10 	vmov	d0, r4, r5
 80198b4:	4653      	mov	r3, sl
 80198b6:	4632      	mov	r2, r6
 80198b8:	f000 fe26 	bl	801a508 <_dtoa_r>
 80198bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80198c0:	4607      	mov	r7, r0
 80198c2:	d102      	bne.n	80198ca <__cvt+0x66>
 80198c4:	f019 0f01 	tst.w	r9, #1
 80198c8:	d022      	beq.n	8019910 <__cvt+0xac>
 80198ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80198ce:	eb07 0906 	add.w	r9, r7, r6
 80198d2:	d110      	bne.n	80198f6 <__cvt+0x92>
 80198d4:	783b      	ldrb	r3, [r7, #0]
 80198d6:	2b30      	cmp	r3, #48	; 0x30
 80198d8:	d10a      	bne.n	80198f0 <__cvt+0x8c>
 80198da:	2200      	movs	r2, #0
 80198dc:	2300      	movs	r3, #0
 80198de:	4620      	mov	r0, r4
 80198e0:	4629      	mov	r1, r5
 80198e2:	f7e7 f8f1 	bl	8000ac8 <__aeabi_dcmpeq>
 80198e6:	b918      	cbnz	r0, 80198f0 <__cvt+0x8c>
 80198e8:	f1c6 0601 	rsb	r6, r6, #1
 80198ec:	f8ca 6000 	str.w	r6, [sl]
 80198f0:	f8da 3000 	ldr.w	r3, [sl]
 80198f4:	4499      	add	r9, r3
 80198f6:	2200      	movs	r2, #0
 80198f8:	2300      	movs	r3, #0
 80198fa:	4620      	mov	r0, r4
 80198fc:	4629      	mov	r1, r5
 80198fe:	f7e7 f8e3 	bl	8000ac8 <__aeabi_dcmpeq>
 8019902:	b108      	cbz	r0, 8019908 <__cvt+0xa4>
 8019904:	f8cd 900c 	str.w	r9, [sp, #12]
 8019908:	2230      	movs	r2, #48	; 0x30
 801990a:	9b03      	ldr	r3, [sp, #12]
 801990c:	454b      	cmp	r3, r9
 801990e:	d307      	bcc.n	8019920 <__cvt+0xbc>
 8019910:	9b03      	ldr	r3, [sp, #12]
 8019912:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019914:	1bdb      	subs	r3, r3, r7
 8019916:	4638      	mov	r0, r7
 8019918:	6013      	str	r3, [r2, #0]
 801991a:	b004      	add	sp, #16
 801991c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019920:	1c59      	adds	r1, r3, #1
 8019922:	9103      	str	r1, [sp, #12]
 8019924:	701a      	strb	r2, [r3, #0]
 8019926:	e7f0      	b.n	801990a <__cvt+0xa6>

08019928 <__exponent>:
 8019928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801992a:	4603      	mov	r3, r0
 801992c:	2900      	cmp	r1, #0
 801992e:	bfb8      	it	lt
 8019930:	4249      	neglt	r1, r1
 8019932:	f803 2b02 	strb.w	r2, [r3], #2
 8019936:	bfb4      	ite	lt
 8019938:	222d      	movlt	r2, #45	; 0x2d
 801993a:	222b      	movge	r2, #43	; 0x2b
 801993c:	2909      	cmp	r1, #9
 801993e:	7042      	strb	r2, [r0, #1]
 8019940:	dd2a      	ble.n	8019998 <__exponent+0x70>
 8019942:	f10d 0407 	add.w	r4, sp, #7
 8019946:	46a4      	mov	ip, r4
 8019948:	270a      	movs	r7, #10
 801994a:	46a6      	mov	lr, r4
 801994c:	460a      	mov	r2, r1
 801994e:	fb91 f6f7 	sdiv	r6, r1, r7
 8019952:	fb07 1516 	mls	r5, r7, r6, r1
 8019956:	3530      	adds	r5, #48	; 0x30
 8019958:	2a63      	cmp	r2, #99	; 0x63
 801995a:	f104 34ff 	add.w	r4, r4, #4294967295
 801995e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019962:	4631      	mov	r1, r6
 8019964:	dcf1      	bgt.n	801994a <__exponent+0x22>
 8019966:	3130      	adds	r1, #48	; 0x30
 8019968:	f1ae 0502 	sub.w	r5, lr, #2
 801996c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019970:	1c44      	adds	r4, r0, #1
 8019972:	4629      	mov	r1, r5
 8019974:	4561      	cmp	r1, ip
 8019976:	d30a      	bcc.n	801998e <__exponent+0x66>
 8019978:	f10d 0209 	add.w	r2, sp, #9
 801997c:	eba2 020e 	sub.w	r2, r2, lr
 8019980:	4565      	cmp	r5, ip
 8019982:	bf88      	it	hi
 8019984:	2200      	movhi	r2, #0
 8019986:	4413      	add	r3, r2
 8019988:	1a18      	subs	r0, r3, r0
 801998a:	b003      	add	sp, #12
 801998c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801998e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019992:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019996:	e7ed      	b.n	8019974 <__exponent+0x4c>
 8019998:	2330      	movs	r3, #48	; 0x30
 801999a:	3130      	adds	r1, #48	; 0x30
 801999c:	7083      	strb	r3, [r0, #2]
 801999e:	70c1      	strb	r1, [r0, #3]
 80199a0:	1d03      	adds	r3, r0, #4
 80199a2:	e7f1      	b.n	8019988 <__exponent+0x60>

080199a4 <_printf_float>:
 80199a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199a8:	ed2d 8b02 	vpush	{d8}
 80199ac:	b08d      	sub	sp, #52	; 0x34
 80199ae:	460c      	mov	r4, r1
 80199b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80199b4:	4616      	mov	r6, r2
 80199b6:	461f      	mov	r7, r3
 80199b8:	4605      	mov	r5, r0
 80199ba:	f001 fd5b 	bl	801b474 <_localeconv_r>
 80199be:	f8d0 a000 	ldr.w	sl, [r0]
 80199c2:	4650      	mov	r0, sl
 80199c4:	f7e6 fc04 	bl	80001d0 <strlen>
 80199c8:	2300      	movs	r3, #0
 80199ca:	930a      	str	r3, [sp, #40]	; 0x28
 80199cc:	6823      	ldr	r3, [r4, #0]
 80199ce:	9305      	str	r3, [sp, #20]
 80199d0:	f8d8 3000 	ldr.w	r3, [r8]
 80199d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80199d8:	3307      	adds	r3, #7
 80199da:	f023 0307 	bic.w	r3, r3, #7
 80199de:	f103 0208 	add.w	r2, r3, #8
 80199e2:	f8c8 2000 	str.w	r2, [r8]
 80199e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80199ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80199f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80199f6:	9307      	str	r3, [sp, #28]
 80199f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80199fc:	ee08 0a10 	vmov	s16, r0
 8019a00:	4b9f      	ldr	r3, [pc, #636]	; (8019c80 <_printf_float+0x2dc>)
 8019a02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019a06:	f04f 32ff 	mov.w	r2, #4294967295
 8019a0a:	f7e7 f88f 	bl	8000b2c <__aeabi_dcmpun>
 8019a0e:	bb88      	cbnz	r0, 8019a74 <_printf_float+0xd0>
 8019a10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019a14:	4b9a      	ldr	r3, [pc, #616]	; (8019c80 <_printf_float+0x2dc>)
 8019a16:	f04f 32ff 	mov.w	r2, #4294967295
 8019a1a:	f7e7 f869 	bl	8000af0 <__aeabi_dcmple>
 8019a1e:	bb48      	cbnz	r0, 8019a74 <_printf_float+0xd0>
 8019a20:	2200      	movs	r2, #0
 8019a22:	2300      	movs	r3, #0
 8019a24:	4640      	mov	r0, r8
 8019a26:	4649      	mov	r1, r9
 8019a28:	f7e7 f858 	bl	8000adc <__aeabi_dcmplt>
 8019a2c:	b110      	cbz	r0, 8019a34 <_printf_float+0x90>
 8019a2e:	232d      	movs	r3, #45	; 0x2d
 8019a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a34:	4b93      	ldr	r3, [pc, #588]	; (8019c84 <_printf_float+0x2e0>)
 8019a36:	4894      	ldr	r0, [pc, #592]	; (8019c88 <_printf_float+0x2e4>)
 8019a38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019a3c:	bf94      	ite	ls
 8019a3e:	4698      	movls	r8, r3
 8019a40:	4680      	movhi	r8, r0
 8019a42:	2303      	movs	r3, #3
 8019a44:	6123      	str	r3, [r4, #16]
 8019a46:	9b05      	ldr	r3, [sp, #20]
 8019a48:	f023 0204 	bic.w	r2, r3, #4
 8019a4c:	6022      	str	r2, [r4, #0]
 8019a4e:	f04f 0900 	mov.w	r9, #0
 8019a52:	9700      	str	r7, [sp, #0]
 8019a54:	4633      	mov	r3, r6
 8019a56:	aa0b      	add	r2, sp, #44	; 0x2c
 8019a58:	4621      	mov	r1, r4
 8019a5a:	4628      	mov	r0, r5
 8019a5c:	f000 f9d8 	bl	8019e10 <_printf_common>
 8019a60:	3001      	adds	r0, #1
 8019a62:	f040 8090 	bne.w	8019b86 <_printf_float+0x1e2>
 8019a66:	f04f 30ff 	mov.w	r0, #4294967295
 8019a6a:	b00d      	add	sp, #52	; 0x34
 8019a6c:	ecbd 8b02 	vpop	{d8}
 8019a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a74:	4642      	mov	r2, r8
 8019a76:	464b      	mov	r3, r9
 8019a78:	4640      	mov	r0, r8
 8019a7a:	4649      	mov	r1, r9
 8019a7c:	f7e7 f856 	bl	8000b2c <__aeabi_dcmpun>
 8019a80:	b140      	cbz	r0, 8019a94 <_printf_float+0xf0>
 8019a82:	464b      	mov	r3, r9
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	bfbc      	itt	lt
 8019a88:	232d      	movlt	r3, #45	; 0x2d
 8019a8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019a8e:	487f      	ldr	r0, [pc, #508]	; (8019c8c <_printf_float+0x2e8>)
 8019a90:	4b7f      	ldr	r3, [pc, #508]	; (8019c90 <_printf_float+0x2ec>)
 8019a92:	e7d1      	b.n	8019a38 <_printf_float+0x94>
 8019a94:	6863      	ldr	r3, [r4, #4]
 8019a96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019a9a:	9206      	str	r2, [sp, #24]
 8019a9c:	1c5a      	adds	r2, r3, #1
 8019a9e:	d13f      	bne.n	8019b20 <_printf_float+0x17c>
 8019aa0:	2306      	movs	r3, #6
 8019aa2:	6063      	str	r3, [r4, #4]
 8019aa4:	9b05      	ldr	r3, [sp, #20]
 8019aa6:	6861      	ldr	r1, [r4, #4]
 8019aa8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019aac:	2300      	movs	r3, #0
 8019aae:	9303      	str	r3, [sp, #12]
 8019ab0:	ab0a      	add	r3, sp, #40	; 0x28
 8019ab2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019ab6:	ab09      	add	r3, sp, #36	; 0x24
 8019ab8:	ec49 8b10 	vmov	d0, r8, r9
 8019abc:	9300      	str	r3, [sp, #0]
 8019abe:	6022      	str	r2, [r4, #0]
 8019ac0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019ac4:	4628      	mov	r0, r5
 8019ac6:	f7ff fecd 	bl	8019864 <__cvt>
 8019aca:	9b06      	ldr	r3, [sp, #24]
 8019acc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019ace:	2b47      	cmp	r3, #71	; 0x47
 8019ad0:	4680      	mov	r8, r0
 8019ad2:	d108      	bne.n	8019ae6 <_printf_float+0x142>
 8019ad4:	1cc8      	adds	r0, r1, #3
 8019ad6:	db02      	blt.n	8019ade <_printf_float+0x13a>
 8019ad8:	6863      	ldr	r3, [r4, #4]
 8019ada:	4299      	cmp	r1, r3
 8019adc:	dd41      	ble.n	8019b62 <_printf_float+0x1be>
 8019ade:	f1ab 0b02 	sub.w	fp, fp, #2
 8019ae2:	fa5f fb8b 	uxtb.w	fp, fp
 8019ae6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019aea:	d820      	bhi.n	8019b2e <_printf_float+0x18a>
 8019aec:	3901      	subs	r1, #1
 8019aee:	465a      	mov	r2, fp
 8019af0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019af4:	9109      	str	r1, [sp, #36]	; 0x24
 8019af6:	f7ff ff17 	bl	8019928 <__exponent>
 8019afa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019afc:	1813      	adds	r3, r2, r0
 8019afe:	2a01      	cmp	r2, #1
 8019b00:	4681      	mov	r9, r0
 8019b02:	6123      	str	r3, [r4, #16]
 8019b04:	dc02      	bgt.n	8019b0c <_printf_float+0x168>
 8019b06:	6822      	ldr	r2, [r4, #0]
 8019b08:	07d2      	lsls	r2, r2, #31
 8019b0a:	d501      	bpl.n	8019b10 <_printf_float+0x16c>
 8019b0c:	3301      	adds	r3, #1
 8019b0e:	6123      	str	r3, [r4, #16]
 8019b10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d09c      	beq.n	8019a52 <_printf_float+0xae>
 8019b18:	232d      	movs	r3, #45	; 0x2d
 8019b1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b1e:	e798      	b.n	8019a52 <_printf_float+0xae>
 8019b20:	9a06      	ldr	r2, [sp, #24]
 8019b22:	2a47      	cmp	r2, #71	; 0x47
 8019b24:	d1be      	bne.n	8019aa4 <_printf_float+0x100>
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d1bc      	bne.n	8019aa4 <_printf_float+0x100>
 8019b2a:	2301      	movs	r3, #1
 8019b2c:	e7b9      	b.n	8019aa2 <_printf_float+0xfe>
 8019b2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019b32:	d118      	bne.n	8019b66 <_printf_float+0x1c2>
 8019b34:	2900      	cmp	r1, #0
 8019b36:	6863      	ldr	r3, [r4, #4]
 8019b38:	dd0b      	ble.n	8019b52 <_printf_float+0x1ae>
 8019b3a:	6121      	str	r1, [r4, #16]
 8019b3c:	b913      	cbnz	r3, 8019b44 <_printf_float+0x1a0>
 8019b3e:	6822      	ldr	r2, [r4, #0]
 8019b40:	07d0      	lsls	r0, r2, #31
 8019b42:	d502      	bpl.n	8019b4a <_printf_float+0x1a6>
 8019b44:	3301      	adds	r3, #1
 8019b46:	440b      	add	r3, r1
 8019b48:	6123      	str	r3, [r4, #16]
 8019b4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8019b4c:	f04f 0900 	mov.w	r9, #0
 8019b50:	e7de      	b.n	8019b10 <_printf_float+0x16c>
 8019b52:	b913      	cbnz	r3, 8019b5a <_printf_float+0x1b6>
 8019b54:	6822      	ldr	r2, [r4, #0]
 8019b56:	07d2      	lsls	r2, r2, #31
 8019b58:	d501      	bpl.n	8019b5e <_printf_float+0x1ba>
 8019b5a:	3302      	adds	r3, #2
 8019b5c:	e7f4      	b.n	8019b48 <_printf_float+0x1a4>
 8019b5e:	2301      	movs	r3, #1
 8019b60:	e7f2      	b.n	8019b48 <_printf_float+0x1a4>
 8019b62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019b68:	4299      	cmp	r1, r3
 8019b6a:	db05      	blt.n	8019b78 <_printf_float+0x1d4>
 8019b6c:	6823      	ldr	r3, [r4, #0]
 8019b6e:	6121      	str	r1, [r4, #16]
 8019b70:	07d8      	lsls	r0, r3, #31
 8019b72:	d5ea      	bpl.n	8019b4a <_printf_float+0x1a6>
 8019b74:	1c4b      	adds	r3, r1, #1
 8019b76:	e7e7      	b.n	8019b48 <_printf_float+0x1a4>
 8019b78:	2900      	cmp	r1, #0
 8019b7a:	bfd4      	ite	le
 8019b7c:	f1c1 0202 	rsble	r2, r1, #2
 8019b80:	2201      	movgt	r2, #1
 8019b82:	4413      	add	r3, r2
 8019b84:	e7e0      	b.n	8019b48 <_printf_float+0x1a4>
 8019b86:	6823      	ldr	r3, [r4, #0]
 8019b88:	055a      	lsls	r2, r3, #21
 8019b8a:	d407      	bmi.n	8019b9c <_printf_float+0x1f8>
 8019b8c:	6923      	ldr	r3, [r4, #16]
 8019b8e:	4642      	mov	r2, r8
 8019b90:	4631      	mov	r1, r6
 8019b92:	4628      	mov	r0, r5
 8019b94:	47b8      	blx	r7
 8019b96:	3001      	adds	r0, #1
 8019b98:	d12c      	bne.n	8019bf4 <_printf_float+0x250>
 8019b9a:	e764      	b.n	8019a66 <_printf_float+0xc2>
 8019b9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019ba0:	f240 80e0 	bls.w	8019d64 <_printf_float+0x3c0>
 8019ba4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019ba8:	2200      	movs	r2, #0
 8019baa:	2300      	movs	r3, #0
 8019bac:	f7e6 ff8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8019bb0:	2800      	cmp	r0, #0
 8019bb2:	d034      	beq.n	8019c1e <_printf_float+0x27a>
 8019bb4:	4a37      	ldr	r2, [pc, #220]	; (8019c94 <_printf_float+0x2f0>)
 8019bb6:	2301      	movs	r3, #1
 8019bb8:	4631      	mov	r1, r6
 8019bba:	4628      	mov	r0, r5
 8019bbc:	47b8      	blx	r7
 8019bbe:	3001      	adds	r0, #1
 8019bc0:	f43f af51 	beq.w	8019a66 <_printf_float+0xc2>
 8019bc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019bc8:	429a      	cmp	r2, r3
 8019bca:	db02      	blt.n	8019bd2 <_printf_float+0x22e>
 8019bcc:	6823      	ldr	r3, [r4, #0]
 8019bce:	07d8      	lsls	r0, r3, #31
 8019bd0:	d510      	bpl.n	8019bf4 <_printf_float+0x250>
 8019bd2:	ee18 3a10 	vmov	r3, s16
 8019bd6:	4652      	mov	r2, sl
 8019bd8:	4631      	mov	r1, r6
 8019bda:	4628      	mov	r0, r5
 8019bdc:	47b8      	blx	r7
 8019bde:	3001      	adds	r0, #1
 8019be0:	f43f af41 	beq.w	8019a66 <_printf_float+0xc2>
 8019be4:	f04f 0800 	mov.w	r8, #0
 8019be8:	f104 091a 	add.w	r9, r4, #26
 8019bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019bee:	3b01      	subs	r3, #1
 8019bf0:	4543      	cmp	r3, r8
 8019bf2:	dc09      	bgt.n	8019c08 <_printf_float+0x264>
 8019bf4:	6823      	ldr	r3, [r4, #0]
 8019bf6:	079b      	lsls	r3, r3, #30
 8019bf8:	f100 8105 	bmi.w	8019e06 <_printf_float+0x462>
 8019bfc:	68e0      	ldr	r0, [r4, #12]
 8019bfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019c00:	4298      	cmp	r0, r3
 8019c02:	bfb8      	it	lt
 8019c04:	4618      	movlt	r0, r3
 8019c06:	e730      	b.n	8019a6a <_printf_float+0xc6>
 8019c08:	2301      	movs	r3, #1
 8019c0a:	464a      	mov	r2, r9
 8019c0c:	4631      	mov	r1, r6
 8019c0e:	4628      	mov	r0, r5
 8019c10:	47b8      	blx	r7
 8019c12:	3001      	adds	r0, #1
 8019c14:	f43f af27 	beq.w	8019a66 <_printf_float+0xc2>
 8019c18:	f108 0801 	add.w	r8, r8, #1
 8019c1c:	e7e6      	b.n	8019bec <_printf_float+0x248>
 8019c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	dc39      	bgt.n	8019c98 <_printf_float+0x2f4>
 8019c24:	4a1b      	ldr	r2, [pc, #108]	; (8019c94 <_printf_float+0x2f0>)
 8019c26:	2301      	movs	r3, #1
 8019c28:	4631      	mov	r1, r6
 8019c2a:	4628      	mov	r0, r5
 8019c2c:	47b8      	blx	r7
 8019c2e:	3001      	adds	r0, #1
 8019c30:	f43f af19 	beq.w	8019a66 <_printf_float+0xc2>
 8019c34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019c38:	4313      	orrs	r3, r2
 8019c3a:	d102      	bne.n	8019c42 <_printf_float+0x29e>
 8019c3c:	6823      	ldr	r3, [r4, #0]
 8019c3e:	07d9      	lsls	r1, r3, #31
 8019c40:	d5d8      	bpl.n	8019bf4 <_printf_float+0x250>
 8019c42:	ee18 3a10 	vmov	r3, s16
 8019c46:	4652      	mov	r2, sl
 8019c48:	4631      	mov	r1, r6
 8019c4a:	4628      	mov	r0, r5
 8019c4c:	47b8      	blx	r7
 8019c4e:	3001      	adds	r0, #1
 8019c50:	f43f af09 	beq.w	8019a66 <_printf_float+0xc2>
 8019c54:	f04f 0900 	mov.w	r9, #0
 8019c58:	f104 0a1a 	add.w	sl, r4, #26
 8019c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c5e:	425b      	negs	r3, r3
 8019c60:	454b      	cmp	r3, r9
 8019c62:	dc01      	bgt.n	8019c68 <_printf_float+0x2c4>
 8019c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c66:	e792      	b.n	8019b8e <_printf_float+0x1ea>
 8019c68:	2301      	movs	r3, #1
 8019c6a:	4652      	mov	r2, sl
 8019c6c:	4631      	mov	r1, r6
 8019c6e:	4628      	mov	r0, r5
 8019c70:	47b8      	blx	r7
 8019c72:	3001      	adds	r0, #1
 8019c74:	f43f aef7 	beq.w	8019a66 <_printf_float+0xc2>
 8019c78:	f109 0901 	add.w	r9, r9, #1
 8019c7c:	e7ee      	b.n	8019c5c <_printf_float+0x2b8>
 8019c7e:	bf00      	nop
 8019c80:	7fefffff 	.word	0x7fefffff
 8019c84:	0801f674 	.word	0x0801f674
 8019c88:	0801f678 	.word	0x0801f678
 8019c8c:	0801f680 	.word	0x0801f680
 8019c90:	0801f67c 	.word	0x0801f67c
 8019c94:	0801f684 	.word	0x0801f684
 8019c98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019c9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019c9c:	429a      	cmp	r2, r3
 8019c9e:	bfa8      	it	ge
 8019ca0:	461a      	movge	r2, r3
 8019ca2:	2a00      	cmp	r2, #0
 8019ca4:	4691      	mov	r9, r2
 8019ca6:	dc37      	bgt.n	8019d18 <_printf_float+0x374>
 8019ca8:	f04f 0b00 	mov.w	fp, #0
 8019cac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019cb0:	f104 021a 	add.w	r2, r4, #26
 8019cb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019cb6:	9305      	str	r3, [sp, #20]
 8019cb8:	eba3 0309 	sub.w	r3, r3, r9
 8019cbc:	455b      	cmp	r3, fp
 8019cbe:	dc33      	bgt.n	8019d28 <_printf_float+0x384>
 8019cc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019cc4:	429a      	cmp	r2, r3
 8019cc6:	db3b      	blt.n	8019d40 <_printf_float+0x39c>
 8019cc8:	6823      	ldr	r3, [r4, #0]
 8019cca:	07da      	lsls	r2, r3, #31
 8019ccc:	d438      	bmi.n	8019d40 <_printf_float+0x39c>
 8019cce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019cd0:	9b05      	ldr	r3, [sp, #20]
 8019cd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019cd4:	1ad3      	subs	r3, r2, r3
 8019cd6:	eba2 0901 	sub.w	r9, r2, r1
 8019cda:	4599      	cmp	r9, r3
 8019cdc:	bfa8      	it	ge
 8019cde:	4699      	movge	r9, r3
 8019ce0:	f1b9 0f00 	cmp.w	r9, #0
 8019ce4:	dc35      	bgt.n	8019d52 <_printf_float+0x3ae>
 8019ce6:	f04f 0800 	mov.w	r8, #0
 8019cea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019cee:	f104 0a1a 	add.w	sl, r4, #26
 8019cf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019cf6:	1a9b      	subs	r3, r3, r2
 8019cf8:	eba3 0309 	sub.w	r3, r3, r9
 8019cfc:	4543      	cmp	r3, r8
 8019cfe:	f77f af79 	ble.w	8019bf4 <_printf_float+0x250>
 8019d02:	2301      	movs	r3, #1
 8019d04:	4652      	mov	r2, sl
 8019d06:	4631      	mov	r1, r6
 8019d08:	4628      	mov	r0, r5
 8019d0a:	47b8      	blx	r7
 8019d0c:	3001      	adds	r0, #1
 8019d0e:	f43f aeaa 	beq.w	8019a66 <_printf_float+0xc2>
 8019d12:	f108 0801 	add.w	r8, r8, #1
 8019d16:	e7ec      	b.n	8019cf2 <_printf_float+0x34e>
 8019d18:	4613      	mov	r3, r2
 8019d1a:	4631      	mov	r1, r6
 8019d1c:	4642      	mov	r2, r8
 8019d1e:	4628      	mov	r0, r5
 8019d20:	47b8      	blx	r7
 8019d22:	3001      	adds	r0, #1
 8019d24:	d1c0      	bne.n	8019ca8 <_printf_float+0x304>
 8019d26:	e69e      	b.n	8019a66 <_printf_float+0xc2>
 8019d28:	2301      	movs	r3, #1
 8019d2a:	4631      	mov	r1, r6
 8019d2c:	4628      	mov	r0, r5
 8019d2e:	9205      	str	r2, [sp, #20]
 8019d30:	47b8      	blx	r7
 8019d32:	3001      	adds	r0, #1
 8019d34:	f43f ae97 	beq.w	8019a66 <_printf_float+0xc2>
 8019d38:	9a05      	ldr	r2, [sp, #20]
 8019d3a:	f10b 0b01 	add.w	fp, fp, #1
 8019d3e:	e7b9      	b.n	8019cb4 <_printf_float+0x310>
 8019d40:	ee18 3a10 	vmov	r3, s16
 8019d44:	4652      	mov	r2, sl
 8019d46:	4631      	mov	r1, r6
 8019d48:	4628      	mov	r0, r5
 8019d4a:	47b8      	blx	r7
 8019d4c:	3001      	adds	r0, #1
 8019d4e:	d1be      	bne.n	8019cce <_printf_float+0x32a>
 8019d50:	e689      	b.n	8019a66 <_printf_float+0xc2>
 8019d52:	9a05      	ldr	r2, [sp, #20]
 8019d54:	464b      	mov	r3, r9
 8019d56:	4442      	add	r2, r8
 8019d58:	4631      	mov	r1, r6
 8019d5a:	4628      	mov	r0, r5
 8019d5c:	47b8      	blx	r7
 8019d5e:	3001      	adds	r0, #1
 8019d60:	d1c1      	bne.n	8019ce6 <_printf_float+0x342>
 8019d62:	e680      	b.n	8019a66 <_printf_float+0xc2>
 8019d64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019d66:	2a01      	cmp	r2, #1
 8019d68:	dc01      	bgt.n	8019d6e <_printf_float+0x3ca>
 8019d6a:	07db      	lsls	r3, r3, #31
 8019d6c:	d538      	bpl.n	8019de0 <_printf_float+0x43c>
 8019d6e:	2301      	movs	r3, #1
 8019d70:	4642      	mov	r2, r8
 8019d72:	4631      	mov	r1, r6
 8019d74:	4628      	mov	r0, r5
 8019d76:	47b8      	blx	r7
 8019d78:	3001      	adds	r0, #1
 8019d7a:	f43f ae74 	beq.w	8019a66 <_printf_float+0xc2>
 8019d7e:	ee18 3a10 	vmov	r3, s16
 8019d82:	4652      	mov	r2, sl
 8019d84:	4631      	mov	r1, r6
 8019d86:	4628      	mov	r0, r5
 8019d88:	47b8      	blx	r7
 8019d8a:	3001      	adds	r0, #1
 8019d8c:	f43f ae6b 	beq.w	8019a66 <_printf_float+0xc2>
 8019d90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019d94:	2200      	movs	r2, #0
 8019d96:	2300      	movs	r3, #0
 8019d98:	f7e6 fe96 	bl	8000ac8 <__aeabi_dcmpeq>
 8019d9c:	b9d8      	cbnz	r0, 8019dd6 <_printf_float+0x432>
 8019d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019da0:	f108 0201 	add.w	r2, r8, #1
 8019da4:	3b01      	subs	r3, #1
 8019da6:	4631      	mov	r1, r6
 8019da8:	4628      	mov	r0, r5
 8019daa:	47b8      	blx	r7
 8019dac:	3001      	adds	r0, #1
 8019dae:	d10e      	bne.n	8019dce <_printf_float+0x42a>
 8019db0:	e659      	b.n	8019a66 <_printf_float+0xc2>
 8019db2:	2301      	movs	r3, #1
 8019db4:	4652      	mov	r2, sl
 8019db6:	4631      	mov	r1, r6
 8019db8:	4628      	mov	r0, r5
 8019dba:	47b8      	blx	r7
 8019dbc:	3001      	adds	r0, #1
 8019dbe:	f43f ae52 	beq.w	8019a66 <_printf_float+0xc2>
 8019dc2:	f108 0801 	add.w	r8, r8, #1
 8019dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019dc8:	3b01      	subs	r3, #1
 8019dca:	4543      	cmp	r3, r8
 8019dcc:	dcf1      	bgt.n	8019db2 <_printf_float+0x40e>
 8019dce:	464b      	mov	r3, r9
 8019dd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019dd4:	e6dc      	b.n	8019b90 <_printf_float+0x1ec>
 8019dd6:	f04f 0800 	mov.w	r8, #0
 8019dda:	f104 0a1a 	add.w	sl, r4, #26
 8019dde:	e7f2      	b.n	8019dc6 <_printf_float+0x422>
 8019de0:	2301      	movs	r3, #1
 8019de2:	4642      	mov	r2, r8
 8019de4:	e7df      	b.n	8019da6 <_printf_float+0x402>
 8019de6:	2301      	movs	r3, #1
 8019de8:	464a      	mov	r2, r9
 8019dea:	4631      	mov	r1, r6
 8019dec:	4628      	mov	r0, r5
 8019dee:	47b8      	blx	r7
 8019df0:	3001      	adds	r0, #1
 8019df2:	f43f ae38 	beq.w	8019a66 <_printf_float+0xc2>
 8019df6:	f108 0801 	add.w	r8, r8, #1
 8019dfa:	68e3      	ldr	r3, [r4, #12]
 8019dfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019dfe:	1a5b      	subs	r3, r3, r1
 8019e00:	4543      	cmp	r3, r8
 8019e02:	dcf0      	bgt.n	8019de6 <_printf_float+0x442>
 8019e04:	e6fa      	b.n	8019bfc <_printf_float+0x258>
 8019e06:	f04f 0800 	mov.w	r8, #0
 8019e0a:	f104 0919 	add.w	r9, r4, #25
 8019e0e:	e7f4      	b.n	8019dfa <_printf_float+0x456>

08019e10 <_printf_common>:
 8019e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e14:	4616      	mov	r6, r2
 8019e16:	4699      	mov	r9, r3
 8019e18:	688a      	ldr	r2, [r1, #8]
 8019e1a:	690b      	ldr	r3, [r1, #16]
 8019e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019e20:	4293      	cmp	r3, r2
 8019e22:	bfb8      	it	lt
 8019e24:	4613      	movlt	r3, r2
 8019e26:	6033      	str	r3, [r6, #0]
 8019e28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019e2c:	4607      	mov	r7, r0
 8019e2e:	460c      	mov	r4, r1
 8019e30:	b10a      	cbz	r2, 8019e36 <_printf_common+0x26>
 8019e32:	3301      	adds	r3, #1
 8019e34:	6033      	str	r3, [r6, #0]
 8019e36:	6823      	ldr	r3, [r4, #0]
 8019e38:	0699      	lsls	r1, r3, #26
 8019e3a:	bf42      	ittt	mi
 8019e3c:	6833      	ldrmi	r3, [r6, #0]
 8019e3e:	3302      	addmi	r3, #2
 8019e40:	6033      	strmi	r3, [r6, #0]
 8019e42:	6825      	ldr	r5, [r4, #0]
 8019e44:	f015 0506 	ands.w	r5, r5, #6
 8019e48:	d106      	bne.n	8019e58 <_printf_common+0x48>
 8019e4a:	f104 0a19 	add.w	sl, r4, #25
 8019e4e:	68e3      	ldr	r3, [r4, #12]
 8019e50:	6832      	ldr	r2, [r6, #0]
 8019e52:	1a9b      	subs	r3, r3, r2
 8019e54:	42ab      	cmp	r3, r5
 8019e56:	dc26      	bgt.n	8019ea6 <_printf_common+0x96>
 8019e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019e5c:	1e13      	subs	r3, r2, #0
 8019e5e:	6822      	ldr	r2, [r4, #0]
 8019e60:	bf18      	it	ne
 8019e62:	2301      	movne	r3, #1
 8019e64:	0692      	lsls	r2, r2, #26
 8019e66:	d42b      	bmi.n	8019ec0 <_printf_common+0xb0>
 8019e68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019e6c:	4649      	mov	r1, r9
 8019e6e:	4638      	mov	r0, r7
 8019e70:	47c0      	blx	r8
 8019e72:	3001      	adds	r0, #1
 8019e74:	d01e      	beq.n	8019eb4 <_printf_common+0xa4>
 8019e76:	6823      	ldr	r3, [r4, #0]
 8019e78:	68e5      	ldr	r5, [r4, #12]
 8019e7a:	6832      	ldr	r2, [r6, #0]
 8019e7c:	f003 0306 	and.w	r3, r3, #6
 8019e80:	2b04      	cmp	r3, #4
 8019e82:	bf08      	it	eq
 8019e84:	1aad      	subeq	r5, r5, r2
 8019e86:	68a3      	ldr	r3, [r4, #8]
 8019e88:	6922      	ldr	r2, [r4, #16]
 8019e8a:	bf0c      	ite	eq
 8019e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019e90:	2500      	movne	r5, #0
 8019e92:	4293      	cmp	r3, r2
 8019e94:	bfc4      	itt	gt
 8019e96:	1a9b      	subgt	r3, r3, r2
 8019e98:	18ed      	addgt	r5, r5, r3
 8019e9a:	2600      	movs	r6, #0
 8019e9c:	341a      	adds	r4, #26
 8019e9e:	42b5      	cmp	r5, r6
 8019ea0:	d11a      	bne.n	8019ed8 <_printf_common+0xc8>
 8019ea2:	2000      	movs	r0, #0
 8019ea4:	e008      	b.n	8019eb8 <_printf_common+0xa8>
 8019ea6:	2301      	movs	r3, #1
 8019ea8:	4652      	mov	r2, sl
 8019eaa:	4649      	mov	r1, r9
 8019eac:	4638      	mov	r0, r7
 8019eae:	47c0      	blx	r8
 8019eb0:	3001      	adds	r0, #1
 8019eb2:	d103      	bne.n	8019ebc <_printf_common+0xac>
 8019eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8019eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ebc:	3501      	adds	r5, #1
 8019ebe:	e7c6      	b.n	8019e4e <_printf_common+0x3e>
 8019ec0:	18e1      	adds	r1, r4, r3
 8019ec2:	1c5a      	adds	r2, r3, #1
 8019ec4:	2030      	movs	r0, #48	; 0x30
 8019ec6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019eca:	4422      	add	r2, r4
 8019ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019ed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019ed4:	3302      	adds	r3, #2
 8019ed6:	e7c7      	b.n	8019e68 <_printf_common+0x58>
 8019ed8:	2301      	movs	r3, #1
 8019eda:	4622      	mov	r2, r4
 8019edc:	4649      	mov	r1, r9
 8019ede:	4638      	mov	r0, r7
 8019ee0:	47c0      	blx	r8
 8019ee2:	3001      	adds	r0, #1
 8019ee4:	d0e6      	beq.n	8019eb4 <_printf_common+0xa4>
 8019ee6:	3601      	adds	r6, #1
 8019ee8:	e7d9      	b.n	8019e9e <_printf_common+0x8e>
	...

08019eec <_printf_i>:
 8019eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019ef0:	460c      	mov	r4, r1
 8019ef2:	4691      	mov	r9, r2
 8019ef4:	7e27      	ldrb	r7, [r4, #24]
 8019ef6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019ef8:	2f78      	cmp	r7, #120	; 0x78
 8019efa:	4680      	mov	r8, r0
 8019efc:	469a      	mov	sl, r3
 8019efe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019f02:	d807      	bhi.n	8019f14 <_printf_i+0x28>
 8019f04:	2f62      	cmp	r7, #98	; 0x62
 8019f06:	d80a      	bhi.n	8019f1e <_printf_i+0x32>
 8019f08:	2f00      	cmp	r7, #0
 8019f0a:	f000 80d8 	beq.w	801a0be <_printf_i+0x1d2>
 8019f0e:	2f58      	cmp	r7, #88	; 0x58
 8019f10:	f000 80a3 	beq.w	801a05a <_printf_i+0x16e>
 8019f14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019f18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019f1c:	e03a      	b.n	8019f94 <_printf_i+0xa8>
 8019f1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019f22:	2b15      	cmp	r3, #21
 8019f24:	d8f6      	bhi.n	8019f14 <_printf_i+0x28>
 8019f26:	a001      	add	r0, pc, #4	; (adr r0, 8019f2c <_printf_i+0x40>)
 8019f28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8019f2c:	08019f85 	.word	0x08019f85
 8019f30:	08019f99 	.word	0x08019f99
 8019f34:	08019f15 	.word	0x08019f15
 8019f38:	08019f15 	.word	0x08019f15
 8019f3c:	08019f15 	.word	0x08019f15
 8019f40:	08019f15 	.word	0x08019f15
 8019f44:	08019f99 	.word	0x08019f99
 8019f48:	08019f15 	.word	0x08019f15
 8019f4c:	08019f15 	.word	0x08019f15
 8019f50:	08019f15 	.word	0x08019f15
 8019f54:	08019f15 	.word	0x08019f15
 8019f58:	0801a0a5 	.word	0x0801a0a5
 8019f5c:	08019fc9 	.word	0x08019fc9
 8019f60:	0801a087 	.word	0x0801a087
 8019f64:	08019f15 	.word	0x08019f15
 8019f68:	08019f15 	.word	0x08019f15
 8019f6c:	0801a0c7 	.word	0x0801a0c7
 8019f70:	08019f15 	.word	0x08019f15
 8019f74:	08019fc9 	.word	0x08019fc9
 8019f78:	08019f15 	.word	0x08019f15
 8019f7c:	08019f15 	.word	0x08019f15
 8019f80:	0801a08f 	.word	0x0801a08f
 8019f84:	680b      	ldr	r3, [r1, #0]
 8019f86:	1d1a      	adds	r2, r3, #4
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	600a      	str	r2, [r1, #0]
 8019f8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019f94:	2301      	movs	r3, #1
 8019f96:	e0a3      	b.n	801a0e0 <_printf_i+0x1f4>
 8019f98:	6825      	ldr	r5, [r4, #0]
 8019f9a:	6808      	ldr	r0, [r1, #0]
 8019f9c:	062e      	lsls	r6, r5, #24
 8019f9e:	f100 0304 	add.w	r3, r0, #4
 8019fa2:	d50a      	bpl.n	8019fba <_printf_i+0xce>
 8019fa4:	6805      	ldr	r5, [r0, #0]
 8019fa6:	600b      	str	r3, [r1, #0]
 8019fa8:	2d00      	cmp	r5, #0
 8019faa:	da03      	bge.n	8019fb4 <_printf_i+0xc8>
 8019fac:	232d      	movs	r3, #45	; 0x2d
 8019fae:	426d      	negs	r5, r5
 8019fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019fb4:	485e      	ldr	r0, [pc, #376]	; (801a130 <_printf_i+0x244>)
 8019fb6:	230a      	movs	r3, #10
 8019fb8:	e019      	b.n	8019fee <_printf_i+0x102>
 8019fba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8019fbe:	6805      	ldr	r5, [r0, #0]
 8019fc0:	600b      	str	r3, [r1, #0]
 8019fc2:	bf18      	it	ne
 8019fc4:	b22d      	sxthne	r5, r5
 8019fc6:	e7ef      	b.n	8019fa8 <_printf_i+0xbc>
 8019fc8:	680b      	ldr	r3, [r1, #0]
 8019fca:	6825      	ldr	r5, [r4, #0]
 8019fcc:	1d18      	adds	r0, r3, #4
 8019fce:	6008      	str	r0, [r1, #0]
 8019fd0:	0628      	lsls	r0, r5, #24
 8019fd2:	d501      	bpl.n	8019fd8 <_printf_i+0xec>
 8019fd4:	681d      	ldr	r5, [r3, #0]
 8019fd6:	e002      	b.n	8019fde <_printf_i+0xf2>
 8019fd8:	0669      	lsls	r1, r5, #25
 8019fda:	d5fb      	bpl.n	8019fd4 <_printf_i+0xe8>
 8019fdc:	881d      	ldrh	r5, [r3, #0]
 8019fde:	4854      	ldr	r0, [pc, #336]	; (801a130 <_printf_i+0x244>)
 8019fe0:	2f6f      	cmp	r7, #111	; 0x6f
 8019fe2:	bf0c      	ite	eq
 8019fe4:	2308      	moveq	r3, #8
 8019fe6:	230a      	movne	r3, #10
 8019fe8:	2100      	movs	r1, #0
 8019fea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019fee:	6866      	ldr	r6, [r4, #4]
 8019ff0:	60a6      	str	r6, [r4, #8]
 8019ff2:	2e00      	cmp	r6, #0
 8019ff4:	bfa2      	ittt	ge
 8019ff6:	6821      	ldrge	r1, [r4, #0]
 8019ff8:	f021 0104 	bicge.w	r1, r1, #4
 8019ffc:	6021      	strge	r1, [r4, #0]
 8019ffe:	b90d      	cbnz	r5, 801a004 <_printf_i+0x118>
 801a000:	2e00      	cmp	r6, #0
 801a002:	d04d      	beq.n	801a0a0 <_printf_i+0x1b4>
 801a004:	4616      	mov	r6, r2
 801a006:	fbb5 f1f3 	udiv	r1, r5, r3
 801a00a:	fb03 5711 	mls	r7, r3, r1, r5
 801a00e:	5dc7      	ldrb	r7, [r0, r7]
 801a010:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a014:	462f      	mov	r7, r5
 801a016:	42bb      	cmp	r3, r7
 801a018:	460d      	mov	r5, r1
 801a01a:	d9f4      	bls.n	801a006 <_printf_i+0x11a>
 801a01c:	2b08      	cmp	r3, #8
 801a01e:	d10b      	bne.n	801a038 <_printf_i+0x14c>
 801a020:	6823      	ldr	r3, [r4, #0]
 801a022:	07df      	lsls	r7, r3, #31
 801a024:	d508      	bpl.n	801a038 <_printf_i+0x14c>
 801a026:	6923      	ldr	r3, [r4, #16]
 801a028:	6861      	ldr	r1, [r4, #4]
 801a02a:	4299      	cmp	r1, r3
 801a02c:	bfde      	ittt	le
 801a02e:	2330      	movle	r3, #48	; 0x30
 801a030:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a034:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a038:	1b92      	subs	r2, r2, r6
 801a03a:	6122      	str	r2, [r4, #16]
 801a03c:	f8cd a000 	str.w	sl, [sp]
 801a040:	464b      	mov	r3, r9
 801a042:	aa03      	add	r2, sp, #12
 801a044:	4621      	mov	r1, r4
 801a046:	4640      	mov	r0, r8
 801a048:	f7ff fee2 	bl	8019e10 <_printf_common>
 801a04c:	3001      	adds	r0, #1
 801a04e:	d14c      	bne.n	801a0ea <_printf_i+0x1fe>
 801a050:	f04f 30ff 	mov.w	r0, #4294967295
 801a054:	b004      	add	sp, #16
 801a056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a05a:	4835      	ldr	r0, [pc, #212]	; (801a130 <_printf_i+0x244>)
 801a05c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a060:	6823      	ldr	r3, [r4, #0]
 801a062:	680e      	ldr	r6, [r1, #0]
 801a064:	061f      	lsls	r7, r3, #24
 801a066:	f856 5b04 	ldr.w	r5, [r6], #4
 801a06a:	600e      	str	r6, [r1, #0]
 801a06c:	d514      	bpl.n	801a098 <_printf_i+0x1ac>
 801a06e:	07d9      	lsls	r1, r3, #31
 801a070:	bf44      	itt	mi
 801a072:	f043 0320 	orrmi.w	r3, r3, #32
 801a076:	6023      	strmi	r3, [r4, #0]
 801a078:	b91d      	cbnz	r5, 801a082 <_printf_i+0x196>
 801a07a:	6823      	ldr	r3, [r4, #0]
 801a07c:	f023 0320 	bic.w	r3, r3, #32
 801a080:	6023      	str	r3, [r4, #0]
 801a082:	2310      	movs	r3, #16
 801a084:	e7b0      	b.n	8019fe8 <_printf_i+0xfc>
 801a086:	6823      	ldr	r3, [r4, #0]
 801a088:	f043 0320 	orr.w	r3, r3, #32
 801a08c:	6023      	str	r3, [r4, #0]
 801a08e:	2378      	movs	r3, #120	; 0x78
 801a090:	4828      	ldr	r0, [pc, #160]	; (801a134 <_printf_i+0x248>)
 801a092:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a096:	e7e3      	b.n	801a060 <_printf_i+0x174>
 801a098:	065e      	lsls	r6, r3, #25
 801a09a:	bf48      	it	mi
 801a09c:	b2ad      	uxthmi	r5, r5
 801a09e:	e7e6      	b.n	801a06e <_printf_i+0x182>
 801a0a0:	4616      	mov	r6, r2
 801a0a2:	e7bb      	b.n	801a01c <_printf_i+0x130>
 801a0a4:	680b      	ldr	r3, [r1, #0]
 801a0a6:	6826      	ldr	r6, [r4, #0]
 801a0a8:	6960      	ldr	r0, [r4, #20]
 801a0aa:	1d1d      	adds	r5, r3, #4
 801a0ac:	600d      	str	r5, [r1, #0]
 801a0ae:	0635      	lsls	r5, r6, #24
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	d501      	bpl.n	801a0b8 <_printf_i+0x1cc>
 801a0b4:	6018      	str	r0, [r3, #0]
 801a0b6:	e002      	b.n	801a0be <_printf_i+0x1d2>
 801a0b8:	0671      	lsls	r1, r6, #25
 801a0ba:	d5fb      	bpl.n	801a0b4 <_printf_i+0x1c8>
 801a0bc:	8018      	strh	r0, [r3, #0]
 801a0be:	2300      	movs	r3, #0
 801a0c0:	6123      	str	r3, [r4, #16]
 801a0c2:	4616      	mov	r6, r2
 801a0c4:	e7ba      	b.n	801a03c <_printf_i+0x150>
 801a0c6:	680b      	ldr	r3, [r1, #0]
 801a0c8:	1d1a      	adds	r2, r3, #4
 801a0ca:	600a      	str	r2, [r1, #0]
 801a0cc:	681e      	ldr	r6, [r3, #0]
 801a0ce:	6862      	ldr	r2, [r4, #4]
 801a0d0:	2100      	movs	r1, #0
 801a0d2:	4630      	mov	r0, r6
 801a0d4:	f7e6 f884 	bl	80001e0 <memchr>
 801a0d8:	b108      	cbz	r0, 801a0de <_printf_i+0x1f2>
 801a0da:	1b80      	subs	r0, r0, r6
 801a0dc:	6060      	str	r0, [r4, #4]
 801a0de:	6863      	ldr	r3, [r4, #4]
 801a0e0:	6123      	str	r3, [r4, #16]
 801a0e2:	2300      	movs	r3, #0
 801a0e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a0e8:	e7a8      	b.n	801a03c <_printf_i+0x150>
 801a0ea:	6923      	ldr	r3, [r4, #16]
 801a0ec:	4632      	mov	r2, r6
 801a0ee:	4649      	mov	r1, r9
 801a0f0:	4640      	mov	r0, r8
 801a0f2:	47d0      	blx	sl
 801a0f4:	3001      	adds	r0, #1
 801a0f6:	d0ab      	beq.n	801a050 <_printf_i+0x164>
 801a0f8:	6823      	ldr	r3, [r4, #0]
 801a0fa:	079b      	lsls	r3, r3, #30
 801a0fc:	d413      	bmi.n	801a126 <_printf_i+0x23a>
 801a0fe:	68e0      	ldr	r0, [r4, #12]
 801a100:	9b03      	ldr	r3, [sp, #12]
 801a102:	4298      	cmp	r0, r3
 801a104:	bfb8      	it	lt
 801a106:	4618      	movlt	r0, r3
 801a108:	e7a4      	b.n	801a054 <_printf_i+0x168>
 801a10a:	2301      	movs	r3, #1
 801a10c:	4632      	mov	r2, r6
 801a10e:	4649      	mov	r1, r9
 801a110:	4640      	mov	r0, r8
 801a112:	47d0      	blx	sl
 801a114:	3001      	adds	r0, #1
 801a116:	d09b      	beq.n	801a050 <_printf_i+0x164>
 801a118:	3501      	adds	r5, #1
 801a11a:	68e3      	ldr	r3, [r4, #12]
 801a11c:	9903      	ldr	r1, [sp, #12]
 801a11e:	1a5b      	subs	r3, r3, r1
 801a120:	42ab      	cmp	r3, r5
 801a122:	dcf2      	bgt.n	801a10a <_printf_i+0x21e>
 801a124:	e7eb      	b.n	801a0fe <_printf_i+0x212>
 801a126:	2500      	movs	r5, #0
 801a128:	f104 0619 	add.w	r6, r4, #25
 801a12c:	e7f5      	b.n	801a11a <_printf_i+0x22e>
 801a12e:	bf00      	nop
 801a130:	0801f686 	.word	0x0801f686
 801a134:	0801f697 	.word	0x0801f697

0801a138 <iprintf>:
 801a138:	b40f      	push	{r0, r1, r2, r3}
 801a13a:	4b0a      	ldr	r3, [pc, #40]	; (801a164 <iprintf+0x2c>)
 801a13c:	b513      	push	{r0, r1, r4, lr}
 801a13e:	681c      	ldr	r4, [r3, #0]
 801a140:	b124      	cbz	r4, 801a14c <iprintf+0x14>
 801a142:	69a3      	ldr	r3, [r4, #24]
 801a144:	b913      	cbnz	r3, 801a14c <iprintf+0x14>
 801a146:	4620      	mov	r0, r4
 801a148:	f001 f8e4 	bl	801b314 <__sinit>
 801a14c:	ab05      	add	r3, sp, #20
 801a14e:	9a04      	ldr	r2, [sp, #16]
 801a150:	68a1      	ldr	r1, [r4, #8]
 801a152:	9301      	str	r3, [sp, #4]
 801a154:	4620      	mov	r0, r4
 801a156:	f001 fdbb 	bl	801bcd0 <_vfiprintf_r>
 801a15a:	b002      	add	sp, #8
 801a15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a160:	b004      	add	sp, #16
 801a162:	4770      	bx	lr
 801a164:	200005b8 	.word	0x200005b8

0801a168 <putchar>:
 801a168:	4b09      	ldr	r3, [pc, #36]	; (801a190 <putchar+0x28>)
 801a16a:	b513      	push	{r0, r1, r4, lr}
 801a16c:	681c      	ldr	r4, [r3, #0]
 801a16e:	4601      	mov	r1, r0
 801a170:	b134      	cbz	r4, 801a180 <putchar+0x18>
 801a172:	69a3      	ldr	r3, [r4, #24]
 801a174:	b923      	cbnz	r3, 801a180 <putchar+0x18>
 801a176:	9001      	str	r0, [sp, #4]
 801a178:	4620      	mov	r0, r4
 801a17a:	f001 f8cb 	bl	801b314 <__sinit>
 801a17e:	9901      	ldr	r1, [sp, #4]
 801a180:	68a2      	ldr	r2, [r4, #8]
 801a182:	4620      	mov	r0, r4
 801a184:	b002      	add	sp, #8
 801a186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a18a:	f001 bed1 	b.w	801bf30 <_putc_r>
 801a18e:	bf00      	nop
 801a190:	200005b8 	.word	0x200005b8

0801a194 <rand>:
 801a194:	4b17      	ldr	r3, [pc, #92]	; (801a1f4 <rand+0x60>)
 801a196:	b510      	push	{r4, lr}
 801a198:	681c      	ldr	r4, [r3, #0]
 801a19a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a19c:	b9b3      	cbnz	r3, 801a1cc <rand+0x38>
 801a19e:	2018      	movs	r0, #24
 801a1a0:	f7ff fa82 	bl	80196a8 <malloc>
 801a1a4:	63a0      	str	r0, [r4, #56]	; 0x38
 801a1a6:	b928      	cbnz	r0, 801a1b4 <rand+0x20>
 801a1a8:	4602      	mov	r2, r0
 801a1aa:	4b13      	ldr	r3, [pc, #76]	; (801a1f8 <rand+0x64>)
 801a1ac:	4813      	ldr	r0, [pc, #76]	; (801a1fc <rand+0x68>)
 801a1ae:	214e      	movs	r1, #78	; 0x4e
 801a1b0:	f000 f900 	bl	801a3b4 <__assert_func>
 801a1b4:	4a12      	ldr	r2, [pc, #72]	; (801a200 <rand+0x6c>)
 801a1b6:	4b13      	ldr	r3, [pc, #76]	; (801a204 <rand+0x70>)
 801a1b8:	e9c0 2300 	strd	r2, r3, [r0]
 801a1bc:	4b12      	ldr	r3, [pc, #72]	; (801a208 <rand+0x74>)
 801a1be:	6083      	str	r3, [r0, #8]
 801a1c0:	230b      	movs	r3, #11
 801a1c2:	8183      	strh	r3, [r0, #12]
 801a1c4:	2201      	movs	r2, #1
 801a1c6:	2300      	movs	r3, #0
 801a1c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a1cc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a1ce:	480f      	ldr	r0, [pc, #60]	; (801a20c <rand+0x78>)
 801a1d0:	690a      	ldr	r2, [r1, #16]
 801a1d2:	694b      	ldr	r3, [r1, #20]
 801a1d4:	4c0e      	ldr	r4, [pc, #56]	; (801a210 <rand+0x7c>)
 801a1d6:	4350      	muls	r0, r2
 801a1d8:	fb04 0003 	mla	r0, r4, r3, r0
 801a1dc:	fba2 3404 	umull	r3, r4, r2, r4
 801a1e0:	1c5a      	adds	r2, r3, #1
 801a1e2:	4404      	add	r4, r0
 801a1e4:	f144 0000 	adc.w	r0, r4, #0
 801a1e8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801a1ec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a1f0:	bd10      	pop	{r4, pc}
 801a1f2:	bf00      	nop
 801a1f4:	200005b8 	.word	0x200005b8
 801a1f8:	0801f6a8 	.word	0x0801f6a8
 801a1fc:	0801f6bf 	.word	0x0801f6bf
 801a200:	abcd330e 	.word	0xabcd330e
 801a204:	e66d1234 	.word	0xe66d1234
 801a208:	0005deec 	.word	0x0005deec
 801a20c:	5851f42d 	.word	0x5851f42d
 801a210:	4c957f2d 	.word	0x4c957f2d

0801a214 <_sbrk_r>:
 801a214:	b538      	push	{r3, r4, r5, lr}
 801a216:	4d06      	ldr	r5, [pc, #24]	; (801a230 <_sbrk_r+0x1c>)
 801a218:	2300      	movs	r3, #0
 801a21a:	4604      	mov	r4, r0
 801a21c:	4608      	mov	r0, r1
 801a21e:	602b      	str	r3, [r5, #0]
 801a220:	f7e7 ff58 	bl	80020d4 <_sbrk>
 801a224:	1c43      	adds	r3, r0, #1
 801a226:	d102      	bne.n	801a22e <_sbrk_r+0x1a>
 801a228:	682b      	ldr	r3, [r5, #0]
 801a22a:	b103      	cbz	r3, 801a22e <_sbrk_r+0x1a>
 801a22c:	6023      	str	r3, [r4, #0]
 801a22e:	bd38      	pop	{r3, r4, r5, pc}
 801a230:	20019004 	.word	0x20019004

0801a234 <__swbuf_r>:
 801a234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a236:	460e      	mov	r6, r1
 801a238:	4614      	mov	r4, r2
 801a23a:	4605      	mov	r5, r0
 801a23c:	b118      	cbz	r0, 801a246 <__swbuf_r+0x12>
 801a23e:	6983      	ldr	r3, [r0, #24]
 801a240:	b90b      	cbnz	r3, 801a246 <__swbuf_r+0x12>
 801a242:	f001 f867 	bl	801b314 <__sinit>
 801a246:	4b21      	ldr	r3, [pc, #132]	; (801a2cc <__swbuf_r+0x98>)
 801a248:	429c      	cmp	r4, r3
 801a24a:	d12b      	bne.n	801a2a4 <__swbuf_r+0x70>
 801a24c:	686c      	ldr	r4, [r5, #4]
 801a24e:	69a3      	ldr	r3, [r4, #24]
 801a250:	60a3      	str	r3, [r4, #8]
 801a252:	89a3      	ldrh	r3, [r4, #12]
 801a254:	071a      	lsls	r2, r3, #28
 801a256:	d52f      	bpl.n	801a2b8 <__swbuf_r+0x84>
 801a258:	6923      	ldr	r3, [r4, #16]
 801a25a:	b36b      	cbz	r3, 801a2b8 <__swbuf_r+0x84>
 801a25c:	6923      	ldr	r3, [r4, #16]
 801a25e:	6820      	ldr	r0, [r4, #0]
 801a260:	1ac0      	subs	r0, r0, r3
 801a262:	6963      	ldr	r3, [r4, #20]
 801a264:	b2f6      	uxtb	r6, r6
 801a266:	4283      	cmp	r3, r0
 801a268:	4637      	mov	r7, r6
 801a26a:	dc04      	bgt.n	801a276 <__swbuf_r+0x42>
 801a26c:	4621      	mov	r1, r4
 801a26e:	4628      	mov	r0, r5
 801a270:	f000 ffbc 	bl	801b1ec <_fflush_r>
 801a274:	bb30      	cbnz	r0, 801a2c4 <__swbuf_r+0x90>
 801a276:	68a3      	ldr	r3, [r4, #8]
 801a278:	3b01      	subs	r3, #1
 801a27a:	60a3      	str	r3, [r4, #8]
 801a27c:	6823      	ldr	r3, [r4, #0]
 801a27e:	1c5a      	adds	r2, r3, #1
 801a280:	6022      	str	r2, [r4, #0]
 801a282:	701e      	strb	r6, [r3, #0]
 801a284:	6963      	ldr	r3, [r4, #20]
 801a286:	3001      	adds	r0, #1
 801a288:	4283      	cmp	r3, r0
 801a28a:	d004      	beq.n	801a296 <__swbuf_r+0x62>
 801a28c:	89a3      	ldrh	r3, [r4, #12]
 801a28e:	07db      	lsls	r3, r3, #31
 801a290:	d506      	bpl.n	801a2a0 <__swbuf_r+0x6c>
 801a292:	2e0a      	cmp	r6, #10
 801a294:	d104      	bne.n	801a2a0 <__swbuf_r+0x6c>
 801a296:	4621      	mov	r1, r4
 801a298:	4628      	mov	r0, r5
 801a29a:	f000 ffa7 	bl	801b1ec <_fflush_r>
 801a29e:	b988      	cbnz	r0, 801a2c4 <__swbuf_r+0x90>
 801a2a0:	4638      	mov	r0, r7
 801a2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2a4:	4b0a      	ldr	r3, [pc, #40]	; (801a2d0 <__swbuf_r+0x9c>)
 801a2a6:	429c      	cmp	r4, r3
 801a2a8:	d101      	bne.n	801a2ae <__swbuf_r+0x7a>
 801a2aa:	68ac      	ldr	r4, [r5, #8]
 801a2ac:	e7cf      	b.n	801a24e <__swbuf_r+0x1a>
 801a2ae:	4b09      	ldr	r3, [pc, #36]	; (801a2d4 <__swbuf_r+0xa0>)
 801a2b0:	429c      	cmp	r4, r3
 801a2b2:	bf08      	it	eq
 801a2b4:	68ec      	ldreq	r4, [r5, #12]
 801a2b6:	e7ca      	b.n	801a24e <__swbuf_r+0x1a>
 801a2b8:	4621      	mov	r1, r4
 801a2ba:	4628      	mov	r0, r5
 801a2bc:	f000 f80c 	bl	801a2d8 <__swsetup_r>
 801a2c0:	2800      	cmp	r0, #0
 801a2c2:	d0cb      	beq.n	801a25c <__swbuf_r+0x28>
 801a2c4:	f04f 37ff 	mov.w	r7, #4294967295
 801a2c8:	e7ea      	b.n	801a2a0 <__swbuf_r+0x6c>
 801a2ca:	bf00      	nop
 801a2cc:	0801f7f8 	.word	0x0801f7f8
 801a2d0:	0801f818 	.word	0x0801f818
 801a2d4:	0801f7d8 	.word	0x0801f7d8

0801a2d8 <__swsetup_r>:
 801a2d8:	4b32      	ldr	r3, [pc, #200]	; (801a3a4 <__swsetup_r+0xcc>)
 801a2da:	b570      	push	{r4, r5, r6, lr}
 801a2dc:	681d      	ldr	r5, [r3, #0]
 801a2de:	4606      	mov	r6, r0
 801a2e0:	460c      	mov	r4, r1
 801a2e2:	b125      	cbz	r5, 801a2ee <__swsetup_r+0x16>
 801a2e4:	69ab      	ldr	r3, [r5, #24]
 801a2e6:	b913      	cbnz	r3, 801a2ee <__swsetup_r+0x16>
 801a2e8:	4628      	mov	r0, r5
 801a2ea:	f001 f813 	bl	801b314 <__sinit>
 801a2ee:	4b2e      	ldr	r3, [pc, #184]	; (801a3a8 <__swsetup_r+0xd0>)
 801a2f0:	429c      	cmp	r4, r3
 801a2f2:	d10f      	bne.n	801a314 <__swsetup_r+0x3c>
 801a2f4:	686c      	ldr	r4, [r5, #4]
 801a2f6:	89a3      	ldrh	r3, [r4, #12]
 801a2f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a2fc:	0719      	lsls	r1, r3, #28
 801a2fe:	d42c      	bmi.n	801a35a <__swsetup_r+0x82>
 801a300:	06dd      	lsls	r5, r3, #27
 801a302:	d411      	bmi.n	801a328 <__swsetup_r+0x50>
 801a304:	2309      	movs	r3, #9
 801a306:	6033      	str	r3, [r6, #0]
 801a308:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a30c:	81a3      	strh	r3, [r4, #12]
 801a30e:	f04f 30ff 	mov.w	r0, #4294967295
 801a312:	e03e      	b.n	801a392 <__swsetup_r+0xba>
 801a314:	4b25      	ldr	r3, [pc, #148]	; (801a3ac <__swsetup_r+0xd4>)
 801a316:	429c      	cmp	r4, r3
 801a318:	d101      	bne.n	801a31e <__swsetup_r+0x46>
 801a31a:	68ac      	ldr	r4, [r5, #8]
 801a31c:	e7eb      	b.n	801a2f6 <__swsetup_r+0x1e>
 801a31e:	4b24      	ldr	r3, [pc, #144]	; (801a3b0 <__swsetup_r+0xd8>)
 801a320:	429c      	cmp	r4, r3
 801a322:	bf08      	it	eq
 801a324:	68ec      	ldreq	r4, [r5, #12]
 801a326:	e7e6      	b.n	801a2f6 <__swsetup_r+0x1e>
 801a328:	0758      	lsls	r0, r3, #29
 801a32a:	d512      	bpl.n	801a352 <__swsetup_r+0x7a>
 801a32c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a32e:	b141      	cbz	r1, 801a342 <__swsetup_r+0x6a>
 801a330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a334:	4299      	cmp	r1, r3
 801a336:	d002      	beq.n	801a33e <__swsetup_r+0x66>
 801a338:	4630      	mov	r0, r6
 801a33a:	f7ff f9e9 	bl	8019710 <_free_r>
 801a33e:	2300      	movs	r3, #0
 801a340:	6363      	str	r3, [r4, #52]	; 0x34
 801a342:	89a3      	ldrh	r3, [r4, #12]
 801a344:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a348:	81a3      	strh	r3, [r4, #12]
 801a34a:	2300      	movs	r3, #0
 801a34c:	6063      	str	r3, [r4, #4]
 801a34e:	6923      	ldr	r3, [r4, #16]
 801a350:	6023      	str	r3, [r4, #0]
 801a352:	89a3      	ldrh	r3, [r4, #12]
 801a354:	f043 0308 	orr.w	r3, r3, #8
 801a358:	81a3      	strh	r3, [r4, #12]
 801a35a:	6923      	ldr	r3, [r4, #16]
 801a35c:	b94b      	cbnz	r3, 801a372 <__swsetup_r+0x9a>
 801a35e:	89a3      	ldrh	r3, [r4, #12]
 801a360:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a368:	d003      	beq.n	801a372 <__swsetup_r+0x9a>
 801a36a:	4621      	mov	r1, r4
 801a36c:	4630      	mov	r0, r6
 801a36e:	f001 f8ad 	bl	801b4cc <__smakebuf_r>
 801a372:	89a0      	ldrh	r0, [r4, #12]
 801a374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a378:	f010 0301 	ands.w	r3, r0, #1
 801a37c:	d00a      	beq.n	801a394 <__swsetup_r+0xbc>
 801a37e:	2300      	movs	r3, #0
 801a380:	60a3      	str	r3, [r4, #8]
 801a382:	6963      	ldr	r3, [r4, #20]
 801a384:	425b      	negs	r3, r3
 801a386:	61a3      	str	r3, [r4, #24]
 801a388:	6923      	ldr	r3, [r4, #16]
 801a38a:	b943      	cbnz	r3, 801a39e <__swsetup_r+0xc6>
 801a38c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a390:	d1ba      	bne.n	801a308 <__swsetup_r+0x30>
 801a392:	bd70      	pop	{r4, r5, r6, pc}
 801a394:	0781      	lsls	r1, r0, #30
 801a396:	bf58      	it	pl
 801a398:	6963      	ldrpl	r3, [r4, #20]
 801a39a:	60a3      	str	r3, [r4, #8]
 801a39c:	e7f4      	b.n	801a388 <__swsetup_r+0xb0>
 801a39e:	2000      	movs	r0, #0
 801a3a0:	e7f7      	b.n	801a392 <__swsetup_r+0xba>
 801a3a2:	bf00      	nop
 801a3a4:	200005b8 	.word	0x200005b8
 801a3a8:	0801f7f8 	.word	0x0801f7f8
 801a3ac:	0801f818 	.word	0x0801f818
 801a3b0:	0801f7d8 	.word	0x0801f7d8

0801a3b4 <__assert_func>:
 801a3b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a3b6:	4614      	mov	r4, r2
 801a3b8:	461a      	mov	r2, r3
 801a3ba:	4b09      	ldr	r3, [pc, #36]	; (801a3e0 <__assert_func+0x2c>)
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	4605      	mov	r5, r0
 801a3c0:	68d8      	ldr	r0, [r3, #12]
 801a3c2:	b14c      	cbz	r4, 801a3d8 <__assert_func+0x24>
 801a3c4:	4b07      	ldr	r3, [pc, #28]	; (801a3e4 <__assert_func+0x30>)
 801a3c6:	9100      	str	r1, [sp, #0]
 801a3c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a3cc:	4906      	ldr	r1, [pc, #24]	; (801a3e8 <__assert_func+0x34>)
 801a3ce:	462b      	mov	r3, r5
 801a3d0:	f001 f81e 	bl	801b410 <fiprintf>
 801a3d4:	f001 fe4a 	bl	801c06c <abort>
 801a3d8:	4b04      	ldr	r3, [pc, #16]	; (801a3ec <__assert_func+0x38>)
 801a3da:	461c      	mov	r4, r3
 801a3dc:	e7f3      	b.n	801a3c6 <__assert_func+0x12>
 801a3de:	bf00      	nop
 801a3e0:	200005b8 	.word	0x200005b8
 801a3e4:	0801f71e 	.word	0x0801f71e
 801a3e8:	0801f72b 	.word	0x0801f72b
 801a3ec:	0801f759 	.word	0x0801f759

0801a3f0 <quorem>:
 801a3f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3f4:	6903      	ldr	r3, [r0, #16]
 801a3f6:	690c      	ldr	r4, [r1, #16]
 801a3f8:	42a3      	cmp	r3, r4
 801a3fa:	4607      	mov	r7, r0
 801a3fc:	f2c0 8081 	blt.w	801a502 <quorem+0x112>
 801a400:	3c01      	subs	r4, #1
 801a402:	f101 0814 	add.w	r8, r1, #20
 801a406:	f100 0514 	add.w	r5, r0, #20
 801a40a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a40e:	9301      	str	r3, [sp, #4]
 801a410:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a418:	3301      	adds	r3, #1
 801a41a:	429a      	cmp	r2, r3
 801a41c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a420:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a424:	fbb2 f6f3 	udiv	r6, r2, r3
 801a428:	d331      	bcc.n	801a48e <quorem+0x9e>
 801a42a:	f04f 0e00 	mov.w	lr, #0
 801a42e:	4640      	mov	r0, r8
 801a430:	46ac      	mov	ip, r5
 801a432:	46f2      	mov	sl, lr
 801a434:	f850 2b04 	ldr.w	r2, [r0], #4
 801a438:	b293      	uxth	r3, r2
 801a43a:	fb06 e303 	mla	r3, r6, r3, lr
 801a43e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801a442:	b29b      	uxth	r3, r3
 801a444:	ebaa 0303 	sub.w	r3, sl, r3
 801a448:	0c12      	lsrs	r2, r2, #16
 801a44a:	f8dc a000 	ldr.w	sl, [ip]
 801a44e:	fb06 e202 	mla	r2, r6, r2, lr
 801a452:	fa13 f38a 	uxtah	r3, r3, sl
 801a456:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a45a:	fa1f fa82 	uxth.w	sl, r2
 801a45e:	f8dc 2000 	ldr.w	r2, [ip]
 801a462:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801a466:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a46a:	b29b      	uxth	r3, r3
 801a46c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a470:	4581      	cmp	r9, r0
 801a472:	f84c 3b04 	str.w	r3, [ip], #4
 801a476:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a47a:	d2db      	bcs.n	801a434 <quorem+0x44>
 801a47c:	f855 300b 	ldr.w	r3, [r5, fp]
 801a480:	b92b      	cbnz	r3, 801a48e <quorem+0x9e>
 801a482:	9b01      	ldr	r3, [sp, #4]
 801a484:	3b04      	subs	r3, #4
 801a486:	429d      	cmp	r5, r3
 801a488:	461a      	mov	r2, r3
 801a48a:	d32e      	bcc.n	801a4ea <quorem+0xfa>
 801a48c:	613c      	str	r4, [r7, #16]
 801a48e:	4638      	mov	r0, r7
 801a490:	f001 fae6 	bl	801ba60 <__mcmp>
 801a494:	2800      	cmp	r0, #0
 801a496:	db24      	blt.n	801a4e2 <quorem+0xf2>
 801a498:	3601      	adds	r6, #1
 801a49a:	4628      	mov	r0, r5
 801a49c:	f04f 0c00 	mov.w	ip, #0
 801a4a0:	f858 2b04 	ldr.w	r2, [r8], #4
 801a4a4:	f8d0 e000 	ldr.w	lr, [r0]
 801a4a8:	b293      	uxth	r3, r2
 801a4aa:	ebac 0303 	sub.w	r3, ip, r3
 801a4ae:	0c12      	lsrs	r2, r2, #16
 801a4b0:	fa13 f38e 	uxtah	r3, r3, lr
 801a4b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a4b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a4bc:	b29b      	uxth	r3, r3
 801a4be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a4c2:	45c1      	cmp	r9, r8
 801a4c4:	f840 3b04 	str.w	r3, [r0], #4
 801a4c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a4cc:	d2e8      	bcs.n	801a4a0 <quorem+0xb0>
 801a4ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a4d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a4d6:	b922      	cbnz	r2, 801a4e2 <quorem+0xf2>
 801a4d8:	3b04      	subs	r3, #4
 801a4da:	429d      	cmp	r5, r3
 801a4dc:	461a      	mov	r2, r3
 801a4de:	d30a      	bcc.n	801a4f6 <quorem+0x106>
 801a4e0:	613c      	str	r4, [r7, #16]
 801a4e2:	4630      	mov	r0, r6
 801a4e4:	b003      	add	sp, #12
 801a4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4ea:	6812      	ldr	r2, [r2, #0]
 801a4ec:	3b04      	subs	r3, #4
 801a4ee:	2a00      	cmp	r2, #0
 801a4f0:	d1cc      	bne.n	801a48c <quorem+0x9c>
 801a4f2:	3c01      	subs	r4, #1
 801a4f4:	e7c7      	b.n	801a486 <quorem+0x96>
 801a4f6:	6812      	ldr	r2, [r2, #0]
 801a4f8:	3b04      	subs	r3, #4
 801a4fa:	2a00      	cmp	r2, #0
 801a4fc:	d1f0      	bne.n	801a4e0 <quorem+0xf0>
 801a4fe:	3c01      	subs	r4, #1
 801a500:	e7eb      	b.n	801a4da <quorem+0xea>
 801a502:	2000      	movs	r0, #0
 801a504:	e7ee      	b.n	801a4e4 <quorem+0xf4>
	...

0801a508 <_dtoa_r>:
 801a508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a50c:	ed2d 8b02 	vpush	{d8}
 801a510:	ec57 6b10 	vmov	r6, r7, d0
 801a514:	b095      	sub	sp, #84	; 0x54
 801a516:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a518:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801a51c:	9105      	str	r1, [sp, #20]
 801a51e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801a522:	4604      	mov	r4, r0
 801a524:	9209      	str	r2, [sp, #36]	; 0x24
 801a526:	930f      	str	r3, [sp, #60]	; 0x3c
 801a528:	b975      	cbnz	r5, 801a548 <_dtoa_r+0x40>
 801a52a:	2010      	movs	r0, #16
 801a52c:	f7ff f8bc 	bl	80196a8 <malloc>
 801a530:	4602      	mov	r2, r0
 801a532:	6260      	str	r0, [r4, #36]	; 0x24
 801a534:	b920      	cbnz	r0, 801a540 <_dtoa_r+0x38>
 801a536:	4bb2      	ldr	r3, [pc, #712]	; (801a800 <_dtoa_r+0x2f8>)
 801a538:	21ea      	movs	r1, #234	; 0xea
 801a53a:	48b2      	ldr	r0, [pc, #712]	; (801a804 <_dtoa_r+0x2fc>)
 801a53c:	f7ff ff3a 	bl	801a3b4 <__assert_func>
 801a540:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a544:	6005      	str	r5, [r0, #0]
 801a546:	60c5      	str	r5, [r0, #12]
 801a548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a54a:	6819      	ldr	r1, [r3, #0]
 801a54c:	b151      	cbz	r1, 801a564 <_dtoa_r+0x5c>
 801a54e:	685a      	ldr	r2, [r3, #4]
 801a550:	604a      	str	r2, [r1, #4]
 801a552:	2301      	movs	r3, #1
 801a554:	4093      	lsls	r3, r2
 801a556:	608b      	str	r3, [r1, #8]
 801a558:	4620      	mov	r0, r4
 801a55a:	f001 f843 	bl	801b5e4 <_Bfree>
 801a55e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a560:	2200      	movs	r2, #0
 801a562:	601a      	str	r2, [r3, #0]
 801a564:	1e3b      	subs	r3, r7, #0
 801a566:	bfb9      	ittee	lt
 801a568:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a56c:	9303      	strlt	r3, [sp, #12]
 801a56e:	2300      	movge	r3, #0
 801a570:	f8c8 3000 	strge.w	r3, [r8]
 801a574:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801a578:	4ba3      	ldr	r3, [pc, #652]	; (801a808 <_dtoa_r+0x300>)
 801a57a:	bfbc      	itt	lt
 801a57c:	2201      	movlt	r2, #1
 801a57e:	f8c8 2000 	strlt.w	r2, [r8]
 801a582:	ea33 0309 	bics.w	r3, r3, r9
 801a586:	d11b      	bne.n	801a5c0 <_dtoa_r+0xb8>
 801a588:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a58a:	f242 730f 	movw	r3, #9999	; 0x270f
 801a58e:	6013      	str	r3, [r2, #0]
 801a590:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a594:	4333      	orrs	r3, r6
 801a596:	f000 857a 	beq.w	801b08e <_dtoa_r+0xb86>
 801a59a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a59c:	b963      	cbnz	r3, 801a5b8 <_dtoa_r+0xb0>
 801a59e:	4b9b      	ldr	r3, [pc, #620]	; (801a80c <_dtoa_r+0x304>)
 801a5a0:	e024      	b.n	801a5ec <_dtoa_r+0xe4>
 801a5a2:	4b9b      	ldr	r3, [pc, #620]	; (801a810 <_dtoa_r+0x308>)
 801a5a4:	9300      	str	r3, [sp, #0]
 801a5a6:	3308      	adds	r3, #8
 801a5a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a5aa:	6013      	str	r3, [r2, #0]
 801a5ac:	9800      	ldr	r0, [sp, #0]
 801a5ae:	b015      	add	sp, #84	; 0x54
 801a5b0:	ecbd 8b02 	vpop	{d8}
 801a5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5b8:	4b94      	ldr	r3, [pc, #592]	; (801a80c <_dtoa_r+0x304>)
 801a5ba:	9300      	str	r3, [sp, #0]
 801a5bc:	3303      	adds	r3, #3
 801a5be:	e7f3      	b.n	801a5a8 <_dtoa_r+0xa0>
 801a5c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a5c4:	2200      	movs	r2, #0
 801a5c6:	ec51 0b17 	vmov	r0, r1, d7
 801a5ca:	2300      	movs	r3, #0
 801a5cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801a5d0:	f7e6 fa7a 	bl	8000ac8 <__aeabi_dcmpeq>
 801a5d4:	4680      	mov	r8, r0
 801a5d6:	b158      	cbz	r0, 801a5f0 <_dtoa_r+0xe8>
 801a5d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a5da:	2301      	movs	r3, #1
 801a5dc:	6013      	str	r3, [r2, #0]
 801a5de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	f000 8551 	beq.w	801b088 <_dtoa_r+0xb80>
 801a5e6:	488b      	ldr	r0, [pc, #556]	; (801a814 <_dtoa_r+0x30c>)
 801a5e8:	6018      	str	r0, [r3, #0]
 801a5ea:	1e43      	subs	r3, r0, #1
 801a5ec:	9300      	str	r3, [sp, #0]
 801a5ee:	e7dd      	b.n	801a5ac <_dtoa_r+0xa4>
 801a5f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801a5f4:	aa12      	add	r2, sp, #72	; 0x48
 801a5f6:	a913      	add	r1, sp, #76	; 0x4c
 801a5f8:	4620      	mov	r0, r4
 801a5fa:	f001 fad5 	bl	801bba8 <__d2b>
 801a5fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a602:	4683      	mov	fp, r0
 801a604:	2d00      	cmp	r5, #0
 801a606:	d07c      	beq.n	801a702 <_dtoa_r+0x1fa>
 801a608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a60a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801a60e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a612:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801a616:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801a61a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801a61e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801a622:	4b7d      	ldr	r3, [pc, #500]	; (801a818 <_dtoa_r+0x310>)
 801a624:	2200      	movs	r2, #0
 801a626:	4630      	mov	r0, r6
 801a628:	4639      	mov	r1, r7
 801a62a:	f7e5 fe2d 	bl	8000288 <__aeabi_dsub>
 801a62e:	a36e      	add	r3, pc, #440	; (adr r3, 801a7e8 <_dtoa_r+0x2e0>)
 801a630:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a634:	f7e5 ffe0 	bl	80005f8 <__aeabi_dmul>
 801a638:	a36d      	add	r3, pc, #436	; (adr r3, 801a7f0 <_dtoa_r+0x2e8>)
 801a63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a63e:	f7e5 fe25 	bl	800028c <__adddf3>
 801a642:	4606      	mov	r6, r0
 801a644:	4628      	mov	r0, r5
 801a646:	460f      	mov	r7, r1
 801a648:	f7e5 ff6c 	bl	8000524 <__aeabi_i2d>
 801a64c:	a36a      	add	r3, pc, #424	; (adr r3, 801a7f8 <_dtoa_r+0x2f0>)
 801a64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a652:	f7e5 ffd1 	bl	80005f8 <__aeabi_dmul>
 801a656:	4602      	mov	r2, r0
 801a658:	460b      	mov	r3, r1
 801a65a:	4630      	mov	r0, r6
 801a65c:	4639      	mov	r1, r7
 801a65e:	f7e5 fe15 	bl	800028c <__adddf3>
 801a662:	4606      	mov	r6, r0
 801a664:	460f      	mov	r7, r1
 801a666:	f7e6 fa77 	bl	8000b58 <__aeabi_d2iz>
 801a66a:	2200      	movs	r2, #0
 801a66c:	4682      	mov	sl, r0
 801a66e:	2300      	movs	r3, #0
 801a670:	4630      	mov	r0, r6
 801a672:	4639      	mov	r1, r7
 801a674:	f7e6 fa32 	bl	8000adc <__aeabi_dcmplt>
 801a678:	b148      	cbz	r0, 801a68e <_dtoa_r+0x186>
 801a67a:	4650      	mov	r0, sl
 801a67c:	f7e5 ff52 	bl	8000524 <__aeabi_i2d>
 801a680:	4632      	mov	r2, r6
 801a682:	463b      	mov	r3, r7
 801a684:	f7e6 fa20 	bl	8000ac8 <__aeabi_dcmpeq>
 801a688:	b908      	cbnz	r0, 801a68e <_dtoa_r+0x186>
 801a68a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a68e:	f1ba 0f16 	cmp.w	sl, #22
 801a692:	d854      	bhi.n	801a73e <_dtoa_r+0x236>
 801a694:	4b61      	ldr	r3, [pc, #388]	; (801a81c <_dtoa_r+0x314>)
 801a696:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a69e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a6a2:	f7e6 fa1b 	bl	8000adc <__aeabi_dcmplt>
 801a6a6:	2800      	cmp	r0, #0
 801a6a8:	d04b      	beq.n	801a742 <_dtoa_r+0x23a>
 801a6aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a6ae:	2300      	movs	r3, #0
 801a6b0:	930e      	str	r3, [sp, #56]	; 0x38
 801a6b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a6b4:	1b5d      	subs	r5, r3, r5
 801a6b6:	1e6b      	subs	r3, r5, #1
 801a6b8:	9304      	str	r3, [sp, #16]
 801a6ba:	bf43      	ittte	mi
 801a6bc:	2300      	movmi	r3, #0
 801a6be:	f1c5 0801 	rsbmi	r8, r5, #1
 801a6c2:	9304      	strmi	r3, [sp, #16]
 801a6c4:	f04f 0800 	movpl.w	r8, #0
 801a6c8:	f1ba 0f00 	cmp.w	sl, #0
 801a6cc:	db3b      	blt.n	801a746 <_dtoa_r+0x23e>
 801a6ce:	9b04      	ldr	r3, [sp, #16]
 801a6d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801a6d4:	4453      	add	r3, sl
 801a6d6:	9304      	str	r3, [sp, #16]
 801a6d8:	2300      	movs	r3, #0
 801a6da:	9306      	str	r3, [sp, #24]
 801a6dc:	9b05      	ldr	r3, [sp, #20]
 801a6de:	2b09      	cmp	r3, #9
 801a6e0:	d869      	bhi.n	801a7b6 <_dtoa_r+0x2ae>
 801a6e2:	2b05      	cmp	r3, #5
 801a6e4:	bfc4      	itt	gt
 801a6e6:	3b04      	subgt	r3, #4
 801a6e8:	9305      	strgt	r3, [sp, #20]
 801a6ea:	9b05      	ldr	r3, [sp, #20]
 801a6ec:	f1a3 0302 	sub.w	r3, r3, #2
 801a6f0:	bfcc      	ite	gt
 801a6f2:	2500      	movgt	r5, #0
 801a6f4:	2501      	movle	r5, #1
 801a6f6:	2b03      	cmp	r3, #3
 801a6f8:	d869      	bhi.n	801a7ce <_dtoa_r+0x2c6>
 801a6fa:	e8df f003 	tbb	[pc, r3]
 801a6fe:	4e2c      	.short	0x4e2c
 801a700:	5a4c      	.short	0x5a4c
 801a702:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801a706:	441d      	add	r5, r3
 801a708:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801a70c:	2b20      	cmp	r3, #32
 801a70e:	bfc1      	itttt	gt
 801a710:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801a714:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801a718:	fa09 f303 	lslgt.w	r3, r9, r3
 801a71c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801a720:	bfda      	itte	le
 801a722:	f1c3 0320 	rsble	r3, r3, #32
 801a726:	fa06 f003 	lslle.w	r0, r6, r3
 801a72a:	4318      	orrgt	r0, r3
 801a72c:	f7e5 feea 	bl	8000504 <__aeabi_ui2d>
 801a730:	2301      	movs	r3, #1
 801a732:	4606      	mov	r6, r0
 801a734:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801a738:	3d01      	subs	r5, #1
 801a73a:	9310      	str	r3, [sp, #64]	; 0x40
 801a73c:	e771      	b.n	801a622 <_dtoa_r+0x11a>
 801a73e:	2301      	movs	r3, #1
 801a740:	e7b6      	b.n	801a6b0 <_dtoa_r+0x1a8>
 801a742:	900e      	str	r0, [sp, #56]	; 0x38
 801a744:	e7b5      	b.n	801a6b2 <_dtoa_r+0x1aa>
 801a746:	f1ca 0300 	rsb	r3, sl, #0
 801a74a:	9306      	str	r3, [sp, #24]
 801a74c:	2300      	movs	r3, #0
 801a74e:	eba8 080a 	sub.w	r8, r8, sl
 801a752:	930d      	str	r3, [sp, #52]	; 0x34
 801a754:	e7c2      	b.n	801a6dc <_dtoa_r+0x1d4>
 801a756:	2300      	movs	r3, #0
 801a758:	9308      	str	r3, [sp, #32]
 801a75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	dc39      	bgt.n	801a7d4 <_dtoa_r+0x2cc>
 801a760:	f04f 0901 	mov.w	r9, #1
 801a764:	f8cd 9004 	str.w	r9, [sp, #4]
 801a768:	464b      	mov	r3, r9
 801a76a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801a76e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801a770:	2200      	movs	r2, #0
 801a772:	6042      	str	r2, [r0, #4]
 801a774:	2204      	movs	r2, #4
 801a776:	f102 0614 	add.w	r6, r2, #20
 801a77a:	429e      	cmp	r6, r3
 801a77c:	6841      	ldr	r1, [r0, #4]
 801a77e:	d92f      	bls.n	801a7e0 <_dtoa_r+0x2d8>
 801a780:	4620      	mov	r0, r4
 801a782:	f000 feef 	bl	801b564 <_Balloc>
 801a786:	9000      	str	r0, [sp, #0]
 801a788:	2800      	cmp	r0, #0
 801a78a:	d14b      	bne.n	801a824 <_dtoa_r+0x31c>
 801a78c:	4b24      	ldr	r3, [pc, #144]	; (801a820 <_dtoa_r+0x318>)
 801a78e:	4602      	mov	r2, r0
 801a790:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801a794:	e6d1      	b.n	801a53a <_dtoa_r+0x32>
 801a796:	2301      	movs	r3, #1
 801a798:	e7de      	b.n	801a758 <_dtoa_r+0x250>
 801a79a:	2300      	movs	r3, #0
 801a79c:	9308      	str	r3, [sp, #32]
 801a79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7a0:	eb0a 0903 	add.w	r9, sl, r3
 801a7a4:	f109 0301 	add.w	r3, r9, #1
 801a7a8:	2b01      	cmp	r3, #1
 801a7aa:	9301      	str	r3, [sp, #4]
 801a7ac:	bfb8      	it	lt
 801a7ae:	2301      	movlt	r3, #1
 801a7b0:	e7dd      	b.n	801a76e <_dtoa_r+0x266>
 801a7b2:	2301      	movs	r3, #1
 801a7b4:	e7f2      	b.n	801a79c <_dtoa_r+0x294>
 801a7b6:	2501      	movs	r5, #1
 801a7b8:	2300      	movs	r3, #0
 801a7ba:	9305      	str	r3, [sp, #20]
 801a7bc:	9508      	str	r5, [sp, #32]
 801a7be:	f04f 39ff 	mov.w	r9, #4294967295
 801a7c2:	2200      	movs	r2, #0
 801a7c4:	f8cd 9004 	str.w	r9, [sp, #4]
 801a7c8:	2312      	movs	r3, #18
 801a7ca:	9209      	str	r2, [sp, #36]	; 0x24
 801a7cc:	e7cf      	b.n	801a76e <_dtoa_r+0x266>
 801a7ce:	2301      	movs	r3, #1
 801a7d0:	9308      	str	r3, [sp, #32]
 801a7d2:	e7f4      	b.n	801a7be <_dtoa_r+0x2b6>
 801a7d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a7d8:	f8cd 9004 	str.w	r9, [sp, #4]
 801a7dc:	464b      	mov	r3, r9
 801a7de:	e7c6      	b.n	801a76e <_dtoa_r+0x266>
 801a7e0:	3101      	adds	r1, #1
 801a7e2:	6041      	str	r1, [r0, #4]
 801a7e4:	0052      	lsls	r2, r2, #1
 801a7e6:	e7c6      	b.n	801a776 <_dtoa_r+0x26e>
 801a7e8:	636f4361 	.word	0x636f4361
 801a7ec:	3fd287a7 	.word	0x3fd287a7
 801a7f0:	8b60c8b3 	.word	0x8b60c8b3
 801a7f4:	3fc68a28 	.word	0x3fc68a28
 801a7f8:	509f79fb 	.word	0x509f79fb
 801a7fc:	3fd34413 	.word	0x3fd34413
 801a800:	0801f6a8 	.word	0x0801f6a8
 801a804:	0801f767 	.word	0x0801f767
 801a808:	7ff00000 	.word	0x7ff00000
 801a80c:	0801f763 	.word	0x0801f763
 801a810:	0801f75a 	.word	0x0801f75a
 801a814:	0801f685 	.word	0x0801f685
 801a818:	3ff80000 	.word	0x3ff80000
 801a81c:	0801f8c0 	.word	0x0801f8c0
 801a820:	0801f7c6 	.word	0x0801f7c6
 801a824:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a826:	9a00      	ldr	r2, [sp, #0]
 801a828:	601a      	str	r2, [r3, #0]
 801a82a:	9b01      	ldr	r3, [sp, #4]
 801a82c:	2b0e      	cmp	r3, #14
 801a82e:	f200 80ad 	bhi.w	801a98c <_dtoa_r+0x484>
 801a832:	2d00      	cmp	r5, #0
 801a834:	f000 80aa 	beq.w	801a98c <_dtoa_r+0x484>
 801a838:	f1ba 0f00 	cmp.w	sl, #0
 801a83c:	dd36      	ble.n	801a8ac <_dtoa_r+0x3a4>
 801a83e:	4ac3      	ldr	r2, [pc, #780]	; (801ab4c <_dtoa_r+0x644>)
 801a840:	f00a 030f 	and.w	r3, sl, #15
 801a844:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a848:	ed93 7b00 	vldr	d7, [r3]
 801a84c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801a850:	ea4f 172a 	mov.w	r7, sl, asr #4
 801a854:	eeb0 8a47 	vmov.f32	s16, s14
 801a858:	eef0 8a67 	vmov.f32	s17, s15
 801a85c:	d016      	beq.n	801a88c <_dtoa_r+0x384>
 801a85e:	4bbc      	ldr	r3, [pc, #752]	; (801ab50 <_dtoa_r+0x648>)
 801a860:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a864:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a868:	f7e5 fff0 	bl	800084c <__aeabi_ddiv>
 801a86c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a870:	f007 070f 	and.w	r7, r7, #15
 801a874:	2503      	movs	r5, #3
 801a876:	4eb6      	ldr	r6, [pc, #728]	; (801ab50 <_dtoa_r+0x648>)
 801a878:	b957      	cbnz	r7, 801a890 <_dtoa_r+0x388>
 801a87a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a87e:	ec53 2b18 	vmov	r2, r3, d8
 801a882:	f7e5 ffe3 	bl	800084c <__aeabi_ddiv>
 801a886:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a88a:	e029      	b.n	801a8e0 <_dtoa_r+0x3d8>
 801a88c:	2502      	movs	r5, #2
 801a88e:	e7f2      	b.n	801a876 <_dtoa_r+0x36e>
 801a890:	07f9      	lsls	r1, r7, #31
 801a892:	d508      	bpl.n	801a8a6 <_dtoa_r+0x39e>
 801a894:	ec51 0b18 	vmov	r0, r1, d8
 801a898:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a89c:	f7e5 feac 	bl	80005f8 <__aeabi_dmul>
 801a8a0:	ec41 0b18 	vmov	d8, r0, r1
 801a8a4:	3501      	adds	r5, #1
 801a8a6:	107f      	asrs	r7, r7, #1
 801a8a8:	3608      	adds	r6, #8
 801a8aa:	e7e5      	b.n	801a878 <_dtoa_r+0x370>
 801a8ac:	f000 80a6 	beq.w	801a9fc <_dtoa_r+0x4f4>
 801a8b0:	f1ca 0600 	rsb	r6, sl, #0
 801a8b4:	4ba5      	ldr	r3, [pc, #660]	; (801ab4c <_dtoa_r+0x644>)
 801a8b6:	4fa6      	ldr	r7, [pc, #664]	; (801ab50 <_dtoa_r+0x648>)
 801a8b8:	f006 020f 	and.w	r2, r6, #15
 801a8bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a8c8:	f7e5 fe96 	bl	80005f8 <__aeabi_dmul>
 801a8cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a8d0:	1136      	asrs	r6, r6, #4
 801a8d2:	2300      	movs	r3, #0
 801a8d4:	2502      	movs	r5, #2
 801a8d6:	2e00      	cmp	r6, #0
 801a8d8:	f040 8085 	bne.w	801a9e6 <_dtoa_r+0x4de>
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d1d2      	bne.n	801a886 <_dtoa_r+0x37e>
 801a8e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	f000 808c 	beq.w	801aa00 <_dtoa_r+0x4f8>
 801a8e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801a8ec:	4b99      	ldr	r3, [pc, #612]	; (801ab54 <_dtoa_r+0x64c>)
 801a8ee:	2200      	movs	r2, #0
 801a8f0:	4630      	mov	r0, r6
 801a8f2:	4639      	mov	r1, r7
 801a8f4:	f7e6 f8f2 	bl	8000adc <__aeabi_dcmplt>
 801a8f8:	2800      	cmp	r0, #0
 801a8fa:	f000 8081 	beq.w	801aa00 <_dtoa_r+0x4f8>
 801a8fe:	9b01      	ldr	r3, [sp, #4]
 801a900:	2b00      	cmp	r3, #0
 801a902:	d07d      	beq.n	801aa00 <_dtoa_r+0x4f8>
 801a904:	f1b9 0f00 	cmp.w	r9, #0
 801a908:	dd3c      	ble.n	801a984 <_dtoa_r+0x47c>
 801a90a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801a90e:	9307      	str	r3, [sp, #28]
 801a910:	2200      	movs	r2, #0
 801a912:	4b91      	ldr	r3, [pc, #580]	; (801ab58 <_dtoa_r+0x650>)
 801a914:	4630      	mov	r0, r6
 801a916:	4639      	mov	r1, r7
 801a918:	f7e5 fe6e 	bl	80005f8 <__aeabi_dmul>
 801a91c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a920:	3501      	adds	r5, #1
 801a922:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801a926:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801a92a:	4628      	mov	r0, r5
 801a92c:	f7e5 fdfa 	bl	8000524 <__aeabi_i2d>
 801a930:	4632      	mov	r2, r6
 801a932:	463b      	mov	r3, r7
 801a934:	f7e5 fe60 	bl	80005f8 <__aeabi_dmul>
 801a938:	4b88      	ldr	r3, [pc, #544]	; (801ab5c <_dtoa_r+0x654>)
 801a93a:	2200      	movs	r2, #0
 801a93c:	f7e5 fca6 	bl	800028c <__adddf3>
 801a940:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801a944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a948:	9303      	str	r3, [sp, #12]
 801a94a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d15c      	bne.n	801aa0a <_dtoa_r+0x502>
 801a950:	4b83      	ldr	r3, [pc, #524]	; (801ab60 <_dtoa_r+0x658>)
 801a952:	2200      	movs	r2, #0
 801a954:	4630      	mov	r0, r6
 801a956:	4639      	mov	r1, r7
 801a958:	f7e5 fc96 	bl	8000288 <__aeabi_dsub>
 801a95c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a960:	4606      	mov	r6, r0
 801a962:	460f      	mov	r7, r1
 801a964:	f7e6 f8d8 	bl	8000b18 <__aeabi_dcmpgt>
 801a968:	2800      	cmp	r0, #0
 801a96a:	f040 8296 	bne.w	801ae9a <_dtoa_r+0x992>
 801a96e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801a972:	4630      	mov	r0, r6
 801a974:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a978:	4639      	mov	r1, r7
 801a97a:	f7e6 f8af 	bl	8000adc <__aeabi_dcmplt>
 801a97e:	2800      	cmp	r0, #0
 801a980:	f040 8288 	bne.w	801ae94 <_dtoa_r+0x98c>
 801a984:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a988:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a98c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a98e:	2b00      	cmp	r3, #0
 801a990:	f2c0 8158 	blt.w	801ac44 <_dtoa_r+0x73c>
 801a994:	f1ba 0f0e 	cmp.w	sl, #14
 801a998:	f300 8154 	bgt.w	801ac44 <_dtoa_r+0x73c>
 801a99c:	4b6b      	ldr	r3, [pc, #428]	; (801ab4c <_dtoa_r+0x644>)
 801a99e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a9a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	f280 80e3 	bge.w	801ab74 <_dtoa_r+0x66c>
 801a9ae:	9b01      	ldr	r3, [sp, #4]
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	f300 80df 	bgt.w	801ab74 <_dtoa_r+0x66c>
 801a9b6:	f040 826d 	bne.w	801ae94 <_dtoa_r+0x98c>
 801a9ba:	4b69      	ldr	r3, [pc, #420]	; (801ab60 <_dtoa_r+0x658>)
 801a9bc:	2200      	movs	r2, #0
 801a9be:	4640      	mov	r0, r8
 801a9c0:	4649      	mov	r1, r9
 801a9c2:	f7e5 fe19 	bl	80005f8 <__aeabi_dmul>
 801a9c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a9ca:	f7e6 f89b 	bl	8000b04 <__aeabi_dcmpge>
 801a9ce:	9e01      	ldr	r6, [sp, #4]
 801a9d0:	4637      	mov	r7, r6
 801a9d2:	2800      	cmp	r0, #0
 801a9d4:	f040 8243 	bne.w	801ae5e <_dtoa_r+0x956>
 801a9d8:	9d00      	ldr	r5, [sp, #0]
 801a9da:	2331      	movs	r3, #49	; 0x31
 801a9dc:	f805 3b01 	strb.w	r3, [r5], #1
 801a9e0:	f10a 0a01 	add.w	sl, sl, #1
 801a9e4:	e23f      	b.n	801ae66 <_dtoa_r+0x95e>
 801a9e6:	07f2      	lsls	r2, r6, #31
 801a9e8:	d505      	bpl.n	801a9f6 <_dtoa_r+0x4ee>
 801a9ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a9ee:	f7e5 fe03 	bl	80005f8 <__aeabi_dmul>
 801a9f2:	3501      	adds	r5, #1
 801a9f4:	2301      	movs	r3, #1
 801a9f6:	1076      	asrs	r6, r6, #1
 801a9f8:	3708      	adds	r7, #8
 801a9fa:	e76c      	b.n	801a8d6 <_dtoa_r+0x3ce>
 801a9fc:	2502      	movs	r5, #2
 801a9fe:	e76f      	b.n	801a8e0 <_dtoa_r+0x3d8>
 801aa00:	9b01      	ldr	r3, [sp, #4]
 801aa02:	f8cd a01c 	str.w	sl, [sp, #28]
 801aa06:	930c      	str	r3, [sp, #48]	; 0x30
 801aa08:	e78d      	b.n	801a926 <_dtoa_r+0x41e>
 801aa0a:	9900      	ldr	r1, [sp, #0]
 801aa0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801aa0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801aa10:	4b4e      	ldr	r3, [pc, #312]	; (801ab4c <_dtoa_r+0x644>)
 801aa12:	ed9d 7b02 	vldr	d7, [sp, #8]
 801aa16:	4401      	add	r1, r0
 801aa18:	9102      	str	r1, [sp, #8]
 801aa1a:	9908      	ldr	r1, [sp, #32]
 801aa1c:	eeb0 8a47 	vmov.f32	s16, s14
 801aa20:	eef0 8a67 	vmov.f32	s17, s15
 801aa24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801aa28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801aa2c:	2900      	cmp	r1, #0
 801aa2e:	d045      	beq.n	801aabc <_dtoa_r+0x5b4>
 801aa30:	494c      	ldr	r1, [pc, #304]	; (801ab64 <_dtoa_r+0x65c>)
 801aa32:	2000      	movs	r0, #0
 801aa34:	f7e5 ff0a 	bl	800084c <__aeabi_ddiv>
 801aa38:	ec53 2b18 	vmov	r2, r3, d8
 801aa3c:	f7e5 fc24 	bl	8000288 <__aeabi_dsub>
 801aa40:	9d00      	ldr	r5, [sp, #0]
 801aa42:	ec41 0b18 	vmov	d8, r0, r1
 801aa46:	4639      	mov	r1, r7
 801aa48:	4630      	mov	r0, r6
 801aa4a:	f7e6 f885 	bl	8000b58 <__aeabi_d2iz>
 801aa4e:	900c      	str	r0, [sp, #48]	; 0x30
 801aa50:	f7e5 fd68 	bl	8000524 <__aeabi_i2d>
 801aa54:	4602      	mov	r2, r0
 801aa56:	460b      	mov	r3, r1
 801aa58:	4630      	mov	r0, r6
 801aa5a:	4639      	mov	r1, r7
 801aa5c:	f7e5 fc14 	bl	8000288 <__aeabi_dsub>
 801aa60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa62:	3330      	adds	r3, #48	; 0x30
 801aa64:	f805 3b01 	strb.w	r3, [r5], #1
 801aa68:	ec53 2b18 	vmov	r2, r3, d8
 801aa6c:	4606      	mov	r6, r0
 801aa6e:	460f      	mov	r7, r1
 801aa70:	f7e6 f834 	bl	8000adc <__aeabi_dcmplt>
 801aa74:	2800      	cmp	r0, #0
 801aa76:	d165      	bne.n	801ab44 <_dtoa_r+0x63c>
 801aa78:	4632      	mov	r2, r6
 801aa7a:	463b      	mov	r3, r7
 801aa7c:	4935      	ldr	r1, [pc, #212]	; (801ab54 <_dtoa_r+0x64c>)
 801aa7e:	2000      	movs	r0, #0
 801aa80:	f7e5 fc02 	bl	8000288 <__aeabi_dsub>
 801aa84:	ec53 2b18 	vmov	r2, r3, d8
 801aa88:	f7e6 f828 	bl	8000adc <__aeabi_dcmplt>
 801aa8c:	2800      	cmp	r0, #0
 801aa8e:	f040 80b9 	bne.w	801ac04 <_dtoa_r+0x6fc>
 801aa92:	9b02      	ldr	r3, [sp, #8]
 801aa94:	429d      	cmp	r5, r3
 801aa96:	f43f af75 	beq.w	801a984 <_dtoa_r+0x47c>
 801aa9a:	4b2f      	ldr	r3, [pc, #188]	; (801ab58 <_dtoa_r+0x650>)
 801aa9c:	ec51 0b18 	vmov	r0, r1, d8
 801aaa0:	2200      	movs	r2, #0
 801aaa2:	f7e5 fda9 	bl	80005f8 <__aeabi_dmul>
 801aaa6:	4b2c      	ldr	r3, [pc, #176]	; (801ab58 <_dtoa_r+0x650>)
 801aaa8:	ec41 0b18 	vmov	d8, r0, r1
 801aaac:	2200      	movs	r2, #0
 801aaae:	4630      	mov	r0, r6
 801aab0:	4639      	mov	r1, r7
 801aab2:	f7e5 fda1 	bl	80005f8 <__aeabi_dmul>
 801aab6:	4606      	mov	r6, r0
 801aab8:	460f      	mov	r7, r1
 801aaba:	e7c4      	b.n	801aa46 <_dtoa_r+0x53e>
 801aabc:	ec51 0b17 	vmov	r0, r1, d7
 801aac0:	f7e5 fd9a 	bl	80005f8 <__aeabi_dmul>
 801aac4:	9b02      	ldr	r3, [sp, #8]
 801aac6:	9d00      	ldr	r5, [sp, #0]
 801aac8:	930c      	str	r3, [sp, #48]	; 0x30
 801aaca:	ec41 0b18 	vmov	d8, r0, r1
 801aace:	4639      	mov	r1, r7
 801aad0:	4630      	mov	r0, r6
 801aad2:	f7e6 f841 	bl	8000b58 <__aeabi_d2iz>
 801aad6:	9011      	str	r0, [sp, #68]	; 0x44
 801aad8:	f7e5 fd24 	bl	8000524 <__aeabi_i2d>
 801aadc:	4602      	mov	r2, r0
 801aade:	460b      	mov	r3, r1
 801aae0:	4630      	mov	r0, r6
 801aae2:	4639      	mov	r1, r7
 801aae4:	f7e5 fbd0 	bl	8000288 <__aeabi_dsub>
 801aae8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801aaea:	3330      	adds	r3, #48	; 0x30
 801aaec:	f805 3b01 	strb.w	r3, [r5], #1
 801aaf0:	9b02      	ldr	r3, [sp, #8]
 801aaf2:	429d      	cmp	r5, r3
 801aaf4:	4606      	mov	r6, r0
 801aaf6:	460f      	mov	r7, r1
 801aaf8:	f04f 0200 	mov.w	r2, #0
 801aafc:	d134      	bne.n	801ab68 <_dtoa_r+0x660>
 801aafe:	4b19      	ldr	r3, [pc, #100]	; (801ab64 <_dtoa_r+0x65c>)
 801ab00:	ec51 0b18 	vmov	r0, r1, d8
 801ab04:	f7e5 fbc2 	bl	800028c <__adddf3>
 801ab08:	4602      	mov	r2, r0
 801ab0a:	460b      	mov	r3, r1
 801ab0c:	4630      	mov	r0, r6
 801ab0e:	4639      	mov	r1, r7
 801ab10:	f7e6 f802 	bl	8000b18 <__aeabi_dcmpgt>
 801ab14:	2800      	cmp	r0, #0
 801ab16:	d175      	bne.n	801ac04 <_dtoa_r+0x6fc>
 801ab18:	ec53 2b18 	vmov	r2, r3, d8
 801ab1c:	4911      	ldr	r1, [pc, #68]	; (801ab64 <_dtoa_r+0x65c>)
 801ab1e:	2000      	movs	r0, #0
 801ab20:	f7e5 fbb2 	bl	8000288 <__aeabi_dsub>
 801ab24:	4602      	mov	r2, r0
 801ab26:	460b      	mov	r3, r1
 801ab28:	4630      	mov	r0, r6
 801ab2a:	4639      	mov	r1, r7
 801ab2c:	f7e5 ffd6 	bl	8000adc <__aeabi_dcmplt>
 801ab30:	2800      	cmp	r0, #0
 801ab32:	f43f af27 	beq.w	801a984 <_dtoa_r+0x47c>
 801ab36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ab38:	1e6b      	subs	r3, r5, #1
 801ab3a:	930c      	str	r3, [sp, #48]	; 0x30
 801ab3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ab40:	2b30      	cmp	r3, #48	; 0x30
 801ab42:	d0f8      	beq.n	801ab36 <_dtoa_r+0x62e>
 801ab44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ab48:	e04a      	b.n	801abe0 <_dtoa_r+0x6d8>
 801ab4a:	bf00      	nop
 801ab4c:	0801f8c0 	.word	0x0801f8c0
 801ab50:	0801f898 	.word	0x0801f898
 801ab54:	3ff00000 	.word	0x3ff00000
 801ab58:	40240000 	.word	0x40240000
 801ab5c:	401c0000 	.word	0x401c0000
 801ab60:	40140000 	.word	0x40140000
 801ab64:	3fe00000 	.word	0x3fe00000
 801ab68:	4baf      	ldr	r3, [pc, #700]	; (801ae28 <_dtoa_r+0x920>)
 801ab6a:	f7e5 fd45 	bl	80005f8 <__aeabi_dmul>
 801ab6e:	4606      	mov	r6, r0
 801ab70:	460f      	mov	r7, r1
 801ab72:	e7ac      	b.n	801aace <_dtoa_r+0x5c6>
 801ab74:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ab78:	9d00      	ldr	r5, [sp, #0]
 801ab7a:	4642      	mov	r2, r8
 801ab7c:	464b      	mov	r3, r9
 801ab7e:	4630      	mov	r0, r6
 801ab80:	4639      	mov	r1, r7
 801ab82:	f7e5 fe63 	bl	800084c <__aeabi_ddiv>
 801ab86:	f7e5 ffe7 	bl	8000b58 <__aeabi_d2iz>
 801ab8a:	9002      	str	r0, [sp, #8]
 801ab8c:	f7e5 fcca 	bl	8000524 <__aeabi_i2d>
 801ab90:	4642      	mov	r2, r8
 801ab92:	464b      	mov	r3, r9
 801ab94:	f7e5 fd30 	bl	80005f8 <__aeabi_dmul>
 801ab98:	4602      	mov	r2, r0
 801ab9a:	460b      	mov	r3, r1
 801ab9c:	4630      	mov	r0, r6
 801ab9e:	4639      	mov	r1, r7
 801aba0:	f7e5 fb72 	bl	8000288 <__aeabi_dsub>
 801aba4:	9e02      	ldr	r6, [sp, #8]
 801aba6:	9f01      	ldr	r7, [sp, #4]
 801aba8:	3630      	adds	r6, #48	; 0x30
 801abaa:	f805 6b01 	strb.w	r6, [r5], #1
 801abae:	9e00      	ldr	r6, [sp, #0]
 801abb0:	1bae      	subs	r6, r5, r6
 801abb2:	42b7      	cmp	r7, r6
 801abb4:	4602      	mov	r2, r0
 801abb6:	460b      	mov	r3, r1
 801abb8:	d137      	bne.n	801ac2a <_dtoa_r+0x722>
 801abba:	f7e5 fb67 	bl	800028c <__adddf3>
 801abbe:	4642      	mov	r2, r8
 801abc0:	464b      	mov	r3, r9
 801abc2:	4606      	mov	r6, r0
 801abc4:	460f      	mov	r7, r1
 801abc6:	f7e5 ffa7 	bl	8000b18 <__aeabi_dcmpgt>
 801abca:	b9c8      	cbnz	r0, 801ac00 <_dtoa_r+0x6f8>
 801abcc:	4642      	mov	r2, r8
 801abce:	464b      	mov	r3, r9
 801abd0:	4630      	mov	r0, r6
 801abd2:	4639      	mov	r1, r7
 801abd4:	f7e5 ff78 	bl	8000ac8 <__aeabi_dcmpeq>
 801abd8:	b110      	cbz	r0, 801abe0 <_dtoa_r+0x6d8>
 801abda:	9b02      	ldr	r3, [sp, #8]
 801abdc:	07d9      	lsls	r1, r3, #31
 801abde:	d40f      	bmi.n	801ac00 <_dtoa_r+0x6f8>
 801abe0:	4620      	mov	r0, r4
 801abe2:	4659      	mov	r1, fp
 801abe4:	f000 fcfe 	bl	801b5e4 <_Bfree>
 801abe8:	2300      	movs	r3, #0
 801abea:	702b      	strb	r3, [r5, #0]
 801abec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801abee:	f10a 0001 	add.w	r0, sl, #1
 801abf2:	6018      	str	r0, [r3, #0]
 801abf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	f43f acd8 	beq.w	801a5ac <_dtoa_r+0xa4>
 801abfc:	601d      	str	r5, [r3, #0]
 801abfe:	e4d5      	b.n	801a5ac <_dtoa_r+0xa4>
 801ac00:	f8cd a01c 	str.w	sl, [sp, #28]
 801ac04:	462b      	mov	r3, r5
 801ac06:	461d      	mov	r5, r3
 801ac08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ac0c:	2a39      	cmp	r2, #57	; 0x39
 801ac0e:	d108      	bne.n	801ac22 <_dtoa_r+0x71a>
 801ac10:	9a00      	ldr	r2, [sp, #0]
 801ac12:	429a      	cmp	r2, r3
 801ac14:	d1f7      	bne.n	801ac06 <_dtoa_r+0x6fe>
 801ac16:	9a07      	ldr	r2, [sp, #28]
 801ac18:	9900      	ldr	r1, [sp, #0]
 801ac1a:	3201      	adds	r2, #1
 801ac1c:	9207      	str	r2, [sp, #28]
 801ac1e:	2230      	movs	r2, #48	; 0x30
 801ac20:	700a      	strb	r2, [r1, #0]
 801ac22:	781a      	ldrb	r2, [r3, #0]
 801ac24:	3201      	adds	r2, #1
 801ac26:	701a      	strb	r2, [r3, #0]
 801ac28:	e78c      	b.n	801ab44 <_dtoa_r+0x63c>
 801ac2a:	4b7f      	ldr	r3, [pc, #508]	; (801ae28 <_dtoa_r+0x920>)
 801ac2c:	2200      	movs	r2, #0
 801ac2e:	f7e5 fce3 	bl	80005f8 <__aeabi_dmul>
 801ac32:	2200      	movs	r2, #0
 801ac34:	2300      	movs	r3, #0
 801ac36:	4606      	mov	r6, r0
 801ac38:	460f      	mov	r7, r1
 801ac3a:	f7e5 ff45 	bl	8000ac8 <__aeabi_dcmpeq>
 801ac3e:	2800      	cmp	r0, #0
 801ac40:	d09b      	beq.n	801ab7a <_dtoa_r+0x672>
 801ac42:	e7cd      	b.n	801abe0 <_dtoa_r+0x6d8>
 801ac44:	9a08      	ldr	r2, [sp, #32]
 801ac46:	2a00      	cmp	r2, #0
 801ac48:	f000 80c4 	beq.w	801add4 <_dtoa_r+0x8cc>
 801ac4c:	9a05      	ldr	r2, [sp, #20]
 801ac4e:	2a01      	cmp	r2, #1
 801ac50:	f300 80a8 	bgt.w	801ada4 <_dtoa_r+0x89c>
 801ac54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ac56:	2a00      	cmp	r2, #0
 801ac58:	f000 80a0 	beq.w	801ad9c <_dtoa_r+0x894>
 801ac5c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ac60:	9e06      	ldr	r6, [sp, #24]
 801ac62:	4645      	mov	r5, r8
 801ac64:	9a04      	ldr	r2, [sp, #16]
 801ac66:	2101      	movs	r1, #1
 801ac68:	441a      	add	r2, r3
 801ac6a:	4620      	mov	r0, r4
 801ac6c:	4498      	add	r8, r3
 801ac6e:	9204      	str	r2, [sp, #16]
 801ac70:	f000 fd74 	bl	801b75c <__i2b>
 801ac74:	4607      	mov	r7, r0
 801ac76:	2d00      	cmp	r5, #0
 801ac78:	dd0b      	ble.n	801ac92 <_dtoa_r+0x78a>
 801ac7a:	9b04      	ldr	r3, [sp, #16]
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	dd08      	ble.n	801ac92 <_dtoa_r+0x78a>
 801ac80:	42ab      	cmp	r3, r5
 801ac82:	9a04      	ldr	r2, [sp, #16]
 801ac84:	bfa8      	it	ge
 801ac86:	462b      	movge	r3, r5
 801ac88:	eba8 0803 	sub.w	r8, r8, r3
 801ac8c:	1aed      	subs	r5, r5, r3
 801ac8e:	1ad3      	subs	r3, r2, r3
 801ac90:	9304      	str	r3, [sp, #16]
 801ac92:	9b06      	ldr	r3, [sp, #24]
 801ac94:	b1fb      	cbz	r3, 801acd6 <_dtoa_r+0x7ce>
 801ac96:	9b08      	ldr	r3, [sp, #32]
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	f000 809f 	beq.w	801addc <_dtoa_r+0x8d4>
 801ac9e:	2e00      	cmp	r6, #0
 801aca0:	dd11      	ble.n	801acc6 <_dtoa_r+0x7be>
 801aca2:	4639      	mov	r1, r7
 801aca4:	4632      	mov	r2, r6
 801aca6:	4620      	mov	r0, r4
 801aca8:	f000 fe14 	bl	801b8d4 <__pow5mult>
 801acac:	465a      	mov	r2, fp
 801acae:	4601      	mov	r1, r0
 801acb0:	4607      	mov	r7, r0
 801acb2:	4620      	mov	r0, r4
 801acb4:	f000 fd68 	bl	801b788 <__multiply>
 801acb8:	4659      	mov	r1, fp
 801acba:	9007      	str	r0, [sp, #28]
 801acbc:	4620      	mov	r0, r4
 801acbe:	f000 fc91 	bl	801b5e4 <_Bfree>
 801acc2:	9b07      	ldr	r3, [sp, #28]
 801acc4:	469b      	mov	fp, r3
 801acc6:	9b06      	ldr	r3, [sp, #24]
 801acc8:	1b9a      	subs	r2, r3, r6
 801acca:	d004      	beq.n	801acd6 <_dtoa_r+0x7ce>
 801accc:	4659      	mov	r1, fp
 801acce:	4620      	mov	r0, r4
 801acd0:	f000 fe00 	bl	801b8d4 <__pow5mult>
 801acd4:	4683      	mov	fp, r0
 801acd6:	2101      	movs	r1, #1
 801acd8:	4620      	mov	r0, r4
 801acda:	f000 fd3f 	bl	801b75c <__i2b>
 801acde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	4606      	mov	r6, r0
 801ace4:	dd7c      	ble.n	801ade0 <_dtoa_r+0x8d8>
 801ace6:	461a      	mov	r2, r3
 801ace8:	4601      	mov	r1, r0
 801acea:	4620      	mov	r0, r4
 801acec:	f000 fdf2 	bl	801b8d4 <__pow5mult>
 801acf0:	9b05      	ldr	r3, [sp, #20]
 801acf2:	2b01      	cmp	r3, #1
 801acf4:	4606      	mov	r6, r0
 801acf6:	dd76      	ble.n	801ade6 <_dtoa_r+0x8de>
 801acf8:	2300      	movs	r3, #0
 801acfa:	9306      	str	r3, [sp, #24]
 801acfc:	6933      	ldr	r3, [r6, #16]
 801acfe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801ad02:	6918      	ldr	r0, [r3, #16]
 801ad04:	f000 fcda 	bl	801b6bc <__hi0bits>
 801ad08:	f1c0 0020 	rsb	r0, r0, #32
 801ad0c:	9b04      	ldr	r3, [sp, #16]
 801ad0e:	4418      	add	r0, r3
 801ad10:	f010 001f 	ands.w	r0, r0, #31
 801ad14:	f000 8086 	beq.w	801ae24 <_dtoa_r+0x91c>
 801ad18:	f1c0 0320 	rsb	r3, r0, #32
 801ad1c:	2b04      	cmp	r3, #4
 801ad1e:	dd7f      	ble.n	801ae20 <_dtoa_r+0x918>
 801ad20:	f1c0 001c 	rsb	r0, r0, #28
 801ad24:	9b04      	ldr	r3, [sp, #16]
 801ad26:	4403      	add	r3, r0
 801ad28:	4480      	add	r8, r0
 801ad2a:	4405      	add	r5, r0
 801ad2c:	9304      	str	r3, [sp, #16]
 801ad2e:	f1b8 0f00 	cmp.w	r8, #0
 801ad32:	dd05      	ble.n	801ad40 <_dtoa_r+0x838>
 801ad34:	4659      	mov	r1, fp
 801ad36:	4642      	mov	r2, r8
 801ad38:	4620      	mov	r0, r4
 801ad3a:	f000 fe25 	bl	801b988 <__lshift>
 801ad3e:	4683      	mov	fp, r0
 801ad40:	9b04      	ldr	r3, [sp, #16]
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	dd05      	ble.n	801ad52 <_dtoa_r+0x84a>
 801ad46:	4631      	mov	r1, r6
 801ad48:	461a      	mov	r2, r3
 801ad4a:	4620      	mov	r0, r4
 801ad4c:	f000 fe1c 	bl	801b988 <__lshift>
 801ad50:	4606      	mov	r6, r0
 801ad52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d069      	beq.n	801ae2c <_dtoa_r+0x924>
 801ad58:	4631      	mov	r1, r6
 801ad5a:	4658      	mov	r0, fp
 801ad5c:	f000 fe80 	bl	801ba60 <__mcmp>
 801ad60:	2800      	cmp	r0, #0
 801ad62:	da63      	bge.n	801ae2c <_dtoa_r+0x924>
 801ad64:	2300      	movs	r3, #0
 801ad66:	4659      	mov	r1, fp
 801ad68:	220a      	movs	r2, #10
 801ad6a:	4620      	mov	r0, r4
 801ad6c:	f000 fc5c 	bl	801b628 <__multadd>
 801ad70:	9b08      	ldr	r3, [sp, #32]
 801ad72:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ad76:	4683      	mov	fp, r0
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	f000 818f 	beq.w	801b09c <_dtoa_r+0xb94>
 801ad7e:	4639      	mov	r1, r7
 801ad80:	2300      	movs	r3, #0
 801ad82:	220a      	movs	r2, #10
 801ad84:	4620      	mov	r0, r4
 801ad86:	f000 fc4f 	bl	801b628 <__multadd>
 801ad8a:	f1b9 0f00 	cmp.w	r9, #0
 801ad8e:	4607      	mov	r7, r0
 801ad90:	f300 808e 	bgt.w	801aeb0 <_dtoa_r+0x9a8>
 801ad94:	9b05      	ldr	r3, [sp, #20]
 801ad96:	2b02      	cmp	r3, #2
 801ad98:	dc50      	bgt.n	801ae3c <_dtoa_r+0x934>
 801ad9a:	e089      	b.n	801aeb0 <_dtoa_r+0x9a8>
 801ad9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ad9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ada2:	e75d      	b.n	801ac60 <_dtoa_r+0x758>
 801ada4:	9b01      	ldr	r3, [sp, #4]
 801ada6:	1e5e      	subs	r6, r3, #1
 801ada8:	9b06      	ldr	r3, [sp, #24]
 801adaa:	42b3      	cmp	r3, r6
 801adac:	bfbf      	itttt	lt
 801adae:	9b06      	ldrlt	r3, [sp, #24]
 801adb0:	9606      	strlt	r6, [sp, #24]
 801adb2:	1af2      	sublt	r2, r6, r3
 801adb4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801adb6:	bfb6      	itet	lt
 801adb8:	189b      	addlt	r3, r3, r2
 801adba:	1b9e      	subge	r6, r3, r6
 801adbc:	930d      	strlt	r3, [sp, #52]	; 0x34
 801adbe:	9b01      	ldr	r3, [sp, #4]
 801adc0:	bfb8      	it	lt
 801adc2:	2600      	movlt	r6, #0
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	bfb5      	itete	lt
 801adc8:	eba8 0503 	sublt.w	r5, r8, r3
 801adcc:	9b01      	ldrge	r3, [sp, #4]
 801adce:	2300      	movlt	r3, #0
 801add0:	4645      	movge	r5, r8
 801add2:	e747      	b.n	801ac64 <_dtoa_r+0x75c>
 801add4:	9e06      	ldr	r6, [sp, #24]
 801add6:	9f08      	ldr	r7, [sp, #32]
 801add8:	4645      	mov	r5, r8
 801adda:	e74c      	b.n	801ac76 <_dtoa_r+0x76e>
 801addc:	9a06      	ldr	r2, [sp, #24]
 801adde:	e775      	b.n	801accc <_dtoa_r+0x7c4>
 801ade0:	9b05      	ldr	r3, [sp, #20]
 801ade2:	2b01      	cmp	r3, #1
 801ade4:	dc18      	bgt.n	801ae18 <_dtoa_r+0x910>
 801ade6:	9b02      	ldr	r3, [sp, #8]
 801ade8:	b9b3      	cbnz	r3, 801ae18 <_dtoa_r+0x910>
 801adea:	9b03      	ldr	r3, [sp, #12]
 801adec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801adf0:	b9a3      	cbnz	r3, 801ae1c <_dtoa_r+0x914>
 801adf2:	9b03      	ldr	r3, [sp, #12]
 801adf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801adf8:	0d1b      	lsrs	r3, r3, #20
 801adfa:	051b      	lsls	r3, r3, #20
 801adfc:	b12b      	cbz	r3, 801ae0a <_dtoa_r+0x902>
 801adfe:	9b04      	ldr	r3, [sp, #16]
 801ae00:	3301      	adds	r3, #1
 801ae02:	9304      	str	r3, [sp, #16]
 801ae04:	f108 0801 	add.w	r8, r8, #1
 801ae08:	2301      	movs	r3, #1
 801ae0a:	9306      	str	r3, [sp, #24]
 801ae0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	f47f af74 	bne.w	801acfc <_dtoa_r+0x7f4>
 801ae14:	2001      	movs	r0, #1
 801ae16:	e779      	b.n	801ad0c <_dtoa_r+0x804>
 801ae18:	2300      	movs	r3, #0
 801ae1a:	e7f6      	b.n	801ae0a <_dtoa_r+0x902>
 801ae1c:	9b02      	ldr	r3, [sp, #8]
 801ae1e:	e7f4      	b.n	801ae0a <_dtoa_r+0x902>
 801ae20:	d085      	beq.n	801ad2e <_dtoa_r+0x826>
 801ae22:	4618      	mov	r0, r3
 801ae24:	301c      	adds	r0, #28
 801ae26:	e77d      	b.n	801ad24 <_dtoa_r+0x81c>
 801ae28:	40240000 	.word	0x40240000
 801ae2c:	9b01      	ldr	r3, [sp, #4]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	dc38      	bgt.n	801aea4 <_dtoa_r+0x99c>
 801ae32:	9b05      	ldr	r3, [sp, #20]
 801ae34:	2b02      	cmp	r3, #2
 801ae36:	dd35      	ble.n	801aea4 <_dtoa_r+0x99c>
 801ae38:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801ae3c:	f1b9 0f00 	cmp.w	r9, #0
 801ae40:	d10d      	bne.n	801ae5e <_dtoa_r+0x956>
 801ae42:	4631      	mov	r1, r6
 801ae44:	464b      	mov	r3, r9
 801ae46:	2205      	movs	r2, #5
 801ae48:	4620      	mov	r0, r4
 801ae4a:	f000 fbed 	bl	801b628 <__multadd>
 801ae4e:	4601      	mov	r1, r0
 801ae50:	4606      	mov	r6, r0
 801ae52:	4658      	mov	r0, fp
 801ae54:	f000 fe04 	bl	801ba60 <__mcmp>
 801ae58:	2800      	cmp	r0, #0
 801ae5a:	f73f adbd 	bgt.w	801a9d8 <_dtoa_r+0x4d0>
 801ae5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae60:	9d00      	ldr	r5, [sp, #0]
 801ae62:	ea6f 0a03 	mvn.w	sl, r3
 801ae66:	f04f 0800 	mov.w	r8, #0
 801ae6a:	4631      	mov	r1, r6
 801ae6c:	4620      	mov	r0, r4
 801ae6e:	f000 fbb9 	bl	801b5e4 <_Bfree>
 801ae72:	2f00      	cmp	r7, #0
 801ae74:	f43f aeb4 	beq.w	801abe0 <_dtoa_r+0x6d8>
 801ae78:	f1b8 0f00 	cmp.w	r8, #0
 801ae7c:	d005      	beq.n	801ae8a <_dtoa_r+0x982>
 801ae7e:	45b8      	cmp	r8, r7
 801ae80:	d003      	beq.n	801ae8a <_dtoa_r+0x982>
 801ae82:	4641      	mov	r1, r8
 801ae84:	4620      	mov	r0, r4
 801ae86:	f000 fbad 	bl	801b5e4 <_Bfree>
 801ae8a:	4639      	mov	r1, r7
 801ae8c:	4620      	mov	r0, r4
 801ae8e:	f000 fba9 	bl	801b5e4 <_Bfree>
 801ae92:	e6a5      	b.n	801abe0 <_dtoa_r+0x6d8>
 801ae94:	2600      	movs	r6, #0
 801ae96:	4637      	mov	r7, r6
 801ae98:	e7e1      	b.n	801ae5e <_dtoa_r+0x956>
 801ae9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ae9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801aea0:	4637      	mov	r7, r6
 801aea2:	e599      	b.n	801a9d8 <_dtoa_r+0x4d0>
 801aea4:	9b08      	ldr	r3, [sp, #32]
 801aea6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	f000 80fd 	beq.w	801b0aa <_dtoa_r+0xba2>
 801aeb0:	2d00      	cmp	r5, #0
 801aeb2:	dd05      	ble.n	801aec0 <_dtoa_r+0x9b8>
 801aeb4:	4639      	mov	r1, r7
 801aeb6:	462a      	mov	r2, r5
 801aeb8:	4620      	mov	r0, r4
 801aeba:	f000 fd65 	bl	801b988 <__lshift>
 801aebe:	4607      	mov	r7, r0
 801aec0:	9b06      	ldr	r3, [sp, #24]
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d05c      	beq.n	801af80 <_dtoa_r+0xa78>
 801aec6:	6879      	ldr	r1, [r7, #4]
 801aec8:	4620      	mov	r0, r4
 801aeca:	f000 fb4b 	bl	801b564 <_Balloc>
 801aece:	4605      	mov	r5, r0
 801aed0:	b928      	cbnz	r0, 801aede <_dtoa_r+0x9d6>
 801aed2:	4b80      	ldr	r3, [pc, #512]	; (801b0d4 <_dtoa_r+0xbcc>)
 801aed4:	4602      	mov	r2, r0
 801aed6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801aeda:	f7ff bb2e 	b.w	801a53a <_dtoa_r+0x32>
 801aede:	693a      	ldr	r2, [r7, #16]
 801aee0:	3202      	adds	r2, #2
 801aee2:	0092      	lsls	r2, r2, #2
 801aee4:	f107 010c 	add.w	r1, r7, #12
 801aee8:	300c      	adds	r0, #12
 801aeea:	f7fe fbfb 	bl	80196e4 <memcpy>
 801aeee:	2201      	movs	r2, #1
 801aef0:	4629      	mov	r1, r5
 801aef2:	4620      	mov	r0, r4
 801aef4:	f000 fd48 	bl	801b988 <__lshift>
 801aef8:	9b00      	ldr	r3, [sp, #0]
 801aefa:	3301      	adds	r3, #1
 801aefc:	9301      	str	r3, [sp, #4]
 801aefe:	9b00      	ldr	r3, [sp, #0]
 801af00:	444b      	add	r3, r9
 801af02:	9307      	str	r3, [sp, #28]
 801af04:	9b02      	ldr	r3, [sp, #8]
 801af06:	f003 0301 	and.w	r3, r3, #1
 801af0a:	46b8      	mov	r8, r7
 801af0c:	9306      	str	r3, [sp, #24]
 801af0e:	4607      	mov	r7, r0
 801af10:	9b01      	ldr	r3, [sp, #4]
 801af12:	4631      	mov	r1, r6
 801af14:	3b01      	subs	r3, #1
 801af16:	4658      	mov	r0, fp
 801af18:	9302      	str	r3, [sp, #8]
 801af1a:	f7ff fa69 	bl	801a3f0 <quorem>
 801af1e:	4603      	mov	r3, r0
 801af20:	3330      	adds	r3, #48	; 0x30
 801af22:	9004      	str	r0, [sp, #16]
 801af24:	4641      	mov	r1, r8
 801af26:	4658      	mov	r0, fp
 801af28:	9308      	str	r3, [sp, #32]
 801af2a:	f000 fd99 	bl	801ba60 <__mcmp>
 801af2e:	463a      	mov	r2, r7
 801af30:	4681      	mov	r9, r0
 801af32:	4631      	mov	r1, r6
 801af34:	4620      	mov	r0, r4
 801af36:	f000 fdaf 	bl	801ba98 <__mdiff>
 801af3a:	68c2      	ldr	r2, [r0, #12]
 801af3c:	9b08      	ldr	r3, [sp, #32]
 801af3e:	4605      	mov	r5, r0
 801af40:	bb02      	cbnz	r2, 801af84 <_dtoa_r+0xa7c>
 801af42:	4601      	mov	r1, r0
 801af44:	4658      	mov	r0, fp
 801af46:	f000 fd8b 	bl	801ba60 <__mcmp>
 801af4a:	9b08      	ldr	r3, [sp, #32]
 801af4c:	4602      	mov	r2, r0
 801af4e:	4629      	mov	r1, r5
 801af50:	4620      	mov	r0, r4
 801af52:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801af56:	f000 fb45 	bl	801b5e4 <_Bfree>
 801af5a:	9b05      	ldr	r3, [sp, #20]
 801af5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801af5e:	9d01      	ldr	r5, [sp, #4]
 801af60:	ea43 0102 	orr.w	r1, r3, r2
 801af64:	9b06      	ldr	r3, [sp, #24]
 801af66:	430b      	orrs	r3, r1
 801af68:	9b08      	ldr	r3, [sp, #32]
 801af6a:	d10d      	bne.n	801af88 <_dtoa_r+0xa80>
 801af6c:	2b39      	cmp	r3, #57	; 0x39
 801af6e:	d029      	beq.n	801afc4 <_dtoa_r+0xabc>
 801af70:	f1b9 0f00 	cmp.w	r9, #0
 801af74:	dd01      	ble.n	801af7a <_dtoa_r+0xa72>
 801af76:	9b04      	ldr	r3, [sp, #16]
 801af78:	3331      	adds	r3, #49	; 0x31
 801af7a:	9a02      	ldr	r2, [sp, #8]
 801af7c:	7013      	strb	r3, [r2, #0]
 801af7e:	e774      	b.n	801ae6a <_dtoa_r+0x962>
 801af80:	4638      	mov	r0, r7
 801af82:	e7b9      	b.n	801aef8 <_dtoa_r+0x9f0>
 801af84:	2201      	movs	r2, #1
 801af86:	e7e2      	b.n	801af4e <_dtoa_r+0xa46>
 801af88:	f1b9 0f00 	cmp.w	r9, #0
 801af8c:	db06      	blt.n	801af9c <_dtoa_r+0xa94>
 801af8e:	9905      	ldr	r1, [sp, #20]
 801af90:	ea41 0909 	orr.w	r9, r1, r9
 801af94:	9906      	ldr	r1, [sp, #24]
 801af96:	ea59 0101 	orrs.w	r1, r9, r1
 801af9a:	d120      	bne.n	801afde <_dtoa_r+0xad6>
 801af9c:	2a00      	cmp	r2, #0
 801af9e:	ddec      	ble.n	801af7a <_dtoa_r+0xa72>
 801afa0:	4659      	mov	r1, fp
 801afa2:	2201      	movs	r2, #1
 801afa4:	4620      	mov	r0, r4
 801afa6:	9301      	str	r3, [sp, #4]
 801afa8:	f000 fcee 	bl	801b988 <__lshift>
 801afac:	4631      	mov	r1, r6
 801afae:	4683      	mov	fp, r0
 801afb0:	f000 fd56 	bl	801ba60 <__mcmp>
 801afb4:	2800      	cmp	r0, #0
 801afb6:	9b01      	ldr	r3, [sp, #4]
 801afb8:	dc02      	bgt.n	801afc0 <_dtoa_r+0xab8>
 801afba:	d1de      	bne.n	801af7a <_dtoa_r+0xa72>
 801afbc:	07da      	lsls	r2, r3, #31
 801afbe:	d5dc      	bpl.n	801af7a <_dtoa_r+0xa72>
 801afc0:	2b39      	cmp	r3, #57	; 0x39
 801afc2:	d1d8      	bne.n	801af76 <_dtoa_r+0xa6e>
 801afc4:	9a02      	ldr	r2, [sp, #8]
 801afc6:	2339      	movs	r3, #57	; 0x39
 801afc8:	7013      	strb	r3, [r2, #0]
 801afca:	462b      	mov	r3, r5
 801afcc:	461d      	mov	r5, r3
 801afce:	3b01      	subs	r3, #1
 801afd0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801afd4:	2a39      	cmp	r2, #57	; 0x39
 801afd6:	d050      	beq.n	801b07a <_dtoa_r+0xb72>
 801afd8:	3201      	adds	r2, #1
 801afda:	701a      	strb	r2, [r3, #0]
 801afdc:	e745      	b.n	801ae6a <_dtoa_r+0x962>
 801afde:	2a00      	cmp	r2, #0
 801afe0:	dd03      	ble.n	801afea <_dtoa_r+0xae2>
 801afe2:	2b39      	cmp	r3, #57	; 0x39
 801afe4:	d0ee      	beq.n	801afc4 <_dtoa_r+0xabc>
 801afe6:	3301      	adds	r3, #1
 801afe8:	e7c7      	b.n	801af7a <_dtoa_r+0xa72>
 801afea:	9a01      	ldr	r2, [sp, #4]
 801afec:	9907      	ldr	r1, [sp, #28]
 801afee:	f802 3c01 	strb.w	r3, [r2, #-1]
 801aff2:	428a      	cmp	r2, r1
 801aff4:	d02a      	beq.n	801b04c <_dtoa_r+0xb44>
 801aff6:	4659      	mov	r1, fp
 801aff8:	2300      	movs	r3, #0
 801affa:	220a      	movs	r2, #10
 801affc:	4620      	mov	r0, r4
 801affe:	f000 fb13 	bl	801b628 <__multadd>
 801b002:	45b8      	cmp	r8, r7
 801b004:	4683      	mov	fp, r0
 801b006:	f04f 0300 	mov.w	r3, #0
 801b00a:	f04f 020a 	mov.w	r2, #10
 801b00e:	4641      	mov	r1, r8
 801b010:	4620      	mov	r0, r4
 801b012:	d107      	bne.n	801b024 <_dtoa_r+0xb1c>
 801b014:	f000 fb08 	bl	801b628 <__multadd>
 801b018:	4680      	mov	r8, r0
 801b01a:	4607      	mov	r7, r0
 801b01c:	9b01      	ldr	r3, [sp, #4]
 801b01e:	3301      	adds	r3, #1
 801b020:	9301      	str	r3, [sp, #4]
 801b022:	e775      	b.n	801af10 <_dtoa_r+0xa08>
 801b024:	f000 fb00 	bl	801b628 <__multadd>
 801b028:	4639      	mov	r1, r7
 801b02a:	4680      	mov	r8, r0
 801b02c:	2300      	movs	r3, #0
 801b02e:	220a      	movs	r2, #10
 801b030:	4620      	mov	r0, r4
 801b032:	f000 faf9 	bl	801b628 <__multadd>
 801b036:	4607      	mov	r7, r0
 801b038:	e7f0      	b.n	801b01c <_dtoa_r+0xb14>
 801b03a:	f1b9 0f00 	cmp.w	r9, #0
 801b03e:	9a00      	ldr	r2, [sp, #0]
 801b040:	bfcc      	ite	gt
 801b042:	464d      	movgt	r5, r9
 801b044:	2501      	movle	r5, #1
 801b046:	4415      	add	r5, r2
 801b048:	f04f 0800 	mov.w	r8, #0
 801b04c:	4659      	mov	r1, fp
 801b04e:	2201      	movs	r2, #1
 801b050:	4620      	mov	r0, r4
 801b052:	9301      	str	r3, [sp, #4]
 801b054:	f000 fc98 	bl	801b988 <__lshift>
 801b058:	4631      	mov	r1, r6
 801b05a:	4683      	mov	fp, r0
 801b05c:	f000 fd00 	bl	801ba60 <__mcmp>
 801b060:	2800      	cmp	r0, #0
 801b062:	dcb2      	bgt.n	801afca <_dtoa_r+0xac2>
 801b064:	d102      	bne.n	801b06c <_dtoa_r+0xb64>
 801b066:	9b01      	ldr	r3, [sp, #4]
 801b068:	07db      	lsls	r3, r3, #31
 801b06a:	d4ae      	bmi.n	801afca <_dtoa_r+0xac2>
 801b06c:	462b      	mov	r3, r5
 801b06e:	461d      	mov	r5, r3
 801b070:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b074:	2a30      	cmp	r2, #48	; 0x30
 801b076:	d0fa      	beq.n	801b06e <_dtoa_r+0xb66>
 801b078:	e6f7      	b.n	801ae6a <_dtoa_r+0x962>
 801b07a:	9a00      	ldr	r2, [sp, #0]
 801b07c:	429a      	cmp	r2, r3
 801b07e:	d1a5      	bne.n	801afcc <_dtoa_r+0xac4>
 801b080:	f10a 0a01 	add.w	sl, sl, #1
 801b084:	2331      	movs	r3, #49	; 0x31
 801b086:	e779      	b.n	801af7c <_dtoa_r+0xa74>
 801b088:	4b13      	ldr	r3, [pc, #76]	; (801b0d8 <_dtoa_r+0xbd0>)
 801b08a:	f7ff baaf 	b.w	801a5ec <_dtoa_r+0xe4>
 801b08e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b090:	2b00      	cmp	r3, #0
 801b092:	f47f aa86 	bne.w	801a5a2 <_dtoa_r+0x9a>
 801b096:	4b11      	ldr	r3, [pc, #68]	; (801b0dc <_dtoa_r+0xbd4>)
 801b098:	f7ff baa8 	b.w	801a5ec <_dtoa_r+0xe4>
 801b09c:	f1b9 0f00 	cmp.w	r9, #0
 801b0a0:	dc03      	bgt.n	801b0aa <_dtoa_r+0xba2>
 801b0a2:	9b05      	ldr	r3, [sp, #20]
 801b0a4:	2b02      	cmp	r3, #2
 801b0a6:	f73f aec9 	bgt.w	801ae3c <_dtoa_r+0x934>
 801b0aa:	9d00      	ldr	r5, [sp, #0]
 801b0ac:	4631      	mov	r1, r6
 801b0ae:	4658      	mov	r0, fp
 801b0b0:	f7ff f99e 	bl	801a3f0 <quorem>
 801b0b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801b0b8:	f805 3b01 	strb.w	r3, [r5], #1
 801b0bc:	9a00      	ldr	r2, [sp, #0]
 801b0be:	1aaa      	subs	r2, r5, r2
 801b0c0:	4591      	cmp	r9, r2
 801b0c2:	ddba      	ble.n	801b03a <_dtoa_r+0xb32>
 801b0c4:	4659      	mov	r1, fp
 801b0c6:	2300      	movs	r3, #0
 801b0c8:	220a      	movs	r2, #10
 801b0ca:	4620      	mov	r0, r4
 801b0cc:	f000 faac 	bl	801b628 <__multadd>
 801b0d0:	4683      	mov	fp, r0
 801b0d2:	e7eb      	b.n	801b0ac <_dtoa_r+0xba4>
 801b0d4:	0801f7c6 	.word	0x0801f7c6
 801b0d8:	0801f684 	.word	0x0801f684
 801b0dc:	0801f75a 	.word	0x0801f75a

0801b0e0 <__sflush_r>:
 801b0e0:	898a      	ldrh	r2, [r1, #12]
 801b0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0e6:	4605      	mov	r5, r0
 801b0e8:	0710      	lsls	r0, r2, #28
 801b0ea:	460c      	mov	r4, r1
 801b0ec:	d458      	bmi.n	801b1a0 <__sflush_r+0xc0>
 801b0ee:	684b      	ldr	r3, [r1, #4]
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	dc05      	bgt.n	801b100 <__sflush_r+0x20>
 801b0f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	dc02      	bgt.n	801b100 <__sflush_r+0x20>
 801b0fa:	2000      	movs	r0, #0
 801b0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b102:	2e00      	cmp	r6, #0
 801b104:	d0f9      	beq.n	801b0fa <__sflush_r+0x1a>
 801b106:	2300      	movs	r3, #0
 801b108:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b10c:	682f      	ldr	r7, [r5, #0]
 801b10e:	602b      	str	r3, [r5, #0]
 801b110:	d032      	beq.n	801b178 <__sflush_r+0x98>
 801b112:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b114:	89a3      	ldrh	r3, [r4, #12]
 801b116:	075a      	lsls	r2, r3, #29
 801b118:	d505      	bpl.n	801b126 <__sflush_r+0x46>
 801b11a:	6863      	ldr	r3, [r4, #4]
 801b11c:	1ac0      	subs	r0, r0, r3
 801b11e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b120:	b10b      	cbz	r3, 801b126 <__sflush_r+0x46>
 801b122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b124:	1ac0      	subs	r0, r0, r3
 801b126:	2300      	movs	r3, #0
 801b128:	4602      	mov	r2, r0
 801b12a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b12c:	6a21      	ldr	r1, [r4, #32]
 801b12e:	4628      	mov	r0, r5
 801b130:	47b0      	blx	r6
 801b132:	1c43      	adds	r3, r0, #1
 801b134:	89a3      	ldrh	r3, [r4, #12]
 801b136:	d106      	bne.n	801b146 <__sflush_r+0x66>
 801b138:	6829      	ldr	r1, [r5, #0]
 801b13a:	291d      	cmp	r1, #29
 801b13c:	d82c      	bhi.n	801b198 <__sflush_r+0xb8>
 801b13e:	4a2a      	ldr	r2, [pc, #168]	; (801b1e8 <__sflush_r+0x108>)
 801b140:	40ca      	lsrs	r2, r1
 801b142:	07d6      	lsls	r6, r2, #31
 801b144:	d528      	bpl.n	801b198 <__sflush_r+0xb8>
 801b146:	2200      	movs	r2, #0
 801b148:	6062      	str	r2, [r4, #4]
 801b14a:	04d9      	lsls	r1, r3, #19
 801b14c:	6922      	ldr	r2, [r4, #16]
 801b14e:	6022      	str	r2, [r4, #0]
 801b150:	d504      	bpl.n	801b15c <__sflush_r+0x7c>
 801b152:	1c42      	adds	r2, r0, #1
 801b154:	d101      	bne.n	801b15a <__sflush_r+0x7a>
 801b156:	682b      	ldr	r3, [r5, #0]
 801b158:	b903      	cbnz	r3, 801b15c <__sflush_r+0x7c>
 801b15a:	6560      	str	r0, [r4, #84]	; 0x54
 801b15c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b15e:	602f      	str	r7, [r5, #0]
 801b160:	2900      	cmp	r1, #0
 801b162:	d0ca      	beq.n	801b0fa <__sflush_r+0x1a>
 801b164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b168:	4299      	cmp	r1, r3
 801b16a:	d002      	beq.n	801b172 <__sflush_r+0x92>
 801b16c:	4628      	mov	r0, r5
 801b16e:	f7fe facf 	bl	8019710 <_free_r>
 801b172:	2000      	movs	r0, #0
 801b174:	6360      	str	r0, [r4, #52]	; 0x34
 801b176:	e7c1      	b.n	801b0fc <__sflush_r+0x1c>
 801b178:	6a21      	ldr	r1, [r4, #32]
 801b17a:	2301      	movs	r3, #1
 801b17c:	4628      	mov	r0, r5
 801b17e:	47b0      	blx	r6
 801b180:	1c41      	adds	r1, r0, #1
 801b182:	d1c7      	bne.n	801b114 <__sflush_r+0x34>
 801b184:	682b      	ldr	r3, [r5, #0]
 801b186:	2b00      	cmp	r3, #0
 801b188:	d0c4      	beq.n	801b114 <__sflush_r+0x34>
 801b18a:	2b1d      	cmp	r3, #29
 801b18c:	d001      	beq.n	801b192 <__sflush_r+0xb2>
 801b18e:	2b16      	cmp	r3, #22
 801b190:	d101      	bne.n	801b196 <__sflush_r+0xb6>
 801b192:	602f      	str	r7, [r5, #0]
 801b194:	e7b1      	b.n	801b0fa <__sflush_r+0x1a>
 801b196:	89a3      	ldrh	r3, [r4, #12]
 801b198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b19c:	81a3      	strh	r3, [r4, #12]
 801b19e:	e7ad      	b.n	801b0fc <__sflush_r+0x1c>
 801b1a0:	690f      	ldr	r7, [r1, #16]
 801b1a2:	2f00      	cmp	r7, #0
 801b1a4:	d0a9      	beq.n	801b0fa <__sflush_r+0x1a>
 801b1a6:	0793      	lsls	r3, r2, #30
 801b1a8:	680e      	ldr	r6, [r1, #0]
 801b1aa:	bf08      	it	eq
 801b1ac:	694b      	ldreq	r3, [r1, #20]
 801b1ae:	600f      	str	r7, [r1, #0]
 801b1b0:	bf18      	it	ne
 801b1b2:	2300      	movne	r3, #0
 801b1b4:	eba6 0807 	sub.w	r8, r6, r7
 801b1b8:	608b      	str	r3, [r1, #8]
 801b1ba:	f1b8 0f00 	cmp.w	r8, #0
 801b1be:	dd9c      	ble.n	801b0fa <__sflush_r+0x1a>
 801b1c0:	6a21      	ldr	r1, [r4, #32]
 801b1c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b1c4:	4643      	mov	r3, r8
 801b1c6:	463a      	mov	r2, r7
 801b1c8:	4628      	mov	r0, r5
 801b1ca:	47b0      	blx	r6
 801b1cc:	2800      	cmp	r0, #0
 801b1ce:	dc06      	bgt.n	801b1de <__sflush_r+0xfe>
 801b1d0:	89a3      	ldrh	r3, [r4, #12]
 801b1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b1d6:	81a3      	strh	r3, [r4, #12]
 801b1d8:	f04f 30ff 	mov.w	r0, #4294967295
 801b1dc:	e78e      	b.n	801b0fc <__sflush_r+0x1c>
 801b1de:	4407      	add	r7, r0
 801b1e0:	eba8 0800 	sub.w	r8, r8, r0
 801b1e4:	e7e9      	b.n	801b1ba <__sflush_r+0xda>
 801b1e6:	bf00      	nop
 801b1e8:	20400001 	.word	0x20400001

0801b1ec <_fflush_r>:
 801b1ec:	b538      	push	{r3, r4, r5, lr}
 801b1ee:	690b      	ldr	r3, [r1, #16]
 801b1f0:	4605      	mov	r5, r0
 801b1f2:	460c      	mov	r4, r1
 801b1f4:	b913      	cbnz	r3, 801b1fc <_fflush_r+0x10>
 801b1f6:	2500      	movs	r5, #0
 801b1f8:	4628      	mov	r0, r5
 801b1fa:	bd38      	pop	{r3, r4, r5, pc}
 801b1fc:	b118      	cbz	r0, 801b206 <_fflush_r+0x1a>
 801b1fe:	6983      	ldr	r3, [r0, #24]
 801b200:	b90b      	cbnz	r3, 801b206 <_fflush_r+0x1a>
 801b202:	f000 f887 	bl	801b314 <__sinit>
 801b206:	4b14      	ldr	r3, [pc, #80]	; (801b258 <_fflush_r+0x6c>)
 801b208:	429c      	cmp	r4, r3
 801b20a:	d11b      	bne.n	801b244 <_fflush_r+0x58>
 801b20c:	686c      	ldr	r4, [r5, #4]
 801b20e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b212:	2b00      	cmp	r3, #0
 801b214:	d0ef      	beq.n	801b1f6 <_fflush_r+0xa>
 801b216:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b218:	07d0      	lsls	r0, r2, #31
 801b21a:	d404      	bmi.n	801b226 <_fflush_r+0x3a>
 801b21c:	0599      	lsls	r1, r3, #22
 801b21e:	d402      	bmi.n	801b226 <_fflush_r+0x3a>
 801b220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b222:	f000 f92c 	bl	801b47e <__retarget_lock_acquire_recursive>
 801b226:	4628      	mov	r0, r5
 801b228:	4621      	mov	r1, r4
 801b22a:	f7ff ff59 	bl	801b0e0 <__sflush_r>
 801b22e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b230:	07da      	lsls	r2, r3, #31
 801b232:	4605      	mov	r5, r0
 801b234:	d4e0      	bmi.n	801b1f8 <_fflush_r+0xc>
 801b236:	89a3      	ldrh	r3, [r4, #12]
 801b238:	059b      	lsls	r3, r3, #22
 801b23a:	d4dd      	bmi.n	801b1f8 <_fflush_r+0xc>
 801b23c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b23e:	f000 f91f 	bl	801b480 <__retarget_lock_release_recursive>
 801b242:	e7d9      	b.n	801b1f8 <_fflush_r+0xc>
 801b244:	4b05      	ldr	r3, [pc, #20]	; (801b25c <_fflush_r+0x70>)
 801b246:	429c      	cmp	r4, r3
 801b248:	d101      	bne.n	801b24e <_fflush_r+0x62>
 801b24a:	68ac      	ldr	r4, [r5, #8]
 801b24c:	e7df      	b.n	801b20e <_fflush_r+0x22>
 801b24e:	4b04      	ldr	r3, [pc, #16]	; (801b260 <_fflush_r+0x74>)
 801b250:	429c      	cmp	r4, r3
 801b252:	bf08      	it	eq
 801b254:	68ec      	ldreq	r4, [r5, #12]
 801b256:	e7da      	b.n	801b20e <_fflush_r+0x22>
 801b258:	0801f7f8 	.word	0x0801f7f8
 801b25c:	0801f818 	.word	0x0801f818
 801b260:	0801f7d8 	.word	0x0801f7d8

0801b264 <std>:
 801b264:	2300      	movs	r3, #0
 801b266:	b510      	push	{r4, lr}
 801b268:	4604      	mov	r4, r0
 801b26a:	e9c0 3300 	strd	r3, r3, [r0]
 801b26e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b272:	6083      	str	r3, [r0, #8]
 801b274:	8181      	strh	r1, [r0, #12]
 801b276:	6643      	str	r3, [r0, #100]	; 0x64
 801b278:	81c2      	strh	r2, [r0, #14]
 801b27a:	6183      	str	r3, [r0, #24]
 801b27c:	4619      	mov	r1, r3
 801b27e:	2208      	movs	r2, #8
 801b280:	305c      	adds	r0, #92	; 0x5c
 801b282:	f7fe fa3d 	bl	8019700 <memset>
 801b286:	4b05      	ldr	r3, [pc, #20]	; (801b29c <std+0x38>)
 801b288:	6263      	str	r3, [r4, #36]	; 0x24
 801b28a:	4b05      	ldr	r3, [pc, #20]	; (801b2a0 <std+0x3c>)
 801b28c:	62a3      	str	r3, [r4, #40]	; 0x28
 801b28e:	4b05      	ldr	r3, [pc, #20]	; (801b2a4 <std+0x40>)
 801b290:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b292:	4b05      	ldr	r3, [pc, #20]	; (801b2a8 <std+0x44>)
 801b294:	6224      	str	r4, [r4, #32]
 801b296:	6323      	str	r3, [r4, #48]	; 0x30
 801b298:	bd10      	pop	{r4, pc}
 801b29a:	bf00      	nop
 801b29c:	0801bfc1 	.word	0x0801bfc1
 801b2a0:	0801bfe3 	.word	0x0801bfe3
 801b2a4:	0801c01b 	.word	0x0801c01b
 801b2a8:	0801c03f 	.word	0x0801c03f

0801b2ac <_cleanup_r>:
 801b2ac:	4901      	ldr	r1, [pc, #4]	; (801b2b4 <_cleanup_r+0x8>)
 801b2ae:	f000 b8c1 	b.w	801b434 <_fwalk_reent>
 801b2b2:	bf00      	nop
 801b2b4:	0801b1ed 	.word	0x0801b1ed

0801b2b8 <__sfmoreglue>:
 801b2b8:	b570      	push	{r4, r5, r6, lr}
 801b2ba:	1e4a      	subs	r2, r1, #1
 801b2bc:	2568      	movs	r5, #104	; 0x68
 801b2be:	4355      	muls	r5, r2
 801b2c0:	460e      	mov	r6, r1
 801b2c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b2c6:	f7fe fa73 	bl	80197b0 <_malloc_r>
 801b2ca:	4604      	mov	r4, r0
 801b2cc:	b140      	cbz	r0, 801b2e0 <__sfmoreglue+0x28>
 801b2ce:	2100      	movs	r1, #0
 801b2d0:	e9c0 1600 	strd	r1, r6, [r0]
 801b2d4:	300c      	adds	r0, #12
 801b2d6:	60a0      	str	r0, [r4, #8]
 801b2d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b2dc:	f7fe fa10 	bl	8019700 <memset>
 801b2e0:	4620      	mov	r0, r4
 801b2e2:	bd70      	pop	{r4, r5, r6, pc}

0801b2e4 <__sfp_lock_acquire>:
 801b2e4:	4801      	ldr	r0, [pc, #4]	; (801b2ec <__sfp_lock_acquire+0x8>)
 801b2e6:	f000 b8ca 	b.w	801b47e <__retarget_lock_acquire_recursive>
 801b2ea:	bf00      	nop
 801b2ec:	20019010 	.word	0x20019010

0801b2f0 <__sfp_lock_release>:
 801b2f0:	4801      	ldr	r0, [pc, #4]	; (801b2f8 <__sfp_lock_release+0x8>)
 801b2f2:	f000 b8c5 	b.w	801b480 <__retarget_lock_release_recursive>
 801b2f6:	bf00      	nop
 801b2f8:	20019010 	.word	0x20019010

0801b2fc <__sinit_lock_acquire>:
 801b2fc:	4801      	ldr	r0, [pc, #4]	; (801b304 <__sinit_lock_acquire+0x8>)
 801b2fe:	f000 b8be 	b.w	801b47e <__retarget_lock_acquire_recursive>
 801b302:	bf00      	nop
 801b304:	2001900b 	.word	0x2001900b

0801b308 <__sinit_lock_release>:
 801b308:	4801      	ldr	r0, [pc, #4]	; (801b310 <__sinit_lock_release+0x8>)
 801b30a:	f000 b8b9 	b.w	801b480 <__retarget_lock_release_recursive>
 801b30e:	bf00      	nop
 801b310:	2001900b 	.word	0x2001900b

0801b314 <__sinit>:
 801b314:	b510      	push	{r4, lr}
 801b316:	4604      	mov	r4, r0
 801b318:	f7ff fff0 	bl	801b2fc <__sinit_lock_acquire>
 801b31c:	69a3      	ldr	r3, [r4, #24]
 801b31e:	b11b      	cbz	r3, 801b328 <__sinit+0x14>
 801b320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b324:	f7ff bff0 	b.w	801b308 <__sinit_lock_release>
 801b328:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b32c:	6523      	str	r3, [r4, #80]	; 0x50
 801b32e:	4b13      	ldr	r3, [pc, #76]	; (801b37c <__sinit+0x68>)
 801b330:	4a13      	ldr	r2, [pc, #76]	; (801b380 <__sinit+0x6c>)
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	62a2      	str	r2, [r4, #40]	; 0x28
 801b336:	42a3      	cmp	r3, r4
 801b338:	bf04      	itt	eq
 801b33a:	2301      	moveq	r3, #1
 801b33c:	61a3      	streq	r3, [r4, #24]
 801b33e:	4620      	mov	r0, r4
 801b340:	f000 f820 	bl	801b384 <__sfp>
 801b344:	6060      	str	r0, [r4, #4]
 801b346:	4620      	mov	r0, r4
 801b348:	f000 f81c 	bl	801b384 <__sfp>
 801b34c:	60a0      	str	r0, [r4, #8]
 801b34e:	4620      	mov	r0, r4
 801b350:	f000 f818 	bl	801b384 <__sfp>
 801b354:	2200      	movs	r2, #0
 801b356:	60e0      	str	r0, [r4, #12]
 801b358:	2104      	movs	r1, #4
 801b35a:	6860      	ldr	r0, [r4, #4]
 801b35c:	f7ff ff82 	bl	801b264 <std>
 801b360:	68a0      	ldr	r0, [r4, #8]
 801b362:	2201      	movs	r2, #1
 801b364:	2109      	movs	r1, #9
 801b366:	f7ff ff7d 	bl	801b264 <std>
 801b36a:	68e0      	ldr	r0, [r4, #12]
 801b36c:	2202      	movs	r2, #2
 801b36e:	2112      	movs	r1, #18
 801b370:	f7ff ff78 	bl	801b264 <std>
 801b374:	2301      	movs	r3, #1
 801b376:	61a3      	str	r3, [r4, #24]
 801b378:	e7d2      	b.n	801b320 <__sinit+0xc>
 801b37a:	bf00      	nop
 801b37c:	0801f670 	.word	0x0801f670
 801b380:	0801b2ad 	.word	0x0801b2ad

0801b384 <__sfp>:
 801b384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b386:	4607      	mov	r7, r0
 801b388:	f7ff ffac 	bl	801b2e4 <__sfp_lock_acquire>
 801b38c:	4b1e      	ldr	r3, [pc, #120]	; (801b408 <__sfp+0x84>)
 801b38e:	681e      	ldr	r6, [r3, #0]
 801b390:	69b3      	ldr	r3, [r6, #24]
 801b392:	b913      	cbnz	r3, 801b39a <__sfp+0x16>
 801b394:	4630      	mov	r0, r6
 801b396:	f7ff ffbd 	bl	801b314 <__sinit>
 801b39a:	3648      	adds	r6, #72	; 0x48
 801b39c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b3a0:	3b01      	subs	r3, #1
 801b3a2:	d503      	bpl.n	801b3ac <__sfp+0x28>
 801b3a4:	6833      	ldr	r3, [r6, #0]
 801b3a6:	b30b      	cbz	r3, 801b3ec <__sfp+0x68>
 801b3a8:	6836      	ldr	r6, [r6, #0]
 801b3aa:	e7f7      	b.n	801b39c <__sfp+0x18>
 801b3ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b3b0:	b9d5      	cbnz	r5, 801b3e8 <__sfp+0x64>
 801b3b2:	4b16      	ldr	r3, [pc, #88]	; (801b40c <__sfp+0x88>)
 801b3b4:	60e3      	str	r3, [r4, #12]
 801b3b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b3ba:	6665      	str	r5, [r4, #100]	; 0x64
 801b3bc:	f000 f85e 	bl	801b47c <__retarget_lock_init_recursive>
 801b3c0:	f7ff ff96 	bl	801b2f0 <__sfp_lock_release>
 801b3c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b3c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b3cc:	6025      	str	r5, [r4, #0]
 801b3ce:	61a5      	str	r5, [r4, #24]
 801b3d0:	2208      	movs	r2, #8
 801b3d2:	4629      	mov	r1, r5
 801b3d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b3d8:	f7fe f992 	bl	8019700 <memset>
 801b3dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b3e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b3e4:	4620      	mov	r0, r4
 801b3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3e8:	3468      	adds	r4, #104	; 0x68
 801b3ea:	e7d9      	b.n	801b3a0 <__sfp+0x1c>
 801b3ec:	2104      	movs	r1, #4
 801b3ee:	4638      	mov	r0, r7
 801b3f0:	f7ff ff62 	bl	801b2b8 <__sfmoreglue>
 801b3f4:	4604      	mov	r4, r0
 801b3f6:	6030      	str	r0, [r6, #0]
 801b3f8:	2800      	cmp	r0, #0
 801b3fa:	d1d5      	bne.n	801b3a8 <__sfp+0x24>
 801b3fc:	f7ff ff78 	bl	801b2f0 <__sfp_lock_release>
 801b400:	230c      	movs	r3, #12
 801b402:	603b      	str	r3, [r7, #0]
 801b404:	e7ee      	b.n	801b3e4 <__sfp+0x60>
 801b406:	bf00      	nop
 801b408:	0801f670 	.word	0x0801f670
 801b40c:	ffff0001 	.word	0xffff0001

0801b410 <fiprintf>:
 801b410:	b40e      	push	{r1, r2, r3}
 801b412:	b503      	push	{r0, r1, lr}
 801b414:	4601      	mov	r1, r0
 801b416:	ab03      	add	r3, sp, #12
 801b418:	4805      	ldr	r0, [pc, #20]	; (801b430 <fiprintf+0x20>)
 801b41a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b41e:	6800      	ldr	r0, [r0, #0]
 801b420:	9301      	str	r3, [sp, #4]
 801b422:	f000 fc55 	bl	801bcd0 <_vfiprintf_r>
 801b426:	b002      	add	sp, #8
 801b428:	f85d eb04 	ldr.w	lr, [sp], #4
 801b42c:	b003      	add	sp, #12
 801b42e:	4770      	bx	lr
 801b430:	200005b8 	.word	0x200005b8

0801b434 <_fwalk_reent>:
 801b434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b438:	4606      	mov	r6, r0
 801b43a:	4688      	mov	r8, r1
 801b43c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b440:	2700      	movs	r7, #0
 801b442:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b446:	f1b9 0901 	subs.w	r9, r9, #1
 801b44a:	d505      	bpl.n	801b458 <_fwalk_reent+0x24>
 801b44c:	6824      	ldr	r4, [r4, #0]
 801b44e:	2c00      	cmp	r4, #0
 801b450:	d1f7      	bne.n	801b442 <_fwalk_reent+0xe>
 801b452:	4638      	mov	r0, r7
 801b454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b458:	89ab      	ldrh	r3, [r5, #12]
 801b45a:	2b01      	cmp	r3, #1
 801b45c:	d907      	bls.n	801b46e <_fwalk_reent+0x3a>
 801b45e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b462:	3301      	adds	r3, #1
 801b464:	d003      	beq.n	801b46e <_fwalk_reent+0x3a>
 801b466:	4629      	mov	r1, r5
 801b468:	4630      	mov	r0, r6
 801b46a:	47c0      	blx	r8
 801b46c:	4307      	orrs	r7, r0
 801b46e:	3568      	adds	r5, #104	; 0x68
 801b470:	e7e9      	b.n	801b446 <_fwalk_reent+0x12>
	...

0801b474 <_localeconv_r>:
 801b474:	4800      	ldr	r0, [pc, #0]	; (801b478 <_localeconv_r+0x4>)
 801b476:	4770      	bx	lr
 801b478:	2000070c 	.word	0x2000070c

0801b47c <__retarget_lock_init_recursive>:
 801b47c:	4770      	bx	lr

0801b47e <__retarget_lock_acquire_recursive>:
 801b47e:	4770      	bx	lr

0801b480 <__retarget_lock_release_recursive>:
 801b480:	4770      	bx	lr

0801b482 <__swhatbuf_r>:
 801b482:	b570      	push	{r4, r5, r6, lr}
 801b484:	460e      	mov	r6, r1
 801b486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b48a:	2900      	cmp	r1, #0
 801b48c:	b096      	sub	sp, #88	; 0x58
 801b48e:	4614      	mov	r4, r2
 801b490:	461d      	mov	r5, r3
 801b492:	da07      	bge.n	801b4a4 <__swhatbuf_r+0x22>
 801b494:	2300      	movs	r3, #0
 801b496:	602b      	str	r3, [r5, #0]
 801b498:	89b3      	ldrh	r3, [r6, #12]
 801b49a:	061a      	lsls	r2, r3, #24
 801b49c:	d410      	bmi.n	801b4c0 <__swhatbuf_r+0x3e>
 801b49e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b4a2:	e00e      	b.n	801b4c2 <__swhatbuf_r+0x40>
 801b4a4:	466a      	mov	r2, sp
 801b4a6:	f000 fdf9 	bl	801c09c <_fstat_r>
 801b4aa:	2800      	cmp	r0, #0
 801b4ac:	dbf2      	blt.n	801b494 <__swhatbuf_r+0x12>
 801b4ae:	9a01      	ldr	r2, [sp, #4]
 801b4b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b4b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b4b8:	425a      	negs	r2, r3
 801b4ba:	415a      	adcs	r2, r3
 801b4bc:	602a      	str	r2, [r5, #0]
 801b4be:	e7ee      	b.n	801b49e <__swhatbuf_r+0x1c>
 801b4c0:	2340      	movs	r3, #64	; 0x40
 801b4c2:	2000      	movs	r0, #0
 801b4c4:	6023      	str	r3, [r4, #0]
 801b4c6:	b016      	add	sp, #88	; 0x58
 801b4c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b4cc <__smakebuf_r>:
 801b4cc:	898b      	ldrh	r3, [r1, #12]
 801b4ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b4d0:	079d      	lsls	r5, r3, #30
 801b4d2:	4606      	mov	r6, r0
 801b4d4:	460c      	mov	r4, r1
 801b4d6:	d507      	bpl.n	801b4e8 <__smakebuf_r+0x1c>
 801b4d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b4dc:	6023      	str	r3, [r4, #0]
 801b4de:	6123      	str	r3, [r4, #16]
 801b4e0:	2301      	movs	r3, #1
 801b4e2:	6163      	str	r3, [r4, #20]
 801b4e4:	b002      	add	sp, #8
 801b4e6:	bd70      	pop	{r4, r5, r6, pc}
 801b4e8:	ab01      	add	r3, sp, #4
 801b4ea:	466a      	mov	r2, sp
 801b4ec:	f7ff ffc9 	bl	801b482 <__swhatbuf_r>
 801b4f0:	9900      	ldr	r1, [sp, #0]
 801b4f2:	4605      	mov	r5, r0
 801b4f4:	4630      	mov	r0, r6
 801b4f6:	f7fe f95b 	bl	80197b0 <_malloc_r>
 801b4fa:	b948      	cbnz	r0, 801b510 <__smakebuf_r+0x44>
 801b4fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b500:	059a      	lsls	r2, r3, #22
 801b502:	d4ef      	bmi.n	801b4e4 <__smakebuf_r+0x18>
 801b504:	f023 0303 	bic.w	r3, r3, #3
 801b508:	f043 0302 	orr.w	r3, r3, #2
 801b50c:	81a3      	strh	r3, [r4, #12]
 801b50e:	e7e3      	b.n	801b4d8 <__smakebuf_r+0xc>
 801b510:	4b0d      	ldr	r3, [pc, #52]	; (801b548 <__smakebuf_r+0x7c>)
 801b512:	62b3      	str	r3, [r6, #40]	; 0x28
 801b514:	89a3      	ldrh	r3, [r4, #12]
 801b516:	6020      	str	r0, [r4, #0]
 801b518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b51c:	81a3      	strh	r3, [r4, #12]
 801b51e:	9b00      	ldr	r3, [sp, #0]
 801b520:	6163      	str	r3, [r4, #20]
 801b522:	9b01      	ldr	r3, [sp, #4]
 801b524:	6120      	str	r0, [r4, #16]
 801b526:	b15b      	cbz	r3, 801b540 <__smakebuf_r+0x74>
 801b528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b52c:	4630      	mov	r0, r6
 801b52e:	f000 fdc7 	bl	801c0c0 <_isatty_r>
 801b532:	b128      	cbz	r0, 801b540 <__smakebuf_r+0x74>
 801b534:	89a3      	ldrh	r3, [r4, #12]
 801b536:	f023 0303 	bic.w	r3, r3, #3
 801b53a:	f043 0301 	orr.w	r3, r3, #1
 801b53e:	81a3      	strh	r3, [r4, #12]
 801b540:	89a0      	ldrh	r0, [r4, #12]
 801b542:	4305      	orrs	r5, r0
 801b544:	81a5      	strh	r5, [r4, #12]
 801b546:	e7cd      	b.n	801b4e4 <__smakebuf_r+0x18>
 801b548:	0801b2ad 	.word	0x0801b2ad

0801b54c <__malloc_lock>:
 801b54c:	4801      	ldr	r0, [pc, #4]	; (801b554 <__malloc_lock+0x8>)
 801b54e:	f7ff bf96 	b.w	801b47e <__retarget_lock_acquire_recursive>
 801b552:	bf00      	nop
 801b554:	2001900c 	.word	0x2001900c

0801b558 <__malloc_unlock>:
 801b558:	4801      	ldr	r0, [pc, #4]	; (801b560 <__malloc_unlock+0x8>)
 801b55a:	f7ff bf91 	b.w	801b480 <__retarget_lock_release_recursive>
 801b55e:	bf00      	nop
 801b560:	2001900c 	.word	0x2001900c

0801b564 <_Balloc>:
 801b564:	b570      	push	{r4, r5, r6, lr}
 801b566:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b568:	4604      	mov	r4, r0
 801b56a:	460d      	mov	r5, r1
 801b56c:	b976      	cbnz	r6, 801b58c <_Balloc+0x28>
 801b56e:	2010      	movs	r0, #16
 801b570:	f7fe f89a 	bl	80196a8 <malloc>
 801b574:	4602      	mov	r2, r0
 801b576:	6260      	str	r0, [r4, #36]	; 0x24
 801b578:	b920      	cbnz	r0, 801b584 <_Balloc+0x20>
 801b57a:	4b18      	ldr	r3, [pc, #96]	; (801b5dc <_Balloc+0x78>)
 801b57c:	4818      	ldr	r0, [pc, #96]	; (801b5e0 <_Balloc+0x7c>)
 801b57e:	2166      	movs	r1, #102	; 0x66
 801b580:	f7fe ff18 	bl	801a3b4 <__assert_func>
 801b584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b588:	6006      	str	r6, [r0, #0]
 801b58a:	60c6      	str	r6, [r0, #12]
 801b58c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b58e:	68f3      	ldr	r3, [r6, #12]
 801b590:	b183      	cbz	r3, 801b5b4 <_Balloc+0x50>
 801b592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b594:	68db      	ldr	r3, [r3, #12]
 801b596:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b59a:	b9b8      	cbnz	r0, 801b5cc <_Balloc+0x68>
 801b59c:	2101      	movs	r1, #1
 801b59e:	fa01 f605 	lsl.w	r6, r1, r5
 801b5a2:	1d72      	adds	r2, r6, #5
 801b5a4:	0092      	lsls	r2, r2, #2
 801b5a6:	4620      	mov	r0, r4
 801b5a8:	f000 fb5a 	bl	801bc60 <_calloc_r>
 801b5ac:	b160      	cbz	r0, 801b5c8 <_Balloc+0x64>
 801b5ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b5b2:	e00e      	b.n	801b5d2 <_Balloc+0x6e>
 801b5b4:	2221      	movs	r2, #33	; 0x21
 801b5b6:	2104      	movs	r1, #4
 801b5b8:	4620      	mov	r0, r4
 801b5ba:	f000 fb51 	bl	801bc60 <_calloc_r>
 801b5be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b5c0:	60f0      	str	r0, [r6, #12]
 801b5c2:	68db      	ldr	r3, [r3, #12]
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d1e4      	bne.n	801b592 <_Balloc+0x2e>
 801b5c8:	2000      	movs	r0, #0
 801b5ca:	bd70      	pop	{r4, r5, r6, pc}
 801b5cc:	6802      	ldr	r2, [r0, #0]
 801b5ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b5d2:	2300      	movs	r3, #0
 801b5d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b5d8:	e7f7      	b.n	801b5ca <_Balloc+0x66>
 801b5da:	bf00      	nop
 801b5dc:	0801f6a8 	.word	0x0801f6a8
 801b5e0:	0801f838 	.word	0x0801f838

0801b5e4 <_Bfree>:
 801b5e4:	b570      	push	{r4, r5, r6, lr}
 801b5e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b5e8:	4605      	mov	r5, r0
 801b5ea:	460c      	mov	r4, r1
 801b5ec:	b976      	cbnz	r6, 801b60c <_Bfree+0x28>
 801b5ee:	2010      	movs	r0, #16
 801b5f0:	f7fe f85a 	bl	80196a8 <malloc>
 801b5f4:	4602      	mov	r2, r0
 801b5f6:	6268      	str	r0, [r5, #36]	; 0x24
 801b5f8:	b920      	cbnz	r0, 801b604 <_Bfree+0x20>
 801b5fa:	4b09      	ldr	r3, [pc, #36]	; (801b620 <_Bfree+0x3c>)
 801b5fc:	4809      	ldr	r0, [pc, #36]	; (801b624 <_Bfree+0x40>)
 801b5fe:	218a      	movs	r1, #138	; 0x8a
 801b600:	f7fe fed8 	bl	801a3b4 <__assert_func>
 801b604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b608:	6006      	str	r6, [r0, #0]
 801b60a:	60c6      	str	r6, [r0, #12]
 801b60c:	b13c      	cbz	r4, 801b61e <_Bfree+0x3a>
 801b60e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b610:	6862      	ldr	r2, [r4, #4]
 801b612:	68db      	ldr	r3, [r3, #12]
 801b614:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b618:	6021      	str	r1, [r4, #0]
 801b61a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b61e:	bd70      	pop	{r4, r5, r6, pc}
 801b620:	0801f6a8 	.word	0x0801f6a8
 801b624:	0801f838 	.word	0x0801f838

0801b628 <__multadd>:
 801b628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b62c:	690e      	ldr	r6, [r1, #16]
 801b62e:	4607      	mov	r7, r0
 801b630:	4698      	mov	r8, r3
 801b632:	460c      	mov	r4, r1
 801b634:	f101 0014 	add.w	r0, r1, #20
 801b638:	2300      	movs	r3, #0
 801b63a:	6805      	ldr	r5, [r0, #0]
 801b63c:	b2a9      	uxth	r1, r5
 801b63e:	fb02 8101 	mla	r1, r2, r1, r8
 801b642:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801b646:	0c2d      	lsrs	r5, r5, #16
 801b648:	fb02 c505 	mla	r5, r2, r5, ip
 801b64c:	b289      	uxth	r1, r1
 801b64e:	3301      	adds	r3, #1
 801b650:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801b654:	429e      	cmp	r6, r3
 801b656:	f840 1b04 	str.w	r1, [r0], #4
 801b65a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801b65e:	dcec      	bgt.n	801b63a <__multadd+0x12>
 801b660:	f1b8 0f00 	cmp.w	r8, #0
 801b664:	d022      	beq.n	801b6ac <__multadd+0x84>
 801b666:	68a3      	ldr	r3, [r4, #8]
 801b668:	42b3      	cmp	r3, r6
 801b66a:	dc19      	bgt.n	801b6a0 <__multadd+0x78>
 801b66c:	6861      	ldr	r1, [r4, #4]
 801b66e:	4638      	mov	r0, r7
 801b670:	3101      	adds	r1, #1
 801b672:	f7ff ff77 	bl	801b564 <_Balloc>
 801b676:	4605      	mov	r5, r0
 801b678:	b928      	cbnz	r0, 801b686 <__multadd+0x5e>
 801b67a:	4602      	mov	r2, r0
 801b67c:	4b0d      	ldr	r3, [pc, #52]	; (801b6b4 <__multadd+0x8c>)
 801b67e:	480e      	ldr	r0, [pc, #56]	; (801b6b8 <__multadd+0x90>)
 801b680:	21b5      	movs	r1, #181	; 0xb5
 801b682:	f7fe fe97 	bl	801a3b4 <__assert_func>
 801b686:	6922      	ldr	r2, [r4, #16]
 801b688:	3202      	adds	r2, #2
 801b68a:	f104 010c 	add.w	r1, r4, #12
 801b68e:	0092      	lsls	r2, r2, #2
 801b690:	300c      	adds	r0, #12
 801b692:	f7fe f827 	bl	80196e4 <memcpy>
 801b696:	4621      	mov	r1, r4
 801b698:	4638      	mov	r0, r7
 801b69a:	f7ff ffa3 	bl	801b5e4 <_Bfree>
 801b69e:	462c      	mov	r4, r5
 801b6a0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801b6a4:	3601      	adds	r6, #1
 801b6a6:	f8c3 8014 	str.w	r8, [r3, #20]
 801b6aa:	6126      	str	r6, [r4, #16]
 801b6ac:	4620      	mov	r0, r4
 801b6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6b2:	bf00      	nop
 801b6b4:	0801f7c6 	.word	0x0801f7c6
 801b6b8:	0801f838 	.word	0x0801f838

0801b6bc <__hi0bits>:
 801b6bc:	0c03      	lsrs	r3, r0, #16
 801b6be:	041b      	lsls	r3, r3, #16
 801b6c0:	b9d3      	cbnz	r3, 801b6f8 <__hi0bits+0x3c>
 801b6c2:	0400      	lsls	r0, r0, #16
 801b6c4:	2310      	movs	r3, #16
 801b6c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b6ca:	bf04      	itt	eq
 801b6cc:	0200      	lsleq	r0, r0, #8
 801b6ce:	3308      	addeq	r3, #8
 801b6d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b6d4:	bf04      	itt	eq
 801b6d6:	0100      	lsleq	r0, r0, #4
 801b6d8:	3304      	addeq	r3, #4
 801b6da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b6de:	bf04      	itt	eq
 801b6e0:	0080      	lsleq	r0, r0, #2
 801b6e2:	3302      	addeq	r3, #2
 801b6e4:	2800      	cmp	r0, #0
 801b6e6:	db05      	blt.n	801b6f4 <__hi0bits+0x38>
 801b6e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b6ec:	f103 0301 	add.w	r3, r3, #1
 801b6f0:	bf08      	it	eq
 801b6f2:	2320      	moveq	r3, #32
 801b6f4:	4618      	mov	r0, r3
 801b6f6:	4770      	bx	lr
 801b6f8:	2300      	movs	r3, #0
 801b6fa:	e7e4      	b.n	801b6c6 <__hi0bits+0xa>

0801b6fc <__lo0bits>:
 801b6fc:	6803      	ldr	r3, [r0, #0]
 801b6fe:	f013 0207 	ands.w	r2, r3, #7
 801b702:	4601      	mov	r1, r0
 801b704:	d00b      	beq.n	801b71e <__lo0bits+0x22>
 801b706:	07da      	lsls	r2, r3, #31
 801b708:	d424      	bmi.n	801b754 <__lo0bits+0x58>
 801b70a:	0798      	lsls	r0, r3, #30
 801b70c:	bf49      	itett	mi
 801b70e:	085b      	lsrmi	r3, r3, #1
 801b710:	089b      	lsrpl	r3, r3, #2
 801b712:	2001      	movmi	r0, #1
 801b714:	600b      	strmi	r3, [r1, #0]
 801b716:	bf5c      	itt	pl
 801b718:	600b      	strpl	r3, [r1, #0]
 801b71a:	2002      	movpl	r0, #2
 801b71c:	4770      	bx	lr
 801b71e:	b298      	uxth	r0, r3
 801b720:	b9b0      	cbnz	r0, 801b750 <__lo0bits+0x54>
 801b722:	0c1b      	lsrs	r3, r3, #16
 801b724:	2010      	movs	r0, #16
 801b726:	f013 0fff 	tst.w	r3, #255	; 0xff
 801b72a:	bf04      	itt	eq
 801b72c:	0a1b      	lsreq	r3, r3, #8
 801b72e:	3008      	addeq	r0, #8
 801b730:	071a      	lsls	r2, r3, #28
 801b732:	bf04      	itt	eq
 801b734:	091b      	lsreq	r3, r3, #4
 801b736:	3004      	addeq	r0, #4
 801b738:	079a      	lsls	r2, r3, #30
 801b73a:	bf04      	itt	eq
 801b73c:	089b      	lsreq	r3, r3, #2
 801b73e:	3002      	addeq	r0, #2
 801b740:	07da      	lsls	r2, r3, #31
 801b742:	d403      	bmi.n	801b74c <__lo0bits+0x50>
 801b744:	085b      	lsrs	r3, r3, #1
 801b746:	f100 0001 	add.w	r0, r0, #1
 801b74a:	d005      	beq.n	801b758 <__lo0bits+0x5c>
 801b74c:	600b      	str	r3, [r1, #0]
 801b74e:	4770      	bx	lr
 801b750:	4610      	mov	r0, r2
 801b752:	e7e8      	b.n	801b726 <__lo0bits+0x2a>
 801b754:	2000      	movs	r0, #0
 801b756:	4770      	bx	lr
 801b758:	2020      	movs	r0, #32
 801b75a:	4770      	bx	lr

0801b75c <__i2b>:
 801b75c:	b510      	push	{r4, lr}
 801b75e:	460c      	mov	r4, r1
 801b760:	2101      	movs	r1, #1
 801b762:	f7ff feff 	bl	801b564 <_Balloc>
 801b766:	4602      	mov	r2, r0
 801b768:	b928      	cbnz	r0, 801b776 <__i2b+0x1a>
 801b76a:	4b05      	ldr	r3, [pc, #20]	; (801b780 <__i2b+0x24>)
 801b76c:	4805      	ldr	r0, [pc, #20]	; (801b784 <__i2b+0x28>)
 801b76e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801b772:	f7fe fe1f 	bl	801a3b4 <__assert_func>
 801b776:	2301      	movs	r3, #1
 801b778:	6144      	str	r4, [r0, #20]
 801b77a:	6103      	str	r3, [r0, #16]
 801b77c:	bd10      	pop	{r4, pc}
 801b77e:	bf00      	nop
 801b780:	0801f7c6 	.word	0x0801f7c6
 801b784:	0801f838 	.word	0x0801f838

0801b788 <__multiply>:
 801b788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b78c:	4614      	mov	r4, r2
 801b78e:	690a      	ldr	r2, [r1, #16]
 801b790:	6923      	ldr	r3, [r4, #16]
 801b792:	429a      	cmp	r2, r3
 801b794:	bfb8      	it	lt
 801b796:	460b      	movlt	r3, r1
 801b798:	460d      	mov	r5, r1
 801b79a:	bfbc      	itt	lt
 801b79c:	4625      	movlt	r5, r4
 801b79e:	461c      	movlt	r4, r3
 801b7a0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801b7a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801b7a8:	68ab      	ldr	r3, [r5, #8]
 801b7aa:	6869      	ldr	r1, [r5, #4]
 801b7ac:	eb0a 0709 	add.w	r7, sl, r9
 801b7b0:	42bb      	cmp	r3, r7
 801b7b2:	b085      	sub	sp, #20
 801b7b4:	bfb8      	it	lt
 801b7b6:	3101      	addlt	r1, #1
 801b7b8:	f7ff fed4 	bl	801b564 <_Balloc>
 801b7bc:	b930      	cbnz	r0, 801b7cc <__multiply+0x44>
 801b7be:	4602      	mov	r2, r0
 801b7c0:	4b42      	ldr	r3, [pc, #264]	; (801b8cc <__multiply+0x144>)
 801b7c2:	4843      	ldr	r0, [pc, #268]	; (801b8d0 <__multiply+0x148>)
 801b7c4:	f240 115d 	movw	r1, #349	; 0x15d
 801b7c8:	f7fe fdf4 	bl	801a3b4 <__assert_func>
 801b7cc:	f100 0614 	add.w	r6, r0, #20
 801b7d0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801b7d4:	4633      	mov	r3, r6
 801b7d6:	2200      	movs	r2, #0
 801b7d8:	4543      	cmp	r3, r8
 801b7da:	d31e      	bcc.n	801b81a <__multiply+0x92>
 801b7dc:	f105 0c14 	add.w	ip, r5, #20
 801b7e0:	f104 0314 	add.w	r3, r4, #20
 801b7e4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801b7e8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801b7ec:	9202      	str	r2, [sp, #8]
 801b7ee:	ebac 0205 	sub.w	r2, ip, r5
 801b7f2:	3a15      	subs	r2, #21
 801b7f4:	f022 0203 	bic.w	r2, r2, #3
 801b7f8:	3204      	adds	r2, #4
 801b7fa:	f105 0115 	add.w	r1, r5, #21
 801b7fe:	458c      	cmp	ip, r1
 801b800:	bf38      	it	cc
 801b802:	2204      	movcc	r2, #4
 801b804:	9201      	str	r2, [sp, #4]
 801b806:	9a02      	ldr	r2, [sp, #8]
 801b808:	9303      	str	r3, [sp, #12]
 801b80a:	429a      	cmp	r2, r3
 801b80c:	d808      	bhi.n	801b820 <__multiply+0x98>
 801b80e:	2f00      	cmp	r7, #0
 801b810:	dc55      	bgt.n	801b8be <__multiply+0x136>
 801b812:	6107      	str	r7, [r0, #16]
 801b814:	b005      	add	sp, #20
 801b816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b81a:	f843 2b04 	str.w	r2, [r3], #4
 801b81e:	e7db      	b.n	801b7d8 <__multiply+0x50>
 801b820:	f8b3 a000 	ldrh.w	sl, [r3]
 801b824:	f1ba 0f00 	cmp.w	sl, #0
 801b828:	d020      	beq.n	801b86c <__multiply+0xe4>
 801b82a:	f105 0e14 	add.w	lr, r5, #20
 801b82e:	46b1      	mov	r9, r6
 801b830:	2200      	movs	r2, #0
 801b832:	f85e 4b04 	ldr.w	r4, [lr], #4
 801b836:	f8d9 b000 	ldr.w	fp, [r9]
 801b83a:	b2a1      	uxth	r1, r4
 801b83c:	fa1f fb8b 	uxth.w	fp, fp
 801b840:	fb0a b101 	mla	r1, sl, r1, fp
 801b844:	4411      	add	r1, r2
 801b846:	f8d9 2000 	ldr.w	r2, [r9]
 801b84a:	0c24      	lsrs	r4, r4, #16
 801b84c:	0c12      	lsrs	r2, r2, #16
 801b84e:	fb0a 2404 	mla	r4, sl, r4, r2
 801b852:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801b856:	b289      	uxth	r1, r1
 801b858:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801b85c:	45f4      	cmp	ip, lr
 801b85e:	f849 1b04 	str.w	r1, [r9], #4
 801b862:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801b866:	d8e4      	bhi.n	801b832 <__multiply+0xaa>
 801b868:	9901      	ldr	r1, [sp, #4]
 801b86a:	5072      	str	r2, [r6, r1]
 801b86c:	9a03      	ldr	r2, [sp, #12]
 801b86e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b872:	3304      	adds	r3, #4
 801b874:	f1b9 0f00 	cmp.w	r9, #0
 801b878:	d01f      	beq.n	801b8ba <__multiply+0x132>
 801b87a:	6834      	ldr	r4, [r6, #0]
 801b87c:	f105 0114 	add.w	r1, r5, #20
 801b880:	46b6      	mov	lr, r6
 801b882:	f04f 0a00 	mov.w	sl, #0
 801b886:	880a      	ldrh	r2, [r1, #0]
 801b888:	f8be b002 	ldrh.w	fp, [lr, #2]
 801b88c:	fb09 b202 	mla	r2, r9, r2, fp
 801b890:	4492      	add	sl, r2
 801b892:	b2a4      	uxth	r4, r4
 801b894:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801b898:	f84e 4b04 	str.w	r4, [lr], #4
 801b89c:	f851 4b04 	ldr.w	r4, [r1], #4
 801b8a0:	f8be 2000 	ldrh.w	r2, [lr]
 801b8a4:	0c24      	lsrs	r4, r4, #16
 801b8a6:	fb09 2404 	mla	r4, r9, r4, r2
 801b8aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801b8ae:	458c      	cmp	ip, r1
 801b8b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801b8b4:	d8e7      	bhi.n	801b886 <__multiply+0xfe>
 801b8b6:	9a01      	ldr	r2, [sp, #4]
 801b8b8:	50b4      	str	r4, [r6, r2]
 801b8ba:	3604      	adds	r6, #4
 801b8bc:	e7a3      	b.n	801b806 <__multiply+0x7e>
 801b8be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d1a5      	bne.n	801b812 <__multiply+0x8a>
 801b8c6:	3f01      	subs	r7, #1
 801b8c8:	e7a1      	b.n	801b80e <__multiply+0x86>
 801b8ca:	bf00      	nop
 801b8cc:	0801f7c6 	.word	0x0801f7c6
 801b8d0:	0801f838 	.word	0x0801f838

0801b8d4 <__pow5mult>:
 801b8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b8d8:	4615      	mov	r5, r2
 801b8da:	f012 0203 	ands.w	r2, r2, #3
 801b8de:	4606      	mov	r6, r0
 801b8e0:	460f      	mov	r7, r1
 801b8e2:	d007      	beq.n	801b8f4 <__pow5mult+0x20>
 801b8e4:	4c25      	ldr	r4, [pc, #148]	; (801b97c <__pow5mult+0xa8>)
 801b8e6:	3a01      	subs	r2, #1
 801b8e8:	2300      	movs	r3, #0
 801b8ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b8ee:	f7ff fe9b 	bl	801b628 <__multadd>
 801b8f2:	4607      	mov	r7, r0
 801b8f4:	10ad      	asrs	r5, r5, #2
 801b8f6:	d03d      	beq.n	801b974 <__pow5mult+0xa0>
 801b8f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b8fa:	b97c      	cbnz	r4, 801b91c <__pow5mult+0x48>
 801b8fc:	2010      	movs	r0, #16
 801b8fe:	f7fd fed3 	bl	80196a8 <malloc>
 801b902:	4602      	mov	r2, r0
 801b904:	6270      	str	r0, [r6, #36]	; 0x24
 801b906:	b928      	cbnz	r0, 801b914 <__pow5mult+0x40>
 801b908:	4b1d      	ldr	r3, [pc, #116]	; (801b980 <__pow5mult+0xac>)
 801b90a:	481e      	ldr	r0, [pc, #120]	; (801b984 <__pow5mult+0xb0>)
 801b90c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801b910:	f7fe fd50 	bl	801a3b4 <__assert_func>
 801b914:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b918:	6004      	str	r4, [r0, #0]
 801b91a:	60c4      	str	r4, [r0, #12]
 801b91c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b920:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b924:	b94c      	cbnz	r4, 801b93a <__pow5mult+0x66>
 801b926:	f240 2171 	movw	r1, #625	; 0x271
 801b92a:	4630      	mov	r0, r6
 801b92c:	f7ff ff16 	bl	801b75c <__i2b>
 801b930:	2300      	movs	r3, #0
 801b932:	f8c8 0008 	str.w	r0, [r8, #8]
 801b936:	4604      	mov	r4, r0
 801b938:	6003      	str	r3, [r0, #0]
 801b93a:	f04f 0900 	mov.w	r9, #0
 801b93e:	07eb      	lsls	r3, r5, #31
 801b940:	d50a      	bpl.n	801b958 <__pow5mult+0x84>
 801b942:	4639      	mov	r1, r7
 801b944:	4622      	mov	r2, r4
 801b946:	4630      	mov	r0, r6
 801b948:	f7ff ff1e 	bl	801b788 <__multiply>
 801b94c:	4639      	mov	r1, r7
 801b94e:	4680      	mov	r8, r0
 801b950:	4630      	mov	r0, r6
 801b952:	f7ff fe47 	bl	801b5e4 <_Bfree>
 801b956:	4647      	mov	r7, r8
 801b958:	106d      	asrs	r5, r5, #1
 801b95a:	d00b      	beq.n	801b974 <__pow5mult+0xa0>
 801b95c:	6820      	ldr	r0, [r4, #0]
 801b95e:	b938      	cbnz	r0, 801b970 <__pow5mult+0x9c>
 801b960:	4622      	mov	r2, r4
 801b962:	4621      	mov	r1, r4
 801b964:	4630      	mov	r0, r6
 801b966:	f7ff ff0f 	bl	801b788 <__multiply>
 801b96a:	6020      	str	r0, [r4, #0]
 801b96c:	f8c0 9000 	str.w	r9, [r0]
 801b970:	4604      	mov	r4, r0
 801b972:	e7e4      	b.n	801b93e <__pow5mult+0x6a>
 801b974:	4638      	mov	r0, r7
 801b976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b97a:	bf00      	nop
 801b97c:	0801f988 	.word	0x0801f988
 801b980:	0801f6a8 	.word	0x0801f6a8
 801b984:	0801f838 	.word	0x0801f838

0801b988 <__lshift>:
 801b988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b98c:	460c      	mov	r4, r1
 801b98e:	6849      	ldr	r1, [r1, #4]
 801b990:	6923      	ldr	r3, [r4, #16]
 801b992:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b996:	68a3      	ldr	r3, [r4, #8]
 801b998:	4607      	mov	r7, r0
 801b99a:	4691      	mov	r9, r2
 801b99c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b9a0:	f108 0601 	add.w	r6, r8, #1
 801b9a4:	42b3      	cmp	r3, r6
 801b9a6:	db0b      	blt.n	801b9c0 <__lshift+0x38>
 801b9a8:	4638      	mov	r0, r7
 801b9aa:	f7ff fddb 	bl	801b564 <_Balloc>
 801b9ae:	4605      	mov	r5, r0
 801b9b0:	b948      	cbnz	r0, 801b9c6 <__lshift+0x3e>
 801b9b2:	4602      	mov	r2, r0
 801b9b4:	4b28      	ldr	r3, [pc, #160]	; (801ba58 <__lshift+0xd0>)
 801b9b6:	4829      	ldr	r0, [pc, #164]	; (801ba5c <__lshift+0xd4>)
 801b9b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 801b9bc:	f7fe fcfa 	bl	801a3b4 <__assert_func>
 801b9c0:	3101      	adds	r1, #1
 801b9c2:	005b      	lsls	r3, r3, #1
 801b9c4:	e7ee      	b.n	801b9a4 <__lshift+0x1c>
 801b9c6:	2300      	movs	r3, #0
 801b9c8:	f100 0114 	add.w	r1, r0, #20
 801b9cc:	f100 0210 	add.w	r2, r0, #16
 801b9d0:	4618      	mov	r0, r3
 801b9d2:	4553      	cmp	r3, sl
 801b9d4:	db33      	blt.n	801ba3e <__lshift+0xb6>
 801b9d6:	6920      	ldr	r0, [r4, #16]
 801b9d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b9dc:	f104 0314 	add.w	r3, r4, #20
 801b9e0:	f019 091f 	ands.w	r9, r9, #31
 801b9e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b9e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b9ec:	d02b      	beq.n	801ba46 <__lshift+0xbe>
 801b9ee:	f1c9 0e20 	rsb	lr, r9, #32
 801b9f2:	468a      	mov	sl, r1
 801b9f4:	2200      	movs	r2, #0
 801b9f6:	6818      	ldr	r0, [r3, #0]
 801b9f8:	fa00 f009 	lsl.w	r0, r0, r9
 801b9fc:	4302      	orrs	r2, r0
 801b9fe:	f84a 2b04 	str.w	r2, [sl], #4
 801ba02:	f853 2b04 	ldr.w	r2, [r3], #4
 801ba06:	459c      	cmp	ip, r3
 801ba08:	fa22 f20e 	lsr.w	r2, r2, lr
 801ba0c:	d8f3      	bhi.n	801b9f6 <__lshift+0x6e>
 801ba0e:	ebac 0304 	sub.w	r3, ip, r4
 801ba12:	3b15      	subs	r3, #21
 801ba14:	f023 0303 	bic.w	r3, r3, #3
 801ba18:	3304      	adds	r3, #4
 801ba1a:	f104 0015 	add.w	r0, r4, #21
 801ba1e:	4584      	cmp	ip, r0
 801ba20:	bf38      	it	cc
 801ba22:	2304      	movcc	r3, #4
 801ba24:	50ca      	str	r2, [r1, r3]
 801ba26:	b10a      	cbz	r2, 801ba2c <__lshift+0xa4>
 801ba28:	f108 0602 	add.w	r6, r8, #2
 801ba2c:	3e01      	subs	r6, #1
 801ba2e:	4638      	mov	r0, r7
 801ba30:	612e      	str	r6, [r5, #16]
 801ba32:	4621      	mov	r1, r4
 801ba34:	f7ff fdd6 	bl	801b5e4 <_Bfree>
 801ba38:	4628      	mov	r0, r5
 801ba3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba3e:	f842 0f04 	str.w	r0, [r2, #4]!
 801ba42:	3301      	adds	r3, #1
 801ba44:	e7c5      	b.n	801b9d2 <__lshift+0x4a>
 801ba46:	3904      	subs	r1, #4
 801ba48:	f853 2b04 	ldr.w	r2, [r3], #4
 801ba4c:	f841 2f04 	str.w	r2, [r1, #4]!
 801ba50:	459c      	cmp	ip, r3
 801ba52:	d8f9      	bhi.n	801ba48 <__lshift+0xc0>
 801ba54:	e7ea      	b.n	801ba2c <__lshift+0xa4>
 801ba56:	bf00      	nop
 801ba58:	0801f7c6 	.word	0x0801f7c6
 801ba5c:	0801f838 	.word	0x0801f838

0801ba60 <__mcmp>:
 801ba60:	b530      	push	{r4, r5, lr}
 801ba62:	6902      	ldr	r2, [r0, #16]
 801ba64:	690c      	ldr	r4, [r1, #16]
 801ba66:	1b12      	subs	r2, r2, r4
 801ba68:	d10e      	bne.n	801ba88 <__mcmp+0x28>
 801ba6a:	f100 0314 	add.w	r3, r0, #20
 801ba6e:	3114      	adds	r1, #20
 801ba70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ba74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ba78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ba7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ba80:	42a5      	cmp	r5, r4
 801ba82:	d003      	beq.n	801ba8c <__mcmp+0x2c>
 801ba84:	d305      	bcc.n	801ba92 <__mcmp+0x32>
 801ba86:	2201      	movs	r2, #1
 801ba88:	4610      	mov	r0, r2
 801ba8a:	bd30      	pop	{r4, r5, pc}
 801ba8c:	4283      	cmp	r3, r0
 801ba8e:	d3f3      	bcc.n	801ba78 <__mcmp+0x18>
 801ba90:	e7fa      	b.n	801ba88 <__mcmp+0x28>
 801ba92:	f04f 32ff 	mov.w	r2, #4294967295
 801ba96:	e7f7      	b.n	801ba88 <__mcmp+0x28>

0801ba98 <__mdiff>:
 801ba98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba9c:	460c      	mov	r4, r1
 801ba9e:	4606      	mov	r6, r0
 801baa0:	4611      	mov	r1, r2
 801baa2:	4620      	mov	r0, r4
 801baa4:	4617      	mov	r7, r2
 801baa6:	f7ff ffdb 	bl	801ba60 <__mcmp>
 801baaa:	1e05      	subs	r5, r0, #0
 801baac:	d110      	bne.n	801bad0 <__mdiff+0x38>
 801baae:	4629      	mov	r1, r5
 801bab0:	4630      	mov	r0, r6
 801bab2:	f7ff fd57 	bl	801b564 <_Balloc>
 801bab6:	b930      	cbnz	r0, 801bac6 <__mdiff+0x2e>
 801bab8:	4b39      	ldr	r3, [pc, #228]	; (801bba0 <__mdiff+0x108>)
 801baba:	4602      	mov	r2, r0
 801babc:	f240 2132 	movw	r1, #562	; 0x232
 801bac0:	4838      	ldr	r0, [pc, #224]	; (801bba4 <__mdiff+0x10c>)
 801bac2:	f7fe fc77 	bl	801a3b4 <__assert_func>
 801bac6:	2301      	movs	r3, #1
 801bac8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bacc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bad0:	bfa4      	itt	ge
 801bad2:	463b      	movge	r3, r7
 801bad4:	4627      	movge	r7, r4
 801bad6:	4630      	mov	r0, r6
 801bad8:	6879      	ldr	r1, [r7, #4]
 801bada:	bfa6      	itte	ge
 801badc:	461c      	movge	r4, r3
 801bade:	2500      	movge	r5, #0
 801bae0:	2501      	movlt	r5, #1
 801bae2:	f7ff fd3f 	bl	801b564 <_Balloc>
 801bae6:	b920      	cbnz	r0, 801baf2 <__mdiff+0x5a>
 801bae8:	4b2d      	ldr	r3, [pc, #180]	; (801bba0 <__mdiff+0x108>)
 801baea:	4602      	mov	r2, r0
 801baec:	f44f 7110 	mov.w	r1, #576	; 0x240
 801baf0:	e7e6      	b.n	801bac0 <__mdiff+0x28>
 801baf2:	693e      	ldr	r6, [r7, #16]
 801baf4:	60c5      	str	r5, [r0, #12]
 801baf6:	6925      	ldr	r5, [r4, #16]
 801baf8:	f107 0114 	add.w	r1, r7, #20
 801bafc:	f104 0914 	add.w	r9, r4, #20
 801bb00:	f100 0e14 	add.w	lr, r0, #20
 801bb04:	f107 0210 	add.w	r2, r7, #16
 801bb08:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801bb0c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801bb10:	46f2      	mov	sl, lr
 801bb12:	2700      	movs	r7, #0
 801bb14:	f859 3b04 	ldr.w	r3, [r9], #4
 801bb18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801bb1c:	fa1f f883 	uxth.w	r8, r3
 801bb20:	fa17 f78b 	uxtah	r7, r7, fp
 801bb24:	0c1b      	lsrs	r3, r3, #16
 801bb26:	eba7 0808 	sub.w	r8, r7, r8
 801bb2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801bb2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801bb32:	fa1f f888 	uxth.w	r8, r8
 801bb36:	141f      	asrs	r7, r3, #16
 801bb38:	454d      	cmp	r5, r9
 801bb3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801bb3e:	f84a 3b04 	str.w	r3, [sl], #4
 801bb42:	d8e7      	bhi.n	801bb14 <__mdiff+0x7c>
 801bb44:	1b2b      	subs	r3, r5, r4
 801bb46:	3b15      	subs	r3, #21
 801bb48:	f023 0303 	bic.w	r3, r3, #3
 801bb4c:	3304      	adds	r3, #4
 801bb4e:	3415      	adds	r4, #21
 801bb50:	42a5      	cmp	r5, r4
 801bb52:	bf38      	it	cc
 801bb54:	2304      	movcc	r3, #4
 801bb56:	4419      	add	r1, r3
 801bb58:	4473      	add	r3, lr
 801bb5a:	469e      	mov	lr, r3
 801bb5c:	460d      	mov	r5, r1
 801bb5e:	4565      	cmp	r5, ip
 801bb60:	d30e      	bcc.n	801bb80 <__mdiff+0xe8>
 801bb62:	f10c 0203 	add.w	r2, ip, #3
 801bb66:	1a52      	subs	r2, r2, r1
 801bb68:	f022 0203 	bic.w	r2, r2, #3
 801bb6c:	3903      	subs	r1, #3
 801bb6e:	458c      	cmp	ip, r1
 801bb70:	bf38      	it	cc
 801bb72:	2200      	movcc	r2, #0
 801bb74:	441a      	add	r2, r3
 801bb76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801bb7a:	b17b      	cbz	r3, 801bb9c <__mdiff+0x104>
 801bb7c:	6106      	str	r6, [r0, #16]
 801bb7e:	e7a5      	b.n	801bacc <__mdiff+0x34>
 801bb80:	f855 8b04 	ldr.w	r8, [r5], #4
 801bb84:	fa17 f488 	uxtah	r4, r7, r8
 801bb88:	1422      	asrs	r2, r4, #16
 801bb8a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801bb8e:	b2a4      	uxth	r4, r4
 801bb90:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801bb94:	f84e 4b04 	str.w	r4, [lr], #4
 801bb98:	1417      	asrs	r7, r2, #16
 801bb9a:	e7e0      	b.n	801bb5e <__mdiff+0xc6>
 801bb9c:	3e01      	subs	r6, #1
 801bb9e:	e7ea      	b.n	801bb76 <__mdiff+0xde>
 801bba0:	0801f7c6 	.word	0x0801f7c6
 801bba4:	0801f838 	.word	0x0801f838

0801bba8 <__d2b>:
 801bba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bbac:	4689      	mov	r9, r1
 801bbae:	2101      	movs	r1, #1
 801bbb0:	ec57 6b10 	vmov	r6, r7, d0
 801bbb4:	4690      	mov	r8, r2
 801bbb6:	f7ff fcd5 	bl	801b564 <_Balloc>
 801bbba:	4604      	mov	r4, r0
 801bbbc:	b930      	cbnz	r0, 801bbcc <__d2b+0x24>
 801bbbe:	4602      	mov	r2, r0
 801bbc0:	4b25      	ldr	r3, [pc, #148]	; (801bc58 <__d2b+0xb0>)
 801bbc2:	4826      	ldr	r0, [pc, #152]	; (801bc5c <__d2b+0xb4>)
 801bbc4:	f240 310a 	movw	r1, #778	; 0x30a
 801bbc8:	f7fe fbf4 	bl	801a3b4 <__assert_func>
 801bbcc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801bbd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801bbd4:	bb35      	cbnz	r5, 801bc24 <__d2b+0x7c>
 801bbd6:	2e00      	cmp	r6, #0
 801bbd8:	9301      	str	r3, [sp, #4]
 801bbda:	d028      	beq.n	801bc2e <__d2b+0x86>
 801bbdc:	4668      	mov	r0, sp
 801bbde:	9600      	str	r6, [sp, #0]
 801bbe0:	f7ff fd8c 	bl	801b6fc <__lo0bits>
 801bbe4:	9900      	ldr	r1, [sp, #0]
 801bbe6:	b300      	cbz	r0, 801bc2a <__d2b+0x82>
 801bbe8:	9a01      	ldr	r2, [sp, #4]
 801bbea:	f1c0 0320 	rsb	r3, r0, #32
 801bbee:	fa02 f303 	lsl.w	r3, r2, r3
 801bbf2:	430b      	orrs	r3, r1
 801bbf4:	40c2      	lsrs	r2, r0
 801bbf6:	6163      	str	r3, [r4, #20]
 801bbf8:	9201      	str	r2, [sp, #4]
 801bbfa:	9b01      	ldr	r3, [sp, #4]
 801bbfc:	61a3      	str	r3, [r4, #24]
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	bf14      	ite	ne
 801bc02:	2202      	movne	r2, #2
 801bc04:	2201      	moveq	r2, #1
 801bc06:	6122      	str	r2, [r4, #16]
 801bc08:	b1d5      	cbz	r5, 801bc40 <__d2b+0x98>
 801bc0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801bc0e:	4405      	add	r5, r0
 801bc10:	f8c9 5000 	str.w	r5, [r9]
 801bc14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801bc18:	f8c8 0000 	str.w	r0, [r8]
 801bc1c:	4620      	mov	r0, r4
 801bc1e:	b003      	add	sp, #12
 801bc20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bc28:	e7d5      	b.n	801bbd6 <__d2b+0x2e>
 801bc2a:	6161      	str	r1, [r4, #20]
 801bc2c:	e7e5      	b.n	801bbfa <__d2b+0x52>
 801bc2e:	a801      	add	r0, sp, #4
 801bc30:	f7ff fd64 	bl	801b6fc <__lo0bits>
 801bc34:	9b01      	ldr	r3, [sp, #4]
 801bc36:	6163      	str	r3, [r4, #20]
 801bc38:	2201      	movs	r2, #1
 801bc3a:	6122      	str	r2, [r4, #16]
 801bc3c:	3020      	adds	r0, #32
 801bc3e:	e7e3      	b.n	801bc08 <__d2b+0x60>
 801bc40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801bc44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801bc48:	f8c9 0000 	str.w	r0, [r9]
 801bc4c:	6918      	ldr	r0, [r3, #16]
 801bc4e:	f7ff fd35 	bl	801b6bc <__hi0bits>
 801bc52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801bc56:	e7df      	b.n	801bc18 <__d2b+0x70>
 801bc58:	0801f7c6 	.word	0x0801f7c6
 801bc5c:	0801f838 	.word	0x0801f838

0801bc60 <_calloc_r>:
 801bc60:	b513      	push	{r0, r1, r4, lr}
 801bc62:	434a      	muls	r2, r1
 801bc64:	4611      	mov	r1, r2
 801bc66:	9201      	str	r2, [sp, #4]
 801bc68:	f7fd fda2 	bl	80197b0 <_malloc_r>
 801bc6c:	4604      	mov	r4, r0
 801bc6e:	b118      	cbz	r0, 801bc78 <_calloc_r+0x18>
 801bc70:	9a01      	ldr	r2, [sp, #4]
 801bc72:	2100      	movs	r1, #0
 801bc74:	f7fd fd44 	bl	8019700 <memset>
 801bc78:	4620      	mov	r0, r4
 801bc7a:	b002      	add	sp, #8
 801bc7c:	bd10      	pop	{r4, pc}

0801bc7e <__sfputc_r>:
 801bc7e:	6893      	ldr	r3, [r2, #8]
 801bc80:	3b01      	subs	r3, #1
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	b410      	push	{r4}
 801bc86:	6093      	str	r3, [r2, #8]
 801bc88:	da08      	bge.n	801bc9c <__sfputc_r+0x1e>
 801bc8a:	6994      	ldr	r4, [r2, #24]
 801bc8c:	42a3      	cmp	r3, r4
 801bc8e:	db01      	blt.n	801bc94 <__sfputc_r+0x16>
 801bc90:	290a      	cmp	r1, #10
 801bc92:	d103      	bne.n	801bc9c <__sfputc_r+0x1e>
 801bc94:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc98:	f7fe bacc 	b.w	801a234 <__swbuf_r>
 801bc9c:	6813      	ldr	r3, [r2, #0]
 801bc9e:	1c58      	adds	r0, r3, #1
 801bca0:	6010      	str	r0, [r2, #0]
 801bca2:	7019      	strb	r1, [r3, #0]
 801bca4:	4608      	mov	r0, r1
 801bca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bcaa:	4770      	bx	lr

0801bcac <__sfputs_r>:
 801bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcae:	4606      	mov	r6, r0
 801bcb0:	460f      	mov	r7, r1
 801bcb2:	4614      	mov	r4, r2
 801bcb4:	18d5      	adds	r5, r2, r3
 801bcb6:	42ac      	cmp	r4, r5
 801bcb8:	d101      	bne.n	801bcbe <__sfputs_r+0x12>
 801bcba:	2000      	movs	r0, #0
 801bcbc:	e007      	b.n	801bcce <__sfputs_r+0x22>
 801bcbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bcc2:	463a      	mov	r2, r7
 801bcc4:	4630      	mov	r0, r6
 801bcc6:	f7ff ffda 	bl	801bc7e <__sfputc_r>
 801bcca:	1c43      	adds	r3, r0, #1
 801bccc:	d1f3      	bne.n	801bcb6 <__sfputs_r+0xa>
 801bcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bcd0 <_vfiprintf_r>:
 801bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcd4:	460d      	mov	r5, r1
 801bcd6:	b09d      	sub	sp, #116	; 0x74
 801bcd8:	4614      	mov	r4, r2
 801bcda:	4698      	mov	r8, r3
 801bcdc:	4606      	mov	r6, r0
 801bcde:	b118      	cbz	r0, 801bce8 <_vfiprintf_r+0x18>
 801bce0:	6983      	ldr	r3, [r0, #24]
 801bce2:	b90b      	cbnz	r3, 801bce8 <_vfiprintf_r+0x18>
 801bce4:	f7ff fb16 	bl	801b314 <__sinit>
 801bce8:	4b89      	ldr	r3, [pc, #548]	; (801bf10 <_vfiprintf_r+0x240>)
 801bcea:	429d      	cmp	r5, r3
 801bcec:	d11b      	bne.n	801bd26 <_vfiprintf_r+0x56>
 801bcee:	6875      	ldr	r5, [r6, #4]
 801bcf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bcf2:	07d9      	lsls	r1, r3, #31
 801bcf4:	d405      	bmi.n	801bd02 <_vfiprintf_r+0x32>
 801bcf6:	89ab      	ldrh	r3, [r5, #12]
 801bcf8:	059a      	lsls	r2, r3, #22
 801bcfa:	d402      	bmi.n	801bd02 <_vfiprintf_r+0x32>
 801bcfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bcfe:	f7ff fbbe 	bl	801b47e <__retarget_lock_acquire_recursive>
 801bd02:	89ab      	ldrh	r3, [r5, #12]
 801bd04:	071b      	lsls	r3, r3, #28
 801bd06:	d501      	bpl.n	801bd0c <_vfiprintf_r+0x3c>
 801bd08:	692b      	ldr	r3, [r5, #16]
 801bd0a:	b9eb      	cbnz	r3, 801bd48 <_vfiprintf_r+0x78>
 801bd0c:	4629      	mov	r1, r5
 801bd0e:	4630      	mov	r0, r6
 801bd10:	f7fe fae2 	bl	801a2d8 <__swsetup_r>
 801bd14:	b1c0      	cbz	r0, 801bd48 <_vfiprintf_r+0x78>
 801bd16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bd18:	07dc      	lsls	r4, r3, #31
 801bd1a:	d50e      	bpl.n	801bd3a <_vfiprintf_r+0x6a>
 801bd1c:	f04f 30ff 	mov.w	r0, #4294967295
 801bd20:	b01d      	add	sp, #116	; 0x74
 801bd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd26:	4b7b      	ldr	r3, [pc, #492]	; (801bf14 <_vfiprintf_r+0x244>)
 801bd28:	429d      	cmp	r5, r3
 801bd2a:	d101      	bne.n	801bd30 <_vfiprintf_r+0x60>
 801bd2c:	68b5      	ldr	r5, [r6, #8]
 801bd2e:	e7df      	b.n	801bcf0 <_vfiprintf_r+0x20>
 801bd30:	4b79      	ldr	r3, [pc, #484]	; (801bf18 <_vfiprintf_r+0x248>)
 801bd32:	429d      	cmp	r5, r3
 801bd34:	bf08      	it	eq
 801bd36:	68f5      	ldreq	r5, [r6, #12]
 801bd38:	e7da      	b.n	801bcf0 <_vfiprintf_r+0x20>
 801bd3a:	89ab      	ldrh	r3, [r5, #12]
 801bd3c:	0598      	lsls	r0, r3, #22
 801bd3e:	d4ed      	bmi.n	801bd1c <_vfiprintf_r+0x4c>
 801bd40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bd42:	f7ff fb9d 	bl	801b480 <__retarget_lock_release_recursive>
 801bd46:	e7e9      	b.n	801bd1c <_vfiprintf_r+0x4c>
 801bd48:	2300      	movs	r3, #0
 801bd4a:	9309      	str	r3, [sp, #36]	; 0x24
 801bd4c:	2320      	movs	r3, #32
 801bd4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bd52:	f8cd 800c 	str.w	r8, [sp, #12]
 801bd56:	2330      	movs	r3, #48	; 0x30
 801bd58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801bf1c <_vfiprintf_r+0x24c>
 801bd5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bd60:	f04f 0901 	mov.w	r9, #1
 801bd64:	4623      	mov	r3, r4
 801bd66:	469a      	mov	sl, r3
 801bd68:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd6c:	b10a      	cbz	r2, 801bd72 <_vfiprintf_r+0xa2>
 801bd6e:	2a25      	cmp	r2, #37	; 0x25
 801bd70:	d1f9      	bne.n	801bd66 <_vfiprintf_r+0x96>
 801bd72:	ebba 0b04 	subs.w	fp, sl, r4
 801bd76:	d00b      	beq.n	801bd90 <_vfiprintf_r+0xc0>
 801bd78:	465b      	mov	r3, fp
 801bd7a:	4622      	mov	r2, r4
 801bd7c:	4629      	mov	r1, r5
 801bd7e:	4630      	mov	r0, r6
 801bd80:	f7ff ff94 	bl	801bcac <__sfputs_r>
 801bd84:	3001      	adds	r0, #1
 801bd86:	f000 80aa 	beq.w	801bede <_vfiprintf_r+0x20e>
 801bd8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd8c:	445a      	add	r2, fp
 801bd8e:	9209      	str	r2, [sp, #36]	; 0x24
 801bd90:	f89a 3000 	ldrb.w	r3, [sl]
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	f000 80a2 	beq.w	801bede <_vfiprintf_r+0x20e>
 801bd9a:	2300      	movs	r3, #0
 801bd9c:	f04f 32ff 	mov.w	r2, #4294967295
 801bda0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bda4:	f10a 0a01 	add.w	sl, sl, #1
 801bda8:	9304      	str	r3, [sp, #16]
 801bdaa:	9307      	str	r3, [sp, #28]
 801bdac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bdb0:	931a      	str	r3, [sp, #104]	; 0x68
 801bdb2:	4654      	mov	r4, sl
 801bdb4:	2205      	movs	r2, #5
 801bdb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bdba:	4858      	ldr	r0, [pc, #352]	; (801bf1c <_vfiprintf_r+0x24c>)
 801bdbc:	f7e4 fa10 	bl	80001e0 <memchr>
 801bdc0:	9a04      	ldr	r2, [sp, #16]
 801bdc2:	b9d8      	cbnz	r0, 801bdfc <_vfiprintf_r+0x12c>
 801bdc4:	06d1      	lsls	r1, r2, #27
 801bdc6:	bf44      	itt	mi
 801bdc8:	2320      	movmi	r3, #32
 801bdca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bdce:	0713      	lsls	r3, r2, #28
 801bdd0:	bf44      	itt	mi
 801bdd2:	232b      	movmi	r3, #43	; 0x2b
 801bdd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bdd8:	f89a 3000 	ldrb.w	r3, [sl]
 801bddc:	2b2a      	cmp	r3, #42	; 0x2a
 801bdde:	d015      	beq.n	801be0c <_vfiprintf_r+0x13c>
 801bde0:	9a07      	ldr	r2, [sp, #28]
 801bde2:	4654      	mov	r4, sl
 801bde4:	2000      	movs	r0, #0
 801bde6:	f04f 0c0a 	mov.w	ip, #10
 801bdea:	4621      	mov	r1, r4
 801bdec:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bdf0:	3b30      	subs	r3, #48	; 0x30
 801bdf2:	2b09      	cmp	r3, #9
 801bdf4:	d94e      	bls.n	801be94 <_vfiprintf_r+0x1c4>
 801bdf6:	b1b0      	cbz	r0, 801be26 <_vfiprintf_r+0x156>
 801bdf8:	9207      	str	r2, [sp, #28]
 801bdfa:	e014      	b.n	801be26 <_vfiprintf_r+0x156>
 801bdfc:	eba0 0308 	sub.w	r3, r0, r8
 801be00:	fa09 f303 	lsl.w	r3, r9, r3
 801be04:	4313      	orrs	r3, r2
 801be06:	9304      	str	r3, [sp, #16]
 801be08:	46a2      	mov	sl, r4
 801be0a:	e7d2      	b.n	801bdb2 <_vfiprintf_r+0xe2>
 801be0c:	9b03      	ldr	r3, [sp, #12]
 801be0e:	1d19      	adds	r1, r3, #4
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	9103      	str	r1, [sp, #12]
 801be14:	2b00      	cmp	r3, #0
 801be16:	bfbb      	ittet	lt
 801be18:	425b      	neglt	r3, r3
 801be1a:	f042 0202 	orrlt.w	r2, r2, #2
 801be1e:	9307      	strge	r3, [sp, #28]
 801be20:	9307      	strlt	r3, [sp, #28]
 801be22:	bfb8      	it	lt
 801be24:	9204      	strlt	r2, [sp, #16]
 801be26:	7823      	ldrb	r3, [r4, #0]
 801be28:	2b2e      	cmp	r3, #46	; 0x2e
 801be2a:	d10c      	bne.n	801be46 <_vfiprintf_r+0x176>
 801be2c:	7863      	ldrb	r3, [r4, #1]
 801be2e:	2b2a      	cmp	r3, #42	; 0x2a
 801be30:	d135      	bne.n	801be9e <_vfiprintf_r+0x1ce>
 801be32:	9b03      	ldr	r3, [sp, #12]
 801be34:	1d1a      	adds	r2, r3, #4
 801be36:	681b      	ldr	r3, [r3, #0]
 801be38:	9203      	str	r2, [sp, #12]
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	bfb8      	it	lt
 801be3e:	f04f 33ff 	movlt.w	r3, #4294967295
 801be42:	3402      	adds	r4, #2
 801be44:	9305      	str	r3, [sp, #20]
 801be46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801bf2c <_vfiprintf_r+0x25c>
 801be4a:	7821      	ldrb	r1, [r4, #0]
 801be4c:	2203      	movs	r2, #3
 801be4e:	4650      	mov	r0, sl
 801be50:	f7e4 f9c6 	bl	80001e0 <memchr>
 801be54:	b140      	cbz	r0, 801be68 <_vfiprintf_r+0x198>
 801be56:	2340      	movs	r3, #64	; 0x40
 801be58:	eba0 000a 	sub.w	r0, r0, sl
 801be5c:	fa03 f000 	lsl.w	r0, r3, r0
 801be60:	9b04      	ldr	r3, [sp, #16]
 801be62:	4303      	orrs	r3, r0
 801be64:	3401      	adds	r4, #1
 801be66:	9304      	str	r3, [sp, #16]
 801be68:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be6c:	482c      	ldr	r0, [pc, #176]	; (801bf20 <_vfiprintf_r+0x250>)
 801be6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801be72:	2206      	movs	r2, #6
 801be74:	f7e4 f9b4 	bl	80001e0 <memchr>
 801be78:	2800      	cmp	r0, #0
 801be7a:	d03f      	beq.n	801befc <_vfiprintf_r+0x22c>
 801be7c:	4b29      	ldr	r3, [pc, #164]	; (801bf24 <_vfiprintf_r+0x254>)
 801be7e:	bb1b      	cbnz	r3, 801bec8 <_vfiprintf_r+0x1f8>
 801be80:	9b03      	ldr	r3, [sp, #12]
 801be82:	3307      	adds	r3, #7
 801be84:	f023 0307 	bic.w	r3, r3, #7
 801be88:	3308      	adds	r3, #8
 801be8a:	9303      	str	r3, [sp, #12]
 801be8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be8e:	443b      	add	r3, r7
 801be90:	9309      	str	r3, [sp, #36]	; 0x24
 801be92:	e767      	b.n	801bd64 <_vfiprintf_r+0x94>
 801be94:	fb0c 3202 	mla	r2, ip, r2, r3
 801be98:	460c      	mov	r4, r1
 801be9a:	2001      	movs	r0, #1
 801be9c:	e7a5      	b.n	801bdea <_vfiprintf_r+0x11a>
 801be9e:	2300      	movs	r3, #0
 801bea0:	3401      	adds	r4, #1
 801bea2:	9305      	str	r3, [sp, #20]
 801bea4:	4619      	mov	r1, r3
 801bea6:	f04f 0c0a 	mov.w	ip, #10
 801beaa:	4620      	mov	r0, r4
 801beac:	f810 2b01 	ldrb.w	r2, [r0], #1
 801beb0:	3a30      	subs	r2, #48	; 0x30
 801beb2:	2a09      	cmp	r2, #9
 801beb4:	d903      	bls.n	801bebe <_vfiprintf_r+0x1ee>
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d0c5      	beq.n	801be46 <_vfiprintf_r+0x176>
 801beba:	9105      	str	r1, [sp, #20]
 801bebc:	e7c3      	b.n	801be46 <_vfiprintf_r+0x176>
 801bebe:	fb0c 2101 	mla	r1, ip, r1, r2
 801bec2:	4604      	mov	r4, r0
 801bec4:	2301      	movs	r3, #1
 801bec6:	e7f0      	b.n	801beaa <_vfiprintf_r+0x1da>
 801bec8:	ab03      	add	r3, sp, #12
 801beca:	9300      	str	r3, [sp, #0]
 801becc:	462a      	mov	r2, r5
 801bece:	4b16      	ldr	r3, [pc, #88]	; (801bf28 <_vfiprintf_r+0x258>)
 801bed0:	a904      	add	r1, sp, #16
 801bed2:	4630      	mov	r0, r6
 801bed4:	f7fd fd66 	bl	80199a4 <_printf_float>
 801bed8:	4607      	mov	r7, r0
 801beda:	1c78      	adds	r0, r7, #1
 801bedc:	d1d6      	bne.n	801be8c <_vfiprintf_r+0x1bc>
 801bede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bee0:	07d9      	lsls	r1, r3, #31
 801bee2:	d405      	bmi.n	801bef0 <_vfiprintf_r+0x220>
 801bee4:	89ab      	ldrh	r3, [r5, #12]
 801bee6:	059a      	lsls	r2, r3, #22
 801bee8:	d402      	bmi.n	801bef0 <_vfiprintf_r+0x220>
 801beea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801beec:	f7ff fac8 	bl	801b480 <__retarget_lock_release_recursive>
 801bef0:	89ab      	ldrh	r3, [r5, #12]
 801bef2:	065b      	lsls	r3, r3, #25
 801bef4:	f53f af12 	bmi.w	801bd1c <_vfiprintf_r+0x4c>
 801bef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801befa:	e711      	b.n	801bd20 <_vfiprintf_r+0x50>
 801befc:	ab03      	add	r3, sp, #12
 801befe:	9300      	str	r3, [sp, #0]
 801bf00:	462a      	mov	r2, r5
 801bf02:	4b09      	ldr	r3, [pc, #36]	; (801bf28 <_vfiprintf_r+0x258>)
 801bf04:	a904      	add	r1, sp, #16
 801bf06:	4630      	mov	r0, r6
 801bf08:	f7fd fff0 	bl	8019eec <_printf_i>
 801bf0c:	e7e4      	b.n	801bed8 <_vfiprintf_r+0x208>
 801bf0e:	bf00      	nop
 801bf10:	0801f7f8 	.word	0x0801f7f8
 801bf14:	0801f818 	.word	0x0801f818
 801bf18:	0801f7d8 	.word	0x0801f7d8
 801bf1c:	0801f994 	.word	0x0801f994
 801bf20:	0801f99e 	.word	0x0801f99e
 801bf24:	080199a5 	.word	0x080199a5
 801bf28:	0801bcad 	.word	0x0801bcad
 801bf2c:	0801f99a 	.word	0x0801f99a

0801bf30 <_putc_r>:
 801bf30:	b570      	push	{r4, r5, r6, lr}
 801bf32:	460d      	mov	r5, r1
 801bf34:	4614      	mov	r4, r2
 801bf36:	4606      	mov	r6, r0
 801bf38:	b118      	cbz	r0, 801bf42 <_putc_r+0x12>
 801bf3a:	6983      	ldr	r3, [r0, #24]
 801bf3c:	b90b      	cbnz	r3, 801bf42 <_putc_r+0x12>
 801bf3e:	f7ff f9e9 	bl	801b314 <__sinit>
 801bf42:	4b1c      	ldr	r3, [pc, #112]	; (801bfb4 <_putc_r+0x84>)
 801bf44:	429c      	cmp	r4, r3
 801bf46:	d124      	bne.n	801bf92 <_putc_r+0x62>
 801bf48:	6874      	ldr	r4, [r6, #4]
 801bf4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bf4c:	07d8      	lsls	r0, r3, #31
 801bf4e:	d405      	bmi.n	801bf5c <_putc_r+0x2c>
 801bf50:	89a3      	ldrh	r3, [r4, #12]
 801bf52:	0599      	lsls	r1, r3, #22
 801bf54:	d402      	bmi.n	801bf5c <_putc_r+0x2c>
 801bf56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bf58:	f7ff fa91 	bl	801b47e <__retarget_lock_acquire_recursive>
 801bf5c:	68a3      	ldr	r3, [r4, #8]
 801bf5e:	3b01      	subs	r3, #1
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	60a3      	str	r3, [r4, #8]
 801bf64:	da05      	bge.n	801bf72 <_putc_r+0x42>
 801bf66:	69a2      	ldr	r2, [r4, #24]
 801bf68:	4293      	cmp	r3, r2
 801bf6a:	db1c      	blt.n	801bfa6 <_putc_r+0x76>
 801bf6c:	b2eb      	uxtb	r3, r5
 801bf6e:	2b0a      	cmp	r3, #10
 801bf70:	d019      	beq.n	801bfa6 <_putc_r+0x76>
 801bf72:	6823      	ldr	r3, [r4, #0]
 801bf74:	1c5a      	adds	r2, r3, #1
 801bf76:	6022      	str	r2, [r4, #0]
 801bf78:	701d      	strb	r5, [r3, #0]
 801bf7a:	b2ed      	uxtb	r5, r5
 801bf7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bf7e:	07da      	lsls	r2, r3, #31
 801bf80:	d405      	bmi.n	801bf8e <_putc_r+0x5e>
 801bf82:	89a3      	ldrh	r3, [r4, #12]
 801bf84:	059b      	lsls	r3, r3, #22
 801bf86:	d402      	bmi.n	801bf8e <_putc_r+0x5e>
 801bf88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bf8a:	f7ff fa79 	bl	801b480 <__retarget_lock_release_recursive>
 801bf8e:	4628      	mov	r0, r5
 801bf90:	bd70      	pop	{r4, r5, r6, pc}
 801bf92:	4b09      	ldr	r3, [pc, #36]	; (801bfb8 <_putc_r+0x88>)
 801bf94:	429c      	cmp	r4, r3
 801bf96:	d101      	bne.n	801bf9c <_putc_r+0x6c>
 801bf98:	68b4      	ldr	r4, [r6, #8]
 801bf9a:	e7d6      	b.n	801bf4a <_putc_r+0x1a>
 801bf9c:	4b07      	ldr	r3, [pc, #28]	; (801bfbc <_putc_r+0x8c>)
 801bf9e:	429c      	cmp	r4, r3
 801bfa0:	bf08      	it	eq
 801bfa2:	68f4      	ldreq	r4, [r6, #12]
 801bfa4:	e7d1      	b.n	801bf4a <_putc_r+0x1a>
 801bfa6:	4629      	mov	r1, r5
 801bfa8:	4622      	mov	r2, r4
 801bfaa:	4630      	mov	r0, r6
 801bfac:	f7fe f942 	bl	801a234 <__swbuf_r>
 801bfb0:	4605      	mov	r5, r0
 801bfb2:	e7e3      	b.n	801bf7c <_putc_r+0x4c>
 801bfb4:	0801f7f8 	.word	0x0801f7f8
 801bfb8:	0801f818 	.word	0x0801f818
 801bfbc:	0801f7d8 	.word	0x0801f7d8

0801bfc0 <__sread>:
 801bfc0:	b510      	push	{r4, lr}
 801bfc2:	460c      	mov	r4, r1
 801bfc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bfc8:	f000 f8ae 	bl	801c128 <_read_r>
 801bfcc:	2800      	cmp	r0, #0
 801bfce:	bfab      	itete	ge
 801bfd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bfd2:	89a3      	ldrhlt	r3, [r4, #12]
 801bfd4:	181b      	addge	r3, r3, r0
 801bfd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bfda:	bfac      	ite	ge
 801bfdc:	6563      	strge	r3, [r4, #84]	; 0x54
 801bfde:	81a3      	strhlt	r3, [r4, #12]
 801bfe0:	bd10      	pop	{r4, pc}

0801bfe2 <__swrite>:
 801bfe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfe6:	461f      	mov	r7, r3
 801bfe8:	898b      	ldrh	r3, [r1, #12]
 801bfea:	05db      	lsls	r3, r3, #23
 801bfec:	4605      	mov	r5, r0
 801bfee:	460c      	mov	r4, r1
 801bff0:	4616      	mov	r6, r2
 801bff2:	d505      	bpl.n	801c000 <__swrite+0x1e>
 801bff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bff8:	2302      	movs	r3, #2
 801bffa:	2200      	movs	r2, #0
 801bffc:	f000 f870 	bl	801c0e0 <_lseek_r>
 801c000:	89a3      	ldrh	r3, [r4, #12]
 801c002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c00a:	81a3      	strh	r3, [r4, #12]
 801c00c:	4632      	mov	r2, r6
 801c00e:	463b      	mov	r3, r7
 801c010:	4628      	mov	r0, r5
 801c012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c016:	f000 b817 	b.w	801c048 <_write_r>

0801c01a <__sseek>:
 801c01a:	b510      	push	{r4, lr}
 801c01c:	460c      	mov	r4, r1
 801c01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c022:	f000 f85d 	bl	801c0e0 <_lseek_r>
 801c026:	1c43      	adds	r3, r0, #1
 801c028:	89a3      	ldrh	r3, [r4, #12]
 801c02a:	bf15      	itete	ne
 801c02c:	6560      	strne	r0, [r4, #84]	; 0x54
 801c02e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c036:	81a3      	strheq	r3, [r4, #12]
 801c038:	bf18      	it	ne
 801c03a:	81a3      	strhne	r3, [r4, #12]
 801c03c:	bd10      	pop	{r4, pc}

0801c03e <__sclose>:
 801c03e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c042:	f000 b81b 	b.w	801c07c <_close_r>
	...

0801c048 <_write_r>:
 801c048:	b538      	push	{r3, r4, r5, lr}
 801c04a:	4d07      	ldr	r5, [pc, #28]	; (801c068 <_write_r+0x20>)
 801c04c:	4604      	mov	r4, r0
 801c04e:	4608      	mov	r0, r1
 801c050:	4611      	mov	r1, r2
 801c052:	2200      	movs	r2, #0
 801c054:	602a      	str	r2, [r5, #0]
 801c056:	461a      	mov	r2, r3
 801c058:	f7e5 ffeb 	bl	8002032 <_write>
 801c05c:	1c43      	adds	r3, r0, #1
 801c05e:	d102      	bne.n	801c066 <_write_r+0x1e>
 801c060:	682b      	ldr	r3, [r5, #0]
 801c062:	b103      	cbz	r3, 801c066 <_write_r+0x1e>
 801c064:	6023      	str	r3, [r4, #0]
 801c066:	bd38      	pop	{r3, r4, r5, pc}
 801c068:	20019004 	.word	0x20019004

0801c06c <abort>:
 801c06c:	b508      	push	{r3, lr}
 801c06e:	2006      	movs	r0, #6
 801c070:	f000 f894 	bl	801c19c <raise>
 801c074:	2001      	movs	r0, #1
 801c076:	f7e5 ffb5 	bl	8001fe4 <_exit>
	...

0801c07c <_close_r>:
 801c07c:	b538      	push	{r3, r4, r5, lr}
 801c07e:	4d06      	ldr	r5, [pc, #24]	; (801c098 <_close_r+0x1c>)
 801c080:	2300      	movs	r3, #0
 801c082:	4604      	mov	r4, r0
 801c084:	4608      	mov	r0, r1
 801c086:	602b      	str	r3, [r5, #0]
 801c088:	f7e5 ffef 	bl	800206a <_close>
 801c08c:	1c43      	adds	r3, r0, #1
 801c08e:	d102      	bne.n	801c096 <_close_r+0x1a>
 801c090:	682b      	ldr	r3, [r5, #0]
 801c092:	b103      	cbz	r3, 801c096 <_close_r+0x1a>
 801c094:	6023      	str	r3, [r4, #0]
 801c096:	bd38      	pop	{r3, r4, r5, pc}
 801c098:	20019004 	.word	0x20019004

0801c09c <_fstat_r>:
 801c09c:	b538      	push	{r3, r4, r5, lr}
 801c09e:	4d07      	ldr	r5, [pc, #28]	; (801c0bc <_fstat_r+0x20>)
 801c0a0:	2300      	movs	r3, #0
 801c0a2:	4604      	mov	r4, r0
 801c0a4:	4608      	mov	r0, r1
 801c0a6:	4611      	mov	r1, r2
 801c0a8:	602b      	str	r3, [r5, #0]
 801c0aa:	f7e5 ffea 	bl	8002082 <_fstat>
 801c0ae:	1c43      	adds	r3, r0, #1
 801c0b0:	d102      	bne.n	801c0b8 <_fstat_r+0x1c>
 801c0b2:	682b      	ldr	r3, [r5, #0]
 801c0b4:	b103      	cbz	r3, 801c0b8 <_fstat_r+0x1c>
 801c0b6:	6023      	str	r3, [r4, #0]
 801c0b8:	bd38      	pop	{r3, r4, r5, pc}
 801c0ba:	bf00      	nop
 801c0bc:	20019004 	.word	0x20019004

0801c0c0 <_isatty_r>:
 801c0c0:	b538      	push	{r3, r4, r5, lr}
 801c0c2:	4d06      	ldr	r5, [pc, #24]	; (801c0dc <_isatty_r+0x1c>)
 801c0c4:	2300      	movs	r3, #0
 801c0c6:	4604      	mov	r4, r0
 801c0c8:	4608      	mov	r0, r1
 801c0ca:	602b      	str	r3, [r5, #0]
 801c0cc:	f7e5 ffe9 	bl	80020a2 <_isatty>
 801c0d0:	1c43      	adds	r3, r0, #1
 801c0d2:	d102      	bne.n	801c0da <_isatty_r+0x1a>
 801c0d4:	682b      	ldr	r3, [r5, #0]
 801c0d6:	b103      	cbz	r3, 801c0da <_isatty_r+0x1a>
 801c0d8:	6023      	str	r3, [r4, #0]
 801c0da:	bd38      	pop	{r3, r4, r5, pc}
 801c0dc:	20019004 	.word	0x20019004

0801c0e0 <_lseek_r>:
 801c0e0:	b538      	push	{r3, r4, r5, lr}
 801c0e2:	4d07      	ldr	r5, [pc, #28]	; (801c100 <_lseek_r+0x20>)
 801c0e4:	4604      	mov	r4, r0
 801c0e6:	4608      	mov	r0, r1
 801c0e8:	4611      	mov	r1, r2
 801c0ea:	2200      	movs	r2, #0
 801c0ec:	602a      	str	r2, [r5, #0]
 801c0ee:	461a      	mov	r2, r3
 801c0f0:	f7e5 ffe2 	bl	80020b8 <_lseek>
 801c0f4:	1c43      	adds	r3, r0, #1
 801c0f6:	d102      	bne.n	801c0fe <_lseek_r+0x1e>
 801c0f8:	682b      	ldr	r3, [r5, #0]
 801c0fa:	b103      	cbz	r3, 801c0fe <_lseek_r+0x1e>
 801c0fc:	6023      	str	r3, [r4, #0]
 801c0fe:	bd38      	pop	{r3, r4, r5, pc}
 801c100:	20019004 	.word	0x20019004

0801c104 <__ascii_mbtowc>:
 801c104:	b082      	sub	sp, #8
 801c106:	b901      	cbnz	r1, 801c10a <__ascii_mbtowc+0x6>
 801c108:	a901      	add	r1, sp, #4
 801c10a:	b142      	cbz	r2, 801c11e <__ascii_mbtowc+0x1a>
 801c10c:	b14b      	cbz	r3, 801c122 <__ascii_mbtowc+0x1e>
 801c10e:	7813      	ldrb	r3, [r2, #0]
 801c110:	600b      	str	r3, [r1, #0]
 801c112:	7812      	ldrb	r2, [r2, #0]
 801c114:	1e10      	subs	r0, r2, #0
 801c116:	bf18      	it	ne
 801c118:	2001      	movne	r0, #1
 801c11a:	b002      	add	sp, #8
 801c11c:	4770      	bx	lr
 801c11e:	4610      	mov	r0, r2
 801c120:	e7fb      	b.n	801c11a <__ascii_mbtowc+0x16>
 801c122:	f06f 0001 	mvn.w	r0, #1
 801c126:	e7f8      	b.n	801c11a <__ascii_mbtowc+0x16>

0801c128 <_read_r>:
 801c128:	b538      	push	{r3, r4, r5, lr}
 801c12a:	4d07      	ldr	r5, [pc, #28]	; (801c148 <_read_r+0x20>)
 801c12c:	4604      	mov	r4, r0
 801c12e:	4608      	mov	r0, r1
 801c130:	4611      	mov	r1, r2
 801c132:	2200      	movs	r2, #0
 801c134:	602a      	str	r2, [r5, #0]
 801c136:	461a      	mov	r2, r3
 801c138:	f7e5 ff5e 	bl	8001ff8 <_read>
 801c13c:	1c43      	adds	r3, r0, #1
 801c13e:	d102      	bne.n	801c146 <_read_r+0x1e>
 801c140:	682b      	ldr	r3, [r5, #0]
 801c142:	b103      	cbz	r3, 801c146 <_read_r+0x1e>
 801c144:	6023      	str	r3, [r4, #0]
 801c146:	bd38      	pop	{r3, r4, r5, pc}
 801c148:	20019004 	.word	0x20019004

0801c14c <_raise_r>:
 801c14c:	291f      	cmp	r1, #31
 801c14e:	b538      	push	{r3, r4, r5, lr}
 801c150:	4604      	mov	r4, r0
 801c152:	460d      	mov	r5, r1
 801c154:	d904      	bls.n	801c160 <_raise_r+0x14>
 801c156:	2316      	movs	r3, #22
 801c158:	6003      	str	r3, [r0, #0]
 801c15a:	f04f 30ff 	mov.w	r0, #4294967295
 801c15e:	bd38      	pop	{r3, r4, r5, pc}
 801c160:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c162:	b112      	cbz	r2, 801c16a <_raise_r+0x1e>
 801c164:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c168:	b94b      	cbnz	r3, 801c17e <_raise_r+0x32>
 801c16a:	4620      	mov	r0, r4
 801c16c:	f000 f830 	bl	801c1d0 <_getpid_r>
 801c170:	462a      	mov	r2, r5
 801c172:	4601      	mov	r1, r0
 801c174:	4620      	mov	r0, r4
 801c176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c17a:	f000 b817 	b.w	801c1ac <_kill_r>
 801c17e:	2b01      	cmp	r3, #1
 801c180:	d00a      	beq.n	801c198 <_raise_r+0x4c>
 801c182:	1c59      	adds	r1, r3, #1
 801c184:	d103      	bne.n	801c18e <_raise_r+0x42>
 801c186:	2316      	movs	r3, #22
 801c188:	6003      	str	r3, [r0, #0]
 801c18a:	2001      	movs	r0, #1
 801c18c:	e7e7      	b.n	801c15e <_raise_r+0x12>
 801c18e:	2400      	movs	r4, #0
 801c190:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c194:	4628      	mov	r0, r5
 801c196:	4798      	blx	r3
 801c198:	2000      	movs	r0, #0
 801c19a:	e7e0      	b.n	801c15e <_raise_r+0x12>

0801c19c <raise>:
 801c19c:	4b02      	ldr	r3, [pc, #8]	; (801c1a8 <raise+0xc>)
 801c19e:	4601      	mov	r1, r0
 801c1a0:	6818      	ldr	r0, [r3, #0]
 801c1a2:	f7ff bfd3 	b.w	801c14c <_raise_r>
 801c1a6:	bf00      	nop
 801c1a8:	200005b8 	.word	0x200005b8

0801c1ac <_kill_r>:
 801c1ac:	b538      	push	{r3, r4, r5, lr}
 801c1ae:	4d07      	ldr	r5, [pc, #28]	; (801c1cc <_kill_r+0x20>)
 801c1b0:	2300      	movs	r3, #0
 801c1b2:	4604      	mov	r4, r0
 801c1b4:	4608      	mov	r0, r1
 801c1b6:	4611      	mov	r1, r2
 801c1b8:	602b      	str	r3, [r5, #0]
 801c1ba:	f7e5 ff01 	bl	8001fc0 <_kill>
 801c1be:	1c43      	adds	r3, r0, #1
 801c1c0:	d102      	bne.n	801c1c8 <_kill_r+0x1c>
 801c1c2:	682b      	ldr	r3, [r5, #0]
 801c1c4:	b103      	cbz	r3, 801c1c8 <_kill_r+0x1c>
 801c1c6:	6023      	str	r3, [r4, #0]
 801c1c8:	bd38      	pop	{r3, r4, r5, pc}
 801c1ca:	bf00      	nop
 801c1cc:	20019004 	.word	0x20019004

0801c1d0 <_getpid_r>:
 801c1d0:	f7e5 beee 	b.w	8001fb0 <_getpid>

0801c1d4 <__ascii_wctomb>:
 801c1d4:	b149      	cbz	r1, 801c1ea <__ascii_wctomb+0x16>
 801c1d6:	2aff      	cmp	r2, #255	; 0xff
 801c1d8:	bf85      	ittet	hi
 801c1da:	238a      	movhi	r3, #138	; 0x8a
 801c1dc:	6003      	strhi	r3, [r0, #0]
 801c1de:	700a      	strbls	r2, [r1, #0]
 801c1e0:	f04f 30ff 	movhi.w	r0, #4294967295
 801c1e4:	bf98      	it	ls
 801c1e6:	2001      	movls	r0, #1
 801c1e8:	4770      	bx	lr
 801c1ea:	4608      	mov	r0, r1
 801c1ec:	4770      	bx	lr
	...

0801c1f0 <_init>:
 801c1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1f2:	bf00      	nop
 801c1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c1f6:	bc08      	pop	{r3}
 801c1f8:	469e      	mov	lr, r3
 801c1fa:	4770      	bx	lr

0801c1fc <_fini>:
 801c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1fe:	bf00      	nop
 801c200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c202:	bc08      	pop	{r3}
 801c204:	469e      	mov	lr, r3
 801c206:	4770      	bx	lr
