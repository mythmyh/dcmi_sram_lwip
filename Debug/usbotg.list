
usbotg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019d08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034cc  08019e98  08019e98  00029e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d364  0801d364  0003061c  2**0
                  CONTENTS
  4 .ARM          00000008  0801d364  0801d364  0002d364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d36c  0801d36c  0003061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d36c  0801d36c  0002d36c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d370  0801d370  0002d370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000061c  20000000  0801d374  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003061c  2**0
                  CONTENTS
 10 .bss          00018888  2000061c  2000061c  0003061c  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  20018ea4  20018ea4  0003061c  2**0
                  ALLOC
 12 .sram         00096000  68000000  0801d990  00040000  2**2
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0003061c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004be9c  00000000  00000000  0003064c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000093ba  00000000  00000000  0007c4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e38  00000000  00000000  000858a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001c68  00000000  00000000  000876e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003344d  00000000  00000000  00089348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00036ed1  00000000  00000000  000bc795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6d53  00000000  00000000  000f3666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001da3b9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008250  00000000  00000000  001da40c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000061c 	.word	0x2000061c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019e80 	.word	0x08019e80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000620 	.word	0x20000620
 80001cc:	08019e80 	.word	0x08019e80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f001 fc27 	bl	8001dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f87f 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f971 	bl	800085c <MX_GPIO_Init>
  MX_FATFS_Init();
 800057a:	f009 fc85 	bl	8009e88 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800057e:	f018 f87f 	bl	8018680 <MX_USB_HOST_Init>
  MX_UART4_Init();
 8000582:	f000 f921 	bl	80007c8 <MX_UART4_Init>
  MX_DMA_Init();
 8000586:	f000 f949 	bl	800081c <MX_DMA_Init>
  MX_DCMI_Init();
 800058a:	f000 f8e3 	bl	8000754 <MX_DCMI_Init>
  MX_FSMC_Init();
 800058e:	f000 fa4f 	bl	8000a30 <MX_FSMC_Init>
  MX_LWIP_Init();
 8000592:	f009 fdc1 	bl	800a118 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  while(APPLICATION_READY!=Appli_state)
 8000596:	e001      	b.n	800059c <main+0x34>
	  MX_USB_HOST_Process();
 8000598:	f018 f898 	bl	80186cc <MX_USB_HOST_Process>
  while(APPLICATION_READY!=Appli_state)
 800059c:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <main+0xe8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d1f9      	bne.n	8000598 <main+0x30>
//  printf("state %d\r\n",Appli_state);
//memset(testsram,0,10000);

 PY_OV2640_RGB565_CONFIG();
 80005a4:	f000 faa4 	bl	8000af0 <PY_OV2640_RGB565_CONFIG>

 all_circle=(int)BUFFSIZE/MSS;
 80005a8:	4b2a      	ldr	r3, [pc, #168]	; (8000654 <main+0xec>)
 80005aa:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80005ae:	601a      	str	r2, [r3, #0]
 left_bytes = BUFFSIZE%MSS;
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <main+0xf0>)
 80005b2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80005b6:	601a      	str	r2, [r3, #0]
 if (left_bytes!=0)
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <main+0xf0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d004      	beq.n	80005ca <main+0x62>
	  all_circle++;
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <main+0xec>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	4a23      	ldr	r2, [pc, #140]	; (8000654 <main+0xec>)
 80005c8:	6013      	str	r3, [r2, #0]
 tcp_client_init();
 80005ca:	f001 fa11 	bl	80019f0 <tcp_client_init>
HAL_Delay(5000);
 80005ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80005d2:	f001 fc67 	bl	8001ea4 <HAL_Delay>
	__HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME);//使用帧中�??????????????????????
 80005d6:	4b21      	ldr	r3, [pc, #132]	; (800065c <main+0xf4>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	68da      	ldr	r2, [r3, #12]
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <main+0xf4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f042 0201 	orr.w	r2, r2, #1
 80005e4:	60da      	str	r2, [r3, #12]
	 HAL_DCMI_DisableCrop (&hdcmi);
 80005e6:	481d      	ldr	r0, [pc, #116]	; (800065c <main+0xf4>)
 80005e8:	f001 ff5d 	bl	80024a6 <HAL_DCMI_DisableCrop>
	 DCMI_RN = HEIGHT;
 80005ec:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <main+0xf8>)
 80005ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80005f2:	601a      	str	r2, [r3, #0]
	 DCMI_CN = 1280;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <main+0xfc>)
 80005f6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80005fa:	601a      	str	r2, [r3, #0]
	 DCMI_RS =0;
 80005fc:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <main+0x100>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
	 DCMI_CS = 0;
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <main+0x104>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
	 HAL_DCMI_ConfigCrop (&hdcmi, DCMI_CS, DCMI_RS, DCMI_CN , DCMI_RN);
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <main+0x104>)
 800060a:	6819      	ldr	r1, [r3, #0]
 800060c:	4b16      	ldr	r3, [pc, #88]	; (8000668 <main+0x100>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <main+0xfc>)
 8000612:	6818      	ldr	r0, [r3, #0]
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <main+0xf8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	4603      	mov	r3, r0
 800061c:	480f      	ldr	r0, [pc, #60]	; (800065c <main+0xf4>)
 800061e:	f001 ff0f 	bl	8002440 <HAL_DCMI_ConfigCrop>
	 HAL_Delay(1);
 8000622:	2001      	movs	r0, #1
 8000624:	f001 fc3e 	bl	8001ea4 <HAL_Delay>
	 HAL_DCMI_EnableCrop (&hdcmi);
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <main+0xf4>)
 800062a:	f001 ff66 	bl	80024fa <HAL_DCMI_EnableCrop>
	 HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT,(uint32_t)testsram,DCMI_CN*DCMI_RN/4);
 800062e:	4910      	ldr	r1, [pc, #64]	; (8000670 <main+0x108>)
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <main+0xfc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <main+0xf8>)
 8000636:	6812      	ldr	r2, [r2, #0]
 8000638:	fb02 f303 	mul.w	r3, r2, r3
 800063c:	089b      	lsrs	r3, r3, #2
 800063e:	460a      	mov	r2, r1
 8000640:	2102      	movs	r1, #2
 8000642:	4806      	ldr	r0, [pc, #24]	; (800065c <main+0xf4>)
 8000644:	f001 fd64 	bl	8002110 <HAL_DCMI_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000648:	f009 fe98 	bl	800a37c <MX_LWIP_Process>
 800064c:	e7fc      	b.n	8000648 <main+0xe0>
 800064e:	bf00      	nop
 8000650:	200007e2 	.word	0x200007e2
 8000654:	20000638 	.word	0x20000638
 8000658:	2000063c 	.word	0x2000063c
 800065c:	20002908 	.word	0x20002908
 8000660:	20000644 	.word	0x20000644
 8000664:	20000648 	.word	0x20000648
 8000668:	2000064c 	.word	0x2000064c
 800066c:	20000650 	.word	0x20000650
 8000670:	68000000 	.word	0x68000000

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f018 fb84 	bl	8018d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b2b      	ldr	r3, [pc, #172]	; (800074c <SystemClock_Config+0xd8>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a2a      	ldr	r2, [pc, #168]	; (800074c <SystemClock_Config+0xd8>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b28      	ldr	r3, [pc, #160]	; (800074c <SystemClock_Config+0xd8>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b25      	ldr	r3, [pc, #148]	; (8000750 <SystemClock_Config+0xdc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a24      	ldr	r2, [pc, #144]	; (8000750 <SystemClock_Config+0xdc>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <SystemClock_Config+0xdc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006e8:	2360      	movs	r3, #96	; 0x60
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f006 feb5 	bl	8007468 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000704:	f000 fa36 	bl	8000b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000714:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2103      	movs	r1, #3
 8000726:	4618      	mov	r0, r3
 8000728:	f007 f916 	bl	8007958 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000732:	f000 fa1f 	bl	8000b74 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8000736:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800073a:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 800073e:	2000      	movs	r0, #0
 8000740:	f007 f9f0 	bl	8007b24 <HAL_RCC_MCOConfig>
}
 8000744:	bf00      	nop
 8000746:	3750      	adds	r7, #80	; 0x50
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_DCMI_Init+0x6c>)
 800075a:	4a1a      	ldr	r2, [pc, #104]	; (80007c4 <MX_DCMI_Init+0x70>)
 800075c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_DCMI_Init+0x6c>)
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_DCMI_Init+0x6c>)
 8000766:	2220      	movs	r2, #32
 8000768:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_DCMI_Init+0x6c>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_DCMI_Init+0x6c>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALTERNATE_4_FRAME;
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_DCMI_Init+0x6c>)
 8000778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077c:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_DCMI_Init+0x6c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_DCMI_Init+0x6c>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800078a:	480d      	ldr	r0, [pc, #52]	; (80007c0 <MX_DCMI_Init+0x6c>)
 800078c:	f001 ff8b 	bl	80026a6 <HAL_DCMI_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DCMI_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 f9ed 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

	__HAL_DCMI_ENABLE_IT(&hdcmi,DCMI_IT_FRAME);
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_DCMI_Init+0x6c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	68da      	ldr	r2, [r3, #12]
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <MX_DCMI_Init+0x6c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f042 0201 	orr.w	r2, r2, #1
 80007a8:	60da      	str	r2, [r3, #12]
	__HAL_DCMI_ENABLE(&hdcmi);
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <MX_DCMI_Init+0x6c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <MX_DCMI_Init+0x6c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80007b8:	601a      	str	r2, [r3, #0]

  /* USER CODE END DCMI_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20002908 	.word	0x20002908
 80007c4:	50050000 	.word	0x50050000

080007c8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_UART4_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <MX_UART4_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_UART4_Init+0x4c>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_UART4_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_UART4_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_UART4_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_UART4_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_UART4_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_UART4_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_UART4_Init+0x4c>)
 8000800:	f007 fb52 	bl	8007ea8 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f9b3 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20002950 	.word	0x20002950
 8000818:	40004c00 	.word	0x40004c00

0800081c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_DMA_Init+0x3c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a0b      	ldr	r2, [pc, #44]	; (8000858 <MX_DMA_Init+0x3c>)
 800082c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_DMA_Init+0x3c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 4, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2104      	movs	r1, #4
 8000842:	2039      	movs	r0, #57	; 0x39
 8000844:	f001 fc2d 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000848:	2039      	movs	r0, #57	; 0x39
 800084a:	f001 fc46 	bl	80020da <HAL_NVIC_EnableIRQ>

}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08e      	sub	sp, #56	; 0x38
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
 8000876:	4b69      	ldr	r3, [pc, #420]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a68      	ldr	r2, [pc, #416]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 800087c:	f043 0310 	orr.w	r3, r3, #16
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b66      	ldr	r3, [pc, #408]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0310 	and.w	r3, r3, #16
 800088a:	623b      	str	r3, [r7, #32]
 800088c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
 8000892:	4b62      	ldr	r3, [pc, #392]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a61      	ldr	r2, [pc, #388]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b5f      	ldr	r3, [pc, #380]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0320 	and.w	r3, r3, #32
 80008a6:	61fb      	str	r3, [r7, #28]
 80008a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	4b5b      	ldr	r3, [pc, #364]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a5a      	ldr	r2, [pc, #360]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 80008b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b58      	ldr	r3, [pc, #352]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c2:	61bb      	str	r3, [r7, #24]
 80008c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	4b54      	ldr	r3, [pc, #336]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a53      	ldr	r2, [pc, #332]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b51      	ldr	r3, [pc, #324]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b4d      	ldr	r3, [pc, #308]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a4c      	ldr	r2, [pc, #304]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b46      	ldr	r3, [pc, #280]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a45      	ldr	r2, [pc, #276]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 8000908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b43      	ldr	r3, [pc, #268]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a3e      	ldr	r2, [pc, #248]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a37      	ldr	r2, [pc, #220]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <MX_GPIO_Init+0x1c0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000958:	4831      	ldr	r0, [pc, #196]	; (8000a20 <MX_GPIO_Init+0x1c4>)
 800095a:	f004 fffb 	bl	8005954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2108      	movs	r1, #8
 8000962:	4830      	ldr	r0, [pc, #192]	; (8000a24 <MX_GPIO_Init+0x1c8>)
 8000964:	f004 fff6 	bl	8005954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	21c0      	movs	r1, #192	; 0xc0
 800096c:	482d      	ldr	r0, [pc, #180]	; (8000a24 <MX_GPIO_Init+0x1c8>)
 800096e:	f004 fff1 	bl	8005954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000978:	482b      	ldr	r0, [pc, #172]	; (8000a28 <MX_GPIO_Init+0x1cc>)
 800097a:	f004 ffeb 	bl	8005954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800097e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	4619      	mov	r1, r3
 8000996:	4822      	ldr	r0, [pc, #136]	; (8000a20 <MX_GPIO_Init+0x1c4>)
 8000998:	f004 fe28 	bl	80055ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800099c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80009ae:	2300      	movs	r3, #0
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	481c      	ldr	r0, [pc, #112]	; (8000a2c <MX_GPIO_Init+0x1d0>)
 80009ba:	f004 fe17 	bl	80055ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009be:	2308      	movs	r3, #8
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4813      	ldr	r0, [pc, #76]	; (8000a24 <MX_GPIO_Init+0x1c8>)
 80009d6:	f004 fe09 	bl	80055ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009da:	23c0      	movs	r3, #192	; 0xc0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	4619      	mov	r1, r3
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <MX_GPIO_Init+0x1c8>)
 80009f2:	f004 fdfb 	bl	80055ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a04:	2302      	movs	r3, #2
 8000a06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <MX_GPIO_Init+0x1cc>)
 8000a10:	f004 fdec 	bl	80055ec <HAL_GPIO_Init>

}
 8000a14:	bf00      	nop
 8000a16:	3738      	adds	r7, #56	; 0x38
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40020c00 	.word	0x40020c00
 8000a28:	40021800 	.word	0x40021800
 8000a2c:	40020000 	.word	0x40020000

08000a30 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	615a      	str	r2, [r3, #20]
 8000a46:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 8000a48:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <MX_FSMC_Init+0xb8>)
 8000a4a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000a4e:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <MX_FSMC_Init+0xb8>)
 8000a52:	4a26      	ldr	r2, [pc, #152]	; (8000aec <MX_FSMC_Init+0xbc>)
 8000a54:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000a56:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <MX_FSMC_Init+0xb8>)
 8000a58:	2204      	movs	r2, #4
 8000a5a:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000a5c:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <MX_FSMC_Init+0xb8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <MX_FSMC_Init+0xb8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <MX_FSMC_Init+0xb8>)
 8000a6a:	2210      	movs	r2, #16
 8000a6c:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <MX_FSMC_Init+0xb8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <MX_FSMC_Init+0xb8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_FSMC_Init+0xb8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_FSMC_Init+0xb8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_FSMC_Init+0xb8>)
 8000a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_FSMC_Init+0xb8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_FSMC_Init+0xb8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	631a      	str	r2, [r3, #48]	; 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_FSMC_Init+0xb8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_FSMC_Init+0xb8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_FSMC_Init+0xb8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000abc:	2310      	movs	r3, #16
 8000abe:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000ac0:	2311      	movs	r3, #17
 8000ac2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_FSMC_Init+0xb8>)
 8000ad0:	f007 f9a6 	bl	8007e20 <HAL_SRAM_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000ada:	f000 f84b 	bl	8000b74 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000ade:	bf00      	nop
 8000ae0:	3720      	adds	r7, #32
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000181c 	.word	0x2000181c
 8000aec:	a0000104 	.word	0xa0000104

08000af0 <PY_OV2640_RGB565_CONFIG>:
	if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK) {
		Error_Handler();
	}
}

void PY_OV2640_RGB565_CONFIG(void) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	/*Camera Interface*/
	SCCB_Rst();     //hard reset
 8000af4:	f000 faa6 	bl	8001044 <SCCB_Rst>
	HAL_Delay(100);
 8000af8:	2064      	movs	r0, #100	; 0x64
 8000afa:	f001 f9d3 	bl	8001ea4 <HAL_Delay>

	//SCCB_WR_Reg(0xff, 0x01);   //soft reset
	//SCCB_WR_Reg(0x12, 0x80);
	HAL_Delay(100);
 8000afe:	2064      	movs	r0, #100	; 0x64
 8000b00:	f001 f9d0 	bl	8001ea4 <HAL_Delay>

	ov2640_verh = SCCB_RD_Reg(0x1c);
 8000b04:	201c      	movs	r0, #28
 8000b06:	f000 f9f1 	bl	8000eec <SCCB_RD_Reg>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <PY_OV2640_RGB565_CONFIG+0x7c>)
 8000b10:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8000b12:	2032      	movs	r0, #50	; 0x32
 8000b14:	f001 f9c6 	bl	8001ea4 <HAL_Delay>
	ov2640_verl = SCCB_RD_Reg(0x1d);
 8000b18:	201d      	movs	r0, #29
 8000b1a:	f000 f9e7 	bl	8000eec <SCCB_RD_Reg>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <PY_OV2640_RGB565_CONFIG+0x80>)
 8000b24:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8000b26:	2032      	movs	r0, #50	; 0x32
 8000b28:	f001 f9bc 	bl	8001ea4 <HAL_Delay>

	while ((ov2640_verh == 0xff) || (ov2640_verl == 0xff)) {
 8000b2c:	e007      	b.n	8000b3e <PY_OV2640_RGB565_CONFIG+0x4e>
		//HAL_UART_Transmit(&huart1, &ov2640_verh, 1, 0xFFFFFF);
		HAL_Delay(500);
 8000b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b32:	f001 f9b7 	bl	8001ea4 <HAL_Delay>
		//HAL_UART_Transmit(&huart1, &ov2640_verl, 1, 0xFFFFFF);
		HAL_Delay(500);
 8000b36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b3a:	f001 f9b3 	bl	8001ea4 <HAL_Delay>
	while ((ov2640_verh == 0xff) || (ov2640_verl == 0xff)) {
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <PY_OV2640_RGB565_CONFIG+0x7c>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2bff      	cmp	r3, #255	; 0xff
 8000b44:	d0f3      	beq.n	8000b2e <PY_OV2640_RGB565_CONFIG+0x3e>
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <PY_OV2640_RGB565_CONFIG+0x80>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2bff      	cmp	r3, #255	; 0xff
 8000b4c:	d0ef      	beq.n	8000b2e <PY_OV2640_RGB565_CONFIG+0x3e>
	}

	OV2640_UXGA_Init();
 8000b4e:	f000 fa99 	bl	8001084 <OV2640_UXGA_Init>

	//pix speed adjustment

	OV2640_RGB565_Mode();
 8000b52:	f000 fabd 	bl	80010d0 <OV2640_RGB565_Mode>
	OV2640_OutSize_Set(640, 480);
 8000b56:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000b5a:	f44f 7020 	mov.w	r0, #640	; 0x280
 8000b5e:	f000 fad9 	bl	8001114 <OV2640_OutSize_Set>
	HAL_Delay(200);
 8000b62:	20c8      	movs	r0, #200	; 0xc8
 8000b64:	f001 f99e 	bl	8001ea4 <HAL_Delay>

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000057c 	.word	0x2000057c
 8000b70:	2000057d 	.word	0x2000057d

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <SCCB_Start>:
#include <ov2640.h>

//for not open-drain bus

void SCCB_Start(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
    SCCB_SDA_H;
 8000b84:	2201      	movs	r2, #1
 8000b86:	2180      	movs	r1, #128	; 0x80
 8000b88:	4814      	ldr	r0, [pc, #80]	; (8000bdc <SCCB_Start+0x5c>)
 8000b8a:	f004 fee3 	bl	8005954 <HAL_GPIO_WritePin>
    SCCB_SCL_H;
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2140      	movs	r1, #64	; 0x40
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <SCCB_Start+0x5c>)
 8000b94:	f004 fede 	bl	8005954 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <SCCB_Start+0x60>)
 8000b9a:	2278      	movs	r2, #120	; 0x78
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	bf00      	nop
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <SCCB_Start+0x60>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	1e5a      	subs	r2, r3, #1
 8000ba6:	490e      	ldr	r1, [pc, #56]	; (8000be0 <SCCB_Start+0x60>)
 8000ba8:	600a      	str	r2, [r1, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1f8      	bne.n	8000ba0 <SCCB_Start+0x20>
    SCCB_SDA_L;
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2180      	movs	r1, #128	; 0x80
 8000bb2:	480a      	ldr	r0, [pc, #40]	; (8000bdc <SCCB_Start+0x5c>)
 8000bb4:	f004 fece 	bl	8005954 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <SCCB_Start+0x60>)
 8000bba:	2278      	movs	r2, #120	; 0x78
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	bf00      	nop
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <SCCB_Start+0x60>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	4906      	ldr	r1, [pc, #24]	; (8000be0 <SCCB_Start+0x60>)
 8000bc8:	600a      	str	r2, [r1, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1f8      	bne.n	8000bc0 <SCCB_Start+0x40>
    SCCB_SCL_L;
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2140      	movs	r1, #64	; 0x40
 8000bd2:	4802      	ldr	r0, [pc, #8]	; (8000bdc <SCCB_Start+0x5c>)
 8000bd4:	f004 febe 	bl	8005954 <HAL_GPIO_WritePin>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40020c00 	.word	0x40020c00
 8000be0:	2000294c 	.word	0x2000294c

08000be4 <SCCB_Stop>:


void SCCB_Stop(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
    SCCB_SDA_L;
 8000be8:	2200      	movs	r2, #0
 8000bea:	2180      	movs	r1, #128	; 0x80
 8000bec:	4818      	ldr	r0, [pc, #96]	; (8000c50 <SCCB_Stop+0x6c>)
 8000bee:	f004 feb1 	bl	8005954 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <SCCB_Stop+0x70>)
 8000bf4:	2278      	movs	r2, #120	; 0x78
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	bf00      	nop
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <SCCB_Stop+0x70>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	1e5a      	subs	r2, r3, #1
 8000c00:	4914      	ldr	r1, [pc, #80]	; (8000c54 <SCCB_Stop+0x70>)
 8000c02:	600a      	str	r2, [r1, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1f8      	bne.n	8000bfa <SCCB_Stop+0x16>
    SCCB_SCL_H;
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2140      	movs	r1, #64	; 0x40
 8000c0c:	4810      	ldr	r0, [pc, #64]	; (8000c50 <SCCB_Stop+0x6c>)
 8000c0e:	f004 fea1 	bl	8005954 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <SCCB_Stop+0x70>)
 8000c14:	2278      	movs	r2, #120	; 0x78
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	bf00      	nop
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <SCCB_Stop+0x70>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	1e5a      	subs	r2, r3, #1
 8000c20:	490c      	ldr	r1, [pc, #48]	; (8000c54 <SCCB_Stop+0x70>)
 8000c22:	600a      	str	r2, [r1, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1f8      	bne.n	8000c1a <SCCB_Stop+0x36>
    SCCB_SDA_H;
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2180      	movs	r1, #128	; 0x80
 8000c2c:	4808      	ldr	r0, [pc, #32]	; (8000c50 <SCCB_Stop+0x6c>)
 8000c2e:	f004 fe91 	bl	8005954 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <SCCB_Stop+0x70>)
 8000c34:	2278      	movs	r2, #120	; 0x78
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	bf00      	nop
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SCCB_Stop+0x70>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	1e5a      	subs	r2, r3, #1
 8000c40:	4904      	ldr	r1, [pc, #16]	; (8000c54 <SCCB_Stop+0x70>)
 8000c42:	600a      	str	r2, [r1, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d1f8      	bne.n	8000c3a <SCCB_Stop+0x56>
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40020c00 	.word	0x40020c00
 8000c54:	2000294c 	.word	0x2000294c

08000c58 <SCCB_No_Ack>:

void SCCB_No_Ack(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f001 f921 	bl	8001ea4 <HAL_Delay>
	SCCB_SDA_H;
 8000c62:	2201      	movs	r2, #1
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	481b      	ldr	r0, [pc, #108]	; (8000cd4 <SCCB_No_Ack+0x7c>)
 8000c68:	f004 fe74 	bl	8005954 <HAL_GPIO_WritePin>
	SCCB_SCL_H;
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2140      	movs	r1, #64	; 0x40
 8000c70:	4818      	ldr	r0, [pc, #96]	; (8000cd4 <SCCB_No_Ack+0x7c>)
 8000c72:	f004 fe6f 	bl	8005954 <HAL_GPIO_WritePin>

	tickdelay = ticknumber;while(tickdelay--);
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <SCCB_No_Ack+0x80>)
 8000c78:	2278      	movs	r2, #120	; 0x78
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	bf00      	nop
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <SCCB_No_Ack+0x80>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	1e5a      	subs	r2, r3, #1
 8000c84:	4914      	ldr	r1, [pc, #80]	; (8000cd8 <SCCB_No_Ack+0x80>)
 8000c86:	600a      	str	r2, [r1, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1f8      	bne.n	8000c7e <SCCB_No_Ack+0x26>
	SCCB_SCL_L;
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2140      	movs	r1, #64	; 0x40
 8000c90:	4810      	ldr	r0, [pc, #64]	; (8000cd4 <SCCB_No_Ack+0x7c>)
 8000c92:	f004 fe5f 	bl	8005954 <HAL_GPIO_WritePin>

	tickdelay = ticknumber;while(tickdelay--);
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <SCCB_No_Ack+0x80>)
 8000c98:	2278      	movs	r2, #120	; 0x78
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	bf00      	nop
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <SCCB_No_Ack+0x80>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	1e5a      	subs	r2, r3, #1
 8000ca4:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <SCCB_No_Ack+0x80>)
 8000ca6:	600a      	str	r2, [r1, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1f8      	bne.n	8000c9e <SCCB_No_Ack+0x46>
	SCCB_SDA_L;
 8000cac:	2200      	movs	r2, #0
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <SCCB_No_Ack+0x7c>)
 8000cb2:	f004 fe4f 	bl	8005954 <HAL_GPIO_WritePin>

	tickdelay = ticknumber;while(tickdelay--);
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <SCCB_No_Ack+0x80>)
 8000cb8:	2278      	movs	r2, #120	; 0x78
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	bf00      	nop
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <SCCB_No_Ack+0x80>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	1e5a      	subs	r2, r3, #1
 8000cc4:	4904      	ldr	r1, [pc, #16]	; (8000cd8 <SCCB_No_Ack+0x80>)
 8000cc6:	600a      	str	r2, [r1, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1f8      	bne.n	8000cbe <SCCB_No_Ack+0x66>
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40020c00 	.word	0x40020c00
 8000cd8:	2000294c 	.word	0x2000294c

08000cdc <SCCB_WR_Byte>:

uint8_t SCCB_WR_Byte(uint8_t dat)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
	uint8_t j,res;
	for(j=0;j<8;j++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e034      	b.n	8000d56 <SCCB_WR_Byte+0x7a>
	{
		if(dat&0x80)SCCB_SDA_H;
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	da05      	bge.n	8000d00 <SCCB_WR_Byte+0x24>
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	4833      	ldr	r0, [pc, #204]	; (8000dc8 <SCCB_WR_Byte+0xec>)
 8000cfa:	f004 fe2b 	bl	8005954 <HAL_GPIO_WritePin>
 8000cfe:	e004      	b.n	8000d0a <SCCB_WR_Byte+0x2e>
		else SCCB_SDA_L;
 8000d00:	2200      	movs	r2, #0
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	4830      	ldr	r0, [pc, #192]	; (8000dc8 <SCCB_WR_Byte+0xec>)
 8000d06:	f004 fe25 	bl	8005954 <HAL_GPIO_WritePin>
		dat<<=1;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	71fb      	strb	r3, [r7, #7]

		tickdelay = ticknumber;while(tickdelay--);
 8000d10:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <SCCB_WR_Byte+0xf0>)
 8000d12:	2278      	movs	r2, #120	; 0x78
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	bf00      	nop
 8000d18:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <SCCB_WR_Byte+0xf0>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	1e5a      	subs	r2, r3, #1
 8000d1e:	492b      	ldr	r1, [pc, #172]	; (8000dcc <SCCB_WR_Byte+0xf0>)
 8000d20:	600a      	str	r2, [r1, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1f8      	bne.n	8000d18 <SCCB_WR_Byte+0x3c>
		SCCB_SCL_H;
 8000d26:	2201      	movs	r2, #1
 8000d28:	2140      	movs	r1, #64	; 0x40
 8000d2a:	4827      	ldr	r0, [pc, #156]	; (8000dc8 <SCCB_WR_Byte+0xec>)
 8000d2c:	f004 fe12 	bl	8005954 <HAL_GPIO_WritePin>

		tickdelay = ticknumber;while(tickdelay--);
 8000d30:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <SCCB_WR_Byte+0xf0>)
 8000d32:	2278      	movs	r2, #120	; 0x78
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	bf00      	nop
 8000d38:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <SCCB_WR_Byte+0xf0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	1e5a      	subs	r2, r3, #1
 8000d3e:	4923      	ldr	r1, [pc, #140]	; (8000dcc <SCCB_WR_Byte+0xf0>)
 8000d40:	600a      	str	r2, [r1, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f8      	bne.n	8000d38 <SCCB_WR_Byte+0x5c>
		SCCB_SCL_L;
 8000d46:	2200      	movs	r2, #0
 8000d48:	2140      	movs	r1, #64	; 0x40
 8000d4a:	481f      	ldr	r0, [pc, #124]	; (8000dc8 <SCCB_WR_Byte+0xec>)
 8000d4c:	f004 fe02 	bl	8005954 <HAL_GPIO_WritePin>
	for(j=0;j<8;j++)
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	3301      	adds	r3, #1
 8000d54:	73fb      	strb	r3, [r7, #15]
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	2b07      	cmp	r3, #7
 8000d5a:	d9c7      	bls.n	8000cec <SCCB_WR_Byte+0x10>
	}
	SCCB_SDA_IN();
 8000d5c:	f000 f918 	bl	8000f90 <SCCB_SDA_IN>

	tickdelay = ticknumber;while(tickdelay--);
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <SCCB_WR_Byte+0xf0>)
 8000d62:	2278      	movs	r2, #120	; 0x78
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	bf00      	nop
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <SCCB_WR_Byte+0xf0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	1e5a      	subs	r2, r3, #1
 8000d6e:	4917      	ldr	r1, [pc, #92]	; (8000dcc <SCCB_WR_Byte+0xf0>)
 8000d70:	600a      	str	r2, [r1, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1f8      	bne.n	8000d68 <SCCB_WR_Byte+0x8c>
	SCCB_SCL_H;
 8000d76:	2201      	movs	r2, #1
 8000d78:	2140      	movs	r1, #64	; 0x40
 8000d7a:	4813      	ldr	r0, [pc, #76]	; (8000dc8 <SCCB_WR_Byte+0xec>)
 8000d7c:	f004 fdea 	bl	8005954 <HAL_GPIO_WritePin>

	tickdelay = ticknumber;while(tickdelay--);
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <SCCB_WR_Byte+0xf0>)
 8000d82:	2278      	movs	r2, #120	; 0x78
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	bf00      	nop
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <SCCB_WR_Byte+0xf0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	490f      	ldr	r1, [pc, #60]	; (8000dcc <SCCB_WR_Byte+0xf0>)
 8000d90:	600a      	str	r2, [r1, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f8      	bne.n	8000d88 <SCCB_WR_Byte+0xac>
	if(SCCB_READ_SDA)res=1;
 8000d96:	2180      	movs	r1, #128	; 0x80
 8000d98:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <SCCB_WR_Byte+0xec>)
 8000d9a:	f004 fdc3 	bl	8005924 <HAL_GPIO_ReadPin>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <SCCB_WR_Byte+0xce>
 8000da4:	2301      	movs	r3, #1
 8000da6:	73bb      	strb	r3, [r7, #14]
 8000da8:	e001      	b.n	8000dae <SCCB_WR_Byte+0xd2>
	else res=0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	73bb      	strb	r3, [r7, #14]
	SCCB_SCL_L;
 8000dae:	2200      	movs	r2, #0
 8000db0:	2140      	movs	r1, #64	; 0x40
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <SCCB_WR_Byte+0xec>)
 8000db4:	f004 fdce 	bl	8005954 <HAL_GPIO_WritePin>
	SCCB_SDA_OUT();
 8000db8:	f000 f918 	bl	8000fec <SCCB_SDA_OUT>
	return res;
 8000dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40020c00 	.word	0x40020c00
 8000dcc:	2000294c 	.word	0x2000294c

08000dd0 <SCCB_RD_Byte>:

uint8_t SCCB_RD_Byte(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	uint8_t temp=0,j;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	SCCB_SDA_IN();
 8000dda:	f000 f8d9 	bl	8000f90 <SCCB_SDA_IN>
	for(j=8;j>0;j--)
 8000dde:	2308      	movs	r3, #8
 8000de0:	71bb      	strb	r3, [r7, #6]
 8000de2:	e02f      	b.n	8000e44 <SCCB_RD_Byte+0x74>
	{

		tickdelay = ticknumber;while(tickdelay--);
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <SCCB_RD_Byte+0x88>)
 8000de6:	2278      	movs	r2, #120	; 0x78
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	bf00      	nop
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <SCCB_RD_Byte+0x88>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	1e5a      	subs	r2, r3, #1
 8000df2:	4919      	ldr	r1, [pc, #100]	; (8000e58 <SCCB_RD_Byte+0x88>)
 8000df4:	600a      	str	r2, [r1, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f8      	bne.n	8000dec <SCCB_RD_Byte+0x1c>
	    SCCB_SCL_H;
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2140      	movs	r1, #64	; 0x40
 8000dfe:	4817      	ldr	r0, [pc, #92]	; (8000e5c <SCCB_RD_Byte+0x8c>)
 8000e00:	f004 fda8 	bl	8005954 <HAL_GPIO_WritePin>
		temp=temp<<1;
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	71fb      	strb	r3, [r7, #7]
		if(SCCB_READ_SDA)temp++;
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	4813      	ldr	r0, [pc, #76]	; (8000e5c <SCCB_RD_Byte+0x8c>)
 8000e0e:	f004 fd89 	bl	8005924 <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <SCCB_RD_Byte+0x4e>
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	71fb      	strb	r3, [r7, #7]

		tickdelay = ticknumber;while(tickdelay--);
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <SCCB_RD_Byte+0x88>)
 8000e20:	2278      	movs	r2, #120	; 0x78
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	bf00      	nop
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <SCCB_RD_Byte+0x88>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	1e5a      	subs	r2, r3, #1
 8000e2c:	490a      	ldr	r1, [pc, #40]	; (8000e58 <SCCB_RD_Byte+0x88>)
 8000e2e:	600a      	str	r2, [r1, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f8      	bne.n	8000e26 <SCCB_RD_Byte+0x56>
		SCCB_SCL_L;
 8000e34:	2200      	movs	r2, #0
 8000e36:	2140      	movs	r1, #64	; 0x40
 8000e38:	4808      	ldr	r0, [pc, #32]	; (8000e5c <SCCB_RD_Byte+0x8c>)
 8000e3a:	f004 fd8b 	bl	8005954 <HAL_GPIO_WritePin>
	for(j=8;j>0;j--)
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	71bb      	strb	r3, [r7, #6]
 8000e44:	79bb      	ldrb	r3, [r7, #6]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1cc      	bne.n	8000de4 <SCCB_RD_Byte+0x14>
	}
	SCCB_SDA_OUT();
 8000e4a:	f000 f8cf 	bl	8000fec <SCCB_SDA_OUT>
	return temp;
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000294c 	.word	0x2000294c
 8000e5c:	40020c00 	.word	0x40020c00

08000e60 <SCCB_WR_Reg>:

uint8_t SCCB_WR_Reg(uint8_t reg,uint8_t data)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	460a      	mov	r2, r1
 8000e6a:	71fb      	strb	r3, [r7, #7]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	71bb      	strb	r3, [r7, #6]
	uint8_t res=0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
	SCCB_Start();
 8000e74:	f7ff fe84 	bl	8000b80 <SCCB_Start>
	if(SCCB_WR_Byte(SCCB_ID_W))res=1;
 8000e78:	2060      	movs	r0, #96	; 0x60
 8000e7a:	f7ff ff2f 	bl	8000cdc <SCCB_WR_Byte>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SCCB_WR_Reg+0x28>
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]

	tickdelay = ticknumber;while(tickdelay--);
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <SCCB_WR_Reg+0x88>)
 8000e8a:	2278      	movs	r2, #120	; 0x78
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	bf00      	nop
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <SCCB_WR_Reg+0x88>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	1e5a      	subs	r2, r3, #1
 8000e96:	4914      	ldr	r1, [pc, #80]	; (8000ee8 <SCCB_WR_Reg+0x88>)
 8000e98:	600a      	str	r2, [r1, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1f8      	bne.n	8000e90 <SCCB_WR_Reg+0x30>
	if(SCCB_WR_Byte(reg))res=1;
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff1b 	bl	8000cdc <SCCB_WR_Byte>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SCCB_WR_Reg+0x50>
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]

	tickdelay = ticknumber;while(tickdelay--);
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <SCCB_WR_Reg+0x88>)
 8000eb2:	2278      	movs	r2, #120	; 0x78
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	bf00      	nop
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <SCCB_WR_Reg+0x88>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	1e5a      	subs	r2, r3, #1
 8000ebe:	490a      	ldr	r1, [pc, #40]	; (8000ee8 <SCCB_WR_Reg+0x88>)
 8000ec0:	600a      	str	r2, [r1, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f8      	bne.n	8000eb8 <SCCB_WR_Reg+0x58>
  	if(SCCB_WR_Byte(data))res=1;
 8000ec6:	79bb      	ldrb	r3, [r7, #6]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff07 	bl	8000cdc <SCCB_WR_Byte>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SCCB_WR_Reg+0x78>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
  	SCCB_Stop();
 8000ed8:	f7ff fe84 	bl	8000be4 <SCCB_Stop>
  	return	res;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000294c 	.word	0x2000294c

08000eec <SCCB_RD_Reg>:

uint8_t SCCB_RD_Reg(uint8_t reg)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	uint8_t val=0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73fb      	strb	r3, [r7, #15]
	SCCB_Start();
 8000efa:	f7ff fe41 	bl	8000b80 <SCCB_Start>
	SCCB_WR_Byte(SCCB_ID_W);
 8000efe:	2060      	movs	r0, #96	; 0x60
 8000f00:	f7ff feec 	bl	8000cdc <SCCB_WR_Byte>

	tickdelay = ticknumber;while(tickdelay--);
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <SCCB_RD_Reg+0xa0>)
 8000f06:	2278      	movs	r2, #120	; 0x78
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	bf00      	nop
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <SCCB_RD_Reg+0xa0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	1e5a      	subs	r2, r3, #1
 8000f12:	491e      	ldr	r1, [pc, #120]	; (8000f8c <SCCB_RD_Reg+0xa0>)
 8000f14:	600a      	str	r2, [r1, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f8      	bne.n	8000f0c <SCCB_RD_Reg+0x20>
  	SCCB_WR_Byte(reg);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fedd 	bl	8000cdc <SCCB_WR_Byte>

  	tickdelay = ticknumber;while(tickdelay--);
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <SCCB_RD_Reg+0xa0>)
 8000f24:	2278      	movs	r2, #120	; 0x78
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	bf00      	nop
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <SCCB_RD_Reg+0xa0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	1e5a      	subs	r2, r3, #1
 8000f30:	4916      	ldr	r1, [pc, #88]	; (8000f8c <SCCB_RD_Reg+0xa0>)
 8000f32:	600a      	str	r2, [r1, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f8      	bne.n	8000f2a <SCCB_RD_Reg+0x3e>
	SCCB_Stop();
 8000f38:	f7ff fe54 	bl	8000be4 <SCCB_Stop>

	tickdelay = ticknumber;while(tickdelay--);
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <SCCB_RD_Reg+0xa0>)
 8000f3e:	2278      	movs	r2, #120	; 0x78
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	bf00      	nop
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <SCCB_RD_Reg+0xa0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	1e5a      	subs	r2, r3, #1
 8000f4a:	4910      	ldr	r1, [pc, #64]	; (8000f8c <SCCB_RD_Reg+0xa0>)
 8000f4c:	600a      	str	r2, [r1, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1f8      	bne.n	8000f44 <SCCB_RD_Reg+0x58>

	SCCB_Start();
 8000f52:	f7ff fe15 	bl	8000b80 <SCCB_Start>
	SCCB_WR_Byte(SCCB_ID_R);
 8000f56:	2061      	movs	r0, #97	; 0x61
 8000f58:	f7ff fec0 	bl	8000cdc <SCCB_WR_Byte>

	tickdelay = ticknumber;while(tickdelay--);
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <SCCB_RD_Reg+0xa0>)
 8000f5e:	2278      	movs	r2, #120	; 0x78
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	bf00      	nop
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <SCCB_RD_Reg+0xa0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	4908      	ldr	r1, [pc, #32]	; (8000f8c <SCCB_RD_Reg+0xa0>)
 8000f6c:	600a      	str	r2, [r1, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f8      	bne.n	8000f64 <SCCB_RD_Reg+0x78>
  	val=SCCB_RD_Byte();
 8000f72:	f7ff ff2d 	bl	8000dd0 <SCCB_RD_Byte>
 8000f76:	4603      	mov	r3, r0
 8000f78:	73fb      	strb	r3, [r7, #15]
  	SCCB_No_Ack();
 8000f7a:	f7ff fe6d 	bl	8000c58 <SCCB_No_Ack>
  	SCCB_Stop();
 8000f7e:	f7ff fe31 	bl	8000be4 <SCCB_Stop>
  	return val;
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2000294c 	.word	0x2000294c

08000f90 <SCCB_SDA_IN>:


void SCCB_SDA_IN(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <SCCB_SDA_IN+0x54>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <SCCB_SDA_IN+0x54>)
 8000fae:	f043 0308 	orr.w	r3, r3, #8
 8000fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <SCCB_SDA_IN+0x54>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	683b      	ldr	r3, [r7, #0]
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <SCCB_SDA_IN+0x58>)
 8000fd6:	f004 fb09 	bl	80055ec <HAL_GPIO_Init>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020c00 	.word	0x40020c00

08000fec <SCCB_SDA_OUT>:

void SCCB_SDA_OUT(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <SCCB_SDA_OUT+0x50>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	4a0c      	ldr	r2, [pc, #48]	; (800103c <SCCB_SDA_OUT+0x50>)
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	6313      	str	r3, [r2, #48]	; 0x30
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <SCCB_SDA_OUT+0x50>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	683b      	ldr	r3, [r7, #0]
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001024:	2302      	movs	r3, #2
 8001026:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	4619      	mov	r1, r3
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <SCCB_SDA_OUT+0x54>)
 800102e:	f004 fadd 	bl	80055ec <HAL_GPIO_Init>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40020c00 	.word	0x40020c00

08001044 <SCCB_Rst>:

void SCCB_Rst(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,GPIO_PIN_RESET)	;
 8001048:	2200      	movs	r2, #0
 800104a:	2108      	movs	r1, #8
 800104c:	480b      	ldr	r0, [pc, #44]	; (800107c <SCCB_Rst+0x38>)
 800104e:	f004 fc81 	bl	8005954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_15,GPIO_PIN_RESET)	;
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001058:	4809      	ldr	r0, [pc, #36]	; (8001080 <SCCB_Rst+0x3c>)
 800105a:	f004 fc7b 	bl	8005954 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800105e:	2064      	movs	r0, #100	; 0x64
 8001060:	f000 ff20 	bl	8001ea4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_15,GPIO_PIN_SET)	;
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <SCCB_Rst+0x3c>)
 800106c:	f004 fc72 	bl	8005954 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001070:	2064      	movs	r0, #100	; 0x64
 8001072:	f000 ff17 	bl	8001ea4 <HAL_Delay>
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40020c00 	.word	0x40020c00
 8001080:	40021800 	.word	0x40021800

08001084 <OV2640_UXGA_Init>:
	0xe0, 0x00,
	0xdd, 0x7f,
	0x05, 0x00,
};
void OV2640_UXGA_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<sizeof(ov2640_uxga_init_reg_tbl)/2 ; i++)
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	e015      	b.n	80010bc <OV2640_UXGA_Init+0x38>
 {
   SCCB_WR_Reg(ov2640_uxga_init_reg_tbl[i][0],ov2640_uxga_init_reg_tbl[i][1]);
 8001090:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <OV2640_UXGA_Init+0x48>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001098:	490c      	ldr	r1, [pc, #48]	; (80010cc <OV2640_UXGA_Init+0x48>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	440b      	add	r3, r1
 80010a0:	785b      	ldrb	r3, [r3, #1]
 80010a2:	4619      	mov	r1, r3
 80010a4:	4610      	mov	r0, r2
 80010a6:	f7ff fedb 	bl	8000e60 <SCCB_WR_Reg>
   if(i<10) HAL_Delay(5);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b09      	cmp	r3, #9
 80010ae:	d802      	bhi.n	80010b6 <OV2640_UXGA_Init+0x32>
 80010b0:	2005      	movs	r0, #5
 80010b2:	f000 fef7 	bl	8001ea4 <HAL_Delay>
	for(uint32_t i=0; i<sizeof(ov2640_uxga_init_reg_tbl)/2 ; i++)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3301      	adds	r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2bb1      	cmp	r3, #177	; 0xb1
 80010c0:	d9e6      	bls.n	8001090 <OV2640_UXGA_Init+0xc>
 }

}
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	0801cf8c 	.word	0x0801cf8c

080010d0 <OV2640_RGB565_Mode>:
		0xe1, 0x67
};

//OV2640 mode: RGB565
void OV2640_RGB565_Mode(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
	uint16_t i=0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	80fb      	strh	r3, [r7, #6]

	for(i=0;i<(sizeof(ov2640_rgb565_reg_tbl)/2);i++)
 80010da:	2300      	movs	r3, #0
 80010dc:	80fb      	strh	r3, [r7, #6]
 80010de:	e00f      	b.n	8001100 <OV2640_RGB565_Mode+0x30>
	{
		SCCB_WR_Reg(ov2640_rgb565_reg_tbl[i][0],ov2640_rgb565_reg_tbl[i][1]);
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <OV2640_RGB565_Mode+0x40>)
 80010e4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	4909      	ldr	r1, [pc, #36]	; (8001110 <OV2640_RGB565_Mode+0x40>)
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	440b      	add	r3, r1
 80010f0:	785b      	ldrb	r3, [r3, #1]
 80010f2:	4619      	mov	r1, r3
 80010f4:	4610      	mov	r0, r2
 80010f6:	f7ff feb3 	bl	8000e60 <SCCB_WR_Reg>
	for(i=0;i<(sizeof(ov2640_rgb565_reg_tbl)/2);i++)
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	3301      	adds	r3, #1
 80010fe:	80fb      	strh	r3, [r7, #6]
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	2b06      	cmp	r3, #6
 8001104:	d9ec      	bls.n	80010e0 <OV2640_RGB565_Mode+0x10>
	}
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	0801d0f0 	.word	0x0801d0f0

08001114 <OV2640_OutSize_Set>:
    SCCB_WR_Reg(0X17,sx>>3);
    SCCB_WR_Reg(0X18,endx>>3);
}

uint8_t OV2640_OutSize_Set(uint16_t width,uint16_t height)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	460a      	mov	r2, r1
 800111e:	80fb      	strh	r3, [r7, #6]
 8001120:	4613      	mov	r3, r2
 8001122:	80bb      	strh	r3, [r7, #4]
    uint16_t outh;
    uint16_t outw;
    uint8_t temp;
    if(width%4)return 1;
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	b29b      	uxth	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <OV2640_OutSize_Set+0x20>
 8001130:	2301      	movs	r3, #1
 8001132:	e03e      	b.n	80011b2 <OV2640_OutSize_Set+0x9e>
    if(height%4)return 2;
 8001134:	88bb      	ldrh	r3, [r7, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	b29b      	uxth	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <OV2640_OutSize_Set+0x30>
 8001140:	2302      	movs	r3, #2
 8001142:	e036      	b.n	80011b2 <OV2640_OutSize_Set+0x9e>
    outw=width/4;
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	81fb      	strh	r3, [r7, #14]
    outh=height/4;
 800114a:	88bb      	ldrh	r3, [r7, #4]
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	81bb      	strh	r3, [r7, #12]
    SCCB_WR_Reg(0XFF,0X00);
 8001150:	2100      	movs	r1, #0
 8001152:	20ff      	movs	r0, #255	; 0xff
 8001154:	f7ff fe84 	bl	8000e60 <SCCB_WR_Reg>
    SCCB_WR_Reg(0XE0,0X04);
 8001158:	2104      	movs	r1, #4
 800115a:	20e0      	movs	r0, #224	; 0xe0
 800115c:	f7ff fe80 	bl	8000e60 <SCCB_WR_Reg>
    SCCB_WR_Reg(0X5A,outw&0XFF);
 8001160:	89fb      	ldrh	r3, [r7, #14]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	4619      	mov	r1, r3
 8001166:	205a      	movs	r0, #90	; 0x5a
 8001168:	f7ff fe7a 	bl	8000e60 <SCCB_WR_Reg>
    SCCB_WR_Reg(0X5B,outh&0XFF);
 800116c:	89bb      	ldrh	r3, [r7, #12]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4619      	mov	r1, r3
 8001172:	205b      	movs	r0, #91	; 0x5b
 8001174:	f7ff fe74 	bl	8000e60 <SCCB_WR_Reg>
    temp=(outw>>8)&0X03;
 8001178:	89fb      	ldrh	r3, [r7, #14]
 800117a:	0a1b      	lsrs	r3, r3, #8
 800117c:	b29b      	uxth	r3, r3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	72fb      	strb	r3, [r7, #11]
    temp|=(outh>>6)&0X04;
 8001186:	89bb      	ldrh	r3, [r7, #12]
 8001188:	099b      	lsrs	r3, r3, #6
 800118a:	b29b      	uxth	r3, r3
 800118c:	b25b      	sxtb	r3, r3
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	b25a      	sxtb	r2, r3
 8001194:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001198:	4313      	orrs	r3, r2
 800119a:	b25b      	sxtb	r3, r3
 800119c:	72fb      	strb	r3, [r7, #11]
    SCCB_WR_Reg(0X5C,temp);
 800119e:	7afb      	ldrb	r3, [r7, #11]
 80011a0:	4619      	mov	r1, r3
 80011a2:	205c      	movs	r0, #92	; 0x5c
 80011a4:	f7ff fe5c 	bl	8000e60 <SCCB_WR_Reg>
    SCCB_WR_Reg(0XE0,0X00);
 80011a8:	2100      	movs	r1, #0
 80011aa:	20e0      	movs	r0, #224	; 0xe0
 80011ac:	f7ff fe58 	bl	8000e60 <SCCB_WR_Reg>
    return 0;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_MspInit+0x4c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x4c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	; 0x30
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a68      	ldr	r2, [pc, #416]	; (80013cc <HAL_DCMI_MspInit+0x1c0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	f040 80c9 	bne.w	80013c2 <HAL_DCMI_MspInit+0x1b6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
 8001234:	4b66      	ldr	r3, [pc, #408]	; (80013d0 <HAL_DCMI_MspInit+0x1c4>)
 8001236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001238:	4a65      	ldr	r2, [pc, #404]	; (80013d0 <HAL_DCMI_MspInit+0x1c4>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6353      	str	r3, [r2, #52]	; 0x34
 8001240:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <HAL_DCMI_MspInit+0x1c4>)
 8001242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	4b5f      	ldr	r3, [pc, #380]	; (80013d0 <HAL_DCMI_MspInit+0x1c4>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	4a5e      	ldr	r2, [pc, #376]	; (80013d0 <HAL_DCMI_MspInit+0x1c4>)
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	6313      	str	r3, [r2, #48]	; 0x30
 800125c:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <HAL_DCMI_MspInit+0x1c4>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	4b58      	ldr	r3, [pc, #352]	; (80013d0 <HAL_DCMI_MspInit+0x1c4>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	4a57      	ldr	r2, [pc, #348]	; (80013d0 <HAL_DCMI_MspInit+0x1c4>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6313      	str	r3, [r2, #48]	; 0x30
 8001278:	4b55      	ldr	r3, [pc, #340]	; (80013d0 <HAL_DCMI_MspInit+0x1c4>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	4b51      	ldr	r3, [pc, #324]	; (80013d0 <HAL_DCMI_MspInit+0x1c4>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	4a50      	ldr	r2, [pc, #320]	; (80013d0 <HAL_DCMI_MspInit+0x1c4>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6313      	str	r3, [r2, #48]	; 0x30
 8001294:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <HAL_DCMI_MspInit+0x1c4>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b4a      	ldr	r3, [pc, #296]	; (80013d0 <HAL_DCMI_MspInit+0x1c4>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	4a49      	ldr	r2, [pc, #292]	; (80013d0 <HAL_DCMI_MspInit+0x1c4>)
 80012aa:	f043 0302 	orr.w	r3, r3, #2
 80012ae:	6313      	str	r3, [r2, #48]	; 0x30
 80012b0:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <HAL_DCMI_MspInit+0x1c4>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80012bc:	2370      	movs	r3, #112	; 0x70
 80012be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012cc:	230d      	movs	r3, #13
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	483f      	ldr	r0, [pc, #252]	; (80013d4 <HAL_DCMI_MspInit+0x1c8>)
 80012d8:	f004 f988 	bl	80055ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80012dc:	2350      	movs	r3, #80	; 0x50
 80012de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012ec:	230d      	movs	r3, #13
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	4838      	ldr	r0, [pc, #224]	; (80013d8 <HAL_DCMI_MspInit+0x1cc>)
 80012f8:	f004 f978 	bl	80055ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80012fc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800130e:	230d      	movs	r3, #13
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	4830      	ldr	r0, [pc, #192]	; (80013dc <HAL_DCMI_MspInit+0x1d0>)
 800131a:	f004 f967 	bl	80055ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800131e:	23c0      	movs	r3, #192	; 0xc0
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800132e:	230d      	movs	r3, #13
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	4619      	mov	r1, r3
 8001338:	4829      	ldr	r0, [pc, #164]	; (80013e0 <HAL_DCMI_MspInit+0x1d4>)
 800133a:	f004 f957 	bl	80055ec <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800133e:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <HAL_DCMI_MspInit+0x1d8>)
 8001340:	4a29      	ldr	r2, [pc, #164]	; (80013e8 <HAL_DCMI_MspInit+0x1dc>)
 8001342:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001344:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <HAL_DCMI_MspInit+0x1d8>)
 8001346:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800134a:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800134c:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <HAL_DCMI_MspInit+0x1d8>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <HAL_DCMI_MspInit+0x1d8>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <HAL_DCMI_MspInit+0x1d8>)
 800135a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800135e:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <HAL_DCMI_MspInit+0x1d8>)
 8001362:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001366:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001368:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <HAL_DCMI_MspInit+0x1d8>)
 800136a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800136e:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <HAL_DCMI_MspInit+0x1d8>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8001376:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <HAL_DCMI_MspInit+0x1d8>)
 8001378:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800137c:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <HAL_DCMI_MspInit+0x1d8>)
 8001380:	2204      	movs	r2, #4
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <HAL_DCMI_MspInit+0x1d8>)
 8001386:	2201      	movs	r2, #1
 8001388:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_DCMI_MspInit+0x1d8>)
 800138c:	2200      	movs	r2, #0
 800138e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <HAL_DCMI_MspInit+0x1d8>)
 8001392:	2200      	movs	r2, #0
 8001394:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001396:	4813      	ldr	r0, [pc, #76]	; (80013e4 <HAL_DCMI_MspInit+0x1d8>)
 8001398:	f001 f9f2 	bl	8002780 <HAL_DMA_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_DCMI_MspInit+0x19a>
    {
      Error_Handler();
 80013a2:	f7ff fbe7 	bl	8000b74 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <HAL_DCMI_MspInit+0x1d8>)
 80013aa:	639a      	str	r2, [r3, #56]	; 0x38
 80013ac:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <HAL_DCMI_MspInit+0x1d8>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 4, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2104      	movs	r1, #4
 80013b6:	204e      	movs	r0, #78	; 0x4e
 80013b8:	f000 fe73 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80013bc:	204e      	movs	r0, #78	; 0x4e
 80013be:	f000 fe8c 	bl	80020da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80013c2:	bf00      	nop
 80013c4:	3730      	adds	r7, #48	; 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	50050000 	.word	0x50050000
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020400 	.word	0x40020400
 80013e4:	2000186c 	.word	0x2000186c
 80013e8:	40026428 	.word	0x40026428

080013ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a2c      	ldr	r2, [pc, #176]	; (80014bc <HAL_UART_MspInit+0xd0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d152      	bne.n	80014b4 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <HAL_UART_MspInit+0xd4>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a2a      	ldr	r2, [pc, #168]	; (80014c0 <HAL_UART_MspInit+0xd4>)
 8001418:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <HAL_UART_MspInit+0xd4>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <HAL_UART_MspInit+0xd4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a23      	ldr	r2, [pc, #140]	; (80014c0 <HAL_UART_MspInit+0xd4>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <HAL_UART_MspInit+0xd4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <HAL_UART_MspInit+0xd4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <HAL_UART_MspInit+0xd4>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <HAL_UART_MspInit+0xd4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001462:	2301      	movs	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001472:	2308      	movs	r3, #8
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	4811      	ldr	r0, [pc, #68]	; (80014c4 <HAL_UART_MspInit+0xd8>)
 800147e:	f004 f8b5 	bl	80055ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001482:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001494:	2308      	movs	r3, #8
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	480a      	ldr	r0, [pc, #40]	; (80014c8 <HAL_UART_MspInit+0xdc>)
 80014a0:	f004 f8a4 	bl	80055ec <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 4, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2104      	movs	r1, #4
 80014a8:	2034      	movs	r0, #52	; 0x34
 80014aa:	f000 fdfa 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80014ae:	2034      	movs	r0, #52	; 0x34
 80014b0:	f000 fe13 	bl	80020da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80014b4:	bf00      	nop
 80014b6:	3728      	adds	r7, #40	; 0x28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40004c00 	.word	0x40004c00
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40020800 	.word	0x40020800

080014cc <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80014e0:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <HAL_FSMC_MspInit+0xc8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d151      	bne.n	800158c <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80014e8:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <HAL_FSMC_MspInit+0xc8>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b29      	ldr	r3, [pc, #164]	; (8001598 <HAL_FSMC_MspInit+0xcc>)
 80014f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f6:	4a28      	ldr	r2, [pc, #160]	; (8001598 <HAL_FSMC_MspInit+0xcc>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6393      	str	r3, [r2, #56]	; 0x38
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <HAL_FSMC_MspInit+0xcc>)
 8001500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800150a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800150e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800151c:	230c      	movs	r3, #12
 800151e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	4619      	mov	r1, r3
 8001524:	481d      	ldr	r0, [pc, #116]	; (800159c <HAL_FSMC_MspInit+0xd0>)
 8001526:	f004 f861 	bl	80055ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800152a:	f240 433f 	movw	r3, #1087	; 0x43f
 800152e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800153c:	230c      	movs	r3, #12
 800153e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	4619      	mov	r1, r3
 8001544:	4816      	ldr	r0, [pc, #88]	; (80015a0 <HAL_FSMC_MspInit+0xd4>)
 8001546:	f004 f851 	bl	80055ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800154a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800154e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800155c:	230c      	movs	r3, #12
 800155e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4619      	mov	r1, r3
 8001564:	480f      	ldr	r0, [pc, #60]	; (80015a4 <HAL_FSMC_MspInit+0xd8>)
 8001566:	f004 f841 	bl	80055ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800156a:	f64f 7333 	movw	r3, #65331	; 0xff33
 800156e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800157c:	230c      	movs	r3, #12
 800157e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4619      	mov	r1, r3
 8001584:	4808      	ldr	r0, [pc, #32]	; (80015a8 <HAL_FSMC_MspInit+0xdc>)
 8001586:	f004 f831 	bl	80055ec <HAL_GPIO_Init>
 800158a:	e000      	b.n	800158e <HAL_FSMC_MspInit+0xc2>
    return;
 800158c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000654 	.word	0x20000654
 8001598:	40023800 	.word	0x40023800
 800159c:	40021400 	.word	0x40021400
 80015a0:	40021800 	.word	0x40021800
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40020c00 	.word	0x40020c00

080015ac <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80015b4:	f7ff ff8a 	bl	80014cc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <NMI_Handler+0x4>

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160c:	f000 fc2a 	bl	8001e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <UART4_IRQHandler+0x10>)
 800161a:	f006 fd25 	bl	8008068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20002950 	.word	0x20002950

08001628 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <DMA2_Stream1_IRQHandler+0x10>)
 800162e:	f001 fa3f 	bl	8002ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000186c 	.word	0x2000186c

0800163c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <ETH_IRQHandler+0x10>)
 8001642:	f003 fa07 	bl	8004a54 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20006320 	.word	0x20006320

08001650 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <OTG_FS_IRQHandler+0x10>)
 8001656:	f004 fc01 	bl	8005e5c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20018b90 	.word	0x20018b90

08001664 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <DCMI_IRQHandler+0x10>)
 800166a:	f000 fe4d 	bl	8002308 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20002908 	.word	0x20002908

08001678 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
	return 1;
 800167c:	2301      	movs	r3, #1
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_kill>:

int _kill(int pid, int sig)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <_kill+0x20>)
 8001694:	2216      	movs	r2, #22
 8001696:	601a      	str	r2, [r3, #0]
	return -1;
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	20018e94 	.word	0x20018e94

080016ac <_exit>:

void _exit (int status)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ffe5 	bl	8001688 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016be:	e7fe      	b.n	80016be <_exit+0x12>

080016c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e00a      	b.n	80016e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016d2:	f3af 8000 	nop.w
 80016d6:	4601      	mov	r1, r0
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	60ba      	str	r2, [r7, #8]
 80016de:	b2ca      	uxtb	r2, r1
 80016e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3301      	adds	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	dbf0      	blt.n	80016d2 <_read+0x12>
	}

return len;
 80016f0:	687b      	ldr	r3, [r7, #4]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e009      	b.n	8001720 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	60ba      	str	r2, [r7, #8]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f016 ffa1 	bl	801865c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3301      	adds	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	429a      	cmp	r2, r3
 8001726:	dbf1      	blt.n	800170c <_write+0x12>
	}
	return len;
 8001728:	687b      	ldr	r3, [r7, #4]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_close>:

int _close(int file)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
	return -1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800175a:	605a      	str	r2, [r3, #4]
	return 0;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <_isatty>:

int _isatty(int file)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
	return 1;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
	return 0;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a4:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <_sbrk+0x5c>)
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <_sbrk+0x60>)
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_sbrk+0x64>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <_sbrk+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d205      	bcs.n	80017d8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <_sbrk+0x6c>)
 80017ce:	220c      	movs	r2, #12
 80017d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	e009      	b.n	80017ec <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	4a06      	ldr	r2, [pc, #24]	; (8001800 <_sbrk+0x64>)
 80017e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	371c      	adds	r7, #28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	20020000 	.word	0x20020000
 80017fc:	00001000 	.word	0x00001000
 8001800:	20000658 	.word	0x20000658
 8001804:	20018ea8 	.word	0x20018ea8
 8001808:	20018e94 	.word	0x20018e94

0800180c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <SystemInit+0x20>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <SystemInit+0x20>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <tcp_err2>:
/* create a struct to store data */
 static struct tcp_client_struct *esTx = 0;
 static struct tcp_pcb *pcbTx = 0;
int numarr[2];

static void tcp_err2(void *arg,err_t err){
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	70fb      	strb	r3, [r7, #3]

printf("connect error,!closed by core ");
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <tcp_err2+0x1c>)
 800183e:	f017 fb59 	bl	8018ef4 <iprintf>


}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	08019e98 	.word	0x08019e98

08001850 <HAL_DCMI_FrameEventCallback>:


void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi2)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	if(echo_run==1){
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <HAL_DCMI_FrameEventCallback+0x74>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d12c      	bne.n	80018ba <HAL_DCMI_FrameEventCallback+0x6a>
		 HAL_DCMI_Stop(&hdcmi);
 8001860:	4819      	ldr	r0, [pc, #100]	; (80018c8 <HAL_DCMI_FrameEventCallback+0x78>)
 8001862:	f000 fcf5 	bl	8002250 <HAL_DCMI_Stop>

	esTx->p = pbuf_alloc(PBUF_RAW,1400, PBUF_POOL);
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_DCMI_FrameEventCallback+0x7c>)
 8001868:	681c      	ldr	r4, [r3, #0]
 800186a:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800186e:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8001872:	2000      	movs	r0, #0
 8001874:	f00d fb62 	bl	800ef3c <pbuf_alloc>
 8001878:	4603      	mov	r3, r0
 800187a:	60a3      	str	r3, [r4, #8]
	if(esTx->p!=NULL){
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_DCMI_FrameEventCallback+0x7c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d016      	beq.n	80018b4 <HAL_DCMI_FrameEventCallback+0x64>
	pbuf_take(esTx->p,abc, 1400);
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_DCMI_FrameEventCallback+0x7c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001890:	490f      	ldr	r1, [pc, #60]	; (80018d0 <HAL_DCMI_FrameEventCallback+0x80>)
 8001892:	4618      	mov	r0, r3
 8001894:	f00e f892 	bl	800f9bc <pbuf_take>
	tcp_client_send(pcbTx, esTx);
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_DCMI_FrameEventCallback+0x84>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <HAL_DCMI_FrameEventCallback+0x7c>)
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fa0e 	bl	8001cc4 <tcp_client_send>
	pbuf_free(esTx->p);
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_DCMI_FrameEventCallback+0x7c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f00d fe28 	bl	800f504 <pbuf_free>

	}

	echo_run=0;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_DCMI_FrameEventCallback+0x74>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
	}


}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd90      	pop	{r4, r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000578 	.word	0x20000578
 80018c8:	20002908 	.word	0x20002908
 80018cc:	20000660 	.word	0x20000660
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000664 	.word	0x20000664

080018d8 <send_poolsize>:
void send_poolsize(int counter) {
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

	int counter_end =counter+ 3;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3303      	adds	r3, #3
 80018e4:	60fb      	str	r3, [r7, #12]

	if (counter_end>all_circle)
 80018e6:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <send_poolsize+0xec>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dd02      	ble.n	80018f6 <send_poolsize+0x1e>
		counter_end=all_circle;
 80018f0:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <send_poolsize+0xec>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
	circle_time++;
 80018f6:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <send_poolsize+0xf0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	3301      	adds	r3, #1
 80018fc:	4a32      	ldr	r2, [pc, #200]	; (80019c8 <send_poolsize+0xf0>)
 80018fe:	6013      	str	r3, [r2, #0]
	int persize=1400;
 8001900:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8001904:	60bb      	str	r3, [r7, #8]
	printf("counter=%d,end=%d\r\n",counter,counter_end);
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4830      	ldr	r0, [pc, #192]	; (80019cc <send_poolsize+0xf4>)
 800190c:	f017 faf2 	bl	8018ef4 <iprintf>

	while (counter < counter_end) {
 8001910:	e04e      	b.n	80019b0 <send_poolsize+0xd8>

		//the last one of the circles
		if(counter==(all_circle-1)&&left_bytes!=0){
 8001912:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <send_poolsize+0xec>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3b01      	subs	r3, #1
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	429a      	cmp	r2, r3
 800191c:	d116      	bne.n	800194c <send_poolsize+0x74>
 800191e:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <send_poolsize+0xf8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d012      	beq.n	800194c <send_poolsize+0x74>
			persize=left_bytes;
 8001926:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <send_poolsize+0xf8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	60bb      	str	r3, [r7, #8]
		 	 HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)testsram,DCMI_CN*DCMI_RN/4);
 800192c:	4929      	ldr	r1, [pc, #164]	; (80019d4 <send_poolsize+0xfc>)
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <send_poolsize+0x100>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a2a      	ldr	r2, [pc, #168]	; (80019dc <send_poolsize+0x104>)
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	460a      	mov	r2, r1
 800193e:	2102      	movs	r1, #2
 8001940:	4827      	ldr	r0, [pc, #156]	; (80019e0 <send_poolsize+0x108>)
 8001942:	f000 fbe5 	bl	8002110 <HAL_DCMI_Start_DMA>
		 	 echo_run=1;
 8001946:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <send_poolsize+0x10c>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]


		}
		//printf("send buff \r\n");

		esTx->p = pbuf_alloc(PBUF_RAW, persize, PBUF_POOL);
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	b29b      	uxth	r3, r3
 8001950:	4a25      	ldr	r2, [pc, #148]	; (80019e8 <send_poolsize+0x110>)
 8001952:	6814      	ldr	r4, [r2, #0]
 8001954:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8001958:	4619      	mov	r1, r3
 800195a:	2000      	movs	r0, #0
 800195c:	f00d faee 	bl	800ef3c <pbuf_alloc>
 8001960:	4603      	mov	r3, r0
 8001962:	60a3      	str	r3, [r4, #8]
		if(esTx->p!=NULL){
 8001964:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <send_poolsize+0x110>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d020      	beq.n	80019b0 <send_poolsize+0xd8>

		pbuf_take(esTx->p,testsram+1400*counter, persize);
 800196e:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <send_poolsize+0x110>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6898      	ldr	r0, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	461a      	mov	r2, r3
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <send_poolsize+0xfc>)
 8001982:	4413      	add	r3, r2
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	b292      	uxth	r2, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f00e f817 	bl	800f9bc <pbuf_take>
		tcp_client_send(pcbTx, esTx);
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <send_poolsize+0x114>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <send_poolsize+0x110>)
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f000 f993 	bl	8001cc4 <tcp_client_send>
		counter++;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3301      	adds	r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
		pbuf_free(esTx->p);
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <send_poolsize+0x110>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f00d fdaa 	bl	800f504 <pbuf_free>
	while (counter < counter_end) {
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	dbac      	blt.n	8001912 <send_poolsize+0x3a>

		}

	}

}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd90      	pop	{r4, r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000638 	.word	0x20000638
 80019c8:	2000065c 	.word	0x2000065c
 80019cc:	08019eb8 	.word	0x08019eb8
 80019d0:	2000063c 	.word	0x2000063c
 80019d4:	68000000 	.word	0x68000000
 80019d8:	20000648 	.word	0x20000648
 80019dc:	20000644 	.word	0x20000644
 80019e0:	20002908 	.word	0x20002908
 80019e4:	20000578 	.word	0x20000578
 80019e8:	20000660 	.word	0x20000660
 80019ec:	20000664 	.word	0x20000664

080019f0 <tcp_client_init>:
 1. Create TCP block.
 2. connect to the server
 3. start communicating
 */

void tcp_client_init(void) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 80019f6:	f00f fbd9 	bl	80111ac <tcp_new>
 80019fa:	60f8      	str	r0, [r7, #12]

	/* 2. Connect to the server */
	ip_addr_t destIPADDR;
	IP_ADDR4(&destIPADDR, 192, 168, 1, 26);
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <tcp_client_init+0x50>)
 80019fe:	607b      	str	r3, [r7, #4]
	err_t ok;
	//while(ok!= ERR_OK)
		ok=tcp_connect(tpcb, &destIPADDR, 12345, tcp_client_connected);
 8001a00:	1d39      	adds	r1, r7, #4
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <tcp_client_init+0x54>)
 8001a04:	f243 0239 	movw	r2, #12345	; 0x3039
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f00e fc93 	bl	8010334 <tcp_connect>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(5000);
 8001a12:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a16:	f000 fa45 	bl	8001ea4 <HAL_Delay>
		 printf("tpc address = %p\r\n,",tpcb);
 8001a1a:	68f9      	ldr	r1, [r7, #12]
 8001a1c:	480a      	ldr	r0, [pc, #40]	; (8001a48 <tcp_client_init+0x58>)
 8001a1e:	f017 fa69 	bl	8018ef4 <iprintf>

		printf("connection result = %d \r\n",ok);
 8001a22:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001a26:	4619      	mov	r1, r3
 8001a28:	4808      	ldr	r0, [pc, #32]	; (8001a4c <tcp_client_init+0x5c>)
 8001a2a:	f017 fa63 	bl	8018ef4 <iprintf>
		tcp_err(tpcb,tcp_err2);
 8001a2e:	4908      	ldr	r1, [pc, #32]	; (8001a50 <tcp_client_init+0x60>)
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f00f fc19 	bl	8011268 <tcp_err>

}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	1a01a8c0 	.word	0x1a01a8c0
 8001a44:	08001a55 	.word	0x08001a55
 8001a48:	08019ecc 	.word	0x08019ecc
 8001a4c:	08019ee0 	.word	0x08019ee0
 8001a50:	08001831 	.word	0x08001831

08001a54 <tcp_client_connected>:

/** This callback is called, when the client is connected to the server
 * Here we will initialise few other callbacks
 * and in the end, call the client handle function
 */
static err_t tcp_client_connected(void *arg, struct tcp_pcb *newpcb, err_t err) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	71fb      	strb	r3, [r7, #7]

	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(err);

	/* allocate structure es to maintain tcp connection information */
	es = (struct tcp_client_struct*) mem_malloc(
 8001a62:	200c      	movs	r0, #12
 8001a64:	f00c fd7e 	bl	800e564 <mem_malloc>
 8001a68:	6138      	str	r0, [r7, #16]
			sizeof(struct tcp_client_struct));
	if (es != NULL) {
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d01f      	beq.n	8001ab0 <tcp_client_connected+0x5c>
		es->state = ES_CONNECTED;
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]
		es->pcb = newpcb;
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	605a      	str	r2, [r3, #4]
		es->retries = 0;
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	705a      	strb	r2, [r3, #1]
		es->p = NULL;
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]

		/* pass newly allocated es structure as argument to newpcb */
		tcp_arg(newpcb, es);
 8001a88:	6939      	ldr	r1, [r7, #16]
 8001a8a:	68b8      	ldr	r0, [r7, #8]
 8001a8c:	f00f fb96 	bl	80111bc <tcp_arg>

		/* initialize lwip tcp_recv callback function for newpcb  */
		tcp_recv(newpcb, tcp_client_recv);
 8001a90:	490d      	ldr	r1, [pc, #52]	; (8001ac8 <tcp_client_connected+0x74>)
 8001a92:	68b8      	ldr	r0, [r7, #8]
 8001a94:	f00f fba4 	bl	80111e0 <tcp_recv>

		/* initialize lwip tcp_poll callback function for newpcb */
		tcp_poll(newpcb, tcp_client_poll, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	490c      	ldr	r1, [pc, #48]	; (8001acc <tcp_client_connected+0x78>)
 8001a9c:	68b8      	ldr	r0, [r7, #8]
 8001a9e:	f00f fc05 	bl	80112ac <tcp_poll>

		/* initialize LwIP tcp_sent callback function */
		//tcp_sent(newpcb, tcp_client_sent);

		/* handle the TCP data */
		tcp_client_handle(newpcb, es);
 8001aa2:	6939      	ldr	r1, [r7, #16]
 8001aa4:	68b8      	ldr	r0, [r7, #8]
 8001aa6:	f000 f94b 	bl	8001d40 <tcp_client_handle>

		ret_err = ERR_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	75fb      	strb	r3, [r7, #23]
 8001aae:	e005      	b.n	8001abc <tcp_client_connected+0x68>
	} else {
		/*  close tcp connection */
		tcp_client_connection_close(newpcb, es);
 8001ab0:	6939      	ldr	r1, [r7, #16]
 8001ab2:	68b8      	ldr	r0, [r7, #8]
 8001ab4:	f000 f91d 	bl	8001cf2 <tcp_client_connection_close>
		/* return memory error */
		ret_err = ERR_MEM;
 8001ab8:	23ff      	movs	r3, #255	; 0xff
 8001aba:	75fb      	strb	r3, [r7, #23]
	}
	return ret_err;
 8001abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	08001ad1 	.word	0x08001ad1
 8001acc:	08001c7d 	.word	0x08001c7d

08001ad0 <tcp_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
 */
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p,
		err_t err) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	70fb      	strb	r3, [r7, #3]
	struct tcp_client_struct *es;
	err_t ret_err;

	LWIP_ASSERT("arg != NULL", arg != NULL);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d106      	bne.n	8001af2 <tcp_client_recv+0x22>
 8001ae4:	4b5d      	ldr	r3, [pc, #372]	; (8001c5c <tcp_client_recv+0x18c>)
 8001ae6:	f44f 7292 	mov.w	r2, #292	; 0x124
 8001aea:	495d      	ldr	r1, [pc, #372]	; (8001c60 <tcp_client_recv+0x190>)
 8001aec:	485d      	ldr	r0, [pc, #372]	; (8001c64 <tcp_client_recv+0x194>)
 8001aee:	f017 fa01 	bl	8018ef4 <iprintf>

	es = (struct tcp_client_struct*) arg;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	61bb      	str	r3, [r7, #24]

	/* if we receive an empty tcp frame from server => close connection */
	if (p == NULL) {
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10e      	bne.n	8001b1a <tcp_client_recv+0x4a>
		/* remote host closed connection */
		es->state = ES_CLOSING;
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2203      	movs	r2, #3
 8001b00:	701a      	strb	r2, [r3, #0]
		if (es->p == NULL) {
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d103      	bne.n	8001b12 <tcp_client_recv+0x42>
			/* we're done sending, close connection */
			tcp_client_connection_close(tpcb, es);
 8001b0a:	69b9      	ldr	r1, [r7, #24]
 8001b0c:	68b8      	ldr	r0, [r7, #8]
 8001b0e:	f000 f8f0 	bl	8001cf2 <tcp_client_connection_close>
//      /* acknowledge received packet */
//      tcp_sent(tpcb, tcp_client_sent);
			/* send remaining data*/
//      tcp_client_send(tpcb, es);
		}
		ret_err = ERR_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b18:	e09a      	b.n	8001c50 <tcp_client_recv+0x180>
	}
	/* else : a non empty frame was received from server but for some reason err != ERR_OK */
	else if (err != ERR_OK) {
 8001b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00c      	beq.n	8001b3c <tcp_client_recv+0x6c>
		/* free received pbuf*/
		if (p != NULL) {
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <tcp_client_recv+0x64>
			es->p = NULL;
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
			pbuf_free(p);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f00d fce8 	bl	800f504 <pbuf_free>
		}
		ret_err = err;
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b3a:	e089      	b.n	8001c50 <tcp_client_recv+0x180>
	} else if (es->state == ES_CONNECTED) {
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d162      	bne.n	8001c0a <tcp_client_recv+0x13a>
		/* store reference to incoming pbuf (chain) */
		//es->p = p;
		struct pbuf *ptmp=p;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	623b      	str	r3, [r7, #32]
		uint8_t num[4];
		while(ptmp!=NULL){
 8001b48:	e019      	b.n	8001b7e <tcp_client_recv+0xae>
			for(int i=0;i<p->len;i++){
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e00d      	b.n	8001b6c <tcp_client_recv+0x9c>
				//printf("%c",*((char *)p->payload+i));
				num[i]=*((char *)p->payload+i);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	4413      	add	r3, r2
 8001b58:	7819      	ldrb	r1, [r3, #0]
 8001b5a:	f107 0214 	add.w	r2, r7, #20
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	4413      	add	r3, r2
 8001b62:	460a      	mov	r2, r1
 8001b64:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<p->len;i++){
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	895b      	ldrh	r3, [r3, #10]
 8001b70:	461a      	mov	r2, r3
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	4293      	cmp	r3, r2
 8001b76:	dbeb      	blt.n	8001b50 <tcp_client_recv+0x80>
			}
			ptmp=p->next;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	623b      	str	r3, [r7, #32]
		while(ptmp!=NULL){
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1e2      	bne.n	8001b4a <tcp_client_recv+0x7a>
		}
		resend_no=num[0]+num[1]+num[2]+num[3];
 8001b84:	7d3b      	ldrb	r3, [r7, #20]
 8001b86:	461a      	mov	r2, r3
 8001b88:	7d7b      	ldrb	r3, [r7, #21]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	7dba      	ldrb	r2, [r7, #22]
 8001b8e:	4413      	add	r3, r2
 8001b90:	7dfa      	ldrb	r2, [r7, #23]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a34      	ldr	r2, [pc, #208]	; (8001c68 <tcp_client_recv+0x198>)
 8001b96:	6013      	str	r3, [r2, #0]
//
		if(resend_no==6666){
 8001b98:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <tcp_client_recv+0x198>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f641 220a 	movw	r2, #6666	; 0x1a0a
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d103      	bne.n	8001bac <tcp_client_recv+0xdc>
			echo_run=1;
 8001ba4:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <tcp_client_recv+0x19c>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e021      	b.n	8001bf0 <tcp_client_recv+0x120>
		}else if(resend_no>=(all_circle+1)){
 8001bac:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <tcp_client_recv+0x1a0>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <tcp_client_recv+0x198>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	da14      	bge.n	8001be2 <tcp_client_recv+0x112>
			printf("send pool_size %d\r\n",all_circle+1);
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <tcp_client_recv+0x1a0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	482c      	ldr	r0, [pc, #176]	; (8001c74 <tcp_client_recv+0x1a4>)
 8001bc2:	f017 f997 	bl	8018ef4 <iprintf>
			resend_no-=all_circle+1;
 8001bc6:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <tcp_client_recv+0x198>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <tcp_client_recv+0x1a0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	4a25      	ldr	r2, [pc, #148]	; (8001c68 <tcp_client_recv+0x198>)
 8001bd4:	6013      	str	r3, [r2, #0]
			send_poolsize(resend_no);
 8001bd6:	4b24      	ldr	r3, [pc, #144]	; (8001c68 <tcp_client_recv+0x198>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fe7c 	bl	80018d8 <send_poolsize>
 8001be0:	e006      	b.n	8001bf0 <tcp_client_recv+0x120>

		}
		else{
			//resend_no=receive;
			printf("send resend_no %d\r\n",all_circle+1);
 8001be2:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <tcp_client_recv+0x1a0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	4619      	mov	r1, r3
 8001bea:	4823      	ldr	r0, [pc, #140]	; (8001c78 <tcp_client_recv+0x1a8>)
 8001bec:	f017 f982 	bl	8018ef4 <iprintf>
//    tcp_sent(tpcb, tcp_client_sent);



		/* Acknowledge the received data */
		tcp_recved(tpcb, p->tot_len);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	891b      	ldrh	r3, [r3, #8]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	68b8      	ldr	r0, [r7, #8]
 8001bf8:	f00e fb04 	bl	8010204 <tcp_recved>

		/* handle the received data */
		pbuf_free(p);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f00d fc81 	bl	800f504 <pbuf_free>

		ret_err = ERR_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c08:	e022      	b.n	8001c50 <tcp_client_recv+0x180>
	} else if (es->state == ES_CLOSING) {
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d10f      	bne.n	8001c32 <tcp_client_recv+0x162>
		/* odd case, remote side closing twice, trash data */
		tcp_recved(tpcb, p->tot_len);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	891b      	ldrh	r3, [r3, #8]
 8001c16:	4619      	mov	r1, r3
 8001c18:	68b8      	ldr	r0, [r7, #8]
 8001c1a:	f00e faf3 	bl	8010204 <tcp_recved>
		es->p = NULL;
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
		pbuf_free(p);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f00d fc6d 	bl	800f504 <pbuf_free>
		ret_err = ERR_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c30:	e00e      	b.n	8001c50 <tcp_client_recv+0x180>
	} else {
		/* unknown es->state, trash data  */
		tcp_recved(tpcb, p->tot_len);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	891b      	ldrh	r3, [r3, #8]
 8001c36:	4619      	mov	r1, r3
 8001c38:	68b8      	ldr	r0, [r7, #8]
 8001c3a:	f00e fae3 	bl	8010204 <tcp_recved>
		es->p = NULL;
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
		pbuf_free(p);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f00d fc5d 	bl	800f504 <pbuf_free>
		ret_err = ERR_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return ret_err;
 8001c50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3728      	adds	r7, #40	; 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	08019efc 	.word	0x08019efc
 8001c60:	08019f18 	.word	0x08019f18
 8001c64:	08019f24 	.word	0x08019f24
 8001c68:	20000640 	.word	0x20000640
 8001c6c:	20000578 	.word	0x20000578
 8001c70:	20000638 	.word	0x20000638
 8001c74:	08019f4c 	.word	0x08019f4c
 8001c78:	08019f60 	.word	0x08019f60

08001c7c <tcp_client_poll>:

static err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
	err_t ret_err;
	struct tcp_client_struct *es;

	es = (struct tcp_client_struct*) arg;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	60bb      	str	r3, [r7, #8]
	if (es != NULL) {
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00e      	beq.n	8001cae <tcp_client_poll+0x32>
		if (es->p != NULL) {
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d107      	bne.n	8001ca8 <tcp_client_poll+0x2c>
//      tcp_sent(tpcb, tcp_client_sent);
			/* there is a remaining pbuf (chain) , try to send data */
//      tcp_client_send(tpcb, es);
		} else {
			/* no remaining pbuf (chain)  */
			if (es->state == ES_CLOSING) {
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d103      	bne.n	8001ca8 <tcp_client_poll+0x2c>
				/*  close tcp connection */
				tcp_client_connection_close(tpcb, es);
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	6838      	ldr	r0, [r7, #0]
 8001ca4:	f000 f825 	bl	8001cf2 <tcp_client_connection_close>
			}
		}
		ret_err = ERR_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e004      	b.n	8001cb8 <tcp_client_poll+0x3c>
	} else {
		/* nothing to be done */
		tcp_abort(tpcb);
 8001cae:	6838      	ldr	r0, [r7, #0]
 8001cb0:	f00e fa42 	bl	8010138 <tcp_abort>
		ret_err = ERR_ABRT;
 8001cb4:	23f3      	movs	r3, #243	; 0xf3
 8001cb6:	73fb      	strb	r3, [r7, #15]
	}
	return ret_err;
 8001cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <tcp_client_send>:
	return ERR_OK;
}

/** A function to send the data to the server
 */
static void tcp_client_send(struct tcp_pcb *tpcb,struct tcp_client_struct*es) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
	  struct pbuf *ptr;


	    /* get pointer on pbuf from es structure */
	    ptr = es->p;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	60fb      	str	r3, [r7, #12]


	tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	895a      	ldrh	r2, [r3, #10]
 8001cdc:	2301      	movs	r3, #1
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f012 f996 	bl	8014010 <tcp_write>


	tcp_output(tpcb);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f012 ff7f 	bl	8014be8 <tcp_output>



}
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <tcp_client_connection_close>:


static void tcp_client_connection_close(struct tcp_pcb *tpcb,
		struct tcp_client_struct *es) {
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]

	/* remove all callbacks */
	tcp_arg(tpcb, NULL);
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f00f fa5c 	bl	80111bc <tcp_arg>
	tcp_sent(tpcb, NULL);
 8001d04:	2100      	movs	r1, #0
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f00f fa8c 	bl	8011224 <tcp_sent>
	tcp_recv(tpcb, NULL);
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f00f fa66 	bl	80111e0 <tcp_recv>
	tcp_err(tpcb, NULL);
 8001d14:	2100      	movs	r1, #0
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f00f faa6 	bl	8011268 <tcp_err>
	tcp_poll(tpcb, NULL, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2100      	movs	r1, #0
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f00f fac3 	bl	80112ac <tcp_poll>

	/* delete es structure */
	if (es != NULL) {
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <tcp_client_connection_close+0x40>
		mem_free(es);
 8001d2c:	6838      	ldr	r0, [r7, #0]
 8001d2e:	f00c faad 	bl	800e28c <mem_free>
	}

	/* close tcp connection */
	tcp_close(tpcb);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f00e f916 	bl	800ff64 <tcp_close>
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <tcp_client_handle>:

/* Handle the incoming TCP Data */

static void tcp_client_handle(struct tcp_pcb *tpcb,
		struct tcp_client_struct *es) {
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
	/* Extract the IP */

//	esTx->state = es->state;
//	esTx->pcb = es->pcb;
//	esTx->p = es->p;
	esTx = es;
 8001d4a:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <tcp_client_handle+0x24>)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
 8001d50:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <tcp_client_handle+0x28>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6013      	str	r3, [r2, #0]

}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000660 	.word	0x20000660
 8001d68:	20000664 	.word	0x20000664

08001d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d70:	480d      	ldr	r0, [pc, #52]	; (8001da8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d72:	490e      	ldr	r1, [pc, #56]	; (8001dac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d74:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d78:	e002      	b.n	8001d80 <LoopCopyDataInit>

08001d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7e:	3304      	adds	r3, #4

08001d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d84:	d3f9      	bcc.n	8001d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d86:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d88:	4c0b      	ldr	r4, [pc, #44]	; (8001db8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d8c:	e001      	b.n	8001d92 <LoopFillZerobss>

08001d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d90:	3204      	adds	r2, #4

08001d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d94:	d3fb      	bcc.n	8001d8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d96:	f7ff fd39 	bl	800180c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d9a:	f016 ffa9 	bl	8018cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d9e:	f7fe fbe3 	bl	8000568 <main>
  bx  lr    
 8001da2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001da4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dac:	2000061c 	.word	0x2000061c
  ldr r2, =_sidata
 8001db0:	0801d374 	.word	0x0801d374
  ldr r2, =_sbss
 8001db4:	2000061c 	.word	0x2000061c
  ldr r4, =_ebss
 8001db8:	20018ea4 	.word	0x20018ea4

08001dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dbc:	e7fe      	b.n	8001dbc <ADC_IRQHandler>
	...

08001dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <HAL_Init+0x40>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	; (8001e00 <HAL_Init+0x40>)
 8001dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <HAL_Init+0x40>)
 8001dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <HAL_Init+0x40>)
 8001de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de8:	2003      	movs	r0, #3
 8001dea:	f000 f94f 	bl	800208c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dee:	200f      	movs	r0, #15
 8001df0:	f000 f808 	bl	8001e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df4:	f7ff f9e2 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_InitTick+0x54>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_InitTick+0x58>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f967 	bl	80020f6 <HAL_SYSTICK_Config>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00e      	b.n	8001e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b0f      	cmp	r3, #15
 8001e36:	d80a      	bhi.n	8001e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f000 f92f 	bl	80020a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e44:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <HAL_InitTick+0x5c>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000580 	.word	0x20000580
 8001e5c:	20000588 	.word	0x20000588
 8001e60:	20000584 	.word	0x20000584

08001e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_IncTick+0x20>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_IncTick+0x24>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <HAL_IncTick+0x24>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000588 	.word	0x20000588
 8001e88:	20002994 	.word	0x20002994

08001e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_GetTick+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20002994 	.word	0x20002994

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff ffee 	bl	8001e8c <HAL_GetTick>
 8001eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_Delay+0x44>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eca:	bf00      	nop
 8001ecc:	f7ff ffde 	bl	8001e8c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000588 	.word	0x20000588

08001eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0b      	blt.n	8001f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4907      	ldr	r1, [pc, #28]	; (8001f88 <__NVIC_EnableIRQ+0x38>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	; (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
         );
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002058:	d301      	bcc.n	800205e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205a:	2301      	movs	r3, #1
 800205c:	e00f      	b.n	800207e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <SysTick_Config+0x40>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002066:	210f      	movs	r1, #15
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f7ff ff8e 	bl	8001f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <SysTick_Config+0x40>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <SysTick_Config+0x40>)
 8002078:	2207      	movs	r2, #7
 800207a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	e000e010 	.word	0xe000e010

0800208c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff29 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b4:	f7ff ff3e 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 80020b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	6978      	ldr	r0, [r7, #20]
 80020c0:	f7ff ff8e 	bl	8001fe0 <NVIC_EncodePriority>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff5d 	bl	8001f8c <__NVIC_SetPriority>
}
 80020d2:	bf00      	nop
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff31 	bl	8001f50 <__NVIC_EnableIRQ>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ffa2 	bl	8002048 <SysTick_Config>
 8002104:	4603      	mov	r3, r0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_DCMI_Start_DMA+0x20>
 800212c:	2302      	movs	r3, #2
 800212e:	e086      	b.n	800223e <HAL_DCMI_Start_DMA+0x12e>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800214e:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0202 	bic.w	r2, r2, #2
 800215e:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6819      	ldr	r1, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	430a      	orrs	r2, r1
 800216e:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002174:	4a34      	ldr	r2, [pc, #208]	; (8002248 <HAL_DCMI_Start_DMA+0x138>)
 8002176:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217c:	4a33      	ldr	r2, [pc, #204]	; (800224c <HAL_DCMI_Start_DMA+0x13c>)
 800217e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	2200      	movs	r2, #0
 8002186:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219a:	d20a      	bcs.n	80021b2 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3328      	adds	r3, #40	; 0x28
 80021a6:	4619      	mov	r1, r3
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	f000 fb96 	bl	80028dc <HAL_DMA_Start_IT>
 80021b0:	e038      	b.n	8002224 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b6:	4a24      	ldr	r2, [pc, #144]	; (8002248 <HAL_DCMI_Start_DMA+0x138>)
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 80021cc:	e009      	b.n	80021e2 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d2:	085a      	lsrs	r2, r3, #1
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	005a      	lsls	r2, r3, #1
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ea:	d2f0      	bcs.n	80021ce <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	1e9a      	subs	r2, r3, #2
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	4413      	add	r3, r2
 8002208:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	3328      	adds	r3, #40	; 0x28
 8002214:	4619      	mov	r1, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	f000 feb0 	bl	8002f84 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	0800254f 	.word	0x0800254f
 800224c:	08002679 	.word	0x08002679

08002250 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8002258:	4b29      	ldr	r3, [pc, #164]	; (8002300 <HAL_DCMI_Stop+0xb0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	085b      	lsrs	r3, r3, #1
 800225e:	4a29      	ldr	r2, [pc, #164]	; (8002304 <HAL_DCMI_Stop+0xb4>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	089b      	lsrs	r3, r3, #2
 8002266:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_DCMI_Stop+0x2a>
 8002276:	2302      	movs	r3, #2
 8002278:	e03e      	b.n	80022f8 <HAL_DCMI_Stop+0xa8>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2202      	movs	r2, #2
 8002286:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0201 	bic.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	1e5a      	subs	r2, r3, #1
 800229e:	60ba      	str	r2, [r7, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d108      	bne.n	80022b6 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a8:	f043 0220 	orr.w	r2, r3, #32
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	73fb      	strb	r3, [r7, #15]
      break;
 80022b4:	e006      	b.n	80022c4 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1ea      	bne.n	800229a <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022d2:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fb57 	bl	800298c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000580 	.word	0x20000580
 8002304:	92492493 	.word	0x92492493

08002308 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b00      	cmp	r3, #0
 8002320:	d016      	beq.n	8002350 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2204      	movs	r2, #4
 8002328:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	f043 0202 	orr.w	r2, r3, #2
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2204      	movs	r2, #4
 800233a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002342:	4a2f      	ldr	r2, [pc, #188]	; (8002400 <HAL_DCMI_IRQHandler+0xf8>)
 8002344:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	4618      	mov	r0, r3
 800234c:	f000 fb8e 	bl	8002a6c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d016      	beq.n	8002388 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2202      	movs	r2, #2
 8002360:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002366:	f043 0201 	orr.w	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2204      	movs	r2, #4
 8002372:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237a:	4a21      	ldr	r2, [pc, #132]	; (8002400 <HAL_DCMI_IRQHandler+0xf8>)
 800237c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fb72 	bl	8002a6c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2210      	movs	r2, #16
 8002398:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f83c 	bl	8002418 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d006      	beq.n	80023b8 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2208      	movs	r2, #8
 80023b0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f83a 	bl	800242c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d019      	beq.n	80023f6 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d107      	bne.n	80023e0 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 021e 	bic.w	r2, r2, #30
 80023de:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff fa2d 	bl	8001850 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	08002679 	.word	0x08002679

08002404 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_DCMI_ConfigCrop>:
  * @param  XSize DCMI Pixel per line
  * @param  YSize DCMI Line number
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_ConfigCrop(DCMI_HandleTypeDef *hdcmi, uint32_t X0, uint32_t Y0, uint32_t XSize, uint32_t YSize)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_DCMI_ConfigCrop+0x1c>
 8002458:	2302      	movs	r3, #2
 800245a:	e01e      	b.n	800249a <HAL_DCMI_ConfigCrop+0x5a>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  assert_param(IS_DCMI_WINDOW_COORDINATE(YSize));
  assert_param(IS_DCMI_WINDOW_COORDINATE(XSize));
  assert_param(IS_DCMI_WINDOW_HEIGHT(Y0));

  /* Configure CROP */
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_POSITION_CWSIZE_VLINE));
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	0419      	lsls	r1, r3, #16
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_POSITION_CWSTRT_VST));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	0419      	lsls	r1, r3, #16
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	430a      	orrs	r2, r1
 8002486:	621a      	str	r2, [r3, #32]

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_DCMI_DisableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_DCMI_DisableCrop+0x16>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e018      	b.n	80024ee <HAL_DCMI_DisableCrop+0x48>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable DCMI Crop feature */
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0204 	bic.w	r2, r2, #4
 80024da:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_DCMI_EnableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_EnableCrop(DCMI_HandleTypeDef *hdcmi)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_DCMI_EnableCrop+0x16>
 800250c:	2302      	movs	r3, #2
 800250e:	e018      	b.n	8002542 <HAL_DCMI_EnableCrop+0x48>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Enable DCMI Crop feature */
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0204 	orr.w	r2, r2, #4
 800252e:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255e:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	2b00      	cmp	r3, #0
 8002566:	d043      	beq.n	80025f0 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002574:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d118      	bne.n	80025b4 <DCMI_DMAXferCplt+0x66>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d015      	beq.n	80025b4 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	00da      	lsls	r2, r3, #3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	2200      	movs	r2, #0
 80025a2:	4619      	mov	r1, r3
 80025a4:	f001 fe36 	bl	8004214 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	1e5a      	subs	r2, r3, #1
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	629a      	str	r2, [r3, #40]	; 0x28
 80025b2:	e044      	b.n	800263e <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d13c      	bne.n	800263e <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	00da      	lsls	r2, r3, #3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4413      	add	r3, r2
 80025dc:	2201      	movs	r2, #1
 80025de:	4619      	mov	r1, r3
 80025e0:	f001 fe18 	bl	8004214 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	1e5a      	subs	r2, r3, #1
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	629a      	str	r2, [r3, #40]	; 0x28
 80025ee:	e026      	b.n	800263e <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d006      	beq.n	800260e <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800260a:	60da      	str	r2, [r3, #12]
 800260c:	e017      	b.n	800263e <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10f      	bne.n	800263e <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002622:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	0099      	lsls	r1, r3, #2
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	440a      	add	r2, r1
 8002634:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	429a      	cmp	r2, r3
 8002648:	d112      	bne.n	8002670 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b02      	cmp	r3, #2
 8002666:	d103      	bne.n	8002670 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268c:	2b02      	cmp	r3, #2
 800268e:	d003      	beq.n	8002698 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f7ff feb3 	bl	8002404 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e05f      	b.n	8002778 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d109      	bne.n	80026d8 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7fe fd9d 	bl	800120c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe fd9a 	bl	800120c <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80026ee:	f023 0308 	bic.w	r3, r3, #8
 80026f2:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6819      	ldr	r1, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002708:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002714:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002720:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b10      	cmp	r3, #16
 8002730:	d112      	bne.n	8002758 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7f1b      	ldrb	r3, [r3, #28]
 8002736:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	7f5b      	ldrb	r3, [r3, #29]
 800273c:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800273e:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	7f9b      	ldrb	r3, [r3, #30]
 8002744:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002746:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	7fdb      	ldrb	r3, [r3, #31]
 800274e:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002754:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002756:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 021e 	orr.w	r2, r2, #30
 8002766:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800278c:	f7ff fb7e 	bl	8001e8c <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e099      	b.n	80028d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027bc:	e00f      	b.n	80027de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027be:	f7ff fb65 	bl	8001e8c <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d908      	bls.n	80027de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2203      	movs	r2, #3
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e078      	b.n	80028d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1e8      	bne.n	80027be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	4b38      	ldr	r3, [pc, #224]	; (80028d8 <HAL_DMA_Init+0x158>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800280a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	2b04      	cmp	r3, #4
 8002836:	d107      	bne.n	8002848 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	4313      	orrs	r3, r2
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f023 0307 	bic.w	r3, r3, #7
 800285e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	4313      	orrs	r3, r2
 8002868:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2b04      	cmp	r3, #4
 8002870:	d117      	bne.n	80028a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00e      	beq.n	80028a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fb01 	bl	8002e8c <DMA_CheckFifoParam>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2240      	movs	r2, #64	; 0x40
 8002894:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800289e:	2301      	movs	r3, #1
 80028a0:	e016      	b.n	80028d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fab8 	bl	8002e20 <DMA_CalcBaseAndBitshift>
 80028b0:	4603      	mov	r3, r0
 80028b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b8:	223f      	movs	r2, #63	; 0x3f
 80028ba:	409a      	lsls	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	f010803f 	.word	0xf010803f

080028dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_DMA_Start_IT+0x26>
 80028fe:	2302      	movs	r3, #2
 8002900:	e040      	b.n	8002984 <HAL_DMA_Start_IT+0xa8>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b01      	cmp	r3, #1
 8002914:	d12f      	bne.n	8002976 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2202      	movs	r2, #2
 800291a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 fa4a 	bl	8002dc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	223f      	movs	r2, #63	; 0x3f
 8002936:	409a      	lsls	r2, r3
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0216 	orr.w	r2, r2, #22
 800294a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0208 	orr.w	r2, r2, #8
 8002962:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	e005      	b.n	8002982 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800297e:	2302      	movs	r3, #2
 8002980:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002982:	7dfb      	ldrb	r3, [r7, #23]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800299a:	f7ff fa77 	bl	8001e8c <HAL_GetTick>
 800299e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d008      	beq.n	80029be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e052      	b.n	8002a64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0216 	bic.w	r2, r2, #22
 80029cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d103      	bne.n	80029ee <HAL_DMA_Abort+0x62>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d007      	beq.n	80029fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0208 	bic.w	r2, r2, #8
 80029fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0201 	bic.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a0e:	e013      	b.n	8002a38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a10:	f7ff fa3c 	bl	8001e8c <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b05      	cmp	r3, #5
 8002a1c:	d90c      	bls.n	8002a38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2220      	movs	r2, #32
 8002a22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2203      	movs	r2, #3
 8002a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e015      	b.n	8002a64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1e4      	bne.n	8002a10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4a:	223f      	movs	r2, #63	; 0x3f
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d004      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e00c      	b.n	8002aa4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2205      	movs	r2, #5
 8002a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0201 	bic.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002abc:	4b92      	ldr	r3, [pc, #584]	; (8002d08 <HAL_DMA_IRQHandler+0x258>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a92      	ldr	r2, [pc, #584]	; (8002d0c <HAL_DMA_IRQHandler+0x25c>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	0a9b      	lsrs	r3, r3, #10
 8002ac8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	2208      	movs	r2, #8
 8002adc:	409a      	lsls	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d01a      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d013      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0204 	bic.w	r2, r2, #4
 8002b02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b08:	2208      	movs	r2, #8
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b14:	f043 0201 	orr.w	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b20:	2201      	movs	r2, #1
 8002b22:	409a      	lsls	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d012      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00b      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3e:	2201      	movs	r2, #1
 8002b40:	409a      	lsls	r2, r3
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	f043 0202 	orr.w	r2, r3, #2
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b56:	2204      	movs	r2, #4
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d012      	beq.n	8002b88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00b      	beq.n	8002b88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	2204      	movs	r2, #4
 8002b76:	409a      	lsls	r2, r3
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b80:	f043 0204 	orr.w	r2, r3, #4
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d043      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d03c      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002baa:	2210      	movs	r2, #16
 8002bac:	409a      	lsls	r2, r3
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d018      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d108      	bne.n	8002be0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d024      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	4798      	blx	r3
 8002bde:	e01f      	b.n	8002c20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d01b      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
 8002bf0:	e016      	b.n	8002c20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d107      	bne.n	8002c10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0208 	bic.w	r2, r2, #8
 8002c0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c24:	2220      	movs	r2, #32
 8002c26:	409a      	lsls	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 808e 	beq.w	8002d4e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 8086 	beq.w	8002d4e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c46:	2220      	movs	r2, #32
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b05      	cmp	r3, #5
 8002c58:	d136      	bne.n	8002cc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0216 	bic.w	r2, r2, #22
 8002c68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d103      	bne.n	8002c8a <HAL_DMA_IRQHandler+0x1da>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0208 	bic.w	r2, r2, #8
 8002c98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9e:	223f      	movs	r2, #63	; 0x3f
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d07d      	beq.n	8002dba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	4798      	blx	r3
        }
        return;
 8002cc6:	e078      	b.n	8002dba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01c      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d108      	bne.n	8002cf6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d030      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
 8002cf4:	e02b      	b.n	8002d4e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d027      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	4798      	blx	r3
 8002d06:	e022      	b.n	8002d4e <HAL_DMA_IRQHandler+0x29e>
 8002d08:	20000580 	.word	0x20000580
 8002d0c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10f      	bne.n	8002d3e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0210 	bic.w	r2, r2, #16
 8002d2c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d032      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d022      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2205      	movs	r2, #5
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0201 	bic.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d307      	bcc.n	8002d96 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f2      	bne.n	8002d7a <HAL_DMA_IRQHandler+0x2ca>
 8002d94:	e000      	b.n	8002d98 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d96:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
 8002db8:	e000      	b.n	8002dbc <HAL_DMA_IRQHandler+0x30c>
        return;
 8002dba:	bf00      	nop
    }
  }
}
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop

08002dc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002de0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	d108      	bne.n	8002e04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e02:	e007      	b.n	8002e14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	60da      	str	r2, [r3, #12]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	3b10      	subs	r3, #16
 8002e30:	4a14      	ldr	r2, [pc, #80]	; (8002e84 <DMA_CalcBaseAndBitshift+0x64>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e3a:	4a13      	ldr	r2, [pc, #76]	; (8002e88 <DMA_CalcBaseAndBitshift+0x68>)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d909      	bls.n	8002e62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e56:	f023 0303 	bic.w	r3, r3, #3
 8002e5a:	1d1a      	adds	r2, r3, #4
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e60:	e007      	b.n	8002e72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e6a:	f023 0303 	bic.w	r3, r3, #3
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	aaaaaaab 	.word	0xaaaaaaab
 8002e88:	0801d118 	.word	0x0801d118

08002e8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d11f      	bne.n	8002ee6 <DMA_CheckFifoParam+0x5a>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d856      	bhi.n	8002f5a <DMA_CheckFifoParam+0xce>
 8002eac:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <DMA_CheckFifoParam+0x28>)
 8002eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb2:	bf00      	nop
 8002eb4:	08002ec5 	.word	0x08002ec5
 8002eb8:	08002ed7 	.word	0x08002ed7
 8002ebc:	08002ec5 	.word	0x08002ec5
 8002ec0:	08002f5b 	.word	0x08002f5b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d046      	beq.n	8002f5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed4:	e043      	b.n	8002f5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ede:	d140      	bne.n	8002f62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee4:	e03d      	b.n	8002f62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eee:	d121      	bne.n	8002f34 <DMA_CheckFifoParam+0xa8>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d837      	bhi.n	8002f66 <DMA_CheckFifoParam+0xda>
 8002ef6:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <DMA_CheckFifoParam+0x70>)
 8002ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efc:	08002f0d 	.word	0x08002f0d
 8002f00:	08002f13 	.word	0x08002f13
 8002f04:	08002f0d 	.word	0x08002f0d
 8002f08:	08002f25 	.word	0x08002f25
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f10:	e030      	b.n	8002f74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d025      	beq.n	8002f6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f22:	e022      	b.n	8002f6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f2c:	d11f      	bne.n	8002f6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f32:	e01c      	b.n	8002f6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d903      	bls.n	8002f42 <DMA_CheckFifoParam+0xb6>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d003      	beq.n	8002f48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f40:	e018      	b.n	8002f74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
      break;
 8002f46:	e015      	b.n	8002f74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00e      	beq.n	8002f72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]
      break;
 8002f58:	e00b      	b.n	8002f72 <DMA_CheckFifoParam+0xe6>
      break;
 8002f5a:	bf00      	nop
 8002f5c:	e00a      	b.n	8002f74 <DMA_CheckFifoParam+0xe8>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e008      	b.n	8002f74 <DMA_CheckFifoParam+0xe8>
      break;
 8002f62:	bf00      	nop
 8002f64:	e006      	b.n	8002f74 <DMA_CheckFifoParam+0xe8>
      break;
 8002f66:	bf00      	nop
 8002f68:	e004      	b.n	8002f74 <DMA_CheckFifoParam+0xe8>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e002      	b.n	8002f74 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f6e:	bf00      	nop
 8002f70:	e000      	b.n	8002f74 <DMA_CheckFifoParam+0xe8>
      break;
 8002f72:	bf00      	nop
    }
  } 
  
  return status; 
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop

08002f84 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b80      	cmp	r3, #128	; 0x80
 8002f9c:	d106      	bne.n	8002fac <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f001 b913 	b.w	80041d2 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d007      	beq.n	8002fc4 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d105      	bne.n	8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2240      	movs	r2, #64	; 0x40
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f001 b901 	b.w	80041d2 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d102      	bne.n	8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	f001 b8f9 	b.w	80041d2 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	f041 80e7 	bne.w	80041c4 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003012:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f001 f910 	bl	8004248 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4b99      	ldr	r3, [pc, #612]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003030:	429a      	cmp	r2, r3
 8003032:	d960      	bls.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a97      	ldr	r2, [pc, #604]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d057      	beq.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a96      	ldr	r2, [pc, #600]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d050      	beq.n	80030ea <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a94      	ldr	r2, [pc, #592]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d049      	beq.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a93      	ldr	r2, [pc, #588]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d042      	beq.n	80030e2 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a91      	ldr	r2, [pc, #580]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d03a      	beq.n	80030dc <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a90      	ldr	r2, [pc, #576]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d032      	beq.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a8e      	ldr	r2, [pc, #568]	; (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d02a      	beq.n	80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a8d      	ldr	r2, [pc, #564]	; (80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d022      	beq.n	80030ca <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a8b      	ldr	r2, [pc, #556]	; (80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d01a      	beq.n	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a8a      	ldr	r2, [pc, #552]	; (80032bc <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d012      	beq.n	80030be <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a88      	ldr	r2, [pc, #544]	; (80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00a      	beq.n	80030b8 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a87      	ldr	r2, [pc, #540]	; (80032c4 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d102      	bne.n	80030b2 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80030ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030b0:	e01e      	b.n	80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030b6:	e01b      	b.n	80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030bc:	e018      	b.n	80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030c2:	e015      	b.n	80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030c8:	e012      	b.n	80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030ce:	e00f      	b.n	80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030d4:	e00c      	b.n	80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030da:	e009      	b.n	80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030e0:	e006      	b.n	80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030e2:	2320      	movs	r3, #32
 80030e4:	e004      	b.n	80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030e6:	2320      	movs	r3, #32
 80030e8:	e002      	b.n	80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030ea:	2320      	movs	r3, #32
 80030ec:	e000      	b.n	80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80030ee:	2320      	movs	r3, #32
 80030f0:	4a75      	ldr	r2, [pc, #468]	; (80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 80030f2:	60d3      	str	r3, [r2, #12]
 80030f4:	e150      	b.n	8003398 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b73      	ldr	r3, [pc, #460]	; (80032cc <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 80030fe:	429a      	cmp	r2, r3
 8003100:	d960      	bls.n	80031c4 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a64      	ldr	r2, [pc, #400]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d057      	beq.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x238>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a62      	ldr	r2, [pc, #392]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d050      	beq.n	80031b8 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a61      	ldr	r2, [pc, #388]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d049      	beq.n	80031b4 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a5f      	ldr	r2, [pc, #380]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d042      	beq.n	80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a5e      	ldr	r2, [pc, #376]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d03a      	beq.n	80031aa <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a5c      	ldr	r2, [pc, #368]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d032      	beq.n	80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5b      	ldr	r2, [pc, #364]	; (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d02a      	beq.n	800319e <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a59      	ldr	r2, [pc, #356]	; (80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d022      	beq.n	8003198 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a58      	ldr	r2, [pc, #352]	; (80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d01a      	beq.n	8003192 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a56      	ldr	r2, [pc, #344]	; (80032bc <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d012      	beq.n	800318c <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a55      	ldr	r2, [pc, #340]	; (80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00a      	beq.n	8003186 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a53      	ldr	r2, [pc, #332]	; (80032c4 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d102      	bne.n	8003180 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800317a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800317e:	e01e      	b.n	80031be <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003180:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003184:	e01b      	b.n	80031be <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003186:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800318a:	e018      	b.n	80031be <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800318c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003190:	e015      	b.n	80031be <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003192:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003196:	e012      	b.n	80031be <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003198:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800319c:	e00f      	b.n	80031be <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800319e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031a2:	e00c      	b.n	80031be <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031a8:	e009      	b.n	80031be <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031ae:	e006      	b.n	80031be <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031b0:	2320      	movs	r3, #32
 80031b2:	e004      	b.n	80031be <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031b4:	2320      	movs	r3, #32
 80031b6:	e002      	b.n	80031be <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031b8:	2320      	movs	r3, #32
 80031ba:	e000      	b.n	80031be <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031bc:	2320      	movs	r3, #32
 80031be:	4a42      	ldr	r2, [pc, #264]	; (80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 80031c0:	6093      	str	r3, [r2, #8]
 80031c2:	e0e9      	b.n	8003398 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 80031cc:	429a      	cmp	r2, r3
 80031ce:	f240 8083 	bls.w	80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a30      	ldr	r2, [pc, #192]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d057      	beq.n	800328c <HAL_DMAEx_MultiBufferStart_IT+0x308>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a2e      	ldr	r2, [pc, #184]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d050      	beq.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a2d      	ldr	r2, [pc, #180]	; (80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d049      	beq.n	8003284 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a2b      	ldr	r2, [pc, #172]	; (80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d042      	beq.n	8003280 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a2a      	ldr	r2, [pc, #168]	; (80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d03a      	beq.n	800327a <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a28      	ldr	r2, [pc, #160]	; (80032ac <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d032      	beq.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a27      	ldr	r2, [pc, #156]	; (80032b0 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d02a      	beq.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a25      	ldr	r2, [pc, #148]	; (80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d022      	beq.n	8003268 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a24      	ldr	r2, [pc, #144]	; (80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d01a      	beq.n	8003262 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a22      	ldr	r2, [pc, #136]	; (80032bc <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d012      	beq.n	800325c <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a21      	ldr	r2, [pc, #132]	; (80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00a      	beq.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1f      	ldr	r2, [pc, #124]	; (80032c4 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d102      	bne.n	8003250 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800324a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800324e:	e01e      	b.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003250:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003254:	e01b      	b.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003256:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800325a:	e018      	b.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800325c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003260:	e015      	b.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003262:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003266:	e012      	b.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003268:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800326c:	e00f      	b.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800326e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003272:	e00c      	b.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003274:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003278:	e009      	b.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800327a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800327e:	e006      	b.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003280:	2320      	movs	r3, #32
 8003282:	e004      	b.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003284:	2320      	movs	r3, #32
 8003286:	e002      	b.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003288:	2320      	movs	r3, #32
 800328a:	e000      	b.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800328c:	2320      	movs	r3, #32
 800328e:	4a11      	ldr	r2, [pc, #68]	; (80032d4 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8003290:	60d3      	str	r3, [r2, #12]
 8003292:	e081      	b.n	8003398 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8003294:	40026458 	.word	0x40026458
 8003298:	40026010 	.word	0x40026010
 800329c:	40026410 	.word	0x40026410
 80032a0:	40026070 	.word	0x40026070
 80032a4:	40026470 	.word	0x40026470
 80032a8:	40026028 	.word	0x40026028
 80032ac:	40026428 	.word	0x40026428
 80032b0:	40026088 	.word	0x40026088
 80032b4:	40026488 	.word	0x40026488
 80032b8:	40026040 	.word	0x40026040
 80032bc:	40026440 	.word	0x40026440
 80032c0:	400260a0 	.word	0x400260a0
 80032c4:	400264a0 	.word	0x400264a0
 80032c8:	40026400 	.word	0x40026400
 80032cc:	400260b8 	.word	0x400260b8
 80032d0:	40026058 	.word	0x40026058
 80032d4:	40026000 	.word	0x40026000
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a96      	ldr	r2, [pc, #600]	; (8003538 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d057      	beq.n	8003392 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a95      	ldr	r2, [pc, #596]	; (800353c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d050      	beq.n	800338e <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a93      	ldr	r2, [pc, #588]	; (8003540 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d049      	beq.n	800338a <HAL_DMAEx_MultiBufferStart_IT+0x406>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a92      	ldr	r2, [pc, #584]	; (8003544 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d042      	beq.n	8003386 <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a90      	ldr	r2, [pc, #576]	; (8003548 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d03a      	beq.n	8003380 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a8f      	ldr	r2, [pc, #572]	; (800354c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d032      	beq.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a8d      	ldr	r2, [pc, #564]	; (8003550 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d02a      	beq.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a8c      	ldr	r2, [pc, #560]	; (8003554 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d022      	beq.n	800336e <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a8a      	ldr	r2, [pc, #552]	; (8003558 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d01a      	beq.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a89      	ldr	r2, [pc, #548]	; (800355c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d012      	beq.n	8003362 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a87      	ldr	r2, [pc, #540]	; (8003560 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00a      	beq.n	800335c <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a86      	ldr	r2, [pc, #536]	; (8003564 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d102      	bne.n	8003356 <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8003350:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003354:	e01e      	b.n	8003394 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003356:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800335a:	e01b      	b.n	8003394 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800335c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003360:	e018      	b.n	8003394 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003362:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003366:	e015      	b.n	8003394 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003368:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800336c:	e012      	b.n	8003394 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800336e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003372:	e00f      	b.n	8003394 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003374:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003378:	e00c      	b.n	8003394 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800337a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800337e:	e009      	b.n	8003394 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003380:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003384:	e006      	b.n	8003394 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003386:	2320      	movs	r3, #32
 8003388:	e004      	b.n	8003394 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800338a:	2320      	movs	r3, #32
 800338c:	e002      	b.n	8003394 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800338e:	2320      	movs	r3, #32
 8003390:	e000      	b.n	8003394 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003392:	2320      	movs	r3, #32
 8003394:	4a74      	ldr	r2, [pc, #464]	; (8003568 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8003396:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	4b73      	ldr	r3, [pc, #460]	; (800356c <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d960      	bls.n	8003466 <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a63      	ldr	r2, [pc, #396]	; (8003538 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d057      	beq.n	800345e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a62      	ldr	r2, [pc, #392]	; (800353c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d050      	beq.n	800345a <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a60      	ldr	r2, [pc, #384]	; (8003540 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d049      	beq.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a5f      	ldr	r2, [pc, #380]	; (8003544 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d042      	beq.n	8003452 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a5d      	ldr	r2, [pc, #372]	; (8003548 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d03a      	beq.n	800344c <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a5c      	ldr	r2, [pc, #368]	; (800354c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d032      	beq.n	8003446 <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a5a      	ldr	r2, [pc, #360]	; (8003550 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d02a      	beq.n	8003440 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a59      	ldr	r2, [pc, #356]	; (8003554 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d022      	beq.n	800343a <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a57      	ldr	r2, [pc, #348]	; (8003558 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d01a      	beq.n	8003434 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a56      	ldr	r2, [pc, #344]	; (800355c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d012      	beq.n	800342e <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a54      	ldr	r2, [pc, #336]	; (8003560 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00a      	beq.n	8003428 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a53      	ldr	r2, [pc, #332]	; (8003564 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d102      	bne.n	8003422 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 800341c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003420:	e01e      	b.n	8003460 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003422:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003426:	e01b      	b.n	8003460 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003428:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800342c:	e018      	b.n	8003460 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800342e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003432:	e015      	b.n	8003460 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003434:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003438:	e012      	b.n	8003460 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800343a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800343e:	e00f      	b.n	8003460 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003444:	e00c      	b.n	8003460 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800344a:	e009      	b.n	8003460 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800344c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003450:	e006      	b.n	8003460 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003452:	2310      	movs	r3, #16
 8003454:	e004      	b.n	8003460 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003456:	2310      	movs	r3, #16
 8003458:	e002      	b.n	8003460 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800345a:	2310      	movs	r3, #16
 800345c:	e000      	b.n	8003460 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800345e:	2310      	movs	r3, #16
 8003460:	4a43      	ldr	r2, [pc, #268]	; (8003570 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8003462:	60d3      	str	r3, [r2, #12]
 8003464:	e14f      	b.n	8003706 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	4b41      	ldr	r3, [pc, #260]	; (8003574 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 800346e:	429a      	cmp	r2, r3
 8003470:	f240 8082 	bls.w	8003578 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2f      	ldr	r2, [pc, #188]	; (8003538 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d057      	beq.n	800352e <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a2e      	ldr	r2, [pc, #184]	; (800353c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d050      	beq.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a2c      	ldr	r2, [pc, #176]	; (8003540 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d049      	beq.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a2b      	ldr	r2, [pc, #172]	; (8003544 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d042      	beq.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a29      	ldr	r2, [pc, #164]	; (8003548 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d03a      	beq.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0x598>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a28      	ldr	r2, [pc, #160]	; (800354c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d032      	beq.n	8003516 <HAL_DMAEx_MultiBufferStart_IT+0x592>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a26      	ldr	r2, [pc, #152]	; (8003550 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d02a      	beq.n	8003510 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a25      	ldr	r2, [pc, #148]	; (8003554 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <HAL_DMAEx_MultiBufferStart_IT+0x586>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a23      	ldr	r2, [pc, #140]	; (8003558 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01a      	beq.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a22      	ldr	r2, [pc, #136]	; (800355c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d012      	beq.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a20      	ldr	r2, [pc, #128]	; (8003560 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00a      	beq.n	80034f8 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d102      	bne.n	80034f2 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 80034ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034f0:	e01e      	b.n	8003530 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80034f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80034f6:	e01b      	b.n	8003530 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80034f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034fc:	e018      	b.n	8003530 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80034fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003502:	e015      	b.n	8003530 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003504:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003508:	e012      	b.n	8003530 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800350a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800350e:	e00f      	b.n	8003530 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003514:	e00c      	b.n	8003530 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800351a:	e009      	b.n	8003530 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800351c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003520:	e006      	b.n	8003530 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003522:	2310      	movs	r3, #16
 8003524:	e004      	b.n	8003530 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003526:	2310      	movs	r3, #16
 8003528:	e002      	b.n	8003530 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800352a:	2310      	movs	r3, #16
 800352c:	e000      	b.n	8003530 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800352e:	2310      	movs	r3, #16
 8003530:	4a0f      	ldr	r2, [pc, #60]	; (8003570 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8003532:	6093      	str	r3, [r2, #8]
 8003534:	e0e7      	b.n	8003706 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8003536:	bf00      	nop
 8003538:	40026010 	.word	0x40026010
 800353c:	40026410 	.word	0x40026410
 8003540:	40026070 	.word	0x40026070
 8003544:	40026470 	.word	0x40026470
 8003548:	40026028 	.word	0x40026028
 800354c:	40026428 	.word	0x40026428
 8003550:	40026088 	.word	0x40026088
 8003554:	40026488 	.word	0x40026488
 8003558:	40026040 	.word	0x40026040
 800355c:	40026440 	.word	0x40026440
 8003560:	400260a0 	.word	0x400260a0
 8003564:	400264a0 	.word	0x400264a0
 8003568:	40026000 	.word	0x40026000
 800356c:	40026458 	.word	0x40026458
 8003570:	40026400 	.word	0x40026400
 8003574:	400260b8 	.word	0x400260b8
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	4b96      	ldr	r3, [pc, #600]	; (80037d8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003580:	429a      	cmp	r2, r3
 8003582:	d960      	bls.n	8003646 <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a94      	ldr	r2, [pc, #592]	; (80037dc <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d057      	beq.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a93      	ldr	r2, [pc, #588]	; (80037e0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d050      	beq.n	800363a <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a91      	ldr	r2, [pc, #580]	; (80037e4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d049      	beq.n	8003636 <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a90      	ldr	r2, [pc, #576]	; (80037e8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d042      	beq.n	8003632 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a8e      	ldr	r2, [pc, #568]	; (80037ec <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d03a      	beq.n	800362c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a8d      	ldr	r2, [pc, #564]	; (80037f0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d032      	beq.n	8003626 <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a8b      	ldr	r2, [pc, #556]	; (80037f4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d02a      	beq.n	8003620 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a8a      	ldr	r2, [pc, #552]	; (80037f8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d022      	beq.n	800361a <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a88      	ldr	r2, [pc, #544]	; (80037fc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01a      	beq.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a87      	ldr	r2, [pc, #540]	; (8003800 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d012      	beq.n	800360e <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a85      	ldr	r2, [pc, #532]	; (8003804 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00a      	beq.n	8003608 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a84      	ldr	r2, [pc, #528]	; (8003808 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d102      	bne.n	8003602 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 80035fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003600:	e01e      	b.n	8003640 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003602:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003606:	e01b      	b.n	8003640 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003608:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800360c:	e018      	b.n	8003640 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800360e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003612:	e015      	b.n	8003640 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003614:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003618:	e012      	b.n	8003640 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800361a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800361e:	e00f      	b.n	8003640 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003624:	e00c      	b.n	8003640 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800362a:	e009      	b.n	8003640 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800362c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003630:	e006      	b.n	8003640 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003632:	2310      	movs	r3, #16
 8003634:	e004      	b.n	8003640 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003636:	2310      	movs	r3, #16
 8003638:	e002      	b.n	8003640 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800363a:	2310      	movs	r3, #16
 800363c:	e000      	b.n	8003640 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800363e:	2310      	movs	r3, #16
 8003640:	4a72      	ldr	r2, [pc, #456]	; (800380c <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8003642:	60d3      	str	r3, [r2, #12]
 8003644:	e05f      	b.n	8003706 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a64      	ldr	r2, [pc, #400]	; (80037dc <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d057      	beq.n	8003700 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a62      	ldr	r2, [pc, #392]	; (80037e0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d050      	beq.n	80036fc <HAL_DMAEx_MultiBufferStart_IT+0x778>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a61      	ldr	r2, [pc, #388]	; (80037e4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d049      	beq.n	80036f8 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a5f      	ldr	r2, [pc, #380]	; (80037e8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d042      	beq.n	80036f4 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a5e      	ldr	r2, [pc, #376]	; (80037ec <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d03a      	beq.n	80036ee <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a5c      	ldr	r2, [pc, #368]	; (80037f0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d032      	beq.n	80036e8 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a5b      	ldr	r2, [pc, #364]	; (80037f4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d02a      	beq.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a59      	ldr	r2, [pc, #356]	; (80037f8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d022      	beq.n	80036dc <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a58      	ldr	r2, [pc, #352]	; (80037fc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d01a      	beq.n	80036d6 <HAL_DMAEx_MultiBufferStart_IT+0x752>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a56      	ldr	r2, [pc, #344]	; (8003800 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d012      	beq.n	80036d0 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a55      	ldr	r2, [pc, #340]	; (8003804 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00a      	beq.n	80036ca <HAL_DMAEx_MultiBufferStart_IT+0x746>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a53      	ldr	r2, [pc, #332]	; (8003808 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d102      	bne.n	80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 80036be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036c2:	e01e      	b.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80036c8:	e01b      	b.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036ce:	e018      	b.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036d4:	e015      	b.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036da:	e012      	b.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036e0:	e00f      	b.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036e6:	e00c      	b.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ec:	e009      	b.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036f2:	e006      	b.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036f4:	2310      	movs	r3, #16
 80036f6:	e004      	b.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036f8:	2310      	movs	r3, #16
 80036fa:	e002      	b.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80036fc:	2310      	movs	r3, #16
 80036fe:	e000      	b.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003700:	2310      	movs	r3, #16
 8003702:	4a42      	ldr	r2, [pc, #264]	; (800380c <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8003704:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	4b40      	ldr	r3, [pc, #256]	; (8003810 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 800370e:	429a      	cmp	r2, r3
 8003710:	f240 8082 	bls.w	8003818 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a30      	ldr	r2, [pc, #192]	; (80037dc <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d057      	beq.n	80037ce <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a2f      	ldr	r2, [pc, #188]	; (80037e0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d050      	beq.n	80037ca <HAL_DMAEx_MultiBufferStart_IT+0x846>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a2d      	ldr	r2, [pc, #180]	; (80037e4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d049      	beq.n	80037c6 <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a2c      	ldr	r2, [pc, #176]	; (80037e8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d042      	beq.n	80037c2 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a2a      	ldr	r2, [pc, #168]	; (80037ec <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d03a      	beq.n	80037bc <HAL_DMAEx_MultiBufferStart_IT+0x838>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a29      	ldr	r2, [pc, #164]	; (80037f0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d032      	beq.n	80037b6 <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a27      	ldr	r2, [pc, #156]	; (80037f4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d02a      	beq.n	80037b0 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a26      	ldr	r2, [pc, #152]	; (80037f8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d022      	beq.n	80037aa <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a24      	ldr	r2, [pc, #144]	; (80037fc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d01a      	beq.n	80037a4 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a23      	ldr	r2, [pc, #140]	; (8003800 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d012      	beq.n	800379e <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a21      	ldr	r2, [pc, #132]	; (8003804 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00a      	beq.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a20      	ldr	r2, [pc, #128]	; (8003808 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d102      	bne.n	8003792 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 800378c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003790:	e01e      	b.n	80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003792:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003796:	e01b      	b.n	80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003798:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800379c:	e018      	b.n	80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800379e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037a2:	e015      	b.n	80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80037a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037a8:	e012      	b.n	80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80037aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037ae:	e00f      	b.n	80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80037b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037b4:	e00c      	b.n	80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80037b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037ba:	e009      	b.n	80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80037bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037c0:	e006      	b.n	80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80037c2:	2308      	movs	r3, #8
 80037c4:	e004      	b.n	80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80037c6:	2308      	movs	r3, #8
 80037c8:	e002      	b.n	80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80037ca:	2308      	movs	r3, #8
 80037cc:	e000      	b.n	80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80037ce:	2308      	movs	r3, #8
 80037d0:	4a10      	ldr	r2, [pc, #64]	; (8003814 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 80037d2:	60d3      	str	r3, [r2, #12]
 80037d4:	e16f      	b.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80037d6:	bf00      	nop
 80037d8:	40026058 	.word	0x40026058
 80037dc:	40026010 	.word	0x40026010
 80037e0:	40026410 	.word	0x40026410
 80037e4:	40026070 	.word	0x40026070
 80037e8:	40026470 	.word	0x40026470
 80037ec:	40026028 	.word	0x40026028
 80037f0:	40026428 	.word	0x40026428
 80037f4:	40026088 	.word	0x40026088
 80037f8:	40026488 	.word	0x40026488
 80037fc:	40026040 	.word	0x40026040
 8003800:	40026440 	.word	0x40026440
 8003804:	400260a0 	.word	0x400260a0
 8003808:	400264a0 	.word	0x400264a0
 800380c:	40026000 	.word	0x40026000
 8003810:	40026458 	.word	0x40026458
 8003814:	40026400 	.word	0x40026400
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	4b94      	ldr	r3, [pc, #592]	; (8003a70 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003820:	429a      	cmp	r2, r3
 8003822:	d960      	bls.n	80038e6 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a92      	ldr	r2, [pc, #584]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d057      	beq.n	80038de <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a91      	ldr	r2, [pc, #580]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d050      	beq.n	80038da <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a8f      	ldr	r2, [pc, #572]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d049      	beq.n	80038d6 <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a8e      	ldr	r2, [pc, #568]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d042      	beq.n	80038d2 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a8c      	ldr	r2, [pc, #560]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d03a      	beq.n	80038cc <HAL_DMAEx_MultiBufferStart_IT+0x948>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a8b      	ldr	r2, [pc, #556]	; (8003a88 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d032      	beq.n	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a89      	ldr	r2, [pc, #548]	; (8003a8c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d02a      	beq.n	80038c0 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a88      	ldr	r2, [pc, #544]	; (8003a90 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d022      	beq.n	80038ba <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a86      	ldr	r2, [pc, #536]	; (8003a94 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d01a      	beq.n	80038b4 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a85      	ldr	r2, [pc, #532]	; (8003a98 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d012      	beq.n	80038ae <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a83      	ldr	r2, [pc, #524]	; (8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00a      	beq.n	80038a8 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a82      	ldr	r2, [pc, #520]	; (8003aa0 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d102      	bne.n	80038a2 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 800389c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038a0:	e01e      	b.n	80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80038a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038a6:	e01b      	b.n	80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80038a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038ac:	e018      	b.n	80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80038ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038b2:	e015      	b.n	80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80038b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038b8:	e012      	b.n	80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80038ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038be:	e00f      	b.n	80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80038c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038c4:	e00c      	b.n	80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80038c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038ca:	e009      	b.n	80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80038cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038d0:	e006      	b.n	80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80038d2:	2308      	movs	r3, #8
 80038d4:	e004      	b.n	80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80038d6:	2308      	movs	r3, #8
 80038d8:	e002      	b.n	80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80038da:	2308      	movs	r3, #8
 80038dc:	e000      	b.n	80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80038de:	2308      	movs	r3, #8
 80038e0:	4a70      	ldr	r2, [pc, #448]	; (8003aa4 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 80038e2:	6093      	str	r3, [r2, #8]
 80038e4:	e0e7      	b.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	4b6e      	ldr	r3, [pc, #440]	; (8003aa8 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d960      	bls.n	80039b4 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a5f      	ldr	r2, [pc, #380]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d057      	beq.n	80039ac <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a5d      	ldr	r2, [pc, #372]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d050      	beq.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a5c      	ldr	r2, [pc, #368]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d049      	beq.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a5a      	ldr	r2, [pc, #360]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d042      	beq.n	80039a0 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a59      	ldr	r2, [pc, #356]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d03a      	beq.n	800399a <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a57      	ldr	r2, [pc, #348]	; (8003a88 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d032      	beq.n	8003994 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a56      	ldr	r2, [pc, #344]	; (8003a8c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d02a      	beq.n	800398e <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a54      	ldr	r2, [pc, #336]	; (8003a90 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d022      	beq.n	8003988 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a53      	ldr	r2, [pc, #332]	; (8003a94 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d01a      	beq.n	8003982 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a51      	ldr	r2, [pc, #324]	; (8003a98 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d012      	beq.n	800397c <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a50      	ldr	r2, [pc, #320]	; (8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00a      	beq.n	8003976 <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a4e      	ldr	r2, [pc, #312]	; (8003aa0 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d102      	bne.n	8003970 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 800396a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800396e:	e01e      	b.n	80039ae <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003970:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003974:	e01b      	b.n	80039ae <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003976:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800397a:	e018      	b.n	80039ae <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800397c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003980:	e015      	b.n	80039ae <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003982:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003986:	e012      	b.n	80039ae <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800398c:	e00f      	b.n	80039ae <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800398e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003992:	e00c      	b.n	80039ae <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003998:	e009      	b.n	80039ae <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800399a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800399e:	e006      	b.n	80039ae <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80039a0:	2308      	movs	r3, #8
 80039a2:	e004      	b.n	80039ae <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80039a4:	2308      	movs	r3, #8
 80039a6:	e002      	b.n	80039ae <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80039a8:	2308      	movs	r3, #8
 80039aa:	e000      	b.n	80039ae <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80039ac:	2308      	movs	r3, #8
 80039ae:	4a3f      	ldr	r2, [pc, #252]	; (8003aac <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 80039b0:	60d3      	str	r3, [r2, #12]
 80039b2:	e080      	b.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a2e      	ldr	r2, [pc, #184]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d078      	beq.n	8003ab0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a2d      	ldr	r2, [pc, #180]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d050      	beq.n	8003a6a <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a2b      	ldr	r2, [pc, #172]	; (8003a7c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d049      	beq.n	8003a66 <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a2a      	ldr	r2, [pc, #168]	; (8003a80 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d042      	beq.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a28      	ldr	r2, [pc, #160]	; (8003a84 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d03a      	beq.n	8003a5c <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a27      	ldr	r2, [pc, #156]	; (8003a88 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d032      	beq.n	8003a56 <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a25      	ldr	r2, [pc, #148]	; (8003a8c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d02a      	beq.n	8003a50 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a24      	ldr	r2, [pc, #144]	; (8003a90 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d022      	beq.n	8003a4a <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a22      	ldr	r2, [pc, #136]	; (8003a94 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d01a      	beq.n	8003a44 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a21      	ldr	r2, [pc, #132]	; (8003a98 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d012      	beq.n	8003a3e <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1f      	ldr	r2, [pc, #124]	; (8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00a      	beq.n	8003a38 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1e      	ldr	r2, [pc, #120]	; (8003aa0 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d102      	bne.n	8003a32 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8003a2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a30:	e03f      	b.n	8003ab2 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a36:	e03c      	b.n	8003ab2 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a3c:	e039      	b.n	8003ab2 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a42:	e036      	b.n	8003ab2 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a48:	e033      	b.n	8003ab2 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a4e:	e030      	b.n	8003ab2 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a54:	e02d      	b.n	8003ab2 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a5a:	e02a      	b.n	8003ab2 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a60:	e027      	b.n	8003ab2 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a62:	2308      	movs	r3, #8
 8003a64:	e025      	b.n	8003ab2 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a66:	2308      	movs	r3, #8
 8003a68:	e023      	b.n	8003ab2 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	e021      	b.n	8003ab2 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003a6e:	bf00      	nop
 8003a70:	400260b8 	.word	0x400260b8
 8003a74:	40026010 	.word	0x40026010
 8003a78:	40026410 	.word	0x40026410
 8003a7c:	40026070 	.word	0x40026070
 8003a80:	40026470 	.word	0x40026470
 8003a84:	40026028 	.word	0x40026028
 8003a88:	40026428 	.word	0x40026428
 8003a8c:	40026088 	.word	0x40026088
 8003a90:	40026488 	.word	0x40026488
 8003a94:	40026040 	.word	0x40026040
 8003a98:	40026440 	.word	0x40026440
 8003a9c:	400260a0 	.word	0x400260a0
 8003aa0:	400264a0 	.word	0x400264a0
 8003aa4:	40026400 	.word	0x40026400
 8003aa8:	40026058 	.word	0x40026058
 8003aac:	40026000 	.word	0x40026000
 8003ab0:	2308      	movs	r3, #8
 8003ab2:	4a9a      	ldr	r2, [pc, #616]	; (8003d1c <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003ab4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	4b98      	ldr	r3, [pc, #608]	; (8003d20 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d960      	bls.n	8003b84 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a97      	ldr	r2, [pc, #604]	; (8003d24 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d057      	beq.n	8003b7c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a95      	ldr	r2, [pc, #596]	; (8003d28 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d050      	beq.n	8003b78 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a94      	ldr	r2, [pc, #592]	; (8003d2c <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d049      	beq.n	8003b74 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a92      	ldr	r2, [pc, #584]	; (8003d30 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d042      	beq.n	8003b70 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a91      	ldr	r2, [pc, #580]	; (8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d03a      	beq.n	8003b6a <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a8f      	ldr	r2, [pc, #572]	; (8003d38 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d032      	beq.n	8003b64 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a8e      	ldr	r2, [pc, #568]	; (8003d3c <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d02a      	beq.n	8003b5e <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a8c      	ldr	r2, [pc, #560]	; (8003d40 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d022      	beq.n	8003b58 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a8b      	ldr	r2, [pc, #556]	; (8003d44 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d01a      	beq.n	8003b52 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a89      	ldr	r2, [pc, #548]	; (8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d012      	beq.n	8003b4c <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a88      	ldr	r2, [pc, #544]	; (8003d4c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00a      	beq.n	8003b46 <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a86      	ldr	r2, [pc, #536]	; (8003d50 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d102      	bne.n	8003b40 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 8003b3a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b3e:	e01e      	b.n	8003b7e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b44:	e01b      	b.n	8003b7e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b46:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b4a:	e018      	b.n	8003b7e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b50:	e015      	b.n	8003b7e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b56:	e012      	b.n	8003b7e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b5c:	e00f      	b.n	8003b7e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b62:	e00c      	b.n	8003b7e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b68:	e009      	b.n	8003b7e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b6e:	e006      	b.n	8003b7e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b70:	2304      	movs	r3, #4
 8003b72:	e004      	b.n	8003b7e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b74:	2304      	movs	r3, #4
 8003b76:	e002      	b.n	8003b7e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	e000      	b.n	8003b7e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	4a75      	ldr	r2, [pc, #468]	; (8003d54 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8003b80:	60d3      	str	r3, [r2, #12]
 8003b82:	e151      	b.n	8003e28 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4b73      	ldr	r3, [pc, #460]	; (8003d58 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d960      	bls.n	8003c52 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a63      	ldr	r2, [pc, #396]	; (8003d24 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d057      	beq.n	8003c4a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a62      	ldr	r2, [pc, #392]	; (8003d28 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d050      	beq.n	8003c46 <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a60      	ldr	r2, [pc, #384]	; (8003d2c <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d049      	beq.n	8003c42 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a5f      	ldr	r2, [pc, #380]	; (8003d30 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d042      	beq.n	8003c3e <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a5d      	ldr	r2, [pc, #372]	; (8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d03a      	beq.n	8003c38 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a5c      	ldr	r2, [pc, #368]	; (8003d38 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d032      	beq.n	8003c32 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a5a      	ldr	r2, [pc, #360]	; (8003d3c <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d02a      	beq.n	8003c2c <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a59      	ldr	r2, [pc, #356]	; (8003d40 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d022      	beq.n	8003c26 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a57      	ldr	r2, [pc, #348]	; (8003d44 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01a      	beq.n	8003c20 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a56      	ldr	r2, [pc, #344]	; (8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d012      	beq.n	8003c1a <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a54      	ldr	r2, [pc, #336]	; (8003d4c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00a      	beq.n	8003c14 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a53      	ldr	r2, [pc, #332]	; (8003d50 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d102      	bne.n	8003c0e <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8003c08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c0c:	e01e      	b.n	8003c4c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c12:	e01b      	b.n	8003c4c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c18:	e018      	b.n	8003c4c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c1e:	e015      	b.n	8003c4c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c24:	e012      	b.n	8003c4c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c2a:	e00f      	b.n	8003c4c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c30:	e00c      	b.n	8003c4c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c36:	e009      	b.n	8003c4c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c3c:	e006      	b.n	8003c4c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c3e:	2304      	movs	r3, #4
 8003c40:	e004      	b.n	8003c4c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c42:	2304      	movs	r3, #4
 8003c44:	e002      	b.n	8003c4c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c46:	2304      	movs	r3, #4
 8003c48:	e000      	b.n	8003c4c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003c4a:	2304      	movs	r3, #4
 8003c4c:	4a41      	ldr	r2, [pc, #260]	; (8003d54 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8003c4e:	6093      	str	r3, [r2, #8]
 8003c50:	e0ea      	b.n	8003e28 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	4b40      	ldr	r3, [pc, #256]	; (8003d5c <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	f240 8084 	bls.w	8003d68 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a2f      	ldr	r2, [pc, #188]	; (8003d24 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d07a      	beq.n	8003d60 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a2e      	ldr	r2, [pc, #184]	; (8003d28 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d050      	beq.n	8003d16 <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a2c      	ldr	r2, [pc, #176]	; (8003d2c <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d049      	beq.n	8003d12 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a2b      	ldr	r2, [pc, #172]	; (8003d30 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d042      	beq.n	8003d0e <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a29      	ldr	r2, [pc, #164]	; (8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d03a      	beq.n	8003d08 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a28      	ldr	r2, [pc, #160]	; (8003d38 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d032      	beq.n	8003d02 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a26      	ldr	r2, [pc, #152]	; (8003d3c <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d02a      	beq.n	8003cfc <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a25      	ldr	r2, [pc, #148]	; (8003d40 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d022      	beq.n	8003cf6 <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a23      	ldr	r2, [pc, #140]	; (8003d44 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d01a      	beq.n	8003cf0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a22      	ldr	r2, [pc, #136]	; (8003d48 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d012      	beq.n	8003cea <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a20      	ldr	r2, [pc, #128]	; (8003d4c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1f      	ldr	r2, [pc, #124]	; (8003d50 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d102      	bne.n	8003cde <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8003cd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cdc:	e041      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003cde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ce2:	e03e      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003ce4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ce8:	e03b      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003cea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cee:	e038      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003cf0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cf4:	e035      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cfa:	e032      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d00:	e02f      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d06:	e02c      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d0c:	e029      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003d0e:	2304      	movs	r3, #4
 8003d10:	e027      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003d12:	2304      	movs	r3, #4
 8003d14:	e025      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003d16:	2304      	movs	r3, #4
 8003d18:	e023      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003d1a:	bf00      	nop
 8003d1c:	40026000 	.word	0x40026000
 8003d20:	40026458 	.word	0x40026458
 8003d24:	40026010 	.word	0x40026010
 8003d28:	40026410 	.word	0x40026410
 8003d2c:	40026070 	.word	0x40026070
 8003d30:	40026470 	.word	0x40026470
 8003d34:	40026028 	.word	0x40026028
 8003d38:	40026428 	.word	0x40026428
 8003d3c:	40026088 	.word	0x40026088
 8003d40:	40026488 	.word	0x40026488
 8003d44:	40026040 	.word	0x40026040
 8003d48:	40026440 	.word	0x40026440
 8003d4c:	400260a0 	.word	0x400260a0
 8003d50:	400264a0 	.word	0x400264a0
 8003d54:	40026400 	.word	0x40026400
 8003d58:	400260b8 	.word	0x400260b8
 8003d5c:	40026058 	.word	0x40026058
 8003d60:	2304      	movs	r3, #4
 8003d62:	4a94      	ldr	r2, [pc, #592]	; (8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003d64:	60d3      	str	r3, [r2, #12]
 8003d66:	e05f      	b.n	8003e28 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a92      	ldr	r2, [pc, #584]	; (8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d057      	beq.n	8003e22 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a91      	ldr	r2, [pc, #580]	; (8003fbc <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d050      	beq.n	8003e1e <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a8f      	ldr	r2, [pc, #572]	; (8003fc0 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d049      	beq.n	8003e1a <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a8e      	ldr	r2, [pc, #568]	; (8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d042      	beq.n	8003e16 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a8c      	ldr	r2, [pc, #560]	; (8003fc8 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d03a      	beq.n	8003e10 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a8b      	ldr	r2, [pc, #556]	; (8003fcc <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d032      	beq.n	8003e0a <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a89      	ldr	r2, [pc, #548]	; (8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d02a      	beq.n	8003e04 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a88      	ldr	r2, [pc, #544]	; (8003fd4 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d022      	beq.n	8003dfe <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a86      	ldr	r2, [pc, #536]	; (8003fd8 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d01a      	beq.n	8003df8 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a85      	ldr	r2, [pc, #532]	; (8003fdc <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d012      	beq.n	8003df2 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a83      	ldr	r2, [pc, #524]	; (8003fe0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00a      	beq.n	8003dec <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a82      	ldr	r2, [pc, #520]	; (8003fe4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d102      	bne.n	8003de6 <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8003de0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003de4:	e01e      	b.n	8003e24 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003de6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dea:	e01b      	b.n	8003e24 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003dec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003df0:	e018      	b.n	8003e24 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003df2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003df6:	e015      	b.n	8003e24 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003df8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003dfc:	e012      	b.n	8003e24 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003dfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e02:	e00f      	b.n	8003e24 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e08:	e00c      	b.n	8003e24 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e0e:	e009      	b.n	8003e24 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e14:	e006      	b.n	8003e24 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003e16:	2304      	movs	r3, #4
 8003e18:	e004      	b.n	8003e24 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003e1a:	2304      	movs	r3, #4
 8003e1c:	e002      	b.n	8003e24 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003e1e:	2304      	movs	r3, #4
 8003e20:	e000      	b.n	8003e24 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003e22:	2304      	movs	r3, #4
 8003e24:	4a63      	ldr	r2, [pc, #396]	; (8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003e26:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4b6e      	ldr	r3, [pc, #440]	; (8003fe8 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d95c      	bls.n	8003eee <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a5f      	ldr	r2, [pc, #380]	; (8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d053      	beq.n	8003ee6 <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a5e      	ldr	r2, [pc, #376]	; (8003fbc <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d04c      	beq.n	8003ee2 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a5c      	ldr	r2, [pc, #368]	; (8003fc0 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d045      	beq.n	8003ede <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a5b      	ldr	r2, [pc, #364]	; (8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d03e      	beq.n	8003eda <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a59      	ldr	r2, [pc, #356]	; (8003fc8 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d037      	beq.n	8003ed6 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a58      	ldr	r2, [pc, #352]	; (8003fcc <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d030      	beq.n	8003ed2 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a56      	ldr	r2, [pc, #344]	; (8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d029      	beq.n	8003ece <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a55      	ldr	r2, [pc, #340]	; (8003fd4 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d022      	beq.n	8003eca <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a53      	ldr	r2, [pc, #332]	; (8003fd8 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d01a      	beq.n	8003ec4 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a52      	ldr	r2, [pc, #328]	; (8003fdc <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d012      	beq.n	8003ebe <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a50      	ldr	r2, [pc, #320]	; (8003fe0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a4f      	ldr	r2, [pc, #316]	; (8003fe4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d102      	bne.n	8003eb2 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8003eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eb0:	e01a      	b.n	8003ee8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003eb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003eb6:	e017      	b.n	8003ee8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ebc:	e014      	b.n	8003ee8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ec2:	e011      	b.n	8003ee8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ec4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ec8:	e00e      	b.n	8003ee8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003eca:	2340      	movs	r3, #64	; 0x40
 8003ecc:	e00c      	b.n	8003ee8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ece:	2340      	movs	r3, #64	; 0x40
 8003ed0:	e00a      	b.n	8003ee8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ed2:	2340      	movs	r3, #64	; 0x40
 8003ed4:	e008      	b.n	8003ee8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ed6:	2340      	movs	r3, #64	; 0x40
 8003ed8:	e006      	b.n	8003ee8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e004      	b.n	8003ee8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e002      	b.n	8003ee8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	4a40      	ldr	r2, [pc, #256]	; (8003fec <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003eea:	60d3      	str	r3, [r2, #12]
 8003eec:	e141      	b.n	8004172 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4b3e      	ldr	r3, [pc, #248]	; (8003ff0 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d97c      	bls.n	8003ff4 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a2e      	ldr	r2, [pc, #184]	; (8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d053      	beq.n	8003fac <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a2c      	ldr	r2, [pc, #176]	; (8003fbc <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d04c      	beq.n	8003fa8 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a2b      	ldr	r2, [pc, #172]	; (8003fc0 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d045      	beq.n	8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a29      	ldr	r2, [pc, #164]	; (8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d03e      	beq.n	8003fa0 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a28      	ldr	r2, [pc, #160]	; (8003fc8 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d037      	beq.n	8003f9c <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a26      	ldr	r2, [pc, #152]	; (8003fcc <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d030      	beq.n	8003f98 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a25      	ldr	r2, [pc, #148]	; (8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d029      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a23      	ldr	r2, [pc, #140]	; (8003fd4 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d022      	beq.n	8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a22      	ldr	r2, [pc, #136]	; (8003fd8 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d01a      	beq.n	8003f8a <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a20      	ldr	r2, [pc, #128]	; (8003fdc <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d012      	beq.n	8003f84 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1f      	ldr	r2, [pc, #124]	; (8003fe0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00a      	beq.n	8003f7e <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1d      	ldr	r2, [pc, #116]	; (8003fe4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d102      	bne.n	8003f78 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8003f72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f76:	e01a      	b.n	8003fae <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f7c:	e017      	b.n	8003fae <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f82:	e014      	b.n	8003fae <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f88:	e011      	b.n	8003fae <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f8e:	e00e      	b.n	8003fae <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f90:	2340      	movs	r3, #64	; 0x40
 8003f92:	e00c      	b.n	8003fae <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f94:	2340      	movs	r3, #64	; 0x40
 8003f96:	e00a      	b.n	8003fae <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f98:	2340      	movs	r3, #64	; 0x40
 8003f9a:	e008      	b.n	8003fae <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003f9c:	2340      	movs	r3, #64	; 0x40
 8003f9e:	e006      	b.n	8003fae <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e004      	b.n	8003fae <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e002      	b.n	8003fae <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003fac:	2301      	movs	r3, #1
 8003fae:	4a0f      	ldr	r2, [pc, #60]	; (8003fec <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003fb0:	6093      	str	r3, [r2, #8]
 8003fb2:	e0de      	b.n	8004172 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003fb4:	40026000 	.word	0x40026000
 8003fb8:	40026010 	.word	0x40026010
 8003fbc:	40026410 	.word	0x40026410
 8003fc0:	40026070 	.word	0x40026070
 8003fc4:	40026470 	.word	0x40026470
 8003fc8:	40026028 	.word	0x40026028
 8003fcc:	40026428 	.word	0x40026428
 8003fd0:	40026088 	.word	0x40026088
 8003fd4:	40026488 	.word	0x40026488
 8003fd8:	40026040 	.word	0x40026040
 8003fdc:	40026440 	.word	0x40026440
 8003fe0:	400260a0 	.word	0x400260a0
 8003fe4:	400264a0 	.word	0x400264a0
 8003fe8:	40026458 	.word	0x40026458
 8003fec:	40026400 	.word	0x40026400
 8003ff0:	400260b8 	.word	0x400260b8
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4b78      	ldr	r3, [pc, #480]	; (80041dc <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d95c      	bls.n	80040ba <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a76      	ldr	r2, [pc, #472]	; (80041e0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d053      	beq.n	80040b2 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a75      	ldr	r2, [pc, #468]	; (80041e4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d04c      	beq.n	80040ae <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a73      	ldr	r2, [pc, #460]	; (80041e8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d045      	beq.n	80040aa <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a72      	ldr	r2, [pc, #456]	; (80041ec <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d03e      	beq.n	80040a6 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a70      	ldr	r2, [pc, #448]	; (80041f0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d037      	beq.n	80040a2 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a6f      	ldr	r2, [pc, #444]	; (80041f4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d030      	beq.n	800409e <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a6d      	ldr	r2, [pc, #436]	; (80041f8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d029      	beq.n	800409a <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a6c      	ldr	r2, [pc, #432]	; (80041fc <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d022      	beq.n	8004096 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a6a      	ldr	r2, [pc, #424]	; (8004200 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d01a      	beq.n	8004090 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a69      	ldr	r2, [pc, #420]	; (8004204 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d012      	beq.n	800408a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a67      	ldr	r2, [pc, #412]	; (8004208 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00a      	beq.n	8004084 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a66      	ldr	r2, [pc, #408]	; (800420c <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d102      	bne.n	800407e <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8004078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800407c:	e01a      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800407e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004082:	e017      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004084:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004088:	e014      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800408a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800408e:	e011      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004090:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004094:	e00e      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8004096:	2340      	movs	r3, #64	; 0x40
 8004098:	e00c      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800409a:	2340      	movs	r3, #64	; 0x40
 800409c:	e00a      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800409e:	2340      	movs	r3, #64	; 0x40
 80040a0:	e008      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80040a2:	2340      	movs	r3, #64	; 0x40
 80040a4:	e006      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e004      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e002      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80040b2:	2301      	movs	r3, #1
 80040b4:	4a56      	ldr	r2, [pc, #344]	; (8004210 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80040b6:	60d3      	str	r3, [r2, #12]
 80040b8:	e05b      	b.n	8004172 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a48      	ldr	r2, [pc, #288]	; (80041e0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d053      	beq.n	800416c <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a46      	ldr	r2, [pc, #280]	; (80041e4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d04c      	beq.n	8004168 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a45      	ldr	r2, [pc, #276]	; (80041e8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d045      	beq.n	8004164 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a43      	ldr	r2, [pc, #268]	; (80041ec <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d03e      	beq.n	8004160 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a42      	ldr	r2, [pc, #264]	; (80041f0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d037      	beq.n	800415c <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a40      	ldr	r2, [pc, #256]	; (80041f4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d030      	beq.n	8004158 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a3f      	ldr	r2, [pc, #252]	; (80041f8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d029      	beq.n	8004154 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a3d      	ldr	r2, [pc, #244]	; (80041fc <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d022      	beq.n	8004150 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a3c      	ldr	r2, [pc, #240]	; (8004200 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d01a      	beq.n	800414a <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a3a      	ldr	r2, [pc, #232]	; (8004204 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d012      	beq.n	8004144 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a39      	ldr	r2, [pc, #228]	; (8004208 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00a      	beq.n	800413e <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a37      	ldr	r2, [pc, #220]	; (800420c <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d102      	bne.n	8004138 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8004132:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004136:	e01a      	b.n	800416e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004138:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800413c:	e017      	b.n	800416e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800413e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004142:	e014      	b.n	800416e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004144:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004148:	e011      	b.n	800416e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800414a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800414e:	e00e      	b.n	800416e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004150:	2340      	movs	r3, #64	; 0x40
 8004152:	e00c      	b.n	800416e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004154:	2340      	movs	r3, #64	; 0x40
 8004156:	e00a      	b.n	800416e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004158:	2340      	movs	r3, #64	; 0x40
 800415a:	e008      	b.n	800416e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800415c:	2340      	movs	r3, #64	; 0x40
 800415e:	e006      	b.n	800416e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004160:	2301      	movs	r3, #1
 8004162:	e004      	b.n	800416e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004164:	2301      	movs	r3, #1
 8004166:	e002      	b.n	800416e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800416c:	2301      	movs	r3, #1
 800416e:	4a28      	ldr	r2, [pc, #160]	; (8004210 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8004170:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0216 	orr.w	r2, r2, #22
 8004180:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695a      	ldr	r2, [r3, #20]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004190:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d103      	bne.n	80041a2 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d007      	beq.n	80041b2 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0208 	orr.w	r2, r2, #8
 80041b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0201 	orr.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e005      	b.n	80041d0 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041cc:	2302      	movs	r3, #2
 80041ce:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40026058 	.word	0x40026058
 80041e0:	40026010 	.word	0x40026010
 80041e4:	40026410 	.word	0x40026410
 80041e8:	40026070 	.word	0x40026070
 80041ec:	40026470 	.word	0x40026470
 80041f0:	40026028 	.word	0x40026028
 80041f4:	40026428 	.word	0x40026428
 80041f8:	40026088 	.word	0x40026088
 80041fc:	40026488 	.word	0x40026488
 8004200:	40026040 	.word	0x40026040
 8004204:	40026440 	.word	0x40026440
 8004208:	400260a0 	.word	0x400260a0
 800420c:	400264a0 	.word	0x400264a0
 8004210:	40026000 	.word	0x40026000

08004214 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	4613      	mov	r3, r2
 8004220:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d104      	bne.n	8004232 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	60da      	str	r2, [r3, #12]
 8004230:	e003      	b.n	800423a <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b40      	cmp	r3, #64	; 0x40
 8004264:	d108      	bne.n	8004278 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004276:	e007      	b.n	8004288 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]
}
 8004288:	bf00      	nop
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80042a4:	4baa      	ldr	r3, [pc, #680]	; (8004550 <HAL_ETH_Init+0x2bc>)
 80042a6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80042ac:	2300      	movs	r3, #0
 80042ae:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e183      	b.n	80045c2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f006 f860 	bl	800a394 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042d4:	2300      	movs	r3, #0
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	4b9e      	ldr	r3, [pc, #632]	; (8004554 <HAL_ETH_Init+0x2c0>)
 80042da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042dc:	4a9d      	ldr	r2, [pc, #628]	; (8004554 <HAL_ETH_Init+0x2c0>)
 80042de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042e2:	6453      	str	r3, [r2, #68]	; 0x44
 80042e4:	4b9b      	ldr	r3, [pc, #620]	; (8004554 <HAL_ETH_Init+0x2c0>)
 80042e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80042f0:	4b99      	ldr	r3, [pc, #612]	; (8004558 <HAL_ETH_Init+0x2c4>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	4a98      	ldr	r2, [pc, #608]	; (8004558 <HAL_ETH_Init+0x2c4>)
 80042f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042fa:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80042fc:	4b96      	ldr	r3, [pc, #600]	; (8004558 <HAL_ETH_Init+0x2c4>)
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	4994      	ldr	r1, [pc, #592]	; (8004558 <HAL_ETH_Init+0x2c4>)
 8004306:	4313      	orrs	r3, r2
 8004308:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0201 	orr.w	r2, r2, #1
 800431c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004320:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004322:	f7fd fdb3 	bl	8001e8c <HAL_GetTick>
 8004326:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004328:	e011      	b.n	800434e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800432a:	f7fd fdaf 	bl	8001e8c <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004338:	d909      	bls.n	800434e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2203      	movs	r2, #3
 800433e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e139      	b.n	80045c2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e4      	bne.n	800432a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f023 031c 	bic.w	r3, r3, #28
 800436e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004370:	f003 fd22 	bl	8007db8 <HAL_RCC_GetHCLKFreq>
 8004374:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	4a78      	ldr	r2, [pc, #480]	; (800455c <HAL_ETH_Init+0x2c8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d908      	bls.n	8004390 <HAL_ETH_Init+0xfc>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	4a77      	ldr	r2, [pc, #476]	; (8004560 <HAL_ETH_Init+0x2cc>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d804      	bhi.n	8004390 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	f043 0308 	orr.w	r3, r3, #8
 800438c:	61fb      	str	r3, [r7, #28]
 800438e:	e027      	b.n	80043e0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	4a73      	ldr	r2, [pc, #460]	; (8004560 <HAL_ETH_Init+0x2cc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d908      	bls.n	80043aa <HAL_ETH_Init+0x116>
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	4a6d      	ldr	r2, [pc, #436]	; (8004550 <HAL_ETH_Init+0x2bc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d204      	bcs.n	80043aa <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f043 030c 	orr.w	r3, r3, #12
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	e01a      	b.n	80043e0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	4a68      	ldr	r2, [pc, #416]	; (8004550 <HAL_ETH_Init+0x2bc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d303      	bcc.n	80043ba <HAL_ETH_Init+0x126>
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	4a6b      	ldr	r2, [pc, #428]	; (8004564 <HAL_ETH_Init+0x2d0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d911      	bls.n	80043de <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	4a69      	ldr	r2, [pc, #420]	; (8004564 <HAL_ETH_Init+0x2d0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d908      	bls.n	80043d4 <HAL_ETH_Init+0x140>
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	4a68      	ldr	r2, [pc, #416]	; (8004568 <HAL_ETH_Init+0x2d4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d804      	bhi.n	80043d4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f043 0304 	orr.w	r3, r3, #4
 80043d0:	61fb      	str	r3, [r7, #28]
 80043d2:	e005      	b.n	80043e0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f043 0310 	orr.w	r3, r3, #16
 80043da:	61fb      	str	r3, [r7, #28]
 80043dc:	e000      	b.n	80043e0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80043de:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80043e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80043ec:	2100      	movs	r1, #0
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fc1d 	bl	8004c2e <HAL_ETH_WritePHYRegister>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80043fe:	6939      	ldr	r1, [r7, #16]
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fdd3 	bl	8004fac <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e0d7      	b.n	80045c2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004412:	20ff      	movs	r0, #255	; 0xff
 8004414:	f7fd fd46 	bl	8001ea4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80a5 	beq.w	800456c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004422:	f7fd fd33 	bl	8001e8c <HAL_GetTick>
 8004426:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004428:	f107 030c 	add.w	r3, r7, #12
 800442c:	461a      	mov	r2, r3
 800442e:	2101      	movs	r1, #1
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fb94 	bl	8004b5e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004436:	f7fd fd29 	bl	8001e8c <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f241 3288 	movw	r2, #5000	; 0x1388
 8004444:	4293      	cmp	r3, r2
 8004446:	d90f      	bls.n	8004468 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800444c:	6939      	ldr	r1, [r7, #16]
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fdac 	bl	8004fac <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e0ac      	b.n	80045c2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0da      	beq.n	8004428 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004472:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004476:	2100      	movs	r1, #0
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fbd8 	bl	8004c2e <HAL_ETH_WritePHYRegister>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00b      	beq.n	800449c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004488:	6939      	ldr	r1, [r7, #16]
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fd8e 	bl	8004fac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004498:	2301      	movs	r3, #1
 800449a:	e092      	b.n	80045c2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800449c:	f7fd fcf6 	bl	8001e8c <HAL_GetTick>
 80044a0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80044a2:	f107 030c 	add.w	r3, r7, #12
 80044a6:	461a      	mov	r2, r3
 80044a8:	2101      	movs	r1, #1
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fb57 	bl	8004b5e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80044b0:	f7fd fcec 	bl	8001e8c <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80044be:	4293      	cmp	r3, r2
 80044c0:	d90f      	bls.n	80044e2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80044c6:	6939      	ldr	r1, [r7, #16]
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fd6f 	bl	8004fac <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e06f      	b.n	80045c2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0da      	beq.n	80044a2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80044ec:	f107 030c 	add.w	r3, r7, #12
 80044f0:	461a      	mov	r2, r3
 80044f2:	2131      	movs	r1, #49	; 0x31
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fb32 	bl	8004b5e <HAL_ETH_ReadPHYRegister>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00b      	beq.n	8004518 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004504:	6939      	ldr	r1, [r7, #16]
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fd50 	bl	8004fac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004514:	2301      	movs	r3, #1
 8004516:	e054      	b.n	80045c2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b00      	cmp	r3, #0
 8004520:	d004      	beq.n	800452c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	e002      	b.n	8004532 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	609a      	str	r2, [r3, #8]
 8004542:	e035      	b.n	80045b0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	e030      	b.n	80045b0 <HAL_ETH_Init+0x31c>
 800454e:	bf00      	nop
 8004550:	03938700 	.word	0x03938700
 8004554:	40023800 	.word	0x40023800
 8004558:	40013800 	.word	0x40013800
 800455c:	01312cff 	.word	0x01312cff
 8004560:	02160ebf 	.word	0x02160ebf
 8004564:	05f5e0ff 	.word	0x05f5e0ff
 8004568:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	08db      	lsrs	r3, r3, #3
 8004572:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800457c:	4313      	orrs	r3, r2
 800457e:	b29b      	uxth	r3, r3
 8004580:	461a      	mov	r2, r3
 8004582:	2100      	movs	r1, #0
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fb52 	bl	8004c2e <HAL_ETH_WritePHYRegister>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004594:	6939      	ldr	r1, [r7, #16]
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fd08 	bl	8004fac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e00c      	b.n	80045c2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80045a8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80045ac:	f7fd fc7a 	bl	8001ea4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80045b0:	6939      	ldr	r1, [r7, #16]
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fcfa 	bl	8004fac <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3720      	adds	r7, #32
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop

080045cc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_ETH_DMATxDescListInit+0x20>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e052      	b.n	8004692 <HAL_ETH_DMATxDescListInit+0xc6>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e030      	b.n	800466a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	015b      	lsls	r3, r3, #5
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	4413      	add	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004618:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004620:	fb02 f303 	mul.w	r3, r2, r3
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	461a      	mov	r2, r3
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	3b01      	subs	r3, #1
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	429a      	cmp	r2, r3
 800464a:	d208      	bcs.n	800465e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	3301      	adds	r3, #1
 8004650:	015b      	lsls	r3, r3, #5
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	4413      	add	r3, r2
 8004656:	461a      	mov	r2, r3
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	60da      	str	r2, [r3, #12]
 800465c:	e002      	b.n	8004664 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	3301      	adds	r3, #1
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d3ca      	bcc.n	8004608 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800467c:	3310      	adds	r3, #16
 800467e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800469e:	b480      	push	{r7}
 80046a0:	b087      	sub	sp, #28
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	607a      	str	r2, [r7, #4]
 80046aa:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_ETH_DMARxDescListInit+0x20>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e056      	b.n	800476c <HAL_ETH_DMARxDescListInit+0xce>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2202      	movs	r2, #2
 80046ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	e034      	b.n	8004744 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	015b      	lsls	r3, r3, #5
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	4413      	add	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80046ea:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80046f2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80046fa:	fb02 f303 	mul.w	r3, r2, r3
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	4413      	add	r3, r2
 8004702:	461a      	mov	r2, r3
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d105      	bne.n	800471c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	3b01      	subs	r3, #1
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	429a      	cmp	r2, r3
 8004724:	d208      	bcs.n	8004738 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	3301      	adds	r3, #1
 800472a:	015b      	lsls	r3, r3, #5
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	4413      	add	r3, r2
 8004730:	461a      	mov	r2, r3
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	60da      	str	r2, [r3, #12]
 8004736:	e002      	b.n	800473e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	3301      	adds	r3, #1
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d3c6      	bcc.n	80046da <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004756:	330c      	adds	r3, #12
 8004758:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_ETH_TransmitFrame+0x24>
 8004798:	2302      	movs	r3, #2
 800479a:	e0cd      	b.n	8004938 <HAL_ETH_TransmitFrame+0x1c0>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80047c2:	2301      	movs	r3, #1
 80047c4:	e0b8      	b.n	8004938 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	da09      	bge.n	80047e4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2212      	movs	r2, #18
 80047d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0a9      	b.n	8004938 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d915      	bls.n	800481a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	4a54      	ldr	r2, [pc, #336]	; (8004944 <HAL_ETH_TransmitFrame+0x1cc>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	0a9b      	lsrs	r3, r3, #10
 80047f8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	4b51      	ldr	r3, [pc, #324]	; (8004944 <HAL_ETH_TransmitFrame+0x1cc>)
 80047fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004802:	0a9b      	lsrs	r3, r3, #10
 8004804:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8004808:	fb01 f303 	mul.w	r3, r1, r3
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	3301      	adds	r3, #1
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	e001      	b.n	800481e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800481a:	2301      	movs	r3, #1
 800481c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d11c      	bne.n	800485e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8004832:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800483e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800484e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	461a      	mov	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c
 800485c:	e04b      	b.n	80048f6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800485e:	2300      	movs	r3, #0
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	e044      	b.n	80048ee <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004872:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d107      	bne.n	800488a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004888:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004892:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	3b01      	subs	r3, #1
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	429a      	cmp	r2, r3
 800489c:	d116      	bne.n	80048cc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80048ac:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	4a25      	ldr	r2, [pc, #148]	; (8004948 <HAL_ETH_TransmitFrame+0x1d0>)
 80048b2:	fb02 f203 	mul.w	r2, r2, r3
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	4413      	add	r3, r2
 80048ba:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80048be:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80048ca:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80048da:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	461a      	mov	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	3301      	adds	r3, #1
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d3b6      	bcc.n	8004864 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048fe:	3314      	adds	r3, #20
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00d      	beq.n	8004926 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004912:	3314      	adds	r3, #20
 8004914:	2204      	movs	r2, #4
 8004916:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004920:	3304      	adds	r3, #4
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	371c      	adds	r7, #28
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	ac02b00b 	.word	0xac02b00b
 8004948:	fffffa0c 	.word	0xfffffa0c

0800494c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_ETH_GetReceivedFrame+0x1a>
 8004962:	2302      	movs	r3, #2
 8004964:	e070      	b.n	8004a48 <HAL_ETH_GetReceivedFrame+0xfc>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2202      	movs	r2, #2
 8004972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	db5a      	blt.n	8004a36 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d030      	beq.n	80049f0 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	2b01      	cmp	r3, #1
 800499e:	d103      	bne.n	80049a8 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	0c1b      	lsrs	r3, r3, #16
 80049b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80049bc:	3b04      	subs	r3, #4
 80049be:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	461a      	mov	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	e02b      	b.n	8004a48 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d010      	beq.n	8004a20 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	629a      	str	r2, [r3, #40]	; 0x28
 8004a1e:	e00a      	b.n	8004a36 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	461a      	mov	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a64:	3314      	adds	r3, #20
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b40      	cmp	r3, #64	; 0x40
 8004a6e:	d112      	bne.n	8004a96 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f860 	bl	8004b36 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a7e:	3314      	adds	r3, #20
 8004a80:	2240      	movs	r2, #64	; 0x40
 8004a82:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a94:	e01b      	b.n	8004ace <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a9e:	3314      	adds	r3, #20
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d111      	bne.n	8004ace <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f839 	bl	8004b22 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ab8:	3314      	adds	r3, #20
 8004aba:	2201      	movs	r2, #1
 8004abc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad6:	3314      	adds	r3, #20
 8004ad8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004adc:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae6:	3314      	adds	r3, #20
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af2:	d112      	bne.n	8004b1a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f828 	bl	8004b4a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b02:	3314      	adds	r3, #20
 8004b04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004b08:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b086      	sub	sp, #24
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	460b      	mov	r3, r1
 8004b68:	607a      	str	r2, [r7, #4]
 8004b6a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b82      	cmp	r3, #130	; 0x82
 8004b7e:	d101      	bne.n	8004b84 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004b80:	2302      	movs	r3, #2
 8004b82:	e050      	b.n	8004c26 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2282      	movs	r2, #130	; 0x82
 8004b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f003 031c 	and.w	r3, r3, #28
 8004b9a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8a1b      	ldrh	r3, [r3, #16]
 8004ba0:	02db      	lsls	r3, r3, #11
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004baa:	897b      	ldrh	r3, [r7, #10]
 8004bac:	019b      	lsls	r3, r3, #6
 8004bae:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f023 0302 	bic.w	r3, r3, #2
 8004bbe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004bd0:	f7fd f95c 	bl	8001e8c <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004bd6:	e015      	b.n	8004c04 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004bd8:	f7fd f958 	bl	8001e8c <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be6:	d309      	bcc.n	8004bfc <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e014      	b.n	8004c26 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e4      	bne.n	8004bd8 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b086      	sub	sp, #24
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	460b      	mov	r3, r1
 8004c38:	607a      	str	r2, [r7, #4]
 8004c3a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b42      	cmp	r3, #66	; 0x42
 8004c4e:	d101      	bne.n	8004c54 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004c50:	2302      	movs	r3, #2
 8004c52:	e04e      	b.n	8004cf2 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2242      	movs	r2, #66	; 0x42
 8004c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f003 031c 	and.w	r3, r3, #28
 8004c6a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8a1b      	ldrh	r3, [r3, #16]
 8004c70:	02db      	lsls	r3, r3, #11
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004c7a:	897b      	ldrh	r3, [r7, #10]
 8004c7c:	019b      	lsls	r3, r3, #6
 8004c7e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f043 0302 	orr.w	r3, r3, #2
 8004c8e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004caa:	f7fd f8ef 	bl	8001e8c <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004cb0:	e015      	b.n	8004cde <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004cb2:	f7fd f8eb 	bl	8001e8c <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc0:	d309      	bcc.n	8004cd6 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e00d      	b.n	8004cf2 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e4      	bne.n	8004cb2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_ETH_Start+0x16>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e01f      	b.n	8004d50 <HAL_ETH_Start+0x56>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fb45 	bl	80053b0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fb7c 	bl	8005424 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fc13 	bl	8005558 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fbb0 	bl	8005498 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fbdd 	bl	80054f8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_ETH_Stop+0x16>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e01f      	b.n	8004dae <HAL_ETH_Stop+0x56>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2202      	movs	r2, #2
 8004d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fba2 	bl	80054c8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fbcf 	bl	8005528 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fb67 	bl	800545e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fbe1 	bl	8005558 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fb27 	bl	80053ea <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_ETH_ConfigMAC+0x1c>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e0e4      	b.n	8004f9e <HAL_ETH_ConfigMAC+0x1e6>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80b1 	beq.w	8004f4e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4b6c      	ldr	r3, [pc, #432]	; (8004fa8 <HAL_ETH_ConfigMAC+0x1f0>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004e04:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8004e0a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8004e10:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8004e16:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8004e1c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8004e22:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8004e28:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8004e2e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8004e34:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8004e3a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8004e40:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8004e46:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e5e:	2001      	movs	r0, #1
 8004e60:	f7fd f820 	bl	8001ea4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004e74:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8004e7a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004e80:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8004e86:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004e8c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8004e92:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8004e9e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004ea0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004eaa:	2001      	movs	r0, #1
 8004eac:	f7fc fffa 	bl	8001ea4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004ec0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004eca:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004eda:	4013      	ands	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004ee8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8004eee:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8004ef4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8004efa:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8004f00:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f18:	2001      	movs	r0, #1
 8004f1a:	f7fc ffc3 	bl	8001ea4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f3e:	2001      	movs	r0, #1
 8004f40:	f7fc ffb0 	bl	8001ea4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	61da      	str	r2, [r3, #28]
 8004f4c:	e01e      	b.n	8004f8c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004f5c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f7e:	2001      	movs	r0, #1
 8004f80:	f7fc ff90 	bl	8001ea4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	ff20810f 	.word	0xff20810f

08004fac <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b0b0      	sub	sp, #192	; 0xc0
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d007      	beq.n	8004fd2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fc8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d103      	bne.n	8004ffa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ff6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ff8:	e001      	b.n	8004ffe <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005002:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005004:	2300      	movs	r3, #0
 8005006:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005008:	2300      	movs	r3, #0
 800500a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800500c:	2300      	movs	r3, #0
 800500e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005010:	2300      	movs	r3, #0
 8005012:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005014:	2300      	movs	r3, #0
 8005016:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005018:	2340      	movs	r3, #64	; 0x40
 800501a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800501c:	2300      	movs	r3, #0
 800501e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8005022:	2300      	movs	r3, #0
 8005024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005028:	2300      	movs	r3, #0
 800502a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800502e:	2300      	movs	r3, #0
 8005030:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005034:	2300      	movs	r3, #0
 8005036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800503a:	2300      	movs	r3, #0
 800503c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8005040:	2300      	movs	r3, #0
 8005042:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8005046:	2300      	movs	r3, #0
 8005048:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800504c:	2380      	movs	r3, #128	; 0x80
 800504e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005052:	2300      	movs	r3, #0
 8005054:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8005058:	2300      	movs	r3, #0
 800505a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800505e:	2300      	movs	r3, #0
 8005060:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005064:	2300      	movs	r3, #0
 8005066:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800506a:	2300      	movs	r3, #0
 800506c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8005070:	2300      	movs	r3, #0
 8005072:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005080:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005084:	4bac      	ldr	r3, [pc, #688]	; (8005338 <ETH_MACDMAConfig+0x38c>)
 8005086:	4013      	ands	r3, r2
 8005088:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800508c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800508e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005090:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8005092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8005094:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8005096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8005098:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800509e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80050a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80050a2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80050a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80050a6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80050ac:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80050ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80050b0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80050b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80050b4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80050b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80050b8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80050ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80050bc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80050be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80050c0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80050c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80050d4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050e0:	2001      	movs	r0, #1
 80050e2:	f7fc fedf 	bl	8001ea4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80050ee:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80050f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80050f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80050f4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80050f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80050f8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80050fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80050fe:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005100:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005104:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005106:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800510a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800510c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005110:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005114:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800511c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800511e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800512a:	2001      	movs	r0, #1
 800512c:	f7fc feba 	bl	8001ea4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005138:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005142:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800514c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005158:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800515c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005160:	4013      	ands	r3, r2
 8005162:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005166:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800516a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800516c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005170:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8005172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8005176:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005178:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800517c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800517e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8005182:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8005184:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005188:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800518a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800519c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80051a8:	2001      	movs	r0, #1
 80051aa:	f7fc fe7b 	bl	8001ea4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051b6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80051b8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80051bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80051d2:	2001      	movs	r0, #1
 80051d4:	f7fc fe66 	bl	8001ea4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051e0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80051e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ea:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80051ec:	2300      	movs	r3, #0
 80051ee:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80051f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051f4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80051f6:	2300      	movs	r3, #0
 80051f8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80051fa:	2300      	movs	r3, #0
 80051fc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80051fe:	2300      	movs	r3, #0
 8005200:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005202:	2300      	movs	r3, #0
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005206:	2304      	movs	r3, #4
 8005208:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800520a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005214:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005216:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800521a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800521c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005220:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005222:	2380      	movs	r3, #128	; 0x80
 8005224:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8005226:	2300      	movs	r3, #0
 8005228:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800522a:	2300      	movs	r3, #0
 800522c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005236:	3318      	adds	r3, #24
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800523e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005242:	4b3e      	ldr	r3, [pc, #248]	; (800533c <ETH_MACDMAConfig+0x390>)
 8005244:	4013      	ands	r3, r2
 8005246:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800524a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800524c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800524e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005250:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005252:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005254:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005256:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005258:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800525a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800525c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800525e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005260:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005262:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005266:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800526a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800526c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800527e:	3318      	adds	r3, #24
 8005280:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005284:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800528e:	3318      	adds	r3, #24
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005296:	2001      	movs	r0, #1
 8005298:	f7fc fe04 	bl	8001ea4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052a4:	3318      	adds	r3, #24
 80052a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80052aa:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80052ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80052b0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80052b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80052b4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80052b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80052b8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80052ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80052bc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80052be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80052c2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80052c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80052c6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80052d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80052e4:	2001      	movs	r0, #1
 80052e6:	f7fc fddd 	bl	8001ea4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80052f6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d10f      	bne.n	8005320 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005308:	331c      	adds	r3, #28
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800531c:	331c      	adds	r3, #28
 800531e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	461a      	mov	r2, r3
 8005326:	2100      	movs	r1, #0
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f809 	bl	8005340 <ETH_MACAddressConfig>
}
 800532e:	bf00      	nop
 8005330:	37c0      	adds	r7, #192	; 0xc0
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	ff20810f 	.word	0xff20810f
 800533c:	f8de3f23 	.word	0xf8de3f23

08005340 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3305      	adds	r3, #5
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	021b      	lsls	r3, r3, #8
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	3204      	adds	r2, #4
 8005358:	7812      	ldrb	r2, [r2, #0]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	4b11      	ldr	r3, [pc, #68]	; (80053a8 <ETH_MACAddressConfig+0x68>)
 8005362:	4413      	add	r3, r2
 8005364:	461a      	mov	r2, r3
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3303      	adds	r3, #3
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	061a      	lsls	r2, r3, #24
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3302      	adds	r3, #2
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	041b      	lsls	r3, r3, #16
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3301      	adds	r3, #1
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	4313      	orrs	r3, r2
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	7812      	ldrb	r2, [r2, #0]
 800538a:	4313      	orrs	r3, r2
 800538c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	4b06      	ldr	r3, [pc, #24]	; (80053ac <ETH_MACAddressConfig+0x6c>)
 8005392:	4413      	add	r3, r2
 8005394:	461a      	mov	r2, r3
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	6013      	str	r3, [r2, #0]
}
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40028040 	.word	0x40028040
 80053ac:	40028044 	.word	0x40028044

080053b0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0208 	orr.w	r2, r2, #8
 80053ca:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80053d4:	2001      	movs	r0, #1
 80053d6:	f000 f8e9 	bl	80055ac <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	601a      	str	r2, [r3, #0]
}
 80053e2:	bf00      	nop
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0208 	bic.w	r2, r2, #8
 8005404:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800540e:	2001      	movs	r0, #1
 8005410:	f000 f8cc 	bl	80055ac <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	601a      	str	r2, [r3, #0]
}
 800541c:	bf00      	nop
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0204 	orr.w	r2, r2, #4
 800543e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005448:	2001      	movs	r0, #1
 800544a:	f000 f8af 	bl	80055ac <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	601a      	str	r2, [r3, #0]
}
 8005456:	bf00      	nop
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0204 	bic.w	r2, r2, #4
 8005478:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005482:	2001      	movs	r0, #1
 8005484:	f000 f892 	bl	80055ac <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	601a      	str	r2, [r3, #0]
}
 8005490:	bf00      	nop
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054a8:	3318      	adds	r3, #24
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b8:	3318      	adds	r3, #24
 80054ba:	601a      	str	r2, [r3, #0]
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d8:	3318      	adds	r3, #24
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e8:	3318      	adds	r3, #24
 80054ea:	601a      	str	r2, [r3, #0]
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005508:	3318      	adds	r3, #24
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 0202 	orr.w	r2, r2, #2
 8005514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005518:	3318      	adds	r3, #24
 800551a:	601a      	str	r2, [r3, #0]
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005538:	3318      	adds	r3, #24
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0202 	bic.w	r2, r2, #2
 8005544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005548:	3318      	adds	r3, #24
 800554a:	601a      	str	r2, [r3, #0]
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800556c:	3318      	adds	r3, #24
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800557c:	3318      	adds	r3, #24
 800557e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005588:	3318      	adds	r3, #24
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800558e:	2001      	movs	r0, #1
 8005590:	f000 f80c 	bl	80055ac <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800559e:	3318      	adds	r3, #24
 80055a0:	601a      	str	r2, [r3, #0]
}
 80055a2:	bf00      	nop
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055b4:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <ETH_Delay+0x38>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a0b      	ldr	r2, [pc, #44]	; (80055e8 <ETH_Delay+0x3c>)
 80055ba:	fba2 2303 	umull	r2, r3, r2, r3
 80055be:	0a5b      	lsrs	r3, r3, #9
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	fb02 f303 	mul.w	r3, r2, r3
 80055c6:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80055c8:	bf00      	nop
  } 
  while (Delay --);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	1e5a      	subs	r2, r3, #1
 80055ce:	60fa      	str	r2, [r7, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1f9      	bne.n	80055c8 <ETH_Delay+0x1c>
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000580 	.word	0x20000580
 80055e8:	10624dd3 	.word	0x10624dd3

080055ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b089      	sub	sp, #36	; 0x24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055fe:	2300      	movs	r3, #0
 8005600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	e16b      	b.n	80058e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005608:	2201      	movs	r2, #1
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4013      	ands	r3, r2
 800561a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	429a      	cmp	r2, r3
 8005622:	f040 815a 	bne.w	80058da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	2b01      	cmp	r3, #1
 8005630:	d005      	beq.n	800563e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800563a:	2b02      	cmp	r3, #2
 800563c:	d130      	bne.n	80056a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	2203      	movs	r2, #3
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	43db      	mvns	r3, r3
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	4013      	ands	r3, r2
 8005654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	4313      	orrs	r3, r2
 8005666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005674:	2201      	movs	r2, #1
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	43db      	mvns	r3, r3
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	4013      	ands	r3, r2
 8005682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	091b      	lsrs	r3, r3, #4
 800568a:	f003 0201 	and.w	r2, r3, #1
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	4313      	orrs	r3, r2
 8005698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f003 0303 	and.w	r3, r3, #3
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d017      	beq.n	80056dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	2203      	movs	r2, #3
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	43db      	mvns	r3, r3
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	4013      	ands	r3, r2
 80056c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f003 0303 	and.w	r3, r3, #3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d123      	bne.n	8005730 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	08da      	lsrs	r2, r3, #3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3208      	adds	r2, #8
 80056f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	220f      	movs	r2, #15
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	4013      	ands	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	4313      	orrs	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	08da      	lsrs	r2, r3, #3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3208      	adds	r2, #8
 800572a:	69b9      	ldr	r1, [r7, #24]
 800572c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	2203      	movs	r2, #3
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	43db      	mvns	r3, r3
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	4013      	ands	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f003 0203 	and.w	r2, r3, #3
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	4313      	orrs	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 80b4 	beq.w	80058da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	4b60      	ldr	r3, [pc, #384]	; (80058f8 <HAL_GPIO_Init+0x30c>)
 8005778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577a:	4a5f      	ldr	r2, [pc, #380]	; (80058f8 <HAL_GPIO_Init+0x30c>)
 800577c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005780:	6453      	str	r3, [r2, #68]	; 0x44
 8005782:	4b5d      	ldr	r3, [pc, #372]	; (80058f8 <HAL_GPIO_Init+0x30c>)
 8005784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800578e:	4a5b      	ldr	r2, [pc, #364]	; (80058fc <HAL_GPIO_Init+0x310>)
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	089b      	lsrs	r3, r3, #2
 8005794:	3302      	adds	r3, #2
 8005796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800579a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	220f      	movs	r2, #15
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	43db      	mvns	r3, r3
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	4013      	ands	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a52      	ldr	r2, [pc, #328]	; (8005900 <HAL_GPIO_Init+0x314>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d02b      	beq.n	8005812 <HAL_GPIO_Init+0x226>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a51      	ldr	r2, [pc, #324]	; (8005904 <HAL_GPIO_Init+0x318>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d025      	beq.n	800580e <HAL_GPIO_Init+0x222>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a50      	ldr	r2, [pc, #320]	; (8005908 <HAL_GPIO_Init+0x31c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d01f      	beq.n	800580a <HAL_GPIO_Init+0x21e>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a4f      	ldr	r2, [pc, #316]	; (800590c <HAL_GPIO_Init+0x320>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d019      	beq.n	8005806 <HAL_GPIO_Init+0x21a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a4e      	ldr	r2, [pc, #312]	; (8005910 <HAL_GPIO_Init+0x324>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <HAL_GPIO_Init+0x216>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a4d      	ldr	r2, [pc, #308]	; (8005914 <HAL_GPIO_Init+0x328>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00d      	beq.n	80057fe <HAL_GPIO_Init+0x212>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a4c      	ldr	r2, [pc, #304]	; (8005918 <HAL_GPIO_Init+0x32c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d007      	beq.n	80057fa <HAL_GPIO_Init+0x20e>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a4b      	ldr	r2, [pc, #300]	; (800591c <HAL_GPIO_Init+0x330>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d101      	bne.n	80057f6 <HAL_GPIO_Init+0x20a>
 80057f2:	2307      	movs	r3, #7
 80057f4:	e00e      	b.n	8005814 <HAL_GPIO_Init+0x228>
 80057f6:	2308      	movs	r3, #8
 80057f8:	e00c      	b.n	8005814 <HAL_GPIO_Init+0x228>
 80057fa:	2306      	movs	r3, #6
 80057fc:	e00a      	b.n	8005814 <HAL_GPIO_Init+0x228>
 80057fe:	2305      	movs	r3, #5
 8005800:	e008      	b.n	8005814 <HAL_GPIO_Init+0x228>
 8005802:	2304      	movs	r3, #4
 8005804:	e006      	b.n	8005814 <HAL_GPIO_Init+0x228>
 8005806:	2303      	movs	r3, #3
 8005808:	e004      	b.n	8005814 <HAL_GPIO_Init+0x228>
 800580a:	2302      	movs	r3, #2
 800580c:	e002      	b.n	8005814 <HAL_GPIO_Init+0x228>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <HAL_GPIO_Init+0x228>
 8005812:	2300      	movs	r3, #0
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	f002 0203 	and.w	r2, r2, #3
 800581a:	0092      	lsls	r2, r2, #2
 800581c:	4093      	lsls	r3, r2
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4313      	orrs	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005824:	4935      	ldr	r1, [pc, #212]	; (80058fc <HAL_GPIO_Init+0x310>)
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	089b      	lsrs	r3, r3, #2
 800582a:	3302      	adds	r3, #2
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005832:	4b3b      	ldr	r3, [pc, #236]	; (8005920 <HAL_GPIO_Init+0x334>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	43db      	mvns	r3, r3
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	4013      	ands	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005856:	4a32      	ldr	r2, [pc, #200]	; (8005920 <HAL_GPIO_Init+0x334>)
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800585c:	4b30      	ldr	r3, [pc, #192]	; (8005920 <HAL_GPIO_Init+0x334>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	43db      	mvns	r3, r3
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	4013      	ands	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4313      	orrs	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005880:	4a27      	ldr	r2, [pc, #156]	; (8005920 <HAL_GPIO_Init+0x334>)
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005886:	4b26      	ldr	r3, [pc, #152]	; (8005920 <HAL_GPIO_Init+0x334>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	43db      	mvns	r3, r3
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	4013      	ands	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058aa:	4a1d      	ldr	r2, [pc, #116]	; (8005920 <HAL_GPIO_Init+0x334>)
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058b0:	4b1b      	ldr	r3, [pc, #108]	; (8005920 <HAL_GPIO_Init+0x334>)
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	43db      	mvns	r3, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4013      	ands	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058d4:	4a12      	ldr	r2, [pc, #72]	; (8005920 <HAL_GPIO_Init+0x334>)
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	3301      	adds	r3, #1
 80058de:	61fb      	str	r3, [r7, #28]
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	2b0f      	cmp	r3, #15
 80058e4:	f67f ae90 	bls.w	8005608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058e8:	bf00      	nop
 80058ea:	bf00      	nop
 80058ec:	3724      	adds	r7, #36	; 0x24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40023800 	.word	0x40023800
 80058fc:	40013800 	.word	0x40013800
 8005900:	40020000 	.word	0x40020000
 8005904:	40020400 	.word	0x40020400
 8005908:	40020800 	.word	0x40020800
 800590c:	40020c00 	.word	0x40020c00
 8005910:	40021000 	.word	0x40021000
 8005914:	40021400 	.word	0x40021400
 8005918:	40021800 	.word	0x40021800
 800591c:	40021c00 	.word	0x40021c00
 8005920:	40013c00 	.word	0x40013c00

08005924 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	887b      	ldrh	r3, [r7, #2]
 8005936:	4013      	ands	r3, r2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800593c:	2301      	movs	r3, #1
 800593e:	73fb      	strb	r3, [r7, #15]
 8005940:	e001      	b.n	8005946 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005942:	2300      	movs	r3, #0
 8005944:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005946:	7bfb      	ldrb	r3, [r7, #15]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	807b      	strh	r3, [r7, #2]
 8005960:	4613      	mov	r3, r2
 8005962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005964:	787b      	ldrb	r3, [r7, #1]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800596a:	887a      	ldrh	r2, [r7, #2]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005970:	e003      	b.n	800597a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005972:	887b      	ldrh	r3, [r7, #2]
 8005974:	041a      	lsls	r2, r3, #16
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	619a      	str	r2, [r3, #24]
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005986:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005988:	b08f      	sub	sp, #60	; 0x3c
 800598a:	af0a      	add	r7, sp, #40	; 0x28
 800598c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e054      	b.n	8005a42 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d106      	bne.n	80059b8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f012 fec2 	bl	801873c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2203      	movs	r2, #3
 80059bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d102      	bne.n	80059d2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f003 fb10 	bl	8008ffc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	603b      	str	r3, [r7, #0]
 80059e2:	687e      	ldr	r6, [r7, #4]
 80059e4:	466d      	mov	r5, sp
 80059e6:	f106 0410 	add.w	r4, r6, #16
 80059ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80059fa:	1d33      	adds	r3, r6, #4
 80059fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059fe:	6838      	ldr	r0, [r7, #0]
 8005a00:	f003 fa8a 	bl	8008f18 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2101      	movs	r1, #1
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f003 fb07 	bl	800901e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	603b      	str	r3, [r7, #0]
 8005a16:	687e      	ldr	r6, [r7, #4]
 8005a18:	466d      	mov	r5, sp
 8005a1a:	f106 0410 	add.w	r4, r6, #16
 8005a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a2e:	1d33      	adds	r3, r6, #4
 8005a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a32:	6838      	ldr	r0, [r7, #0]
 8005a34:	f003 fc6e 	bl	8009314 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a4a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005a4a:	b590      	push	{r4, r7, lr}
 8005a4c:	b089      	sub	sp, #36	; 0x24
 8005a4e:	af04      	add	r7, sp, #16
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	4608      	mov	r0, r1
 8005a54:	4611      	mov	r1, r2
 8005a56:	461a      	mov	r2, r3
 8005a58:	4603      	mov	r3, r0
 8005a5a:	70fb      	strb	r3, [r7, #3]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	70bb      	strb	r3, [r7, #2]
 8005a60:	4613      	mov	r3, r2
 8005a62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <HAL_HCD_HC_Init+0x28>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e076      	b.n	8005b60 <HAL_HCD_HC_Init+0x116>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	212c      	movs	r1, #44	; 0x2c
 8005a80:	fb01 f303 	mul.w	r3, r1, r3
 8005a84:	4413      	add	r3, r2
 8005a86:	333d      	adds	r3, #61	; 0x3d
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	212c      	movs	r1, #44	; 0x2c
 8005a92:	fb01 f303 	mul.w	r3, r1, r3
 8005a96:	4413      	add	r3, r2
 8005a98:	3338      	adds	r3, #56	; 0x38
 8005a9a:	787a      	ldrb	r2, [r7, #1]
 8005a9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	212c      	movs	r1, #44	; 0x2c
 8005aa4:	fb01 f303 	mul.w	r3, r1, r3
 8005aa8:	4413      	add	r3, r2
 8005aaa:	3340      	adds	r3, #64	; 0x40
 8005aac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005aae:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	212c      	movs	r1, #44	; 0x2c
 8005ab6:	fb01 f303 	mul.w	r3, r1, r3
 8005aba:	4413      	add	r3, r2
 8005abc:	3339      	adds	r3, #57	; 0x39
 8005abe:	78fa      	ldrb	r2, [r7, #3]
 8005ac0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005ac2:	78fb      	ldrb	r3, [r7, #3]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	212c      	movs	r1, #44	; 0x2c
 8005ac8:	fb01 f303 	mul.w	r3, r1, r3
 8005acc:	4413      	add	r3, r2
 8005ace:	333f      	adds	r3, #63	; 0x3f
 8005ad0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005ad4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005ad6:	78fb      	ldrb	r3, [r7, #3]
 8005ad8:	78ba      	ldrb	r2, [r7, #2]
 8005ada:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ade:	b2d0      	uxtb	r0, r2
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	212c      	movs	r1, #44	; 0x2c
 8005ae4:	fb01 f303 	mul.w	r3, r1, r3
 8005ae8:	4413      	add	r3, r2
 8005aea:	333a      	adds	r3, #58	; 0x3a
 8005aec:	4602      	mov	r2, r0
 8005aee:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005af0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	da09      	bge.n	8005b0c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005af8:	78fb      	ldrb	r3, [r7, #3]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	212c      	movs	r1, #44	; 0x2c
 8005afe:	fb01 f303 	mul.w	r3, r1, r3
 8005b02:	4413      	add	r3, r2
 8005b04:	333b      	adds	r3, #59	; 0x3b
 8005b06:	2201      	movs	r2, #1
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	e008      	b.n	8005b1e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005b0c:	78fb      	ldrb	r3, [r7, #3]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	212c      	movs	r1, #44	; 0x2c
 8005b12:	fb01 f303 	mul.w	r3, r1, r3
 8005b16:	4413      	add	r3, r2
 8005b18:	333b      	adds	r3, #59	; 0x3b
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005b1e:	78fb      	ldrb	r3, [r7, #3]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	212c      	movs	r1, #44	; 0x2c
 8005b24:	fb01 f303 	mul.w	r3, r1, r3
 8005b28:	4413      	add	r3, r2
 8005b2a:	333c      	adds	r3, #60	; 0x3c
 8005b2c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005b30:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	787c      	ldrb	r4, [r7, #1]
 8005b38:	78ba      	ldrb	r2, [r7, #2]
 8005b3a:	78f9      	ldrb	r1, [r7, #3]
 8005b3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b3e:	9302      	str	r3, [sp, #8]
 8005b40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	4623      	mov	r3, r4
 8005b4e:	f003 fd5b 	bl	8009608 <USB_HC_Init>
 8005b52:	4603      	mov	r3, r0
 8005b54:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd90      	pop	{r4, r7, pc}

08005b68 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_HCD_HC_Halt+0x1e>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e00f      	b.n	8005ba6 <HAL_HCD_HC_Halt+0x3e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	78fa      	ldrb	r2, [r7, #3]
 8005b94:	4611      	mov	r1, r2
 8005b96:	4618      	mov	r0, r3
 8005b98:	f003 ff97 	bl	8009aca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	4608      	mov	r0, r1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	70fb      	strb	r3, [r7, #3]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	70bb      	strb	r3, [r7, #2]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	212c      	movs	r1, #44	; 0x2c
 8005bd0:	fb01 f303 	mul.w	r3, r1, r3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	333b      	adds	r3, #59	; 0x3b
 8005bd8:	78ba      	ldrb	r2, [r7, #2]
 8005bda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	212c      	movs	r1, #44	; 0x2c
 8005be2:	fb01 f303 	mul.w	r3, r1, r3
 8005be6:	4413      	add	r3, r2
 8005be8:	333f      	adds	r3, #63	; 0x3f
 8005bea:	787a      	ldrb	r2, [r7, #1]
 8005bec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005bee:	7c3b      	ldrb	r3, [r7, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d112      	bne.n	8005c1a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	212c      	movs	r1, #44	; 0x2c
 8005bfa:	fb01 f303 	mul.w	r3, r1, r3
 8005bfe:	4413      	add	r3, r2
 8005c00:	3342      	adds	r3, #66	; 0x42
 8005c02:	2203      	movs	r2, #3
 8005c04:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005c06:	78fb      	ldrb	r3, [r7, #3]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	212c      	movs	r1, #44	; 0x2c
 8005c0c:	fb01 f303 	mul.w	r3, r1, r3
 8005c10:	4413      	add	r3, r2
 8005c12:	333d      	adds	r3, #61	; 0x3d
 8005c14:	7f3a      	ldrb	r2, [r7, #28]
 8005c16:	701a      	strb	r2, [r3, #0]
 8005c18:	e008      	b.n	8005c2c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	212c      	movs	r1, #44	; 0x2c
 8005c20:	fb01 f303 	mul.w	r3, r1, r3
 8005c24:	4413      	add	r3, r2
 8005c26:	3342      	adds	r3, #66	; 0x42
 8005c28:	2202      	movs	r2, #2
 8005c2a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005c2c:	787b      	ldrb	r3, [r7, #1]
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	f200 80c6 	bhi.w	8005dc0 <HAL_HCD_HC_SubmitRequest+0x210>
 8005c34:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8005c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3a:	bf00      	nop
 8005c3c:	08005c4d 	.word	0x08005c4d
 8005c40:	08005dad 	.word	0x08005dad
 8005c44:	08005cb1 	.word	0x08005cb1
 8005c48:	08005d2f 	.word	0x08005d2f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005c4c:	7c3b      	ldrb	r3, [r7, #16]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	f040 80b8 	bne.w	8005dc4 <HAL_HCD_HC_SubmitRequest+0x214>
 8005c54:	78bb      	ldrb	r3, [r7, #2]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f040 80b4 	bne.w	8005dc4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005c5c:	8b3b      	ldrh	r3, [r7, #24]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d108      	bne.n	8005c74 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	212c      	movs	r1, #44	; 0x2c
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3355      	adds	r3, #85	; 0x55
 8005c70:	2201      	movs	r2, #1
 8005c72:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	212c      	movs	r1, #44	; 0x2c
 8005c7a:	fb01 f303 	mul.w	r3, r1, r3
 8005c7e:	4413      	add	r3, r2
 8005c80:	3355      	adds	r3, #85	; 0x55
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	212c      	movs	r1, #44	; 0x2c
 8005c8e:	fb01 f303 	mul.w	r3, r1, r3
 8005c92:	4413      	add	r3, r2
 8005c94:	3342      	adds	r3, #66	; 0x42
 8005c96:	2200      	movs	r2, #0
 8005c98:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005c9a:	e093      	b.n	8005dc4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c9c:	78fb      	ldrb	r3, [r7, #3]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	212c      	movs	r1, #44	; 0x2c
 8005ca2:	fb01 f303 	mul.w	r3, r1, r3
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3342      	adds	r3, #66	; 0x42
 8005caa:	2202      	movs	r2, #2
 8005cac:	701a      	strb	r2, [r3, #0]
      break;
 8005cae:	e089      	b.n	8005dc4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005cb0:	78bb      	ldrb	r3, [r7, #2]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d11d      	bne.n	8005cf2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005cb6:	78fb      	ldrb	r3, [r7, #3]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	212c      	movs	r1, #44	; 0x2c
 8005cbc:	fb01 f303 	mul.w	r3, r1, r3
 8005cc0:	4413      	add	r3, r2
 8005cc2:	3355      	adds	r3, #85	; 0x55
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d109      	bne.n	8005cde <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005cca:	78fb      	ldrb	r3, [r7, #3]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	212c      	movs	r1, #44	; 0x2c
 8005cd0:	fb01 f303 	mul.w	r3, r1, r3
 8005cd4:	4413      	add	r3, r2
 8005cd6:	3342      	adds	r3, #66	; 0x42
 8005cd8:	2200      	movs	r2, #0
 8005cda:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005cdc:	e073      	b.n	8005dc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005cde:	78fb      	ldrb	r3, [r7, #3]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	212c      	movs	r1, #44	; 0x2c
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	4413      	add	r3, r2
 8005cea:	3342      	adds	r3, #66	; 0x42
 8005cec:	2202      	movs	r2, #2
 8005cee:	701a      	strb	r2, [r3, #0]
      break;
 8005cf0:	e069      	b.n	8005dc6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005cf2:	78fb      	ldrb	r3, [r7, #3]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	212c      	movs	r1, #44	; 0x2c
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	3354      	adds	r3, #84	; 0x54
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d109      	bne.n	8005d1a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d06:	78fb      	ldrb	r3, [r7, #3]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	212c      	movs	r1, #44	; 0x2c
 8005d0c:	fb01 f303 	mul.w	r3, r1, r3
 8005d10:	4413      	add	r3, r2
 8005d12:	3342      	adds	r3, #66	; 0x42
 8005d14:	2200      	movs	r2, #0
 8005d16:	701a      	strb	r2, [r3, #0]
      break;
 8005d18:	e055      	b.n	8005dc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005d1a:	78fb      	ldrb	r3, [r7, #3]
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	212c      	movs	r1, #44	; 0x2c
 8005d20:	fb01 f303 	mul.w	r3, r1, r3
 8005d24:	4413      	add	r3, r2
 8005d26:	3342      	adds	r3, #66	; 0x42
 8005d28:	2202      	movs	r2, #2
 8005d2a:	701a      	strb	r2, [r3, #0]
      break;
 8005d2c:	e04b      	b.n	8005dc6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005d2e:	78bb      	ldrb	r3, [r7, #2]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d11d      	bne.n	8005d70 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	212c      	movs	r1, #44	; 0x2c
 8005d3a:	fb01 f303 	mul.w	r3, r1, r3
 8005d3e:	4413      	add	r3, r2
 8005d40:	3355      	adds	r3, #85	; 0x55
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d109      	bne.n	8005d5c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	212c      	movs	r1, #44	; 0x2c
 8005d4e:	fb01 f303 	mul.w	r3, r1, r3
 8005d52:	4413      	add	r3, r2
 8005d54:	3342      	adds	r3, #66	; 0x42
 8005d56:	2200      	movs	r2, #0
 8005d58:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005d5a:	e034      	b.n	8005dc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	212c      	movs	r1, #44	; 0x2c
 8005d62:	fb01 f303 	mul.w	r3, r1, r3
 8005d66:	4413      	add	r3, r2
 8005d68:	3342      	adds	r3, #66	; 0x42
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	701a      	strb	r2, [r3, #0]
      break;
 8005d6e:	e02a      	b.n	8005dc6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	212c      	movs	r1, #44	; 0x2c
 8005d76:	fb01 f303 	mul.w	r3, r1, r3
 8005d7a:	4413      	add	r3, r2
 8005d7c:	3354      	adds	r3, #84	; 0x54
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d109      	bne.n	8005d98 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	212c      	movs	r1, #44	; 0x2c
 8005d8a:	fb01 f303 	mul.w	r3, r1, r3
 8005d8e:	4413      	add	r3, r2
 8005d90:	3342      	adds	r3, #66	; 0x42
 8005d92:	2200      	movs	r2, #0
 8005d94:	701a      	strb	r2, [r3, #0]
      break;
 8005d96:	e016      	b.n	8005dc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	212c      	movs	r1, #44	; 0x2c
 8005d9e:	fb01 f303 	mul.w	r3, r1, r3
 8005da2:	4413      	add	r3, r2
 8005da4:	3342      	adds	r3, #66	; 0x42
 8005da6:	2202      	movs	r2, #2
 8005da8:	701a      	strb	r2, [r3, #0]
      break;
 8005daa:	e00c      	b.n	8005dc6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	212c      	movs	r1, #44	; 0x2c
 8005db2:	fb01 f303 	mul.w	r3, r1, r3
 8005db6:	4413      	add	r3, r2
 8005db8:	3342      	adds	r3, #66	; 0x42
 8005dba:	2200      	movs	r2, #0
 8005dbc:	701a      	strb	r2, [r3, #0]
      break;
 8005dbe:	e002      	b.n	8005dc6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005dc0:	bf00      	nop
 8005dc2:	e000      	b.n	8005dc6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005dc4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	212c      	movs	r1, #44	; 0x2c
 8005dcc:	fb01 f303 	mul.w	r3, r1, r3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	3344      	adds	r3, #68	; 0x44
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	8b3a      	ldrh	r2, [r7, #24]
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	202c      	movs	r0, #44	; 0x2c
 8005de0:	fb00 f303 	mul.w	r3, r0, r3
 8005de4:	440b      	add	r3, r1
 8005de6:	334c      	adds	r3, #76	; 0x4c
 8005de8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	212c      	movs	r1, #44	; 0x2c
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	4413      	add	r3, r2
 8005df6:	3360      	adds	r3, #96	; 0x60
 8005df8:	2200      	movs	r2, #0
 8005dfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	212c      	movs	r1, #44	; 0x2c
 8005e02:	fb01 f303 	mul.w	r3, r1, r3
 8005e06:	4413      	add	r3, r2
 8005e08:	3350      	adds	r3, #80	; 0x50
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005e0e:	78fb      	ldrb	r3, [r7, #3]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	212c      	movs	r1, #44	; 0x2c
 8005e14:	fb01 f303 	mul.w	r3, r1, r3
 8005e18:	4413      	add	r3, r2
 8005e1a:	3339      	adds	r3, #57	; 0x39
 8005e1c:	78fa      	ldrb	r2, [r7, #3]
 8005e1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	212c      	movs	r1, #44	; 0x2c
 8005e26:	fb01 f303 	mul.w	r3, r1, r3
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3361      	adds	r3, #97	; 0x61
 8005e2e:	2200      	movs	r2, #0
 8005e30:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	222c      	movs	r2, #44	; 0x2c
 8005e3a:	fb02 f303 	mul.w	r3, r2, r3
 8005e3e:	3338      	adds	r3, #56	; 0x38
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	18d1      	adds	r1, r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f003 fcea 	bl	8009824 <USB_HC_StartXfer>
 8005e50:	4603      	mov	r3, r0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop

08005e5c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f003 fa0d 	bl	8009292 <USB_GetMode>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	f040 80f6 	bne.w	800606c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f003 f9f1 	bl	800926c <USB_ReadInterrupts>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 80ec 	beq.w	800606a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f003 f9e8 	bl	800926c <USB_ReadInterrupts>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ea2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ea6:	d104      	bne.n	8005eb2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005eb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f003 f9d8 	bl	800926c <USB_ReadInterrupts>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec6:	d104      	bne.n	8005ed2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ed0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f003 f9c8 	bl	800926c <USB_ReadInterrupts>
 8005edc:	4603      	mov	r3, r0
 8005ede:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ee2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ee6:	d104      	bne.n	8005ef2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005ef0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f003 f9b8 	bl	800926c <USB_ReadInterrupts>
 8005efc:	4603      	mov	r3, r0
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d103      	bne.n	8005f0e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f003 f9aa 	bl	800926c <USB_ReadInterrupts>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f22:	d11c      	bne.n	8005f5e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005f2c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10f      	bne.n	8005f5e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005f3e:	2110      	movs	r1, #16
 8005f40:	6938      	ldr	r0, [r7, #16]
 8005f42:	f003 f8b9 	bl	80090b8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005f46:	6938      	ldr	r0, [r7, #16]
 8005f48:	f003 f8da 	bl	8009100 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2101      	movs	r1, #1
 8005f52:	4618      	mov	r0, r3
 8005f54:	f003 fa92 	bl	800947c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f012 fc6d 	bl	8018838 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f003 f982 	bl	800926c <USB_ReadInterrupts>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f72:	d102      	bne.n	8005f7a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 fa03 	bl	8007380 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f003 f974 	bl	800926c <USB_ReadInterrupts>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b08      	cmp	r3, #8
 8005f8c:	d106      	bne.n	8005f9c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f012 fc36 	bl	8018800 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2208      	movs	r2, #8
 8005f9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f003 f963 	bl	800926c <USB_ReadInterrupts>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	2b10      	cmp	r3, #16
 8005fae:	d101      	bne.n	8005fb4 <HAL_HCD_IRQHandler+0x158>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e000      	b.n	8005fb6 <HAL_HCD_IRQHandler+0x15a>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d012      	beq.n	8005fe0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	699a      	ldr	r2, [r3, #24]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0210 	bic.w	r2, r2, #16
 8005fc8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f001 f906 	bl	80071dc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699a      	ldr	r2, [r3, #24]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0210 	orr.w	r2, r2, #16
 8005fde:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f003 f941 	bl	800926c <USB_ReadInterrupts>
 8005fea:	4603      	mov	r3, r0
 8005fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ff4:	d13a      	bne.n	800606c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f003 fd54 	bl	8009aa8 <USB_HC_ReadInterrupt>
 8006000:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]
 8006006:	e025      	b.n	8006054 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	fa22 f303 	lsr.w	r3, r2, r3
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d018      	beq.n	800604e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800602e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006032:	d106      	bne.n	8006042 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	b2db      	uxtb	r3, r3
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f8ab 	bl	8006196 <HCD_HC_IN_IRQHandler>
 8006040:	e005      	b.n	800604e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fcc6 	bl	80069da <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	3301      	adds	r3, #1
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	429a      	cmp	r2, r3
 800605c:	d3d4      	bcc.n	8006008 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006066:	615a      	str	r2, [r3, #20]
 8006068:	e000      	b.n	800606c <HAL_HCD_IRQHandler+0x210>
      return;
 800606a:	bf00      	nop
    }
  }
}
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006080:	2b01      	cmp	r3, #1
 8006082:	d101      	bne.n	8006088 <HAL_HCD_Start+0x16>
 8006084:	2302      	movs	r3, #2
 8006086:	e013      	b.n	80060b0 <HAL_HCD_Start+0x3e>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2101      	movs	r1, #1
 8006096:	4618      	mov	r0, r3
 8006098:	f003 fa54 	bl	8009544 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f002 ff9a 	bl	8008fda <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d101      	bne.n	80060ce <HAL_HCD_Stop+0x16>
 80060ca:	2302      	movs	r3, #2
 80060cc:	e00d      	b.n	80060ea <HAL_HCD_Stop+0x32>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4618      	mov	r0, r3
 80060dc:	f003 fe4e 	bl	8009d7c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b082      	sub	sp, #8
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4618      	mov	r0, r3
 8006100:	f003 f9f6 	bl	80094f0 <USB_ResetPort>
 8006104:	4603      	mov	r3, r0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	212c      	movs	r1, #44	; 0x2c
 8006120:	fb01 f303 	mul.w	r3, r1, r3
 8006124:	4413      	add	r3, r2
 8006126:	3360      	adds	r3, #96	; 0x60
 8006128:	781b      	ldrb	r3, [r3, #0]
}
 800612a:	4618      	mov	r0, r3
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	460b      	mov	r3, r1
 8006140:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006142:	78fb      	ldrb	r3, [r7, #3]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	212c      	movs	r1, #44	; 0x2c
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	4413      	add	r3, r2
 800614e:	3350      	adds	r3, #80	; 0x50
 8006150:	681b      	ldr	r3, [r3, #0]
}
 8006152:	4618      	mov	r0, r3
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b082      	sub	sp, #8
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f003 fa3a 	bl	80095e4 <USB_GetCurrentFrame>
 8006170:	4603      	mov	r3, r0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b082      	sub	sp, #8
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f003 fa15 	bl	80095b6 <USB_GetHostSpeed>
 800618c:	4603      	mov	r3, r0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b086      	sub	sp, #24
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	460b      	mov	r3, r1
 80061a0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	d119      	bne.n	80061fa <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d2:	461a      	mov	r2, r3
 80061d4:	2304      	movs	r3, #4
 80061d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	0151      	lsls	r1, r2, #5
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	440a      	add	r2, r1
 80061ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f2:	f043 0302 	orr.w	r3, r3, #2
 80061f6:	60d3      	str	r3, [r2, #12]
 80061f8:	e101      	b.n	80063fe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	4413      	add	r3, r2
 8006202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006210:	d12b      	bne.n	800626a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	4413      	add	r3, r2
 800621a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621e:	461a      	mov	r2, r3
 8006220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006224:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	212c      	movs	r1, #44	; 0x2c
 800622c:	fb01 f303 	mul.w	r3, r1, r3
 8006230:	4413      	add	r3, r2
 8006232:	3361      	adds	r3, #97	; 0x61
 8006234:	2207      	movs	r2, #7
 8006236:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	4413      	add	r3, r2
 8006240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	0151      	lsls	r1, r2, #5
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	440a      	add	r2, r1
 800624e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006252:	f043 0302 	orr.w	r3, r3, #2
 8006256:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	b2d2      	uxtb	r2, r2
 8006260:	4611      	mov	r1, r2
 8006262:	4618      	mov	r0, r3
 8006264:	f003 fc31 	bl	8009aca <USB_HC_Halt>
 8006268:	e0c9      	b.n	80063fe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	4413      	add	r3, r2
 8006272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b20      	cmp	r3, #32
 800627e:	d109      	bne.n	8006294 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	4413      	add	r3, r2
 8006288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628c:	461a      	mov	r2, r3
 800628e:	2320      	movs	r3, #32
 8006290:	6093      	str	r3, [r2, #8]
 8006292:	e0b4      	b.n	80063fe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	4413      	add	r3, r2
 800629c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d133      	bne.n	8006312 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	0151      	lsls	r1, r2, #5
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	440a      	add	r2, r1
 80062c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062c4:	f043 0302 	orr.w	r3, r3, #2
 80062c8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	212c      	movs	r1, #44	; 0x2c
 80062d0:	fb01 f303 	mul.w	r3, r1, r3
 80062d4:	4413      	add	r3, r2
 80062d6:	3361      	adds	r3, #97	; 0x61
 80062d8:	2205      	movs	r2, #5
 80062da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e8:	461a      	mov	r2, r3
 80062ea:	2310      	movs	r3, #16
 80062ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fa:	461a      	mov	r2, r3
 80062fc:	2308      	movs	r3, #8
 80062fe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	4611      	mov	r1, r2
 800630a:	4618      	mov	r0, r3
 800630c:	f003 fbdd 	bl	8009aca <USB_HC_Halt>
 8006310:	e075      	b.n	80063fe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4413      	add	r3, r2
 800631a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006328:	d134      	bne.n	8006394 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	4413      	add	r3, r2
 8006332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	0151      	lsls	r1, r2, #5
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	440a      	add	r2, r1
 8006340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006344:	f043 0302 	orr.w	r3, r3, #2
 8006348:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	212c      	movs	r1, #44	; 0x2c
 8006350:	fb01 f303 	mul.w	r3, r1, r3
 8006354:	4413      	add	r3, r2
 8006356:	3361      	adds	r3, #97	; 0x61
 8006358:	2208      	movs	r2, #8
 800635a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	4413      	add	r3, r2
 8006364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006368:	461a      	mov	r2, r3
 800636a:	2310      	movs	r3, #16
 800636c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	4413      	add	r3, r2
 8006376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637a:	461a      	mov	r2, r3
 800637c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006380:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	4611      	mov	r1, r2
 800638c:	4618      	mov	r0, r3
 800638e:	f003 fb9c 	bl	8009aca <USB_HC_Halt>
 8006392:	e034      	b.n	80063fe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	4413      	add	r3, r2
 800639c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a6:	2b80      	cmp	r3, #128	; 0x80
 80063a8:	d129      	bne.n	80063fe <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	0151      	lsls	r1, r2, #5
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	440a      	add	r2, r1
 80063c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063c4:	f043 0302 	orr.w	r3, r3, #2
 80063c8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	212c      	movs	r1, #44	; 0x2c
 80063d0:	fb01 f303 	mul.w	r3, r1, r3
 80063d4:	4413      	add	r3, r2
 80063d6:	3361      	adds	r3, #97	; 0x61
 80063d8:	2206      	movs	r2, #6
 80063da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	4611      	mov	r1, r2
 80063e6:	4618      	mov	r0, r3
 80063e8:	f003 fb6f 	bl	8009aca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f8:	461a      	mov	r2, r3
 80063fa:	2380      	movs	r3, #128	; 0x80
 80063fc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	4413      	add	r3, r2
 8006406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006414:	d122      	bne.n	800645c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	4413      	add	r3, r2
 800641e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	0151      	lsls	r1, r2, #5
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	440a      	add	r2, r1
 800642c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006430:	f043 0302 	orr.w	r3, r3, #2
 8006434:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	4611      	mov	r1, r2
 8006440:	4618      	mov	r0, r3
 8006442:	f003 fb42 	bl	8009aca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	4413      	add	r3, r2
 800644e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006452:	461a      	mov	r2, r3
 8006454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006458:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800645a:	e2ba      	b.n	80069d2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	4413      	add	r3, r2
 8006464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b01      	cmp	r3, #1
 8006470:	f040 811b 	bne.w	80066aa <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d019      	beq.n	80064b0 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	212c      	movs	r1, #44	; 0x2c
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	4413      	add	r3, r2
 8006488:	3348      	adds	r3, #72	; 0x48
 800648a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	0159      	lsls	r1, r3, #5
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	440b      	add	r3, r1
 8006494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800649e:	1ad2      	subs	r2, r2, r3
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	202c      	movs	r0, #44	; 0x2c
 80064a6:	fb00 f303 	mul.w	r3, r0, r3
 80064aa:	440b      	add	r3, r1
 80064ac:	3350      	adds	r3, #80	; 0x50
 80064ae:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	212c      	movs	r1, #44	; 0x2c
 80064b6:	fb01 f303 	mul.w	r3, r1, r3
 80064ba:	4413      	add	r3, r2
 80064bc:	3361      	adds	r3, #97	; 0x61
 80064be:	2201      	movs	r2, #1
 80064c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	212c      	movs	r1, #44	; 0x2c
 80064c8:	fb01 f303 	mul.w	r3, r1, r3
 80064cc:	4413      	add	r3, r2
 80064ce:	335c      	adds	r3, #92	; 0x5c
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e0:	461a      	mov	r2, r3
 80064e2:	2301      	movs	r3, #1
 80064e4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	212c      	movs	r1, #44	; 0x2c
 80064ec:	fb01 f303 	mul.w	r3, r1, r3
 80064f0:	4413      	add	r3, r2
 80064f2:	333f      	adds	r3, #63	; 0x3f
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d009      	beq.n	800650e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	212c      	movs	r1, #44	; 0x2c
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	4413      	add	r3, r2
 8006506:	333f      	adds	r3, #63	; 0x3f
 8006508:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800650a:	2b02      	cmp	r3, #2
 800650c:	d121      	bne.n	8006552 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	4413      	add	r3, r2
 8006516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	0151      	lsls	r1, r2, #5
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	440a      	add	r2, r1
 8006524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006528:	f043 0302 	orr.w	r3, r3, #2
 800652c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	4611      	mov	r1, r2
 8006538:	4618      	mov	r0, r3
 800653a:	f003 fac6 	bl	8009aca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	4413      	add	r3, r2
 8006546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654a:	461a      	mov	r2, r3
 800654c:	2310      	movs	r3, #16
 800654e:	6093      	str	r3, [r2, #8]
 8006550:	e066      	b.n	8006620 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	212c      	movs	r1, #44	; 0x2c
 8006558:	fb01 f303 	mul.w	r3, r1, r3
 800655c:	4413      	add	r3, r2
 800655e:	333f      	adds	r3, #63	; 0x3f
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2b03      	cmp	r3, #3
 8006564:	d127      	bne.n	80065b6 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	4413      	add	r3, r2
 800656e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	0151      	lsls	r1, r2, #5
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	440a      	add	r2, r1
 800657c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006580:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006584:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	212c      	movs	r1, #44	; 0x2c
 800658c:	fb01 f303 	mul.w	r3, r1, r3
 8006590:	4413      	add	r3, r2
 8006592:	3360      	adds	r3, #96	; 0x60
 8006594:	2201      	movs	r2, #1
 8006596:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	b2d9      	uxtb	r1, r3
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	202c      	movs	r0, #44	; 0x2c
 80065a2:	fb00 f303 	mul.w	r3, r0, r3
 80065a6:	4413      	add	r3, r2
 80065a8:	3360      	adds	r3, #96	; 0x60
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f012 f950 	bl	8018854 <HAL_HCD_HC_NotifyURBChange_Callback>
 80065b4:	e034      	b.n	8006620 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	212c      	movs	r1, #44	; 0x2c
 80065bc:	fb01 f303 	mul.w	r3, r1, r3
 80065c0:	4413      	add	r3, r2
 80065c2:	333f      	adds	r3, #63	; 0x3f
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d12a      	bne.n	8006620 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	212c      	movs	r1, #44	; 0x2c
 80065d0:	fb01 f303 	mul.w	r3, r1, r3
 80065d4:	4413      	add	r3, r2
 80065d6:	3360      	adds	r3, #96	; 0x60
 80065d8:	2201      	movs	r2, #1
 80065da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	212c      	movs	r1, #44	; 0x2c
 80065e2:	fb01 f303 	mul.w	r3, r1, r3
 80065e6:	4413      	add	r3, r2
 80065e8:	3354      	adds	r3, #84	; 0x54
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f083 0301 	eor.w	r3, r3, #1
 80065f0:	b2d8      	uxtb	r0, r3
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	212c      	movs	r1, #44	; 0x2c
 80065f8:	fb01 f303 	mul.w	r3, r1, r3
 80065fc:	4413      	add	r3, r2
 80065fe:	3354      	adds	r3, #84	; 0x54
 8006600:	4602      	mov	r2, r0
 8006602:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	b2d9      	uxtb	r1, r3
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	202c      	movs	r0, #44	; 0x2c
 800660e:	fb00 f303 	mul.w	r3, r0, r3
 8006612:	4413      	add	r3, r2
 8006614:	3360      	adds	r3, #96	; 0x60
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	461a      	mov	r2, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f012 f91a 	bl	8018854 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d12b      	bne.n	8006680 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	212c      	movs	r1, #44	; 0x2c
 800662e:	fb01 f303 	mul.w	r3, r1, r3
 8006632:	4413      	add	r3, r2
 8006634:	3348      	adds	r3, #72	; 0x48
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6879      	ldr	r1, [r7, #4]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	202c      	movs	r0, #44	; 0x2c
 800663e:	fb00 f202 	mul.w	r2, r0, r2
 8006642:	440a      	add	r2, r1
 8006644:	3240      	adds	r2, #64	; 0x40
 8006646:	8812      	ldrh	r2, [r2, #0]
 8006648:	fbb3 f3f2 	udiv	r3, r3, r2
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 81be 	beq.w	80069d2 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	212c      	movs	r1, #44	; 0x2c
 800665c:	fb01 f303 	mul.w	r3, r1, r3
 8006660:	4413      	add	r3, r2
 8006662:	3354      	adds	r3, #84	; 0x54
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	f083 0301 	eor.w	r3, r3, #1
 800666a:	b2d8      	uxtb	r0, r3
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	212c      	movs	r1, #44	; 0x2c
 8006672:	fb01 f303 	mul.w	r3, r1, r3
 8006676:	4413      	add	r3, r2
 8006678:	3354      	adds	r3, #84	; 0x54
 800667a:	4602      	mov	r2, r0
 800667c:	701a      	strb	r2, [r3, #0]
}
 800667e:	e1a8      	b.n	80069d2 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	212c      	movs	r1, #44	; 0x2c
 8006686:	fb01 f303 	mul.w	r3, r1, r3
 800668a:	4413      	add	r3, r2
 800668c:	3354      	adds	r3, #84	; 0x54
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	f083 0301 	eor.w	r3, r3, #1
 8006694:	b2d8      	uxtb	r0, r3
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	212c      	movs	r1, #44	; 0x2c
 800669c:	fb01 f303 	mul.w	r3, r1, r3
 80066a0:	4413      	add	r3, r2
 80066a2:	3354      	adds	r3, #84	; 0x54
 80066a4:	4602      	mov	r2, r0
 80066a6:	701a      	strb	r2, [r3, #0]
}
 80066a8:	e193      	b.n	80069d2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b02      	cmp	r3, #2
 80066be:	f040 8106 	bne.w	80068ce <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	0151      	lsls	r1, r2, #5
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	440a      	add	r2, r1
 80066d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066dc:	f023 0302 	bic.w	r3, r3, #2
 80066e0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	212c      	movs	r1, #44	; 0x2c
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	4413      	add	r3, r2
 80066ee:	3361      	adds	r3, #97	; 0x61
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d109      	bne.n	800670a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	212c      	movs	r1, #44	; 0x2c
 80066fc:	fb01 f303 	mul.w	r3, r1, r3
 8006700:	4413      	add	r3, r2
 8006702:	3360      	adds	r3, #96	; 0x60
 8006704:	2201      	movs	r2, #1
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	e0c9      	b.n	800689e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	212c      	movs	r1, #44	; 0x2c
 8006710:	fb01 f303 	mul.w	r3, r1, r3
 8006714:	4413      	add	r3, r2
 8006716:	3361      	adds	r3, #97	; 0x61
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	2b05      	cmp	r3, #5
 800671c:	d109      	bne.n	8006732 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	212c      	movs	r1, #44	; 0x2c
 8006724:	fb01 f303 	mul.w	r3, r1, r3
 8006728:	4413      	add	r3, r2
 800672a:	3360      	adds	r3, #96	; 0x60
 800672c:	2205      	movs	r2, #5
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	e0b5      	b.n	800689e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	212c      	movs	r1, #44	; 0x2c
 8006738:	fb01 f303 	mul.w	r3, r1, r3
 800673c:	4413      	add	r3, r2
 800673e:	3361      	adds	r3, #97	; 0x61
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b06      	cmp	r3, #6
 8006744:	d009      	beq.n	800675a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	212c      	movs	r1, #44	; 0x2c
 800674c:	fb01 f303 	mul.w	r3, r1, r3
 8006750:	4413      	add	r3, r2
 8006752:	3361      	adds	r3, #97	; 0x61
 8006754:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006756:	2b08      	cmp	r3, #8
 8006758:	d150      	bne.n	80067fc <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	212c      	movs	r1, #44	; 0x2c
 8006760:	fb01 f303 	mul.w	r3, r1, r3
 8006764:	4413      	add	r3, r2
 8006766:	335c      	adds	r3, #92	; 0x5c
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	202c      	movs	r0, #44	; 0x2c
 8006772:	fb00 f303 	mul.w	r3, r0, r3
 8006776:	440b      	add	r3, r1
 8006778:	335c      	adds	r3, #92	; 0x5c
 800677a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	212c      	movs	r1, #44	; 0x2c
 8006782:	fb01 f303 	mul.w	r3, r1, r3
 8006786:	4413      	add	r3, r2
 8006788:	335c      	adds	r3, #92	; 0x5c
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b02      	cmp	r3, #2
 800678e:	d912      	bls.n	80067b6 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	212c      	movs	r1, #44	; 0x2c
 8006796:	fb01 f303 	mul.w	r3, r1, r3
 800679a:	4413      	add	r3, r2
 800679c:	335c      	adds	r3, #92	; 0x5c
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	212c      	movs	r1, #44	; 0x2c
 80067a8:	fb01 f303 	mul.w	r3, r1, r3
 80067ac:	4413      	add	r3, r2
 80067ae:	3360      	adds	r3, #96	; 0x60
 80067b0:	2204      	movs	r2, #4
 80067b2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80067b4:	e073      	b.n	800689e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	212c      	movs	r1, #44	; 0x2c
 80067bc:	fb01 f303 	mul.w	r3, r1, r3
 80067c0:	4413      	add	r3, r2
 80067c2:	3360      	adds	r3, #96	; 0x60
 80067c4:	2202      	movs	r2, #2
 80067c6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067de:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067e6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f4:	461a      	mov	r2, r3
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80067fa:	e050      	b.n	800689e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	212c      	movs	r1, #44	; 0x2c
 8006802:	fb01 f303 	mul.w	r3, r1, r3
 8006806:	4413      	add	r3, r2
 8006808:	3361      	adds	r3, #97	; 0x61
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b03      	cmp	r3, #3
 800680e:	d122      	bne.n	8006856 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	212c      	movs	r1, #44	; 0x2c
 8006816:	fb01 f303 	mul.w	r3, r1, r3
 800681a:	4413      	add	r3, r2
 800681c:	3360      	adds	r3, #96	; 0x60
 800681e:	2202      	movs	r2, #2
 8006820:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	4413      	add	r3, r2
 800682a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006838:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006840:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	4413      	add	r3, r2
 800684a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684e:	461a      	mov	r2, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	e023      	b.n	800689e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	212c      	movs	r1, #44	; 0x2c
 800685c:	fb01 f303 	mul.w	r3, r1, r3
 8006860:	4413      	add	r3, r2
 8006862:	3361      	adds	r3, #97	; 0x61
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b07      	cmp	r3, #7
 8006868:	d119      	bne.n	800689e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	212c      	movs	r1, #44	; 0x2c
 8006870:	fb01 f303 	mul.w	r3, r1, r3
 8006874:	4413      	add	r3, r2
 8006876:	335c      	adds	r3, #92	; 0x5c
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	6879      	ldr	r1, [r7, #4]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	202c      	movs	r0, #44	; 0x2c
 8006882:	fb00 f303 	mul.w	r3, r0, r3
 8006886:	440b      	add	r3, r1
 8006888:	335c      	adds	r3, #92	; 0x5c
 800688a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	212c      	movs	r1, #44	; 0x2c
 8006892:	fb01 f303 	mul.w	r3, r1, r3
 8006896:	4413      	add	r3, r2
 8006898:	3360      	adds	r3, #96	; 0x60
 800689a:	2204      	movs	r2, #4
 800689c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068aa:	461a      	mov	r2, r3
 80068ac:	2302      	movs	r3, #2
 80068ae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	b2d9      	uxtb	r1, r3
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	202c      	movs	r0, #44	; 0x2c
 80068ba:	fb00 f303 	mul.w	r3, r0, r3
 80068be:	4413      	add	r3, r2
 80068c0:	3360      	adds	r3, #96	; 0x60
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	461a      	mov	r2, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f011 ffc4 	bl	8018854 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80068cc:	e081      	b.n	80069d2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f003 0310 	and.w	r3, r3, #16
 80068e0:	2b10      	cmp	r3, #16
 80068e2:	d176      	bne.n	80069d2 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	212c      	movs	r1, #44	; 0x2c
 80068ea:	fb01 f303 	mul.w	r3, r1, r3
 80068ee:	4413      	add	r3, r2
 80068f0:	333f      	adds	r3, #63	; 0x3f
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d121      	bne.n	800693c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	212c      	movs	r1, #44	; 0x2c
 80068fe:	fb01 f303 	mul.w	r3, r1, r3
 8006902:	4413      	add	r3, r2
 8006904:	335c      	adds	r3, #92	; 0x5c
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	4413      	add	r3, r2
 8006912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	0151      	lsls	r1, r2, #5
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	440a      	add	r2, r1
 8006920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006924:	f043 0302 	orr.w	r3, r3, #2
 8006928:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	4611      	mov	r1, r2
 8006934:	4618      	mov	r0, r3
 8006936:	f003 f8c8 	bl	8009aca <USB_HC_Halt>
 800693a:	e041      	b.n	80069c0 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	212c      	movs	r1, #44	; 0x2c
 8006942:	fb01 f303 	mul.w	r3, r1, r3
 8006946:	4413      	add	r3, r2
 8006948:	333f      	adds	r3, #63	; 0x3f
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d009      	beq.n	8006964 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	212c      	movs	r1, #44	; 0x2c
 8006956:	fb01 f303 	mul.w	r3, r1, r3
 800695a:	4413      	add	r3, r2
 800695c:	333f      	adds	r3, #63	; 0x3f
 800695e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006960:	2b02      	cmp	r3, #2
 8006962:	d12d      	bne.n	80069c0 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	212c      	movs	r1, #44	; 0x2c
 800696a:	fb01 f303 	mul.w	r3, r1, r3
 800696e:	4413      	add	r3, r2
 8006970:	335c      	adds	r3, #92	; 0x5c
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d120      	bne.n	80069c0 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	212c      	movs	r1, #44	; 0x2c
 8006984:	fb01 f303 	mul.w	r3, r1, r3
 8006988:	4413      	add	r3, r2
 800698a:	3361      	adds	r3, #97	; 0x61
 800698c:	2203      	movs	r2, #3
 800698e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	4413      	add	r3, r2
 8006998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069aa:	f043 0302 	orr.w	r3, r3, #2
 80069ae:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	4611      	mov	r1, r2
 80069ba:	4618      	mov	r0, r3
 80069bc:	f003 f885 	bl	8009aca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069cc:	461a      	mov	r2, r3
 80069ce:	2310      	movs	r3, #16
 80069d0:	6093      	str	r3, [r2, #8]
}
 80069d2:	bf00      	nop
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b088      	sub	sp, #32
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	460b      	mov	r3, r1
 80069e4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 0304 	and.w	r3, r3, #4
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	d119      	bne.n	8006a3e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a16:	461a      	mov	r2, r3
 8006a18:	2304      	movs	r3, #4
 8006a1a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	0151      	lsls	r1, r2, #5
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	440a      	add	r2, r1
 8006a32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a36:	f043 0302 	orr.w	r3, r3, #2
 8006a3a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006a3c:	e3ca      	b.n	80071d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	d13e      	bne.n	8006ad2 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a60:	461a      	mov	r2, r3
 8006a62:	2320      	movs	r3, #32
 8006a64:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	212c      	movs	r1, #44	; 0x2c
 8006a6c:	fb01 f303 	mul.w	r3, r1, r3
 8006a70:	4413      	add	r3, r2
 8006a72:	333d      	adds	r3, #61	; 0x3d
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	f040 83ac 	bne.w	80071d4 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	212c      	movs	r1, #44	; 0x2c
 8006a82:	fb01 f303 	mul.w	r3, r1, r3
 8006a86:	4413      	add	r3, r2
 8006a88:	333d      	adds	r3, #61	; 0x3d
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	212c      	movs	r1, #44	; 0x2c
 8006a94:	fb01 f303 	mul.w	r3, r1, r3
 8006a98:	4413      	add	r3, r2
 8006a9a:	3360      	adds	r3, #96	; 0x60
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	0151      	lsls	r1, r2, #5
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	440a      	add	r2, r1
 8006ab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aba:	f043 0302 	orr.w	r3, r3, #2
 8006abe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	b2d2      	uxtb	r2, r2
 8006ac8:	4611      	mov	r1, r2
 8006aca:	4618      	mov	r0, r3
 8006acc:	f002 fffd 	bl	8009aca <USB_HC_Halt>
}
 8006ad0:	e380      	b.n	80071d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae8:	d122      	bne.n	8006b30 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	0151      	lsls	r1, r2, #5
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	440a      	add	r2, r1
 8006b00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b04:	f043 0302 	orr.w	r3, r3, #2
 8006b08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	4611      	mov	r1, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f002 ffd8 	bl	8009aca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b26:	461a      	mov	r2, r3
 8006b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b2c:	6093      	str	r3, [r2, #8]
}
 8006b2e:	e351      	b.n	80071d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d150      	bne.n	8006be8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	212c      	movs	r1, #44	; 0x2c
 8006b4c:	fb01 f303 	mul.w	r3, r1, r3
 8006b50:	4413      	add	r3, r2
 8006b52:	335c      	adds	r3, #92	; 0x5c
 8006b54:	2200      	movs	r2, #0
 8006b56:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6a:	2b40      	cmp	r3, #64	; 0x40
 8006b6c:	d111      	bne.n	8006b92 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	212c      	movs	r1, #44	; 0x2c
 8006b74:	fb01 f303 	mul.w	r3, r1, r3
 8006b78:	4413      	add	r3, r2
 8006b7a:	333d      	adds	r3, #61	; 0x3d
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	2340      	movs	r3, #64	; 0x40
 8006b90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	0151      	lsls	r1, r2, #5
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	440a      	add	r2, r1
 8006ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bac:	f043 0302 	orr.w	r3, r3, #2
 8006bb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	b2d2      	uxtb	r2, r2
 8006bba:	4611      	mov	r1, r2
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f002 ff84 	bl	8009aca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bce:	461a      	mov	r2, r3
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	212c      	movs	r1, #44	; 0x2c
 8006bda:	fb01 f303 	mul.w	r3, r1, r3
 8006bde:	4413      	add	r3, r2
 8006be0:	3361      	adds	r3, #97	; 0x61
 8006be2:	2201      	movs	r2, #1
 8006be4:	701a      	strb	r2, [r3, #0]
}
 8006be6:	e2f5      	b.n	80071d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfa:	2b40      	cmp	r3, #64	; 0x40
 8006bfc:	d13c      	bne.n	8006c78 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	212c      	movs	r1, #44	; 0x2c
 8006c04:	fb01 f303 	mul.w	r3, r1, r3
 8006c08:	4413      	add	r3, r2
 8006c0a:	3361      	adds	r3, #97	; 0x61
 8006c0c:	2204      	movs	r2, #4
 8006c0e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	212c      	movs	r1, #44	; 0x2c
 8006c16:	fb01 f303 	mul.w	r3, r1, r3
 8006c1a:	4413      	add	r3, r2
 8006c1c:	333d      	adds	r3, #61	; 0x3d
 8006c1e:	2201      	movs	r2, #1
 8006c20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	212c      	movs	r1, #44	; 0x2c
 8006c28:	fb01 f303 	mul.w	r3, r1, r3
 8006c2c:	4413      	add	r3, r2
 8006c2e:	335c      	adds	r3, #92	; 0x5c
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	0151      	lsls	r1, r2, #5
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	440a      	add	r2, r1
 8006c4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c4e:	f043 0302 	orr.w	r3, r3, #2
 8006c52:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f002 ff33 	bl	8009aca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c70:	461a      	mov	r2, r3
 8006c72:	2340      	movs	r3, #64	; 0x40
 8006c74:	6093      	str	r3, [r2, #8]
}
 8006c76:	e2ad      	b.n	80071d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b08      	cmp	r3, #8
 8006c8c:	d12a      	bne.n	8006ce4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	2308      	movs	r3, #8
 8006c9e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	0151      	lsls	r1, r2, #5
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	440a      	add	r2, r1
 8006cb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cba:	f043 0302 	orr.w	r3, r3, #2
 8006cbe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	4611      	mov	r1, r2
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f002 fefd 	bl	8009aca <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	212c      	movs	r1, #44	; 0x2c
 8006cd6:	fb01 f303 	mul.w	r3, r1, r3
 8006cda:	4413      	add	r3, r2
 8006cdc:	3361      	adds	r3, #97	; 0x61
 8006cde:	2205      	movs	r2, #5
 8006ce0:	701a      	strb	r2, [r3, #0]
}
 8006ce2:	e277      	b.n	80071d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f003 0310 	and.w	r3, r3, #16
 8006cf6:	2b10      	cmp	r3, #16
 8006cf8:	d150      	bne.n	8006d9c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	212c      	movs	r1, #44	; 0x2c
 8006d00:	fb01 f303 	mul.w	r3, r1, r3
 8006d04:	4413      	add	r3, r2
 8006d06:	335c      	adds	r3, #92	; 0x5c
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	212c      	movs	r1, #44	; 0x2c
 8006d12:	fb01 f303 	mul.w	r3, r1, r3
 8006d16:	4413      	add	r3, r2
 8006d18:	3361      	adds	r3, #97	; 0x61
 8006d1a:	2203      	movs	r2, #3
 8006d1c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	212c      	movs	r1, #44	; 0x2c
 8006d24:	fb01 f303 	mul.w	r3, r1, r3
 8006d28:	4413      	add	r3, r2
 8006d2a:	333d      	adds	r3, #61	; 0x3d
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d112      	bne.n	8006d58 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	212c      	movs	r1, #44	; 0x2c
 8006d38:	fb01 f303 	mul.w	r3, r1, r3
 8006d3c:	4413      	add	r3, r2
 8006d3e:	333c      	adds	r3, #60	; 0x3c
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d108      	bne.n	8006d58 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	212c      	movs	r1, #44	; 0x2c
 8006d4c:	fb01 f303 	mul.w	r3, r1, r3
 8006d50:	4413      	add	r3, r2
 8006d52:	333d      	adds	r3, #61	; 0x3d
 8006d54:	2201      	movs	r2, #1
 8006d56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	0151      	lsls	r1, r2, #5
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d72:	f043 0302 	orr.w	r3, r3, #2
 8006d76:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	4611      	mov	r1, r2
 8006d82:	4618      	mov	r0, r3
 8006d84:	f002 fea1 	bl	8009aca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d94:	461a      	mov	r2, r3
 8006d96:	2310      	movs	r3, #16
 8006d98:	6093      	str	r3, [r2, #8]
}
 8006d9a:	e21b      	b.n	80071d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dae:	2b80      	cmp	r3, #128	; 0x80
 8006db0:	d174      	bne.n	8006e9c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d121      	bne.n	8006dfe <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	212c      	movs	r1, #44	; 0x2c
 8006dc0:	fb01 f303 	mul.w	r3, r1, r3
 8006dc4:	4413      	add	r3, r2
 8006dc6:	3361      	adds	r3, #97	; 0x61
 8006dc8:	2206      	movs	r2, #6
 8006dca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006de6:	f043 0302 	orr.w	r3, r3, #2
 8006dea:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	4611      	mov	r1, r2
 8006df6:	4618      	mov	r0, r3
 8006df8:	f002 fe67 	bl	8009aca <USB_HC_Halt>
 8006dfc:	e044      	b.n	8006e88 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	212c      	movs	r1, #44	; 0x2c
 8006e04:	fb01 f303 	mul.w	r3, r1, r3
 8006e08:	4413      	add	r3, r2
 8006e0a:	335c      	adds	r3, #92	; 0x5c
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	202c      	movs	r0, #44	; 0x2c
 8006e16:	fb00 f303 	mul.w	r3, r0, r3
 8006e1a:	440b      	add	r3, r1
 8006e1c:	335c      	adds	r3, #92	; 0x5c
 8006e1e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	212c      	movs	r1, #44	; 0x2c
 8006e26:	fb01 f303 	mul.w	r3, r1, r3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	335c      	adds	r3, #92	; 0x5c
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d920      	bls.n	8006e76 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	212c      	movs	r1, #44	; 0x2c
 8006e3a:	fb01 f303 	mul.w	r3, r1, r3
 8006e3e:	4413      	add	r3, r2
 8006e40:	335c      	adds	r3, #92	; 0x5c
 8006e42:	2200      	movs	r2, #0
 8006e44:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	212c      	movs	r1, #44	; 0x2c
 8006e4c:	fb01 f303 	mul.w	r3, r1, r3
 8006e50:	4413      	add	r3, r2
 8006e52:	3360      	adds	r3, #96	; 0x60
 8006e54:	2204      	movs	r2, #4
 8006e56:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	b2d9      	uxtb	r1, r3
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	202c      	movs	r0, #44	; 0x2c
 8006e62:	fb00 f303 	mul.w	r3, r0, r3
 8006e66:	4413      	add	r3, r2
 8006e68:	3360      	adds	r3, #96	; 0x60
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f011 fcf0 	bl	8018854 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006e74:	e008      	b.n	8006e88 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	212c      	movs	r1, #44	; 0x2c
 8006e7c:	fb01 f303 	mul.w	r3, r1, r3
 8006e80:	4413      	add	r3, r2
 8006e82:	3360      	adds	r3, #96	; 0x60
 8006e84:	2202      	movs	r2, #2
 8006e86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e94:	461a      	mov	r2, r3
 8006e96:	2380      	movs	r3, #128	; 0x80
 8006e98:	6093      	str	r3, [r2, #8]
}
 8006e9a:	e19b      	b.n	80071d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb2:	d134      	bne.n	8006f1e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	0151      	lsls	r1, r2, #5
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	440a      	add	r2, r1
 8006eca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ece:	f043 0302 	orr.w	r3, r3, #2
 8006ed2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	b2d2      	uxtb	r2, r2
 8006edc:	4611      	mov	r1, r2
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f002 fdf3 	bl	8009aca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	2310      	movs	r3, #16
 8006ef4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f02:	461a      	mov	r2, r3
 8006f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	212c      	movs	r1, #44	; 0x2c
 8006f10:	fb01 f303 	mul.w	r3, r1, r3
 8006f14:	4413      	add	r3, r2
 8006f16:	3361      	adds	r3, #97	; 0x61
 8006f18:	2208      	movs	r2, #8
 8006f1a:	701a      	strb	r2, [r3, #0]
}
 8006f1c:	e15a      	b.n	80071d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	f040 814f 	bne.w	80071d4 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	0151      	lsls	r1, r2, #5
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	440a      	add	r2, r1
 8006f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f50:	f023 0302 	bic.w	r3, r3, #2
 8006f54:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	212c      	movs	r1, #44	; 0x2c
 8006f5c:	fb01 f303 	mul.w	r3, r1, r3
 8006f60:	4413      	add	r3, r2
 8006f62:	3361      	adds	r3, #97	; 0x61
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d17d      	bne.n	8007066 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	212c      	movs	r1, #44	; 0x2c
 8006f70:	fb01 f303 	mul.w	r3, r1, r3
 8006f74:	4413      	add	r3, r2
 8006f76:	3360      	adds	r3, #96	; 0x60
 8006f78:	2201      	movs	r2, #1
 8006f7a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	212c      	movs	r1, #44	; 0x2c
 8006f82:	fb01 f303 	mul.w	r3, r1, r3
 8006f86:	4413      	add	r3, r2
 8006f88:	333f      	adds	r3, #63	; 0x3f
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d00a      	beq.n	8006fa6 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	212c      	movs	r1, #44	; 0x2c
 8006f96:	fb01 f303 	mul.w	r3, r1, r3
 8006f9a:	4413      	add	r3, r2
 8006f9c:	333f      	adds	r3, #63	; 0x3f
 8006f9e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	f040 8100 	bne.w	80071a6 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d113      	bne.n	8006fd6 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	212c      	movs	r1, #44	; 0x2c
 8006fb4:	fb01 f303 	mul.w	r3, r1, r3
 8006fb8:	4413      	add	r3, r2
 8006fba:	3355      	adds	r3, #85	; 0x55
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	f083 0301 	eor.w	r3, r3, #1
 8006fc2:	b2d8      	uxtb	r0, r3
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	212c      	movs	r1, #44	; 0x2c
 8006fca:	fb01 f303 	mul.w	r3, r1, r3
 8006fce:	4413      	add	r3, r2
 8006fd0:	3355      	adds	r3, #85	; 0x55
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	f040 80e3 	bne.w	80071a6 <HCD_HC_OUT_IRQHandler+0x7cc>
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	212c      	movs	r1, #44	; 0x2c
 8006fe6:	fb01 f303 	mul.w	r3, r1, r3
 8006fea:	4413      	add	r3, r2
 8006fec:	334c      	adds	r3, #76	; 0x4c
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 80d8 	beq.w	80071a6 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	212c      	movs	r1, #44	; 0x2c
 8006ffc:	fb01 f303 	mul.w	r3, r1, r3
 8007000:	4413      	add	r3, r2
 8007002:	334c      	adds	r3, #76	; 0x4c
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	202c      	movs	r0, #44	; 0x2c
 800700c:	fb00 f202 	mul.w	r2, r0, r2
 8007010:	440a      	add	r2, r1
 8007012:	3240      	adds	r2, #64	; 0x40
 8007014:	8812      	ldrh	r2, [r2, #0]
 8007016:	4413      	add	r3, r2
 8007018:	3b01      	subs	r3, #1
 800701a:	6879      	ldr	r1, [r7, #4]
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	202c      	movs	r0, #44	; 0x2c
 8007020:	fb00 f202 	mul.w	r2, r0, r2
 8007024:	440a      	add	r2, r1
 8007026:	3240      	adds	r2, #64	; 0x40
 8007028:	8812      	ldrh	r2, [r2, #0]
 800702a:	fbb3 f3f2 	udiv	r3, r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 80b5 	beq.w	80071a6 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	212c      	movs	r1, #44	; 0x2c
 8007042:	fb01 f303 	mul.w	r3, r1, r3
 8007046:	4413      	add	r3, r2
 8007048:	3355      	adds	r3, #85	; 0x55
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	f083 0301 	eor.w	r3, r3, #1
 8007050:	b2d8      	uxtb	r0, r3
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	212c      	movs	r1, #44	; 0x2c
 8007058:	fb01 f303 	mul.w	r3, r1, r3
 800705c:	4413      	add	r3, r2
 800705e:	3355      	adds	r3, #85	; 0x55
 8007060:	4602      	mov	r2, r0
 8007062:	701a      	strb	r2, [r3, #0]
 8007064:	e09f      	b.n	80071a6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	212c      	movs	r1, #44	; 0x2c
 800706c:	fb01 f303 	mul.w	r3, r1, r3
 8007070:	4413      	add	r3, r2
 8007072:	3361      	adds	r3, #97	; 0x61
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	2b03      	cmp	r3, #3
 8007078:	d109      	bne.n	800708e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	212c      	movs	r1, #44	; 0x2c
 8007080:	fb01 f303 	mul.w	r3, r1, r3
 8007084:	4413      	add	r3, r2
 8007086:	3360      	adds	r3, #96	; 0x60
 8007088:	2202      	movs	r2, #2
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	e08b      	b.n	80071a6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	212c      	movs	r1, #44	; 0x2c
 8007094:	fb01 f303 	mul.w	r3, r1, r3
 8007098:	4413      	add	r3, r2
 800709a:	3361      	adds	r3, #97	; 0x61
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d109      	bne.n	80070b6 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	212c      	movs	r1, #44	; 0x2c
 80070a8:	fb01 f303 	mul.w	r3, r1, r3
 80070ac:	4413      	add	r3, r2
 80070ae:	3360      	adds	r3, #96	; 0x60
 80070b0:	2202      	movs	r2, #2
 80070b2:	701a      	strb	r2, [r3, #0]
 80070b4:	e077      	b.n	80071a6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	212c      	movs	r1, #44	; 0x2c
 80070bc:	fb01 f303 	mul.w	r3, r1, r3
 80070c0:	4413      	add	r3, r2
 80070c2:	3361      	adds	r3, #97	; 0x61
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	2b05      	cmp	r3, #5
 80070c8:	d109      	bne.n	80070de <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	212c      	movs	r1, #44	; 0x2c
 80070d0:	fb01 f303 	mul.w	r3, r1, r3
 80070d4:	4413      	add	r3, r2
 80070d6:	3360      	adds	r3, #96	; 0x60
 80070d8:	2205      	movs	r2, #5
 80070da:	701a      	strb	r2, [r3, #0]
 80070dc:	e063      	b.n	80071a6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	212c      	movs	r1, #44	; 0x2c
 80070e4:	fb01 f303 	mul.w	r3, r1, r3
 80070e8:	4413      	add	r3, r2
 80070ea:	3361      	adds	r3, #97	; 0x61
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	2b06      	cmp	r3, #6
 80070f0:	d009      	beq.n	8007106 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	212c      	movs	r1, #44	; 0x2c
 80070f8:	fb01 f303 	mul.w	r3, r1, r3
 80070fc:	4413      	add	r3, r2
 80070fe:	3361      	adds	r3, #97	; 0x61
 8007100:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007102:	2b08      	cmp	r3, #8
 8007104:	d14f      	bne.n	80071a6 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	212c      	movs	r1, #44	; 0x2c
 800710c:	fb01 f303 	mul.w	r3, r1, r3
 8007110:	4413      	add	r3, r2
 8007112:	335c      	adds	r3, #92	; 0x5c
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	6879      	ldr	r1, [r7, #4]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	202c      	movs	r0, #44	; 0x2c
 800711e:	fb00 f303 	mul.w	r3, r0, r3
 8007122:	440b      	add	r3, r1
 8007124:	335c      	adds	r3, #92	; 0x5c
 8007126:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	212c      	movs	r1, #44	; 0x2c
 800712e:	fb01 f303 	mul.w	r3, r1, r3
 8007132:	4413      	add	r3, r2
 8007134:	335c      	adds	r3, #92	; 0x5c
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b02      	cmp	r3, #2
 800713a:	d912      	bls.n	8007162 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	212c      	movs	r1, #44	; 0x2c
 8007142:	fb01 f303 	mul.w	r3, r1, r3
 8007146:	4413      	add	r3, r2
 8007148:	335c      	adds	r3, #92	; 0x5c
 800714a:	2200      	movs	r2, #0
 800714c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	212c      	movs	r1, #44	; 0x2c
 8007154:	fb01 f303 	mul.w	r3, r1, r3
 8007158:	4413      	add	r3, r2
 800715a:	3360      	adds	r3, #96	; 0x60
 800715c:	2204      	movs	r2, #4
 800715e:	701a      	strb	r2, [r3, #0]
 8007160:	e021      	b.n	80071a6 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	212c      	movs	r1, #44	; 0x2c
 8007168:	fb01 f303 	mul.w	r3, r1, r3
 800716c:	4413      	add	r3, r2
 800716e:	3360      	adds	r3, #96	; 0x60
 8007170:	2202      	movs	r2, #2
 8007172:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	4413      	add	r3, r2
 800717c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800718a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007192:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	4413      	add	r3, r2
 800719c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a0:	461a      	mov	r2, r3
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b2:	461a      	mov	r2, r3
 80071b4:	2302      	movs	r3, #2
 80071b6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	b2d9      	uxtb	r1, r3
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	202c      	movs	r0, #44	; 0x2c
 80071c2:	fb00 f303 	mul.w	r3, r0, r3
 80071c6:	4413      	add	r3, r2
 80071c8:	3360      	adds	r3, #96	; 0x60
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f011 fb40 	bl	8018854 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80071d4:	bf00      	nop
 80071d6:	3720      	adds	r7, #32
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08a      	sub	sp, #40	; 0x28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	f003 030f 	and.w	r3, r3, #15
 80071fc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	0c5b      	lsrs	r3, r3, #17
 8007202:	f003 030f 	and.w	r3, r3, #15
 8007206:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	091b      	lsrs	r3, r3, #4
 800720c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007210:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b02      	cmp	r3, #2
 8007216:	d004      	beq.n	8007222 <HCD_RXQLVL_IRQHandler+0x46>
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2b05      	cmp	r3, #5
 800721c:	f000 80a9 	beq.w	8007372 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007220:	e0aa      	b.n	8007378 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 80a6 	beq.w	8007376 <HCD_RXQLVL_IRQHandler+0x19a>
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	212c      	movs	r1, #44	; 0x2c
 8007230:	fb01 f303 	mul.w	r3, r1, r3
 8007234:	4413      	add	r3, r2
 8007236:	3344      	adds	r3, #68	; 0x44
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 809b 	beq.w	8007376 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	212c      	movs	r1, #44	; 0x2c
 8007246:	fb01 f303 	mul.w	r3, r1, r3
 800724a:	4413      	add	r3, r2
 800724c:	3350      	adds	r3, #80	; 0x50
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	441a      	add	r2, r3
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	202c      	movs	r0, #44	; 0x2c
 800725a:	fb00 f303 	mul.w	r3, r0, r3
 800725e:	440b      	add	r3, r1
 8007260:	334c      	adds	r3, #76	; 0x4c
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d87a      	bhi.n	800735e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6818      	ldr	r0, [r3, #0]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	212c      	movs	r1, #44	; 0x2c
 8007272:	fb01 f303 	mul.w	r3, r1, r3
 8007276:	4413      	add	r3, r2
 8007278:	3344      	adds	r3, #68	; 0x44
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	b292      	uxth	r2, r2
 8007280:	4619      	mov	r1, r3
 8007282:	f001 ff9b 	bl	80091bc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	212c      	movs	r1, #44	; 0x2c
 800728c:	fb01 f303 	mul.w	r3, r1, r3
 8007290:	4413      	add	r3, r2
 8007292:	3344      	adds	r3, #68	; 0x44
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	441a      	add	r2, r3
 800729a:	6879      	ldr	r1, [r7, #4]
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	202c      	movs	r0, #44	; 0x2c
 80072a0:	fb00 f303 	mul.w	r3, r0, r3
 80072a4:	440b      	add	r3, r1
 80072a6:	3344      	adds	r3, #68	; 0x44
 80072a8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	212c      	movs	r1, #44	; 0x2c
 80072b0:	fb01 f303 	mul.w	r3, r1, r3
 80072b4:	4413      	add	r3, r2
 80072b6:	3350      	adds	r3, #80	; 0x50
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	441a      	add	r2, r3
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	202c      	movs	r0, #44	; 0x2c
 80072c4:	fb00 f303 	mul.w	r3, r0, r3
 80072c8:	440b      	add	r3, r1
 80072ca:	3350      	adds	r3, #80	; 0x50
 80072cc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	0cdb      	lsrs	r3, r3, #19
 80072de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072e2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	212c      	movs	r1, #44	; 0x2c
 80072ea:	fb01 f303 	mul.w	r3, r1, r3
 80072ee:	4413      	add	r3, r2
 80072f0:	3340      	adds	r3, #64	; 0x40
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	461a      	mov	r2, r3
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d13c      	bne.n	8007376 <HCD_RXQLVL_IRQHandler+0x19a>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d039      	beq.n	8007376 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	4413      	add	r3, r2
 800730a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007318:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007320:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	4413      	add	r3, r2
 800732a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800732e:	461a      	mov	r2, r3
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	212c      	movs	r1, #44	; 0x2c
 800733a:	fb01 f303 	mul.w	r3, r1, r3
 800733e:	4413      	add	r3, r2
 8007340:	3354      	adds	r3, #84	; 0x54
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	f083 0301 	eor.w	r3, r3, #1
 8007348:	b2d8      	uxtb	r0, r3
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	212c      	movs	r1, #44	; 0x2c
 8007350:	fb01 f303 	mul.w	r3, r1, r3
 8007354:	4413      	add	r3, r2
 8007356:	3354      	adds	r3, #84	; 0x54
 8007358:	4602      	mov	r2, r0
 800735a:	701a      	strb	r2, [r3, #0]
      break;
 800735c:	e00b      	b.n	8007376 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	212c      	movs	r1, #44	; 0x2c
 8007364:	fb01 f303 	mul.w	r3, r1, r3
 8007368:	4413      	add	r3, r2
 800736a:	3360      	adds	r3, #96	; 0x60
 800736c:	2204      	movs	r2, #4
 800736e:	701a      	strb	r2, [r3, #0]
      break;
 8007370:	e001      	b.n	8007376 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007372:	bf00      	nop
 8007374:	e000      	b.n	8007378 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007376:	bf00      	nop
  }
}
 8007378:	bf00      	nop
 800737a:	3728      	adds	r7, #40	; 0x28
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80073ac:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f003 0302 	and.w	r3, r3, #2
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d10b      	bne.n	80073d0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d102      	bne.n	80073c8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f011 fa2a 	bl	801881c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f043 0302 	orr.w	r3, r3, #2
 80073ce:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f003 0308 	and.w	r3, r3, #8
 80073d6:	2b08      	cmp	r3, #8
 80073d8:	d132      	bne.n	8007440 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f043 0308 	orr.w	r3, r3, #8
 80073e0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f003 0304 	and.w	r3, r3, #4
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d126      	bne.n	800743a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d113      	bne.n	800741c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80073fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073fe:	d106      	bne.n	800740e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2102      	movs	r1, #2
 8007406:	4618      	mov	r0, r3
 8007408:	f002 f838 	bl	800947c <USB_InitFSLSPClkSel>
 800740c:	e011      	b.n	8007432 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2101      	movs	r1, #1
 8007414:	4618      	mov	r0, r3
 8007416:	f002 f831 	bl	800947c <USB_InitFSLSPClkSel>
 800741a:	e00a      	b.n	8007432 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d106      	bne.n	8007432 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800742a:	461a      	mov	r2, r3
 800742c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007430:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f011 fa1c 	bl	8018870 <HAL_HCD_PortEnabled_Callback>
 8007438:	e002      	b.n	8007440 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f011 fa26 	bl	801888c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f003 0320 	and.w	r3, r3, #32
 8007446:	2b20      	cmp	r3, #32
 8007448:	d103      	bne.n	8007452 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f043 0320 	orr.w	r3, r3, #32
 8007450:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007458:	461a      	mov	r2, r3
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	6013      	str	r3, [r2, #0]
}
 800745e:	bf00      	nop
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
	...

08007468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e264      	b.n	8007944 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d075      	beq.n	8007572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007486:	4ba3      	ldr	r3, [pc, #652]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f003 030c 	and.w	r3, r3, #12
 800748e:	2b04      	cmp	r3, #4
 8007490:	d00c      	beq.n	80074ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007492:	4ba0      	ldr	r3, [pc, #640]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800749a:	2b08      	cmp	r3, #8
 800749c:	d112      	bne.n	80074c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800749e:	4b9d      	ldr	r3, [pc, #628]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074aa:	d10b      	bne.n	80074c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074ac:	4b99      	ldr	r3, [pc, #612]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d05b      	beq.n	8007570 <HAL_RCC_OscConfig+0x108>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d157      	bne.n	8007570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e23f      	b.n	8007944 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074cc:	d106      	bne.n	80074dc <HAL_RCC_OscConfig+0x74>
 80074ce:	4b91      	ldr	r3, [pc, #580]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a90      	ldr	r2, [pc, #576]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 80074d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074d8:	6013      	str	r3, [r2, #0]
 80074da:	e01d      	b.n	8007518 <HAL_RCC_OscConfig+0xb0>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074e4:	d10c      	bne.n	8007500 <HAL_RCC_OscConfig+0x98>
 80074e6:	4b8b      	ldr	r3, [pc, #556]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a8a      	ldr	r2, [pc, #552]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 80074ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	4b88      	ldr	r3, [pc, #544]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a87      	ldr	r2, [pc, #540]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 80074f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	e00b      	b.n	8007518 <HAL_RCC_OscConfig+0xb0>
 8007500:	4b84      	ldr	r3, [pc, #528]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a83      	ldr	r2, [pc, #524]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 8007506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800750a:	6013      	str	r3, [r2, #0]
 800750c:	4b81      	ldr	r3, [pc, #516]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a80      	ldr	r2, [pc, #512]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 8007512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d013      	beq.n	8007548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007520:	f7fa fcb4 	bl	8001e8c <HAL_GetTick>
 8007524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007526:	e008      	b.n	800753a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007528:	f7fa fcb0 	bl	8001e8c <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b64      	cmp	r3, #100	; 0x64
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e204      	b.n	8007944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800753a:	4b76      	ldr	r3, [pc, #472]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0f0      	beq.n	8007528 <HAL_RCC_OscConfig+0xc0>
 8007546:	e014      	b.n	8007572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007548:	f7fa fca0 	bl	8001e8c <HAL_GetTick>
 800754c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007550:	f7fa fc9c 	bl	8001e8c <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b64      	cmp	r3, #100	; 0x64
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e1f0      	b.n	8007944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007562:	4b6c      	ldr	r3, [pc, #432]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1f0      	bne.n	8007550 <HAL_RCC_OscConfig+0xe8>
 800756e:	e000      	b.n	8007572 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d063      	beq.n	8007646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800757e:	4b65      	ldr	r3, [pc, #404]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f003 030c 	and.w	r3, r3, #12
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00b      	beq.n	80075a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800758a:	4b62      	ldr	r3, [pc, #392]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007592:	2b08      	cmp	r3, #8
 8007594:	d11c      	bne.n	80075d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007596:	4b5f      	ldr	r3, [pc, #380]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d116      	bne.n	80075d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075a2:	4b5c      	ldr	r3, [pc, #368]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d005      	beq.n	80075ba <HAL_RCC_OscConfig+0x152>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d001      	beq.n	80075ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e1c4      	b.n	8007944 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075ba:	4b56      	ldr	r3, [pc, #344]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	4952      	ldr	r1, [pc, #328]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075ce:	e03a      	b.n	8007646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d020      	beq.n	800761a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075d8:	4b4f      	ldr	r3, [pc, #316]	; (8007718 <HAL_RCC_OscConfig+0x2b0>)
 80075da:	2201      	movs	r2, #1
 80075dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075de:	f7fa fc55 	bl	8001e8c <HAL_GetTick>
 80075e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075e4:	e008      	b.n	80075f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075e6:	f7fa fc51 	bl	8001e8c <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d901      	bls.n	80075f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e1a5      	b.n	8007944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075f8:	4b46      	ldr	r3, [pc, #280]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0f0      	beq.n	80075e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007604:	4b43      	ldr	r3, [pc, #268]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	00db      	lsls	r3, r3, #3
 8007612:	4940      	ldr	r1, [pc, #256]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 8007614:	4313      	orrs	r3, r2
 8007616:	600b      	str	r3, [r1, #0]
 8007618:	e015      	b.n	8007646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800761a:	4b3f      	ldr	r3, [pc, #252]	; (8007718 <HAL_RCC_OscConfig+0x2b0>)
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007620:	f7fa fc34 	bl	8001e8c <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007628:	f7fa fc30 	bl	8001e8c <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e184      	b.n	8007944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800763a:	4b36      	ldr	r3, [pc, #216]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f0      	bne.n	8007628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0308 	and.w	r3, r3, #8
 800764e:	2b00      	cmp	r3, #0
 8007650:	d030      	beq.n	80076b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d016      	beq.n	8007688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800765a:	4b30      	ldr	r3, [pc, #192]	; (800771c <HAL_RCC_OscConfig+0x2b4>)
 800765c:	2201      	movs	r2, #1
 800765e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007660:	f7fa fc14 	bl	8001e8c <HAL_GetTick>
 8007664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007666:	e008      	b.n	800767a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007668:	f7fa fc10 	bl	8001e8c <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d901      	bls.n	800767a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e164      	b.n	8007944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800767a:	4b26      	ldr	r3, [pc, #152]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 800767c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0f0      	beq.n	8007668 <HAL_RCC_OscConfig+0x200>
 8007686:	e015      	b.n	80076b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007688:	4b24      	ldr	r3, [pc, #144]	; (800771c <HAL_RCC_OscConfig+0x2b4>)
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800768e:	f7fa fbfd 	bl	8001e8c <HAL_GetTick>
 8007692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007694:	e008      	b.n	80076a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007696:	f7fa fbf9 	bl	8001e8c <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d901      	bls.n	80076a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e14d      	b.n	8007944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076a8:	4b1a      	ldr	r3, [pc, #104]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 80076aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076ac:	f003 0302 	and.w	r3, r3, #2
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1f0      	bne.n	8007696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0304 	and.w	r3, r3, #4
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 80a0 	beq.w	8007802 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076c2:	2300      	movs	r3, #0
 80076c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076c6:	4b13      	ldr	r3, [pc, #76]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10f      	bne.n	80076f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076d2:	2300      	movs	r3, #0
 80076d4:	60bb      	str	r3, [r7, #8]
 80076d6:	4b0f      	ldr	r3, [pc, #60]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	4a0e      	ldr	r2, [pc, #56]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 80076dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076e0:	6413      	str	r3, [r2, #64]	; 0x40
 80076e2:	4b0c      	ldr	r3, [pc, #48]	; (8007714 <HAL_RCC_OscConfig+0x2ac>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ea:	60bb      	str	r3, [r7, #8]
 80076ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076ee:	2301      	movs	r3, #1
 80076f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076f2:	4b0b      	ldr	r3, [pc, #44]	; (8007720 <HAL_RCC_OscConfig+0x2b8>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d121      	bne.n	8007742 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076fe:	4b08      	ldr	r3, [pc, #32]	; (8007720 <HAL_RCC_OscConfig+0x2b8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a07      	ldr	r2, [pc, #28]	; (8007720 <HAL_RCC_OscConfig+0x2b8>)
 8007704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800770a:	f7fa fbbf 	bl	8001e8c <HAL_GetTick>
 800770e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007710:	e011      	b.n	8007736 <HAL_RCC_OscConfig+0x2ce>
 8007712:	bf00      	nop
 8007714:	40023800 	.word	0x40023800
 8007718:	42470000 	.word	0x42470000
 800771c:	42470e80 	.word	0x42470e80
 8007720:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007724:	f7fa fbb2 	bl	8001e8c <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b02      	cmp	r3, #2
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e106      	b.n	8007944 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007736:	4b85      	ldr	r3, [pc, #532]	; (800794c <HAL_RCC_OscConfig+0x4e4>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800773e:	2b00      	cmp	r3, #0
 8007740:	d0f0      	beq.n	8007724 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d106      	bne.n	8007758 <HAL_RCC_OscConfig+0x2f0>
 800774a:	4b81      	ldr	r3, [pc, #516]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 800774c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800774e:	4a80      	ldr	r2, [pc, #512]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 8007750:	f043 0301 	orr.w	r3, r3, #1
 8007754:	6713      	str	r3, [r2, #112]	; 0x70
 8007756:	e01c      	b.n	8007792 <HAL_RCC_OscConfig+0x32a>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	2b05      	cmp	r3, #5
 800775e:	d10c      	bne.n	800777a <HAL_RCC_OscConfig+0x312>
 8007760:	4b7b      	ldr	r3, [pc, #492]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 8007762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007764:	4a7a      	ldr	r2, [pc, #488]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 8007766:	f043 0304 	orr.w	r3, r3, #4
 800776a:	6713      	str	r3, [r2, #112]	; 0x70
 800776c:	4b78      	ldr	r3, [pc, #480]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 800776e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007770:	4a77      	ldr	r2, [pc, #476]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	6713      	str	r3, [r2, #112]	; 0x70
 8007778:	e00b      	b.n	8007792 <HAL_RCC_OscConfig+0x32a>
 800777a:	4b75      	ldr	r3, [pc, #468]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 800777c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777e:	4a74      	ldr	r2, [pc, #464]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 8007780:	f023 0301 	bic.w	r3, r3, #1
 8007784:	6713      	str	r3, [r2, #112]	; 0x70
 8007786:	4b72      	ldr	r3, [pc, #456]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 8007788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800778a:	4a71      	ldr	r2, [pc, #452]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 800778c:	f023 0304 	bic.w	r3, r3, #4
 8007790:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d015      	beq.n	80077c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800779a:	f7fa fb77 	bl	8001e8c <HAL_GetTick>
 800779e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077a0:	e00a      	b.n	80077b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077a2:	f7fa fb73 	bl	8001e8c <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d901      	bls.n	80077b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e0c5      	b.n	8007944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077b8:	4b65      	ldr	r3, [pc, #404]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 80077ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d0ee      	beq.n	80077a2 <HAL_RCC_OscConfig+0x33a>
 80077c4:	e014      	b.n	80077f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077c6:	f7fa fb61 	bl	8001e8c <HAL_GetTick>
 80077ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077cc:	e00a      	b.n	80077e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077ce:	f7fa fb5d 	bl	8001e8c <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077dc:	4293      	cmp	r3, r2
 80077de:	d901      	bls.n	80077e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e0af      	b.n	8007944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077e4:	4b5a      	ldr	r3, [pc, #360]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 80077e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1ee      	bne.n	80077ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077f0:	7dfb      	ldrb	r3, [r7, #23]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d105      	bne.n	8007802 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077f6:	4b56      	ldr	r3, [pc, #344]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	4a55      	ldr	r2, [pc, #340]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 80077fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007800:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 809b 	beq.w	8007942 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800780c:	4b50      	ldr	r3, [pc, #320]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f003 030c 	and.w	r3, r3, #12
 8007814:	2b08      	cmp	r3, #8
 8007816:	d05c      	beq.n	80078d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	2b02      	cmp	r3, #2
 800781e:	d141      	bne.n	80078a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007820:	4b4c      	ldr	r3, [pc, #304]	; (8007954 <HAL_RCC_OscConfig+0x4ec>)
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007826:	f7fa fb31 	bl	8001e8c <HAL_GetTick>
 800782a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800782c:	e008      	b.n	8007840 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800782e:	f7fa fb2d 	bl	8001e8c <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	2b02      	cmp	r3, #2
 800783a:	d901      	bls.n	8007840 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e081      	b.n	8007944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007840:	4b43      	ldr	r3, [pc, #268]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1f0      	bne.n	800782e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	69da      	ldr	r2, [r3, #28]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a1b      	ldr	r3, [r3, #32]
 8007854:	431a      	orrs	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785a:	019b      	lsls	r3, r3, #6
 800785c:	431a      	orrs	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007862:	085b      	lsrs	r3, r3, #1
 8007864:	3b01      	subs	r3, #1
 8007866:	041b      	lsls	r3, r3, #16
 8007868:	431a      	orrs	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786e:	061b      	lsls	r3, r3, #24
 8007870:	4937      	ldr	r1, [pc, #220]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 8007872:	4313      	orrs	r3, r2
 8007874:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007876:	4b37      	ldr	r3, [pc, #220]	; (8007954 <HAL_RCC_OscConfig+0x4ec>)
 8007878:	2201      	movs	r2, #1
 800787a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800787c:	f7fa fb06 	bl	8001e8c <HAL_GetTick>
 8007880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007882:	e008      	b.n	8007896 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007884:	f7fa fb02 	bl	8001e8c <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b02      	cmp	r3, #2
 8007890:	d901      	bls.n	8007896 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e056      	b.n	8007944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007896:	4b2e      	ldr	r3, [pc, #184]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0f0      	beq.n	8007884 <HAL_RCC_OscConfig+0x41c>
 80078a2:	e04e      	b.n	8007942 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078a4:	4b2b      	ldr	r3, [pc, #172]	; (8007954 <HAL_RCC_OscConfig+0x4ec>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078aa:	f7fa faef 	bl	8001e8c <HAL_GetTick>
 80078ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078b0:	e008      	b.n	80078c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078b2:	f7fa faeb 	bl	8001e8c <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d901      	bls.n	80078c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e03f      	b.n	8007944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078c4:	4b22      	ldr	r3, [pc, #136]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1f0      	bne.n	80078b2 <HAL_RCC_OscConfig+0x44a>
 80078d0:	e037      	b.n	8007942 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d101      	bne.n	80078de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e032      	b.n	8007944 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078de:	4b1c      	ldr	r3, [pc, #112]	; (8007950 <HAL_RCC_OscConfig+0x4e8>)
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d028      	beq.n	800793e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d121      	bne.n	800793e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007904:	429a      	cmp	r2, r3
 8007906:	d11a      	bne.n	800793e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800790e:	4013      	ands	r3, r2
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007914:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007916:	4293      	cmp	r3, r2
 8007918:	d111      	bne.n	800793e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	085b      	lsrs	r3, r3, #1
 8007926:	3b01      	subs	r3, #1
 8007928:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800792a:	429a      	cmp	r2, r3
 800792c:	d107      	bne.n	800793e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800793a:	429a      	cmp	r2, r3
 800793c:	d001      	beq.n	8007942 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e000      	b.n	8007944 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	40007000 	.word	0x40007000
 8007950:	40023800 	.word	0x40023800
 8007954:	42470060 	.word	0x42470060

08007958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e0cc      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800796c:	4b68      	ldr	r3, [pc, #416]	; (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d90c      	bls.n	8007994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800797a:	4b65      	ldr	r3, [pc, #404]	; (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007982:	4b63      	ldr	r3, [pc, #396]	; (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	429a      	cmp	r2, r3
 800798e:	d001      	beq.n	8007994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e0b8      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d020      	beq.n	80079e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0304 	and.w	r3, r3, #4
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d005      	beq.n	80079b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079ac:	4b59      	ldr	r3, [pc, #356]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	4a58      	ldr	r2, [pc, #352]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80079b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0308 	and.w	r3, r3, #8
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d005      	beq.n	80079d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079c4:	4b53      	ldr	r3, [pc, #332]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	4a52      	ldr	r2, [pc, #328]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80079ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079d0:	4b50      	ldr	r3, [pc, #320]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	494d      	ldr	r1, [pc, #308]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d044      	beq.n	8007a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d107      	bne.n	8007a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079f6:	4b47      	ldr	r3, [pc, #284]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d119      	bne.n	8007a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e07f      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d003      	beq.n	8007a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d107      	bne.n	8007a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a16:	4b3f      	ldr	r3, [pc, #252]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d109      	bne.n	8007a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e06f      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a26:	4b3b      	ldr	r3, [pc, #236]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e067      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a36:	4b37      	ldr	r3, [pc, #220]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f023 0203 	bic.w	r2, r3, #3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	4934      	ldr	r1, [pc, #208]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a48:	f7fa fa20 	bl	8001e8c <HAL_GetTick>
 8007a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a4e:	e00a      	b.n	8007a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a50:	f7fa fa1c 	bl	8001e8c <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d901      	bls.n	8007a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e04f      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a66:	4b2b      	ldr	r3, [pc, #172]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f003 020c 	and.w	r2, r3, #12
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d1eb      	bne.n	8007a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a78:	4b25      	ldr	r3, [pc, #148]	; (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d20c      	bcs.n	8007aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a86:	4b22      	ldr	r3, [pc, #136]	; (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a8e:	4b20      	ldr	r3, [pc, #128]	; (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d001      	beq.n	8007aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e032      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0304 	and.w	r3, r3, #4
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d008      	beq.n	8007abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007aac:	4b19      	ldr	r3, [pc, #100]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	4916      	ldr	r1, [pc, #88]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0308 	and.w	r3, r3, #8
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d009      	beq.n	8007ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007aca:	4b12      	ldr	r3, [pc, #72]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	490e      	ldr	r1, [pc, #56]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ade:	f000 f889 	bl	8007bf4 <HAL_RCC_GetSysClockFreq>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	091b      	lsrs	r3, r3, #4
 8007aea:	f003 030f 	and.w	r3, r3, #15
 8007aee:	490a      	ldr	r1, [pc, #40]	; (8007b18 <HAL_RCC_ClockConfig+0x1c0>)
 8007af0:	5ccb      	ldrb	r3, [r1, r3]
 8007af2:	fa22 f303 	lsr.w	r3, r2, r3
 8007af6:	4a09      	ldr	r2, [pc, #36]	; (8007b1c <HAL_RCC_ClockConfig+0x1c4>)
 8007af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007afa:	4b09      	ldr	r3, [pc, #36]	; (8007b20 <HAL_RCC_ClockConfig+0x1c8>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fa f980 	bl	8001e04 <HAL_InitTick>

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	40023c00 	.word	0x40023c00
 8007b14:	40023800 	.word	0x40023800
 8007b18:	0801d100 	.word	0x0801d100
 8007b1c:	20000580 	.word	0x20000580
 8007b20:	20000584 	.word	0x20000584

08007b24 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08c      	sub	sp, #48	; 0x30
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d129      	bne.n	8007b8a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8007b36:	2300      	movs	r3, #0
 8007b38:	61bb      	str	r3, [r7, #24]
 8007b3a:	4b2b      	ldr	r3, [pc, #172]	; (8007be8 <HAL_RCC_MCOConfig+0xc4>)
 8007b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3e:	4a2a      	ldr	r2, [pc, #168]	; (8007be8 <HAL_RCC_MCOConfig+0xc4>)
 8007b40:	f043 0301 	orr.w	r3, r3, #1
 8007b44:	6313      	str	r3, [r2, #48]	; 0x30
 8007b46:	4b28      	ldr	r3, [pc, #160]	; (8007be8 <HAL_RCC_MCOConfig+0xc4>)
 8007b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	61bb      	str	r3, [r7, #24]
 8007b50:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b60:	2300      	movs	r3, #0
 8007b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007b64:	2300      	movs	r3, #0
 8007b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007b68:	f107 031c 	add.w	r3, r7, #28
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	481f      	ldr	r0, [pc, #124]	; (8007bec <HAL_RCC_MCOConfig+0xc8>)
 8007b70:	f7fd fd3c 	bl	80055ec <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007b74:	4b1c      	ldr	r3, [pc, #112]	; (8007be8 <HAL_RCC_MCOConfig+0xc4>)
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8007b7c:	68b9      	ldr	r1, [r7, #8]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	430b      	orrs	r3, r1
 8007b82:	4919      	ldr	r1, [pc, #100]	; (8007be8 <HAL_RCC_MCOConfig+0xc4>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8007b88:	e029      	b.n	8007bde <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	617b      	str	r3, [r7, #20]
 8007b8e:	4b16      	ldr	r3, [pc, #88]	; (8007be8 <HAL_RCC_MCOConfig+0xc4>)
 8007b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b92:	4a15      	ldr	r2, [pc, #84]	; (8007be8 <HAL_RCC_MCOConfig+0xc4>)
 8007b94:	f043 0304 	orr.w	r3, r3, #4
 8007b98:	6313      	str	r3, [r2, #48]	; 0x30
 8007b9a:	4b13      	ldr	r3, [pc, #76]	; (8007be8 <HAL_RCC_MCOConfig+0xc4>)
 8007b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9e:	f003 0304 	and.w	r3, r3, #4
 8007ba2:	617b      	str	r3, [r7, #20]
 8007ba4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bac:	2302      	movs	r3, #2
 8007bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007bbc:	f107 031c 	add.w	r3, r7, #28
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	480b      	ldr	r0, [pc, #44]	; (8007bf0 <HAL_RCC_MCOConfig+0xcc>)
 8007bc4:	f7fd fd12 	bl	80055ec <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8007bc8:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <HAL_RCC_MCOConfig+0xc4>)
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	00d9      	lsls	r1, r3, #3
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	4903      	ldr	r1, [pc, #12]	; (8007be8 <HAL_RCC_MCOConfig+0xc4>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	608b      	str	r3, [r1, #8]
}
 8007bde:	bf00      	nop
 8007be0:	3730      	adds	r7, #48	; 0x30
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	40023800 	.word	0x40023800
 8007bec:	40020000 	.word	0x40020000
 8007bf0:	40020800 	.word	0x40020800

08007bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bf4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	607b      	str	r3, [r7, #4]
 8007c00:	2300      	movs	r3, #0
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	2300      	movs	r3, #0
 8007c06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c0c:	4b67      	ldr	r3, [pc, #412]	; (8007dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f003 030c 	and.w	r3, r3, #12
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d00d      	beq.n	8007c34 <HAL_RCC_GetSysClockFreq+0x40>
 8007c18:	2b08      	cmp	r3, #8
 8007c1a:	f200 80bd 	bhi.w	8007d98 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <HAL_RCC_GetSysClockFreq+0x34>
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d003      	beq.n	8007c2e <HAL_RCC_GetSysClockFreq+0x3a>
 8007c26:	e0b7      	b.n	8007d98 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c28:	4b61      	ldr	r3, [pc, #388]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007c2a:	60bb      	str	r3, [r7, #8]
       break;
 8007c2c:	e0b7      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c2e:	4b61      	ldr	r3, [pc, #388]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007c30:	60bb      	str	r3, [r7, #8]
      break;
 8007c32:	e0b4      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c34:	4b5d      	ldr	r3, [pc, #372]	; (8007dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c3e:	4b5b      	ldr	r3, [pc, #364]	; (8007dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d04d      	beq.n	8007ce6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c4a:	4b58      	ldr	r3, [pc, #352]	; (8007dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	099b      	lsrs	r3, r3, #6
 8007c50:	461a      	mov	r2, r3
 8007c52:	f04f 0300 	mov.w	r3, #0
 8007c56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007c5a:	f04f 0100 	mov.w	r1, #0
 8007c5e:	ea02 0800 	and.w	r8, r2, r0
 8007c62:	ea03 0901 	and.w	r9, r3, r1
 8007c66:	4640      	mov	r0, r8
 8007c68:	4649      	mov	r1, r9
 8007c6a:	f04f 0200 	mov.w	r2, #0
 8007c6e:	f04f 0300 	mov.w	r3, #0
 8007c72:	014b      	lsls	r3, r1, #5
 8007c74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007c78:	0142      	lsls	r2, r0, #5
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	ebb0 0008 	subs.w	r0, r0, r8
 8007c82:	eb61 0109 	sbc.w	r1, r1, r9
 8007c86:	f04f 0200 	mov.w	r2, #0
 8007c8a:	f04f 0300 	mov.w	r3, #0
 8007c8e:	018b      	lsls	r3, r1, #6
 8007c90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007c94:	0182      	lsls	r2, r0, #6
 8007c96:	1a12      	subs	r2, r2, r0
 8007c98:	eb63 0301 	sbc.w	r3, r3, r1
 8007c9c:	f04f 0000 	mov.w	r0, #0
 8007ca0:	f04f 0100 	mov.w	r1, #0
 8007ca4:	00d9      	lsls	r1, r3, #3
 8007ca6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007caa:	00d0      	lsls	r0, r2, #3
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	eb12 0208 	adds.w	r2, r2, r8
 8007cb4:	eb43 0309 	adc.w	r3, r3, r9
 8007cb8:	f04f 0000 	mov.w	r0, #0
 8007cbc:	f04f 0100 	mov.w	r1, #0
 8007cc0:	0259      	lsls	r1, r3, #9
 8007cc2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007cc6:	0250      	lsls	r0, r2, #9
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4619      	mov	r1, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	f04f 0300 	mov.w	r3, #0
 8007cd8:	f7f8 faca 	bl	8000270 <__aeabi_uldivmod>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	e04a      	b.n	8007d7c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ce6:	4b31      	ldr	r3, [pc, #196]	; (8007dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	099b      	lsrs	r3, r3, #6
 8007cec:	461a      	mov	r2, r3
 8007cee:	f04f 0300 	mov.w	r3, #0
 8007cf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007cf6:	f04f 0100 	mov.w	r1, #0
 8007cfa:	ea02 0400 	and.w	r4, r2, r0
 8007cfe:	ea03 0501 	and.w	r5, r3, r1
 8007d02:	4620      	mov	r0, r4
 8007d04:	4629      	mov	r1, r5
 8007d06:	f04f 0200 	mov.w	r2, #0
 8007d0a:	f04f 0300 	mov.w	r3, #0
 8007d0e:	014b      	lsls	r3, r1, #5
 8007d10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d14:	0142      	lsls	r2, r0, #5
 8007d16:	4610      	mov	r0, r2
 8007d18:	4619      	mov	r1, r3
 8007d1a:	1b00      	subs	r0, r0, r4
 8007d1c:	eb61 0105 	sbc.w	r1, r1, r5
 8007d20:	f04f 0200 	mov.w	r2, #0
 8007d24:	f04f 0300 	mov.w	r3, #0
 8007d28:	018b      	lsls	r3, r1, #6
 8007d2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007d2e:	0182      	lsls	r2, r0, #6
 8007d30:	1a12      	subs	r2, r2, r0
 8007d32:	eb63 0301 	sbc.w	r3, r3, r1
 8007d36:	f04f 0000 	mov.w	r0, #0
 8007d3a:	f04f 0100 	mov.w	r1, #0
 8007d3e:	00d9      	lsls	r1, r3, #3
 8007d40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d44:	00d0      	lsls	r0, r2, #3
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	1912      	adds	r2, r2, r4
 8007d4c:	eb45 0303 	adc.w	r3, r5, r3
 8007d50:	f04f 0000 	mov.w	r0, #0
 8007d54:	f04f 0100 	mov.w	r1, #0
 8007d58:	0299      	lsls	r1, r3, #10
 8007d5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007d5e:	0290      	lsls	r0, r2, #10
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4610      	mov	r0, r2
 8007d66:	4619      	mov	r1, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f04f 0300 	mov.w	r3, #0
 8007d70:	f7f8 fa7e 	bl	8000270 <__aeabi_uldivmod>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4613      	mov	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d7c:	4b0b      	ldr	r3, [pc, #44]	; (8007dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	0c1b      	lsrs	r3, r3, #16
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	3301      	adds	r3, #1
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d94:	60bb      	str	r3, [r7, #8]
      break;
 8007d96:	e002      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d98:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007d9a:	60bb      	str	r3, [r7, #8]
      break;
 8007d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007daa:	bf00      	nop
 8007dac:	40023800 	.word	0x40023800
 8007db0:	00f42400 	.word	0x00f42400
 8007db4:	007a1200 	.word	0x007a1200

08007db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dbc:	4b03      	ldr	r3, [pc, #12]	; (8007dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	20000580 	.word	0x20000580

08007dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007dd4:	f7ff fff0 	bl	8007db8 <HAL_RCC_GetHCLKFreq>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	0a9b      	lsrs	r3, r3, #10
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	4903      	ldr	r1, [pc, #12]	; (8007df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007de6:	5ccb      	ldrb	r3, [r1, r3]
 8007de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	40023800 	.word	0x40023800
 8007df4:	0801d110 	.word	0x0801d110

08007df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007dfc:	f7ff ffdc 	bl	8007db8 <HAL_RCC_GetHCLKFreq>
 8007e00:	4602      	mov	r2, r0
 8007e02:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	0b5b      	lsrs	r3, r3, #13
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	4903      	ldr	r1, [pc, #12]	; (8007e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e0e:	5ccb      	ldrb	r3, [r1, r3]
 8007e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	40023800 	.word	0x40023800
 8007e1c:	0801d110 	.word	0x0801d110

08007e20 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e034      	b.n	8007ea0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d106      	bne.n	8007e50 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f7f9 fbae 	bl	80015ac <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3308      	adds	r3, #8
 8007e58:	4619      	mov	r1, r3
 8007e5a:	4610      	mov	r0, r2
 8007e5c:	f000 ff8c 	bl	8008d78 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	68b9      	ldr	r1, [r7, #8]
 8007e6c:	f000 ffd6 	bl	8008e1c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6858      	ldr	r0, [r3, #4]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7c:	6879      	ldr	r1, [r7, #4]
 8007e7e:	f001 f80b 	bl	8008e98 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	6892      	ldr	r2, [r2, #8]
 8007e8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	6892      	ldr	r2, [r2, #8]
 8007e96:	f041 0101 	orr.w	r1, r1, #1
 8007e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e03f      	b.n	8007f3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d106      	bne.n	8007ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7f9 fa8c 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2224      	movs	r2, #36	; 0x24
 8007ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68da      	ldr	r2, [r3, #12]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fd7b 	bl	80089e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	691a      	ldr	r2, [r3, #16]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	695a      	ldr	r2, [r3, #20]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b08a      	sub	sp, #40	; 0x28
 8007f46:	af02      	add	r7, sp, #8
 8007f48:	60f8      	str	r0, [r7, #12]
 8007f4a:	60b9      	str	r1, [r7, #8]
 8007f4c:	603b      	str	r3, [r7, #0]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b20      	cmp	r3, #32
 8007f60:	d17c      	bne.n	800805c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d002      	beq.n	8007f6e <HAL_UART_Transmit+0x2c>
 8007f68:	88fb      	ldrh	r3, [r7, #6]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e075      	b.n	800805e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d101      	bne.n	8007f80 <HAL_UART_Transmit+0x3e>
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	e06e      	b.n	800805e <HAL_UART_Transmit+0x11c>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2221      	movs	r2, #33	; 0x21
 8007f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f96:	f7f9 ff79 	bl	8001e8c <HAL_GetTick>
 8007f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	88fa      	ldrh	r2, [r7, #6]
 8007fa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	88fa      	ldrh	r2, [r7, #6]
 8007fa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb0:	d108      	bne.n	8007fc4 <HAL_UART_Transmit+0x82>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d104      	bne.n	8007fc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	61bb      	str	r3, [r7, #24]
 8007fc2:	e003      	b.n	8007fcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007fd4:	e02a      	b.n	800802c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	2180      	movs	r1, #128	; 0x80
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f000 faf9 	bl	80085d8 <UART_WaitOnFlagUntilTimeout>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e036      	b.n	800805e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10b      	bne.n	800800e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008004:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	3302      	adds	r3, #2
 800800a:	61bb      	str	r3, [r7, #24]
 800800c:	e007      	b.n	800801e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	781a      	ldrb	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	3301      	adds	r3, #1
 800801c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008022:	b29b      	uxth	r3, r3
 8008024:	3b01      	subs	r3, #1
 8008026:	b29a      	uxth	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008030:	b29b      	uxth	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1cf      	bne.n	8007fd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2200      	movs	r2, #0
 800803e:	2140      	movs	r1, #64	; 0x40
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f000 fac9 	bl	80085d8 <UART_WaitOnFlagUntilTimeout>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e006      	b.n	800805e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2220      	movs	r2, #32
 8008054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008058:	2300      	movs	r3, #0
 800805a:	e000      	b.n	800805e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800805c:	2302      	movs	r3, #2
  }
}
 800805e:	4618      	mov	r0, r3
 8008060:	3720      	adds	r7, #32
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
	...

08008068 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b0ba      	sub	sp, #232	; 0xe8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800808e:	2300      	movs	r3, #0
 8008090:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008094:	2300      	movs	r3, #0
 8008096:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800809a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809e:	f003 030f 	and.w	r3, r3, #15
 80080a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80080a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10f      	bne.n	80080ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080b2:	f003 0320 	and.w	r3, r3, #32
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d009      	beq.n	80080ce <HAL_UART_IRQHandler+0x66>
 80080ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080be:	f003 0320 	and.w	r3, r3, #32
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fbd3 	bl	8008872 <UART_Receive_IT>
      return;
 80080cc:	e256      	b.n	800857c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80080ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f000 80de 	beq.w	8008294 <HAL_UART_IRQHandler+0x22c>
 80080d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d106      	bne.n	80080f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 80d1 	beq.w	8008294 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00b      	beq.n	8008116 <HAL_UART_IRQHandler+0xae>
 80080fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008106:	2b00      	cmp	r3, #0
 8008108:	d005      	beq.n	8008116 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810e:	f043 0201 	orr.w	r2, r3, #1
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800811a:	f003 0304 	and.w	r3, r3, #4
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00b      	beq.n	800813a <HAL_UART_IRQHandler+0xd2>
 8008122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d005      	beq.n	800813a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008132:	f043 0202 	orr.w	r2, r3, #2
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800813a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00b      	beq.n	800815e <HAL_UART_IRQHandler+0xf6>
 8008146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	2b00      	cmp	r3, #0
 8008150:	d005      	beq.n	800815e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	f043 0204 	orr.w	r2, r3, #4
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800815e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008162:	f003 0308 	and.w	r3, r3, #8
 8008166:	2b00      	cmp	r3, #0
 8008168:	d011      	beq.n	800818e <HAL_UART_IRQHandler+0x126>
 800816a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800816e:	f003 0320 	and.w	r3, r3, #32
 8008172:	2b00      	cmp	r3, #0
 8008174:	d105      	bne.n	8008182 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	2b00      	cmp	r3, #0
 8008180:	d005      	beq.n	800818e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008186:	f043 0208 	orr.w	r2, r3, #8
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 81ed 	beq.w	8008572 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800819c:	f003 0320 	and.w	r3, r3, #32
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d008      	beq.n	80081b6 <HAL_UART_IRQHandler+0x14e>
 80081a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fb5e 	bl	8008872 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c0:	2b40      	cmp	r3, #64	; 0x40
 80081c2:	bf0c      	ite	eq
 80081c4:	2301      	moveq	r3, #1
 80081c6:	2300      	movne	r3, #0
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d103      	bne.n	80081e2 <HAL_UART_IRQHandler+0x17a>
 80081da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d04f      	beq.n	8008282 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fa66 	bl	80086b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f2:	2b40      	cmp	r3, #64	; 0x40
 80081f4:	d141      	bne.n	800827a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3314      	adds	r3, #20
 80081fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008200:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800820c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3314      	adds	r3, #20
 800821e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008222:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800822e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800823a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1d9      	bne.n	80081f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008246:	2b00      	cmp	r3, #0
 8008248:	d013      	beq.n	8008272 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824e:	4a7d      	ldr	r2, [pc, #500]	; (8008444 <HAL_UART_IRQHandler+0x3dc>)
 8008250:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008256:	4618      	mov	r0, r3
 8008258:	f7fa fc08 	bl	8002a6c <HAL_DMA_Abort_IT>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d016      	beq.n	8008290 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800826c:	4610      	mov	r0, r2
 800826e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008270:	e00e      	b.n	8008290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f99a 	bl	80085ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008278:	e00a      	b.n	8008290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f996 	bl	80085ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008280:	e006      	b.n	8008290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f992 	bl	80085ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800828e:	e170      	b.n	8008572 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008290:	bf00      	nop
    return;
 8008292:	e16e      	b.n	8008572 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008298:	2b01      	cmp	r3, #1
 800829a:	f040 814a 	bne.w	8008532 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800829e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a2:	f003 0310 	and.w	r3, r3, #16
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 8143 	beq.w	8008532 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80082ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b0:	f003 0310 	and.w	r3, r3, #16
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 813c 	beq.w	8008532 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082ba:	2300      	movs	r3, #0
 80082bc:	60bb      	str	r3, [r7, #8]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	60bb      	str	r3, [r7, #8]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	60bb      	str	r3, [r7, #8]
 80082ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082da:	2b40      	cmp	r3, #64	; 0x40
 80082dc:	f040 80b4 	bne.w	8008448 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 8140 	beq.w	8008576 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082fe:	429a      	cmp	r2, r3
 8008300:	f080 8139 	bcs.w	8008576 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800830a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008316:	f000 8088 	beq.w	800842a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	330c      	adds	r3, #12
 8008320:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008324:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008328:	e853 3f00 	ldrex	r3, [r3]
 800832c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008330:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008338:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	330c      	adds	r3, #12
 8008342:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008346:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800834a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008352:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008356:	e841 2300 	strex	r3, r2, [r1]
 800835a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800835e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1d9      	bne.n	800831a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	3314      	adds	r3, #20
 800836c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008370:	e853 3f00 	ldrex	r3, [r3]
 8008374:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008376:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008378:	f023 0301 	bic.w	r3, r3, #1
 800837c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3314      	adds	r3, #20
 8008386:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800838a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800838e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008390:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008392:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008396:	e841 2300 	strex	r3, r2, [r1]
 800839a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800839c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1e1      	bne.n	8008366 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3314      	adds	r3, #20
 80083a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083ac:	e853 3f00 	ldrex	r3, [r3]
 80083b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80083b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3314      	adds	r3, #20
 80083c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e3      	bne.n	80083a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2220      	movs	r2, #32
 80083de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	330c      	adds	r3, #12
 80083ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083f2:	e853 3f00 	ldrex	r3, [r3]
 80083f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083fa:	f023 0310 	bic.w	r3, r3, #16
 80083fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	330c      	adds	r3, #12
 8008408:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800840c:	65ba      	str	r2, [r7, #88]	; 0x58
 800840e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008412:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008414:	e841 2300 	strex	r3, r2, [r1]
 8008418:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800841a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e3      	bne.n	80083e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008424:	4618      	mov	r0, r3
 8008426:	f7fa fab1 	bl	800298c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008432:	b29b      	uxth	r3, r3
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	b29b      	uxth	r3, r3
 8008438:	4619      	mov	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f8c0 	bl	80085c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008440:	e099      	b.n	8008576 <HAL_UART_IRQHandler+0x50e>
 8008442:	bf00      	nop
 8008444:	0800877b 	.word	0x0800877b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008450:	b29b      	uxth	r3, r3
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800845c:	b29b      	uxth	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 808b 	beq.w	800857a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008464:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 8086 	beq.w	800857a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	330c      	adds	r3, #12
 8008474:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008478:	e853 3f00 	ldrex	r3, [r3]
 800847c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800847e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008480:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008484:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	330c      	adds	r3, #12
 800848e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008492:	647a      	str	r2, [r7, #68]	; 0x44
 8008494:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008496:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008498:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800849a:	e841 2300 	strex	r3, r2, [r1]
 800849e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1e3      	bne.n	800846e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3314      	adds	r3, #20
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	623b      	str	r3, [r7, #32]
   return(result);
 80084b6:	6a3b      	ldr	r3, [r7, #32]
 80084b8:	f023 0301 	bic.w	r3, r3, #1
 80084bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3314      	adds	r3, #20
 80084c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80084ca:	633a      	str	r2, [r7, #48]	; 0x30
 80084cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084d2:	e841 2300 	strex	r3, r2, [r1]
 80084d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1e3      	bne.n	80084a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2220      	movs	r2, #32
 80084e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	330c      	adds	r3, #12
 80084f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	e853 3f00 	ldrex	r3, [r3]
 80084fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f023 0310 	bic.w	r3, r3, #16
 8008502:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	330c      	adds	r3, #12
 800850c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008510:	61fa      	str	r2, [r7, #28]
 8008512:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008514:	69b9      	ldr	r1, [r7, #24]
 8008516:	69fa      	ldr	r2, [r7, #28]
 8008518:	e841 2300 	strex	r3, r2, [r1]
 800851c:	617b      	str	r3, [r7, #20]
   return(result);
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1e3      	bne.n	80084ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f848 	bl	80085c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008530:	e023      	b.n	800857a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800853a:	2b00      	cmp	r3, #0
 800853c:	d009      	beq.n	8008552 <HAL_UART_IRQHandler+0x4ea>
 800853e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008546:	2b00      	cmp	r3, #0
 8008548:	d003      	beq.n	8008552 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f929 	bl	80087a2 <UART_Transmit_IT>
    return;
 8008550:	e014      	b.n	800857c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00e      	beq.n	800857c <HAL_UART_IRQHandler+0x514>
 800855e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008566:	2b00      	cmp	r3, #0
 8008568:	d008      	beq.n	800857c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f969 	bl	8008842 <UART_EndTransmit_IT>
    return;
 8008570:	e004      	b.n	800857c <HAL_UART_IRQHandler+0x514>
    return;
 8008572:	bf00      	nop
 8008574:	e002      	b.n	800857c <HAL_UART_IRQHandler+0x514>
      return;
 8008576:	bf00      	nop
 8008578:	e000      	b.n	800857c <HAL_UART_IRQHandler+0x514>
      return;
 800857a:	bf00      	nop
  }
}
 800857c:	37e8      	adds	r7, #232	; 0xe8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop

08008584 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b090      	sub	sp, #64	; 0x40
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	603b      	str	r3, [r7, #0]
 80085e4:	4613      	mov	r3, r2
 80085e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085e8:	e050      	b.n	800868c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f0:	d04c      	beq.n	800868c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80085f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d007      	beq.n	8008608 <UART_WaitOnFlagUntilTimeout+0x30>
 80085f8:	f7f9 fc48 	bl	8001e8c <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008604:	429a      	cmp	r2, r3
 8008606:	d241      	bcs.n	800868c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	330c      	adds	r3, #12
 800860e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008612:	e853 3f00 	ldrex	r3, [r3]
 8008616:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800861e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	330c      	adds	r3, #12
 8008626:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008628:	637a      	str	r2, [r7, #52]	; 0x34
 800862a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800862e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e5      	bne.n	8008608 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3314      	adds	r3, #20
 8008642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	613b      	str	r3, [r7, #16]
   return(result);
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	f023 0301 	bic.w	r3, r3, #1
 8008652:	63bb      	str	r3, [r7, #56]	; 0x38
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3314      	adds	r3, #20
 800865a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800865c:	623a      	str	r2, [r7, #32]
 800865e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008660:	69f9      	ldr	r1, [r7, #28]
 8008662:	6a3a      	ldr	r2, [r7, #32]
 8008664:	e841 2300 	strex	r3, r2, [r1]
 8008668:	61bb      	str	r3, [r7, #24]
   return(result);
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e5      	bne.n	800863c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2220      	movs	r2, #32
 8008674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2220      	movs	r2, #32
 800867c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e00f      	b.n	80086ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	4013      	ands	r3, r2
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	429a      	cmp	r2, r3
 800869a:	bf0c      	ite	eq
 800869c:	2301      	moveq	r3, #1
 800869e:	2300      	movne	r3, #0
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	461a      	mov	r2, r3
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d09f      	beq.n	80085ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3740      	adds	r7, #64	; 0x40
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b095      	sub	sp, #84	; 0x54
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	330c      	adds	r3, #12
 80086c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c6:	e853 3f00 	ldrex	r3, [r3]
 80086ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	330c      	adds	r3, #12
 80086da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086dc:	643a      	str	r2, [r7, #64]	; 0x40
 80086de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086e4:	e841 2300 	strex	r3, r2, [r1]
 80086e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1e5      	bne.n	80086bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3314      	adds	r3, #20
 80086f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	e853 3f00 	ldrex	r3, [r3]
 80086fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	f023 0301 	bic.w	r3, r3, #1
 8008706:	64bb      	str	r3, [r7, #72]	; 0x48
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3314      	adds	r3, #20
 800870e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008710:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008718:	e841 2300 	strex	r3, r2, [r1]
 800871c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1e5      	bne.n	80086f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008728:	2b01      	cmp	r3, #1
 800872a:	d119      	bne.n	8008760 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	330c      	adds	r3, #12
 8008732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	e853 3f00 	ldrex	r3, [r3]
 800873a:	60bb      	str	r3, [r7, #8]
   return(result);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	f023 0310 	bic.w	r3, r3, #16
 8008742:	647b      	str	r3, [r7, #68]	; 0x44
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	330c      	adds	r3, #12
 800874a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800874c:	61ba      	str	r2, [r7, #24]
 800874e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008750:	6979      	ldr	r1, [r7, #20]
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	e841 2300 	strex	r3, r2, [r1]
 8008758:	613b      	str	r3, [r7, #16]
   return(result);
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e5      	bne.n	800872c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2220      	movs	r2, #32
 8008764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800876e:	bf00      	nop
 8008770:	3754      	adds	r7, #84	; 0x54
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008786:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f7ff ff09 	bl	80085ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800879a:	bf00      	nop
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087a2:	b480      	push	{r7}
 80087a4:	b085      	sub	sp, #20
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b21      	cmp	r3, #33	; 0x21
 80087b4:	d13e      	bne.n	8008834 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087be:	d114      	bne.n	80087ea <UART_Transmit_IT+0x48>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d110      	bne.n	80087ea <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a1b      	ldr	r3, [r3, #32]
 80087cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	1c9a      	adds	r2, r3, #2
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	621a      	str	r2, [r3, #32]
 80087e8:	e008      	b.n	80087fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	1c59      	adds	r1, r3, #1
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	6211      	str	r1, [r2, #32]
 80087f4:	781a      	ldrb	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008800:	b29b      	uxth	r3, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	b29b      	uxth	r3, r3
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	4619      	mov	r1, r3
 800880a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10f      	bne.n	8008830 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68da      	ldr	r2, [r3, #12]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800881e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800882e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008830:	2300      	movs	r3, #0
 8008832:	e000      	b.n	8008836 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008834:	2302      	movs	r3, #2
  }
}
 8008836:	4618      	mov	r0, r3
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b082      	sub	sp, #8
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68da      	ldr	r2, [r3, #12]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008858:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2220      	movs	r2, #32
 800885e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7ff fe8e 	bl	8008584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b08c      	sub	sp, #48	; 0x30
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b22      	cmp	r3, #34	; 0x22
 8008884:	f040 80ab 	bne.w	80089de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008890:	d117      	bne.n	80088c2 <UART_Receive_IT+0x50>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d113      	bne.n	80088c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800889a:	2300      	movs	r3, #0
 800889c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ba:	1c9a      	adds	r2, r3, #2
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	629a      	str	r2, [r3, #40]	; 0x28
 80088c0:	e026      	b.n	8008910 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80088c8:	2300      	movs	r3, #0
 80088ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d4:	d007      	beq.n	80088e6 <UART_Receive_IT+0x74>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10a      	bne.n	80088f4 <UART_Receive_IT+0x82>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d106      	bne.n	80088f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f0:	701a      	strb	r2, [r3, #0]
 80088f2:	e008      	b.n	8008906 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008900:	b2da      	uxtb	r2, r3
 8008902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008904:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890a:	1c5a      	adds	r2, r3, #1
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008914:	b29b      	uxth	r3, r3
 8008916:	3b01      	subs	r3, #1
 8008918:	b29b      	uxth	r3, r3
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	4619      	mov	r1, r3
 800891e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008920:	2b00      	cmp	r3, #0
 8008922:	d15a      	bne.n	80089da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68da      	ldr	r2, [r3, #12]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 0220 	bic.w	r2, r2, #32
 8008932:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68da      	ldr	r2, [r3, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008942:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	695a      	ldr	r2, [r3, #20]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 0201 	bic.w	r2, r2, #1
 8008952:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2220      	movs	r2, #32
 8008958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008960:	2b01      	cmp	r3, #1
 8008962:	d135      	bne.n	80089d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	330c      	adds	r3, #12
 8008970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	e853 3f00 	ldrex	r3, [r3]
 8008978:	613b      	str	r3, [r7, #16]
   return(result);
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	f023 0310 	bic.w	r3, r3, #16
 8008980:	627b      	str	r3, [r7, #36]	; 0x24
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	330c      	adds	r3, #12
 8008988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898a:	623a      	str	r2, [r7, #32]
 800898c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898e:	69f9      	ldr	r1, [r7, #28]
 8008990:	6a3a      	ldr	r2, [r7, #32]
 8008992:	e841 2300 	strex	r3, r2, [r1]
 8008996:	61bb      	str	r3, [r7, #24]
   return(result);
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1e5      	bne.n	800896a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0310 	and.w	r3, r3, #16
 80089a8:	2b10      	cmp	r3, #16
 80089aa:	d10a      	bne.n	80089c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7ff fdf9 	bl	80085c0 <HAL_UARTEx_RxEventCallback>
 80089ce:	e002      	b.n	80089d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7ff fde1 	bl	8008598 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	e002      	b.n	80089e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	e000      	b.n	80089e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80089de:	2302      	movs	r3, #2
  }
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3730      	adds	r7, #48	; 0x30
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	b09f      	sub	sp, #124	; 0x7c
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80089fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089fe:	68d9      	ldr	r1, [r3, #12]
 8008a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	ea40 0301 	orr.w	r3, r0, r1
 8008a08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	431a      	orrs	r2, r3
 8008a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a1c:	69db      	ldr	r3, [r3, #28]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a2c:	f021 010c 	bic.w	r1, r1, #12
 8008a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a36:	430b      	orrs	r3, r1
 8008a38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a46:	6999      	ldr	r1, [r3, #24]
 8008a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	ea40 0301 	orr.w	r3, r0, r1
 8008a50:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	4bc5      	ldr	r3, [pc, #788]	; (8008d6c <UART_SetConfig+0x384>)
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d004      	beq.n	8008a66 <UART_SetConfig+0x7e>
 8008a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	4bc3      	ldr	r3, [pc, #780]	; (8008d70 <UART_SetConfig+0x388>)
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d103      	bne.n	8008a6e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a66:	f7ff f9c7 	bl	8007df8 <HAL_RCC_GetPCLK2Freq>
 8008a6a:	6778      	str	r0, [r7, #116]	; 0x74
 8008a6c:	e002      	b.n	8008a74 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a6e:	f7ff f9af 	bl	8007dd0 <HAL_RCC_GetPCLK1Freq>
 8008a72:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a7c:	f040 80b6 	bne.w	8008bec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a82:	461c      	mov	r4, r3
 8008a84:	f04f 0500 	mov.w	r5, #0
 8008a88:	4622      	mov	r2, r4
 8008a8a:	462b      	mov	r3, r5
 8008a8c:	1891      	adds	r1, r2, r2
 8008a8e:	6439      	str	r1, [r7, #64]	; 0x40
 8008a90:	415b      	adcs	r3, r3
 8008a92:	647b      	str	r3, [r7, #68]	; 0x44
 8008a94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a98:	1912      	adds	r2, r2, r4
 8008a9a:	eb45 0303 	adc.w	r3, r5, r3
 8008a9e:	f04f 0000 	mov.w	r0, #0
 8008aa2:	f04f 0100 	mov.w	r1, #0
 8008aa6:	00d9      	lsls	r1, r3, #3
 8008aa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008aac:	00d0      	lsls	r0, r2, #3
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	1911      	adds	r1, r2, r4
 8008ab4:	6639      	str	r1, [r7, #96]	; 0x60
 8008ab6:	416b      	adcs	r3, r5
 8008ab8:	667b      	str	r3, [r7, #100]	; 0x64
 8008aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f04f 0300 	mov.w	r3, #0
 8008ac4:	1891      	adds	r1, r2, r2
 8008ac6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ac8:	415b      	adcs	r3, r3
 8008aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008acc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ad0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008ad4:	f7f7 fbcc 	bl	8000270 <__aeabi_uldivmod>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	4ba5      	ldr	r3, [pc, #660]	; (8008d74 <UART_SetConfig+0x38c>)
 8008ade:	fba3 2302 	umull	r2, r3, r3, r2
 8008ae2:	095b      	lsrs	r3, r3, #5
 8008ae4:	011e      	lsls	r6, r3, #4
 8008ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ae8:	461c      	mov	r4, r3
 8008aea:	f04f 0500 	mov.w	r5, #0
 8008aee:	4622      	mov	r2, r4
 8008af0:	462b      	mov	r3, r5
 8008af2:	1891      	adds	r1, r2, r2
 8008af4:	6339      	str	r1, [r7, #48]	; 0x30
 8008af6:	415b      	adcs	r3, r3
 8008af8:	637b      	str	r3, [r7, #52]	; 0x34
 8008afa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008afe:	1912      	adds	r2, r2, r4
 8008b00:	eb45 0303 	adc.w	r3, r5, r3
 8008b04:	f04f 0000 	mov.w	r0, #0
 8008b08:	f04f 0100 	mov.w	r1, #0
 8008b0c:	00d9      	lsls	r1, r3, #3
 8008b0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b12:	00d0      	lsls	r0, r2, #3
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	1911      	adds	r1, r2, r4
 8008b1a:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b1c:	416b      	adcs	r3, r5
 8008b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	461a      	mov	r2, r3
 8008b26:	f04f 0300 	mov.w	r3, #0
 8008b2a:	1891      	adds	r1, r2, r2
 8008b2c:	62b9      	str	r1, [r7, #40]	; 0x28
 8008b2e:	415b      	adcs	r3, r3
 8008b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b36:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008b3a:	f7f7 fb99 	bl	8000270 <__aeabi_uldivmod>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	4b8c      	ldr	r3, [pc, #560]	; (8008d74 <UART_SetConfig+0x38c>)
 8008b44:	fba3 1302 	umull	r1, r3, r3, r2
 8008b48:	095b      	lsrs	r3, r3, #5
 8008b4a:	2164      	movs	r1, #100	; 0x64
 8008b4c:	fb01 f303 	mul.w	r3, r1, r3
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	3332      	adds	r3, #50	; 0x32
 8008b56:	4a87      	ldr	r2, [pc, #540]	; (8008d74 <UART_SetConfig+0x38c>)
 8008b58:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5c:	095b      	lsrs	r3, r3, #5
 8008b5e:	005b      	lsls	r3, r3, #1
 8008b60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b64:	441e      	add	r6, r3
 8008b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f04f 0100 	mov.w	r1, #0
 8008b6e:	4602      	mov	r2, r0
 8008b70:	460b      	mov	r3, r1
 8008b72:	1894      	adds	r4, r2, r2
 8008b74:	623c      	str	r4, [r7, #32]
 8008b76:	415b      	adcs	r3, r3
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24
 8008b7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b7e:	1812      	adds	r2, r2, r0
 8008b80:	eb41 0303 	adc.w	r3, r1, r3
 8008b84:	f04f 0400 	mov.w	r4, #0
 8008b88:	f04f 0500 	mov.w	r5, #0
 8008b8c:	00dd      	lsls	r5, r3, #3
 8008b8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b92:	00d4      	lsls	r4, r2, #3
 8008b94:	4622      	mov	r2, r4
 8008b96:	462b      	mov	r3, r5
 8008b98:	1814      	adds	r4, r2, r0
 8008b9a:	653c      	str	r4, [r7, #80]	; 0x50
 8008b9c:	414b      	adcs	r3, r1
 8008b9e:	657b      	str	r3, [r7, #84]	; 0x54
 8008ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	f04f 0300 	mov.w	r3, #0
 8008baa:	1891      	adds	r1, r2, r2
 8008bac:	61b9      	str	r1, [r7, #24]
 8008bae:	415b      	adcs	r3, r3
 8008bb0:	61fb      	str	r3, [r7, #28]
 8008bb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008bb6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008bba:	f7f7 fb59 	bl	8000270 <__aeabi_uldivmod>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4b6c      	ldr	r3, [pc, #432]	; (8008d74 <UART_SetConfig+0x38c>)
 8008bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8008bc8:	095b      	lsrs	r3, r3, #5
 8008bca:	2164      	movs	r1, #100	; 0x64
 8008bcc:	fb01 f303 	mul.w	r3, r1, r3
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	00db      	lsls	r3, r3, #3
 8008bd4:	3332      	adds	r3, #50	; 0x32
 8008bd6:	4a67      	ldr	r2, [pc, #412]	; (8008d74 <UART_SetConfig+0x38c>)
 8008bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bdc:	095b      	lsrs	r3, r3, #5
 8008bde:	f003 0207 	and.w	r2, r3, #7
 8008be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4432      	add	r2, r6
 8008be8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008bea:	e0b9      	b.n	8008d60 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bee:	461c      	mov	r4, r3
 8008bf0:	f04f 0500 	mov.w	r5, #0
 8008bf4:	4622      	mov	r2, r4
 8008bf6:	462b      	mov	r3, r5
 8008bf8:	1891      	adds	r1, r2, r2
 8008bfa:	6139      	str	r1, [r7, #16]
 8008bfc:	415b      	adcs	r3, r3
 8008bfe:	617b      	str	r3, [r7, #20]
 8008c00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c04:	1912      	adds	r2, r2, r4
 8008c06:	eb45 0303 	adc.w	r3, r5, r3
 8008c0a:	f04f 0000 	mov.w	r0, #0
 8008c0e:	f04f 0100 	mov.w	r1, #0
 8008c12:	00d9      	lsls	r1, r3, #3
 8008c14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c18:	00d0      	lsls	r0, r2, #3
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	eb12 0804 	adds.w	r8, r2, r4
 8008c22:	eb43 0905 	adc.w	r9, r3, r5
 8008c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f04f 0100 	mov.w	r1, #0
 8008c30:	f04f 0200 	mov.w	r2, #0
 8008c34:	f04f 0300 	mov.w	r3, #0
 8008c38:	008b      	lsls	r3, r1, #2
 8008c3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c3e:	0082      	lsls	r2, r0, #2
 8008c40:	4640      	mov	r0, r8
 8008c42:	4649      	mov	r1, r9
 8008c44:	f7f7 fb14 	bl	8000270 <__aeabi_uldivmod>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4b49      	ldr	r3, [pc, #292]	; (8008d74 <UART_SetConfig+0x38c>)
 8008c4e:	fba3 2302 	umull	r2, r3, r3, r2
 8008c52:	095b      	lsrs	r3, r3, #5
 8008c54:	011e      	lsls	r6, r3, #4
 8008c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f04f 0100 	mov.w	r1, #0
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	1894      	adds	r4, r2, r2
 8008c64:	60bc      	str	r4, [r7, #8]
 8008c66:	415b      	adcs	r3, r3
 8008c68:	60fb      	str	r3, [r7, #12]
 8008c6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c6e:	1812      	adds	r2, r2, r0
 8008c70:	eb41 0303 	adc.w	r3, r1, r3
 8008c74:	f04f 0400 	mov.w	r4, #0
 8008c78:	f04f 0500 	mov.w	r5, #0
 8008c7c:	00dd      	lsls	r5, r3, #3
 8008c7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c82:	00d4      	lsls	r4, r2, #3
 8008c84:	4622      	mov	r2, r4
 8008c86:	462b      	mov	r3, r5
 8008c88:	1814      	adds	r4, r2, r0
 8008c8a:	64bc      	str	r4, [r7, #72]	; 0x48
 8008c8c:	414b      	adcs	r3, r1
 8008c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f04f 0100 	mov.w	r1, #0
 8008c9a:	f04f 0200 	mov.w	r2, #0
 8008c9e:	f04f 0300 	mov.w	r3, #0
 8008ca2:	008b      	lsls	r3, r1, #2
 8008ca4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008ca8:	0082      	lsls	r2, r0, #2
 8008caa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008cae:	f7f7 fadf 	bl	8000270 <__aeabi_uldivmod>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	4b2f      	ldr	r3, [pc, #188]	; (8008d74 <UART_SetConfig+0x38c>)
 8008cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8008cbc:	095b      	lsrs	r3, r3, #5
 8008cbe:	2164      	movs	r1, #100	; 0x64
 8008cc0:	fb01 f303 	mul.w	r3, r1, r3
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	011b      	lsls	r3, r3, #4
 8008cc8:	3332      	adds	r3, #50	; 0x32
 8008cca:	4a2a      	ldr	r2, [pc, #168]	; (8008d74 <UART_SetConfig+0x38c>)
 8008ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd0:	095b      	lsrs	r3, r3, #5
 8008cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cd6:	441e      	add	r6, r3
 8008cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f04f 0100 	mov.w	r1, #0
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	1894      	adds	r4, r2, r2
 8008ce6:	603c      	str	r4, [r7, #0]
 8008ce8:	415b      	adcs	r3, r3
 8008cea:	607b      	str	r3, [r7, #4]
 8008cec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cf0:	1812      	adds	r2, r2, r0
 8008cf2:	eb41 0303 	adc.w	r3, r1, r3
 8008cf6:	f04f 0400 	mov.w	r4, #0
 8008cfa:	f04f 0500 	mov.w	r5, #0
 8008cfe:	00dd      	lsls	r5, r3, #3
 8008d00:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d04:	00d4      	lsls	r4, r2, #3
 8008d06:	4622      	mov	r2, r4
 8008d08:	462b      	mov	r3, r5
 8008d0a:	eb12 0a00 	adds.w	sl, r2, r0
 8008d0e:	eb43 0b01 	adc.w	fp, r3, r1
 8008d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f04f 0100 	mov.w	r1, #0
 8008d1c:	f04f 0200 	mov.w	r2, #0
 8008d20:	f04f 0300 	mov.w	r3, #0
 8008d24:	008b      	lsls	r3, r1, #2
 8008d26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d2a:	0082      	lsls	r2, r0, #2
 8008d2c:	4650      	mov	r0, sl
 8008d2e:	4659      	mov	r1, fp
 8008d30:	f7f7 fa9e 	bl	8000270 <__aeabi_uldivmod>
 8008d34:	4602      	mov	r2, r0
 8008d36:	460b      	mov	r3, r1
 8008d38:	4b0e      	ldr	r3, [pc, #56]	; (8008d74 <UART_SetConfig+0x38c>)
 8008d3a:	fba3 1302 	umull	r1, r3, r3, r2
 8008d3e:	095b      	lsrs	r3, r3, #5
 8008d40:	2164      	movs	r1, #100	; 0x64
 8008d42:	fb01 f303 	mul.w	r3, r1, r3
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	011b      	lsls	r3, r3, #4
 8008d4a:	3332      	adds	r3, #50	; 0x32
 8008d4c:	4a09      	ldr	r2, [pc, #36]	; (8008d74 <UART_SetConfig+0x38c>)
 8008d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d52:	095b      	lsrs	r3, r3, #5
 8008d54:	f003 020f 	and.w	r2, r3, #15
 8008d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4432      	add	r2, r6
 8008d5e:	609a      	str	r2, [r3, #8]
}
 8008d60:	bf00      	nop
 8008d62:	377c      	adds	r7, #124	; 0x7c
 8008d64:	46bd      	mov	sp, r7
 8008d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6a:	bf00      	nop
 8008d6c:	40011000 	.word	0x40011000
 8008d70:	40011400 	.word	0x40011400
 8008d74:	51eb851f 	.word	0x51eb851f

08008d78 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d90:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	4b20      	ldr	r3, [pc, #128]	; (8008e18 <FSMC_NORSRAM_Init+0xa0>)
 8008d96:	4013      	ands	r3, r2
 8008d98:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008da2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8008da8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8008dae:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008db4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8008dba:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8008dc0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008dc6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008dcc:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008dd2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008dd8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8008dde:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8008de4:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	2b08      	cmp	r3, #8
 8008df2:	d103      	bne.n	8008dfc <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dfa:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	68f9      	ldr	r1, [r7, #12]
 8008e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	fff00080 	.word	0xfff00080

08008e1c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b087      	sub	sp, #28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	1c5a      	adds	r2, r3, #1
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e36:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008e3e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008e4a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008e52:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008e5a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008e64:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	3b02      	subs	r3, #2
 8008e6c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008e6e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008e74:	4313      	orrs	r3, r2
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6979      	ldr	r1, [r7, #20]
 8008e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	371c      	adds	r7, #28
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
	...

08008e98 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008eb0:	d122      	bne.n	8008ef8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eba:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008ebc:	697a      	ldr	r2, [r7, #20]
 8008ebe:	4b15      	ldr	r3, [pc, #84]	; (8008f14 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008ece:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008ed6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008ede:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008ee4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	6979      	ldr	r1, [r7, #20]
 8008ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008ef6:	e005      	b.n	8008f04 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	371c      	adds	r7, #28
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	cff00000 	.word	0xcff00000

08008f18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f18:	b084      	sub	sp, #16
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	f107 001c 	add.w	r0, r7, #28
 8008f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d122      	bne.n	8008f76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d105      	bne.n	8008f6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f9a0 	bl	80092b0 <USB_CoreReset>
 8008f70:	4603      	mov	r3, r0
 8008f72:	73fb      	strb	r3, [r7, #15]
 8008f74:	e01a      	b.n	8008fac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f994 	bl	80092b0 <USB_CoreReset>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d106      	bne.n	8008fa0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	639a      	str	r2, [r3, #56]	; 0x38
 8008f9e:	e005      	b.n	8008fac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d10b      	bne.n	8008fca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f043 0206 	orr.w	r2, r3, #6
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	f043 0220 	orr.w	r2, r3, #32
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fd6:	b004      	add	sp, #16
 8008fd8:	4770      	bx	lr

08008fda <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b083      	sub	sp, #12
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f043 0201 	orr.w	r2, r3, #1
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	f023 0201 	bic.w	r2, r3, #1
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	460b      	mov	r3, r1
 8009028:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800902a:	2300      	movs	r3, #0
 800902c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d115      	bne.n	800906c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800904c:	2001      	movs	r0, #1
 800904e:	f7f8 ff29 	bl	8001ea4 <HAL_Delay>
      ms++;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	3301      	adds	r3, #1
 8009056:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f91a 	bl	8009292 <USB_GetMode>
 800905e:	4603      	mov	r3, r0
 8009060:	2b01      	cmp	r3, #1
 8009062:	d01e      	beq.n	80090a2 <USB_SetCurrentMode+0x84>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2b31      	cmp	r3, #49	; 0x31
 8009068:	d9f0      	bls.n	800904c <USB_SetCurrentMode+0x2e>
 800906a:	e01a      	b.n	80090a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800906c:	78fb      	ldrb	r3, [r7, #3]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d115      	bne.n	800909e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800907e:	2001      	movs	r0, #1
 8009080:	f7f8 ff10 	bl	8001ea4 <HAL_Delay>
      ms++;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	3301      	adds	r3, #1
 8009088:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f901 	bl	8009292 <USB_GetMode>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d005      	beq.n	80090a2 <USB_SetCurrentMode+0x84>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2b31      	cmp	r3, #49	; 0x31
 800909a:	d9f0      	bls.n	800907e <USB_SetCurrentMode+0x60>
 800909c:	e001      	b.n	80090a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e005      	b.n	80090ae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b32      	cmp	r3, #50	; 0x32
 80090a6:	d101      	bne.n	80090ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e000      	b.n	80090ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	019b      	lsls	r3, r3, #6
 80090ca:	f043 0220 	orr.w	r2, r3, #32
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	3301      	adds	r3, #1
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	4a08      	ldr	r2, [pc, #32]	; (80090fc <USB_FlushTxFifo+0x44>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d901      	bls.n	80090e2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e006      	b.n	80090f0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	f003 0320 	and.w	r3, r3, #32
 80090ea:	2b20      	cmp	r3, #32
 80090ec:	d0f1      	beq.n	80090d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr
 80090fc:	00030d40 	.word	0x00030d40

08009100 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009108:	2300      	movs	r3, #0
 800910a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2210      	movs	r2, #16
 8009110:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3301      	adds	r3, #1
 8009116:	60fb      	str	r3, [r7, #12]
 8009118:	4a08      	ldr	r2, [pc, #32]	; (800913c <USB_FlushRxFifo+0x3c>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d901      	bls.n	8009122 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e006      	b.n	8009130 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	f003 0310 	and.w	r3, r3, #16
 800912a:	2b10      	cmp	r3, #16
 800912c:	d0f1      	beq.n	8009112 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	00030d40 	.word	0x00030d40

08009140 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009140:	b480      	push	{r7}
 8009142:	b089      	sub	sp, #36	; 0x24
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	4611      	mov	r1, r2
 800914c:	461a      	mov	r2, r3
 800914e:	460b      	mov	r3, r1
 8009150:	71fb      	strb	r3, [r7, #7]
 8009152:	4613      	mov	r3, r2
 8009154:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800915e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009162:	2b00      	cmp	r3, #0
 8009164:	d123      	bne.n	80091ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009166:	88bb      	ldrh	r3, [r7, #4]
 8009168:	3303      	adds	r3, #3
 800916a:	089b      	lsrs	r3, r3, #2
 800916c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800916e:	2300      	movs	r3, #0
 8009170:	61bb      	str	r3, [r7, #24]
 8009172:	e018      	b.n	80091a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	031a      	lsls	r2, r3, #12
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	4413      	add	r3, r2
 800917c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009180:	461a      	mov	r2, r3
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	3301      	adds	r3, #1
 800918c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	3301      	adds	r3, #1
 8009192:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	3301      	adds	r3, #1
 8009198:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	3301      	adds	r3, #1
 800919e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	3301      	adds	r3, #1
 80091a4:	61bb      	str	r3, [r7, #24]
 80091a6:	69ba      	ldr	r2, [r7, #24]
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d3e2      	bcc.n	8009174 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3724      	adds	r7, #36	; 0x24
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80091bc:	b480      	push	{r7}
 80091be:	b08b      	sub	sp, #44	; 0x2c
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	4613      	mov	r3, r2
 80091c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80091d2:	88fb      	ldrh	r3, [r7, #6]
 80091d4:	089b      	lsrs	r3, r3, #2
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80091da:	88fb      	ldrh	r3, [r7, #6]
 80091dc:	f003 0303 	and.w	r3, r3, #3
 80091e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80091e2:	2300      	movs	r3, #0
 80091e4:	623b      	str	r3, [r7, #32]
 80091e6:	e014      	b.n	8009212 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f6:	3301      	adds	r3, #1
 80091f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fc:	3301      	adds	r3, #1
 80091fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	3301      	adds	r3, #1
 8009204:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	3301      	adds	r3, #1
 800920a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	3301      	adds	r3, #1
 8009210:	623b      	str	r3, [r7, #32]
 8009212:	6a3a      	ldr	r2, [r7, #32]
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	429a      	cmp	r2, r3
 8009218:	d3e6      	bcc.n	80091e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800921a:	8bfb      	ldrh	r3, [r7, #30]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d01e      	beq.n	800925e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009220:	2300      	movs	r3, #0
 8009222:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800922a:	461a      	mov	r2, r3
 800922c:	f107 0310 	add.w	r3, r7, #16
 8009230:	6812      	ldr	r2, [r2, #0]
 8009232:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	b2db      	uxtb	r3, r3
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	fa22 f303 	lsr.w	r3, r2, r3
 8009240:	b2da      	uxtb	r2, r3
 8009242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009244:	701a      	strb	r2, [r3, #0]
      i++;
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	3301      	adds	r3, #1
 800924a:	623b      	str	r3, [r7, #32]
      pDest++;
 800924c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924e:	3301      	adds	r3, #1
 8009250:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009252:	8bfb      	ldrh	r3, [r7, #30]
 8009254:	3b01      	subs	r3, #1
 8009256:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009258:	8bfb      	ldrh	r3, [r7, #30]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1ea      	bne.n	8009234 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009260:	4618      	mov	r0, r3
 8009262:	372c      	adds	r7, #44	; 0x2c
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	4013      	ands	r3, r2
 8009282:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009284:	68fb      	ldr	r3, [r7, #12]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009292:	b480      	push	{r7}
 8009294:	b083      	sub	sp, #12
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	f003 0301 	and.w	r3, r3, #1
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
	...

080092b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092b8:	2300      	movs	r3, #0
 80092ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3301      	adds	r3, #1
 80092c0:	60fb      	str	r3, [r7, #12]
 80092c2:	4a13      	ldr	r2, [pc, #76]	; (8009310 <USB_CoreReset+0x60>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d901      	bls.n	80092cc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e01a      	b.n	8009302 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	daf3      	bge.n	80092bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092d4:	2300      	movs	r3, #0
 80092d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	f043 0201 	orr.w	r2, r3, #1
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	3301      	adds	r3, #1
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	4a09      	ldr	r2, [pc, #36]	; (8009310 <USB_CoreReset+0x60>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d901      	bls.n	80092f4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e006      	b.n	8009302 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	f003 0301 	and.w	r3, r3, #1
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d0f1      	beq.n	80092e4 <USB_CoreReset+0x34>

  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	00030d40 	.word	0x00030d40

08009314 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009314:	b084      	sub	sp, #16
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	f107 001c 	add.w	r0, r7, #28
 8009322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009330:	461a      	mov	r2, r3
 8009332:	2300      	movs	r3, #0
 8009334:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009346:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009352:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800935e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009362:	2b00      	cmp	r3, #0
 8009364:	d018      	beq.n	8009398 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009368:	2b01      	cmp	r3, #1
 800936a:	d10a      	bne.n	8009382 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800937a:	f043 0304 	orr.w	r3, r3, #4
 800937e:	6013      	str	r3, [r2, #0]
 8009380:	e014      	b.n	80093ac <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009390:	f023 0304 	bic.w	r3, r3, #4
 8009394:	6013      	str	r3, [r2, #0]
 8009396:	e009      	b.n	80093ac <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093a6:	f023 0304 	bic.w	r3, r3, #4
 80093aa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80093ac:	2110      	movs	r1, #16
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f7ff fe82 	bl	80090b8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7ff fea3 	bl	8009100 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80093ba:	2300      	movs	r3, #0
 80093bc:	60fb      	str	r3, [r7, #12]
 80093be:	e015      	b.n	80093ec <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	015a      	lsls	r2, r3, #5
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093cc:	461a      	mov	r2, r3
 80093ce:	f04f 33ff 	mov.w	r3, #4294967295
 80093d2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093e0:	461a      	mov	r2, r3
 80093e2:	2300      	movs	r3, #0
 80093e4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3301      	adds	r3, #1
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	6a3b      	ldr	r3, [r7, #32]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d3e5      	bcc.n	80093c0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009400:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00b      	beq.n	8009426 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009414:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a13      	ldr	r2, [pc, #76]	; (8009468 <USB_HostInit+0x154>)
 800941a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a13      	ldr	r2, [pc, #76]	; (800946c <USB_HostInit+0x158>)
 8009420:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009424:	e009      	b.n	800943a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2280      	movs	r2, #128	; 0x80
 800942a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a10      	ldr	r2, [pc, #64]	; (8009470 <USB_HostInit+0x15c>)
 8009430:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a0f      	ldr	r2, [pc, #60]	; (8009474 <USB_HostInit+0x160>)
 8009436:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800943a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943c:	2b00      	cmp	r3, #0
 800943e:	d105      	bne.n	800944c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	f043 0210 	orr.w	r2, r3, #16
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	699a      	ldr	r2, [r3, #24]
 8009450:	4b09      	ldr	r3, [pc, #36]	; (8009478 <USB_HostInit+0x164>)
 8009452:	4313      	orrs	r3, r2
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009464:	b004      	add	sp, #16
 8009466:	4770      	bx	lr
 8009468:	01000200 	.word	0x01000200
 800946c:	00e00300 	.word	0x00e00300
 8009470:	00600080 	.word	0x00600080
 8009474:	004000e0 	.word	0x004000e0
 8009478:	a3200008 	.word	0xa3200008

0800947c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800949a:	f023 0303 	bic.w	r3, r3, #3
 800949e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	78fb      	ldrb	r3, [r7, #3]
 80094aa:	f003 0303 	and.w	r3, r3, #3
 80094ae:	68f9      	ldr	r1, [r7, #12]
 80094b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80094b4:	4313      	orrs	r3, r2
 80094b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80094b8:	78fb      	ldrb	r3, [r7, #3]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d107      	bne.n	80094ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094c4:	461a      	mov	r2, r3
 80094c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80094ca:	6053      	str	r3, [r2, #4]
 80094cc:	e009      	b.n	80094e2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80094ce:	78fb      	ldrb	r3, [r7, #3]
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d106      	bne.n	80094e2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094da:	461a      	mov	r2, r3
 80094dc:	f241 7370 	movw	r3, #6000	; 0x1770
 80094e0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80094fc:	2300      	movs	r3, #0
 80094fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009510:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800951a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800951e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009520:	2064      	movs	r0, #100	; 0x64
 8009522:	f7f8 fcbf 	bl	8001ea4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800952e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009532:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009534:	200a      	movs	r0, #10
 8009536:	f7f8 fcb5 	bl	8001ea4 <HAL_Delay>

  return HAL_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009554:	2300      	movs	r3, #0
 8009556:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009568:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d109      	bne.n	8009588 <USB_DriveVbus+0x44>
 8009574:	78fb      	ldrb	r3, [r7, #3]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d106      	bne.n	8009588 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009582:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009586:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800958e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009592:	d109      	bne.n	80095a8 <USB_DriveVbus+0x64>
 8009594:	78fb      	ldrb	r3, [r7, #3]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80095a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095a6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b085      	sub	sp, #20
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80095c2:	2300      	movs	r3, #0
 80095c4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	0c5b      	lsrs	r3, r3, #17
 80095d4:	f003 0303 	and.w	r3, r3, #3
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	b29b      	uxth	r3, r3
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
	...

08009608 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b088      	sub	sp, #32
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	4608      	mov	r0, r1
 8009612:	4611      	mov	r1, r2
 8009614:	461a      	mov	r2, r3
 8009616:	4603      	mov	r3, r0
 8009618:	70fb      	strb	r3, [r7, #3]
 800961a:	460b      	mov	r3, r1
 800961c:	70bb      	strb	r3, [r7, #2]
 800961e:	4613      	mov	r3, r2
 8009620:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800962a:	78fb      	ldrb	r3, [r7, #3]
 800962c:	015a      	lsls	r2, r3, #5
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	4413      	add	r3, r2
 8009632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009636:	461a      	mov	r2, r3
 8009638:	f04f 33ff 	mov.w	r3, #4294967295
 800963c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800963e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009642:	2b03      	cmp	r3, #3
 8009644:	d87e      	bhi.n	8009744 <USB_HC_Init+0x13c>
 8009646:	a201      	add	r2, pc, #4	; (adr r2, 800964c <USB_HC_Init+0x44>)
 8009648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964c:	0800965d 	.word	0x0800965d
 8009650:	08009707 	.word	0x08009707
 8009654:	0800965d 	.word	0x0800965d
 8009658:	080096c9 	.word	0x080096c9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800965c:	78fb      	ldrb	r3, [r7, #3]
 800965e:	015a      	lsls	r2, r3, #5
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	4413      	add	r3, r2
 8009664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009668:	461a      	mov	r2, r3
 800966a:	f240 439d 	movw	r3, #1181	; 0x49d
 800966e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009670:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009674:	2b00      	cmp	r3, #0
 8009676:	da10      	bge.n	800969a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009678:	78fb      	ldrb	r3, [r7, #3]
 800967a:	015a      	lsls	r2, r3, #5
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	4413      	add	r3, r2
 8009680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	78fa      	ldrb	r2, [r7, #3]
 8009688:	0151      	lsls	r1, r2, #5
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	440a      	add	r2, r1
 800968e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009696:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009698:	e057      	b.n	800974a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800969e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d051      	beq.n	800974a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80096a6:	78fb      	ldrb	r3, [r7, #3]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	78fa      	ldrb	r2, [r7, #3]
 80096b6:	0151      	lsls	r1, r2, #5
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	440a      	add	r2, r1
 80096bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80096c4:	60d3      	str	r3, [r2, #12]
      break;
 80096c6:	e040      	b.n	800974a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80096c8:	78fb      	ldrb	r3, [r7, #3]
 80096ca:	015a      	lsls	r2, r3, #5
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	4413      	add	r3, r2
 80096d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096d4:	461a      	mov	r2, r3
 80096d6:	f240 639d 	movw	r3, #1693	; 0x69d
 80096da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80096dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	da34      	bge.n	800974e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80096e4:	78fb      	ldrb	r3, [r7, #3]
 80096e6:	015a      	lsls	r2, r3, #5
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	4413      	add	r3, r2
 80096ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	78fa      	ldrb	r2, [r7, #3]
 80096f4:	0151      	lsls	r1, r2, #5
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	440a      	add	r2, r1
 80096fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009702:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009704:	e023      	b.n	800974e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	015a      	lsls	r2, r3, #5
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	4413      	add	r3, r2
 800970e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009712:	461a      	mov	r2, r3
 8009714:	f240 2325 	movw	r3, #549	; 0x225
 8009718:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800971a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800971e:	2b00      	cmp	r3, #0
 8009720:	da17      	bge.n	8009752 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009722:	78fb      	ldrb	r3, [r7, #3]
 8009724:	015a      	lsls	r2, r3, #5
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	4413      	add	r3, r2
 800972a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	78fa      	ldrb	r2, [r7, #3]
 8009732:	0151      	lsls	r1, r2, #5
 8009734:	693a      	ldr	r2, [r7, #16]
 8009736:	440a      	add	r2, r1
 8009738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800973c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009740:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009742:	e006      	b.n	8009752 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	77fb      	strb	r3, [r7, #31]
      break;
 8009748:	e004      	b.n	8009754 <USB_HC_Init+0x14c>
      break;
 800974a:	bf00      	nop
 800974c:	e002      	b.n	8009754 <USB_HC_Init+0x14c>
      break;
 800974e:	bf00      	nop
 8009750:	e000      	b.n	8009754 <USB_HC_Init+0x14c>
      break;
 8009752:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800975a:	699a      	ldr	r2, [r3, #24]
 800975c:	78fb      	ldrb	r3, [r7, #3]
 800975e:	f003 030f 	and.w	r3, r3, #15
 8009762:	2101      	movs	r1, #1
 8009764:	fa01 f303 	lsl.w	r3, r1, r3
 8009768:	6939      	ldr	r1, [r7, #16]
 800976a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800976e:	4313      	orrs	r3, r2
 8009770:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800977e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009782:	2b00      	cmp	r3, #0
 8009784:	da03      	bge.n	800978e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800978a:	61bb      	str	r3, [r7, #24]
 800978c:	e001      	b.n	8009792 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800978e:	2300      	movs	r3, #0
 8009790:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7ff ff0f 	bl	80095b6 <USB_GetHostSpeed>
 8009798:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800979a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d106      	bne.n	80097b0 <USB_HC_Init+0x1a8>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d003      	beq.n	80097b0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80097a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80097ac:	617b      	str	r3, [r7, #20]
 80097ae:	e001      	b.n	80097b4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80097b4:	787b      	ldrb	r3, [r7, #1]
 80097b6:	059b      	lsls	r3, r3, #22
 80097b8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80097bc:	78bb      	ldrb	r3, [r7, #2]
 80097be:	02db      	lsls	r3, r3, #11
 80097c0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80097c4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80097c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80097ca:	049b      	lsls	r3, r3, #18
 80097cc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80097d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80097d2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80097d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80097d8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80097de:	78fb      	ldrb	r3, [r7, #3]
 80097e0:	0159      	lsls	r1, r3, #5
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	440b      	add	r3, r1
 80097e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097ea:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80097f0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80097f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80097f6:	2b03      	cmp	r3, #3
 80097f8:	d10f      	bne.n	800981a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80097fa:	78fb      	ldrb	r3, [r7, #3]
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	4413      	add	r3, r2
 8009802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	78fa      	ldrb	r2, [r7, #3]
 800980a:	0151      	lsls	r1, r2, #5
 800980c:	693a      	ldr	r2, [r7, #16]
 800980e:	440a      	add	r2, r1
 8009810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009814:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009818:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800981a:	7ffb      	ldrb	r3, [r7, #31]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3720      	adds	r7, #32
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b08c      	sub	sp, #48	; 0x30
 8009828:	af02      	add	r7, sp, #8
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	4613      	mov	r3, r2
 8009830:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	785b      	ldrb	r3, [r3, #1]
 800983a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800983c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009840:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800984a:	2b00      	cmp	r3, #0
 800984c:	d02d      	beq.n	80098aa <USB_HC_StartXfer+0x86>
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	791b      	ldrb	r3, [r3, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d129      	bne.n	80098aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009856:	79fb      	ldrb	r3, [r7, #7]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d117      	bne.n	800988c <USB_HC_StartXfer+0x68>
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	79db      	ldrb	r3, [r3, #7]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d003      	beq.n	800986c <USB_HC_StartXfer+0x48>
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	79db      	ldrb	r3, [r3, #7]
 8009868:	2b02      	cmp	r3, #2
 800986a:	d10f      	bne.n	800988c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	6a3b      	ldr	r3, [r7, #32]
 8009872:	4413      	add	r3, r2
 8009874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	69fa      	ldr	r2, [r7, #28]
 800987c:	0151      	lsls	r1, r2, #5
 800987e:	6a3a      	ldr	r2, [r7, #32]
 8009880:	440a      	add	r2, r1
 8009882:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800988a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800988c:	79fb      	ldrb	r3, [r7, #7]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d10b      	bne.n	80098aa <USB_HC_StartXfer+0x86>
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	795b      	ldrb	r3, [r3, #5]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d107      	bne.n	80098aa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	785b      	ldrb	r3, [r3, #1]
 800989e:	4619      	mov	r1, r3
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f000 fa2f 	bl	8009d04 <USB_DoPing>
      return HAL_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	e0f8      	b.n	8009a9c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	695b      	ldr	r3, [r3, #20]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d018      	beq.n	80098e4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	8912      	ldrh	r2, [r2, #8]
 80098ba:	4413      	add	r3, r2
 80098bc:	3b01      	subs	r3, #1
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	8912      	ldrh	r2, [r2, #8]
 80098c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80098c6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80098c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80098ca:	8b7b      	ldrh	r3, [r7, #26]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d90b      	bls.n	80098e8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80098d0:	8b7b      	ldrh	r3, [r7, #26]
 80098d2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80098d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	8912      	ldrh	r2, [r2, #8]
 80098da:	fb02 f203 	mul.w	r2, r2, r3
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	611a      	str	r2, [r3, #16]
 80098e2:	e001      	b.n	80098e8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80098e4:	2301      	movs	r3, #1
 80098e6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	78db      	ldrb	r3, [r3, #3]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d007      	beq.n	8009900 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80098f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	8912      	ldrh	r2, [r2, #8]
 80098f6:	fb02 f203 	mul.w	r2, r2, r3
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	611a      	str	r2, [r3, #16]
 80098fe:	e003      	b.n	8009908 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	695a      	ldr	r2, [r3, #20]
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009910:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009912:	04d9      	lsls	r1, r3, #19
 8009914:	4b63      	ldr	r3, [pc, #396]	; (8009aa4 <USB_HC_StartXfer+0x280>)
 8009916:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009918:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	7a9b      	ldrb	r3, [r3, #10]
 800991e:	075b      	lsls	r3, r3, #29
 8009920:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009924:	69f9      	ldr	r1, [r7, #28]
 8009926:	0148      	lsls	r0, r1, #5
 8009928:	6a39      	ldr	r1, [r7, #32]
 800992a:	4401      	add	r1, r0
 800992c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009930:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009932:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009934:	79fb      	ldrb	r3, [r7, #7]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d009      	beq.n	800994e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	68d9      	ldr	r1, [r3, #12]
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	4413      	add	r3, r2
 8009946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800994a:	460a      	mov	r2, r1
 800994c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	bf0c      	ite	eq
 800995e:	2301      	moveq	r3, #1
 8009960:	2300      	movne	r3, #0
 8009962:	b2db      	uxtb	r3, r3
 8009964:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	4413      	add	r3, r2
 800996e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	69fa      	ldr	r2, [r7, #28]
 8009976:	0151      	lsls	r1, r2, #5
 8009978:	6a3a      	ldr	r2, [r7, #32]
 800997a:	440a      	add	r2, r1
 800997c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009980:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009984:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	015a      	lsls	r2, r3, #5
 800998a:	6a3b      	ldr	r3, [r7, #32]
 800998c:	4413      	add	r3, r2
 800998e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	7e7b      	ldrb	r3, [r7, #25]
 8009996:	075b      	lsls	r3, r3, #29
 8009998:	69f9      	ldr	r1, [r7, #28]
 800999a:	0148      	lsls	r0, r1, #5
 800999c:	6a39      	ldr	r1, [r7, #32]
 800999e:	4401      	add	r1, r0
 80099a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80099a4:	4313      	orrs	r3, r2
 80099a6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	015a      	lsls	r2, r3, #5
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	4413      	add	r3, r2
 80099b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80099be:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	78db      	ldrb	r3, [r3, #3]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d004      	beq.n	80099d2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099ce:	613b      	str	r3, [r7, #16]
 80099d0:	e003      	b.n	80099da <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099d8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099e0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	6a3b      	ldr	r3, [r7, #32]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ee:	461a      	mov	r2, r3
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80099f4:	79fb      	ldrb	r3, [r7, #7]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	e04e      	b.n	8009a9c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	78db      	ldrb	r3, [r3, #3]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d149      	bne.n	8009a9a <USB_HC_StartXfer+0x276>
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d045      	beq.n	8009a9a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	79db      	ldrb	r3, [r3, #7]
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d830      	bhi.n	8009a78 <USB_HC_StartXfer+0x254>
 8009a16:	a201      	add	r2, pc, #4	; (adr r2, 8009a1c <USB_HC_StartXfer+0x1f8>)
 8009a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1c:	08009a2d 	.word	0x08009a2d
 8009a20:	08009a51 	.word	0x08009a51
 8009a24:	08009a2d 	.word	0x08009a2d
 8009a28:	08009a51 	.word	0x08009a51
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	3303      	adds	r3, #3
 8009a32:	089b      	lsrs	r3, r3, #2
 8009a34:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009a36:	8afa      	ldrh	r2, [r7, #22]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d91c      	bls.n	8009a7c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	f043 0220 	orr.w	r2, r3, #32
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	619a      	str	r2, [r3, #24]
        }
        break;
 8009a4e:	e015      	b.n	8009a7c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	695b      	ldr	r3, [r3, #20]
 8009a54:	3303      	adds	r3, #3
 8009a56:	089b      	lsrs	r3, r3, #2
 8009a58:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009a5a:	8afa      	ldrh	r2, [r7, #22]
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d90a      	bls.n	8009a80 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	619a      	str	r2, [r3, #24]
        }
        break;
 8009a76:	e003      	b.n	8009a80 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009a78:	bf00      	nop
 8009a7a:	e002      	b.n	8009a82 <USB_HC_StartXfer+0x25e>
        break;
 8009a7c:	bf00      	nop
 8009a7e:	e000      	b.n	8009a82 <USB_HC_StartXfer+0x25e>
        break;
 8009a80:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	68d9      	ldr	r1, [r3, #12]
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	785a      	ldrb	r2, [r3, #1]
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	695b      	ldr	r3, [r3, #20]
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	2000      	movs	r0, #0
 8009a92:	9000      	str	r0, [sp, #0]
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f7ff fb53 	bl	8009140 <USB_WritePacket>
  }

  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3728      	adds	r7, #40	; 0x28
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	1ff80000 	.word	0x1ff80000

08009aa8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	b29b      	uxth	r3, r3
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b089      	sub	sp, #36	; 0x24
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8009ada:	78fb      	ldrb	r3, [r7, #3]
 8009adc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	015a      	lsls	r2, r3, #5
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	0c9b      	lsrs	r3, r3, #18
 8009af2:	f003 0303 	and.w	r3, r3, #3
 8009af6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	015a      	lsls	r2, r3, #5
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	4413      	add	r3, r2
 8009b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	0fdb      	lsrs	r3, r3, #31
 8009b08:	f003 0301 	and.w	r3, r3, #1
 8009b0c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	f003 0320 	and.w	r3, r3, #32
 8009b16:	2b20      	cmp	r3, #32
 8009b18:	d104      	bne.n	8009b24 <USB_HC_Halt+0x5a>
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d101      	bne.n	8009b24 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	e0e8      	b.n	8009cf6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d002      	beq.n	8009b30 <USB_HC_Halt+0x66>
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d173      	bne.n	8009c18 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	015a      	lsls	r2, r3, #5
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	4413      	add	r3, r2
 8009b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	697a      	ldr	r2, [r7, #20]
 8009b40:	0151      	lsls	r1, r2, #5
 8009b42:	69ba      	ldr	r2, [r7, #24]
 8009b44:	440a      	add	r2, r1
 8009b46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b4e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f003 0320 	and.w	r3, r3, #32
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f040 80cb 	bne.w	8009cf4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d143      	bne.n	8009bf2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	015a      	lsls	r2, r3, #5
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	4413      	add	r3, r2
 8009b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	697a      	ldr	r2, [r7, #20]
 8009b7a:	0151      	lsls	r1, r2, #5
 8009b7c:	69ba      	ldr	r2, [r7, #24]
 8009b7e:	440a      	add	r2, r1
 8009b80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b88:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	0151      	lsls	r1, r2, #5
 8009b9c:	69ba      	ldr	r2, [r7, #24]
 8009b9e:	440a      	add	r2, r1
 8009ba0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ba4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ba8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	015a      	lsls	r2, r3, #5
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	697a      	ldr	r2, [r7, #20]
 8009bba:	0151      	lsls	r1, r2, #5
 8009bbc:	69ba      	ldr	r2, [r7, #24]
 8009bbe:	440a      	add	r2, r1
 8009bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009bc8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	61fb      	str	r3, [r7, #28]
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bd6:	d81d      	bhi.n	8009c14 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	015a      	lsls	r2, r3, #5
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	4413      	add	r3, r2
 8009be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bee:	d0ec      	beq.n	8009bca <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009bf0:	e080      	b.n	8009cf4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	015a      	lsls	r2, r3, #5
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	0151      	lsls	r1, r2, #5
 8009c04:	69ba      	ldr	r2, [r7, #24]
 8009c06:	440a      	add	r2, r1
 8009c08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c10:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009c12:	e06f      	b.n	8009cf4 <USB_HC_Halt+0x22a>
            break;
 8009c14:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009c16:	e06d      	b.n	8009cf4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	015a      	lsls	r2, r3, #5
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	4413      	add	r3, r2
 8009c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	697a      	ldr	r2, [r7, #20]
 8009c28:	0151      	lsls	r1, r2, #5
 8009c2a:	69ba      	ldr	r2, [r7, #24]
 8009c2c:	440a      	add	r2, r1
 8009c2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c36:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d143      	bne.n	8009cd0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	015a      	lsls	r2, r3, #5
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	4413      	add	r3, r2
 8009c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	0151      	lsls	r1, r2, #5
 8009c5a:	69ba      	ldr	r2, [r7, #24]
 8009c5c:	440a      	add	r2, r1
 8009c5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c66:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	0151      	lsls	r1, r2, #5
 8009c7a:	69ba      	ldr	r2, [r7, #24]
 8009c7c:	440a      	add	r2, r1
 8009c7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c86:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	697a      	ldr	r2, [r7, #20]
 8009c98:	0151      	lsls	r1, r2, #5
 8009c9a:	69ba      	ldr	r2, [r7, #24]
 8009c9c:	440a      	add	r2, r1
 8009c9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ca2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ca6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	3301      	adds	r3, #1
 8009cac:	61fb      	str	r3, [r7, #28]
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cb4:	d81d      	bhi.n	8009cf2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	015a      	lsls	r2, r3, #5
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ccc:	d0ec      	beq.n	8009ca8 <USB_HC_Halt+0x1de>
 8009cce:	e011      	b.n	8009cf4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	0151      	lsls	r1, r2, #5
 8009ce2:	69ba      	ldr	r2, [r7, #24]
 8009ce4:	440a      	add	r2, r1
 8009ce6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cee:	6013      	str	r3, [r2, #0]
 8009cf0:	e000      	b.n	8009cf4 <USB_HC_Halt+0x22a>
          break;
 8009cf2:	bf00      	nop
    }
  }

  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3724      	adds	r7, #36	; 0x24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
	...

08009d04 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b087      	sub	sp, #28
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009d14:	78fb      	ldrb	r3, [r7, #3]
 8009d16:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	04da      	lsls	r2, r3, #19
 8009d20:	4b15      	ldr	r3, [pc, #84]	; (8009d78 <USB_DoPing+0x74>)
 8009d22:	4013      	ands	r3, r2
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	0151      	lsls	r1, r2, #5
 8009d28:	697a      	ldr	r2, [r7, #20]
 8009d2a:	440a      	add	r2, r1
 8009d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d34:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	015a      	lsls	r2, r3, #5
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d4c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d54:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	015a      	lsls	r2, r3, #5
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d62:	461a      	mov	r2, r3
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	371c      	adds	r7, #28
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	1ff80000 	.word	0x1ff80000

08009d7c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b086      	sub	sp, #24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f7ff f935 	bl	8008ffc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009d92:	2110      	movs	r1, #16
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f7ff f98f 	bl	80090b8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7ff f9b0 	bl	8009100 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009da0:	2300      	movs	r3, #0
 8009da2:	613b      	str	r3, [r7, #16]
 8009da4:	e01f      	b.n	8009de6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	015a      	lsls	r2, r3, #5
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	4413      	add	r3, r2
 8009dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009dbc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dc4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009dcc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	015a      	lsls	r2, r3, #5
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dda:	461a      	mov	r2, r3
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	3301      	adds	r3, #1
 8009de4:	613b      	str	r3, [r7, #16]
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	2b0f      	cmp	r3, #15
 8009dea:	d9dc      	bls.n	8009da6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009dec:	2300      	movs	r3, #0
 8009dee:	613b      	str	r3, [r7, #16]
 8009df0:	e034      	b.n	8009e5c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e08:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e10:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e18:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	015a      	lsls	r2, r3, #5
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	4413      	add	r3, r2
 8009e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e26:	461a      	mov	r2, r3
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	617b      	str	r3, [r7, #20]
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e38:	d80c      	bhi.n	8009e54 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	015a      	lsls	r2, r3, #5
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	4413      	add	r3, r2
 8009e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e50:	d0ec      	beq.n	8009e2c <USB_StopHost+0xb0>
 8009e52:	e000      	b.n	8009e56 <USB_StopHost+0xda>
        break;
 8009e54:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	613b      	str	r3, [r7, #16]
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	2b0f      	cmp	r3, #15
 8009e60:	d9c7      	bls.n	8009df2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e68:	461a      	mov	r2, r3
 8009e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e6e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f04f 32ff 	mov.w	r2, #4294967295
 8009e76:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7ff f8ae 	bl	8008fda <USB_EnableGlobalInt>

  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3718      	adds	r7, #24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009e8c:	4904      	ldr	r1, [pc, #16]	; (8009ea0 <MX_FATFS_Init+0x18>)
 8009e8e:	4805      	ldr	r0, [pc, #20]	; (8009ea4 <MX_FATFS_Init+0x1c>)
 8009e90:	f004 f866 	bl	800df60 <FATFS_LinkDriver>
 8009e94:	4603      	mov	r3, r0
 8009e96:	461a      	mov	r2, r3
 8009e98:	4b03      	ldr	r3, [pc, #12]	; (8009ea8 <MX_FATFS_Init+0x20>)
 8009e9a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009e9c:	bf00      	nop
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	20002998 	.word	0x20002998
 8009ea4:	0801d120 	.word	0x0801d120
 8009ea8:	20004a00 	.word	0x20004a00

08009eac <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	4603      	mov	r3, r0
 8009ecc:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009ed2:	79fb      	ldrb	r3, [r7, #7]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	4808      	ldr	r0, [pc, #32]	; (8009ef8 <USBH_status+0x34>)
 8009ed8:	f001 fc6a 	bl	800b7b0 <USBH_MSC_UnitIsReady>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d002      	beq.n	8009ee8 <USBH_status+0x24>
  {
    res = RES_OK;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	73fb      	strb	r3, [r7, #15]
 8009ee6:	e001      	b.n	8009eec <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	200187b8 	.word	0x200187b8

08009efc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b094      	sub	sp, #80	; 0x50
 8009f00:	af02      	add	r7, sp, #8
 8009f02:	60b9      	str	r1, [r7, #8]
 8009f04:	607a      	str	r2, [r7, #4]
 8009f06:	603b      	str	r3, [r7, #0]
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8009f12:	7bf9      	ldrb	r1, [r7, #15]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	4818      	ldr	r0, [pc, #96]	; (8009f80 <USBH_read+0x84>)
 8009f1e:	f001 fc91 	bl	800b844 <USBH_MSC_Read>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d103      	bne.n	8009f30 <USBH_read+0x34>
  {
    res = RES_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009f2e:	e020      	b.n	8009f72 <USBH_read+0x76>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009f30:	f107 0210 	add.w	r2, r7, #16
 8009f34:	7bfb      	ldrb	r3, [r7, #15]
 8009f36:	4619      	mov	r1, r3
 8009f38:	4811      	ldr	r0, [pc, #68]	; (8009f80 <USBH_read+0x84>)
 8009f3a:	f001 fc5f 	bl	800b7fc <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009f3e:	7f7b      	ldrb	r3, [r7, #29]
 8009f40:	2b3a      	cmp	r3, #58	; 0x3a
 8009f42:	d005      	beq.n	8009f50 <USBH_read+0x54>
 8009f44:	2b3a      	cmp	r3, #58	; 0x3a
 8009f46:	dc10      	bgt.n	8009f6a <USBH_read+0x6e>
 8009f48:	2b04      	cmp	r3, #4
 8009f4a:	d001      	beq.n	8009f50 <USBH_read+0x54>
 8009f4c:	2b28      	cmp	r3, #40	; 0x28
 8009f4e:	d10c      	bne.n	8009f6a <USBH_read+0x6e>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 8009f50:	480c      	ldr	r0, [pc, #48]	; (8009f84 <USBH_read+0x88>)
 8009f52:	f00e ffcf 	bl	8018ef4 <iprintf>
 8009f56:	480c      	ldr	r0, [pc, #48]	; (8009f88 <USBH_read+0x8c>)
 8009f58:	f00e ffcc 	bl	8018ef4 <iprintf>
 8009f5c:	200a      	movs	r0, #10
 8009f5e:	f00e ffe1 	bl	8018f24 <putchar>
      res = RES_NOTRDY;
 8009f62:	2303      	movs	r3, #3
 8009f64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009f68:	e003      	b.n	8009f72 <USBH_read+0x76>

    default:
      res = RES_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009f70:	bf00      	nop
    }
  }

  return res;
 8009f72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3748      	adds	r7, #72	; 0x48
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	200187b8 	.word	0x200187b8
 8009f84:	08019f74 	.word	0x08019f74
 8009f88:	08019f7c 	.word	0x08019f7c

08009f8c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b094      	sub	sp, #80	; 0x50
 8009f90:	af02      	add	r7, sp, #8
 8009f92:	60b9      	str	r1, [r7, #8]
 8009f94:	607a      	str	r2, [r7, #4]
 8009f96:	603b      	str	r3, [r7, #0]
 8009f98:	4603      	mov	r3, r0
 8009f9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009fa2:	7bf9      	ldrb	r1, [r7, #15]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	4820      	ldr	r0, [pc, #128]	; (800a030 <USBH_write+0xa4>)
 8009fae:	f001 fcb2 	bl	800b916 <USBH_MSC_Write>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d103      	bne.n	8009fc0 <USBH_write+0x34>
  {
    res = RES_OK;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009fbe:	e031      	b.n	800a024 <USBH_write+0x98>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009fc0:	f107 0210 	add.w	r2, r7, #16
 8009fc4:	7bfb      	ldrb	r3, [r7, #15]
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	4819      	ldr	r0, [pc, #100]	; (800a030 <USBH_write+0xa4>)
 8009fca:	f001 fc17 	bl	800b7fc <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009fce:	7f7b      	ldrb	r3, [r7, #29]
 8009fd0:	2b3a      	cmp	r3, #58	; 0x3a
 8009fd2:	d016      	beq.n	800a002 <USBH_write+0x76>
 8009fd4:	2b3a      	cmp	r3, #58	; 0x3a
 8009fd6:	dc21      	bgt.n	800a01c <USBH_write+0x90>
 8009fd8:	2b28      	cmp	r3, #40	; 0x28
 8009fda:	d012      	beq.n	800a002 <USBH_write+0x76>
 8009fdc:	2b28      	cmp	r3, #40	; 0x28
 8009fde:	dc1d      	bgt.n	800a01c <USBH_write+0x90>
 8009fe0:	2b04      	cmp	r3, #4
 8009fe2:	d00e      	beq.n	800a002 <USBH_write+0x76>
 8009fe4:	2b27      	cmp	r3, #39	; 0x27
 8009fe6:	d119      	bne.n	800a01c <USBH_write+0x90>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 8009fe8:	4812      	ldr	r0, [pc, #72]	; (800a034 <USBH_write+0xa8>)
 8009fea:	f00e ff83 	bl	8018ef4 <iprintf>
 8009fee:	4812      	ldr	r0, [pc, #72]	; (800a038 <USBH_write+0xac>)
 8009ff0:	f00e ff80 	bl	8018ef4 <iprintf>
 8009ff4:	200a      	movs	r0, #10
 8009ff6:	f00e ff95 	bl	8018f24 <putchar>
      res = RES_WRPRT;
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a000:	e010      	b.n	800a024 <USBH_write+0x98>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 800a002:	480c      	ldr	r0, [pc, #48]	; (800a034 <USBH_write+0xa8>)
 800a004:	f00e ff76 	bl	8018ef4 <iprintf>
 800a008:	480c      	ldr	r0, [pc, #48]	; (800a03c <USBH_write+0xb0>)
 800a00a:	f00e ff73 	bl	8018ef4 <iprintf>
 800a00e:	200a      	movs	r0, #10
 800a010:	f00e ff88 	bl	8018f24 <putchar>
      res = RES_NOTRDY;
 800a014:	2303      	movs	r3, #3
 800a016:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a01a:	e003      	b.n	800a024 <USBH_write+0x98>

    default:
      res = RES_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a022:	bf00      	nop
    }
  }

  return res;
 800a024:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3748      	adds	r7, #72	; 0x48
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	200187b8 	.word	0x200187b8
 800a034:	08019f74 	.word	0x08019f74
 800a038:	08019f94 	.word	0x08019f94
 800a03c:	08019f7c 	.word	0x08019f7c

0800a040 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b090      	sub	sp, #64	; 0x40
 800a044:	af00      	add	r7, sp, #0
 800a046:	4603      	mov	r3, r0
 800a048:	603a      	str	r2, [r7, #0]
 800a04a:	71fb      	strb	r3, [r7, #7]
 800a04c:	460b      	mov	r3, r1
 800a04e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800a056:	79bb      	ldrb	r3, [r7, #6]
 800a058:	2b03      	cmp	r3, #3
 800a05a:	d852      	bhi.n	800a102 <USBH_ioctl+0xc2>
 800a05c:	a201      	add	r2, pc, #4	; (adr r2, 800a064 <USBH_ioctl+0x24>)
 800a05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a062:	bf00      	nop
 800a064:	0800a075 	.word	0x0800a075
 800a068:	0800a07d 	.word	0x0800a07d
 800a06c:	0800a0a7 	.word	0x0800a0a7
 800a070:	0800a0d3 	.word	0x0800a0d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a07a:	e045      	b.n	800a108 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a07c:	f107 0208 	add.w	r2, r7, #8
 800a080:	79fb      	ldrb	r3, [r7, #7]
 800a082:	4619      	mov	r1, r3
 800a084:	4823      	ldr	r0, [pc, #140]	; (800a114 <USBH_ioctl+0xd4>)
 800a086:	f001 fbb9 	bl	800b7fc <USBH_MSC_GetLUNInfo>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d106      	bne.n	800a09e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a09c:	e034      	b.n	800a108 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a0a4:	e030      	b.n	800a108 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a0a6:	f107 0208 	add.w	r2, r7, #8
 800a0aa:	79fb      	ldrb	r3, [r7, #7]
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	4819      	ldr	r0, [pc, #100]	; (800a114 <USBH_ioctl+0xd4>)
 800a0b0:	f001 fba4 	bl	800b7fc <USBH_MSC_GetLUNInfo>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d107      	bne.n	800a0ca <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800a0ba:	8a3b      	ldrh	r3, [r7, #16]
 800a0bc:	461a      	mov	r2, r3
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a0c8:	e01e      	b.n	800a108 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a0d0:	e01a      	b.n	800a108 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a0d2:	f107 0208 	add.w	r2, r7, #8
 800a0d6:	79fb      	ldrb	r3, [r7, #7]
 800a0d8:	4619      	mov	r1, r3
 800a0da:	480e      	ldr	r0, [pc, #56]	; (800a114 <USBH_ioctl+0xd4>)
 800a0dc:	f001 fb8e 	bl	800b7fc <USBH_MSC_GetLUNInfo>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d109      	bne.n	800a0fa <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800a0e6:	8a3b      	ldrh	r3, [r7, #16]
 800a0e8:	0a5b      	lsrs	r3, r3, #9
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a0f8:	e006      	b.n	800a108 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a100:	e002      	b.n	800a108 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800a102:	2304      	movs	r3, #4
 800a104:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800a108:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3740      	adds	r7, #64	; 0x40
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	200187b8 	.word	0x200187b8

0800a118 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a11e:	4b8d      	ldr	r3, [pc, #564]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a120:	22c0      	movs	r2, #192	; 0xc0
 800a122:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a124:	4b8b      	ldr	r3, [pc, #556]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a126:	22a8      	movs	r2, #168	; 0xa8
 800a128:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800a12a:	4b8a      	ldr	r3, [pc, #552]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a12c:	2201      	movs	r2, #1
 800a12e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 200;
 800a130:	4b88      	ldr	r3, [pc, #544]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a132:	22c8      	movs	r2, #200	; 0xc8
 800a134:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a136:	4b88      	ldr	r3, [pc, #544]	; (800a358 <MX_LWIP_Init+0x240>)
 800a138:	22ff      	movs	r2, #255	; 0xff
 800a13a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a13c:	4b86      	ldr	r3, [pc, #536]	; (800a358 <MX_LWIP_Init+0x240>)
 800a13e:	22ff      	movs	r2, #255	; 0xff
 800a140:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a142:	4b85      	ldr	r3, [pc, #532]	; (800a358 <MX_LWIP_Init+0x240>)
 800a144:	22ff      	movs	r2, #255	; 0xff
 800a146:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a148:	4b83      	ldr	r3, [pc, #524]	; (800a358 <MX_LWIP_Init+0x240>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800a14e:	4b83      	ldr	r3, [pc, #524]	; (800a35c <MX_LWIP_Init+0x244>)
 800a150:	22c0      	movs	r2, #192	; 0xc0
 800a152:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800a154:	4b81      	ldr	r3, [pc, #516]	; (800a35c <MX_LWIP_Init+0x244>)
 800a156:	22a8      	movs	r2, #168	; 0xa8
 800a158:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800a15a:	4b80      	ldr	r3, [pc, #512]	; (800a35c <MX_LWIP_Init+0x244>)
 800a15c:	2201      	movs	r2, #1
 800a15e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800a160:	4b7e      	ldr	r3, [pc, #504]	; (800a35c <MX_LWIP_Init+0x244>)
 800a162:	2201      	movs	r2, #1
 800a164:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800a166:	f003 ff38 	bl	800dfda <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a16a:	4b7a      	ldr	r3, [pc, #488]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	061a      	lsls	r2, r3, #24
 800a170:	4b78      	ldr	r3, [pc, #480]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a172:	785b      	ldrb	r3, [r3, #1]
 800a174:	041b      	lsls	r3, r3, #16
 800a176:	431a      	orrs	r2, r3
 800a178:	4b76      	ldr	r3, [pc, #472]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a17a:	789b      	ldrb	r3, [r3, #2]
 800a17c:	021b      	lsls	r3, r3, #8
 800a17e:	4313      	orrs	r3, r2
 800a180:	4a74      	ldr	r2, [pc, #464]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a182:	78d2      	ldrb	r2, [r2, #3]
 800a184:	4313      	orrs	r3, r2
 800a186:	061a      	lsls	r2, r3, #24
 800a188:	4b72      	ldr	r3, [pc, #456]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	0619      	lsls	r1, r3, #24
 800a18e:	4b71      	ldr	r3, [pc, #452]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a190:	785b      	ldrb	r3, [r3, #1]
 800a192:	041b      	lsls	r3, r3, #16
 800a194:	4319      	orrs	r1, r3
 800a196:	4b6f      	ldr	r3, [pc, #444]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a198:	789b      	ldrb	r3, [r3, #2]
 800a19a:	021b      	lsls	r3, r3, #8
 800a19c:	430b      	orrs	r3, r1
 800a19e:	496d      	ldr	r1, [pc, #436]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a1a0:	78c9      	ldrb	r1, [r1, #3]
 800a1a2:	430b      	orrs	r3, r1
 800a1a4:	021b      	lsls	r3, r3, #8
 800a1a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a1aa:	431a      	orrs	r2, r3
 800a1ac:	4b69      	ldr	r3, [pc, #420]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	0619      	lsls	r1, r3, #24
 800a1b2:	4b68      	ldr	r3, [pc, #416]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a1b4:	785b      	ldrb	r3, [r3, #1]
 800a1b6:	041b      	lsls	r3, r3, #16
 800a1b8:	4319      	orrs	r1, r3
 800a1ba:	4b66      	ldr	r3, [pc, #408]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a1bc:	789b      	ldrb	r3, [r3, #2]
 800a1be:	021b      	lsls	r3, r3, #8
 800a1c0:	430b      	orrs	r3, r1
 800a1c2:	4964      	ldr	r1, [pc, #400]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a1c4:	78c9      	ldrb	r1, [r1, #3]
 800a1c6:	430b      	orrs	r3, r1
 800a1c8:	0a1b      	lsrs	r3, r3, #8
 800a1ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a1ce:	431a      	orrs	r2, r3
 800a1d0:	4b60      	ldr	r3, [pc, #384]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	0619      	lsls	r1, r3, #24
 800a1d6:	4b5f      	ldr	r3, [pc, #380]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a1d8:	785b      	ldrb	r3, [r3, #1]
 800a1da:	041b      	lsls	r3, r3, #16
 800a1dc:	4319      	orrs	r1, r3
 800a1de:	4b5d      	ldr	r3, [pc, #372]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a1e0:	789b      	ldrb	r3, [r3, #2]
 800a1e2:	021b      	lsls	r3, r3, #8
 800a1e4:	430b      	orrs	r3, r1
 800a1e6:	495b      	ldr	r1, [pc, #364]	; (800a354 <MX_LWIP_Init+0x23c>)
 800a1e8:	78c9      	ldrb	r1, [r1, #3]
 800a1ea:	430b      	orrs	r3, r1
 800a1ec:	0e1b      	lsrs	r3, r3, #24
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	4a5b      	ldr	r2, [pc, #364]	; (800a360 <MX_LWIP_Init+0x248>)
 800a1f2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a1f4:	4b58      	ldr	r3, [pc, #352]	; (800a358 <MX_LWIP_Init+0x240>)
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	061a      	lsls	r2, r3, #24
 800a1fa:	4b57      	ldr	r3, [pc, #348]	; (800a358 <MX_LWIP_Init+0x240>)
 800a1fc:	785b      	ldrb	r3, [r3, #1]
 800a1fe:	041b      	lsls	r3, r3, #16
 800a200:	431a      	orrs	r2, r3
 800a202:	4b55      	ldr	r3, [pc, #340]	; (800a358 <MX_LWIP_Init+0x240>)
 800a204:	789b      	ldrb	r3, [r3, #2]
 800a206:	021b      	lsls	r3, r3, #8
 800a208:	4313      	orrs	r3, r2
 800a20a:	4a53      	ldr	r2, [pc, #332]	; (800a358 <MX_LWIP_Init+0x240>)
 800a20c:	78d2      	ldrb	r2, [r2, #3]
 800a20e:	4313      	orrs	r3, r2
 800a210:	061a      	lsls	r2, r3, #24
 800a212:	4b51      	ldr	r3, [pc, #324]	; (800a358 <MX_LWIP_Init+0x240>)
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	0619      	lsls	r1, r3, #24
 800a218:	4b4f      	ldr	r3, [pc, #316]	; (800a358 <MX_LWIP_Init+0x240>)
 800a21a:	785b      	ldrb	r3, [r3, #1]
 800a21c:	041b      	lsls	r3, r3, #16
 800a21e:	4319      	orrs	r1, r3
 800a220:	4b4d      	ldr	r3, [pc, #308]	; (800a358 <MX_LWIP_Init+0x240>)
 800a222:	789b      	ldrb	r3, [r3, #2]
 800a224:	021b      	lsls	r3, r3, #8
 800a226:	430b      	orrs	r3, r1
 800a228:	494b      	ldr	r1, [pc, #300]	; (800a358 <MX_LWIP_Init+0x240>)
 800a22a:	78c9      	ldrb	r1, [r1, #3]
 800a22c:	430b      	orrs	r3, r1
 800a22e:	021b      	lsls	r3, r3, #8
 800a230:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a234:	431a      	orrs	r2, r3
 800a236:	4b48      	ldr	r3, [pc, #288]	; (800a358 <MX_LWIP_Init+0x240>)
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	0619      	lsls	r1, r3, #24
 800a23c:	4b46      	ldr	r3, [pc, #280]	; (800a358 <MX_LWIP_Init+0x240>)
 800a23e:	785b      	ldrb	r3, [r3, #1]
 800a240:	041b      	lsls	r3, r3, #16
 800a242:	4319      	orrs	r1, r3
 800a244:	4b44      	ldr	r3, [pc, #272]	; (800a358 <MX_LWIP_Init+0x240>)
 800a246:	789b      	ldrb	r3, [r3, #2]
 800a248:	021b      	lsls	r3, r3, #8
 800a24a:	430b      	orrs	r3, r1
 800a24c:	4942      	ldr	r1, [pc, #264]	; (800a358 <MX_LWIP_Init+0x240>)
 800a24e:	78c9      	ldrb	r1, [r1, #3]
 800a250:	430b      	orrs	r3, r1
 800a252:	0a1b      	lsrs	r3, r3, #8
 800a254:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a258:	431a      	orrs	r2, r3
 800a25a:	4b3f      	ldr	r3, [pc, #252]	; (800a358 <MX_LWIP_Init+0x240>)
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	0619      	lsls	r1, r3, #24
 800a260:	4b3d      	ldr	r3, [pc, #244]	; (800a358 <MX_LWIP_Init+0x240>)
 800a262:	785b      	ldrb	r3, [r3, #1]
 800a264:	041b      	lsls	r3, r3, #16
 800a266:	4319      	orrs	r1, r3
 800a268:	4b3b      	ldr	r3, [pc, #236]	; (800a358 <MX_LWIP_Init+0x240>)
 800a26a:	789b      	ldrb	r3, [r3, #2]
 800a26c:	021b      	lsls	r3, r3, #8
 800a26e:	430b      	orrs	r3, r1
 800a270:	4939      	ldr	r1, [pc, #228]	; (800a358 <MX_LWIP_Init+0x240>)
 800a272:	78c9      	ldrb	r1, [r1, #3]
 800a274:	430b      	orrs	r3, r1
 800a276:	0e1b      	lsrs	r3, r3, #24
 800a278:	4313      	orrs	r3, r2
 800a27a:	4a3a      	ldr	r2, [pc, #232]	; (800a364 <MX_LWIP_Init+0x24c>)
 800a27c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a27e:	4b37      	ldr	r3, [pc, #220]	; (800a35c <MX_LWIP_Init+0x244>)
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	061a      	lsls	r2, r3, #24
 800a284:	4b35      	ldr	r3, [pc, #212]	; (800a35c <MX_LWIP_Init+0x244>)
 800a286:	785b      	ldrb	r3, [r3, #1]
 800a288:	041b      	lsls	r3, r3, #16
 800a28a:	431a      	orrs	r2, r3
 800a28c:	4b33      	ldr	r3, [pc, #204]	; (800a35c <MX_LWIP_Init+0x244>)
 800a28e:	789b      	ldrb	r3, [r3, #2]
 800a290:	021b      	lsls	r3, r3, #8
 800a292:	4313      	orrs	r3, r2
 800a294:	4a31      	ldr	r2, [pc, #196]	; (800a35c <MX_LWIP_Init+0x244>)
 800a296:	78d2      	ldrb	r2, [r2, #3]
 800a298:	4313      	orrs	r3, r2
 800a29a:	061a      	lsls	r2, r3, #24
 800a29c:	4b2f      	ldr	r3, [pc, #188]	; (800a35c <MX_LWIP_Init+0x244>)
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	0619      	lsls	r1, r3, #24
 800a2a2:	4b2e      	ldr	r3, [pc, #184]	; (800a35c <MX_LWIP_Init+0x244>)
 800a2a4:	785b      	ldrb	r3, [r3, #1]
 800a2a6:	041b      	lsls	r3, r3, #16
 800a2a8:	4319      	orrs	r1, r3
 800a2aa:	4b2c      	ldr	r3, [pc, #176]	; (800a35c <MX_LWIP_Init+0x244>)
 800a2ac:	789b      	ldrb	r3, [r3, #2]
 800a2ae:	021b      	lsls	r3, r3, #8
 800a2b0:	430b      	orrs	r3, r1
 800a2b2:	492a      	ldr	r1, [pc, #168]	; (800a35c <MX_LWIP_Init+0x244>)
 800a2b4:	78c9      	ldrb	r1, [r1, #3]
 800a2b6:	430b      	orrs	r3, r1
 800a2b8:	021b      	lsls	r3, r3, #8
 800a2ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a2be:	431a      	orrs	r2, r3
 800a2c0:	4b26      	ldr	r3, [pc, #152]	; (800a35c <MX_LWIP_Init+0x244>)
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	0619      	lsls	r1, r3, #24
 800a2c6:	4b25      	ldr	r3, [pc, #148]	; (800a35c <MX_LWIP_Init+0x244>)
 800a2c8:	785b      	ldrb	r3, [r3, #1]
 800a2ca:	041b      	lsls	r3, r3, #16
 800a2cc:	4319      	orrs	r1, r3
 800a2ce:	4b23      	ldr	r3, [pc, #140]	; (800a35c <MX_LWIP_Init+0x244>)
 800a2d0:	789b      	ldrb	r3, [r3, #2]
 800a2d2:	021b      	lsls	r3, r3, #8
 800a2d4:	430b      	orrs	r3, r1
 800a2d6:	4921      	ldr	r1, [pc, #132]	; (800a35c <MX_LWIP_Init+0x244>)
 800a2d8:	78c9      	ldrb	r1, [r1, #3]
 800a2da:	430b      	orrs	r3, r1
 800a2dc:	0a1b      	lsrs	r3, r3, #8
 800a2de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a2e2:	431a      	orrs	r2, r3
 800a2e4:	4b1d      	ldr	r3, [pc, #116]	; (800a35c <MX_LWIP_Init+0x244>)
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	0619      	lsls	r1, r3, #24
 800a2ea:	4b1c      	ldr	r3, [pc, #112]	; (800a35c <MX_LWIP_Init+0x244>)
 800a2ec:	785b      	ldrb	r3, [r3, #1]
 800a2ee:	041b      	lsls	r3, r3, #16
 800a2f0:	4319      	orrs	r1, r3
 800a2f2:	4b1a      	ldr	r3, [pc, #104]	; (800a35c <MX_LWIP_Init+0x244>)
 800a2f4:	789b      	ldrb	r3, [r3, #2]
 800a2f6:	021b      	lsls	r3, r3, #8
 800a2f8:	430b      	orrs	r3, r1
 800a2fa:	4918      	ldr	r1, [pc, #96]	; (800a35c <MX_LWIP_Init+0x244>)
 800a2fc:	78c9      	ldrb	r1, [r1, #3]
 800a2fe:	430b      	orrs	r3, r1
 800a300:	0e1b      	lsrs	r3, r3, #24
 800a302:	4313      	orrs	r3, r2
 800a304:	4a18      	ldr	r2, [pc, #96]	; (800a368 <MX_LWIP_Init+0x250>)
 800a306:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a308:	4b18      	ldr	r3, [pc, #96]	; (800a36c <MX_LWIP_Init+0x254>)
 800a30a:	9302      	str	r3, [sp, #8]
 800a30c:	4b18      	ldr	r3, [pc, #96]	; (800a370 <MX_LWIP_Init+0x258>)
 800a30e:	9301      	str	r3, [sp, #4]
 800a310:	2300      	movs	r3, #0
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	4b14      	ldr	r3, [pc, #80]	; (800a368 <MX_LWIP_Init+0x250>)
 800a316:	4a13      	ldr	r2, [pc, #76]	; (800a364 <MX_LWIP_Init+0x24c>)
 800a318:	4911      	ldr	r1, [pc, #68]	; (800a360 <MX_LWIP_Init+0x248>)
 800a31a:	4816      	ldr	r0, [pc, #88]	; (800a374 <MX_LWIP_Init+0x25c>)
 800a31c:	f004 fb12 	bl	800e944 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a320:	4814      	ldr	r0, [pc, #80]	; (800a374 <MX_LWIP_Init+0x25c>)
 800a322:	f004 fcc1 	bl	800eca8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a326:	4b13      	ldr	r3, [pc, #76]	; (800a374 <MX_LWIP_Init+0x25c>)
 800a328:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a32c:	089b      	lsrs	r3, r3, #2
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	b2db      	uxtb	r3, r3
 800a334:	2b00      	cmp	r3, #0
 800a336:	d003      	beq.n	800a340 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a338:	480e      	ldr	r0, [pc, #56]	; (800a374 <MX_LWIP_Init+0x25c>)
 800a33a:	f004 fcc5 	bl	800ecc8 <netif_set_up>
 800a33e:	e002      	b.n	800a346 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a340:	480c      	ldr	r0, [pc, #48]	; (800a374 <MX_LWIP_Init+0x25c>)
 800a342:	f004 fd2d 	bl	800eda0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800a346:	490c      	ldr	r1, [pc, #48]	; (800a378 <MX_LWIP_Init+0x260>)
 800a348:	480a      	ldr	r0, [pc, #40]	; (800a374 <MX_LWIP_Init+0x25c>)
 800a34a:	f004 fd5b 	bl	800ee04 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a34e:	bf00      	nop
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	20004a44 	.word	0x20004a44
 800a358:	20004a40 	.word	0x20004a40
 800a35c:	20004a04 	.word	0x20004a04
 800a360:	20004a3c 	.word	0x20004a3c
 800a364:	20004a48 	.word	0x20004a48
 800a368:	20004a4c 	.word	0x20004a4c
 800a36c:	080184b1 	.word	0x080184b1
 800a370:	0800a945 	.word	0x0800a945
 800a374:	20004a08 	.word	0x20004a08
 800a378:	0800a9b1 	.word	0x0800a9b1

0800a37c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800a380:	4803      	ldr	r0, [pc, #12]	; (800a390 <MX_LWIP_Process+0x14>)
 800a382:	f000 fabf 	bl	800a904 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800a386:	f00b fcad 	bl	8015ce4 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800a38a:	bf00      	nop
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	20004a08 	.word	0x20004a08

0800a394 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b08e      	sub	sp, #56	; 0x38
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a39c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	601a      	str	r2, [r3, #0]
 800a3a4:	605a      	str	r2, [r3, #4]
 800a3a6:	609a      	str	r2, [r3, #8]
 800a3a8:	60da      	str	r2, [r3, #12]
 800a3aa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a4a      	ldr	r2, [pc, #296]	; (800a4dc <HAL_ETH_MspInit+0x148>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	f040 808d 	bne.w	800a4d2 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	623b      	str	r3, [r7, #32]
 800a3bc:	4b48      	ldr	r3, [pc, #288]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c0:	4a47      	ldr	r2, [pc, #284]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a3c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a3c6:	6313      	str	r3, [r2, #48]	; 0x30
 800a3c8:	4b45      	ldr	r3, [pc, #276]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a3ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3d0:	623b      	str	r3, [r7, #32]
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	61fb      	str	r3, [r7, #28]
 800a3d8:	4b41      	ldr	r3, [pc, #260]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3dc:	4a40      	ldr	r2, [pc, #256]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a3de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a3e2:	6313      	str	r3, [r2, #48]	; 0x30
 800a3e4:	4b3e      	ldr	r3, [pc, #248]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a3ec:	61fb      	str	r3, [r7, #28]
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	61bb      	str	r3, [r7, #24]
 800a3f4:	4b3a      	ldr	r3, [pc, #232]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f8:	4a39      	ldr	r2, [pc, #228]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a3fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a3fe:	6313      	str	r3, [r2, #48]	; 0x30
 800a400:	4b37      	ldr	r3, [pc, #220]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a408:	61bb      	str	r3, [r7, #24]
 800a40a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a40c:	2300      	movs	r3, #0
 800a40e:	617b      	str	r3, [r7, #20]
 800a410:	4b33      	ldr	r3, [pc, #204]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a414:	4a32      	ldr	r2, [pc, #200]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a416:	f043 0304 	orr.w	r3, r3, #4
 800a41a:	6313      	str	r3, [r2, #48]	; 0x30
 800a41c:	4b30      	ldr	r3, [pc, #192]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a41e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a420:	f003 0304 	and.w	r3, r3, #4
 800a424:	617b      	str	r3, [r7, #20]
 800a426:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a428:	2300      	movs	r3, #0
 800a42a:	613b      	str	r3, [r7, #16]
 800a42c:	4b2c      	ldr	r3, [pc, #176]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a430:	4a2b      	ldr	r2, [pc, #172]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a432:	f043 0301 	orr.w	r3, r3, #1
 800a436:	6313      	str	r3, [r2, #48]	; 0x30
 800a438:	4b29      	ldr	r3, [pc, #164]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43c:	f003 0301 	and.w	r3, r3, #1
 800a440:	613b      	str	r3, [r7, #16]
 800a442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a444:	2300      	movs	r3, #0
 800a446:	60fb      	str	r3, [r7, #12]
 800a448:	4b25      	ldr	r3, [pc, #148]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44c:	4a24      	ldr	r2, [pc, #144]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a44e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a452:	6313      	str	r3, [r2, #48]	; 0x30
 800a454:	4b22      	ldr	r3, [pc, #136]	; (800a4e0 <HAL_ETH_MspInit+0x14c>)
 800a456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a45c:	60fb      	str	r3, [r7, #12]
 800a45e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a460:	2332      	movs	r3, #50	; 0x32
 800a462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a464:	2302      	movs	r3, #2
 800a466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a468:	2300      	movs	r3, #0
 800a46a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a46c:	2303      	movs	r3, #3
 800a46e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a470:	230b      	movs	r3, #11
 800a472:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a478:	4619      	mov	r1, r3
 800a47a:	481a      	ldr	r0, [pc, #104]	; (800a4e4 <HAL_ETH_MspInit+0x150>)
 800a47c:	f7fb f8b6 	bl	80055ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a480:	2386      	movs	r3, #134	; 0x86
 800a482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a484:	2302      	movs	r3, #2
 800a486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a488:	2300      	movs	r3, #0
 800a48a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a48c:	2303      	movs	r3, #3
 800a48e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a490:	230b      	movs	r3, #11
 800a492:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a498:	4619      	mov	r1, r3
 800a49a:	4813      	ldr	r0, [pc, #76]	; (800a4e8 <HAL_ETH_MspInit+0x154>)
 800a49c:	f7fb f8a6 	bl	80055ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800a4a0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800a4a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4a6:	2302      	movs	r3, #2
 800a4a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a4b2:	230b      	movs	r3, #11
 800a4b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a4b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	480b      	ldr	r0, [pc, #44]	; (800a4ec <HAL_ETH_MspInit+0x158>)
 800a4be:	f7fb f895 	bl	80055ec <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 3, 0);
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	2103      	movs	r1, #3
 800a4c6:	203d      	movs	r0, #61	; 0x3d
 800a4c8:	f7f7 fdeb 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a4cc:	203d      	movs	r0, #61	; 0x3d
 800a4ce:	f7f7 fe04 	bl	80020da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a4d2:	bf00      	nop
 800a4d4:	3738      	adds	r7, #56	; 0x38
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	40028000 	.word	0x40028000
 800a4e0:	40023800 	.word	0x40023800
 800a4e4:	40020800 	.word	0x40020800
 800a4e8:	40020000 	.word	0x40020000
 800a4ec:	40021800 	.word	0x40021800

0800a4f0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a4fc:	4b52      	ldr	r3, [pc, #328]	; (800a648 <low_level_init+0x158>)
 800a4fe:	4a53      	ldr	r2, [pc, #332]	; (800a64c <low_level_init+0x15c>)
 800a500:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a502:	4b51      	ldr	r3, [pc, #324]	; (800a648 <low_level_init+0x158>)
 800a504:	2201      	movs	r2, #1
 800a506:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800a508:	4b4f      	ldr	r3, [pc, #316]	; (800a648 <low_level_init+0x158>)
 800a50a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a50e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a510:	4b4d      	ldr	r3, [pc, #308]	; (800a648 <low_level_init+0x158>)
 800a512:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a516:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800a518:	4b4b      	ldr	r3, [pc, #300]	; (800a648 <low_level_init+0x158>)
 800a51a:	2201      	movs	r2, #1
 800a51c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800a51e:	2300      	movs	r3, #0
 800a520:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a522:	2380      	movs	r3, #128	; 0x80
 800a524:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a526:	23e1      	movs	r3, #225	; 0xe1
 800a528:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a52a:	2300      	movs	r3, #0
 800a52c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a52e:	2300      	movs	r3, #0
 800a530:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a532:	2300      	movs	r3, #0
 800a534:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a536:	4a44      	ldr	r2, [pc, #272]	; (800a648 <low_level_init+0x158>)
 800a538:	f107 0308 	add.w	r3, r7, #8
 800a53c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800a53e:	4b42      	ldr	r3, [pc, #264]	; (800a648 <low_level_init+0x158>)
 800a540:	2200      	movs	r2, #0
 800a542:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a544:	4b40      	ldr	r3, [pc, #256]	; (800a648 <low_level_init+0x158>)
 800a546:	2200      	movs	r2, #0
 800a548:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a54a:	4b3f      	ldr	r3, [pc, #252]	; (800a648 <low_level_init+0x158>)
 800a54c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a550:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a552:	483d      	ldr	r0, [pc, #244]	; (800a648 <low_level_init+0x158>)
 800a554:	f7f9 fe9e 	bl	8004294 <HAL_ETH_Init>
 800a558:	4603      	mov	r3, r0
 800a55a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800a55c:	7dfb      	ldrb	r3, [r7, #23]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d108      	bne.n	800a574 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a568:	f043 0304 	orr.w	r3, r3, #4
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a574:	2304      	movs	r3, #4
 800a576:	4a36      	ldr	r2, [pc, #216]	; (800a650 <low_level_init+0x160>)
 800a578:	4936      	ldr	r1, [pc, #216]	; (800a654 <low_level_init+0x164>)
 800a57a:	4833      	ldr	r0, [pc, #204]	; (800a648 <low_level_init+0x158>)
 800a57c:	f7fa f826 	bl	80045cc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800a580:	2304      	movs	r3, #4
 800a582:	4a35      	ldr	r2, [pc, #212]	; (800a658 <low_level_init+0x168>)
 800a584:	4935      	ldr	r1, [pc, #212]	; (800a65c <low_level_init+0x16c>)
 800a586:	4830      	ldr	r0, [pc, #192]	; (800a648 <low_level_init+0x158>)
 800a588:	f7fa f889 	bl	800469e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2206      	movs	r2, #6
 800a590:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a594:	4b2c      	ldr	r3, [pc, #176]	; (800a648 <low_level_init+0x158>)
 800a596:	695b      	ldr	r3, [r3, #20]
 800a598:	781a      	ldrb	r2, [r3, #0]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a5a0:	4b29      	ldr	r3, [pc, #164]	; (800a648 <low_level_init+0x158>)
 800a5a2:	695b      	ldr	r3, [r3, #20]
 800a5a4:	785a      	ldrb	r2, [r3, #1]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a5ac:	4b26      	ldr	r3, [pc, #152]	; (800a648 <low_level_init+0x158>)
 800a5ae:	695b      	ldr	r3, [r3, #20]
 800a5b0:	789a      	ldrb	r2, [r3, #2]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a5b8:	4b23      	ldr	r3, [pc, #140]	; (800a648 <low_level_init+0x158>)
 800a5ba:	695b      	ldr	r3, [r3, #20]
 800a5bc:	78da      	ldrb	r2, [r3, #3]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a5c4:	4b20      	ldr	r3, [pc, #128]	; (800a648 <low_level_init+0x158>)
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	791a      	ldrb	r2, [r3, #4]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a5d0:	4b1d      	ldr	r3, [pc, #116]	; (800a648 <low_level_init+0x158>)
 800a5d2:	695b      	ldr	r3, [r3, #20]
 800a5d4:	795a      	ldrb	r2, [r3, #5]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a5e2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a5ea:	f043 030a 	orr.w	r3, r3, #10
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800a5f6:	4814      	ldr	r0, [pc, #80]	; (800a648 <low_level_init+0x158>)
 800a5f8:	f7fa fb7f 	bl	8004cfa <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 800a5fc:	f107 0310 	add.w	r3, r7, #16
 800a600:	461a      	mov	r2, r3
 800a602:	2111      	movs	r1, #17
 800a604:	4810      	ldr	r0, [pc, #64]	; (800a648 <low_level_init+0x158>)
 800a606:	f7fa faaa 	bl	8004b5e <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	f043 0303 	orr.w	r3, r3, #3
 800a610:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	461a      	mov	r2, r3
 800a616:	2111      	movs	r1, #17
 800a618:	480b      	ldr	r0, [pc, #44]	; (800a648 <low_level_init+0x158>)
 800a61a:	f7fa fb08 	bl	8004c2e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800a61e:	f107 0310 	add.w	r3, r7, #16
 800a622:	461a      	mov	r2, r3
 800a624:	2112      	movs	r1, #18
 800a626:	4808      	ldr	r0, [pc, #32]	; (800a648 <low_level_init+0x158>)
 800a628:	f7fa fa99 	bl	8004b5e <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	f043 0320 	orr.w	r3, r3, #32
 800a632:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	461a      	mov	r2, r3
 800a638:	2112      	movs	r1, #18
 800a63a:	4803      	ldr	r0, [pc, #12]	; (800a648 <low_level_init+0x158>)
 800a63c:	f7fa faf7 	bl	8004c2e <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a640:	bf00      	nop
 800a642:	3718      	adds	r7, #24
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	20006320 	.word	0x20006320
 800a64c:	40028000 	.word	0x40028000
 800a650:	20006368 	.word	0x20006368
 800a654:	20004a50 	.word	0x20004a50
 800a658:	20004ad0 	.word	0x20004ad0
 800a65c:	200062a0 	.word	0x200062a0

0800a660 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b08a      	sub	sp, #40	; 0x28
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a66a:	4b4b      	ldr	r3, [pc, #300]	; (800a798 <low_level_output+0x138>)
 800a66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800a676:	2300      	movs	r3, #0
 800a678:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800a67a:	2300      	movs	r3, #0
 800a67c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800a67e:	2300      	movs	r3, #0
 800a680:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800a682:	4b45      	ldr	r3, [pc, #276]	; (800a798 <low_level_output+0x138>)
 800a684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a686:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800a688:	2300      	movs	r3, #0
 800a68a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	623b      	str	r3, [r7, #32]
 800a690:	e05a      	b.n	800a748 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	da03      	bge.n	800a6a2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800a69a:	23f8      	movs	r3, #248	; 0xf8
 800a69c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800a6a0:	e05c      	b.n	800a75c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	895b      	ldrh	r3, [r3, #10]
 800a6a6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a6ac:	e02f      	b.n	800a70e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800a6ae:	69fa      	ldr	r2, [r7, #28]
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	18d0      	adds	r0, r2, r3
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	685a      	ldr	r2, [r3, #4]
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	18d1      	adds	r1, r2, r3
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	f00e fb55 	bl	8018d74 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	da03      	bge.n	800a6e0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800a6d8:	23f8      	movs	r3, #248	; 0xf8
 800a6da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800a6de:	e03d      	b.n	800a75c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a6f0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a6fc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a708:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	4413      	add	r3, r2
 800a714:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a718:	4293      	cmp	r3, r2
 800a71a:	d8c8      	bhi.n	800a6ae <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800a71c:	69fa      	ldr	r2, [r7, #28]
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	18d0      	adds	r0, r2, r3
 800a722:	6a3b      	ldr	r3, [r7, #32]
 800a724:	685a      	ldr	r2, [r3, #4]
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	4413      	add	r3, r2
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	4619      	mov	r1, r3
 800a72e:	f00e fb21 	bl	8018d74 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a732:	693a      	ldr	r2, [r7, #16]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	4413      	add	r3, r2
 800a738:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	4413      	add	r3, r2
 800a740:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800a742:	6a3b      	ldr	r3, [r7, #32]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	623b      	str	r3, [r7, #32]
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1a1      	bne.n	800a692 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800a74e:	6979      	ldr	r1, [r7, #20]
 800a750:	4811      	ldr	r0, [pc, #68]	; (800a798 <low_level_output+0x138>)
 800a752:	f7fa f811 	bl	8004778 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800a75c:	4b0e      	ldr	r3, [pc, #56]	; (800a798 <low_level_output+0x138>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a764:	3314      	adds	r3, #20
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 0320 	and.w	r3, r3, #32
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00d      	beq.n	800a78c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800a770:	4b09      	ldr	r3, [pc, #36]	; (800a798 <low_level_output+0x138>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a778:	3314      	adds	r3, #20
 800a77a:	2220      	movs	r2, #32
 800a77c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800a77e:	4b06      	ldr	r3, [pc, #24]	; (800a798 <low_level_output+0x138>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a786:	3304      	adds	r3, #4
 800a788:	2200      	movs	r2, #0
 800a78a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800a78c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a790:	4618      	mov	r0, r3
 800a792:	3728      	adds	r7, #40	; 0x28
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	20006320 	.word	0x20006320

0800a79c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b08c      	sub	sp, #48	; 0x30
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800a7c0:	484f      	ldr	r0, [pc, #316]	; (800a900 <low_level_input+0x164>)
 800a7c2:	f7fa f8c3 	bl	800494c <HAL_ETH_GetReceivedFrame>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d001      	beq.n	800a7d0 <low_level_input+0x34>

    return NULL;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	e092      	b.n	800a8f6 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800a7d0:	4b4b      	ldr	r3, [pc, #300]	; (800a900 <low_level_input+0x164>)
 800a7d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7d4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800a7d6:	4b4a      	ldr	r3, [pc, #296]	; (800a900 <low_level_input+0x164>)
 800a7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7da:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800a7dc:	89fb      	ldrh	r3, [r7, #14]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d007      	beq.n	800a7f2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800a7e2:	89fb      	ldrh	r3, [r7, #14]
 800a7e4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	f004 fba6 	bl	800ef3c <pbuf_alloc>
 800a7f0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800a7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d04b      	beq.n	800a890 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a7f8:	4b41      	ldr	r3, [pc, #260]	; (800a900 <low_level_input+0x164>)
 800a7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800a7fe:	2300      	movs	r3, #0
 800a800:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a804:	62bb      	str	r3, [r7, #40]	; 0x28
 800a806:	e040      	b.n	800a88a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80a:	895b      	ldrh	r3, [r3, #10]
 800a80c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800a80e:	2300      	movs	r3, #0
 800a810:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a812:	e021      	b.n	800a858 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800a814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a816:	685a      	ldr	r2, [r3, #4]
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	18d0      	adds	r0, r2, r3
 800a81c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	18d1      	adds	r1, r2, r3
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800a828:	3304      	adds	r3, #4
 800a82a:	461a      	mov	r2, r3
 800a82c:	f00e faa2 	bl	8018d74 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a830:	6a3b      	ldr	r3, [r7, #32]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800a836:	6a3b      	ldr	r3, [r7, #32]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800a83c:	69fa      	ldr	r2, [r7, #28]
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	4413      	add	r3, r2
 800a842:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a846:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800a848:	69ba      	ldr	r2, [r7, #24]
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a852:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800a854:	2300      	movs	r3, #0
 800a856:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a858:	697a      	ldr	r2, [r7, #20]
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	4413      	add	r3, r2
 800a85e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a862:	4293      	cmp	r3, r2
 800a864:	d8d6      	bhi.n	800a814 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800a866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a868:	685a      	ldr	r2, [r3, #4]
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	18d0      	adds	r0, r2, r3
 800a86e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	4413      	add	r3, r2
 800a874:	697a      	ldr	r2, [r7, #20]
 800a876:	4619      	mov	r1, r3
 800a878:	f00e fa7c 	bl	8018d74 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a87c:	69fa      	ldr	r2, [r7, #28]
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	4413      	add	r3, r2
 800a882:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	62bb      	str	r3, [r7, #40]	; 0x28
 800a88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1bb      	bne.n	800a808 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a890:	4b1b      	ldr	r3, [pc, #108]	; (800a900 <low_level_input+0x164>)
 800a892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a894:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a896:	2300      	movs	r3, #0
 800a898:	613b      	str	r3, [r7, #16]
 800a89a:	e00b      	b.n	800a8b4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800a89c:	6a3b      	ldr	r3, [r7, #32]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
 800a8a6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a8a8:	6a3b      	ldr	r3, [r7, #32]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	613b      	str	r3, [r7, #16]
 800a8b4:	4b12      	ldr	r3, [pc, #72]	; (800a900 <low_level_input+0x164>)
 800a8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b8:	693a      	ldr	r2, [r7, #16]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d3ee      	bcc.n	800a89c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800a8be:	4b10      	ldr	r3, [pc, #64]	; (800a900 <low_level_input+0x164>)
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800a8c4:	4b0e      	ldr	r3, [pc, #56]	; (800a900 <low_level_input+0x164>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8cc:	3314      	adds	r3, #20
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00d      	beq.n	800a8f4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800a8d8:	4b09      	ldr	r3, [pc, #36]	; (800a900 <low_level_input+0x164>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8e0:	3314      	adds	r3, #20
 800a8e2:	2280      	movs	r2, #128	; 0x80
 800a8e4:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800a8e6:	4b06      	ldr	r3, [pc, #24]	; (800a900 <low_level_input+0x164>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ee:	3308      	adds	r3, #8
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	601a      	str	r2, [r3, #0]
  }
  return p;
 800a8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3730      	adds	r7, #48	; 0x30
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	20006320 	.word	0x20006320

0800a904 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7ff ff45 	bl	800a79c <low_level_input>
 800a912:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d010      	beq.n	800a93c <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	6879      	ldr	r1, [r7, #4]
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	4798      	blx	r3
 800a924:	4603      	mov	r3, r0
 800a926:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800a928:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d006      	beq.n	800a93e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f004 fde7 	bl	800f504 <pbuf_free>
    p = NULL;
 800a936:	2300      	movs	r3, #0
 800a938:	60fb      	str	r3, [r7, #12]
 800a93a:	e000      	b.n	800a93e <ethernetif_input+0x3a>
  if (p == NULL) return;
 800a93c:	bf00      	nop
  }
}
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d106      	bne.n	800a960 <ethernetif_init+0x1c>
 800a952:	4b0e      	ldr	r3, [pc, #56]	; (800a98c <ethernetif_init+0x48>)
 800a954:	f240 2215 	movw	r2, #533	; 0x215
 800a958:	490d      	ldr	r1, [pc, #52]	; (800a990 <ethernetif_init+0x4c>)
 800a95a:	480e      	ldr	r0, [pc, #56]	; (800a994 <ethernetif_init+0x50>)
 800a95c:	f00e faca 	bl	8018ef4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2273      	movs	r2, #115	; 0x73
 800a964:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2274      	movs	r2, #116	; 0x74
 800a96c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4a09      	ldr	r2, [pc, #36]	; (800a998 <ethernetif_init+0x54>)
 800a974:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a08      	ldr	r2, [pc, #32]	; (800a99c <ethernetif_init+0x58>)
 800a97a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f7ff fdb7 	bl	800a4f0 <low_level_init>

  return ERR_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3708      	adds	r7, #8
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	08019fb4 	.word	0x08019fb4
 800a990:	08019fd0 	.word	0x08019fd0
 800a994:	08019fe0 	.word	0x08019fe0
 800a998:	08016975 	.word	0x08016975
 800a99c:	0800a661 	.word	0x0800a661

0800a9a0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a9a4:	f7f7 fa72 	bl	8001e8c <HAL_GetTick>
 800a9a8:	4603      	mov	r3, r0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a9c6:	089b      	lsrs	r3, r3, #2
 800a9c8:	f003 0301 	and.w	r3, r3, #1
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d05d      	beq.n	800aa8e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800a9d2:	4b34      	ldr	r3, [pc, #208]	; (800aaa4 <ethernetif_update_config+0xf4>)
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d03f      	beq.n	800aa5a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800a9da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a9de:	2100      	movs	r1, #0
 800a9e0:	4830      	ldr	r0, [pc, #192]	; (800aaa4 <ethernetif_update_config+0xf4>)
 800a9e2:	f7fa f924 	bl	8004c2e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800a9e6:	f7f7 fa51 	bl	8001e8c <HAL_GetTick>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800a9ee:	f107 0308 	add.w	r3, r7, #8
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	2101      	movs	r1, #1
 800a9f6:	482b      	ldr	r0, [pc, #172]	; (800aaa4 <ethernetif_update_config+0xf4>)
 800a9f8:	f7fa f8b1 	bl	8004b5e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800a9fc:	f7f7 fa46 	bl	8001e8c <HAL_GetTick>
 800aa00:	4602      	mov	r2, r0
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa0a:	d828      	bhi.n	800aa5e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f003 0320 	and.w	r3, r3, #32
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d0eb      	beq.n	800a9ee <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800aa16:	f107 0308 	add.w	r3, r7, #8
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	2131      	movs	r1, #49	; 0x31
 800aa1e:	4821      	ldr	r0, [pc, #132]	; (800aaa4 <ethernetif_update_config+0xf4>)
 800aa20:	f7fa f89d 	bl	8004b5e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	f003 0310 	and.w	r3, r3, #16
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d004      	beq.n	800aa38 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800aa2e:	4b1d      	ldr	r3, [pc, #116]	; (800aaa4 <ethernetif_update_config+0xf4>)
 800aa30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa34:	60da      	str	r2, [r3, #12]
 800aa36:	e002      	b.n	800aa3e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800aa38:	4b1a      	ldr	r3, [pc, #104]	; (800aaa4 <ethernetif_update_config+0xf4>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	f003 0304 	and.w	r3, r3, #4
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d003      	beq.n	800aa50 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800aa48:	4b16      	ldr	r3, [pc, #88]	; (800aaa4 <ethernetif_update_config+0xf4>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	609a      	str	r2, [r3, #8]
 800aa4e:	e016      	b.n	800aa7e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800aa50:	4b14      	ldr	r3, [pc, #80]	; (800aaa4 <ethernetif_update_config+0xf4>)
 800aa52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800aa56:	609a      	str	r2, [r3, #8]
 800aa58:	e011      	b.n	800aa7e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800aa5a:	bf00      	nop
 800aa5c:	e000      	b.n	800aa60 <ethernetif_update_config+0xb0>
          goto error;
 800aa5e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800aa60:	4b10      	ldr	r3, [pc, #64]	; (800aaa4 <ethernetif_update_config+0xf4>)
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	08db      	lsrs	r3, r3, #3
 800aa66:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800aa68:	4b0e      	ldr	r3, [pc, #56]	; (800aaa4 <ethernetif_update_config+0xf4>)
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	085b      	lsrs	r3, r3, #1
 800aa6e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800aa70:	4313      	orrs	r3, r2
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	461a      	mov	r2, r3
 800aa76:	2100      	movs	r1, #0
 800aa78:	480a      	ldr	r0, [pc, #40]	; (800aaa4 <ethernetif_update_config+0xf4>)
 800aa7a:	f7fa f8d8 	bl	8004c2e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800aa7e:	2100      	movs	r1, #0
 800aa80:	4808      	ldr	r0, [pc, #32]	; (800aaa4 <ethernetif_update_config+0xf4>)
 800aa82:	f7fa f999 	bl	8004db8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800aa86:	4807      	ldr	r0, [pc, #28]	; (800aaa4 <ethernetif_update_config+0xf4>)
 800aa88:	f7fa f937 	bl	8004cfa <HAL_ETH_Start>
 800aa8c:	e002      	b.n	800aa94 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800aa8e:	4805      	ldr	r0, [pc, #20]	; (800aaa4 <ethernetif_update_config+0xf4>)
 800aa90:	f7fa f962 	bl	8004d58 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 f807 	bl	800aaa8 <ethernetif_notify_conn_changed>
}
 800aa9a:	bf00      	nop
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	20006320 	.word	0x20006320

0800aaa8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800aabc:	b590      	push	{r4, r7, lr}
 800aabe:	b089      	sub	sp, #36	; 0x24
 800aac0:	af04      	add	r7, sp, #16
 800aac2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaca:	7919      	ldrb	r1, [r3, #4]
 800aacc:	2350      	movs	r3, #80	; 0x50
 800aace:	2206      	movs	r2, #6
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f001 fe1b 	bl	800c70c <USBH_FindInterface>
 800aad6:	4603      	mov	r3, r0
 800aad8:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800aada:	7bfb      	ldrb	r3, [r7, #15]
 800aadc:	2bff      	cmp	r3, #255	; 0xff
 800aade:	d002      	beq.n	800aae6 <USBH_MSC_InterfaceInit+0x2a>
 800aae0:	7bfb      	ldrb	r3, [r7, #15]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d90f      	bls.n	800ab06 <USBH_MSC_InterfaceInit+0x4a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800aae6:	4886      	ldr	r0, [pc, #536]	; (800ad00 <USBH_MSC_InterfaceInit+0x244>)
 800aae8:	f00e fa04 	bl	8018ef4 <iprintf>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	4883      	ldr	r0, [pc, #524]	; (800ad04 <USBH_MSC_InterfaceInit+0x248>)
 800aaf8:	f00e f9fc 	bl	8018ef4 <iprintf>
 800aafc:	200a      	movs	r0, #10
 800aafe:	f00e fa11 	bl	8018f24 <putchar>
    return USBH_FAIL;
 800ab02:	2302      	movs	r3, #2
 800ab04:	e0f8      	b.n	800acf8 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800ab06:	7bfb      	ldrb	r3, [r7, #15]
 800ab08:	4619      	mov	r1, r3
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f001 fd96 	bl	800c63c <USBH_SelectInterface>
 800ab10:	4603      	mov	r3, r0
 800ab12:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d001      	beq.n	800ab1e <USBH_MSC_InterfaceInit+0x62>
  {
    return USBH_FAIL;
 800ab1a:	2302      	movs	r3, #2
 800ab1c:	e0ec      	b.n	800acf8 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800ab24:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ab28:	f00e f906 	bl	8018d38 <malloc>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab36:	69db      	ldr	r3, [r3, #28]
 800ab38:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10a      	bne.n	800ab56 <USBH_MSC_InterfaceInit+0x9a>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 800ab40:	486f      	ldr	r0, [pc, #444]	; (800ad00 <USBH_MSC_InterfaceInit+0x244>)
 800ab42:	f00e f9d7 	bl	8018ef4 <iprintf>
 800ab46:	4870      	ldr	r0, [pc, #448]	; (800ad08 <USBH_MSC_InterfaceInit+0x24c>)
 800ab48:	f00e f9d4 	bl	8018ef4 <iprintf>
 800ab4c:	200a      	movs	r0, #10
 800ab4e:	f00e f9e9 	bl	8018f24 <putchar>
    return USBH_FAIL;
 800ab52:	2302      	movs	r3, #2
 800ab54:	e0d0      	b.n	800acf8 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800ab56:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	68b8      	ldr	r0, [r7, #8]
 800ab5e:	f00e f917 	bl	8018d90 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800ab62:	7bfb      	ldrb	r3, [r7, #15]
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	211a      	movs	r1, #26
 800ab68:	fb01 f303 	mul.w	r3, r1, r3
 800ab6c:	4413      	add	r3, r2
 800ab6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	b25b      	sxtb	r3, r3
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	da16      	bge.n	800aba8 <USBH_MSC_InterfaceInit+0xec>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800ab7a:	7bfb      	ldrb	r3, [r7, #15]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	211a      	movs	r1, #26
 800ab80:	fb01 f303 	mul.w	r3, r1, r3
 800ab84:	4413      	add	r3, r2
 800ab86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ab8a:	781a      	ldrb	r2, [r3, #0]
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ab90:	7bfb      	ldrb	r3, [r7, #15]
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	211a      	movs	r1, #26
 800ab96:	fb01 f303 	mul.w	r3, r1, r3
 800ab9a:	4413      	add	r3, r2
 800ab9c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800aba0:	881a      	ldrh	r2, [r3, #0]
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	815a      	strh	r2, [r3, #10]
 800aba6:	e015      	b.n	800abd4 <USBH_MSC_InterfaceInit+0x118>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	211a      	movs	r1, #26
 800abae:	fb01 f303 	mul.w	r3, r1, r3
 800abb2:	4413      	add	r3, r2
 800abb4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800abb8:	781a      	ldrb	r2, [r3, #0]
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800abbe:	7bfb      	ldrb	r3, [r7, #15]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	211a      	movs	r1, #26
 800abc4:	fb01 f303 	mul.w	r3, r1, r3
 800abc8:	4413      	add	r3, r2
 800abca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800abce:	881a      	ldrh	r2, [r3, #0]
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800abd4:	7bfb      	ldrb	r3, [r7, #15]
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	211a      	movs	r1, #26
 800abda:	fb01 f303 	mul.w	r3, r1, r3
 800abde:	4413      	add	r3, r2
 800abe0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	b25b      	sxtb	r3, r3
 800abe8:	2b00      	cmp	r3, #0
 800abea:	da16      	bge.n	800ac1a <USBH_MSC_InterfaceInit+0x15e>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800abec:	7bfb      	ldrb	r3, [r7, #15]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	211a      	movs	r1, #26
 800abf2:	fb01 f303 	mul.w	r3, r1, r3
 800abf6:	4413      	add	r3, r2
 800abf8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800abfc:	781a      	ldrb	r2, [r3, #0]
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ac02:	7bfb      	ldrb	r3, [r7, #15]
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	211a      	movs	r1, #26
 800ac08:	fb01 f303 	mul.w	r3, r1, r3
 800ac0c:	4413      	add	r3, r2
 800ac0e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ac12:	881a      	ldrh	r2, [r3, #0]
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	815a      	strh	r2, [r3, #10]
 800ac18:	e015      	b.n	800ac46 <USBH_MSC_InterfaceInit+0x18a>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800ac1a:	7bfb      	ldrb	r3, [r7, #15]
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	211a      	movs	r1, #26
 800ac20:	fb01 f303 	mul.w	r3, r1, r3
 800ac24:	4413      	add	r3, r2
 800ac26:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ac2a:	781a      	ldrb	r2, [r3, #0]
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	211a      	movs	r1, #26
 800ac36:	fb01 f303 	mul.w	r3, r1, r3
 800ac3a:	4413      	add	r3, r2
 800ac3c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ac40:	881a      	ldrh	r2, [r3, #0]
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	2200      	movs	r2, #0
 800ac56:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	799b      	ldrb	r3, [r3, #6]
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f003 f8cf 	bl	800de02 <USBH_AllocPipe>
 800ac64:	4603      	mov	r3, r0
 800ac66:	461a      	mov	r2, r3
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	79db      	ldrb	r3, [r3, #7]
 800ac70:	4619      	mov	r1, r3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f003 f8c5 	bl	800de02 <USBH_AllocPipe>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 feed 	bl	800ba60 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	7959      	ldrb	r1, [r3, #5]
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	7998      	ldrb	r0, [r3, #6]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac9a:	68ba      	ldr	r2, [r7, #8]
 800ac9c:	8912      	ldrh	r2, [r2, #8]
 800ac9e:	9202      	str	r2, [sp, #8]
 800aca0:	2202      	movs	r2, #2
 800aca2:	9201      	str	r2, [sp, #4]
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	4623      	mov	r3, r4
 800aca8:	4602      	mov	r2, r0
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f003 f87a 	bl	800dda4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	7919      	ldrb	r1, [r3, #4]
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	79d8      	ldrb	r0, [r3, #7]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800acc4:	68ba      	ldr	r2, [r7, #8]
 800acc6:	8952      	ldrh	r2, [r2, #10]
 800acc8:	9202      	str	r2, [sp, #8]
 800acca:	2202      	movs	r2, #2
 800accc:	9201      	str	r2, [sp, #4]
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	4623      	mov	r3, r4
 800acd2:	4602      	mov	r2, r0
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f003 f865 	bl	800dda4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	791b      	ldrb	r3, [r3, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	4619      	mov	r1, r3
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f00d ff50 	bl	8018b88 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	795b      	ldrb	r3, [r3, #5]
 800acec:	2200      	movs	r2, #0
 800acee:	4619      	mov	r1, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f00d ff49 	bl	8018b88 <USBH_LL_SetToggle>

  return USBH_OK;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3714      	adds	r7, #20
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd90      	pop	{r4, r7, pc}
 800ad00:	0801a00c 	.word	0x0801a00c
 800ad04:	0801a018 	.word	0x0801a018
 800ad08:	0801a040 	.word	0x0801a040

0800ad0c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad1a:	69db      	ldr	r3, [r3, #28]
 800ad1c:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	795b      	ldrb	r3, [r3, #5]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00e      	beq.n	800ad44 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	795b      	ldrb	r3, [r3, #5]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f003 f858 	bl	800dde2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	795b      	ldrb	r3, [r3, #5]
 800ad36:	4619      	mov	r1, r3
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f003 f883 	bl	800de44 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	791b      	ldrb	r3, [r3, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00e      	beq.n	800ad6a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	791b      	ldrb	r3, [r3, #4]
 800ad50:	4619      	mov	r1, r3
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f003 f845 	bl	800dde2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	791b      	ldrb	r3, [r3, #4]
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f003 f870 	bl	800de44 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00b      	beq.n	800ad8e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad7c:	69db      	ldr	r3, [r3, #28]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f00d ffe2 	bl	8018d48 <free>
    phost->pActiveClass->pData = 0U;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3710      	adds	r7, #16
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ada6:	69db      	ldr	r3, [r3, #28]
 800ada8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800adaa:	2301      	movs	r3, #1
 800adac:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	7b9b      	ldrb	r3, [r3, #14]
 800adb2:	2b03      	cmp	r3, #3
 800adb4:	d04a      	beq.n	800ae4c <USBH_MSC_ClassRequest+0xb4>
 800adb6:	2b03      	cmp	r3, #3
 800adb8:	dc54      	bgt.n	800ae64 <USBH_MSC_ClassRequest+0xcc>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d001      	beq.n	800adc2 <USBH_MSC_ClassRequest+0x2a>
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d150      	bne.n	800ae64 <USBH_MSC_ClassRequest+0xcc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	4619      	mov	r1, r3
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fe2b 	bl	800ba22 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800adcc:	4603      	mov	r3, r0
 800adce:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800add0:	7bfb      	ldrb	r3, [r7, #15]
 800add2:	2b03      	cmp	r3, #3
 800add4:	d104      	bne.n	800ade0 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2200      	movs	r2, #0
 800adda:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800addc:	2300      	movs	r3, #0
 800adde:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d140      	bne.n	800ae68 <USBH_MSC_ClassRequest+0xd0>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	2b02      	cmp	r3, #2
 800adec:	d804      	bhi.n	800adf8 <USBH_MSC_ClassRequest+0x60>
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	3301      	adds	r3, #1
 800adf4:	b2da      	uxtb	r2, r3
 800adf6:	e000      	b.n	800adfa <USBH_MSC_ClassRequest+0x62>
 800adf8:	2202      	movs	r2, #2
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	4619      	mov	r1, r3
 800ae04:	481c      	ldr	r0, [pc, #112]	; (800ae78 <USBH_MSC_ClassRequest+0xe0>)
 800ae06:	f00e f875 	bl	8018ef4 <iprintf>
 800ae0a:	200a      	movs	r0, #10
 800ae0c:	f00e f88a 	bl	8018f24 <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ae10:	2300      	movs	r3, #0
 800ae12:	73bb      	strb	r3, [r7, #14]
 800ae14:	e014      	b.n	800ae40 <USBH_MSC_ClassRequest+0xa8>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800ae16:	7bbb      	ldrb	r3, [r7, #14]
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	2134      	movs	r1, #52	; 0x34
 800ae1c:	fb01 f303 	mul.w	r3, r1, r3
 800ae20:	4413      	add	r3, r2
 800ae22:	3392      	adds	r3, #146	; 0x92
 800ae24:	2202      	movs	r2, #2
 800ae26:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
 800ae2a:	68ba      	ldr	r2, [r7, #8]
 800ae2c:	2134      	movs	r1, #52	; 0x34
 800ae2e:	fb01 f303 	mul.w	r3, r1, r3
 800ae32:	4413      	add	r3, r2
 800ae34:	33c1      	adds	r3, #193	; 0xc1
 800ae36:	2200      	movs	r2, #0
 800ae38:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ae3a:	7bbb      	ldrb	r3, [r7, #14]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	73bb      	strb	r3, [r7, #14]
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	7bba      	ldrb	r2, [r7, #14]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d3e5      	bcc.n	800ae16 <USBH_MSC_ClassRequest+0x7e>
        }
      }
      break;
 800ae4a:	e00d      	b.n	800ae68 <USBH_MSC_ClassRequest+0xd0>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f002 fb69 	bl	800d526 <USBH_ClrFeature>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d108      	bne.n	800ae6c <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	7bda      	ldrb	r2, [r3, #15]
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	739a      	strb	r2, [r3, #14]
      }
      break;
 800ae62:	e003      	b.n	800ae6c <USBH_MSC_ClassRequest+0xd4>

    default:
      break;
 800ae64:	bf00      	nop
 800ae66:	e002      	b.n	800ae6e <USBH_MSC_ClassRequest+0xd6>
      break;
 800ae68:	bf00      	nop
 800ae6a:	e000      	b.n	800ae6e <USBH_MSC_ClassRequest+0xd6>
      break;
 800ae6c:	bf00      	nop
  }

  return status;
 800ae6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	0801a068 	.word	0x0801a068

0800ae7c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae8a:	69db      	ldr	r3, [r3, #28]
 800ae8c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800ae92:	2301      	movs	r3, #1
 800ae94:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800ae96:	2301      	movs	r3, #1
 800ae98:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	7b1b      	ldrb	r3, [r3, #12]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d003      	beq.n	800aeaa <USBH_MSC_Process+0x2e>
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	f000 8355 	beq.w	800b552 <USBH_MSC_Process+0x6d6>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800aea8:	e356      	b.n	800b558 <USBH_MSC_Process+0x6dc>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	f080 8333 	bcs.w	800b522 <USBH_MSC_Process+0x6a6>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aec2:	4619      	mov	r1, r3
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	2334      	movs	r3, #52	; 0x34
 800aec8:	fb03 f301 	mul.w	r3, r3, r1
 800aecc:	4413      	add	r3, r2
 800aece:	3391      	adds	r3, #145	; 0x91
 800aed0:	2201      	movs	r2, #1
 800aed2:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aeda:	4619      	mov	r1, r3
 800aedc:	693a      	ldr	r2, [r7, #16]
 800aede:	2334      	movs	r3, #52	; 0x34
 800aee0:	fb03 f301 	mul.w	r3, r3, r1
 800aee4:	4413      	add	r3, r2
 800aee6:	3390      	adds	r3, #144	; 0x90
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	2b08      	cmp	r3, #8
 800aeec:	f200 8327 	bhi.w	800b53e <USBH_MSC_Process+0x6c2>
 800aef0:	a201      	add	r2, pc, #4	; (adr r2, 800aef8 <USBH_MSC_Process+0x7c>)
 800aef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef6:	bf00      	nop
 800aef8:	0800af1d 	.word	0x0800af1d
 800aefc:	0800b53f 	.word	0x0800b53f
 800af00:	0800b065 	.word	0x0800b065
 800af04:	0800b219 	.word	0x0800b219
 800af08:	0800af57 	.word	0x0800af57
 800af0c:	0800b385 	.word	0x0800b385
 800af10:	0800b53f 	.word	0x0800b53f
 800af14:	0800b53f 	.word	0x0800b53f
 800af18:	0800b511 	.word	0x0800b511
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af22:	4619      	mov	r1, r3
 800af24:	48b6      	ldr	r0, [pc, #728]	; (800b200 <USBH_MSC_Process+0x384>)
 800af26:	f00d ffe5 	bl	8018ef4 <iprintf>
 800af2a:	200a      	movs	r0, #10
 800af2c:	f00d fffa 	bl	8018f24 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af36:	4619      	mov	r1, r3
 800af38:	693a      	ldr	r2, [r7, #16]
 800af3a:	2334      	movs	r3, #52	; 0x34
 800af3c:	fb03 f301 	mul.w	r3, r3, r1
 800af40:	4413      	add	r3, r2
 800af42:	3390      	adds	r3, #144	; 0x90
 800af44:	2204      	movs	r2, #4
 800af46:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800af54:	e2fc      	b.n	800b550 <USBH_MSC_Process+0x6d4>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af5c:	b2d9      	uxtb	r1, r3
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af64:	461a      	mov	r2, r3
 800af66:	2334      	movs	r3, #52	; 0x34
 800af68:	fb03 f302 	mul.w	r3, r3, r2
 800af6c:	3398      	adds	r3, #152	; 0x98
 800af6e:	693a      	ldr	r2, [r7, #16]
 800af70:	4413      	add	r3, r2
 800af72:	3307      	adds	r3, #7
 800af74:	461a      	mov	r2, r3
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f001 f890 	bl	800c09c <USBH_MSC_SCSI_Inquiry>
 800af7c:	4603      	mov	r3, r0
 800af7e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800af80:	7bfb      	ldrb	r3, [r7, #15]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d141      	bne.n	800b00a <USBH_MSC_Process+0x18e>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af8c:	461a      	mov	r2, r3
 800af8e:	2334      	movs	r3, #52	; 0x34
 800af90:	fb03 f302 	mul.w	r3, r3, r2
 800af94:	3398      	adds	r3, #152	; 0x98
 800af96:	693a      	ldr	r2, [r7, #16]
 800af98:	4413      	add	r3, r2
 800af9a:	330a      	adds	r3, #10
 800af9c:	4619      	mov	r1, r3
 800af9e:	4899      	ldr	r0, [pc, #612]	; (800b204 <USBH_MSC_Process+0x388>)
 800afa0:	f00d ffa8 	bl	8018ef4 <iprintf>
 800afa4:	200a      	movs	r0, #10
 800afa6:	f00d ffbd 	bl	8018f24 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afb0:	461a      	mov	r2, r3
 800afb2:	2334      	movs	r3, #52	; 0x34
 800afb4:	fb03 f302 	mul.w	r3, r3, r2
 800afb8:	33a0      	adds	r3, #160	; 0xa0
 800afba:	693a      	ldr	r2, [r7, #16]
 800afbc:	4413      	add	r3, r2
 800afbe:	330b      	adds	r3, #11
 800afc0:	4619      	mov	r1, r3
 800afc2:	4891      	ldr	r0, [pc, #580]	; (800b208 <USBH_MSC_Process+0x38c>)
 800afc4:	f00d ff96 	bl	8018ef4 <iprintf>
 800afc8:	200a      	movs	r0, #10
 800afca:	f00d ffab 	bl	8018f24 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afd4:	461a      	mov	r2, r3
 800afd6:	2334      	movs	r3, #52	; 0x34
 800afd8:	fb03 f302 	mul.w	r3, r3, r2
 800afdc:	33b0      	adds	r3, #176	; 0xb0
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	4413      	add	r3, r2
 800afe2:	330c      	adds	r3, #12
 800afe4:	4619      	mov	r1, r3
 800afe6:	4889      	ldr	r0, [pc, #548]	; (800b20c <USBH_MSC_Process+0x390>)
 800afe8:	f00d ff84 	bl	8018ef4 <iprintf>
 800afec:	200a      	movs	r0, #10
 800afee:	f00d ff99 	bl	8018f24 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aff8:	4619      	mov	r1, r3
 800affa:	693a      	ldr	r2, [r7, #16]
 800affc:	2334      	movs	r3, #52	; 0x34
 800affe:	fb03 f301 	mul.w	r3, r3, r1
 800b002:	4413      	add	r3, r2
 800b004:	3390      	adds	r3, #144	; 0x90
 800b006:	2202      	movs	r2, #2
 800b008:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d10c      	bne.n	800b02a <USBH_MSC_Process+0x1ae>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b016:	4619      	mov	r1, r3
 800b018:	693a      	ldr	r2, [r7, #16]
 800b01a:	2334      	movs	r3, #52	; 0x34
 800b01c:	fb03 f301 	mul.w	r3, r3, r1
 800b020:	4413      	add	r3, r2
 800b022:	3390      	adds	r3, #144	; 0x90
 800b024:	2205      	movs	r2, #5
 800b026:	701a      	strb	r2, [r3, #0]
            break;
 800b028:	e28b      	b.n	800b542 <USBH_MSC_Process+0x6c6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b02a:	7bfb      	ldrb	r3, [r7, #15]
 800b02c:	2b04      	cmp	r3, #4
 800b02e:	f040 8288 	bne.w	800b542 <USBH_MSC_Process+0x6c6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b038:	4619      	mov	r1, r3
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	2334      	movs	r3, #52	; 0x34
 800b03e:	fb03 f301 	mul.w	r3, r3, r1
 800b042:	4413      	add	r3, r2
 800b044:	3390      	adds	r3, #144	; 0x90
 800b046:	2201      	movs	r2, #1
 800b048:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b050:	4619      	mov	r1, r3
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	2334      	movs	r3, #52	; 0x34
 800b056:	fb03 f301 	mul.w	r3, r3, r1
 800b05a:	4413      	add	r3, r2
 800b05c:	3391      	adds	r3, #145	; 0x91
 800b05e:	2202      	movs	r2, #2
 800b060:	701a      	strb	r2, [r3, #0]
            break;
 800b062:	e26e      	b.n	800b542 <USBH_MSC_Process+0x6c6>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	4619      	mov	r1, r3
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 ff56 	bl	800bf20 <USBH_MSC_SCSI_TestUnitReady>
 800b074:	4603      	mov	r3, r0
 800b076:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800b078:	7bbb      	ldrb	r3, [r7, #14]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d14f      	bne.n	800b11e <USBH_MSC_Process+0x2a2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b084:	4619      	mov	r1, r3
 800b086:	693a      	ldr	r2, [r7, #16]
 800b088:	2334      	movs	r3, #52	; 0x34
 800b08a:	fb03 f301 	mul.w	r3, r3, r1
 800b08e:	4413      	add	r3, r2
 800b090:	3392      	adds	r3, #146	; 0x92
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d012      	beq.n	800b0be <USBH_MSC_Process+0x242>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b09e:	4619      	mov	r1, r3
 800b0a0:	693a      	ldr	r2, [r7, #16]
 800b0a2:	2334      	movs	r3, #52	; 0x34
 800b0a4:	fb03 f301 	mul.w	r3, r3, r1
 800b0a8:	4413      	add	r3, r2
 800b0aa:	33c1      	adds	r3, #193	; 0xc1
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 800b0b0:	4857      	ldr	r0, [pc, #348]	; (800b210 <USBH_MSC_Process+0x394>)
 800b0b2:	f00d ff1f 	bl	8018ef4 <iprintf>
 800b0b6:	200a      	movs	r0, #10
 800b0b8:	f00d ff34 	bl	8018f24 <putchar>
 800b0bc:	e00b      	b.n	800b0d6 <USBH_MSC_Process+0x25a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	2334      	movs	r3, #52	; 0x34
 800b0ca:	fb03 f301 	mul.w	r3, r3, r1
 800b0ce:	4413      	add	r3, r2
 800b0d0:	33c1      	adds	r3, #193	; 0xc1
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0dc:	4619      	mov	r1, r3
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	2334      	movs	r3, #52	; 0x34
 800b0e2:	fb03 f301 	mul.w	r3, r3, r1
 800b0e6:	4413      	add	r3, r2
 800b0e8:	3390      	adds	r3, #144	; 0x90
 800b0ea:	2203      	movs	r2, #3
 800b0ec:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	693a      	ldr	r2, [r7, #16]
 800b0f8:	2334      	movs	r3, #52	; 0x34
 800b0fa:	fb03 f301 	mul.w	r3, r3, r1
 800b0fe:	4413      	add	r3, r2
 800b100:	3391      	adds	r3, #145	; 0x91
 800b102:	2200      	movs	r2, #0
 800b104:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b10c:	4619      	mov	r1, r3
 800b10e:	693a      	ldr	r2, [r7, #16]
 800b110:	2334      	movs	r3, #52	; 0x34
 800b112:	fb03 f301 	mul.w	r3, r3, r1
 800b116:	4413      	add	r3, r2
 800b118:	3392      	adds	r3, #146	; 0x92
 800b11a:	2200      	movs	r2, #0
 800b11c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800b11e:	7bbb      	ldrb	r3, [r7, #14]
 800b120:	2b02      	cmp	r3, #2
 800b122:	d150      	bne.n	800b1c6 <USBH_MSC_Process+0x34a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b12a:	4619      	mov	r1, r3
 800b12c:	693a      	ldr	r2, [r7, #16]
 800b12e:	2334      	movs	r3, #52	; 0x34
 800b130:	fb03 f301 	mul.w	r3, r3, r1
 800b134:	4413      	add	r3, r2
 800b136:	3392      	adds	r3, #146	; 0x92
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d012      	beq.n	800b164 <USBH_MSC_Process+0x2e8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b144:	4619      	mov	r1, r3
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	2334      	movs	r3, #52	; 0x34
 800b14a:	fb03 f301 	mul.w	r3, r3, r1
 800b14e:	4413      	add	r3, r2
 800b150:	33c1      	adds	r3, #193	; 0xc1
 800b152:	2201      	movs	r2, #1
 800b154:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 800b156:	482f      	ldr	r0, [pc, #188]	; (800b214 <USBH_MSC_Process+0x398>)
 800b158:	f00d fecc 	bl	8018ef4 <iprintf>
 800b15c:	200a      	movs	r0, #10
 800b15e:	f00d fee1 	bl	8018f24 <putchar>
 800b162:	e00b      	b.n	800b17c <USBH_MSC_Process+0x300>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b16a:	4619      	mov	r1, r3
 800b16c:	693a      	ldr	r2, [r7, #16]
 800b16e:	2334      	movs	r3, #52	; 0x34
 800b170:	fb03 f301 	mul.w	r3, r3, r1
 800b174:	4413      	add	r3, r2
 800b176:	33c1      	adds	r3, #193	; 0xc1
 800b178:	2200      	movs	r2, #0
 800b17a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b182:	4619      	mov	r1, r3
 800b184:	693a      	ldr	r2, [r7, #16]
 800b186:	2334      	movs	r3, #52	; 0x34
 800b188:	fb03 f301 	mul.w	r3, r3, r1
 800b18c:	4413      	add	r3, r2
 800b18e:	3390      	adds	r3, #144	; 0x90
 800b190:	2205      	movs	r2, #5
 800b192:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b19a:	4619      	mov	r1, r3
 800b19c:	693a      	ldr	r2, [r7, #16]
 800b19e:	2334      	movs	r3, #52	; 0x34
 800b1a0:	fb03 f301 	mul.w	r3, r3, r1
 800b1a4:	4413      	add	r3, r2
 800b1a6:	3391      	adds	r3, #145	; 0x91
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	693a      	ldr	r2, [r7, #16]
 800b1b6:	2334      	movs	r3, #52	; 0x34
 800b1b8:	fb03 f301 	mul.w	r3, r3, r1
 800b1bc:	4413      	add	r3, r2
 800b1be:	3392      	adds	r3, #146	; 0x92
 800b1c0:	2202      	movs	r2, #2
 800b1c2:	701a      	strb	r2, [r3, #0]
            break;
 800b1c4:	e1bf      	b.n	800b546 <USBH_MSC_Process+0x6ca>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b1c6:	7bbb      	ldrb	r3, [r7, #14]
 800b1c8:	2b04      	cmp	r3, #4
 800b1ca:	f040 81bc 	bne.w	800b546 <USBH_MSC_Process+0x6ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	693a      	ldr	r2, [r7, #16]
 800b1d8:	2334      	movs	r3, #52	; 0x34
 800b1da:	fb03 f301 	mul.w	r3, r3, r1
 800b1de:	4413      	add	r3, r2
 800b1e0:	3390      	adds	r3, #144	; 0x90
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	693a      	ldr	r2, [r7, #16]
 800b1f0:	2334      	movs	r3, #52	; 0x34
 800b1f2:	fb03 f301 	mul.w	r3, r3, r1
 800b1f6:	4413      	add	r3, r2
 800b1f8:	3391      	adds	r3, #145	; 0x91
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	701a      	strb	r2, [r3, #0]
            break;
 800b1fe:	e1a2      	b.n	800b546 <USBH_MSC_Process+0x6ca>
 800b200:	0801a084 	.word	0x0801a084
 800b204:	0801a090 	.word	0x0801a090
 800b208:	0801a0a8 	.word	0x0801a0a8
 800b20c:	0801a0c0 	.word	0x0801a0c0
 800b210:	0801a0d8 	.word	0x0801a0d8
 800b214:	0801a0ec 	.word	0x0801a0ec
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b21e:	b2d9      	uxtb	r1, r3
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b226:	461a      	mov	r2, r3
 800b228:	2334      	movs	r3, #52	; 0x34
 800b22a:	fb03 f302 	mul.w	r3, r3, r2
 800b22e:	3390      	adds	r3, #144	; 0x90
 800b230:	693a      	ldr	r2, [r7, #16]
 800b232:	4413      	add	r3, r2
 800b234:	3304      	adds	r3, #4
 800b236:	461a      	mov	r2, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 feb4 	bl	800bfa6 <USBH_MSC_SCSI_ReadCapacity>
 800b23e:	4603      	mov	r3, r0
 800b240:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b242:	7bfb      	ldrb	r3, [r7, #15]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d170      	bne.n	800b32a <USBH_MSC_Process+0x4ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b24e:	4619      	mov	r1, r3
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	2334      	movs	r3, #52	; 0x34
 800b254:	fb03 f301 	mul.w	r3, r3, r1
 800b258:	4413      	add	r3, r2
 800b25a:	33c1      	adds	r3, #193	; 0xc1
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d142      	bne.n	800b2e8 <USBH_MSC_Process+0x46c>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b268:	4619      	mov	r1, r3
 800b26a:	693a      	ldr	r2, [r7, #16]
 800b26c:	2334      	movs	r3, #52	; 0x34
 800b26e:	fb03 f301 	mul.w	r3, r3, r1
 800b272:	4413      	add	r3, r2
 800b274:	3394      	adds	r3, #148	; 0x94
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	693a      	ldr	r2, [r7, #16]
 800b27a:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 800b27e:	4610      	mov	r0, r2
 800b280:	6939      	ldr	r1, [r7, #16]
 800b282:	2234      	movs	r2, #52	; 0x34
 800b284:	fb02 f200 	mul.w	r2, r2, r0
 800b288:	440a      	add	r2, r1
 800b28a:	3298      	adds	r2, #152	; 0x98
 800b28c:	8812      	ldrh	r2, [r2, #0]
 800b28e:	fb02 f303 	mul.w	r3, r2, r3
 800b292:	4619      	mov	r1, r3
 800b294:	48b3      	ldr	r0, [pc, #716]	; (800b564 <USBH_MSC_Process+0x6e8>)
 800b296:	f00d fe2d 	bl	8018ef4 <iprintf>
 800b29a:	200a      	movs	r0, #10
 800b29c:	f00d fe42 	bl	8018f24 <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	693a      	ldr	r2, [r7, #16]
 800b2aa:	2334      	movs	r3, #52	; 0x34
 800b2ac:	fb03 f301 	mul.w	r3, r3, r1
 800b2b0:	4413      	add	r3, r2
 800b2b2:	3394      	adds	r3, #148	; 0x94
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	48ab      	ldr	r0, [pc, #684]	; (800b568 <USBH_MSC_Process+0x6ec>)
 800b2ba:	f00d fe1b 	bl	8018ef4 <iprintf>
 800b2be:	200a      	movs	r0, #10
 800b2c0:	f00d fe30 	bl	8018f24 <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	693a      	ldr	r2, [r7, #16]
 800b2ce:	2334      	movs	r3, #52	; 0x34
 800b2d0:	fb03 f301 	mul.w	r3, r3, r1
 800b2d4:	4413      	add	r3, r2
 800b2d6:	3398      	adds	r3, #152	; 0x98
 800b2d8:	881b      	ldrh	r3, [r3, #0]
 800b2da:	4619      	mov	r1, r3
 800b2dc:	48a3      	ldr	r0, [pc, #652]	; (800b56c <USBH_MSC_Process+0x6f0>)
 800b2de:	f00d fe09 	bl	8018ef4 <iprintf>
 800b2e2:	200a      	movs	r0, #10
 800b2e4:	f00d fe1e 	bl	8018f24 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	693a      	ldr	r2, [r7, #16]
 800b2f2:	2334      	movs	r3, #52	; 0x34
 800b2f4:	fb03 f301 	mul.w	r3, r3, r1
 800b2f8:	4413      	add	r3, r2
 800b2fa:	3390      	adds	r3, #144	; 0x90
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b306:	4619      	mov	r1, r3
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	2334      	movs	r3, #52	; 0x34
 800b30c:	fb03 f301 	mul.w	r3, r3, r1
 800b310:	4413      	add	r3, r2
 800b312:	3391      	adds	r3, #145	; 0x91
 800b314:	2200      	movs	r2, #0
 800b316:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b31e:	3301      	adds	r3, #1
 800b320:	b29a      	uxth	r2, r3
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b328:	e10f      	b.n	800b54a <USBH_MSC_Process+0x6ce>
            else if (scsi_status == USBH_FAIL)
 800b32a:	7bfb      	ldrb	r3, [r7, #15]
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	d10c      	bne.n	800b34a <USBH_MSC_Process+0x4ce>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b336:	4619      	mov	r1, r3
 800b338:	693a      	ldr	r2, [r7, #16]
 800b33a:	2334      	movs	r3, #52	; 0x34
 800b33c:	fb03 f301 	mul.w	r3, r3, r1
 800b340:	4413      	add	r3, r2
 800b342:	3390      	adds	r3, #144	; 0x90
 800b344:	2205      	movs	r2, #5
 800b346:	701a      	strb	r2, [r3, #0]
            break;
 800b348:	e0ff      	b.n	800b54a <USBH_MSC_Process+0x6ce>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b34a:	7bfb      	ldrb	r3, [r7, #15]
 800b34c:	2b04      	cmp	r3, #4
 800b34e:	f040 80fc 	bne.w	800b54a <USBH_MSC_Process+0x6ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b358:	4619      	mov	r1, r3
 800b35a:	693a      	ldr	r2, [r7, #16]
 800b35c:	2334      	movs	r3, #52	; 0x34
 800b35e:	fb03 f301 	mul.w	r3, r3, r1
 800b362:	4413      	add	r3, r2
 800b364:	3390      	adds	r3, #144	; 0x90
 800b366:	2201      	movs	r2, #1
 800b368:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b370:	4619      	mov	r1, r3
 800b372:	693a      	ldr	r2, [r7, #16]
 800b374:	2334      	movs	r3, #52	; 0x34
 800b376:	fb03 f301 	mul.w	r3, r3, r1
 800b37a:	4413      	add	r3, r2
 800b37c:	3391      	adds	r3, #145	; 0x91
 800b37e:	2202      	movs	r2, #2
 800b380:	701a      	strb	r2, [r3, #0]
            break;
 800b382:	e0e2      	b.n	800b54a <USBH_MSC_Process+0x6ce>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b38a:	b2d9      	uxtb	r1, r3
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b392:	461a      	mov	r2, r3
 800b394:	2334      	movs	r3, #52	; 0x34
 800b396:	fb03 f302 	mul.w	r3, r3, r2
 800b39a:	3398      	adds	r3, #152	; 0x98
 800b39c:	693a      	ldr	r2, [r7, #16]
 800b39e:	4413      	add	r3, r2
 800b3a0:	3304      	adds	r3, #4
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 ff1e 	bl	800c1e6 <USBH_MSC_SCSI_RequestSense>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b3ae:	7bfb      	ldrb	r3, [r7, #15]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d17b      	bne.n	800b4ac <USBH_MSC_Process+0x630>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	2334      	movs	r3, #52	; 0x34
 800b3c0:	fb03 f301 	mul.w	r3, r3, r1
 800b3c4:	4413      	add	r3, r2
 800b3c6:	339c      	adds	r3, #156	; 0x9c
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	2b06      	cmp	r3, #6
 800b3cc:	d00c      	beq.n	800b3e8 <USBH_MSC_Process+0x56c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	693a      	ldr	r2, [r7, #16]
 800b3d8:	2334      	movs	r3, #52	; 0x34
 800b3da:	fb03 f301 	mul.w	r3, r3, r1
 800b3de:	4413      	add	r3, r2
 800b3e0:	339c      	adds	r3, #156	; 0x9c
 800b3e2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b3e4:	2b02      	cmp	r3, #2
 800b3e6:	d117      	bne.n	800b418 <USBH_MSC_Process+0x59c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b3f4:	1ad3      	subs	r3, r2, r3
 800b3f6:	f242 720f 	movw	r2, #9999	; 0x270f
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d80c      	bhi.n	800b418 <USBH_MSC_Process+0x59c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b404:	4619      	mov	r1, r3
 800b406:	693a      	ldr	r2, [r7, #16]
 800b408:	2334      	movs	r3, #52	; 0x34
 800b40a:	fb03 f301 	mul.w	r3, r3, r1
 800b40e:	4413      	add	r3, r2
 800b410:	3390      	adds	r3, #144	; 0x90
 800b412:	2202      	movs	r2, #2
 800b414:	701a      	strb	r2, [r3, #0]
                  break;
 800b416:	e09b      	b.n	800b550 <USBH_MSC_Process+0x6d4>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b41e:	4619      	mov	r1, r3
 800b420:	693a      	ldr	r2, [r7, #16]
 800b422:	2334      	movs	r3, #52	; 0x34
 800b424:	fb03 f301 	mul.w	r3, r3, r1
 800b428:	4413      	add	r3, r2
 800b42a:	339c      	adds	r3, #156	; 0x9c
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	4619      	mov	r1, r3
 800b430:	484f      	ldr	r0, [pc, #316]	; (800b570 <USBH_MSC_Process+0x6f4>)
 800b432:	f00d fd5f 	bl	8018ef4 <iprintf>
 800b436:	200a      	movs	r0, #10
 800b438:	f00d fd74 	bl	8018f24 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b442:	4619      	mov	r1, r3
 800b444:	693a      	ldr	r2, [r7, #16]
 800b446:	2334      	movs	r3, #52	; 0x34
 800b448:	fb03 f301 	mul.w	r3, r3, r1
 800b44c:	4413      	add	r3, r2
 800b44e:	339d      	adds	r3, #157	; 0x9d
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	4619      	mov	r1, r3
 800b454:	4847      	ldr	r0, [pc, #284]	; (800b574 <USBH_MSC_Process+0x6f8>)
 800b456:	f00d fd4d 	bl	8018ef4 <iprintf>
 800b45a:	200a      	movs	r0, #10
 800b45c:	f00d fd62 	bl	8018f24 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b466:	4619      	mov	r1, r3
 800b468:	693a      	ldr	r2, [r7, #16]
 800b46a:	2334      	movs	r3, #52	; 0x34
 800b46c:	fb03 f301 	mul.w	r3, r3, r1
 800b470:	4413      	add	r3, r2
 800b472:	339e      	adds	r3, #158	; 0x9e
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	4619      	mov	r1, r3
 800b478:	483f      	ldr	r0, [pc, #252]	; (800b578 <USBH_MSC_Process+0x6fc>)
 800b47a:	f00d fd3b 	bl	8018ef4 <iprintf>
 800b47e:	200a      	movs	r0, #10
 800b480:	f00d fd50 	bl	8018f24 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b48a:	4619      	mov	r1, r3
 800b48c:	693a      	ldr	r2, [r7, #16]
 800b48e:	2334      	movs	r3, #52	; 0x34
 800b490:	fb03 f301 	mul.w	r3, r3, r1
 800b494:	4413      	add	r3, r2
 800b496:	3390      	adds	r3, #144	; 0x90
 800b498:	2201      	movs	r2, #1
 800b49a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800b4ac:	7bfb      	ldrb	r3, [r7, #15]
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d112      	bne.n	800b4d8 <USBH_MSC_Process+0x65c>
              USBH_UsrLog("MSC Device NOT ready");
 800b4b2:	4832      	ldr	r0, [pc, #200]	; (800b57c <USBH_MSC_Process+0x700>)
 800b4b4:	f00d fd1e 	bl	8018ef4 <iprintf>
 800b4b8:	200a      	movs	r0, #10
 800b4ba:	f00d fd33 	bl	8018f24 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	693a      	ldr	r2, [r7, #16]
 800b4c8:	2334      	movs	r3, #52	; 0x34
 800b4ca:	fb03 f301 	mul.w	r3, r3, r1
 800b4ce:	4413      	add	r3, r2
 800b4d0:	3390      	adds	r3, #144	; 0x90
 800b4d2:	2208      	movs	r2, #8
 800b4d4:	701a      	strb	r2, [r3, #0]
            break;
 800b4d6:	e03a      	b.n	800b54e <USBH_MSC_Process+0x6d2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	2b04      	cmp	r3, #4
 800b4dc:	d137      	bne.n	800b54e <USBH_MSC_Process+0x6d2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	693a      	ldr	r2, [r7, #16]
 800b4e8:	2334      	movs	r3, #52	; 0x34
 800b4ea:	fb03 f301 	mul.w	r3, r3, r1
 800b4ee:	4413      	add	r3, r2
 800b4f0:	3390      	adds	r3, #144	; 0x90
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	2334      	movs	r3, #52	; 0x34
 800b502:	fb03 f301 	mul.w	r3, r3, r1
 800b506:	4413      	add	r3, r2
 800b508:	3391      	adds	r3, #145	; 0x91
 800b50a:	2202      	movs	r2, #2
 800b50c:	701a      	strb	r2, [r3, #0]
            break;
 800b50e:	e01e      	b.n	800b54e <USBH_MSC_Process+0x6d2>
            MSC_Handle->current_lun++;
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b516:	3301      	adds	r3, #1
 800b518:	b29a      	uxth	r2, r3
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b520:	e016      	b.n	800b550 <USBH_MSC_Process+0x6d4>
        MSC_Handle->current_lun = 0U;
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	2200      	movs	r2, #0
 800b526:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	2201      	movs	r2, #1
 800b52e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b536:	2102      	movs	r1, #2
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	4798      	blx	r3
      break;
 800b53c:	e00c      	b.n	800b558 <USBH_MSC_Process+0x6dc>
            break;
 800b53e:	bf00      	nop
 800b540:	e00a      	b.n	800b558 <USBH_MSC_Process+0x6dc>
            break;
 800b542:	bf00      	nop
 800b544:	e008      	b.n	800b558 <USBH_MSC_Process+0x6dc>
            break;
 800b546:	bf00      	nop
 800b548:	e006      	b.n	800b558 <USBH_MSC_Process+0x6dc>
            break;
 800b54a:	bf00      	nop
 800b54c:	e004      	b.n	800b558 <USBH_MSC_Process+0x6dc>
            break;
 800b54e:	bf00      	nop
      break;
 800b550:	e002      	b.n	800b558 <USBH_MSC_Process+0x6dc>
      error = USBH_OK;
 800b552:	2300      	movs	r3, #0
 800b554:	75fb      	strb	r3, [r7, #23]
      break;
 800b556:	bf00      	nop
  }
  return error;
 800b558:	7dfb      	ldrb	r3, [r7, #23]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3718      	adds	r7, #24
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	0801a104 	.word	0x0801a104
 800b568:	0801a124 	.word	0x0801a124
 800b56c:	0801a138 	.word	0x0801a138
 800b570:	0801a14c 	.word	0x0801a14c
 800b574:	0801a15c 	.word	0x0801a15c
 800b578:	0801a178 	.word	0x0801a178
 800b57c:	0801a0ec 	.word	0x0801a0ec

0800b580 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	370c      	adds	r7, #12
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
	...

0800b598 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b088      	sub	sp, #32
 800b59c:	af02      	add	r7, sp, #8
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5aa:	69db      	ldr	r3, [r3, #28]
 800b5ac:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b5b6:	78fb      	ldrb	r3, [r7, #3]
 800b5b8:	693a      	ldr	r2, [r7, #16]
 800b5ba:	2134      	movs	r1, #52	; 0x34
 800b5bc:	fb01 f303 	mul.w	r3, r1, r3
 800b5c0:	4413      	add	r3, r2
 800b5c2:	3390      	adds	r3, #144	; 0x90
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	2b07      	cmp	r3, #7
 800b5c8:	d03d      	beq.n	800b646 <USBH_MSC_RdWrProcess+0xae>
 800b5ca:	2b07      	cmp	r3, #7
 800b5cc:	f300 80dc 	bgt.w	800b788 <USBH_MSC_RdWrProcess+0x1f0>
 800b5d0:	2b05      	cmp	r3, #5
 800b5d2:	d06d      	beq.n	800b6b0 <USBH_MSC_RdWrProcess+0x118>
 800b5d4:	2b06      	cmp	r3, #6
 800b5d6:	f040 80d7 	bne.w	800b788 <USBH_MSC_RdWrProcess+0x1f0>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800b5da:	78f9      	ldrb	r1, [r7, #3]
 800b5dc:	2300      	movs	r3, #0
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 fee2 	bl	800c3ae <USBH_MSC_SCSI_Read>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b5ee:	7bfb      	ldrb	r3, [r7, #15]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d10b      	bne.n	800b60c <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b5f4:	78fb      	ldrb	r3, [r7, #3]
 800b5f6:	693a      	ldr	r2, [r7, #16]
 800b5f8:	2134      	movs	r1, #52	; 0x34
 800b5fa:	fb01 f303 	mul.w	r3, r1, r3
 800b5fe:	4413      	add	r3, r2
 800b600:	3390      	adds	r3, #144	; 0x90
 800b602:	2201      	movs	r2, #1
 800b604:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b606:	2300      	movs	r3, #0
 800b608:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b60a:	e0bf      	b.n	800b78c <USBH_MSC_RdWrProcess+0x1f4>
      else if (scsi_status == USBH_FAIL)
 800b60c:	7bfb      	ldrb	r3, [r7, #15]
 800b60e:	2b02      	cmp	r3, #2
 800b610:	d109      	bne.n	800b626 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b612:	78fb      	ldrb	r3, [r7, #3]
 800b614:	693a      	ldr	r2, [r7, #16]
 800b616:	2134      	movs	r1, #52	; 0x34
 800b618:	fb01 f303 	mul.w	r3, r1, r3
 800b61c:	4413      	add	r3, r2
 800b61e:	3390      	adds	r3, #144	; 0x90
 800b620:	2205      	movs	r2, #5
 800b622:	701a      	strb	r2, [r3, #0]
      break;
 800b624:	e0b2      	b.n	800b78c <USBH_MSC_RdWrProcess+0x1f4>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b626:	7bfb      	ldrb	r3, [r7, #15]
 800b628:	2b04      	cmp	r3, #4
 800b62a:	f040 80af 	bne.w	800b78c <USBH_MSC_RdWrProcess+0x1f4>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b62e:	78fb      	ldrb	r3, [r7, #3]
 800b630:	693a      	ldr	r2, [r7, #16]
 800b632:	2134      	movs	r1, #52	; 0x34
 800b634:	fb01 f303 	mul.w	r3, r1, r3
 800b638:	4413      	add	r3, r2
 800b63a:	3390      	adds	r3, #144	; 0x90
 800b63c:	2208      	movs	r2, #8
 800b63e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b640:	2302      	movs	r3, #2
 800b642:	75fb      	strb	r3, [r7, #23]
      break;
 800b644:	e0a2      	b.n	800b78c <USBH_MSC_RdWrProcess+0x1f4>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800b646:	78f9      	ldrb	r1, [r7, #3]
 800b648:	2300      	movs	r3, #0
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	2300      	movs	r3, #0
 800b64e:	2200      	movs	r2, #0
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 fe41 	bl	800c2d8 <USBH_MSC_SCSI_Write>
 800b656:	4603      	mov	r3, r0
 800b658:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b65a:	7bfb      	ldrb	r3, [r7, #15]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d10b      	bne.n	800b678 <USBH_MSC_RdWrProcess+0xe0>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b660:	78fb      	ldrb	r3, [r7, #3]
 800b662:	693a      	ldr	r2, [r7, #16]
 800b664:	2134      	movs	r1, #52	; 0x34
 800b666:	fb01 f303 	mul.w	r3, r1, r3
 800b66a:	4413      	add	r3, r2
 800b66c:	3390      	adds	r3, #144	; 0x90
 800b66e:	2201      	movs	r2, #1
 800b670:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b672:	2300      	movs	r3, #0
 800b674:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b676:	e08b      	b.n	800b790 <USBH_MSC_RdWrProcess+0x1f8>
      else if (scsi_status == USBH_FAIL)
 800b678:	7bfb      	ldrb	r3, [r7, #15]
 800b67a:	2b02      	cmp	r3, #2
 800b67c:	d109      	bne.n	800b692 <USBH_MSC_RdWrProcess+0xfa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b67e:	78fb      	ldrb	r3, [r7, #3]
 800b680:	693a      	ldr	r2, [r7, #16]
 800b682:	2134      	movs	r1, #52	; 0x34
 800b684:	fb01 f303 	mul.w	r3, r1, r3
 800b688:	4413      	add	r3, r2
 800b68a:	3390      	adds	r3, #144	; 0x90
 800b68c:	2205      	movs	r2, #5
 800b68e:	701a      	strb	r2, [r3, #0]
      break;
 800b690:	e07e      	b.n	800b790 <USBH_MSC_RdWrProcess+0x1f8>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b692:	7bfb      	ldrb	r3, [r7, #15]
 800b694:	2b04      	cmp	r3, #4
 800b696:	d17b      	bne.n	800b790 <USBH_MSC_RdWrProcess+0x1f8>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b698:	78fb      	ldrb	r3, [r7, #3]
 800b69a:	693a      	ldr	r2, [r7, #16]
 800b69c:	2134      	movs	r1, #52	; 0x34
 800b69e:	fb01 f303 	mul.w	r3, r1, r3
 800b6a2:	4413      	add	r3, r2
 800b6a4:	3390      	adds	r3, #144	; 0x90
 800b6a6:	2208      	movs	r2, #8
 800b6a8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b6aa:	2302      	movs	r3, #2
 800b6ac:	75fb      	strb	r3, [r7, #23]
      break;
 800b6ae:	e06f      	b.n	800b790 <USBH_MSC_RdWrProcess+0x1f8>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800b6b0:	78fb      	ldrb	r3, [r7, #3]
 800b6b2:	2234      	movs	r2, #52	; 0x34
 800b6b4:	fb02 f303 	mul.w	r3, r2, r3
 800b6b8:	3398      	adds	r3, #152	; 0x98
 800b6ba:	693a      	ldr	r2, [r7, #16]
 800b6bc:	4413      	add	r3, r2
 800b6be:	1d1a      	adds	r2, r3, #4
 800b6c0:	78fb      	ldrb	r3, [r7, #3]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 fd8e 	bl	800c1e6 <USBH_MSC_SCSI_RequestSense>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b6ce:	7bfb      	ldrb	r3, [r7, #15]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d140      	bne.n	800b756 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 800b6d4:	78fb      	ldrb	r3, [r7, #3]
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	2134      	movs	r1, #52	; 0x34
 800b6da:	fb01 f303 	mul.w	r3, r1, r3
 800b6de:	4413      	add	r3, r2
 800b6e0:	339c      	adds	r3, #156	; 0x9c
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	482e      	ldr	r0, [pc, #184]	; (800b7a0 <USBH_MSC_RdWrProcess+0x208>)
 800b6e8:	f00d fc04 	bl	8018ef4 <iprintf>
 800b6ec:	200a      	movs	r0, #10
 800b6ee:	f00d fc19 	bl	8018f24 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 800b6f2:	78fb      	ldrb	r3, [r7, #3]
 800b6f4:	693a      	ldr	r2, [r7, #16]
 800b6f6:	2134      	movs	r1, #52	; 0x34
 800b6f8:	fb01 f303 	mul.w	r3, r1, r3
 800b6fc:	4413      	add	r3, r2
 800b6fe:	339d      	adds	r3, #157	; 0x9d
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	4619      	mov	r1, r3
 800b704:	4827      	ldr	r0, [pc, #156]	; (800b7a4 <USBH_MSC_RdWrProcess+0x20c>)
 800b706:	f00d fbf5 	bl	8018ef4 <iprintf>
 800b70a:	200a      	movs	r0, #10
 800b70c:	f00d fc0a 	bl	8018f24 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 800b710:	78fb      	ldrb	r3, [r7, #3]
 800b712:	693a      	ldr	r2, [r7, #16]
 800b714:	2134      	movs	r1, #52	; 0x34
 800b716:	fb01 f303 	mul.w	r3, r1, r3
 800b71a:	4413      	add	r3, r2
 800b71c:	339e      	adds	r3, #158	; 0x9e
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	4619      	mov	r1, r3
 800b722:	4821      	ldr	r0, [pc, #132]	; (800b7a8 <USBH_MSC_RdWrProcess+0x210>)
 800b724:	f00d fbe6 	bl	8018ef4 <iprintf>
 800b728:	200a      	movs	r0, #10
 800b72a:	f00d fbfb 	bl	8018f24 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b72e:	78fb      	ldrb	r3, [r7, #3]
 800b730:	693a      	ldr	r2, [r7, #16]
 800b732:	2134      	movs	r1, #52	; 0x34
 800b734:	fb01 f303 	mul.w	r3, r1, r3
 800b738:	4413      	add	r3, r2
 800b73a:	3390      	adds	r3, #144	; 0x90
 800b73c:	2201      	movs	r2, #1
 800b73e:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800b740:	78fb      	ldrb	r3, [r7, #3]
 800b742:	693a      	ldr	r2, [r7, #16]
 800b744:	2134      	movs	r1, #52	; 0x34
 800b746:	fb01 f303 	mul.w	r3, r1, r3
 800b74a:	4413      	add	r3, r2
 800b74c:	3391      	adds	r3, #145	; 0x91
 800b74e:	2202      	movs	r2, #2
 800b750:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800b752:	2302      	movs	r3, #2
 800b754:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800b756:	7bfb      	ldrb	r3, [r7, #15]
 800b758:	2b02      	cmp	r3, #2
 800b75a:	d106      	bne.n	800b76a <USBH_MSC_RdWrProcess+0x1d2>
      {
        USBH_UsrLog("MSC Device NOT ready");
 800b75c:	4813      	ldr	r0, [pc, #76]	; (800b7ac <USBH_MSC_RdWrProcess+0x214>)
 800b75e:	f00d fbc9 	bl	8018ef4 <iprintf>
 800b762:	200a      	movs	r0, #10
 800b764:	f00d fbde 	bl	8018f24 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b768:	e014      	b.n	800b794 <USBH_MSC_RdWrProcess+0x1fc>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b76a:	7bfb      	ldrb	r3, [r7, #15]
 800b76c:	2b04      	cmp	r3, #4
 800b76e:	d111      	bne.n	800b794 <USBH_MSC_RdWrProcess+0x1fc>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b770:	78fb      	ldrb	r3, [r7, #3]
 800b772:	693a      	ldr	r2, [r7, #16]
 800b774:	2134      	movs	r1, #52	; 0x34
 800b776:	fb01 f303 	mul.w	r3, r1, r3
 800b77a:	4413      	add	r3, r2
 800b77c:	3390      	adds	r3, #144	; 0x90
 800b77e:	2208      	movs	r2, #8
 800b780:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b782:	2302      	movs	r3, #2
 800b784:	75fb      	strb	r3, [r7, #23]
      break;
 800b786:	e005      	b.n	800b794 <USBH_MSC_RdWrProcess+0x1fc>

    default:
      break;
 800b788:	bf00      	nop
 800b78a:	e004      	b.n	800b796 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800b78c:	bf00      	nop
 800b78e:	e002      	b.n	800b796 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800b790:	bf00      	nop
 800b792:	e000      	b.n	800b796 <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800b794:	bf00      	nop

  }
  return error;
 800b796:	7dfb      	ldrb	r3, [r7, #23]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	0801a14c 	.word	0x0801a14c
 800b7a4:	0801a15c 	.word	0x0801a15c
 800b7a8:	0801a178 	.word	0x0801a178
 800b7ac:	0801a0ec 	.word	0x0801a0ec

0800b7b0 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7c2:	69db      	ldr	r3, [r3, #28]
 800b7c4:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	2b0b      	cmp	r3, #11
 800b7ce:	d10c      	bne.n	800b7ea <USBH_MSC_UnitIsReady+0x3a>
 800b7d0:	78fb      	ldrb	r3, [r7, #3]
 800b7d2:	68ba      	ldr	r2, [r7, #8]
 800b7d4:	2134      	movs	r1, #52	; 0x34
 800b7d6:	fb01 f303 	mul.w	r3, r1, r3
 800b7da:	4413      	add	r3, r2
 800b7dc:	3391      	adds	r3, #145	; 0x91
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d102      	bne.n	800b7ea <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	73fb      	strb	r3, [r7, #15]
 800b7e8:	e001      	b.n	800b7ee <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3714      	adds	r7, #20
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b086      	sub	sp, #24
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	460b      	mov	r3, r1
 800b806:	607a      	str	r2, [r7, #4]
 800b808:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b810:	69db      	ldr	r3, [r3, #28]
 800b812:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	b2db      	uxtb	r3, r3
 800b81a:	2b0b      	cmp	r3, #11
 800b81c:	d10d      	bne.n	800b83a <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800b81e:	7afb      	ldrb	r3, [r7, #11]
 800b820:	2234      	movs	r2, #52	; 0x34
 800b822:	fb02 f303 	mul.w	r3, r2, r3
 800b826:	3390      	adds	r3, #144	; 0x90
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	4413      	add	r3, r2
 800b82c:	2234      	movs	r2, #52	; 0x34
 800b82e:	4619      	mov	r1, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f00d fa9f 	bl	8018d74 <memcpy>
    return USBH_OK;
 800b836:	2300      	movs	r3, #0
 800b838:	e000      	b.n	800b83c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800b83a:	2302      	movs	r3, #2
  }
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3718      	adds	r7, #24
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b088      	sub	sp, #32
 800b848:	af02      	add	r7, sp, #8
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	607a      	str	r2, [r7, #4]
 800b84e:	603b      	str	r3, [r7, #0]
 800b850:	460b      	mov	r3, r1
 800b852:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b85a:	69db      	ldr	r3, [r3, #28]
 800b85c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2b00      	cmp	r3, #0
 800b868:	d00e      	beq.n	800b888 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b870:	2b0b      	cmp	r3, #11
 800b872:	d109      	bne.n	800b888 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b874:	7afb      	ldrb	r3, [r7, #11]
 800b876:	697a      	ldr	r2, [r7, #20]
 800b878:	2134      	movs	r1, #52	; 0x34
 800b87a:	fb01 f303 	mul.w	r3, r1, r3
 800b87e:	4413      	add	r3, r2
 800b880:	3390      	adds	r3, #144	; 0x90
 800b882:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b884:	2b01      	cmp	r3, #1
 800b886:	d001      	beq.n	800b88c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800b888:	2302      	movs	r3, #2
 800b88a:	e040      	b.n	800b90e <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	2206      	movs	r2, #6
 800b890:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800b892:	7afb      	ldrb	r3, [r7, #11]
 800b894:	697a      	ldr	r2, [r7, #20]
 800b896:	2134      	movs	r1, #52	; 0x34
 800b898:	fb01 f303 	mul.w	r3, r1, r3
 800b89c:	4413      	add	r3, r2
 800b89e:	3390      	adds	r3, #144	; 0x90
 800b8a0:	2206      	movs	r2, #6
 800b8a2:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b8a4:	7afb      	ldrb	r3, [r7, #11]
 800b8a6:	b29a      	uxth	r2, r3
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800b8ae:	7af9      	ldrb	r1, [r7, #11]
 800b8b0:	6a3b      	ldr	r3, [r7, #32]
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	f000 fd78 	bl	800c3ae <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b8c4:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b8c6:	e016      	b.n	800b8f6 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	1ad2      	subs	r2, r2, r3
 800b8d2:	6a3b      	ldr	r3, [r7, #32]
 800b8d4:	f242 7110 	movw	r1, #10000	; 0x2710
 800b8d8:	fb01 f303 	mul.w	r3, r1, r3
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d805      	bhi.n	800b8ec <USBH_MSC_Read+0xa8>
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d104      	bne.n	800b8f6 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b8f2:	2302      	movs	r3, #2
 800b8f4:	e00b      	b.n	800b90e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b8f6:	7afb      	ldrb	r3, [r7, #11]
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f7ff fe4c 	bl	800b598 <USBH_MSC_RdWrProcess>
 800b900:	4603      	mov	r3, r0
 800b902:	2b01      	cmp	r3, #1
 800b904:	d0e0      	beq.n	800b8c8 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	2201      	movs	r2, #1
 800b90a:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3718      	adds	r7, #24
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b088      	sub	sp, #32
 800b91a:	af02      	add	r7, sp, #8
 800b91c:	60f8      	str	r0, [r7, #12]
 800b91e:	607a      	str	r2, [r7, #4]
 800b920:	603b      	str	r3, [r7, #0]
 800b922:	460b      	mov	r3, r1
 800b924:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b92c:	69db      	ldr	r3, [r3, #28]
 800b92e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b936:	b2db      	uxtb	r3, r3
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00e      	beq.n	800b95a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b942:	2b0b      	cmp	r3, #11
 800b944:	d109      	bne.n	800b95a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b946:	7afb      	ldrb	r3, [r7, #11]
 800b948:	697a      	ldr	r2, [r7, #20]
 800b94a:	2134      	movs	r1, #52	; 0x34
 800b94c:	fb01 f303 	mul.w	r3, r1, r3
 800b950:	4413      	add	r3, r2
 800b952:	3390      	adds	r3, #144	; 0x90
 800b954:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b956:	2b01      	cmp	r3, #1
 800b958:	d001      	beq.n	800b95e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800b95a:	2302      	movs	r3, #2
 800b95c:	e040      	b.n	800b9e0 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	2207      	movs	r2, #7
 800b962:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800b964:	7afb      	ldrb	r3, [r7, #11]
 800b966:	697a      	ldr	r2, [r7, #20]
 800b968:	2134      	movs	r1, #52	; 0x34
 800b96a:	fb01 f303 	mul.w	r3, r1, r3
 800b96e:	4413      	add	r3, r2
 800b970:	3390      	adds	r3, #144	; 0x90
 800b972:	2207      	movs	r2, #7
 800b974:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b976:	7afb      	ldrb	r3, [r7, #11]
 800b978:	b29a      	uxth	r2, r3
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800b980:	7af9      	ldrb	r1, [r7, #11]
 800b982:	6a3b      	ldr	r3, [r7, #32]
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f000 fca4 	bl	800c2d8 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b996:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b998:	e016      	b.n	800b9c8 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	1ad2      	subs	r2, r2, r3
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	f242 7110 	movw	r1, #10000	; 0x2710
 800b9aa:	fb01 f303 	mul.w	r3, r1, r3
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d805      	bhi.n	800b9be <USBH_MSC_Write+0xa8>
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d104      	bne.n	800b9c8 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	e00b      	b.n	800b9e0 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b9c8:	7afb      	ldrb	r3, [r7, #11]
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f7ff fde3 	bl	800b598 <USBH_MSC_RdWrProcess>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d0e0      	beq.n	800b99a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3718      	adds	r7, #24
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2221      	movs	r2, #33	; 0x21
 800b9f4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	22ff      	movs	r2, #255	; 0xff
 800b9fa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800ba0e:	2200      	movs	r2, #0
 800ba10:	2100      	movs	r1, #0
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f001 ff67 	bl	800d8e6 <USBH_CtlReq>
 800ba18:	4603      	mov	r3, r0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b082      	sub	sp, #8
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	22a1      	movs	r2, #161	; 0xa1
 800ba30:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	22fe      	movs	r2, #254	; 0xfe
 800ba36:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2201      	movs	r2, #1
 800ba48:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f001 ff49 	bl	800d8e6 <USBH_CtlReq>
 800ba54:	4603      	mov	r3, r0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
	...

0800ba60 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba6e:	69db      	ldr	r3, [r3, #28]
 800ba70:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	4a09      	ldr	r2, [pc, #36]	; (800ba9c <USBH_MSC_BOT_Init+0x3c>)
 800ba76:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4a09      	ldr	r2, [pc, #36]	; (800baa0 <USBH_MSC_BOT_Init+0x40>)
 800ba7c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2201      	movs	r2, #1
 800ba82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800ba8e:	2300      	movs	r3, #0
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3714      	adds	r7, #20
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr
 800ba9c:	43425355 	.word	0x43425355
 800baa0:	20304050 	.word	0x20304050

0800baa4 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b088      	sub	sp, #32
 800baa8:	af02      	add	r7, sp, #8
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	460b      	mov	r3, r1
 800baae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800bab0:	2301      	movs	r3, #1
 800bab2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800bab4:	2301      	movs	r3, #1
 800bab6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800bab8:	2301      	movs	r3, #1
 800baba:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800babc:	2300      	movs	r3, #0
 800babe:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bac6:	69db      	ldr	r3, [r3, #28]
 800bac8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800baca:	2300      	movs	r3, #0
 800bacc:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bad4:	3b01      	subs	r3, #1
 800bad6:	2b0a      	cmp	r3, #10
 800bad8:	f200 819e 	bhi.w	800be18 <USBH_MSC_BOT_Process+0x374>
 800badc:	a201      	add	r2, pc, #4	; (adr r2, 800bae4 <USBH_MSC_BOT_Process+0x40>)
 800bade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae2:	bf00      	nop
 800bae4:	0800bb11 	.word	0x0800bb11
 800bae8:	0800bb39 	.word	0x0800bb39
 800baec:	0800bba3 	.word	0x0800bba3
 800baf0:	0800bbc1 	.word	0x0800bbc1
 800baf4:	0800bc45 	.word	0x0800bc45
 800baf8:	0800bc67 	.word	0x0800bc67
 800bafc:	0800bcff 	.word	0x0800bcff
 800bb00:	0800bd1b 	.word	0x0800bd1b
 800bb04:	0800bd6d 	.word	0x0800bd6d
 800bb08:	0800bd9d 	.word	0x0800bd9d
 800bb0c:	0800bdff 	.word	0x0800bdff
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	78fa      	ldrb	r2, [r7, #3]
 800bb14:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	2202      	movs	r2, #2
 800bb1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	795b      	ldrb	r3, [r3, #5]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	9200      	str	r2, [sp, #0]
 800bb2e:	221f      	movs	r2, #31
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f002 f8f4 	bl	800dd1e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800bb36:	e17e      	b.n	800be36 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	795b      	ldrb	r3, [r3, #5]
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f00c fff8 	bl	8018b34 <USBH_LL_GetURBState>
 800bb44:	4603      	mov	r3, r0
 800bb46:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bb48:	7d3b      	ldrb	r3, [r7, #20]
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d118      	bne.n	800bb80 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00f      	beq.n	800bb76 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800bb5c:	b25b      	sxtb	r3, r3
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	da04      	bge.n	800bb6c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	2203      	movs	r2, #3
 800bb66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb6a:	e157      	b.n	800be1c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	2205      	movs	r2, #5
 800bb70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bb74:	e152      	b.n	800be1c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	2207      	movs	r2, #7
 800bb7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bb7e:	e14d      	b.n	800be1c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bb80:	7d3b      	ldrb	r3, [r7, #20]
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	d104      	bne.n	800bb90 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bb8e:	e145      	b.n	800be1c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800bb90:	7d3b      	ldrb	r3, [r7, #20]
 800bb92:	2b05      	cmp	r3, #5
 800bb94:	f040 8142 	bne.w	800be1c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	220a      	movs	r2, #10
 800bb9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bba0:	e13c      	b.n	800be1c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	895a      	ldrh	r2, [r3, #10]
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	791b      	ldrb	r3, [r3, #4]
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f002 f8d9 	bl	800dd68 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	2204      	movs	r2, #4
 800bbba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800bbbe:	e13a      	b.n	800be36 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	791b      	ldrb	r3, [r3, #4]
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f00c ffb4 	bl	8018b34 <USBH_LL_GetURBState>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bbd0:	7d3b      	ldrb	r3, [r7, #20]
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d12d      	bne.n	800bc32 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbda:	693a      	ldr	r2, [r7, #16]
 800bbdc:	8952      	ldrh	r2, [r2, #10]
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d910      	bls.n	800bc04 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbe8:	693a      	ldr	r2, [r7, #16]
 800bbea:	8952      	ldrh	r2, [r2, #10]
 800bbec:	441a      	add	r2, r3
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbf8:	693a      	ldr	r2, [r7, #16]
 800bbfa:	8952      	ldrh	r2, [r2, #10]
 800bbfc:	1a9a      	subs	r2, r3, r2
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	65da      	str	r2, [r3, #92]	; 0x5c
 800bc02:	e002      	b.n	800bc0a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	2200      	movs	r2, #0
 800bc08:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00a      	beq.n	800bc28 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	895a      	ldrh	r2, [r3, #10]
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	791b      	ldrb	r3, [r3, #4]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f002 f8a1 	bl	800dd68 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800bc26:	e0fb      	b.n	800be20 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	2207      	movs	r2, #7
 800bc2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bc30:	e0f6      	b.n	800be20 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800bc32:	7d3b      	ldrb	r3, [r7, #20]
 800bc34:	2b05      	cmp	r3, #5
 800bc36:	f040 80f3 	bne.w	800be20 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	2209      	movs	r2, #9
 800bc3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bc42:	e0ed      	b.n	800be20 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	891a      	ldrh	r2, [r3, #8]
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	795b      	ldrb	r3, [r3, #5]
 800bc52:	2001      	movs	r0, #1
 800bc54:	9000      	str	r0, [sp, #0]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f002 f861 	bl	800dd1e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	2206      	movs	r2, #6
 800bc60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bc64:	e0e7      	b.n	800be36 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	795b      	ldrb	r3, [r3, #5]
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f00c ff61 	bl	8018b34 <USBH_LL_GetURBState>
 800bc72:	4603      	mov	r3, r0
 800bc74:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bc76:	7d3b      	ldrb	r3, [r7, #20]
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d12f      	bne.n	800bcdc <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc80:	693a      	ldr	r2, [r7, #16]
 800bc82:	8912      	ldrh	r2, [r2, #8]
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d910      	bls.n	800bcaa <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc8e:	693a      	ldr	r2, [r7, #16]
 800bc90:	8912      	ldrh	r2, [r2, #8]
 800bc92:	441a      	add	r2, r3
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc9e:	693a      	ldr	r2, [r7, #16]
 800bca0:	8912      	ldrh	r2, [r2, #8]
 800bca2:	1a9a      	subs	r2, r3, r2
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	65da      	str	r2, [r3, #92]	; 0x5c
 800bca8:	e002      	b.n	800bcb0 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	2200      	movs	r2, #0
 800bcae:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00c      	beq.n	800bcd2 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	891a      	ldrh	r2, [r3, #8]
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	795b      	ldrb	r3, [r3, #5]
 800bcc6:	2001      	movs	r0, #1
 800bcc8:	9000      	str	r0, [sp, #0]
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f002 f827 	bl	800dd1e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800bcd0:	e0a8      	b.n	800be24 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	2207      	movs	r2, #7
 800bcd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bcda:	e0a3      	b.n	800be24 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bcdc:	7d3b      	ldrb	r3, [r7, #20]
 800bcde:	2b02      	cmp	r3, #2
 800bce0:	d104      	bne.n	800bcec <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	2205      	movs	r2, #5
 800bce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bcea:	e09b      	b.n	800be24 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800bcec:	7d3b      	ldrb	r3, [r7, #20]
 800bcee:	2b05      	cmp	r3, #5
 800bcf0:	f040 8098 	bne.w	800be24 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	220a      	movs	r2, #10
 800bcf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bcfc:	e092      	b.n	800be24 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	791b      	ldrb	r3, [r3, #4]
 800bd08:	220d      	movs	r2, #13
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f002 f82c 	bl	800dd68 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	2208      	movs	r2, #8
 800bd14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bd18:	e08d      	b.n	800be36 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	791b      	ldrb	r3, [r3, #4]
 800bd1e:	4619      	mov	r1, r3
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f00c ff07 	bl	8018b34 <USBH_LL_GetURBState>
 800bd26:	4603      	mov	r3, r0
 800bd28:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800bd2a:	7d3b      	ldrb	r3, [r7, #20]
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d115      	bne.n	800bd5c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	2201      	movs	r2, #1
 800bd34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 f8a9 	bl	800be98 <USBH_MSC_DecodeCSW>
 800bd46:	4603      	mov	r3, r0
 800bd48:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800bd4a:	7d7b      	ldrb	r3, [r7, #21]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d102      	bne.n	800bd56 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800bd50:	2300      	movs	r3, #0
 800bd52:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800bd54:	e068      	b.n	800be28 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800bd56:	2302      	movs	r3, #2
 800bd58:	75fb      	strb	r3, [r7, #23]
      break;
 800bd5a:	e065      	b.n	800be28 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800bd5c:	7d3b      	ldrb	r3, [r7, #20]
 800bd5e:	2b05      	cmp	r3, #5
 800bd60:	d162      	bne.n	800be28 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	2209      	movs	r2, #9
 800bd66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bd6a:	e05d      	b.n	800be28 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800bd6c:	78fb      	ldrb	r3, [r7, #3]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	4619      	mov	r1, r3
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 f864 	bl	800be40 <USBH_MSC_BOT_Abort>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800bd7c:	7dbb      	ldrb	r3, [r7, #22]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d104      	bne.n	800bd8c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	2207      	movs	r2, #7
 800bd86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800bd8a:	e04f      	b.n	800be2c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800bd8c:	7dbb      	ldrb	r3, [r7, #22]
 800bd8e:	2b04      	cmp	r3, #4
 800bd90:	d14c      	bne.n	800be2c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	220b      	movs	r2, #11
 800bd96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bd9a:	e047      	b.n	800be2c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800bd9c:	78fb      	ldrb	r3, [r7, #3]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	4619      	mov	r1, r3
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 f84c 	bl	800be40 <USBH_MSC_BOT_Abort>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800bdac:	7dbb      	ldrb	r3, [r7, #22]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d11d      	bne.n	800bdee <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	795b      	ldrb	r3, [r3, #5]
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f00c ff15 	bl	8018be8 <USBH_LL_GetToggle>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	7959      	ldrb	r1, [r3, #5]
 800bdc6:	7bfb      	ldrb	r3, [r7, #15]
 800bdc8:	f1c3 0301 	rsb	r3, r3, #1
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	461a      	mov	r2, r3
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f00c fed9 	bl	8018b88 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	791b      	ldrb	r3, [r3, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	4619      	mov	r1, r3
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f00c fed2 	bl	8018b88 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	2209      	movs	r2, #9
 800bde8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800bdec:	e020      	b.n	800be30 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800bdee:	7dbb      	ldrb	r3, [r7, #22]
 800bdf0:	2b04      	cmp	r3, #4
 800bdf2:	d11d      	bne.n	800be30 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	220b      	movs	r2, #11
 800bdf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bdfc:	e018      	b.n	800be30 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7ff fdf2 	bl	800b9e8 <USBH_MSC_BOT_REQ_Reset>
 800be04:	4603      	mov	r3, r0
 800be06:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800be08:	7dfb      	ldrb	r3, [r7, #23]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d112      	bne.n	800be34 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	2201      	movs	r2, #1
 800be12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800be16:	e00d      	b.n	800be34 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800be18:	bf00      	nop
 800be1a:	e00c      	b.n	800be36 <USBH_MSC_BOT_Process+0x392>
      break;
 800be1c:	bf00      	nop
 800be1e:	e00a      	b.n	800be36 <USBH_MSC_BOT_Process+0x392>
      break;
 800be20:	bf00      	nop
 800be22:	e008      	b.n	800be36 <USBH_MSC_BOT_Process+0x392>
      break;
 800be24:	bf00      	nop
 800be26:	e006      	b.n	800be36 <USBH_MSC_BOT_Process+0x392>
      break;
 800be28:	bf00      	nop
 800be2a:	e004      	b.n	800be36 <USBH_MSC_BOT_Process+0x392>
      break;
 800be2c:	bf00      	nop
 800be2e:	e002      	b.n	800be36 <USBH_MSC_BOT_Process+0x392>
      break;
 800be30:	bf00      	nop
 800be32:	e000      	b.n	800be36 <USBH_MSC_BOT_Process+0x392>
      break;
 800be34:	bf00      	nop
  }
  return status;
 800be36:	7dfb      	ldrb	r3, [r7, #23]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3718      	adds	r7, #24
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	460b      	mov	r3, r1
 800be4a:	70fb      	strb	r3, [r7, #3]
 800be4c:	4613      	mov	r3, r2
 800be4e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800be50:	2302      	movs	r3, #2
 800be52:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be5a:	69db      	ldr	r3, [r3, #28]
 800be5c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800be5e:	78bb      	ldrb	r3, [r7, #2]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d002      	beq.n	800be6a <USBH_MSC_BOT_Abort+0x2a>
 800be64:	2b01      	cmp	r3, #1
 800be66:	d009      	beq.n	800be7c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800be68:	e011      	b.n	800be8e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	79db      	ldrb	r3, [r3, #7]
 800be6e:	4619      	mov	r1, r3
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f001 fb58 	bl	800d526 <USBH_ClrFeature>
 800be76:	4603      	mov	r3, r0
 800be78:	73fb      	strb	r3, [r7, #15]
      break;
 800be7a:	e008      	b.n	800be8e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	799b      	ldrb	r3, [r3, #6]
 800be80:	4619      	mov	r1, r3
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f001 fb4f 	bl	800d526 <USBH_ClrFeature>
 800be88:	4603      	mov	r3, r0
 800be8a:	73fb      	strb	r3, [r7, #15]
      break;
 800be8c:	bf00      	nop
  }
  return status;
 800be8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be90:	4618      	mov	r0, r3
 800be92:	3710      	adds	r7, #16
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bea6:	69db      	ldr	r3, [r3, #28]
 800bea8:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800beaa:	2301      	movs	r3, #1
 800beac:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	791b      	ldrb	r3, [r3, #4]
 800beb2:	4619      	mov	r1, r3
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f00c fdab 	bl	8018a10 <USBH_LL_GetLastXferSize>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b0d      	cmp	r3, #13
 800bebe:	d002      	beq.n	800bec6 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800bec0:	2302      	movs	r3, #2
 800bec2:	73fb      	strb	r3, [r7, #15]
 800bec4:	e024      	b.n	800bf10 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beca:	4a14      	ldr	r2, [pc, #80]	; (800bf1c <USBH_MSC_DecodeCSW+0x84>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d11d      	bne.n	800bf0c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bed8:	429a      	cmp	r2, r3
 800beda:	d119      	bne.n	800bf10 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d102      	bne.n	800beec <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800bee6:	2300      	movs	r3, #0
 800bee8:	73fb      	strb	r3, [r7, #15]
 800beea:	e011      	b.n	800bf10 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d102      	bne.n	800befc <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800bef6:	2301      	movs	r3, #1
 800bef8:	73fb      	strb	r3, [r7, #15]
 800befa:	e009      	b.n	800bf10 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bf02:	2b02      	cmp	r3, #2
 800bf04:	d104      	bne.n	800bf10 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800bf06:	2302      	movs	r3, #2
 800bf08:	73fb      	strb	r3, [r7, #15]
 800bf0a:	e001      	b.n	800bf10 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800bf0c:	2302      	movs	r3, #2
 800bf0e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	53425355 	.word	0x53425355

0800bf20 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf36:	69db      	ldr	r3, [r3, #28]
 800bf38:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d002      	beq.n	800bf4a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	d021      	beq.n	800bf8c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800bf48:	e028      	b.n	800bf9c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	220a      	movs	r2, #10
 800bf5c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	3363      	adds	r3, #99	; 0x63
 800bf64:	2210      	movs	r2, #16
 800bf66:	2100      	movs	r1, #0
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f00c ff11 	bl	8018d90 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	2200      	movs	r2, #0
 800bf72:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	2201      	movs	r2, #1
 800bf7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	2202      	movs	r2, #2
 800bf82:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800bf86:	2301      	movs	r3, #1
 800bf88:	73fb      	strb	r3, [r7, #15]
      break;
 800bf8a:	e007      	b.n	800bf9c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bf8c:	78fb      	ldrb	r3, [r7, #3]
 800bf8e:	4619      	mov	r1, r3
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f7ff fd87 	bl	800baa4 <USBH_MSC_BOT_Process>
 800bf96:	4603      	mov	r3, r0
 800bf98:	73fb      	strb	r3, [r7, #15]
      break;
 800bf9a:	bf00      	nop
  }

  return error;
 800bf9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b086      	sub	sp, #24
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	60f8      	str	r0, [r7, #12]
 800bfae:	460b      	mov	r3, r1
 800bfb0:	607a      	str	r2, [r7, #4]
 800bfb2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfbe:	69db      	ldr	r3, [r3, #28]
 800bfc0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d002      	beq.n	800bfd2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800bfcc:	2b02      	cmp	r3, #2
 800bfce:	d027      	beq.n	800c020 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800bfd0:	e05f      	b.n	800c092 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	2208      	movs	r2, #8
 800bfd6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	2280      	movs	r2, #128	; 0x80
 800bfdc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	220a      	movs	r2, #10
 800bfe4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	3363      	adds	r3, #99	; 0x63
 800bfec:	2210      	movs	r2, #16
 800bfee:	2100      	movs	r1, #0
 800bff0:	4618      	mov	r0, r3
 800bff2:	f00c fecd 	bl	8018d90 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	2225      	movs	r2, #37	; 0x25
 800bffa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	2201      	movs	r2, #1
 800c002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	2202      	movs	r2, #2
 800c00a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	f103 0210 	add.w	r2, r3, #16
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c01a:	2301      	movs	r3, #1
 800c01c:	75fb      	strb	r3, [r7, #23]
      break;
 800c01e:	e038      	b.n	800c092 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c020:	7afb      	ldrb	r3, [r7, #11]
 800c022:	4619      	mov	r1, r3
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f7ff fd3d 	bl	800baa4 <USBH_MSC_BOT_Process>
 800c02a:	4603      	mov	r3, r0
 800c02c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d12d      	bne.n	800c090 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c03a:	3303      	adds	r3, #3
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	461a      	mov	r2, r3
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c046:	3302      	adds	r3, #2
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	021b      	lsls	r3, r3, #8
 800c04c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c054:	3301      	adds	r3, #1
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c05a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	061b      	lsls	r3, r3, #24
 800c066:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c072:	3307      	adds	r3, #7
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	b29a      	uxth	r2, r3
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c07e:	3306      	adds	r3, #6
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	b29b      	uxth	r3, r3
 800c084:	021b      	lsls	r3, r3, #8
 800c086:	b29b      	uxth	r3, r3
 800c088:	4313      	orrs	r3, r2
 800c08a:	b29a      	uxth	r2, r3
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	809a      	strh	r2, [r3, #4]
      break;
 800c090:	bf00      	nop
  }

  return error;
 800c092:	7dfb      	ldrb	r3, [r7, #23]
}
 800c094:	4618      	mov	r0, r3
 800c096:	3718      	adds	r7, #24
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b086      	sub	sp, #24
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	607a      	str	r2, [r7, #4]
 800c0a8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c0aa:	2302      	movs	r3, #2
 800c0ac:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0b4:	69db      	ldr	r3, [r3, #28]
 800c0b6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d002      	beq.n	800c0c8 <USBH_MSC_SCSI_Inquiry+0x2c>
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	d03d      	beq.n	800c142 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800c0c6:	e089      	b.n	800c1dc <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	2224      	movs	r2, #36	; 0x24
 800c0cc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	2280      	movs	r2, #128	; 0x80
 800c0d2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	220a      	movs	r2, #10
 800c0da:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	3363      	adds	r3, #99	; 0x63
 800c0e2:	220a      	movs	r2, #10
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f00c fe52 	bl	8018d90 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	2212      	movs	r2, #18
 800c0f0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c0f4:	7afb      	ldrb	r3, [r7, #11]
 800c0f6:	015b      	lsls	r3, r3, #5
 800c0f8:	b2da      	uxtb	r2, r3
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	2200      	movs	r2, #0
 800c104:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	2224      	movs	r2, #36	; 0x24
 800c114:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	2201      	movs	r2, #1
 800c124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	2202      	movs	r2, #2
 800c12c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	f103 0210 	add.w	r2, r3, #16
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c13c:	2301      	movs	r3, #1
 800c13e:	75fb      	strb	r3, [r7, #23]
      break;
 800c140:	e04c      	b.n	800c1dc <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c142:	7afb      	ldrb	r3, [r7, #11]
 800c144:	4619      	mov	r1, r3
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f7ff fcac 	bl	800baa4 <USBH_MSC_BOT_Process>
 800c14c:	4603      	mov	r3, r0
 800c14e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c150:	7dfb      	ldrb	r3, [r7, #23]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d141      	bne.n	800c1da <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800c156:	2222      	movs	r2, #34	; 0x22
 800c158:	2100      	movs	r1, #0
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f00c fe18 	bl	8018d90 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	f003 031f 	and.w	r3, r3, #31
 800c16c:	b2da      	uxtb	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	095b      	lsrs	r3, r3, #5
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c188:	3301      	adds	r3, #1
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	b25b      	sxtb	r3, r3
 800c18e:	2b00      	cmp	r3, #0
 800c190:	da03      	bge.n	800c19a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2201      	movs	r2, #1
 800c196:	709a      	strb	r2, [r3, #2]
 800c198:	e002      	b.n	800c1a0 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	1cd8      	adds	r0, r3, #3
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1aa:	3308      	adds	r3, #8
 800c1ac:	2208      	movs	r2, #8
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	f00c fde0 	bl	8018d74 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f103 000c 	add.w	r0, r3, #12
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1c0:	3310      	adds	r3, #16
 800c1c2:	2210      	movs	r2, #16
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	f00c fdd5 	bl	8018d74 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	331d      	adds	r3, #29
 800c1ce:	693a      	ldr	r2, [r7, #16]
 800c1d0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800c1d4:	3220      	adds	r2, #32
 800c1d6:	6812      	ldr	r2, [r2, #0]
 800c1d8:	601a      	str	r2, [r3, #0]
      break;
 800c1da:	bf00      	nop
  }

  return error;
 800c1dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3718      	adds	r7, #24
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b086      	sub	sp, #24
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	60f8      	str	r0, [r7, #12]
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	607a      	str	r2, [r7, #4]
 800c1f2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1fe:	69db      	ldr	r3, [r3, #28]
 800c200:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d002      	beq.n	800c212 <USBH_MSC_SCSI_RequestSense+0x2c>
 800c20c:	2b02      	cmp	r3, #2
 800c20e:	d03d      	beq.n	800c28c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800c210:	e05d      	b.n	800c2ce <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	220e      	movs	r2, #14
 800c216:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	2280      	movs	r2, #128	; 0x80
 800c21c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	220a      	movs	r2, #10
 800c224:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	3363      	adds	r3, #99	; 0x63
 800c22c:	2210      	movs	r2, #16
 800c22e:	2100      	movs	r1, #0
 800c230:	4618      	mov	r0, r3
 800c232:	f00c fdad 	bl	8018d90 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	2203      	movs	r2, #3
 800c23a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c23e:	7afb      	ldrb	r3, [r7, #11]
 800c240:	015b      	lsls	r3, r3, #5
 800c242:	b2da      	uxtb	r2, r3
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	2200      	movs	r2, #0
 800c24e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	2200      	movs	r2, #0
 800c256:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	220e      	movs	r2, #14
 800c25e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	2201      	movs	r2, #1
 800c26e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	2202      	movs	r2, #2
 800c276:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	f103 0210 	add.w	r2, r3, #16
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c286:	2301      	movs	r3, #1
 800c288:	75fb      	strb	r3, [r7, #23]
      break;
 800c28a:	e020      	b.n	800c2ce <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c28c:	7afb      	ldrb	r3, [r7, #11]
 800c28e:	4619      	mov	r1, r3
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	f7ff fc07 	bl	800baa4 <USBH_MSC_BOT_Process>
 800c296:	4603      	mov	r3, r0
 800c298:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c29a:	7dfb      	ldrb	r3, [r7, #23]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d115      	bne.n	800c2cc <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2a6:	3302      	adds	r3, #2
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	f003 030f 	and.w	r3, r3, #15
 800c2ae:	b2da      	uxtb	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2ba:	7b1a      	ldrb	r2, [r3, #12]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2c6:	7b5a      	ldrb	r2, [r3, #13]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	709a      	strb	r2, [r3, #2]
      break;
 800c2cc:	bf00      	nop
  }

  return error;
 800c2ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3718      	adds	r7, #24
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b086      	sub	sp, #24
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	607a      	str	r2, [r7, #4]
 800c2e2:	603b      	str	r3, [r7, #0]
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c2f2:	69db      	ldr	r3, [r3, #28]
 800c2f4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d002      	beq.n	800c306 <USBH_MSC_SCSI_Write+0x2e>
 800c300:	2b02      	cmp	r3, #2
 800c302:	d047      	beq.n	800c394 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c304:	e04e      	b.n	800c3a4 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c30c:	461a      	mov	r2, r3
 800c30e:	6a3b      	ldr	r3, [r7, #32]
 800c310:	fb03 f202 	mul.w	r2, r3, r2
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	2200      	movs	r2, #0
 800c31c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	220a      	movs	r2, #10
 800c324:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	3363      	adds	r3, #99	; 0x63
 800c32c:	2210      	movs	r2, #16
 800c32e:	2100      	movs	r1, #0
 800c330:	4618      	mov	r0, r3
 800c332:	f00c fd2d 	bl	8018d90 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	222a      	movs	r2, #42	; 0x2a
 800c33a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c33e:	79fa      	ldrb	r2, [r7, #7]
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c346:	79ba      	ldrb	r2, [r7, #6]
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c34e:	797a      	ldrb	r2, [r7, #5]
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c356:	1d3b      	adds	r3, r7, #4
 800c358:	781a      	ldrb	r2, [r3, #0]
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c360:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c36a:	f107 0320 	add.w	r3, r7, #32
 800c36e:	781a      	ldrb	r2, [r3, #0]
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	2201      	movs	r2, #1
 800c37a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	2202      	movs	r2, #2
 800c382:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	683a      	ldr	r2, [r7, #0]
 800c38a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c38e:	2301      	movs	r3, #1
 800c390:	75fb      	strb	r3, [r7, #23]
      break;
 800c392:	e007      	b.n	800c3a4 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c394:	7afb      	ldrb	r3, [r7, #11]
 800c396:	4619      	mov	r1, r3
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	f7ff fb83 	bl	800baa4 <USBH_MSC_BOT_Process>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	75fb      	strb	r3, [r7, #23]
      break;
 800c3a2:	bf00      	nop
  }

  return error;
 800c3a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3718      	adds	r7, #24
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b086      	sub	sp, #24
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	60f8      	str	r0, [r7, #12]
 800c3b6:	607a      	str	r2, [r7, #4]
 800c3b8:	603b      	str	r3, [r7, #0]
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c3be:	2302      	movs	r3, #2
 800c3c0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c3c8:	69db      	ldr	r3, [r3, #28]
 800c3ca:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d002      	beq.n	800c3dc <USBH_MSC_SCSI_Read+0x2e>
 800c3d6:	2b02      	cmp	r3, #2
 800c3d8:	d047      	beq.n	800c46a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c3da:	e04e      	b.n	800c47a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	6a3b      	ldr	r3, [r7, #32]
 800c3e6:	fb03 f202 	mul.w	r2, r3, r2
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	2280      	movs	r2, #128	; 0x80
 800c3f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	220a      	movs	r2, #10
 800c3fa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	3363      	adds	r3, #99	; 0x63
 800c402:	2210      	movs	r2, #16
 800c404:	2100      	movs	r1, #0
 800c406:	4618      	mov	r0, r3
 800c408:	f00c fcc2 	bl	8018d90 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	2228      	movs	r2, #40	; 0x28
 800c410:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c414:	79fa      	ldrb	r2, [r7, #7]
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c41c:	79ba      	ldrb	r2, [r7, #6]
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c424:	797a      	ldrb	r2, [r7, #5]
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c42c:	1d3b      	adds	r3, r7, #4
 800c42e:	781a      	ldrb	r2, [r3, #0]
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c436:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c440:	f107 0320 	add.w	r3, r7, #32
 800c444:	781a      	ldrb	r2, [r3, #0]
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	2202      	movs	r2, #2
 800c458:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	683a      	ldr	r2, [r7, #0]
 800c460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c464:	2301      	movs	r3, #1
 800c466:	75fb      	strb	r3, [r7, #23]
      break;
 800c468:	e007      	b.n	800c47a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c46a:	7afb      	ldrb	r3, [r7, #11]
 800c46c:	4619      	mov	r1, r3
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	f7ff fb18 	bl	800baa4 <USBH_MSC_BOT_Process>
 800c474:	4603      	mov	r3, r0
 800c476:	75fb      	strb	r3, [r7, #23]
      break;
 800c478:	bf00      	nop
  }

  return error;
 800c47a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3718      	adds	r7, #24
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	4613      	mov	r3, r2
 800c490:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d10a      	bne.n	800c4ae <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800c498:	481c      	ldr	r0, [pc, #112]	; (800c50c <USBH_Init+0x88>)
 800c49a:	f00c fd2b 	bl	8018ef4 <iprintf>
 800c49e:	481c      	ldr	r0, [pc, #112]	; (800c510 <USBH_Init+0x8c>)
 800c4a0:	f00c fd28 	bl	8018ef4 <iprintf>
 800c4a4:	200a      	movs	r0, #10
 800c4a6:	f00c fd3d 	bl	8018f24 <putchar>
    return USBH_FAIL;
 800c4aa:	2302      	movs	r3, #2
 800c4ac:	e029      	b.n	800c502 <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	79fa      	ldrb	r2, [r7, #7]
 800c4b2:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f000 f824 	bl	800c514 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d003      	beq.n	800c4fa <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	68ba      	ldr	r2, [r7, #8]
 800c4f6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	f00c f9d4 	bl	80188a8 <USBH_LL_Init>

  return USBH_OK;
 800c500:	2300      	movs	r3, #0
}
 800c502:	4618      	mov	r0, r3
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	0801a19c 	.word	0x0801a19c
 800c510:	0801a1a4 	.word	0x0801a1a4

0800c514 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c514:	b480      	push	{r7}
 800c516:	b085      	sub	sp, #20
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c51c:	2300      	movs	r3, #0
 800c51e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c520:	2300      	movs	r3, #0
 800c522:	60fb      	str	r3, [r7, #12]
 800c524:	e009      	b.n	800c53a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	33e0      	adds	r3, #224	; 0xe0
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	4413      	add	r3, r2
 800c530:	2200      	movs	r2, #0
 800c532:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	3301      	adds	r3, #1
 800c538:	60fb      	str	r3, [r7, #12]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2b0e      	cmp	r3, #14
 800c53e:	d9f2      	bls.n	800c526 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c540:	2300      	movs	r3, #0
 800c542:	60fb      	str	r3, [r7, #12]
 800c544:	e009      	b.n	800c55a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	4413      	add	r3, r2
 800c54c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c550:	2200      	movs	r2, #0
 800c552:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	3301      	adds	r3, #1
 800c558:	60fb      	str	r3, [r7, #12]
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c560:	d3f1      	bcc.n	800c546 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2201      	movs	r2, #1
 800c572:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2240      	movs	r2, #64	; 0x40
 800c586:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2201      	movs	r2, #1
 800c59a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3714      	adds	r7, #20
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d01f      	beq.n	800c610 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d10e      	bne.n	800c5f8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c5e0:	1c59      	adds	r1, r3, #1
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	33de      	adds	r3, #222	; 0xde
 800c5ec:	6839      	ldr	r1, [r7, #0]
 800c5ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	73fb      	strb	r3, [r7, #15]
 800c5f6:	e016      	b.n	800c626 <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800c5f8:	480d      	ldr	r0, [pc, #52]	; (800c630 <USBH_RegisterClass+0x74>)
 800c5fa:	f00c fc7b 	bl	8018ef4 <iprintf>
 800c5fe:	480d      	ldr	r0, [pc, #52]	; (800c634 <USBH_RegisterClass+0x78>)
 800c600:	f00c fc78 	bl	8018ef4 <iprintf>
 800c604:	200a      	movs	r0, #10
 800c606:	f00c fc8d 	bl	8018f24 <putchar>
      status = USBH_FAIL;
 800c60a:	2302      	movs	r3, #2
 800c60c:	73fb      	strb	r3, [r7, #15]
 800c60e:	e00a      	b.n	800c626 <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800c610:	4807      	ldr	r0, [pc, #28]	; (800c630 <USBH_RegisterClass+0x74>)
 800c612:	f00c fc6f 	bl	8018ef4 <iprintf>
 800c616:	4808      	ldr	r0, [pc, #32]	; (800c638 <USBH_RegisterClass+0x7c>)
 800c618:	f00c fc6c 	bl	8018ef4 <iprintf>
 800c61c:	200a      	movs	r0, #10
 800c61e:	f00c fc81 	bl	8018f24 <putchar>
    status = USBH_FAIL;
 800c622:	2302      	movs	r3, #2
 800c624:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c626:	7bfb      	ldrb	r3, [r7, #15]
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	0801a19c 	.word	0x0801a19c
 800c634:	0801a1b8 	.word	0x0801a1b8
 800c638:	0801a1d4 	.word	0x0801a1d4

0800c63c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	460b      	mov	r3, r1
 800c646:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c648:	2300      	movs	r3, #0
 800c64a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c652:	78fa      	ldrb	r2, [r7, #3]
 800c654:	429a      	cmp	r2, r3
 800c656:	d23c      	bcs.n	800c6d2 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	78fa      	ldrb	r2, [r7, #3]
 800c65c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800c660:	78fb      	ldrb	r3, [r7, #3]
 800c662:	4619      	mov	r1, r3
 800c664:	4823      	ldr	r0, [pc, #140]	; (800c6f4 <USBH_SelectInterface+0xb8>)
 800c666:	f00c fc45 	bl	8018ef4 <iprintf>
 800c66a:	200a      	movs	r0, #10
 800c66c:	f00c fc5a 	bl	8018f24 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800c670:	78fb      	ldrb	r3, [r7, #3]
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	211a      	movs	r1, #26
 800c676:	fb01 f303 	mul.w	r3, r1, r3
 800c67a:	4413      	add	r3, r2
 800c67c:	f203 3347 	addw	r3, r3, #839	; 0x347
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	4619      	mov	r1, r3
 800c684:	481c      	ldr	r0, [pc, #112]	; (800c6f8 <USBH_SelectInterface+0xbc>)
 800c686:	f00c fc35 	bl	8018ef4 <iprintf>
 800c68a:	200a      	movs	r0, #10
 800c68c:	f00c fc4a 	bl	8018f24 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800c690:	78fb      	ldrb	r3, [r7, #3]
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	211a      	movs	r1, #26
 800c696:	fb01 f303 	mul.w	r3, r1, r3
 800c69a:	4413      	add	r3, r2
 800c69c:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	4815      	ldr	r0, [pc, #84]	; (800c6fc <USBH_SelectInterface+0xc0>)
 800c6a6:	f00c fc25 	bl	8018ef4 <iprintf>
 800c6aa:	200a      	movs	r0, #10
 800c6ac:	f00c fc3a 	bl	8018f24 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800c6b0:	78fb      	ldrb	r3, [r7, #3]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	211a      	movs	r1, #26
 800c6b6:	fb01 f303 	mul.w	r3, r1, r3
 800c6ba:	4413      	add	r3, r2
 800c6bc:	f203 3349 	addw	r3, r3, #841	; 0x349
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	480e      	ldr	r0, [pc, #56]	; (800c700 <USBH_SelectInterface+0xc4>)
 800c6c6:	f00c fc15 	bl	8018ef4 <iprintf>
 800c6ca:	200a      	movs	r0, #10
 800c6cc:	f00c fc2a 	bl	8018f24 <putchar>
 800c6d0:	e00a      	b.n	800c6e8 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800c6d2:	480c      	ldr	r0, [pc, #48]	; (800c704 <USBH_SelectInterface+0xc8>)
 800c6d4:	f00c fc0e 	bl	8018ef4 <iprintf>
 800c6d8:	480b      	ldr	r0, [pc, #44]	; (800c708 <USBH_SelectInterface+0xcc>)
 800c6da:	f00c fc0b 	bl	8018ef4 <iprintf>
 800c6de:	200a      	movs	r0, #10
 800c6e0:	f00c fc20 	bl	8018f24 <putchar>
    status = USBH_FAIL;
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3710      	adds	r7, #16
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	0801a1ec 	.word	0x0801a1ec
 800c6f8:	0801a20c 	.word	0x0801a20c
 800c6fc:	0801a21c 	.word	0x0801a21c
 800c700:	0801a22c 	.word	0x0801a22c
 800c704:	0801a19c 	.word	0x0801a19c
 800c708:	0801a23c 	.word	0x0801a23c

0800c70c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b087      	sub	sp, #28
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	4608      	mov	r0, r1
 800c716:	4611      	mov	r1, r2
 800c718:	461a      	mov	r2, r3
 800c71a:	4603      	mov	r3, r0
 800c71c:	70fb      	strb	r3, [r7, #3]
 800c71e:	460b      	mov	r3, r1
 800c720:	70bb      	strb	r3, [r7, #2]
 800c722:	4613      	mov	r3, r2
 800c724:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c726:	2300      	movs	r3, #0
 800c728:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c72a:	2300      	movs	r3, #0
 800c72c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c734:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c736:	e025      	b.n	800c784 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c738:	7dfb      	ldrb	r3, [r7, #23]
 800c73a:	221a      	movs	r2, #26
 800c73c:	fb02 f303 	mul.w	r3, r2, r3
 800c740:	3308      	adds	r3, #8
 800c742:	68fa      	ldr	r2, [r7, #12]
 800c744:	4413      	add	r3, r2
 800c746:	3302      	adds	r3, #2
 800c748:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	795b      	ldrb	r3, [r3, #5]
 800c74e:	78fa      	ldrb	r2, [r7, #3]
 800c750:	429a      	cmp	r2, r3
 800c752:	d002      	beq.n	800c75a <USBH_FindInterface+0x4e>
 800c754:	78fb      	ldrb	r3, [r7, #3]
 800c756:	2bff      	cmp	r3, #255	; 0xff
 800c758:	d111      	bne.n	800c77e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c75e:	78ba      	ldrb	r2, [r7, #2]
 800c760:	429a      	cmp	r2, r3
 800c762:	d002      	beq.n	800c76a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c764:	78bb      	ldrb	r3, [r7, #2]
 800c766:	2bff      	cmp	r3, #255	; 0xff
 800c768:	d109      	bne.n	800c77e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c76e:	787a      	ldrb	r2, [r7, #1]
 800c770:	429a      	cmp	r2, r3
 800c772:	d002      	beq.n	800c77a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c774:	787b      	ldrb	r3, [r7, #1]
 800c776:	2bff      	cmp	r3, #255	; 0xff
 800c778:	d101      	bne.n	800c77e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c77a:	7dfb      	ldrb	r3, [r7, #23]
 800c77c:	e006      	b.n	800c78c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c77e:	7dfb      	ldrb	r3, [r7, #23]
 800c780:	3301      	adds	r3, #1
 800c782:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c784:	7dfb      	ldrb	r3, [r7, #23]
 800c786:	2b01      	cmp	r3, #1
 800c788:	d9d6      	bls.n	800c738 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c78a:	23ff      	movs	r3, #255	; 0xff
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	371c      	adds	r7, #28
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f00c f8bd 	bl	8018920 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c7a6:	2101      	movs	r1, #1
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f00c f9d6 	bl	8018b5a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b088      	sub	sp, #32
 800c7bc:	af04      	add	r7, sp, #16
 800c7be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c7c0:	2302      	movs	r3, #2
 800c7c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d102      	bne.n	800c7da <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2203      	movs	r2, #3
 800c7d8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	2b0b      	cmp	r3, #11
 800c7e2:	f200 822b 	bhi.w	800cc3c <USBH_Process+0x484>
 800c7e6:	a201      	add	r2, pc, #4	; (adr r2, 800c7ec <USBH_Process+0x34>)
 800c7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ec:	0800c81d 	.word	0x0800c81d
 800c7f0:	0800c85b 	.word	0x0800c85b
 800c7f4:	0800c8db 	.word	0x0800c8db
 800c7f8:	0800cbcb 	.word	0x0800cbcb
 800c7fc:	0800cc3d 	.word	0x0800cc3d
 800c800:	0800c97f 	.word	0x0800c97f
 800c804:	0800cb4d 	.word	0x0800cb4d
 800c808:	0800c9cd 	.word	0x0800c9cd
 800c80c:	0800c9ed 	.word	0x0800c9ed
 800c810:	0800ca19 	.word	0x0800ca19
 800c814:	0800ca53 	.word	0x0800ca53
 800c818:	0800cbb3 	.word	0x0800cbb3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c822:	b2db      	uxtb	r3, r3
 800c824:	2b00      	cmp	r3, #0
 800c826:	f000 820b 	beq.w	800cc40 <USBH_Process+0x488>
      {
        USBH_UsrLog("USB Device Connected");
 800c82a:	48b9      	ldr	r0, [pc, #740]	; (800cb10 <USBH_Process+0x358>)
 800c82c:	f00c fb62 	bl	8018ef4 <iprintf>
 800c830:	200a      	movs	r0, #10
 800c832:	f00c fb77 	bl	8018f24 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2201      	movs	r2, #1
 800c83a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c83c:	20c8      	movs	r0, #200	; 0xc8
 800c83e:	f00c fa03 	bl	8018c48 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f00c f8c9 	bl	80189da <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c858:	e1f2      	b.n	800cc40 <USBH_Process+0x488>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c860:	2b01      	cmp	r3, #1
 800c862:	d10d      	bne.n	800c880 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800c864:	48ab      	ldr	r0, [pc, #684]	; (800cb14 <USBH_Process+0x35c>)
 800c866:	f00c fb45 	bl	8018ef4 <iprintf>
 800c86a:	200a      	movs	r0, #10
 800c86c:	f00c fb5a 	bl	8018f24 <putchar>
        phost->device.RstCnt = 0U;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2202      	movs	r2, #2
 800c87c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c87e:	e1ec      	b.n	800cc5a <USBH_Process+0x4a2>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c88a:	d91a      	bls.n	800c8c2 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c892:	3301      	adds	r3, #1
 800c894:	b2da      	uxtb	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c8a2:	2b03      	cmp	r3, #3
 800c8a4:	d909      	bls.n	800c8ba <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800c8a6:	489c      	ldr	r0, [pc, #624]	; (800cb18 <USBH_Process+0x360>)
 800c8a8:	f00c fb24 	bl	8018ef4 <iprintf>
 800c8ac:	200a      	movs	r0, #10
 800c8ae:	f00c fb39 	bl	8018f24 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	220d      	movs	r2, #13
 800c8b6:	701a      	strb	r2, [r3, #0]
      break;
 800c8b8:	e1cf      	b.n	800cc5a <USBH_Process+0x4a2>
            phost->gState = HOST_IDLE;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	701a      	strb	r2, [r3, #0]
      break;
 800c8c0:	e1cb      	b.n	800cc5a <USBH_Process+0x4a2>
          phost->Timeout += 10U;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c8c8:	f103 020a 	add.w	r2, r3, #10
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c8d2:	200a      	movs	r0, #10
 800c8d4:	f00c f9b8 	bl	8018c48 <USBH_Delay>
      break;
 800c8d8:	e1bf      	b.n	800cc5a <USBH_Process+0x4a2>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d005      	beq.n	800c8f0 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c8ea:	2104      	movs	r1, #4
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c8f0:	2064      	movs	r0, #100	; 0x64
 800c8f2:	f00c f9a9 	bl	8018c48 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f00c f848 	bl	801898c <USBH_LL_GetSpeed>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	461a      	mov	r2, r3
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2205      	movs	r2, #5
 800c90a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c90c:	2100      	movs	r1, #0
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f001 fa77 	bl	800de02 <USBH_AllocPipe>
 800c914:	4603      	mov	r3, r0
 800c916:	461a      	mov	r2, r3
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c91c:	2180      	movs	r1, #128	; 0x80
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f001 fa6f 	bl	800de02 <USBH_AllocPipe>
 800c924:	4603      	mov	r3, r0
 800c926:	461a      	mov	r2, r3
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	7919      	ldrb	r1, [r3, #4]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c940:	b292      	uxth	r2, r2
 800c942:	9202      	str	r2, [sp, #8]
 800c944:	2200      	movs	r2, #0
 800c946:	9201      	str	r2, [sp, #4]
 800c948:	9300      	str	r3, [sp, #0]
 800c94a:	4603      	mov	r3, r0
 800c94c:	2280      	movs	r2, #128	; 0x80
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f001 fa28 	bl	800dda4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	7959      	ldrb	r1, [r3, #5]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c968:	b292      	uxth	r2, r2
 800c96a:	9202      	str	r2, [sp, #8]
 800c96c:	2200      	movs	r2, #0
 800c96e:	9201      	str	r2, [sp, #4]
 800c970:	9300      	str	r3, [sp, #0]
 800c972:	4603      	mov	r3, r0
 800c974:	2200      	movs	r2, #0
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f001 fa14 	bl	800dda4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c97c:	e16d      	b.n	800cc5a <USBH_Process+0x4a2>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 f97a 	bl	800cc78 <USBH_HandleEnum>
 800c984:	4603      	mov	r3, r0
 800c986:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c988:	7bbb      	ldrb	r3, [r7, #14]
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f040 8159 	bne.w	800cc44 <USBH_Process+0x48c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800c992:	4862      	ldr	r0, [pc, #392]	; (800cb1c <USBH_Process+0x364>)
 800c994:	f00c faae 	bl	8018ef4 <iprintf>
 800c998:	200a      	movs	r0, #10
 800c99a:	f00c fac3 	bl	8018f24 <putchar>

        phost->device.current_interface = 0U;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d109      	bne.n	800c9c4 <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800c9b0:	485b      	ldr	r0, [pc, #364]	; (800cb20 <USBH_Process+0x368>)
 800c9b2:	f00c fa9f 	bl	8018ef4 <iprintf>
 800c9b6:	200a      	movs	r0, #10
 800c9b8:	f00c fab4 	bl	8018f24 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2208      	movs	r2, #8
 800c9c0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c9c2:	e13f      	b.n	800cc44 <USBH_Process+0x48c>
          phost->gState = HOST_INPUT;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2207      	movs	r2, #7
 800c9c8:	701a      	strb	r2, [r3, #0]
      break;
 800c9ca:	e13b      	b.n	800cc44 <USBH_Process+0x48c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	f000 8138 	beq.w	800cc48 <USBH_Process+0x490>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c9de:	2101      	movs	r1, #1
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2208      	movs	r2, #8
 800c9e8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c9ea:	e12d      	b.n	800cc48 <USBH_Process+0x490>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 fd4e 	bl	800d498 <USBH_SetCfg>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	f040 8124 	bne.w	800cc4c <USBH_Process+0x494>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2209      	movs	r2, #9
 800ca08:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800ca0a:	4846      	ldr	r0, [pc, #280]	; (800cb24 <USBH_Process+0x36c>)
 800ca0c:	f00c fa72 	bl	8018ef4 <iprintf>
 800ca10:	200a      	movs	r0, #10
 800ca12:	f00c fa87 	bl	8018f24 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ca16:	e119      	b.n	800cc4c <USBH_Process+0x494>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ca1e:	f003 0320 	and.w	r3, r3, #32
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d011      	beq.n	800ca4a <USBH_Process+0x292>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ca26:	2101      	movs	r1, #1
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 fd58 	bl	800d4de <USBH_SetFeature>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	f040 810d 	bne.w	800cc50 <USBH_Process+0x498>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800ca36:	483c      	ldr	r0, [pc, #240]	; (800cb28 <USBH_Process+0x370>)
 800ca38:	f00c fa5c 	bl	8018ef4 <iprintf>
 800ca3c:	200a      	movs	r0, #10
 800ca3e:	f00c fa71 	bl	8018f24 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	220a      	movs	r2, #10
 800ca46:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ca48:	e102      	b.n	800cc50 <USBH_Process+0x498>
        phost->gState = HOST_CHECK_CLASS;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	220a      	movs	r2, #10
 800ca4e:	701a      	strb	r2, [r3, #0]
      break;
 800ca50:	e0fe      	b.n	800cc50 <USBH_Process+0x498>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d106      	bne.n	800ca6a <USBH_Process+0x2b2>
      {
        USBH_UsrLog("No Class has been registered.");
 800ca5c:	4833      	ldr	r0, [pc, #204]	; (800cb2c <USBH_Process+0x374>)
 800ca5e:	f00c fa49 	bl	8018ef4 <iprintf>
 800ca62:	200a      	movs	r0, #10
 800ca64:	f00c fa5e 	bl	8018f24 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ca68:	e0f7      	b.n	800cc5a <USBH_Process+0x4a2>
        phost->pActiveClass = NULL;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ca72:	2300      	movs	r3, #0
 800ca74:	73fb      	strb	r3, [r7, #15]
 800ca76:	e016      	b.n	800caa6 <USBH_Process+0x2ee>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ca78:	7bfa      	ldrb	r2, [r7, #15]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	32de      	adds	r2, #222	; 0xde
 800ca7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca82:	791a      	ldrb	r2, [r3, #4]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d108      	bne.n	800caa0 <USBH_Process+0x2e8>
            phost->pActiveClass = phost->pClass[idx];
 800ca8e:	7bfa      	ldrb	r2, [r7, #15]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	32de      	adds	r2, #222	; 0xde
 800ca94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ca9e:	e005      	b.n	800caac <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800caa0:	7bfb      	ldrb	r3, [r7, #15]
 800caa2:	3301      	adds	r3, #1
 800caa4:	73fb      	strb	r3, [r7, #15]
 800caa6:	7bfb      	ldrb	r3, [r7, #15]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d0e5      	beq.n	800ca78 <USBH_Process+0x2c0>
        if (phost->pActiveClass != NULL)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d040      	beq.n	800cb38 <USBH_Process+0x380>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	4798      	blx	r3
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d114      	bne.n	800caf2 <USBH_Process+0x33a>
            phost->gState = HOST_CLASS_REQUEST;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2206      	movs	r2, #6
 800cacc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4619      	mov	r1, r3
 800cad8:	4815      	ldr	r0, [pc, #84]	; (800cb30 <USBH_Process+0x378>)
 800cada:	f00c fa0b 	bl	8018ef4 <iprintf>
 800cade:	200a      	movs	r0, #10
 800cae0:	f00c fa20 	bl	8018f24 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800caea:	2103      	movs	r1, #3
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	4798      	blx	r3
      break;
 800caf0:	e0b3      	b.n	800cc5a <USBH_Process+0x4a2>
            phost->gState = HOST_ABORT_STATE;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	220d      	movs	r2, #13
 800caf6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4619      	mov	r1, r3
 800cb02:	480c      	ldr	r0, [pc, #48]	; (800cb34 <USBH_Process+0x37c>)
 800cb04:	f00c f9f6 	bl	8018ef4 <iprintf>
 800cb08:	200a      	movs	r0, #10
 800cb0a:	f00c fa0b 	bl	8018f24 <putchar>
      break;
 800cb0e:	e0a4      	b.n	800cc5a <USBH_Process+0x4a2>
 800cb10:	0801a25c 	.word	0x0801a25c
 800cb14:	0801a274 	.word	0x0801a274
 800cb18:	0801a290 	.word	0x0801a290
 800cb1c:	0801a2bc 	.word	0x0801a2bc
 800cb20:	0801a2d0 	.word	0x0801a2d0
 800cb24:	0801a2f8 	.word	0x0801a2f8
 800cb28:	0801a314 	.word	0x0801a314
 800cb2c:	0801a334 	.word	0x0801a334
 800cb30:	0801a354 	.word	0x0801a354
 800cb34:	0801a368 	.word	0x0801a368
          phost->gState = HOST_ABORT_STATE;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	220d      	movs	r2, #13
 800cb3c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800cb3e:	4849      	ldr	r0, [pc, #292]	; (800cc64 <USBH_Process+0x4ac>)
 800cb40:	f00c f9d8 	bl	8018ef4 <iprintf>
 800cb44:	200a      	movs	r0, #10
 800cb46:	f00c f9ed 	bl	8018f24 <putchar>
      break;
 800cb4a:	e086      	b.n	800cc5a <USBH_Process+0x4a2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d020      	beq.n	800cb98 <USBH_Process+0x3e0>
      {
        status = phost->pActiveClass->Requests(phost);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb5c:	691b      	ldr	r3, [r3, #16]
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	4798      	blx	r3
 800cb62:	4603      	mov	r3, r0
 800cb64:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cb66:	7bbb      	ldrb	r3, [r7, #14]
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d103      	bne.n	800cb76 <USBH_Process+0x3be>
        {
          phost->gState = HOST_CLASS;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	220b      	movs	r2, #11
 800cb72:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cb74:	e06e      	b.n	800cc54 <USBH_Process+0x49c>
        else if (status == USBH_FAIL)
 800cb76:	7bbb      	ldrb	r3, [r7, #14]
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	2b02      	cmp	r3, #2
 800cb7c:	d16a      	bne.n	800cc54 <USBH_Process+0x49c>
          phost->gState = HOST_ABORT_STATE;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	220d      	movs	r2, #13
 800cb82:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800cb84:	4838      	ldr	r0, [pc, #224]	; (800cc68 <USBH_Process+0x4b0>)
 800cb86:	f00c f9b5 	bl	8018ef4 <iprintf>
 800cb8a:	4838      	ldr	r0, [pc, #224]	; (800cc6c <USBH_Process+0x4b4>)
 800cb8c:	f00c f9b2 	bl	8018ef4 <iprintf>
 800cb90:	200a      	movs	r0, #10
 800cb92:	f00c f9c7 	bl	8018f24 <putchar>
      break;
 800cb96:	e05d      	b.n	800cc54 <USBH_Process+0x49c>
        phost->gState = HOST_ABORT_STATE;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	220d      	movs	r2, #13
 800cb9c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800cb9e:	4832      	ldr	r0, [pc, #200]	; (800cc68 <USBH_Process+0x4b0>)
 800cba0:	f00c f9a8 	bl	8018ef4 <iprintf>
 800cba4:	4832      	ldr	r0, [pc, #200]	; (800cc70 <USBH_Process+0x4b8>)
 800cba6:	f00c f9a5 	bl	8018ef4 <iprintf>
 800cbaa:	200a      	movs	r0, #10
 800cbac:	f00c f9ba 	bl	8018f24 <putchar>
      break;
 800cbb0:	e050      	b.n	800cc54 <USBH_Process+0x49c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d04d      	beq.n	800cc58 <USBH_Process+0x4a0>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbc2:	695b      	ldr	r3, [r3, #20]
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	4798      	blx	r3
      }
      break;
 800cbc8:	e046      	b.n	800cc58 <USBH_Process+0x4a0>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7ff fc9e 	bl	800c514 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d009      	beq.n	800cbf6 <USBH_Process+0x43e>
      {
        phost->pActiveClass->DeInit(phost);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d005      	beq.n	800cc0c <USBH_Process+0x454>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc06:	2105      	movs	r1, #5
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800cc0c:	4819      	ldr	r0, [pc, #100]	; (800cc74 <USBH_Process+0x4bc>)
 800cc0e:	f00c f971 	bl	8018ef4 <iprintf>
 800cc12:	200a      	movs	r0, #10
 800cc14:	f00c f986 	bl	8018f24 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d107      	bne.n	800cc34 <USBH_Process+0x47c>
      {
        phost->device.is_ReEnumerated = 0U;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f7ff fdb3 	bl	800c798 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cc32:	e012      	b.n	800cc5a <USBH_Process+0x4a2>
        USBH_LL_Start(phost);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f00b fe73 	bl	8018920 <USBH_LL_Start>
      break;
 800cc3a:	e00e      	b.n	800cc5a <USBH_Process+0x4a2>

    case HOST_ABORT_STATE:
    default :
      break;
 800cc3c:	bf00      	nop
 800cc3e:	e00c      	b.n	800cc5a <USBH_Process+0x4a2>
      break;
 800cc40:	bf00      	nop
 800cc42:	e00a      	b.n	800cc5a <USBH_Process+0x4a2>
      break;
 800cc44:	bf00      	nop
 800cc46:	e008      	b.n	800cc5a <USBH_Process+0x4a2>
    break;
 800cc48:	bf00      	nop
 800cc4a:	e006      	b.n	800cc5a <USBH_Process+0x4a2>
      break;
 800cc4c:	bf00      	nop
 800cc4e:	e004      	b.n	800cc5a <USBH_Process+0x4a2>
      break;
 800cc50:	bf00      	nop
 800cc52:	e002      	b.n	800cc5a <USBH_Process+0x4a2>
      break;
 800cc54:	bf00      	nop
 800cc56:	e000      	b.n	800cc5a <USBH_Process+0x4a2>
      break;
 800cc58:	bf00      	nop
  }
  return USBH_OK;
 800cc5a:	2300      	movs	r3, #0
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	0801a388 	.word	0x0801a388
 800cc68:	0801a19c 	.word	0x0801a19c
 800cc6c:	0801a3b0 	.word	0x0801a3b0
 800cc70:	0801a3d8 	.word	0x0801a3d8
 800cc74:	0801a3f0 	.word	0x0801a3f0

0800cc78 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b088      	sub	sp, #32
 800cc7c:	af04      	add	r7, sp, #16
 800cc7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cc80:	2301      	movs	r3, #1
 800cc82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cc84:	2301      	movs	r3, #1
 800cc86:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	785b      	ldrb	r3, [r3, #1]
 800cc8c:	2b07      	cmp	r3, #7
 800cc8e:	f200 8280 	bhi.w	800d192 <USBH_HandleEnum+0x51a>
 800cc92:	a201      	add	r2, pc, #4	; (adr r2, 800cc98 <USBH_HandleEnum+0x20>)
 800cc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc98:	0800ccb9 	.word	0x0800ccb9
 800cc9c:	0800cd95 	.word	0x0800cd95
 800cca0:	0800ce45 	.word	0x0800ce45
 800cca4:	0800cf05 	.word	0x0800cf05
 800cca8:	0800cf8d 	.word	0x0800cf8d
 800ccac:	0800d041 	.word	0x0800d041
 800ccb0:	0800d0b5 	.word	0x0800d0b5
 800ccb4:	0800d127 	.word	0x0800d127
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ccb8:	2108      	movs	r1, #8
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 fb1c 	bl	800d2f8 <USBH_Get_DevDesc>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ccc4:	7bbb      	ldrb	r3, [r7, #14]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d130      	bne.n	800cd2c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	7919      	ldrb	r1, [r3, #4]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ccee:	b292      	uxth	r2, r2
 800ccf0:	9202      	str	r2, [sp, #8]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	9201      	str	r2, [sp, #4]
 800ccf6:	9300      	str	r3, [sp, #0]
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2280      	movs	r2, #128	; 0x80
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f001 f851 	bl	800dda4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	7959      	ldrb	r1, [r3, #5]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cd16:	b292      	uxth	r2, r2
 800cd18:	9202      	str	r2, [sp, #8]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	9201      	str	r2, [sp, #4]
 800cd1e:	9300      	str	r3, [sp, #0]
 800cd20:	4603      	mov	r3, r0
 800cd22:	2200      	movs	r2, #0
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f001 f83d 	bl	800dda4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cd2a:	e234      	b.n	800d196 <USBH_HandleEnum+0x51e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd2c:	7bbb      	ldrb	r3, [r7, #14]
 800cd2e:	2b03      	cmp	r3, #3
 800cd30:	f040 8231 	bne.w	800d196 <USBH_HandleEnum+0x51e>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800cd34:	48b9      	ldr	r0, [pc, #740]	; (800d01c <USBH_HandleEnum+0x3a4>)
 800cd36:	f00c f8dd 	bl	8018ef4 <iprintf>
 800cd3a:	48b9      	ldr	r0, [pc, #740]	; (800d020 <USBH_HandleEnum+0x3a8>)
 800cd3c:	f00c f8da 	bl	8018ef4 <iprintf>
 800cd40:	200a      	movs	r0, #10
 800cd42:	f00c f8ef 	bl	8018f24 <putchar>
        phost->device.EnumCnt++;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	b2da      	uxtb	r2, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd5c:	2b03      	cmp	r3, #3
 800cd5e:	d909      	bls.n	800cd74 <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800cd60:	48b0      	ldr	r0, [pc, #704]	; (800d024 <USBH_HandleEnum+0x3ac>)
 800cd62:	f00c f8c7 	bl	8018ef4 <iprintf>
 800cd66:	200a      	movs	r0, #10
 800cd68:	f00c f8dc 	bl	8018f24 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	220d      	movs	r2, #13
 800cd70:	701a      	strb	r2, [r3, #0]
      break;
 800cd72:	e210      	b.n	800d196 <USBH_HandleEnum+0x51e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	795b      	ldrb	r3, [r3, #5]
 800cd78:	4619      	mov	r1, r3
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f001 f862 	bl	800de44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	791b      	ldrb	r3, [r3, #4]
 800cd84:	4619      	mov	r1, r3
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f001 f85c 	bl	800de44 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	701a      	strb	r2, [r3, #0]
      break;
 800cd92:	e200      	b.n	800d196 <USBH_HandleEnum+0x51e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cd94:	2112      	movs	r1, #18
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 faae 	bl	800d2f8 <USBH_Get_DevDesc>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cda0:	7bbb      	ldrb	r3, [r7, #14]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d117      	bne.n	800cdd6 <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 800cdac:	4619      	mov	r1, r3
 800cdae:	489e      	ldr	r0, [pc, #632]	; (800d028 <USBH_HandleEnum+0x3b0>)
 800cdb0:	f00c f8a0 	bl	8018ef4 <iprintf>
 800cdb4:	200a      	movs	r0, #10
 800cdb6:	f00c f8b5 	bl	8018f24 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	489a      	ldr	r0, [pc, #616]	; (800d02c <USBH_HandleEnum+0x3b4>)
 800cdc4:	f00c f896 	bl	8018ef4 <iprintf>
 800cdc8:	200a      	movs	r0, #10
 800cdca:	f00c f8ab 	bl	8018f24 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2202      	movs	r2, #2
 800cdd2:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cdd4:	e1e1      	b.n	800d19a <USBH_HandleEnum+0x522>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cdd6:	7bbb      	ldrb	r3, [r7, #14]
 800cdd8:	2b03      	cmp	r3, #3
 800cdda:	f040 81de 	bne.w	800d19a <USBH_HandleEnum+0x522>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800cdde:	488f      	ldr	r0, [pc, #572]	; (800d01c <USBH_HandleEnum+0x3a4>)
 800cde0:	f00c f888 	bl	8018ef4 <iprintf>
 800cde4:	4892      	ldr	r0, [pc, #584]	; (800d030 <USBH_HandleEnum+0x3b8>)
 800cde6:	f00c f885 	bl	8018ef4 <iprintf>
 800cdea:	200a      	movs	r0, #10
 800cdec:	f00c f89a 	bl	8018f24 <putchar>
        phost->device.EnumCnt++;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce06:	2b03      	cmp	r3, #3
 800ce08:	d909      	bls.n	800ce1e <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ce0a:	4886      	ldr	r0, [pc, #536]	; (800d024 <USBH_HandleEnum+0x3ac>)
 800ce0c:	f00c f872 	bl	8018ef4 <iprintf>
 800ce10:	200a      	movs	r0, #10
 800ce12:	f00c f887 	bl	8018f24 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	220d      	movs	r2, #13
 800ce1a:	701a      	strb	r2, [r3, #0]
      break;
 800ce1c:	e1bd      	b.n	800d19a <USBH_HandleEnum+0x522>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	795b      	ldrb	r3, [r3, #5]
 800ce22:	4619      	mov	r1, r3
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f001 f80d 	bl	800de44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	791b      	ldrb	r3, [r3, #4]
 800ce2e:	4619      	mov	r1, r3
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f001 f807 	bl	800de44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	701a      	strb	r2, [r3, #0]
      break;
 800ce42:	e1aa      	b.n	800d19a <USBH_HandleEnum+0x522>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ce44:	2101      	movs	r1, #1
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 fb02 	bl	800d450 <USBH_SetAddress>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ce50:	7bbb      	ldrb	r3, [r7, #14]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d13c      	bne.n	800ced0 <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 800ce56:	2002      	movs	r0, #2
 800ce58:	f00b fef6 	bl	8018c48 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	4871      	ldr	r0, [pc, #452]	; (800d034 <USBH_HandleEnum+0x3bc>)
 800ce6e:	f00c f841 	bl	8018ef4 <iprintf>
 800ce72:	200a      	movs	r0, #10
 800ce74:	f00c f856 	bl	8018f24 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2203      	movs	r2, #3
 800ce7c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	7919      	ldrb	r1, [r3, #4]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ce92:	b292      	uxth	r2, r2
 800ce94:	9202      	str	r2, [sp, #8]
 800ce96:	2200      	movs	r2, #0
 800ce98:	9201      	str	r2, [sp, #4]
 800ce9a:	9300      	str	r3, [sp, #0]
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2280      	movs	r2, #128	; 0x80
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 ff7f 	bl	800dda4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	7959      	ldrb	r1, [r3, #5]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ceba:	b292      	uxth	r2, r2
 800cebc:	9202      	str	r2, [sp, #8]
 800cebe:	2200      	movs	r2, #0
 800cec0:	9201      	str	r2, [sp, #4]
 800cec2:	9300      	str	r3, [sp, #0]
 800cec4:	4603      	mov	r3, r0
 800cec6:	2200      	movs	r2, #0
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 ff6b 	bl	800dda4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cece:	e166      	b.n	800d19e <USBH_HandleEnum+0x526>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ced0:	7bbb      	ldrb	r3, [r7, #14]
 800ced2:	2b03      	cmp	r3, #3
 800ced4:	f040 8163 	bne.w	800d19e <USBH_HandleEnum+0x526>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800ced8:	4850      	ldr	r0, [pc, #320]	; (800d01c <USBH_HandleEnum+0x3a4>)
 800ceda:	f00c f80b 	bl	8018ef4 <iprintf>
 800cede:	4856      	ldr	r0, [pc, #344]	; (800d038 <USBH_HandleEnum+0x3c0>)
 800cee0:	f00c f808 	bl	8018ef4 <iprintf>
 800cee4:	200a      	movs	r0, #10
 800cee6:	f00c f81d 	bl	8018f24 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ceea:	484e      	ldr	r0, [pc, #312]	; (800d024 <USBH_HandleEnum+0x3ac>)
 800ceec:	f00c f802 	bl	8018ef4 <iprintf>
 800cef0:	200a      	movs	r0, #10
 800cef2:	f00c f817 	bl	8018f24 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	220d      	movs	r2, #13
 800cefa:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	705a      	strb	r2, [r3, #1]
      break;
 800cf02:	e14c      	b.n	800d19e <USBH_HandleEnum+0x526>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cf04:	2109      	movs	r1, #9
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 fa1e 	bl	800d348 <USBH_Get_CfgDesc>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf10:	7bbb      	ldrb	r3, [r7, #14]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d103      	bne.n	800cf1e <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2204      	movs	r2, #4
 800cf1a:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cf1c:	e141      	b.n	800d1a2 <USBH_HandleEnum+0x52a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf1e:	7bbb      	ldrb	r3, [r7, #14]
 800cf20:	2b03      	cmp	r3, #3
 800cf22:	f040 813e 	bne.w	800d1a2 <USBH_HandleEnum+0x52a>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800cf26:	483d      	ldr	r0, [pc, #244]	; (800d01c <USBH_HandleEnum+0x3a4>)
 800cf28:	f00b ffe4 	bl	8018ef4 <iprintf>
 800cf2c:	4843      	ldr	r0, [pc, #268]	; (800d03c <USBH_HandleEnum+0x3c4>)
 800cf2e:	f00b ffe1 	bl	8018ef4 <iprintf>
 800cf32:	200a      	movs	r0, #10
 800cf34:	f00b fff6 	bl	8018f24 <putchar>
        phost->device.EnumCnt++;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf3e:	3301      	adds	r3, #1
 800cf40:	b2da      	uxtb	r2, r3
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf4e:	2b03      	cmp	r3, #3
 800cf50:	d909      	bls.n	800cf66 <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800cf52:	4834      	ldr	r0, [pc, #208]	; (800d024 <USBH_HandleEnum+0x3ac>)
 800cf54:	f00b ffce 	bl	8018ef4 <iprintf>
 800cf58:	200a      	movs	r0, #10
 800cf5a:	f00b ffe3 	bl	8018f24 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	220d      	movs	r2, #13
 800cf62:	701a      	strb	r2, [r3, #0]
      break;
 800cf64:	e11d      	b.n	800d1a2 <USBH_HandleEnum+0x52a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	795b      	ldrb	r3, [r3, #5]
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 ff69 	bl	800de44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	791b      	ldrb	r3, [r3, #4]
 800cf76:	4619      	mov	r1, r3
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f000 ff63 	bl	800de44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	701a      	strb	r2, [r3, #0]
      break;
 800cf8a:	e10a      	b.n	800d1a2 <USBH_HandleEnum+0x52a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800cf92:	4619      	mov	r1, r3
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 f9d7 	bl	800d348 <USBH_Get_CfgDesc>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf9e:	7bbb      	ldrb	r3, [r7, #14]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d103      	bne.n	800cfac <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2205      	movs	r2, #5
 800cfa8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cfaa:	e0fc      	b.n	800d1a6 <USBH_HandleEnum+0x52e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cfac:	7bbb      	ldrb	r3, [r7, #14]
 800cfae:	2b03      	cmp	r3, #3
 800cfb0:	f040 80f9 	bne.w	800d1a6 <USBH_HandleEnum+0x52e>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800cfb4:	4819      	ldr	r0, [pc, #100]	; (800d01c <USBH_HandleEnum+0x3a4>)
 800cfb6:	f00b ff9d 	bl	8018ef4 <iprintf>
 800cfba:	4820      	ldr	r0, [pc, #128]	; (800d03c <USBH_HandleEnum+0x3c4>)
 800cfbc:	f00b ff9a 	bl	8018ef4 <iprintf>
 800cfc0:	200a      	movs	r0, #10
 800cfc2:	f00b ffaf 	bl	8018f24 <putchar>
        phost->device.EnumCnt++;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cfcc:	3301      	adds	r3, #1
 800cfce:	b2da      	uxtb	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cfdc:	2b03      	cmp	r3, #3
 800cfde:	d909      	bls.n	800cff4 <USBH_HandleEnum+0x37c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800cfe0:	4810      	ldr	r0, [pc, #64]	; (800d024 <USBH_HandleEnum+0x3ac>)
 800cfe2:	f00b ff87 	bl	8018ef4 <iprintf>
 800cfe6:	200a      	movs	r0, #10
 800cfe8:	f00b ff9c 	bl	8018f24 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	220d      	movs	r2, #13
 800cff0:	701a      	strb	r2, [r3, #0]
      break;
 800cff2:	e0d8      	b.n	800d1a6 <USBH_HandleEnum+0x52e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	795b      	ldrb	r3, [r3, #5]
 800cff8:	4619      	mov	r1, r3
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 ff22 	bl	800de44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	791b      	ldrb	r3, [r3, #4]
 800d004:	4619      	mov	r1, r3
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 ff1c 	bl	800de44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	701a      	strb	r2, [r3, #0]
      break;
 800d018:	e0c5      	b.n	800d1a6 <USBH_HandleEnum+0x52e>
 800d01a:	bf00      	nop
 800d01c:	0801a19c 	.word	0x0801a19c
 800d020:	0801a408 	.word	0x0801a408
 800d024:	0801a43c 	.word	0x0801a43c
 800d028:	0801a47c 	.word	0x0801a47c
 800d02c:	0801a488 	.word	0x0801a488
 800d030:	0801a494 	.word	0x0801a494
 800d034:	0801a4d0 	.word	0x0801a4d0
 800d038:	0801a4e8 	.word	0x0801a4e8
 800d03c:	0801a51c 	.word	0x0801a51c

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d046:	2b00      	cmp	r3, #0
 800d048:	d02a      	beq.n	800d0a0 <USBH_HandleEnum+0x428>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d056:	23ff      	movs	r3, #255	; 0xff
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f000 f999 	bl	800d390 <USBH_Get_StringDesc>
 800d05e:	4603      	mov	r3, r0
 800d060:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d062:	7bbb      	ldrb	r3, [r7, #14]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d10d      	bne.n	800d084 <USBH_HandleEnum+0x40c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d06e:	4619      	mov	r1, r3
 800d070:	4853      	ldr	r0, [pc, #332]	; (800d1c0 <USBH_HandleEnum+0x548>)
 800d072:	f00b ff3f 	bl	8018ef4 <iprintf>
 800d076:	200a      	movs	r0, #10
 800d078:	f00b ff54 	bl	8018f24 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2206      	movs	r2, #6
 800d080:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d082:	e092      	b.n	800d1aa <USBH_HandleEnum+0x532>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d084:	7bbb      	ldrb	r3, [r7, #14]
 800d086:	2b03      	cmp	r3, #3
 800d088:	f040 808f 	bne.w	800d1aa <USBH_HandleEnum+0x532>
          USBH_UsrLog("Manufacturer : N/A");
 800d08c:	484d      	ldr	r0, [pc, #308]	; (800d1c4 <USBH_HandleEnum+0x54c>)
 800d08e:	f00b ff31 	bl	8018ef4 <iprintf>
 800d092:	200a      	movs	r0, #10
 800d094:	f00b ff46 	bl	8018f24 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2206      	movs	r2, #6
 800d09c:	705a      	strb	r2, [r3, #1]
      break;
 800d09e:	e084      	b.n	800d1aa <USBH_HandleEnum+0x532>
        USBH_UsrLog("Manufacturer : N/A");
 800d0a0:	4848      	ldr	r0, [pc, #288]	; (800d1c4 <USBH_HandleEnum+0x54c>)
 800d0a2:	f00b ff27 	bl	8018ef4 <iprintf>
 800d0a6:	200a      	movs	r0, #10
 800d0a8:	f00b ff3c 	bl	8018f24 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2206      	movs	r2, #6
 800d0b0:	705a      	strb	r2, [r3, #1]
      break;
 800d0b2:	e07a      	b.n	800d1aa <USBH_HandleEnum+0x532>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d029      	beq.n	800d112 <USBH_HandleEnum+0x49a>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d0ca:	23ff      	movs	r3, #255	; 0xff
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 f95f 	bl	800d390 <USBH_Get_StringDesc>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d0d6:	7bbb      	ldrb	r3, [r7, #14]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d10d      	bne.n	800d0f8 <USBH_HandleEnum+0x480>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	4838      	ldr	r0, [pc, #224]	; (800d1c8 <USBH_HandleEnum+0x550>)
 800d0e6:	f00b ff05 	bl	8018ef4 <iprintf>
 800d0ea:	200a      	movs	r0, #10
 800d0ec:	f00b ff1a 	bl	8018f24 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2207      	movs	r2, #7
 800d0f4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d0f6:	e05a      	b.n	800d1ae <USBH_HandleEnum+0x536>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0f8:	7bbb      	ldrb	r3, [r7, #14]
 800d0fa:	2b03      	cmp	r3, #3
 800d0fc:	d157      	bne.n	800d1ae <USBH_HandleEnum+0x536>
          USBH_UsrLog("Product : N/A");
 800d0fe:	4833      	ldr	r0, [pc, #204]	; (800d1cc <USBH_HandleEnum+0x554>)
 800d100:	f00b fef8 	bl	8018ef4 <iprintf>
 800d104:	200a      	movs	r0, #10
 800d106:	f00b ff0d 	bl	8018f24 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2207      	movs	r2, #7
 800d10e:	705a      	strb	r2, [r3, #1]
      break;
 800d110:	e04d      	b.n	800d1ae <USBH_HandleEnum+0x536>
        USBH_UsrLog("Product : N/A");
 800d112:	482e      	ldr	r0, [pc, #184]	; (800d1cc <USBH_HandleEnum+0x554>)
 800d114:	f00b feee 	bl	8018ef4 <iprintf>
 800d118:	200a      	movs	r0, #10
 800d11a:	f00b ff03 	bl	8018f24 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2207      	movs	r2, #7
 800d122:	705a      	strb	r2, [r3, #1]
      break;
 800d124:	e043      	b.n	800d1ae <USBH_HandleEnum+0x536>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d027      	beq.n	800d180 <USBH_HandleEnum+0x508>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d13c:	23ff      	movs	r3, #255	; 0xff
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 f926 	bl	800d390 <USBH_Get_StringDesc>
 800d144:	4603      	mov	r3, r0
 800d146:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d148:	7bbb      	ldrb	r3, [r7, #14]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d10c      	bne.n	800d168 <USBH_HandleEnum+0x4f0>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d154:	4619      	mov	r1, r3
 800d156:	481e      	ldr	r0, [pc, #120]	; (800d1d0 <USBH_HandleEnum+0x558>)
 800d158:	f00b fecc 	bl	8018ef4 <iprintf>
 800d15c:	200a      	movs	r0, #10
 800d15e:	f00b fee1 	bl	8018f24 <putchar>
          Status = USBH_OK;
 800d162:	2300      	movs	r3, #0
 800d164:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d166:	e024      	b.n	800d1b2 <USBH_HandleEnum+0x53a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d168:	7bbb      	ldrb	r3, [r7, #14]
 800d16a:	2b03      	cmp	r3, #3
 800d16c:	d121      	bne.n	800d1b2 <USBH_HandleEnum+0x53a>
          USBH_UsrLog("Serial Number : N/A");
 800d16e:	4819      	ldr	r0, [pc, #100]	; (800d1d4 <USBH_HandleEnum+0x55c>)
 800d170:	f00b fec0 	bl	8018ef4 <iprintf>
 800d174:	200a      	movs	r0, #10
 800d176:	f00b fed5 	bl	8018f24 <putchar>
          Status = USBH_OK;
 800d17a:	2300      	movs	r3, #0
 800d17c:	73fb      	strb	r3, [r7, #15]
      break;
 800d17e:	e018      	b.n	800d1b2 <USBH_HandleEnum+0x53a>
        USBH_UsrLog("Serial Number : N/A");
 800d180:	4814      	ldr	r0, [pc, #80]	; (800d1d4 <USBH_HandleEnum+0x55c>)
 800d182:	f00b feb7 	bl	8018ef4 <iprintf>
 800d186:	200a      	movs	r0, #10
 800d188:	f00b fecc 	bl	8018f24 <putchar>
        Status = USBH_OK;
 800d18c:	2300      	movs	r3, #0
 800d18e:	73fb      	strb	r3, [r7, #15]
      break;
 800d190:	e00f      	b.n	800d1b2 <USBH_HandleEnum+0x53a>

    default:
      break;
 800d192:	bf00      	nop
 800d194:	e00e      	b.n	800d1b4 <USBH_HandleEnum+0x53c>
      break;
 800d196:	bf00      	nop
 800d198:	e00c      	b.n	800d1b4 <USBH_HandleEnum+0x53c>
      break;
 800d19a:	bf00      	nop
 800d19c:	e00a      	b.n	800d1b4 <USBH_HandleEnum+0x53c>
      break;
 800d19e:	bf00      	nop
 800d1a0:	e008      	b.n	800d1b4 <USBH_HandleEnum+0x53c>
      break;
 800d1a2:	bf00      	nop
 800d1a4:	e006      	b.n	800d1b4 <USBH_HandleEnum+0x53c>
      break;
 800d1a6:	bf00      	nop
 800d1a8:	e004      	b.n	800d1b4 <USBH_HandleEnum+0x53c>
      break;
 800d1aa:	bf00      	nop
 800d1ac:	e002      	b.n	800d1b4 <USBH_HandleEnum+0x53c>
      break;
 800d1ae:	bf00      	nop
 800d1b0:	e000      	b.n	800d1b4 <USBH_HandleEnum+0x53c>
      break;
 800d1b2:	bf00      	nop
  }
  return Status;
 800d1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	0801a560 	.word	0x0801a560
 800d1c4:	0801a574 	.word	0x0801a574
 800d1c8:	0801a588 	.word	0x0801a588
 800d1cc:	0801a598 	.word	0x0801a598
 800d1d0:	0801a5a8 	.word	0x0801a5a8
 800d1d4:	0801a5bc 	.word	0x0801a5bc

0800d1d8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	683a      	ldr	r2, [r7, #0]
 800d1e6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d1ea:	bf00      	nop
 800d1ec:	370c      	adds	r7, #12
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr

0800d1f6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b082      	sub	sp, #8
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d204:	1c5a      	adds	r2, r3, #1
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 f804 	bl	800d21a <USBH_HandleSof>
}
 800d212:	bf00      	nop
 800d214:	3708      	adds	r7, #8
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b082      	sub	sp, #8
 800d21e:	af00      	add	r7, sp, #0
 800d220:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	b2db      	uxtb	r3, r3
 800d228:	2b0b      	cmp	r3, #11
 800d22a:	d10a      	bne.n	800d242 <USBH_HandleSof+0x28>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d232:	2b00      	cmp	r3, #0
 800d234:	d005      	beq.n	800d242 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d23c:	699b      	ldr	r3, [r3, #24]
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	4798      	blx	r3
  }
}
 800d242:	bf00      	nop
 800d244:	3708      	adds	r7, #8
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d24a:	b480      	push	{r7}
 800d24c:	b083      	sub	sp, #12
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2201      	movs	r2, #1
 800d256:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800d25a:	bf00      	nop
}
 800d25c:	370c      	adds	r7, #12
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr

0800d266 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d266:	b480      	push	{r7}
 800d268:	b083      	sub	sp, #12
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d276:	bf00      	nop
}
 800d278:	370c      	adds	r7, #12
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr

0800d282 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d282:	b480      	push	{r7}
 800d284:	b083      	sub	sp, #12
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2201      	movs	r2, #1
 800d28e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2200      	movs	r2, #0
 800d296:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2200      	movs	r2, #0
 800d29e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d2a2:	2300      	movs	r3, #0
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	370c      	adds	r7, #12
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr

0800d2b0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f00b fb40 	bl	8018956 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	791b      	ldrb	r3, [r3, #4]
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 fdb1 	bl	800de44 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	795b      	ldrb	r3, [r3, #5]
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 fdab 	bl	800de44 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b086      	sub	sp, #24
 800d2fc:	af02      	add	r7, sp, #8
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	460b      	mov	r3, r1
 800d302:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d30a:	78fb      	ldrb	r3, [r7, #3]
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	9300      	str	r3, [sp, #0]
 800d310:	4613      	mov	r3, r2
 800d312:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d316:	2100      	movs	r1, #0
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 f864 	bl	800d3e6 <USBH_GetDescriptor>
 800d31e:	4603      	mov	r3, r0
 800d320:	73fb      	strb	r3, [r7, #15]
 800d322:	7bfb      	ldrb	r3, [r7, #15]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d10a      	bne.n	800d33e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d334:	78fa      	ldrb	r2, [r7, #3]
 800d336:	b292      	uxth	r2, r2
 800d338:	4619      	mov	r1, r3
 800d33a:	f000 f918 	bl	800d56e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d340:	4618      	mov	r0, r3
 800d342:	3710      	adds	r7, #16
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b086      	sub	sp, #24
 800d34c:	af02      	add	r7, sp, #8
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	460b      	mov	r3, r1
 800d352:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	331c      	adds	r3, #28
 800d358:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d35a:	887b      	ldrh	r3, [r7, #2]
 800d35c:	9300      	str	r3, [sp, #0]
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d364:	2100      	movs	r1, #0
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 f83d 	bl	800d3e6 <USBH_GetDescriptor>
 800d36c:	4603      	mov	r3, r0
 800d36e:	72fb      	strb	r3, [r7, #11]
 800d370:	7afb      	ldrb	r3, [r7, #11]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d107      	bne.n	800d386 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d37c:	887a      	ldrh	r2, [r7, #2]
 800d37e:	68f9      	ldr	r1, [r7, #12]
 800d380:	4618      	mov	r0, r3
 800d382:	f000 f964 	bl	800d64e <USBH_ParseCfgDesc>
  }

  return status;
 800d386:	7afb      	ldrb	r3, [r7, #11]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3710      	adds	r7, #16
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b088      	sub	sp, #32
 800d394:	af02      	add	r7, sp, #8
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	607a      	str	r2, [r7, #4]
 800d39a:	461a      	mov	r2, r3
 800d39c:	460b      	mov	r3, r1
 800d39e:	72fb      	strb	r3, [r7, #11]
 800d3a0:	4613      	mov	r3, r2
 800d3a2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d3a4:	7afb      	ldrb	r3, [r7, #11]
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d3ac:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d3b4:	893b      	ldrh	r3, [r7, #8]
 800d3b6:	9300      	str	r3, [sp, #0]
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	f000 f812 	bl	800d3e6 <USBH_GetDescriptor>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	75fb      	strb	r3, [r7, #23]
 800d3c6:	7dfb      	ldrb	r3, [r7, #23]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d107      	bne.n	800d3dc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d3d2:	893a      	ldrh	r2, [r7, #8]
 800d3d4:	6879      	ldr	r1, [r7, #4]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f000 fa37 	bl	800d84a <USBH_ParseStringDesc>
  }

  return status;
 800d3dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3718      	adds	r7, #24
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b084      	sub	sp, #16
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	60f8      	str	r0, [r7, #12]
 800d3ee:	607b      	str	r3, [r7, #4]
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	72fb      	strb	r3, [r7, #11]
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	789b      	ldrb	r3, [r3, #2]
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d11c      	bne.n	800d43a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d400:	7afb      	ldrb	r3, [r7, #11]
 800d402:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d406:	b2da      	uxtb	r2, r3
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2206      	movs	r2, #6
 800d410:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	893a      	ldrh	r2, [r7, #8]
 800d416:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d418:	893b      	ldrh	r3, [r7, #8]
 800d41a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d41e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d422:	d104      	bne.n	800d42e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f240 4209 	movw	r2, #1033	; 0x409
 800d42a:	829a      	strh	r2, [r3, #20]
 800d42c:	e002      	b.n	800d434 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2200      	movs	r2, #0
 800d432:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	8b3a      	ldrh	r2, [r7, #24]
 800d438:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d43a:	8b3b      	ldrh	r3, [r7, #24]
 800d43c:	461a      	mov	r2, r3
 800d43e:	6879      	ldr	r1, [r7, #4]
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	f000 fa50 	bl	800d8e6 <USBH_CtlReq>
 800d446:	4603      	mov	r3, r0
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3710      	adds	r7, #16
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	460b      	mov	r3, r1
 800d45a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	789b      	ldrb	r3, [r3, #2]
 800d460:	2b01      	cmp	r3, #1
 800d462:	d10f      	bne.n	800d484 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2205      	movs	r2, #5
 800d46e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d470:	78fb      	ldrb	r3, [r7, #3]
 800d472:	b29a      	uxth	r2, r3
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2200      	movs	r2, #0
 800d47c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2200      	movs	r2, #0
 800d482:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d484:	2200      	movs	r2, #0
 800d486:	2100      	movs	r1, #0
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 fa2c 	bl	800d8e6 <USBH_CtlReq>
 800d48e:	4603      	mov	r3, r0
}
 800d490:	4618      	mov	r0, r3
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	789b      	ldrb	r3, [r3, #2]
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d10e      	bne.n	800d4ca <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2209      	movs	r2, #9
 800d4b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	887a      	ldrh	r2, [r7, #2]
 800d4bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 fa09 	bl	800d8e6 <USBH_CtlReq>
 800d4d4:	4603      	mov	r3, r0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3708      	adds	r7, #8
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	b082      	sub	sp, #8
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]
 800d4e6:	460b      	mov	r3, r1
 800d4e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	789b      	ldrb	r3, [r3, #2]
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	d10f      	bne.n	800d512 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2203      	movs	r2, #3
 800d4fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d4fe:	78fb      	ldrb	r3, [r7, #3]
 800d500:	b29a      	uxth	r2, r3
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2200      	movs	r2, #0
 800d50a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d512:	2200      	movs	r2, #0
 800d514:	2100      	movs	r1, #0
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 f9e5 	bl	800d8e6 <USBH_CtlReq>
 800d51c:	4603      	mov	r3, r0
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3708      	adds	r7, #8
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d526:	b580      	push	{r7, lr}
 800d528:	b082      	sub	sp, #8
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
 800d52e:	460b      	mov	r3, r1
 800d530:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	789b      	ldrb	r3, [r3, #2]
 800d536:	2b01      	cmp	r3, #1
 800d538:	d10f      	bne.n	800d55a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2202      	movs	r2, #2
 800d53e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2201      	movs	r2, #1
 800d544:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d54c:	78fb      	ldrb	r3, [r7, #3]
 800d54e:	b29a      	uxth	r2, r3
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2200      	movs	r2, #0
 800d558:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d55a:	2200      	movs	r2, #0
 800d55c:	2100      	movs	r1, #0
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 f9c1 	bl	800d8e6 <USBH_CtlReq>
 800d564:	4603      	mov	r3, r0
}
 800d566:	4618      	mov	r0, r3
 800d568:	3708      	adds	r7, #8
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}

0800d56e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d56e:	b480      	push	{r7}
 800d570:	b085      	sub	sp, #20
 800d572:	af00      	add	r7, sp, #0
 800d574:	60f8      	str	r0, [r7, #12]
 800d576:	60b9      	str	r1, [r7, #8]
 800d578:	4613      	mov	r3, r2
 800d57a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	781a      	ldrb	r2, [r3, #0]
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	785a      	ldrb	r2, [r3, #1]
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	3302      	adds	r3, #2
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	b29a      	uxth	r2, r3
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	3303      	adds	r3, #3
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	021b      	lsls	r3, r3, #8
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	4313      	orrs	r3, r2
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	791a      	ldrb	r2, [r3, #4]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	795a      	ldrb	r2, [r3, #5]
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	799a      	ldrb	r2, [r3, #6]
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	79da      	ldrb	r2, [r3, #7]
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d5c8:	88fb      	ldrh	r3, [r7, #6]
 800d5ca:	2b08      	cmp	r3, #8
 800d5cc:	d939      	bls.n	800d642 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	3308      	adds	r3, #8
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	b29a      	uxth	r2, r3
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	3309      	adds	r3, #9
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	021b      	lsls	r3, r3, #8
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	b29a      	uxth	r2, r3
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	330a      	adds	r3, #10
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	b29a      	uxth	r2, r3
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	330b      	adds	r3, #11
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	b29b      	uxth	r3, r3
 800d5fa:	021b      	lsls	r3, r3, #8
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	4313      	orrs	r3, r2
 800d600:	b29a      	uxth	r2, r3
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	330c      	adds	r3, #12
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	b29a      	uxth	r2, r3
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	330d      	adds	r3, #13
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	b29b      	uxth	r3, r3
 800d616:	021b      	lsls	r3, r3, #8
 800d618:	b29b      	uxth	r3, r3
 800d61a:	4313      	orrs	r3, r2
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	7b9a      	ldrb	r2, [r3, #14]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	7bda      	ldrb	r2, [r3, #15]
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	7c1a      	ldrb	r2, [r3, #16]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	7c5a      	ldrb	r2, [r3, #17]
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	745a      	strb	r2, [r3, #17]
  }
}
 800d642:	bf00      	nop
 800d644:	3714      	adds	r7, #20
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr

0800d64e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b08a      	sub	sp, #40	; 0x28
 800d652:	af00      	add	r7, sp, #0
 800d654:	60f8      	str	r0, [r7, #12]
 800d656:	60b9      	str	r1, [r7, #8]
 800d658:	4613      	mov	r3, r2
 800d65a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d660:	2300      	movs	r3, #0
 800d662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d666:	2300      	movs	r3, #0
 800d668:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	781a      	ldrb	r2, [r3, #0]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	785a      	ldrb	r2, [r3, #1]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	3302      	adds	r3, #2
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	b29a      	uxth	r2, r3
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	3303      	adds	r3, #3
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	b29b      	uxth	r3, r3
 800d690:	021b      	lsls	r3, r3, #8
 800d692:	b29b      	uxth	r3, r3
 800d694:	4313      	orrs	r3, r2
 800d696:	b29a      	uxth	r2, r3
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	791a      	ldrb	r2, [r3, #4]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	795a      	ldrb	r2, [r3, #5]
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	799a      	ldrb	r2, [r3, #6]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	79da      	ldrb	r2, [r3, #7]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	7a1a      	ldrb	r2, [r3, #8]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d6c4:	88fb      	ldrh	r3, [r7, #6]
 800d6c6:	2b09      	cmp	r3, #9
 800d6c8:	d95f      	bls.n	800d78a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d6ca:	2309      	movs	r3, #9
 800d6cc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d6d2:	e051      	b.n	800d778 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d6d4:	f107 0316 	add.w	r3, r7, #22
 800d6d8:	4619      	mov	r1, r3
 800d6da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6dc:	f000 f8e8 	bl	800d8b0 <USBH_GetNextDesc>
 800d6e0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e4:	785b      	ldrb	r3, [r3, #1]
 800d6e6:	2b04      	cmp	r3, #4
 800d6e8:	d146      	bne.n	800d778 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d6ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d6ee:	221a      	movs	r2, #26
 800d6f0:	fb02 f303 	mul.w	r3, r2, r3
 800d6f4:	3308      	adds	r3, #8
 800d6f6:	68fa      	ldr	r2, [r7, #12]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	3302      	adds	r3, #2
 800d6fc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d6fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d700:	69f8      	ldr	r0, [r7, #28]
 800d702:	f000 f846 	bl	800d792 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d706:	2300      	movs	r3, #0
 800d708:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d70c:	2300      	movs	r3, #0
 800d70e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d710:	e022      	b.n	800d758 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d712:	f107 0316 	add.w	r3, r7, #22
 800d716:	4619      	mov	r1, r3
 800d718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d71a:	f000 f8c9 	bl	800d8b0 <USBH_GetNextDesc>
 800d71e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d722:	785b      	ldrb	r3, [r3, #1]
 800d724:	2b05      	cmp	r3, #5
 800d726:	d117      	bne.n	800d758 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d72c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d730:	3201      	adds	r2, #1
 800d732:	00d2      	lsls	r2, r2, #3
 800d734:	211a      	movs	r1, #26
 800d736:	fb01 f303 	mul.w	r3, r1, r3
 800d73a:	4413      	add	r3, r2
 800d73c:	3308      	adds	r3, #8
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	4413      	add	r3, r2
 800d742:	3304      	adds	r3, #4
 800d744:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d748:	69b8      	ldr	r0, [r7, #24]
 800d74a:	f000 f851 	bl	800d7f0 <USBH_ParseEPDesc>
            ep_ix++;
 800d74e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d752:	3301      	adds	r3, #1
 800d754:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	791b      	ldrb	r3, [r3, #4]
 800d75c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d760:	429a      	cmp	r2, r3
 800d762:	d204      	bcs.n	800d76e <USBH_ParseCfgDesc+0x120>
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	885a      	ldrh	r2, [r3, #2]
 800d768:	8afb      	ldrh	r3, [r7, #22]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d8d1      	bhi.n	800d712 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d76e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d772:	3301      	adds	r3, #1
 800d774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d778:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d804      	bhi.n	800d78a <USBH_ParseCfgDesc+0x13c>
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	885a      	ldrh	r2, [r3, #2]
 800d784:	8afb      	ldrh	r3, [r7, #22]
 800d786:	429a      	cmp	r2, r3
 800d788:	d8a4      	bhi.n	800d6d4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d78a:	bf00      	nop
 800d78c:	3728      	adds	r7, #40	; 0x28
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}

0800d792 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d792:	b480      	push	{r7}
 800d794:	b083      	sub	sp, #12
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
 800d79a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	781a      	ldrb	r2, [r3, #0]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	785a      	ldrb	r2, [r3, #1]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	789a      	ldrb	r2, [r3, #2]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	78da      	ldrb	r2, [r3, #3]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	791a      	ldrb	r2, [r3, #4]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	795a      	ldrb	r2, [r3, #5]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	799a      	ldrb	r2, [r3, #6]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	79da      	ldrb	r2, [r3, #7]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	7a1a      	ldrb	r2, [r3, #8]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	721a      	strb	r2, [r3, #8]
}
 800d7e4:	bf00      	nop
 800d7e6:	370c      	adds	r7, #12
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr

0800d7f0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	781a      	ldrb	r2, [r3, #0]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	785a      	ldrb	r2, [r3, #1]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	789a      	ldrb	r2, [r3, #2]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	78da      	ldrb	r2, [r3, #3]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	3304      	adds	r3, #4
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	b29a      	uxth	r2, r3
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	3305      	adds	r3, #5
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	b29b      	uxth	r3, r3
 800d82a:	021b      	lsls	r3, r3, #8
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	4313      	orrs	r3, r2
 800d830:	b29a      	uxth	r2, r3
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	799a      	ldrb	r2, [r3, #6]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	719a      	strb	r2, [r3, #6]
}
 800d83e:	bf00      	nop
 800d840:	370c      	adds	r7, #12
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr

0800d84a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d84a:	b480      	push	{r7}
 800d84c:	b087      	sub	sp, #28
 800d84e:	af00      	add	r7, sp, #0
 800d850:	60f8      	str	r0, [r7, #12]
 800d852:	60b9      	str	r1, [r7, #8]
 800d854:	4613      	mov	r3, r2
 800d856:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	3301      	adds	r3, #1
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	2b03      	cmp	r3, #3
 800d860:	d120      	bne.n	800d8a4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	1e9a      	subs	r2, r3, #2
 800d868:	88fb      	ldrh	r3, [r7, #6]
 800d86a:	4293      	cmp	r3, r2
 800d86c:	bf28      	it	cs
 800d86e:	4613      	movcs	r3, r2
 800d870:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	3302      	adds	r3, #2
 800d876:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d878:	2300      	movs	r3, #0
 800d87a:	82fb      	strh	r3, [r7, #22]
 800d87c:	e00b      	b.n	800d896 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d87e:	8afb      	ldrh	r3, [r7, #22]
 800d880:	68fa      	ldr	r2, [r7, #12]
 800d882:	4413      	add	r3, r2
 800d884:	781a      	ldrb	r2, [r3, #0]
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	3301      	adds	r3, #1
 800d88e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d890:	8afb      	ldrh	r3, [r7, #22]
 800d892:	3302      	adds	r3, #2
 800d894:	82fb      	strh	r3, [r7, #22]
 800d896:	8afa      	ldrh	r2, [r7, #22]
 800d898:	8abb      	ldrh	r3, [r7, #20]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d3ef      	bcc.n	800d87e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	701a      	strb	r2, [r3, #0]
  }
}
 800d8a4:	bf00      	nop
 800d8a6:	371c      	adds	r7, #28
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr

0800d8b0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b085      	sub	sp, #20
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	881a      	ldrh	r2, [r3, #0]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	4413      	add	r3, r2
 800d8c6:	b29a      	uxth	r2, r3
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3714      	adds	r7, #20
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e4:	4770      	bx	lr

0800d8e6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d8e6:	b580      	push	{r7, lr}
 800d8e8:	b086      	sub	sp, #24
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	60f8      	str	r0, [r7, #12]
 800d8ee:	60b9      	str	r1, [r7, #8]
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	789b      	ldrb	r3, [r3, #2]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d002      	beq.n	800d906 <USBH_CtlReq+0x20>
 800d900:	2b02      	cmp	r3, #2
 800d902:	d00f      	beq.n	800d924 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d904:	e027      	b.n	800d956 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	88fa      	ldrh	r2, [r7, #6]
 800d910:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2201      	movs	r2, #1
 800d916:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2202      	movs	r2, #2
 800d91c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d91e:	2301      	movs	r3, #1
 800d920:	75fb      	strb	r3, [r7, #23]
      break;
 800d922:	e018      	b.n	800d956 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d924:	68f8      	ldr	r0, [r7, #12]
 800d926:	f000 f81b 	bl	800d960 <USBH_HandleControl>
 800d92a:	4603      	mov	r3, r0
 800d92c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d92e:	7dfb      	ldrb	r3, [r7, #23]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d002      	beq.n	800d93a <USBH_CtlReq+0x54>
 800d934:	7dfb      	ldrb	r3, [r7, #23]
 800d936:	2b03      	cmp	r3, #3
 800d938:	d106      	bne.n	800d948 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2201      	movs	r2, #1
 800d93e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2200      	movs	r2, #0
 800d944:	761a      	strb	r2, [r3, #24]
      break;
 800d946:	e005      	b.n	800d954 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d948:	7dfb      	ldrb	r3, [r7, #23]
 800d94a:	2b02      	cmp	r3, #2
 800d94c:	d102      	bne.n	800d954 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	2201      	movs	r2, #1
 800d952:	709a      	strb	r2, [r3, #2]
      break;
 800d954:	bf00      	nop
  }
  return status;
 800d956:	7dfb      	ldrb	r3, [r7, #23]
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3718      	adds	r7, #24
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b086      	sub	sp, #24
 800d964:	af02      	add	r7, sp, #8
 800d966:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d968:	2301      	movs	r3, #1
 800d96a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d96c:	2300      	movs	r3, #0
 800d96e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	7e1b      	ldrb	r3, [r3, #24]
 800d974:	3b01      	subs	r3, #1
 800d976:	2b0a      	cmp	r3, #10
 800d978:	f200 815f 	bhi.w	800dc3a <USBH_HandleControl+0x2da>
 800d97c:	a201      	add	r2, pc, #4	; (adr r2, 800d984 <USBH_HandleControl+0x24>)
 800d97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d982:	bf00      	nop
 800d984:	0800d9b1 	.word	0x0800d9b1
 800d988:	0800d9cb 	.word	0x0800d9cb
 800d98c:	0800da35 	.word	0x0800da35
 800d990:	0800da5b 	.word	0x0800da5b
 800d994:	0800da93 	.word	0x0800da93
 800d998:	0800dabd 	.word	0x0800dabd
 800d99c:	0800db0f 	.word	0x0800db0f
 800d9a0:	0800db31 	.word	0x0800db31
 800d9a4:	0800db6d 	.word	0x0800db6d
 800d9a8:	0800db93 	.word	0x0800db93
 800d9ac:	0800dbd1 	.word	0x0800dbd1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f103 0110 	add.w	r1, r3, #16
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	795b      	ldrb	r3, [r3, #5]
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f000 f951 	bl	800dc64 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2202      	movs	r2, #2
 800d9c6:	761a      	strb	r2, [r3, #24]
      break;
 800d9c8:	e142      	b.n	800dc50 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	795b      	ldrb	r3, [r3, #5]
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f00b f8af 	bl	8018b34 <USBH_LL_GetURBState>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d9da:	7bbb      	ldrb	r3, [r7, #14]
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d11e      	bne.n	800da1e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	7c1b      	ldrb	r3, [r3, #16]
 800d9e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d9e8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	8adb      	ldrh	r3, [r3, #22]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00a      	beq.n	800da08 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d9f2:	7b7b      	ldrb	r3, [r7, #13]
 800d9f4:	2b80      	cmp	r3, #128	; 0x80
 800d9f6:	d103      	bne.n	800da00 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2203      	movs	r2, #3
 800d9fc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d9fe:	e11e      	b.n	800dc3e <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2205      	movs	r2, #5
 800da04:	761a      	strb	r2, [r3, #24]
      break;
 800da06:	e11a      	b.n	800dc3e <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800da08:	7b7b      	ldrb	r3, [r7, #13]
 800da0a:	2b80      	cmp	r3, #128	; 0x80
 800da0c:	d103      	bne.n	800da16 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2209      	movs	r2, #9
 800da12:	761a      	strb	r2, [r3, #24]
      break;
 800da14:	e113      	b.n	800dc3e <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2207      	movs	r2, #7
 800da1a:	761a      	strb	r2, [r3, #24]
      break;
 800da1c:	e10f      	b.n	800dc3e <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800da1e:	7bbb      	ldrb	r3, [r7, #14]
 800da20:	2b04      	cmp	r3, #4
 800da22:	d003      	beq.n	800da2c <USBH_HandleControl+0xcc>
 800da24:	7bbb      	ldrb	r3, [r7, #14]
 800da26:	2b02      	cmp	r3, #2
 800da28:	f040 8109 	bne.w	800dc3e <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	220b      	movs	r2, #11
 800da30:	761a      	strb	r2, [r3, #24]
      break;
 800da32:	e104      	b.n	800dc3e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800da3a:	b29a      	uxth	r2, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6899      	ldr	r1, [r3, #8]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	899a      	ldrh	r2, [r3, #12]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	791b      	ldrb	r3, [r3, #4]
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f948 	bl	800dce2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2204      	movs	r2, #4
 800da56:	761a      	strb	r2, [r3, #24]
      break;
 800da58:	e0fa      	b.n	800dc50 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	791b      	ldrb	r3, [r3, #4]
 800da5e:	4619      	mov	r1, r3
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f00b f867 	bl	8018b34 <USBH_LL_GetURBState>
 800da66:	4603      	mov	r3, r0
 800da68:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800da6a:	7bbb      	ldrb	r3, [r7, #14]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d102      	bne.n	800da76 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2209      	movs	r2, #9
 800da74:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800da76:	7bbb      	ldrb	r3, [r7, #14]
 800da78:	2b05      	cmp	r3, #5
 800da7a:	d102      	bne.n	800da82 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800da7c:	2303      	movs	r3, #3
 800da7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800da80:	e0df      	b.n	800dc42 <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800da82:	7bbb      	ldrb	r3, [r7, #14]
 800da84:	2b04      	cmp	r3, #4
 800da86:	f040 80dc 	bne.w	800dc42 <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	220b      	movs	r2, #11
 800da8e:	761a      	strb	r2, [r3, #24]
      break;
 800da90:	e0d7      	b.n	800dc42 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6899      	ldr	r1, [r3, #8]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	899a      	ldrh	r2, [r3, #12]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	795b      	ldrb	r3, [r3, #5]
 800da9e:	2001      	movs	r0, #1
 800daa0:	9000      	str	r0, [sp, #0]
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f000 f8f8 	bl	800dc98 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800daae:	b29a      	uxth	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2206      	movs	r2, #6
 800dab8:	761a      	strb	r2, [r3, #24]
      break;
 800daba:	e0c9      	b.n	800dc50 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	795b      	ldrb	r3, [r3, #5]
 800dac0:	4619      	mov	r1, r3
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f00b f836 	bl	8018b34 <USBH_LL_GetURBState>
 800dac8:	4603      	mov	r3, r0
 800daca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dacc:	7bbb      	ldrb	r3, [r7, #14]
 800dace:	2b01      	cmp	r3, #1
 800dad0:	d103      	bne.n	800dada <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2207      	movs	r2, #7
 800dad6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dad8:	e0b5      	b.n	800dc46 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800dada:	7bbb      	ldrb	r3, [r7, #14]
 800dadc:	2b05      	cmp	r3, #5
 800dade:	d105      	bne.n	800daec <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	220c      	movs	r2, #12
 800dae4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800dae6:	2303      	movs	r3, #3
 800dae8:	73fb      	strb	r3, [r7, #15]
      break;
 800daea:	e0ac      	b.n	800dc46 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800daec:	7bbb      	ldrb	r3, [r7, #14]
 800daee:	2b02      	cmp	r3, #2
 800daf0:	d103      	bne.n	800dafa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2205      	movs	r2, #5
 800daf6:	761a      	strb	r2, [r3, #24]
      break;
 800daf8:	e0a5      	b.n	800dc46 <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800dafa:	7bbb      	ldrb	r3, [r7, #14]
 800dafc:	2b04      	cmp	r3, #4
 800dafe:	f040 80a2 	bne.w	800dc46 <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	220b      	movs	r2, #11
 800db06:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800db08:	2302      	movs	r3, #2
 800db0a:	73fb      	strb	r3, [r7, #15]
      break;
 800db0c:	e09b      	b.n	800dc46 <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	791b      	ldrb	r3, [r3, #4]
 800db12:	2200      	movs	r2, #0
 800db14:	2100      	movs	r1, #0
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f000 f8e3 	bl	800dce2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800db22:	b29a      	uxth	r2, r3
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2208      	movs	r2, #8
 800db2c:	761a      	strb	r2, [r3, #24]

      break;
 800db2e:	e08f      	b.n	800dc50 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	791b      	ldrb	r3, [r3, #4]
 800db34:	4619      	mov	r1, r3
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f00a fffc 	bl	8018b34 <USBH_LL_GetURBState>
 800db3c:	4603      	mov	r3, r0
 800db3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800db40:	7bbb      	ldrb	r3, [r7, #14]
 800db42:	2b01      	cmp	r3, #1
 800db44:	d105      	bne.n	800db52 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	220d      	movs	r2, #13
 800db4a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800db4c:	2300      	movs	r3, #0
 800db4e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800db50:	e07b      	b.n	800dc4a <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800db52:	7bbb      	ldrb	r3, [r7, #14]
 800db54:	2b04      	cmp	r3, #4
 800db56:	d103      	bne.n	800db60 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	220b      	movs	r2, #11
 800db5c:	761a      	strb	r2, [r3, #24]
      break;
 800db5e:	e074      	b.n	800dc4a <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800db60:	7bbb      	ldrb	r3, [r7, #14]
 800db62:	2b05      	cmp	r3, #5
 800db64:	d171      	bne.n	800dc4a <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800db66:	2303      	movs	r3, #3
 800db68:	73fb      	strb	r3, [r7, #15]
      break;
 800db6a:	e06e      	b.n	800dc4a <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	795b      	ldrb	r3, [r3, #5]
 800db70:	2201      	movs	r2, #1
 800db72:	9200      	str	r2, [sp, #0]
 800db74:	2200      	movs	r2, #0
 800db76:	2100      	movs	r1, #0
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 f88d 	bl	800dc98 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800db84:	b29a      	uxth	r2, r3
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	220a      	movs	r2, #10
 800db8e:	761a      	strb	r2, [r3, #24]
      break;
 800db90:	e05e      	b.n	800dc50 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	795b      	ldrb	r3, [r3, #5]
 800db96:	4619      	mov	r1, r3
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f00a ffcb 	bl	8018b34 <USBH_LL_GetURBState>
 800db9e:	4603      	mov	r3, r0
 800dba0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800dba2:	7bbb      	ldrb	r3, [r7, #14]
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d105      	bne.n	800dbb4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	220d      	movs	r2, #13
 800dbb0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dbb2:	e04c      	b.n	800dc4e <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dbb4:	7bbb      	ldrb	r3, [r7, #14]
 800dbb6:	2b02      	cmp	r3, #2
 800dbb8:	d103      	bne.n	800dbc2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2209      	movs	r2, #9
 800dbbe:	761a      	strb	r2, [r3, #24]
      break;
 800dbc0:	e045      	b.n	800dc4e <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800dbc2:	7bbb      	ldrb	r3, [r7, #14]
 800dbc4:	2b04      	cmp	r3, #4
 800dbc6:	d142      	bne.n	800dc4e <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	220b      	movs	r2, #11
 800dbcc:	761a      	strb	r2, [r3, #24]
      break;
 800dbce:	e03e      	b.n	800dc4e <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	7e5b      	ldrb	r3, [r3, #25]
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	b2da      	uxtb	r2, r3
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	765a      	strb	r2, [r3, #25]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	7e5b      	ldrb	r3, [r3, #25]
 800dbe0:	2b02      	cmp	r3, #2
 800dbe2:	d806      	bhi.n	800dbf2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2201      	movs	r2, #1
 800dbee:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800dbf0:	e02e      	b.n	800dc50 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dbf8:	2106      	movs	r1, #6
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2200      	movs	r2, #0
 800dc02:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800dc04:	4815      	ldr	r0, [pc, #84]	; (800dc5c <USBH_HandleControl+0x2fc>)
 800dc06:	f00b f975 	bl	8018ef4 <iprintf>
 800dc0a:	4815      	ldr	r0, [pc, #84]	; (800dc60 <USBH_HandleControl+0x300>)
 800dc0c:	f00b f972 	bl	8018ef4 <iprintf>
 800dc10:	200a      	movs	r0, #10
 800dc12:	f00b f987 	bl	8018f24 <putchar>
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	795b      	ldrb	r3, [r3, #5]
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 f911 	bl	800de44 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	791b      	ldrb	r3, [r3, #4]
 800dc26:	4619      	mov	r1, r3
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f000 f90b 	bl	800de44 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2200      	movs	r2, #0
 800dc32:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800dc34:	2302      	movs	r3, #2
 800dc36:	73fb      	strb	r3, [r7, #15]
      break;
 800dc38:	e00a      	b.n	800dc50 <USBH_HandleControl+0x2f0>

    default:
      break;
 800dc3a:	bf00      	nop
 800dc3c:	e008      	b.n	800dc50 <USBH_HandleControl+0x2f0>
      break;
 800dc3e:	bf00      	nop
 800dc40:	e006      	b.n	800dc50 <USBH_HandleControl+0x2f0>
      break;
 800dc42:	bf00      	nop
 800dc44:	e004      	b.n	800dc50 <USBH_HandleControl+0x2f0>
      break;
 800dc46:	bf00      	nop
 800dc48:	e002      	b.n	800dc50 <USBH_HandleControl+0x2f0>
      break;
 800dc4a:	bf00      	nop
 800dc4c:	e000      	b.n	800dc50 <USBH_HandleControl+0x2f0>
      break;
 800dc4e:	bf00      	nop
  }

  return status;
 800dc50:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	0801a5d0 	.word	0x0801a5d0
 800dc60:	0801a5d8 	.word	0x0801a5d8

0800dc64 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b088      	sub	sp, #32
 800dc68:	af04      	add	r7, sp, #16
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	4613      	mov	r3, r2
 800dc70:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dc72:	79f9      	ldrb	r1, [r7, #7]
 800dc74:	2300      	movs	r3, #0
 800dc76:	9303      	str	r3, [sp, #12]
 800dc78:	2308      	movs	r3, #8
 800dc7a:	9302      	str	r3, [sp, #8]
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	9301      	str	r3, [sp, #4]
 800dc80:	2300      	movs	r3, #0
 800dc82:	9300      	str	r3, [sp, #0]
 800dc84:	2300      	movs	r3, #0
 800dc86:	2200      	movs	r2, #0
 800dc88:	68f8      	ldr	r0, [r7, #12]
 800dc8a:	f00a ff22 	bl	8018ad2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800dc8e:	2300      	movs	r3, #0
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3710      	adds	r7, #16
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b088      	sub	sp, #32
 800dc9c:	af04      	add	r7, sp, #16
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	4611      	mov	r1, r2
 800dca4:	461a      	mov	r2, r3
 800dca6:	460b      	mov	r3, r1
 800dca8:	80fb      	strh	r3, [r7, #6]
 800dcaa:	4613      	mov	r3, r2
 800dcac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d001      	beq.n	800dcbc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dcbc:	7979      	ldrb	r1, [r7, #5]
 800dcbe:	7e3b      	ldrb	r3, [r7, #24]
 800dcc0:	9303      	str	r3, [sp, #12]
 800dcc2:	88fb      	ldrh	r3, [r7, #6]
 800dcc4:	9302      	str	r3, [sp, #8]
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	9301      	str	r3, [sp, #4]
 800dcca:	2301      	movs	r3, #1
 800dccc:	9300      	str	r3, [sp, #0]
 800dcce:	2300      	movs	r3, #0
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	68f8      	ldr	r0, [r7, #12]
 800dcd4:	f00a fefd 	bl	8018ad2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800dcd8:	2300      	movs	r3, #0
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3710      	adds	r7, #16
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}

0800dce2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800dce2:	b580      	push	{r7, lr}
 800dce4:	b088      	sub	sp, #32
 800dce6:	af04      	add	r7, sp, #16
 800dce8:	60f8      	str	r0, [r7, #12]
 800dcea:	60b9      	str	r1, [r7, #8]
 800dcec:	4611      	mov	r1, r2
 800dcee:	461a      	mov	r2, r3
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	80fb      	strh	r3, [r7, #6]
 800dcf4:	4613      	mov	r3, r2
 800dcf6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dcf8:	7979      	ldrb	r1, [r7, #5]
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	9303      	str	r3, [sp, #12]
 800dcfe:	88fb      	ldrh	r3, [r7, #6]
 800dd00:	9302      	str	r3, [sp, #8]
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	9301      	str	r3, [sp, #4]
 800dd06:	2301      	movs	r3, #1
 800dd08:	9300      	str	r3, [sp, #0]
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	68f8      	ldr	r0, [r7, #12]
 800dd10:	f00a fedf 	bl	8018ad2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dd14:	2300      	movs	r3, #0

}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3710      	adds	r7, #16
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}

0800dd1e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b088      	sub	sp, #32
 800dd22:	af04      	add	r7, sp, #16
 800dd24:	60f8      	str	r0, [r7, #12]
 800dd26:	60b9      	str	r1, [r7, #8]
 800dd28:	4611      	mov	r1, r2
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	80fb      	strh	r3, [r7, #6]
 800dd30:	4613      	mov	r3, r2
 800dd32:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d001      	beq.n	800dd42 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dd42:	7979      	ldrb	r1, [r7, #5]
 800dd44:	7e3b      	ldrb	r3, [r7, #24]
 800dd46:	9303      	str	r3, [sp, #12]
 800dd48:	88fb      	ldrh	r3, [r7, #6]
 800dd4a:	9302      	str	r3, [sp, #8]
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	9301      	str	r3, [sp, #4]
 800dd50:	2301      	movs	r3, #1
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	2302      	movs	r3, #2
 800dd56:	2200      	movs	r2, #0
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	f00a feba 	bl	8018ad2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800dd5e:	2300      	movs	r3, #0
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3710      	adds	r7, #16
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b088      	sub	sp, #32
 800dd6c:	af04      	add	r7, sp, #16
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	4611      	mov	r1, r2
 800dd74:	461a      	mov	r2, r3
 800dd76:	460b      	mov	r3, r1
 800dd78:	80fb      	strh	r3, [r7, #6]
 800dd7a:	4613      	mov	r3, r2
 800dd7c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dd7e:	7979      	ldrb	r1, [r7, #5]
 800dd80:	2300      	movs	r3, #0
 800dd82:	9303      	str	r3, [sp, #12]
 800dd84:	88fb      	ldrh	r3, [r7, #6]
 800dd86:	9302      	str	r3, [sp, #8]
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	9301      	str	r3, [sp, #4]
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	2302      	movs	r3, #2
 800dd92:	2201      	movs	r2, #1
 800dd94:	68f8      	ldr	r0, [r7, #12]
 800dd96:	f00a fe9c 	bl	8018ad2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dd9a:	2300      	movs	r3, #0
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3710      	adds	r7, #16
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b086      	sub	sp, #24
 800dda8:	af04      	add	r7, sp, #16
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	4608      	mov	r0, r1
 800ddae:	4611      	mov	r1, r2
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	70fb      	strb	r3, [r7, #3]
 800ddb6:	460b      	mov	r3, r1
 800ddb8:	70bb      	strb	r3, [r7, #2]
 800ddba:	4613      	mov	r3, r2
 800ddbc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ddbe:	7878      	ldrb	r0, [r7, #1]
 800ddc0:	78ba      	ldrb	r2, [r7, #2]
 800ddc2:	78f9      	ldrb	r1, [r7, #3]
 800ddc4:	8b3b      	ldrh	r3, [r7, #24]
 800ddc6:	9302      	str	r3, [sp, #8]
 800ddc8:	7d3b      	ldrb	r3, [r7, #20]
 800ddca:	9301      	str	r3, [sp, #4]
 800ddcc:	7c3b      	ldrb	r3, [r7, #16]
 800ddce:	9300      	str	r3, [sp, #0]
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f00a fe2f 	bl	8018a36 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ddd8:	2300      	movs	r3, #0
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3708      	adds	r7, #8
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b082      	sub	sp, #8
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
 800ddea:	460b      	mov	r3, r1
 800ddec:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ddee:	78fb      	ldrb	r3, [r7, #3]
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f00a fe4e 	bl	8018a94 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ddf8:	2300      	movs	r3, #0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3708      	adds	r7, #8
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}

0800de02 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800de02:	b580      	push	{r7, lr}
 800de04:	b084      	sub	sp, #16
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
 800de0a:	460b      	mov	r3, r1
 800de0c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 f836 	bl	800de80 <USBH_GetFreePipe>
 800de14:	4603      	mov	r3, r0
 800de16:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800de18:	89fb      	ldrh	r3, [r7, #14]
 800de1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de1e:	4293      	cmp	r3, r2
 800de20:	d00a      	beq.n	800de38 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800de22:	78fa      	ldrb	r2, [r7, #3]
 800de24:	89fb      	ldrh	r3, [r7, #14]
 800de26:	f003 030f 	and.w	r3, r3, #15
 800de2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800de2e:	6879      	ldr	r1, [r7, #4]
 800de30:	33e0      	adds	r3, #224	; 0xe0
 800de32:	009b      	lsls	r3, r3, #2
 800de34:	440b      	add	r3, r1
 800de36:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800de38:	89fb      	ldrh	r3, [r7, #14]
 800de3a:	b2db      	uxtb	r3, r3
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3710      	adds	r7, #16
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800de44:	b480      	push	{r7}
 800de46:	b083      	sub	sp, #12
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	460b      	mov	r3, r1
 800de4e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800de50:	78fb      	ldrb	r3, [r7, #3]
 800de52:	2b0a      	cmp	r3, #10
 800de54:	d80d      	bhi.n	800de72 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800de56:	78fb      	ldrb	r3, [r7, #3]
 800de58:	687a      	ldr	r2, [r7, #4]
 800de5a:	33e0      	adds	r3, #224	; 0xe0
 800de5c:	009b      	lsls	r3, r3, #2
 800de5e:	4413      	add	r3, r2
 800de60:	685a      	ldr	r2, [r3, #4]
 800de62:	78fb      	ldrb	r3, [r7, #3]
 800de64:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800de68:	6879      	ldr	r1, [r7, #4]
 800de6a:	33e0      	adds	r3, #224	; 0xe0
 800de6c:	009b      	lsls	r3, r3, #2
 800de6e:	440b      	add	r3, r1
 800de70:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800de72:	2300      	movs	r3, #0
}
 800de74:	4618      	mov	r0, r3
 800de76:	370c      	adds	r7, #12
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr

0800de80 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800de80:	b480      	push	{r7}
 800de82:	b085      	sub	sp, #20
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800de88:	2300      	movs	r3, #0
 800de8a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800de8c:	2300      	movs	r3, #0
 800de8e:	73fb      	strb	r3, [r7, #15]
 800de90:	e00f      	b.n	800deb2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800de92:	7bfb      	ldrb	r3, [r7, #15]
 800de94:	687a      	ldr	r2, [r7, #4]
 800de96:	33e0      	adds	r3, #224	; 0xe0
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	4413      	add	r3, r2
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d102      	bne.n	800deac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800dea6:	7bfb      	ldrb	r3, [r7, #15]
 800dea8:	b29b      	uxth	r3, r3
 800deaa:	e007      	b.n	800debc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800deac:	7bfb      	ldrb	r3, [r7, #15]
 800deae:	3301      	adds	r3, #1
 800deb0:	73fb      	strb	r3, [r7, #15]
 800deb2:	7bfb      	ldrb	r3, [r7, #15]
 800deb4:	2b0a      	cmp	r3, #10
 800deb6:	d9ec      	bls.n	800de92 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800deb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800debc:	4618      	mov	r0, r3
 800debe:	3714      	adds	r7, #20
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dec8:	b480      	push	{r7}
 800deca:	b087      	sub	sp, #28
 800decc:	af00      	add	r7, sp, #0
 800dece:	60f8      	str	r0, [r7, #12]
 800ded0:	60b9      	str	r1, [r7, #8]
 800ded2:	4613      	mov	r3, r2
 800ded4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ded6:	2301      	movs	r3, #1
 800ded8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800deda:	2300      	movs	r3, #0
 800dedc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dede:	4b1f      	ldr	r3, [pc, #124]	; (800df5c <FATFS_LinkDriverEx+0x94>)
 800dee0:	7a5b      	ldrb	r3, [r3, #9]
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d131      	bne.n	800df4c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dee8:	4b1c      	ldr	r3, [pc, #112]	; (800df5c <FATFS_LinkDriverEx+0x94>)
 800deea:	7a5b      	ldrb	r3, [r3, #9]
 800deec:	b2db      	uxtb	r3, r3
 800deee:	461a      	mov	r2, r3
 800def0:	4b1a      	ldr	r3, [pc, #104]	; (800df5c <FATFS_LinkDriverEx+0x94>)
 800def2:	2100      	movs	r1, #0
 800def4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800def6:	4b19      	ldr	r3, [pc, #100]	; (800df5c <FATFS_LinkDriverEx+0x94>)
 800def8:	7a5b      	ldrb	r3, [r3, #9]
 800defa:	b2db      	uxtb	r3, r3
 800defc:	4a17      	ldr	r2, [pc, #92]	; (800df5c <FATFS_LinkDriverEx+0x94>)
 800defe:	009b      	lsls	r3, r3, #2
 800df00:	4413      	add	r3, r2
 800df02:	68fa      	ldr	r2, [r7, #12]
 800df04:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800df06:	4b15      	ldr	r3, [pc, #84]	; (800df5c <FATFS_LinkDriverEx+0x94>)
 800df08:	7a5b      	ldrb	r3, [r3, #9]
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	461a      	mov	r2, r3
 800df0e:	4b13      	ldr	r3, [pc, #76]	; (800df5c <FATFS_LinkDriverEx+0x94>)
 800df10:	4413      	add	r3, r2
 800df12:	79fa      	ldrb	r2, [r7, #7]
 800df14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800df16:	4b11      	ldr	r3, [pc, #68]	; (800df5c <FATFS_LinkDriverEx+0x94>)
 800df18:	7a5b      	ldrb	r3, [r3, #9]
 800df1a:	b2db      	uxtb	r3, r3
 800df1c:	1c5a      	adds	r2, r3, #1
 800df1e:	b2d1      	uxtb	r1, r2
 800df20:	4a0e      	ldr	r2, [pc, #56]	; (800df5c <FATFS_LinkDriverEx+0x94>)
 800df22:	7251      	strb	r1, [r2, #9]
 800df24:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800df26:	7dbb      	ldrb	r3, [r7, #22]
 800df28:	3330      	adds	r3, #48	; 0x30
 800df2a:	b2da      	uxtb	r2, r3
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	3301      	adds	r3, #1
 800df34:	223a      	movs	r2, #58	; 0x3a
 800df36:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	3302      	adds	r3, #2
 800df3c:	222f      	movs	r2, #47	; 0x2f
 800df3e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	3303      	adds	r3, #3
 800df44:	2200      	movs	r2, #0
 800df46:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800df48:	2300      	movs	r3, #0
 800df4a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800df4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800df4e:	4618      	mov	r0, r3
 800df50:	371c      	adds	r7, #28
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop
 800df5c:	20000668 	.word	0x20000668

0800df60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800df6a:	2200      	movs	r2, #0
 800df6c:	6839      	ldr	r1, [r7, #0]
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f7ff ffaa 	bl	800dec8 <FATFS_LinkDriverEx>
 800df74:	4603      	mov	r3, r0
}
 800df76:	4618      	mov	r0, r3
 800df78:	3708      	adds	r7, #8
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}

0800df7e <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800df7e:	b480      	push	{r7}
 800df80:	b083      	sub	sp, #12
 800df82:	af00      	add	r7, sp, #0
 800df84:	4603      	mov	r3, r0
 800df86:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800df88:	88fb      	ldrh	r3, [r7, #6]
 800df8a:	021b      	lsls	r3, r3, #8
 800df8c:	b21a      	sxth	r2, r3
 800df8e:	88fb      	ldrh	r3, [r7, #6]
 800df90:	0a1b      	lsrs	r3, r3, #8
 800df92:	b29b      	uxth	r3, r3
 800df94:	b21b      	sxth	r3, r3
 800df96:	4313      	orrs	r3, r2
 800df98:	b21b      	sxth	r3, r3
 800df9a:	b29b      	uxth	r3, r3
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	370c      	adds	r7, #12
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	061a      	lsls	r2, r3, #24
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	021b      	lsls	r3, r3, #8
 800dfb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dfbc:	431a      	orrs	r2, r3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	0a1b      	lsrs	r3, r3, #8
 800dfc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dfc6:	431a      	orrs	r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	0e1b      	lsrs	r3, r3, #24
 800dfcc:	4313      	orrs	r3, r2
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	370c      	adds	r7, #12
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd8:	4770      	bx	lr

0800dfda <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800dfda:	b580      	push	{r7, lr}
 800dfdc:	b082      	sub	sp, #8
 800dfde:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800dfe4:	f000 f8d8 	bl	800e198 <mem_init>
  memp_init();
 800dfe8:	f000 fbea 	bl	800e7c0 <memp_init>
  pbuf_init();
  netif_init();
 800dfec:	f000 fca2 	bl	800e934 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800dff0:	f007 feba 	bl	8015d68 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800dff4:	f001 fda6 	bl	800fb44 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800dff8:	f007 fe2c 	bl	8015c54 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800dffc:	bf00      	nop
 800dffe:	3708      	adds	r7, #8
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
 800e00a:	4603      	mov	r3, r0
 800e00c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800e00e:	4b05      	ldr	r3, [pc, #20]	; (800e024 <ptr_to_mem+0x20>)
 800e010:	681a      	ldr	r2, [r3, #0]
 800e012:	88fb      	ldrh	r3, [r7, #6]
 800e014:	4413      	add	r3, r2
}
 800e016:	4618      	mov	r0, r3
 800e018:	370c      	adds	r7, #12
 800e01a:	46bd      	mov	sp, r7
 800e01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e020:	4770      	bx	lr
 800e022:	bf00      	nop
 800e024:	20000674 	.word	0x20000674

0800e028 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800e028:	b480      	push	{r7}
 800e02a:	b083      	sub	sp, #12
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800e030:	4b05      	ldr	r3, [pc, #20]	; (800e048 <mem_to_ptr+0x20>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	1ad3      	subs	r3, r2, r3
 800e038:	b29b      	uxth	r3, r3
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	370c      	adds	r7, #12
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	20000674 	.word	0x20000674

0800e04c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800e04c:	b590      	push	{r4, r7, lr}
 800e04e:	b085      	sub	sp, #20
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800e054:	4b47      	ldr	r3, [pc, #284]	; (800e174 <plug_holes+0x128>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d206      	bcs.n	800e06c <plug_holes+0x20>
 800e05e:	4b46      	ldr	r3, [pc, #280]	; (800e178 <plug_holes+0x12c>)
 800e060:	f240 12df 	movw	r2, #479	; 0x1df
 800e064:	4945      	ldr	r1, [pc, #276]	; (800e17c <plug_holes+0x130>)
 800e066:	4846      	ldr	r0, [pc, #280]	; (800e180 <plug_holes+0x134>)
 800e068:	f00a ff44 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e06c:	4b45      	ldr	r3, [pc, #276]	; (800e184 <plug_holes+0x138>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	429a      	cmp	r2, r3
 800e074:	d306      	bcc.n	800e084 <plug_holes+0x38>
 800e076:	4b40      	ldr	r3, [pc, #256]	; (800e178 <plug_holes+0x12c>)
 800e078:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e07c:	4942      	ldr	r1, [pc, #264]	; (800e188 <plug_holes+0x13c>)
 800e07e:	4840      	ldr	r0, [pc, #256]	; (800e180 <plug_holes+0x134>)
 800e080:	f00a ff38 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	791b      	ldrb	r3, [r3, #4]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d006      	beq.n	800e09a <plug_holes+0x4e>
 800e08c:	4b3a      	ldr	r3, [pc, #232]	; (800e178 <plug_holes+0x12c>)
 800e08e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e092:	493e      	ldr	r1, [pc, #248]	; (800e18c <plug_holes+0x140>)
 800e094:	483a      	ldr	r0, [pc, #232]	; (800e180 <plug_holes+0x134>)
 800e096:	f00a ff2d 	bl	8018ef4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	881b      	ldrh	r3, [r3, #0]
 800e09e:	f646 5260 	movw	r2, #28000	; 0x6d60
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d906      	bls.n	800e0b4 <plug_holes+0x68>
 800e0a6:	4b34      	ldr	r3, [pc, #208]	; (800e178 <plug_holes+0x12c>)
 800e0a8:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800e0ac:	4938      	ldr	r1, [pc, #224]	; (800e190 <plug_holes+0x144>)
 800e0ae:	4834      	ldr	r0, [pc, #208]	; (800e180 <plug_holes+0x134>)
 800e0b0:	f00a ff20 	bl	8018ef4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	881b      	ldrh	r3, [r3, #0]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7ff ffa3 	bl	800e004 <ptr_to_mem>
 800e0be:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d025      	beq.n	800e114 <plug_holes+0xc8>
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	791b      	ldrb	r3, [r3, #4]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d121      	bne.n	800e114 <plug_holes+0xc8>
 800e0d0:	4b2c      	ldr	r3, [pc, #176]	; (800e184 <plug_holes+0x138>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	68fa      	ldr	r2, [r7, #12]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d01c      	beq.n	800e114 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e0da:	4b2e      	ldr	r3, [pc, #184]	; (800e194 <plug_holes+0x148>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	68fa      	ldr	r2, [r7, #12]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d102      	bne.n	800e0ea <plug_holes+0x9e>
      lfree = mem;
 800e0e4:	4a2b      	ldr	r2, [pc, #172]	; (800e194 <plug_holes+0x148>)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	881a      	ldrh	r2, [r3, #0]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	881b      	ldrh	r3, [r3, #0]
 800e0f6:	f646 5260 	movw	r2, #28000	; 0x6d60
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	d00a      	beq.n	800e114 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	881b      	ldrh	r3, [r3, #0]
 800e102:	4618      	mov	r0, r3
 800e104:	f7ff ff7e 	bl	800e004 <ptr_to_mem>
 800e108:	4604      	mov	r4, r0
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f7ff ff8c 	bl	800e028 <mem_to_ptr>
 800e110:	4603      	mov	r3, r0
 800e112:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	885b      	ldrh	r3, [r3, #2]
 800e118:	4618      	mov	r0, r3
 800e11a:	f7ff ff73 	bl	800e004 <ptr_to_mem>
 800e11e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e120:	68ba      	ldr	r2, [r7, #8]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	429a      	cmp	r2, r3
 800e126:	d020      	beq.n	800e16a <plug_holes+0x11e>
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	791b      	ldrb	r3, [r3, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d11c      	bne.n	800e16a <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e130:	4b18      	ldr	r3, [pc, #96]	; (800e194 <plug_holes+0x148>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	429a      	cmp	r2, r3
 800e138:	d102      	bne.n	800e140 <plug_holes+0xf4>
      lfree = pmem;
 800e13a:	4a16      	ldr	r2, [pc, #88]	; (800e194 <plug_holes+0x148>)
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	881a      	ldrh	r2, [r3, #0]
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	881b      	ldrh	r3, [r3, #0]
 800e14c:	f646 5260 	movw	r2, #28000	; 0x6d60
 800e150:	4293      	cmp	r3, r2
 800e152:	d00a      	beq.n	800e16a <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	881b      	ldrh	r3, [r3, #0]
 800e158:	4618      	mov	r0, r3
 800e15a:	f7ff ff53 	bl	800e004 <ptr_to_mem>
 800e15e:	4604      	mov	r4, r0
 800e160:	68b8      	ldr	r0, [r7, #8]
 800e162:	f7ff ff61 	bl	800e028 <mem_to_ptr>
 800e166:	4603      	mov	r3, r0
 800e168:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800e16a:	bf00      	nop
 800e16c:	3714      	adds	r7, #20
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd90      	pop	{r4, r7, pc}
 800e172:	bf00      	nop
 800e174:	20000674 	.word	0x20000674
 800e178:	0801a600 	.word	0x0801a600
 800e17c:	0801a630 	.word	0x0801a630
 800e180:	0801a648 	.word	0x0801a648
 800e184:	20000678 	.word	0x20000678
 800e188:	0801a670 	.word	0x0801a670
 800e18c:	0801a68c 	.word	0x0801a68c
 800e190:	0801a6a8 	.word	0x0801a6a8
 800e194:	2000067c 	.word	0x2000067c

0800e198 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e19e:	4b18      	ldr	r3, [pc, #96]	; (800e200 <mem_init+0x68>)
 800e1a0:	3303      	adds	r3, #3
 800e1a2:	f023 0303 	bic.w	r3, r3, #3
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	4b16      	ldr	r3, [pc, #88]	; (800e204 <mem_init+0x6c>)
 800e1aa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e1ac:	4b15      	ldr	r3, [pc, #84]	; (800e204 <mem_init+0x6c>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f646 5260 	movw	r2, #28000	; 0x6d60
 800e1b8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800e1c6:	f646 5060 	movw	r0, #28000	; 0x6d60
 800e1ca:	f7ff ff1b 	bl	800e004 <ptr_to_mem>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	4a0d      	ldr	r2, [pc, #52]	; (800e208 <mem_init+0x70>)
 800e1d2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e1d4:	4b0c      	ldr	r3, [pc, #48]	; (800e208 <mem_init+0x70>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2201      	movs	r2, #1
 800e1da:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e1dc:	4b0a      	ldr	r3, [pc, #40]	; (800e208 <mem_init+0x70>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f646 5260 	movw	r2, #28000	; 0x6d60
 800e1e4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e1e6:	4b08      	ldr	r3, [pc, #32]	; (800e208 <mem_init+0x70>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f646 5260 	movw	r2, #28000	; 0x6d60
 800e1ee:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e1f0:	4b04      	ldr	r3, [pc, #16]	; (800e204 <mem_init+0x6c>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a05      	ldr	r2, [pc, #20]	; (800e20c <mem_init+0x74>)
 800e1f6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800e1f8:	bf00      	nop
 800e1fa:	3708      	adds	r7, #8
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	20007b50 	.word	0x20007b50
 800e204:	20000674 	.word	0x20000674
 800e208:	20000678 	.word	0x20000678
 800e20c:	2000067c 	.word	0x2000067c

0800e210 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b086      	sub	sp, #24
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f7ff ff05 	bl	800e028 <mem_to_ptr>
 800e21e:	4603      	mov	r3, r0
 800e220:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	881b      	ldrh	r3, [r3, #0]
 800e226:	4618      	mov	r0, r3
 800e228:	f7ff feec 	bl	800e004 <ptr_to_mem>
 800e22c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	885b      	ldrh	r3, [r3, #2]
 800e232:	4618      	mov	r0, r3
 800e234:	f7ff fee6 	bl	800e004 <ptr_to_mem>
 800e238:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	881b      	ldrh	r3, [r3, #0]
 800e23e:	f646 5260 	movw	r2, #28000	; 0x6d60
 800e242:	4293      	cmp	r3, r2
 800e244:	d819      	bhi.n	800e27a <mem_link_valid+0x6a>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	885b      	ldrh	r3, [r3, #2]
 800e24a:	f646 5260 	movw	r2, #28000	; 0x6d60
 800e24e:	4293      	cmp	r3, r2
 800e250:	d813      	bhi.n	800e27a <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e256:	8afa      	ldrh	r2, [r7, #22]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d004      	beq.n	800e266 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	881b      	ldrh	r3, [r3, #0]
 800e260:	8afa      	ldrh	r2, [r7, #22]
 800e262:	429a      	cmp	r2, r3
 800e264:	d109      	bne.n	800e27a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e266:	4b08      	ldr	r3, [pc, #32]	; (800e288 <mem_link_valid+0x78>)
 800e268:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e26a:	693a      	ldr	r2, [r7, #16]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d006      	beq.n	800e27e <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	885b      	ldrh	r3, [r3, #2]
 800e274:	8afa      	ldrh	r2, [r7, #22]
 800e276:	429a      	cmp	r2, r3
 800e278:	d001      	beq.n	800e27e <mem_link_valid+0x6e>
    return 0;
 800e27a:	2300      	movs	r3, #0
 800e27c:	e000      	b.n	800e280 <mem_link_valid+0x70>
  }
  return 1;
 800e27e:	2301      	movs	r3, #1
}
 800e280:	4618      	mov	r0, r3
 800e282:	3718      	adds	r7, #24
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}
 800e288:	20000678 	.word	0x20000678

0800e28c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d04c      	beq.n	800e334 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f003 0303 	and.w	r3, r3, #3
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d007      	beq.n	800e2b4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e2a4:	4b25      	ldr	r3, [pc, #148]	; (800e33c <mem_free+0xb0>)
 800e2a6:	f240 2273 	movw	r2, #627	; 0x273
 800e2aa:	4925      	ldr	r1, [pc, #148]	; (800e340 <mem_free+0xb4>)
 800e2ac:	4825      	ldr	r0, [pc, #148]	; (800e344 <mem_free+0xb8>)
 800e2ae:	f00a fe21 	bl	8018ef4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800e2b2:	e040      	b.n	800e336 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	3b08      	subs	r3, #8
 800e2b8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e2ba:	4b23      	ldr	r3, [pc, #140]	; (800e348 <mem_free+0xbc>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	68fa      	ldr	r2, [r7, #12]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d306      	bcc.n	800e2d2 <mem_free+0x46>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f103 020c 	add.w	r2, r3, #12
 800e2ca:	4b20      	ldr	r3, [pc, #128]	; (800e34c <mem_free+0xc0>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d907      	bls.n	800e2e2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e2d2:	4b1a      	ldr	r3, [pc, #104]	; (800e33c <mem_free+0xb0>)
 800e2d4:	f240 227f 	movw	r2, #639	; 0x27f
 800e2d8:	491d      	ldr	r1, [pc, #116]	; (800e350 <mem_free+0xc4>)
 800e2da:	481a      	ldr	r0, [pc, #104]	; (800e344 <mem_free+0xb8>)
 800e2dc:	f00a fe0a 	bl	8018ef4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800e2e0:	e029      	b.n	800e336 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	791b      	ldrb	r3, [r3, #4]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d107      	bne.n	800e2fa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e2ea:	4b14      	ldr	r3, [pc, #80]	; (800e33c <mem_free+0xb0>)
 800e2ec:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800e2f0:	4918      	ldr	r1, [pc, #96]	; (800e354 <mem_free+0xc8>)
 800e2f2:	4814      	ldr	r0, [pc, #80]	; (800e344 <mem_free+0xb8>)
 800e2f4:	f00a fdfe 	bl	8018ef4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800e2f8:	e01d      	b.n	800e336 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800e2fa:	68f8      	ldr	r0, [r7, #12]
 800e2fc:	f7ff ff88 	bl	800e210 <mem_link_valid>
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d107      	bne.n	800e316 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e306:	4b0d      	ldr	r3, [pc, #52]	; (800e33c <mem_free+0xb0>)
 800e308:	f240 2295 	movw	r2, #661	; 0x295
 800e30c:	4912      	ldr	r1, [pc, #72]	; (800e358 <mem_free+0xcc>)
 800e30e:	480d      	ldr	r0, [pc, #52]	; (800e344 <mem_free+0xb8>)
 800e310:	f00a fdf0 	bl	8018ef4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800e314:	e00f      	b.n	800e336 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2200      	movs	r2, #0
 800e31a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e31c:	4b0f      	ldr	r3, [pc, #60]	; (800e35c <mem_free+0xd0>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	68fa      	ldr	r2, [r7, #12]
 800e322:	429a      	cmp	r2, r3
 800e324:	d202      	bcs.n	800e32c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e326:	4a0d      	ldr	r2, [pc, #52]	; (800e35c <mem_free+0xd0>)
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e32c:	68f8      	ldr	r0, [r7, #12]
 800e32e:	f7ff fe8d 	bl	800e04c <plug_holes>
 800e332:	e000      	b.n	800e336 <mem_free+0xaa>
    return;
 800e334:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800e336:	3710      	adds	r7, #16
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}
 800e33c:	0801a600 	.word	0x0801a600
 800e340:	0801a6d4 	.word	0x0801a6d4
 800e344:	0801a648 	.word	0x0801a648
 800e348:	20000674 	.word	0x20000674
 800e34c:	20000678 	.word	0x20000678
 800e350:	0801a6f8 	.word	0x0801a6f8
 800e354:	0801a714 	.word	0x0801a714
 800e358:	0801a73c 	.word	0x0801a73c
 800e35c:	2000067c 	.word	0x2000067c

0800e360 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b088      	sub	sp, #32
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	460b      	mov	r3, r1
 800e36a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e36c:	887b      	ldrh	r3, [r7, #2]
 800e36e:	3303      	adds	r3, #3
 800e370:	b29b      	uxth	r3, r3
 800e372:	f023 0303 	bic.w	r3, r3, #3
 800e376:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800e378:	8bfb      	ldrh	r3, [r7, #30]
 800e37a:	2b0b      	cmp	r3, #11
 800e37c:	d801      	bhi.n	800e382 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e37e:	230c      	movs	r3, #12
 800e380:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e382:	8bfb      	ldrh	r3, [r7, #30]
 800e384:	f646 5260 	movw	r2, #28000	; 0x6d60
 800e388:	4293      	cmp	r3, r2
 800e38a:	d803      	bhi.n	800e394 <mem_trim+0x34>
 800e38c:	8bfa      	ldrh	r2, [r7, #30]
 800e38e:	887b      	ldrh	r3, [r7, #2]
 800e390:	429a      	cmp	r2, r3
 800e392:	d201      	bcs.n	800e398 <mem_trim+0x38>
    return NULL;
 800e394:	2300      	movs	r3, #0
 800e396:	e0d0      	b.n	800e53a <mem_trim+0x1da>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e398:	4b6a      	ldr	r3, [pc, #424]	; (800e544 <mem_trim+0x1e4>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	687a      	ldr	r2, [r7, #4]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d304      	bcc.n	800e3ac <mem_trim+0x4c>
 800e3a2:	4b69      	ldr	r3, [pc, #420]	; (800e548 <mem_trim+0x1e8>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d306      	bcc.n	800e3ba <mem_trim+0x5a>
 800e3ac:	4b67      	ldr	r3, [pc, #412]	; (800e54c <mem_trim+0x1ec>)
 800e3ae:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e3b2:	4967      	ldr	r1, [pc, #412]	; (800e550 <mem_trim+0x1f0>)
 800e3b4:	4867      	ldr	r0, [pc, #412]	; (800e554 <mem_trim+0x1f4>)
 800e3b6:	f00a fd9d 	bl	8018ef4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e3ba:	4b62      	ldr	r3, [pc, #392]	; (800e544 <mem_trim+0x1e4>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d304      	bcc.n	800e3ce <mem_trim+0x6e>
 800e3c4:	4b60      	ldr	r3, [pc, #384]	; (800e548 <mem_trim+0x1e8>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	687a      	ldr	r2, [r7, #4]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d301      	bcc.n	800e3d2 <mem_trim+0x72>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	e0b3      	b.n	800e53a <mem_trim+0x1da>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	3b08      	subs	r3, #8
 800e3d6:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e3d8:	69b8      	ldr	r0, [r7, #24]
 800e3da:	f7ff fe25 	bl	800e028 <mem_to_ptr>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e3e2:	69bb      	ldr	r3, [r7, #24]
 800e3e4:	881a      	ldrh	r2, [r3, #0]
 800e3e6:	8afb      	ldrh	r3, [r7, #22]
 800e3e8:	1ad3      	subs	r3, r2, r3
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	3b08      	subs	r3, #8
 800e3ee:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e3f0:	8bfa      	ldrh	r2, [r7, #30]
 800e3f2:	8abb      	ldrh	r3, [r7, #20]
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d906      	bls.n	800e406 <mem_trim+0xa6>
 800e3f8:	4b54      	ldr	r3, [pc, #336]	; (800e54c <mem_trim+0x1ec>)
 800e3fa:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800e3fe:	4956      	ldr	r1, [pc, #344]	; (800e558 <mem_trim+0x1f8>)
 800e400:	4854      	ldr	r0, [pc, #336]	; (800e554 <mem_trim+0x1f4>)
 800e402:	f00a fd77 	bl	8018ef4 <iprintf>
  if (newsize > size) {
 800e406:	8bfa      	ldrh	r2, [r7, #30]
 800e408:	8abb      	ldrh	r3, [r7, #20]
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d901      	bls.n	800e412 <mem_trim+0xb2>
    /* not supported */
    return NULL;
 800e40e:	2300      	movs	r3, #0
 800e410:	e093      	b.n	800e53a <mem_trim+0x1da>
  }
  if (newsize == size) {
 800e412:	8bfa      	ldrh	r2, [r7, #30]
 800e414:	8abb      	ldrh	r3, [r7, #20]
 800e416:	429a      	cmp	r2, r3
 800e418:	d101      	bne.n	800e41e <mem_trim+0xbe>
    /* No change in size, simply return */
    return rmem;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	e08d      	b.n	800e53a <mem_trim+0x1da>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800e41e:	69bb      	ldr	r3, [r7, #24]
 800e420:	881b      	ldrh	r3, [r3, #0]
 800e422:	4618      	mov	r0, r3
 800e424:	f7ff fdee 	bl	800e004 <ptr_to_mem>
 800e428:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	791b      	ldrb	r3, [r3, #4]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d141      	bne.n	800e4b6 <mem_trim+0x156>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e432:	69bb      	ldr	r3, [r7, #24]
 800e434:	881b      	ldrh	r3, [r3, #0]
 800e436:	f646 5260 	movw	r2, #28000	; 0x6d60
 800e43a:	4293      	cmp	r3, r2
 800e43c:	d106      	bne.n	800e44c <mem_trim+0xec>
 800e43e:	4b43      	ldr	r3, [pc, #268]	; (800e54c <mem_trim+0x1ec>)
 800e440:	f240 22f5 	movw	r2, #757	; 0x2f5
 800e444:	4945      	ldr	r1, [pc, #276]	; (800e55c <mem_trim+0x1fc>)
 800e446:	4843      	ldr	r0, [pc, #268]	; (800e554 <mem_trim+0x1f4>)
 800e448:	f00a fd54 	bl	8018ef4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	881b      	ldrh	r3, [r3, #0]
 800e450:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e452:	8afa      	ldrh	r2, [r7, #22]
 800e454:	8bfb      	ldrh	r3, [r7, #30]
 800e456:	4413      	add	r3, r2
 800e458:	b29b      	uxth	r3, r3
 800e45a:	3308      	adds	r3, #8
 800e45c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e45e:	4b40      	ldr	r3, [pc, #256]	; (800e560 <mem_trim+0x200>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	693a      	ldr	r2, [r7, #16]
 800e464:	429a      	cmp	r2, r3
 800e466:	d106      	bne.n	800e476 <mem_trim+0x116>
      lfree = ptr_to_mem(ptr2);
 800e468:	89fb      	ldrh	r3, [r7, #14]
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7ff fdca 	bl	800e004 <ptr_to_mem>
 800e470:	4603      	mov	r3, r0
 800e472:	4a3b      	ldr	r2, [pc, #236]	; (800e560 <mem_trim+0x200>)
 800e474:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e476:	89fb      	ldrh	r3, [r7, #14]
 800e478:	4618      	mov	r0, r3
 800e47a:	f7ff fdc3 	bl	800e004 <ptr_to_mem>
 800e47e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	2200      	movs	r2, #0
 800e484:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	89ba      	ldrh	r2, [r7, #12]
 800e48a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	8afa      	ldrh	r2, [r7, #22]
 800e490:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e492:	69bb      	ldr	r3, [r7, #24]
 800e494:	89fa      	ldrh	r2, [r7, #14]
 800e496:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	881b      	ldrh	r3, [r3, #0]
 800e49c:	f646 5260 	movw	r2, #28000	; 0x6d60
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d049      	beq.n	800e538 <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	881b      	ldrh	r3, [r3, #0]
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f7ff fdab 	bl	800e004 <ptr_to_mem>
 800e4ae:	4602      	mov	r2, r0
 800e4b0:	89fb      	ldrh	r3, [r7, #14]
 800e4b2:	8053      	strh	r3, [r2, #2]
 800e4b4:	e040      	b.n	800e538 <mem_trim+0x1d8>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e4b6:	8bfb      	ldrh	r3, [r7, #30]
 800e4b8:	f103 0214 	add.w	r2, r3, #20
 800e4bc:	8abb      	ldrh	r3, [r7, #20]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d83a      	bhi.n	800e538 <mem_trim+0x1d8>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e4c2:	8afa      	ldrh	r2, [r7, #22]
 800e4c4:	8bfb      	ldrh	r3, [r7, #30]
 800e4c6:	4413      	add	r3, r2
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	3308      	adds	r3, #8
 800e4cc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e4ce:	69bb      	ldr	r3, [r7, #24]
 800e4d0:	881b      	ldrh	r3, [r3, #0]
 800e4d2:	f646 5260 	movw	r2, #28000	; 0x6d60
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d106      	bne.n	800e4e8 <mem_trim+0x188>
 800e4da:	4b1c      	ldr	r3, [pc, #112]	; (800e54c <mem_trim+0x1ec>)
 800e4dc:	f240 3216 	movw	r2, #790	; 0x316
 800e4e0:	491e      	ldr	r1, [pc, #120]	; (800e55c <mem_trim+0x1fc>)
 800e4e2:	481c      	ldr	r0, [pc, #112]	; (800e554 <mem_trim+0x1f4>)
 800e4e4:	f00a fd06 	bl	8018ef4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e4e8:	89fb      	ldrh	r3, [r7, #14]
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7ff fd8a 	bl	800e004 <ptr_to_mem>
 800e4f0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e4f2:	4b1b      	ldr	r3, [pc, #108]	; (800e560 <mem_trim+0x200>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	693a      	ldr	r2, [r7, #16]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d202      	bcs.n	800e502 <mem_trim+0x1a2>
      lfree = mem2;
 800e4fc:	4a18      	ldr	r2, [pc, #96]	; (800e560 <mem_trim+0x200>)
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	2200      	movs	r2, #0
 800e506:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	881a      	ldrh	r2, [r3, #0]
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	8afa      	ldrh	r2, [r7, #22]
 800e514:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e516:	69bb      	ldr	r3, [r7, #24]
 800e518:	89fa      	ldrh	r2, [r7, #14]
 800e51a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	881b      	ldrh	r3, [r3, #0]
 800e520:	f646 5260 	movw	r2, #28000	; 0x6d60
 800e524:	4293      	cmp	r3, r2
 800e526:	d007      	beq.n	800e538 <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	881b      	ldrh	r3, [r3, #0]
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7ff fd69 	bl	800e004 <ptr_to_mem>
 800e532:	4602      	mov	r2, r0
 800e534:	89fb      	ldrh	r3, [r7, #14]
 800e536:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800e538:	687b      	ldr	r3, [r7, #4]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3720      	adds	r7, #32
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	20000674 	.word	0x20000674
 800e548:	20000678 	.word	0x20000678
 800e54c:	0801a600 	.word	0x0801a600
 800e550:	0801a770 	.word	0x0801a770
 800e554:	0801a648 	.word	0x0801a648
 800e558:	0801a788 	.word	0x0801a788
 800e55c:	0801a7a8 	.word	0x0801a7a8
 800e560:	2000067c 	.word	0x2000067c

0800e564 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b088      	sub	sp, #32
 800e568:	af00      	add	r7, sp, #0
 800e56a:	4603      	mov	r3, r0
 800e56c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e56e:	88fb      	ldrh	r3, [r7, #6]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d101      	bne.n	800e578 <mem_malloc+0x14>
    return NULL;
 800e574:	2300      	movs	r3, #0
 800e576:	e0dd      	b.n	800e734 <mem_malloc+0x1d0>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e578:	88fb      	ldrh	r3, [r7, #6]
 800e57a:	3303      	adds	r3, #3
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	f023 0303 	bic.w	r3, r3, #3
 800e582:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e584:	8bbb      	ldrh	r3, [r7, #28]
 800e586:	2b0b      	cmp	r3, #11
 800e588:	d801      	bhi.n	800e58e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e58a:	230c      	movs	r3, #12
 800e58c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e58e:	8bbb      	ldrh	r3, [r7, #28]
 800e590:	f646 5260 	movw	r2, #28000	; 0x6d60
 800e594:	4293      	cmp	r3, r2
 800e596:	d803      	bhi.n	800e5a0 <mem_malloc+0x3c>
 800e598:	8bba      	ldrh	r2, [r7, #28]
 800e59a:	88fb      	ldrh	r3, [r7, #6]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d201      	bcs.n	800e5a4 <mem_malloc+0x40>
    return NULL;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	e0c7      	b.n	800e734 <mem_malloc+0x1d0>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e5a4:	4b65      	ldr	r3, [pc, #404]	; (800e73c <mem_malloc+0x1d8>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7ff fd3d 	bl	800e028 <mem_to_ptr>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	83fb      	strh	r3, [r7, #30]
 800e5b2:	e0b6      	b.n	800e722 <mem_malloc+0x1be>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e5b4:	8bfb      	ldrh	r3, [r7, #30]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7ff fd24 	bl	800e004 <ptr_to_mem>
 800e5bc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	791b      	ldrb	r3, [r3, #4]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f040 80a6 	bne.w	800e714 <mem_malloc+0x1b0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	881b      	ldrh	r3, [r3, #0]
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	8bfb      	ldrh	r3, [r7, #30]
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	f1a3 0208 	sub.w	r2, r3, #8
 800e5d6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	f0c0 809b 	bcc.w	800e714 <mem_malloc+0x1b0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	881b      	ldrh	r3, [r3, #0]
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	8bfb      	ldrh	r3, [r7, #30]
 800e5e6:	1ad3      	subs	r3, r2, r3
 800e5e8:	f1a3 0208 	sub.w	r2, r3, #8
 800e5ec:	8bbb      	ldrh	r3, [r7, #28]
 800e5ee:	3314      	adds	r3, #20
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d335      	bcc.n	800e660 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e5f4:	8bfa      	ldrh	r2, [r7, #30]
 800e5f6:	8bbb      	ldrh	r3, [r7, #28]
 800e5f8:	4413      	add	r3, r2
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	3308      	adds	r3, #8
 800e5fe:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e600:	8a7b      	ldrh	r3, [r7, #18]
 800e602:	f646 5260 	movw	r2, #28000	; 0x6d60
 800e606:	4293      	cmp	r3, r2
 800e608:	d106      	bne.n	800e618 <mem_malloc+0xb4>
 800e60a:	4b4d      	ldr	r3, [pc, #308]	; (800e740 <mem_malloc+0x1dc>)
 800e60c:	f240 3287 	movw	r2, #903	; 0x387
 800e610:	494c      	ldr	r1, [pc, #304]	; (800e744 <mem_malloc+0x1e0>)
 800e612:	484d      	ldr	r0, [pc, #308]	; (800e748 <mem_malloc+0x1e4>)
 800e614:	f00a fc6e 	bl	8018ef4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e618:	8a7b      	ldrh	r3, [r7, #18]
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7ff fcf2 	bl	800e004 <ptr_to_mem>
 800e620:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2200      	movs	r2, #0
 800e626:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	881a      	ldrh	r2, [r3, #0]
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	8bfa      	ldrh	r2, [r7, #30]
 800e634:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	8a7a      	ldrh	r2, [r7, #18]
 800e63a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	2201      	movs	r2, #1
 800e640:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	881b      	ldrh	r3, [r3, #0]
 800e646:	f646 5260 	movw	r2, #28000	; 0x6d60
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d00b      	beq.n	800e666 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	881b      	ldrh	r3, [r3, #0]
 800e652:	4618      	mov	r0, r3
 800e654:	f7ff fcd6 	bl	800e004 <ptr_to_mem>
 800e658:	4602      	mov	r2, r0
 800e65a:	8a7b      	ldrh	r3, [r7, #18]
 800e65c:	8053      	strh	r3, [r2, #2]
 800e65e:	e002      	b.n	800e666 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	2201      	movs	r2, #1
 800e664:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e666:	4b35      	ldr	r3, [pc, #212]	; (800e73c <mem_malloc+0x1d8>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	697a      	ldr	r2, [r7, #20]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d127      	bne.n	800e6c0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e670:	4b32      	ldr	r3, [pc, #200]	; (800e73c <mem_malloc+0x1d8>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e676:	e005      	b.n	800e684 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	881b      	ldrh	r3, [r3, #0]
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7ff fcc1 	bl	800e004 <ptr_to_mem>
 800e682:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e684:	69bb      	ldr	r3, [r7, #24]
 800e686:	791b      	ldrb	r3, [r3, #4]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d004      	beq.n	800e696 <mem_malloc+0x132>
 800e68c:	4b2f      	ldr	r3, [pc, #188]	; (800e74c <mem_malloc+0x1e8>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	69ba      	ldr	r2, [r7, #24]
 800e692:	429a      	cmp	r2, r3
 800e694:	d1f0      	bne.n	800e678 <mem_malloc+0x114>
          }
          lfree = cur;
 800e696:	4a29      	ldr	r2, [pc, #164]	; (800e73c <mem_malloc+0x1d8>)
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e69c:	4b27      	ldr	r3, [pc, #156]	; (800e73c <mem_malloc+0x1d8>)
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	4b2a      	ldr	r3, [pc, #168]	; (800e74c <mem_malloc+0x1e8>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d00b      	beq.n	800e6c0 <mem_malloc+0x15c>
 800e6a8:	4b24      	ldr	r3, [pc, #144]	; (800e73c <mem_malloc+0x1d8>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	791b      	ldrb	r3, [r3, #4]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d006      	beq.n	800e6c0 <mem_malloc+0x15c>
 800e6b2:	4b23      	ldr	r3, [pc, #140]	; (800e740 <mem_malloc+0x1dc>)
 800e6b4:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e6b8:	4925      	ldr	r1, [pc, #148]	; (800e750 <mem_malloc+0x1ec>)
 800e6ba:	4823      	ldr	r0, [pc, #140]	; (800e748 <mem_malloc+0x1e4>)
 800e6bc:	f00a fc1a 	bl	8018ef4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e6c0:	8bba      	ldrh	r2, [r7, #28]
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	3308      	adds	r3, #8
 800e6c8:	4a20      	ldr	r2, [pc, #128]	; (800e74c <mem_malloc+0x1e8>)
 800e6ca:	6812      	ldr	r2, [r2, #0]
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d906      	bls.n	800e6de <mem_malloc+0x17a>
 800e6d0:	4b1b      	ldr	r3, [pc, #108]	; (800e740 <mem_malloc+0x1dc>)
 800e6d2:	f240 32b9 	movw	r2, #953	; 0x3b9
 800e6d6:	491f      	ldr	r1, [pc, #124]	; (800e754 <mem_malloc+0x1f0>)
 800e6d8:	481b      	ldr	r0, [pc, #108]	; (800e748 <mem_malloc+0x1e4>)
 800e6da:	f00a fc0b 	bl	8018ef4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	f003 0303 	and.w	r3, r3, #3
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d006      	beq.n	800e6f6 <mem_malloc+0x192>
 800e6e8:	4b15      	ldr	r3, [pc, #84]	; (800e740 <mem_malloc+0x1dc>)
 800e6ea:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e6ee:	491a      	ldr	r1, [pc, #104]	; (800e758 <mem_malloc+0x1f4>)
 800e6f0:	4815      	ldr	r0, [pc, #84]	; (800e748 <mem_malloc+0x1e4>)
 800e6f2:	f00a fbff 	bl	8018ef4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	f003 0303 	and.w	r3, r3, #3
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d006      	beq.n	800e70e <mem_malloc+0x1aa>
 800e700:	4b0f      	ldr	r3, [pc, #60]	; (800e740 <mem_malloc+0x1dc>)
 800e702:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e706:	4915      	ldr	r1, [pc, #84]	; (800e75c <mem_malloc+0x1f8>)
 800e708:	480f      	ldr	r0, [pc, #60]	; (800e748 <mem_malloc+0x1e4>)
 800e70a:	f00a fbf3 	bl	8018ef4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	3308      	adds	r3, #8
 800e712:	e00f      	b.n	800e734 <mem_malloc+0x1d0>
         ptr = ptr_to_mem(ptr)->next) {
 800e714:	8bfb      	ldrh	r3, [r7, #30]
 800e716:	4618      	mov	r0, r3
 800e718:	f7ff fc74 	bl	800e004 <ptr_to_mem>
 800e71c:	4603      	mov	r3, r0
 800e71e:	881b      	ldrh	r3, [r3, #0]
 800e720:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e722:	8bfa      	ldrh	r2, [r7, #30]
 800e724:	8bbb      	ldrh	r3, [r7, #28]
 800e726:	f5c3 43da 	rsb	r3, r3, #27904	; 0x6d00
 800e72a:	3360      	adds	r3, #96	; 0x60
 800e72c:	429a      	cmp	r2, r3
 800e72e:	f4ff af41 	bcc.w	800e5b4 <mem_malloc+0x50>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e732:	2300      	movs	r3, #0
}
 800e734:	4618      	mov	r0, r3
 800e736:	3720      	adds	r7, #32
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	2000067c 	.word	0x2000067c
 800e740:	0801a600 	.word	0x0801a600
 800e744:	0801a7a8 	.word	0x0801a7a8
 800e748:	0801a648 	.word	0x0801a648
 800e74c:	20000678 	.word	0x20000678
 800e750:	0801a7bc 	.word	0x0801a7bc
 800e754:	0801a7d8 	.word	0x0801a7d8
 800e758:	0801a808 	.word	0x0801a808
 800e75c:	0801a838 	.word	0x0801a838

0800e760 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e760:	b480      	push	{r7}
 800e762:	b085      	sub	sp, #20
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	689b      	ldr	r3, [r3, #8]
 800e76c:	2200      	movs	r2, #0
 800e76e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	3303      	adds	r3, #3
 800e776:	f023 0303 	bic.w	r3, r3, #3
 800e77a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e77c:	2300      	movs	r3, #0
 800e77e:	60fb      	str	r3, [r7, #12]
 800e780:	e011      	b.n	800e7a6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	689b      	ldr	r3, [r3, #8]
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	689b      	ldr	r3, [r3, #8]
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	881b      	ldrh	r3, [r3, #0]
 800e798:	461a      	mov	r2, r3
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	4413      	add	r3, r2
 800e79e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	60fb      	str	r3, [r7, #12]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	885b      	ldrh	r3, [r3, #2]
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	dbe7      	blt.n	800e782 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e7b2:	bf00      	nop
 800e7b4:	bf00      	nop
 800e7b6:	3714      	adds	r7, #20
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr

0800e7c0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	80fb      	strh	r3, [r7, #6]
 800e7ca:	e009      	b.n	800e7e0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e7cc:	88fb      	ldrh	r3, [r7, #6]
 800e7ce:	4a08      	ldr	r2, [pc, #32]	; (800e7f0 <memp_init+0x30>)
 800e7d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7ff ffc3 	bl	800e760 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e7da:	88fb      	ldrh	r3, [r7, #6]
 800e7dc:	3301      	adds	r3, #1
 800e7de:	80fb      	strh	r3, [r7, #6]
 800e7e0:	88fb      	ldrh	r3, [r7, #6]
 800e7e2:	2b08      	cmp	r3, #8
 800e7e4:	d9f2      	bls.n	800e7cc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e7e6:	bf00      	nop
 800e7e8:	bf00      	nop
 800e7ea:	3708      	adds	r7, #8
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}
 800e7f0:	0801d1a0 	.word	0x0801d1a0

0800e7f4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b084      	sub	sp, #16
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	689b      	ldr	r3, [r3, #8]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d012      	beq.n	800e830 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	689b      	ldr	r3, [r3, #8]
 800e80e:	68fa      	ldr	r2, [r7, #12]
 800e810:	6812      	ldr	r2, [r2, #0]
 800e812:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f003 0303 	and.w	r3, r3, #3
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d006      	beq.n	800e82c <do_memp_malloc_pool+0x38>
 800e81e:	4b07      	ldr	r3, [pc, #28]	; (800e83c <do_memp_malloc_pool+0x48>)
 800e820:	f44f 728c 	mov.w	r2, #280	; 0x118
 800e824:	4906      	ldr	r1, [pc, #24]	; (800e840 <do_memp_malloc_pool+0x4c>)
 800e826:	4807      	ldr	r0, [pc, #28]	; (800e844 <do_memp_malloc_pool+0x50>)
 800e828:	f00a fb64 	bl	8018ef4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	e000      	b.n	800e832 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e830:	2300      	movs	r3, #0
}
 800e832:	4618      	mov	r0, r3
 800e834:	3710      	adds	r7, #16
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}
 800e83a:	bf00      	nop
 800e83c:	0801a85c 	.word	0x0801a85c
 800e840:	0801a88c 	.word	0x0801a88c
 800e844:	0801a8b0 	.word	0x0801a8b0

0800e848 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	4603      	mov	r3, r0
 800e850:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e852:	79fb      	ldrb	r3, [r7, #7]
 800e854:	2b08      	cmp	r3, #8
 800e856:	d908      	bls.n	800e86a <memp_malloc+0x22>
 800e858:	4b0a      	ldr	r3, [pc, #40]	; (800e884 <memp_malloc+0x3c>)
 800e85a:	f240 1257 	movw	r2, #343	; 0x157
 800e85e:	490a      	ldr	r1, [pc, #40]	; (800e888 <memp_malloc+0x40>)
 800e860:	480a      	ldr	r0, [pc, #40]	; (800e88c <memp_malloc+0x44>)
 800e862:	f00a fb47 	bl	8018ef4 <iprintf>
 800e866:	2300      	movs	r3, #0
 800e868:	e008      	b.n	800e87c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e86a:	79fb      	ldrb	r3, [r7, #7]
 800e86c:	4a08      	ldr	r2, [pc, #32]	; (800e890 <memp_malloc+0x48>)
 800e86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e872:	4618      	mov	r0, r3
 800e874:	f7ff ffbe 	bl	800e7f4 <do_memp_malloc_pool>
 800e878:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e87a:	68fb      	ldr	r3, [r7, #12]
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3710      	adds	r7, #16
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}
 800e884:	0801a85c 	.word	0x0801a85c
 800e888:	0801a8ec 	.word	0x0801a8ec
 800e88c:	0801a8b0 	.word	0x0801a8b0
 800e890:	0801d1a0 	.word	0x0801d1a0

0800e894 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b084      	sub	sp, #16
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	f003 0303 	and.w	r3, r3, #3
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d006      	beq.n	800e8b6 <do_memp_free_pool+0x22>
 800e8a8:	4b0a      	ldr	r3, [pc, #40]	; (800e8d4 <do_memp_free_pool+0x40>)
 800e8aa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e8ae:	490a      	ldr	r1, [pc, #40]	; (800e8d8 <do_memp_free_pool+0x44>)
 800e8b0:	480a      	ldr	r0, [pc, #40]	; (800e8dc <do_memp_free_pool+0x48>)
 800e8b2:	f00a fb1f 	bl	8018ef4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	689b      	ldr	r3, [r3, #8]
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	689b      	ldr	r3, [r3, #8]
 800e8c8:	68fa      	ldr	r2, [r7, #12]
 800e8ca:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800e8cc:	bf00      	nop
 800e8ce:	3710      	adds	r7, #16
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	0801a85c 	.word	0x0801a85c
 800e8d8:	0801a90c 	.word	0x0801a90c
 800e8dc:	0801a8b0 	.word	0x0801a8b0

0800e8e0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	6039      	str	r1, [r7, #0]
 800e8ea:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e8ec:	79fb      	ldrb	r3, [r7, #7]
 800e8ee:	2b08      	cmp	r3, #8
 800e8f0:	d907      	bls.n	800e902 <memp_free+0x22>
 800e8f2:	4b0c      	ldr	r3, [pc, #48]	; (800e924 <memp_free+0x44>)
 800e8f4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e8f8:	490b      	ldr	r1, [pc, #44]	; (800e928 <memp_free+0x48>)
 800e8fa:	480c      	ldr	r0, [pc, #48]	; (800e92c <memp_free+0x4c>)
 800e8fc:	f00a fafa 	bl	8018ef4 <iprintf>
 800e900:	e00c      	b.n	800e91c <memp_free+0x3c>

  if (mem == NULL) {
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d008      	beq.n	800e91a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e908:	79fb      	ldrb	r3, [r7, #7]
 800e90a:	4a09      	ldr	r2, [pc, #36]	; (800e930 <memp_free+0x50>)
 800e90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e910:	6839      	ldr	r1, [r7, #0]
 800e912:	4618      	mov	r0, r3
 800e914:	f7ff ffbe 	bl	800e894 <do_memp_free_pool>
 800e918:	e000      	b.n	800e91c <memp_free+0x3c>
    return;
 800e91a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e91c:	3708      	adds	r7, #8
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
 800e922:	bf00      	nop
 800e924:	0801a85c 	.word	0x0801a85c
 800e928:	0801a92c 	.word	0x0801a92c
 800e92c:	0801a8b0 	.word	0x0801a8b0
 800e930:	0801d1a0 	.word	0x0801d1a0

0800e934 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e934:	b480      	push	{r7}
 800e936:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e938:	bf00      	nop
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr
	...

0800e944 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b086      	sub	sp, #24
 800e948:	af00      	add	r7, sp, #0
 800e94a:	60f8      	str	r0, [r7, #12]
 800e94c:	60b9      	str	r1, [r7, #8]
 800e94e:	607a      	str	r2, [r7, #4]
 800e950:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d108      	bne.n	800e96a <netif_add+0x26>
 800e958:	4b57      	ldr	r3, [pc, #348]	; (800eab8 <netif_add+0x174>)
 800e95a:	f240 1227 	movw	r2, #295	; 0x127
 800e95e:	4957      	ldr	r1, [pc, #348]	; (800eabc <netif_add+0x178>)
 800e960:	4857      	ldr	r0, [pc, #348]	; (800eac0 <netif_add+0x17c>)
 800e962:	f00a fac7 	bl	8018ef4 <iprintf>
 800e966:	2300      	movs	r3, #0
 800e968:	e0a2      	b.n	800eab0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d108      	bne.n	800e982 <netif_add+0x3e>
 800e970:	4b51      	ldr	r3, [pc, #324]	; (800eab8 <netif_add+0x174>)
 800e972:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e976:	4953      	ldr	r1, [pc, #332]	; (800eac4 <netif_add+0x180>)
 800e978:	4851      	ldr	r0, [pc, #324]	; (800eac0 <netif_add+0x17c>)
 800e97a:	f00a fabb 	bl	8018ef4 <iprintf>
 800e97e:	2300      	movs	r3, #0
 800e980:	e096      	b.n	800eab0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d101      	bne.n	800e98c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e988:	4b4f      	ldr	r3, [pc, #316]	; (800eac8 <netif_add+0x184>)
 800e98a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d101      	bne.n	800e996 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e992:	4b4d      	ldr	r3, [pc, #308]	; (800eac8 <netif_add+0x184>)
 800e994:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d101      	bne.n	800e9a0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e99c:	4b4a      	ldr	r3, [pc, #296]	; (800eac8 <netif_add+0x184>)
 800e99e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	4a45      	ldr	r2, [pc, #276]	; (800eacc <netif_add+0x188>)
 800e9b6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	6a3a      	ldr	r2, [r7, #32]
 800e9d0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e9d2:	4b3f      	ldr	r3, [pc, #252]	; (800ead0 <netif_add+0x18c>)
 800e9d4:	781a      	ldrb	r2, [r3, #0]
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9e0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	68b9      	ldr	r1, [r7, #8]
 800e9e8:	68f8      	ldr	r0, [r7, #12]
 800e9ea:	f000 f913 	bl	800ec14 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f0:	68f8      	ldr	r0, [r7, #12]
 800e9f2:	4798      	blx	r3
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d001      	beq.n	800e9fe <netif_add+0xba>
    return NULL;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	e058      	b.n	800eab0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea04:	2bff      	cmp	r3, #255	; 0xff
 800ea06:	d103      	bne.n	800ea10 <netif_add+0xcc>
        netif->num = 0;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ea10:	2300      	movs	r3, #0
 800ea12:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ea14:	4b2f      	ldr	r3, [pc, #188]	; (800ead4 <netif_add+0x190>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	617b      	str	r3, [r7, #20]
 800ea1a:	e02b      	b.n	800ea74 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ea1c:	697a      	ldr	r2, [r7, #20]
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d106      	bne.n	800ea32 <netif_add+0xee>
 800ea24:	4b24      	ldr	r3, [pc, #144]	; (800eab8 <netif_add+0x174>)
 800ea26:	f240 128b 	movw	r2, #395	; 0x18b
 800ea2a:	492b      	ldr	r1, [pc, #172]	; (800ead8 <netif_add+0x194>)
 800ea2c:	4824      	ldr	r0, [pc, #144]	; (800eac0 <netif_add+0x17c>)
 800ea2e:	f00a fa61 	bl	8018ef4 <iprintf>
        num_netifs++;
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	3301      	adds	r3, #1
 800ea36:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	2bff      	cmp	r3, #255	; 0xff
 800ea3c:	dd06      	ble.n	800ea4c <netif_add+0x108>
 800ea3e:	4b1e      	ldr	r3, [pc, #120]	; (800eab8 <netif_add+0x174>)
 800ea40:	f240 128d 	movw	r2, #397	; 0x18d
 800ea44:	4925      	ldr	r1, [pc, #148]	; (800eadc <netif_add+0x198>)
 800ea46:	481e      	ldr	r0, [pc, #120]	; (800eac0 <netif_add+0x17c>)
 800ea48:	f00a fa54 	bl	8018ef4 <iprintf>
        if (netif2->num == netif->num) {
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d108      	bne.n	800ea6e <netif_add+0x12a>
          netif->num++;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea62:	3301      	adds	r3, #1
 800ea64:	b2da      	uxtb	r2, r3
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800ea6c:	e005      	b.n	800ea7a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	617b      	str	r3, [r7, #20]
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d1d0      	bne.n	800ea1c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d1be      	bne.n	800e9fe <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea86:	2bfe      	cmp	r3, #254	; 0xfe
 800ea88:	d103      	bne.n	800ea92 <netif_add+0x14e>
    netif_num = 0;
 800ea8a:	4b11      	ldr	r3, [pc, #68]	; (800ead0 <netif_add+0x18c>)
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	701a      	strb	r2, [r3, #0]
 800ea90:	e006      	b.n	800eaa0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea98:	3301      	adds	r3, #1
 800ea9a:	b2da      	uxtb	r2, r3
 800ea9c:	4b0c      	ldr	r3, [pc, #48]	; (800ead0 <netif_add+0x18c>)
 800ea9e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800eaa0:	4b0c      	ldr	r3, [pc, #48]	; (800ead4 <netif_add+0x190>)
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800eaa8:	4a0a      	ldr	r2, [pc, #40]	; (800ead4 <netif_add+0x190>)
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800eaae:	68fb      	ldr	r3, [r7, #12]
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3718      	adds	r7, #24
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	0801a948 	.word	0x0801a948
 800eabc:	0801a9dc 	.word	0x0801a9dc
 800eac0:	0801a998 	.word	0x0801a998
 800eac4:	0801a9f8 	.word	0x0801a9f8
 800eac8:	0801d204 	.word	0x0801d204
 800eacc:	0800ee27 	.word	0x0800ee27
 800ead0:	200006a4 	.word	0x200006a4
 800ead4:	2001878c 	.word	0x2001878c
 800ead8:	0801aa1c 	.word	0x0801aa1c
 800eadc:	0801aa30 	.word	0x0801aa30

0800eae0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800eaea:	6839      	ldr	r1, [r7, #0]
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f002 fd83 	bl	80115f8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800eaf2:	6839      	ldr	r1, [r7, #0]
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f007 fac1 	bl	801607c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800eafa:	bf00      	nop
 800eafc:	3708      	adds	r7, #8
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
	...

0800eb04 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b086      	sub	sp, #24
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d106      	bne.n	800eb24 <netif_do_set_ipaddr+0x20>
 800eb16:	4b1d      	ldr	r3, [pc, #116]	; (800eb8c <netif_do_set_ipaddr+0x88>)
 800eb18:	f240 12cb 	movw	r2, #459	; 0x1cb
 800eb1c:	491c      	ldr	r1, [pc, #112]	; (800eb90 <netif_do_set_ipaddr+0x8c>)
 800eb1e:	481d      	ldr	r0, [pc, #116]	; (800eb94 <netif_do_set_ipaddr+0x90>)
 800eb20:	f00a f9e8 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d106      	bne.n	800eb38 <netif_do_set_ipaddr+0x34>
 800eb2a:	4b18      	ldr	r3, [pc, #96]	; (800eb8c <netif_do_set_ipaddr+0x88>)
 800eb2c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800eb30:	4917      	ldr	r1, [pc, #92]	; (800eb90 <netif_do_set_ipaddr+0x8c>)
 800eb32:	4818      	ldr	r0, [pc, #96]	; (800eb94 <netif_do_set_ipaddr+0x90>)
 800eb34:	f00a f9de 	bl	8018ef4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	3304      	adds	r3, #4
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d01c      	beq.n	800eb80 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	3304      	adds	r3, #4
 800eb50:	681a      	ldr	r2, [r3, #0]
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800eb56:	f107 0314 	add.w	r3, r7, #20
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f7ff ffbf 	bl	800eae0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d002      	beq.n	800eb6e <netif_do_set_ipaddr+0x6a>
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	e000      	b.n	800eb70 <netif_do_set_ipaddr+0x6c>
 800eb6e:	2300      	movs	r3, #0
 800eb70:	68fa      	ldr	r2, [r7, #12]
 800eb72:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800eb74:	2101      	movs	r1, #1
 800eb76:	68f8      	ldr	r0, [r7, #12]
 800eb78:	f000 f8d2 	bl	800ed20 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	e000      	b.n	800eb82 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800eb80:	2300      	movs	r3, #0
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3718      	adds	r7, #24
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
 800eb8a:	bf00      	nop
 800eb8c:	0801a948 	.word	0x0801a948
 800eb90:	0801aa60 	.word	0x0801aa60
 800eb94:	0801a998 	.word	0x0801a998

0800eb98 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	60f8      	str	r0, [r7, #12]
 800eba0:	60b9      	str	r1, [r7, #8]
 800eba2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	3308      	adds	r3, #8
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d00a      	beq.n	800ebc8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d002      	beq.n	800ebbe <netif_do_set_netmask+0x26>
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	e000      	b.n	800ebc0 <netif_do_set_netmask+0x28>
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	e000      	b.n	800ebca <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ebc8:	2300      	movs	r3, #0
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3714      	adds	r7, #20
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr

0800ebd6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ebd6:	b480      	push	{r7}
 800ebd8:	b085      	sub	sp, #20
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	60f8      	str	r0, [r7, #12]
 800ebde:	60b9      	str	r1, [r7, #8]
 800ebe0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	330c      	adds	r3, #12
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d00a      	beq.n	800ec06 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d002      	beq.n	800ebfc <netif_do_set_gw+0x26>
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	e000      	b.n	800ebfe <netif_do_set_gw+0x28>
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	68fa      	ldr	r2, [r7, #12]
 800ec00:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ec02:	2301      	movs	r3, #1
 800ec04:	e000      	b.n	800ec08 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ec06:	2300      	movs	r3, #0
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3714      	adds	r7, #20
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec12:	4770      	bx	lr

0800ec14 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b088      	sub	sp, #32
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	60f8      	str	r0, [r7, #12]
 800ec1c:	60b9      	str	r1, [r7, #8]
 800ec1e:	607a      	str	r2, [r7, #4]
 800ec20:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ec22:	2300      	movs	r3, #0
 800ec24:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ec26:	2300      	movs	r3, #0
 800ec28:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d101      	bne.n	800ec34 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ec30:	4b1c      	ldr	r3, [pc, #112]	; (800eca4 <netif_set_addr+0x90>)
 800ec32:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d101      	bne.n	800ec3e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ec3a:	4b1a      	ldr	r3, [pc, #104]	; (800eca4 <netif_set_addr+0x90>)
 800ec3c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d101      	bne.n	800ec48 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ec44:	4b17      	ldr	r3, [pc, #92]	; (800eca4 <netif_set_addr+0x90>)
 800ec46:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d003      	beq.n	800ec56 <netif_set_addr+0x42>
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d101      	bne.n	800ec5a <netif_set_addr+0x46>
 800ec56:	2301      	movs	r3, #1
 800ec58:	e000      	b.n	800ec5c <netif_set_addr+0x48>
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d006      	beq.n	800ec72 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ec64:	f107 0310 	add.w	r3, r7, #16
 800ec68:	461a      	mov	r2, r3
 800ec6a:	68b9      	ldr	r1, [r7, #8]
 800ec6c:	68f8      	ldr	r0, [r7, #12]
 800ec6e:	f7ff ff49 	bl	800eb04 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ec72:	69fa      	ldr	r2, [r7, #28]
 800ec74:	6879      	ldr	r1, [r7, #4]
 800ec76:	68f8      	ldr	r0, [r7, #12]
 800ec78:	f7ff ff8e 	bl	800eb98 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ec7c:	69ba      	ldr	r2, [r7, #24]
 800ec7e:	6839      	ldr	r1, [r7, #0]
 800ec80:	68f8      	ldr	r0, [r7, #12]
 800ec82:	f7ff ffa8 	bl	800ebd6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d106      	bne.n	800ec9a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ec8c:	f107 0310 	add.w	r3, r7, #16
 800ec90:	461a      	mov	r2, r3
 800ec92:	68b9      	ldr	r1, [r7, #8]
 800ec94:	68f8      	ldr	r0, [r7, #12]
 800ec96:	f7ff ff35 	bl	800eb04 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ec9a:	bf00      	nop
 800ec9c:	3720      	adds	r7, #32
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	0801d204 	.word	0x0801d204

0800eca8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b083      	sub	sp, #12
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ecb0:	4a04      	ldr	r2, [pc, #16]	; (800ecc4 <netif_set_default+0x1c>)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ecb6:	bf00      	nop
 800ecb8:	370c      	adds	r7, #12
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc0:	4770      	bx	lr
 800ecc2:	bf00      	nop
 800ecc4:	20018790 	.word	0x20018790

0800ecc8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d107      	bne.n	800ece6 <netif_set_up+0x1e>
 800ecd6:	4b0f      	ldr	r3, [pc, #60]	; (800ed14 <netif_set_up+0x4c>)
 800ecd8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ecdc:	490e      	ldr	r1, [pc, #56]	; (800ed18 <netif_set_up+0x50>)
 800ecde:	480f      	ldr	r0, [pc, #60]	; (800ed1c <netif_set_up+0x54>)
 800ece0:	f00a f908 	bl	8018ef4 <iprintf>
 800ece4:	e013      	b.n	800ed0e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ecec:	f003 0301 	and.w	r3, r3, #1
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d10c      	bne.n	800ed0e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ecfa:	f043 0301 	orr.w	r3, r3, #1
 800ecfe:	b2da      	uxtb	r2, r3
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ed06:	2103      	movs	r1, #3
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f000 f809 	bl	800ed20 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ed0e:	3708      	adds	r7, #8
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}
 800ed14:	0801a948 	.word	0x0801a948
 800ed18:	0801aad0 	.word	0x0801aad0
 800ed1c:	0801a998 	.word	0x0801a998

0800ed20 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b082      	sub	sp, #8
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	460b      	mov	r3, r1
 800ed2a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d106      	bne.n	800ed40 <netif_issue_reports+0x20>
 800ed32:	4b18      	ldr	r3, [pc, #96]	; (800ed94 <netif_issue_reports+0x74>)
 800ed34:	f240 326d 	movw	r2, #877	; 0x36d
 800ed38:	4917      	ldr	r1, [pc, #92]	; (800ed98 <netif_issue_reports+0x78>)
 800ed3a:	4818      	ldr	r0, [pc, #96]	; (800ed9c <netif_issue_reports+0x7c>)
 800ed3c:	f00a f8da 	bl	8018ef4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed46:	f003 0304 	and.w	r3, r3, #4
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d01e      	beq.n	800ed8c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed54:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d017      	beq.n	800ed8c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ed5c:	78fb      	ldrb	r3, [r7, #3]
 800ed5e:	f003 0301 	and.w	r3, r3, #1
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d013      	beq.n	800ed8e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	3304      	adds	r3, #4
 800ed6a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d00e      	beq.n	800ed8e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed76:	f003 0308 	and.w	r3, r3, #8
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d007      	beq.n	800ed8e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	3304      	adds	r3, #4
 800ed82:	4619      	mov	r1, r3
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f008 f8e3 	bl	8016f50 <etharp_request>
 800ed8a:	e000      	b.n	800ed8e <netif_issue_reports+0x6e>
    return;
 800ed8c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ed8e:	3708      	adds	r7, #8
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	0801a948 	.word	0x0801a948
 800ed98:	0801aaec 	.word	0x0801aaec
 800ed9c:	0801a998 	.word	0x0801a998

0800eda0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d107      	bne.n	800edbe <netif_set_down+0x1e>
 800edae:	4b12      	ldr	r3, [pc, #72]	; (800edf8 <netif_set_down+0x58>)
 800edb0:	f240 329b 	movw	r2, #923	; 0x39b
 800edb4:	4911      	ldr	r1, [pc, #68]	; (800edfc <netif_set_down+0x5c>)
 800edb6:	4812      	ldr	r0, [pc, #72]	; (800ee00 <netif_set_down+0x60>)
 800edb8:	f00a f89c 	bl	8018ef4 <iprintf>
 800edbc:	e019      	b.n	800edf2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800edc4:	f003 0301 	and.w	r3, r3, #1
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d012      	beq.n	800edf2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800edd2:	f023 0301 	bic.w	r3, r3, #1
 800edd6:	b2da      	uxtb	r2, r3
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ede4:	f003 0308 	and.w	r3, r3, #8
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d002      	beq.n	800edf2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f007 fc6d 	bl	80166cc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800edf2:	3708      	adds	r7, #8
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}
 800edf8:	0801a948 	.word	0x0801a948
 800edfc:	0801ab10 	.word	0x0801ab10
 800ee00:	0801a998 	.word	0x0801a998

0800ee04 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b083      	sub	sp, #12
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d002      	beq.n	800ee1a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	683a      	ldr	r2, [r7, #0]
 800ee18:	61da      	str	r2, [r3, #28]
  }
}
 800ee1a:	bf00      	nop
 800ee1c:	370c      	adds	r7, #12
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee24:	4770      	bx	lr

0800ee26 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ee26:	b480      	push	{r7}
 800ee28:	b085      	sub	sp, #20
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	60f8      	str	r0, [r7, #12]
 800ee2e:	60b9      	str	r1, [r7, #8]
 800ee30:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ee32:	f06f 030b 	mvn.w	r3, #11
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3714      	adds	r7, #20
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee40:	4770      	bx	lr
	...

0800ee44 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b085      	sub	sp, #20
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ee4e:	79fb      	ldrb	r3, [r7, #7]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d013      	beq.n	800ee7c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ee54:	4b0d      	ldr	r3, [pc, #52]	; (800ee8c <netif_get_by_index+0x48>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	60fb      	str	r3, [r7, #12]
 800ee5a:	e00c      	b.n	800ee76 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee62:	3301      	adds	r3, #1
 800ee64:	b2db      	uxtb	r3, r3
 800ee66:	79fa      	ldrb	r2, [r7, #7]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d101      	bne.n	800ee70 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	e006      	b.n	800ee7e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	60fb      	str	r3, [r7, #12]
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d1ef      	bne.n	800ee5c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ee7c:	2300      	movs	r3, #0
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3714      	adds	r7, #20
 800ee82:	46bd      	mov	sp, r7
 800ee84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee88:	4770      	bx	lr
 800ee8a:	bf00      	nop
 800ee8c:	2001878c 	.word	0x2001878c

0800ee90 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ee96:	4b0c      	ldr	r3, [pc, #48]	; (800eec8 <pbuf_free_ooseq+0x38>)
 800ee98:	2200      	movs	r2, #0
 800ee9a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ee9c:	4b0b      	ldr	r3, [pc, #44]	; (800eecc <pbuf_free_ooseq+0x3c>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	607b      	str	r3, [r7, #4]
 800eea2:	e00a      	b.n	800eeba <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d003      	beq.n	800eeb4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f002 fbe1 	bl	8011674 <tcp_free_ooseq>
      return;
 800eeb2:	e005      	b.n	800eec0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	68db      	ldr	r3, [r3, #12]
 800eeb8:	607b      	str	r3, [r7, #4]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d1f1      	bne.n	800eea4 <pbuf_free_ooseq+0x14>
    }
  }
}
 800eec0:	3708      	adds	r7, #8
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	20018794 	.word	0x20018794
 800eecc:	2001879c 	.word	0x2001879c

0800eed0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800eed0:	b480      	push	{r7}
 800eed2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800eed4:	4b03      	ldr	r3, [pc, #12]	; (800eee4 <pbuf_pool_is_empty+0x14>)
 800eed6:	2201      	movs	r2, #1
 800eed8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800eeda:	bf00      	nop
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr
 800eee4:	20018794 	.word	0x20018794

0800eee8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800eee8:	b480      	push	{r7}
 800eeea:	b085      	sub	sp, #20
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	60b9      	str	r1, [r7, #8]
 800eef2:	4611      	mov	r1, r2
 800eef4:	461a      	mov	r2, r3
 800eef6:	460b      	mov	r3, r1
 800eef8:	80fb      	strh	r3, [r7, #6]
 800eefa:	4613      	mov	r3, r2
 800eefc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2200      	movs	r2, #0
 800ef02:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	68ba      	ldr	r2, [r7, #8]
 800ef08:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	88fa      	ldrh	r2, [r7, #6]
 800ef0e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	88ba      	ldrh	r2, [r7, #4]
 800ef14:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ef16:	8b3b      	ldrh	r3, [r7, #24]
 800ef18:	b2da      	uxtb	r2, r3
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	7f3a      	ldrb	r2, [r7, #28]
 800ef22:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2201      	movs	r2, #1
 800ef28:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	73da      	strb	r2, [r3, #15]
}
 800ef30:	bf00      	nop
 800ef32:	3714      	adds	r7, #20
 800ef34:	46bd      	mov	sp, r7
 800ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3a:	4770      	bx	lr

0800ef3c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b08c      	sub	sp, #48	; 0x30
 800ef40:	af02      	add	r7, sp, #8
 800ef42:	4603      	mov	r3, r0
 800ef44:	71fb      	strb	r3, [r7, #7]
 800ef46:	460b      	mov	r3, r1
 800ef48:	80bb      	strh	r3, [r7, #4]
 800ef4a:	4613      	mov	r3, r2
 800ef4c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ef4e:	79fb      	ldrb	r3, [r7, #7]
 800ef50:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ef52:	887b      	ldrh	r3, [r7, #2]
 800ef54:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ef58:	d07f      	beq.n	800f05a <pbuf_alloc+0x11e>
 800ef5a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ef5e:	f300 80c8 	bgt.w	800f0f2 <pbuf_alloc+0x1b6>
 800ef62:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ef66:	d010      	beq.n	800ef8a <pbuf_alloc+0x4e>
 800ef68:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ef6c:	f300 80c1 	bgt.w	800f0f2 <pbuf_alloc+0x1b6>
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	d002      	beq.n	800ef7a <pbuf_alloc+0x3e>
 800ef74:	2b41      	cmp	r3, #65	; 0x41
 800ef76:	f040 80bc 	bne.w	800f0f2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ef7a:	887a      	ldrh	r2, [r7, #2]
 800ef7c:	88bb      	ldrh	r3, [r7, #4]
 800ef7e:	4619      	mov	r1, r3
 800ef80:	2000      	movs	r0, #0
 800ef82:	f000 f8d1 	bl	800f128 <pbuf_alloc_reference>
 800ef86:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ef88:	e0bd      	b.n	800f106 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ef92:	88bb      	ldrh	r3, [r7, #4]
 800ef94:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ef96:	2008      	movs	r0, #8
 800ef98:	f7ff fc56 	bl	800e848 <memp_malloc>
 800ef9c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d109      	bne.n	800efb8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800efa4:	f7ff ff94 	bl	800eed0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800efa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d002      	beq.n	800efb4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800efae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efb0:	f000 faa8 	bl	800f504 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800efb4:	2300      	movs	r3, #0
 800efb6:	e0a7      	b.n	800f108 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800efb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800efba:	3303      	adds	r3, #3
 800efbc:	b29b      	uxth	r3, r3
 800efbe:	f023 0303 	bic.w	r3, r3, #3
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	f5c3 63af 	rsb	r3, r3, #1400	; 0x578
 800efc8:	b29b      	uxth	r3, r3
 800efca:	8b7a      	ldrh	r2, [r7, #26]
 800efcc:	4293      	cmp	r3, r2
 800efce:	bf28      	it	cs
 800efd0:	4613      	movcs	r3, r2
 800efd2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800efd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800efd6:	3310      	adds	r3, #16
 800efd8:	693a      	ldr	r2, [r7, #16]
 800efda:	4413      	add	r3, r2
 800efdc:	3303      	adds	r3, #3
 800efde:	f023 0303 	bic.w	r3, r3, #3
 800efe2:	4618      	mov	r0, r3
 800efe4:	89f9      	ldrh	r1, [r7, #14]
 800efe6:	8b7a      	ldrh	r2, [r7, #26]
 800efe8:	2300      	movs	r3, #0
 800efea:	9301      	str	r3, [sp, #4]
 800efec:	887b      	ldrh	r3, [r7, #2]
 800efee:	9300      	str	r3, [sp, #0]
 800eff0:	460b      	mov	r3, r1
 800eff2:	4601      	mov	r1, r0
 800eff4:	6938      	ldr	r0, [r7, #16]
 800eff6:	f7ff ff77 	bl	800eee8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	f003 0303 	and.w	r3, r3, #3
 800f002:	2b00      	cmp	r3, #0
 800f004:	d006      	beq.n	800f014 <pbuf_alloc+0xd8>
 800f006:	4b42      	ldr	r3, [pc, #264]	; (800f110 <pbuf_alloc+0x1d4>)
 800f008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f00c:	4941      	ldr	r1, [pc, #260]	; (800f114 <pbuf_alloc+0x1d8>)
 800f00e:	4842      	ldr	r0, [pc, #264]	; (800f118 <pbuf_alloc+0x1dc>)
 800f010:	f009 ff70 	bl	8018ef4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f014:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f016:	3303      	adds	r3, #3
 800f018:	f023 0303 	bic.w	r3, r3, #3
 800f01c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800f020:	d106      	bne.n	800f030 <pbuf_alloc+0xf4>
 800f022:	4b3b      	ldr	r3, [pc, #236]	; (800f110 <pbuf_alloc+0x1d4>)
 800f024:	f44f 7281 	mov.w	r2, #258	; 0x102
 800f028:	493c      	ldr	r1, [pc, #240]	; (800f11c <pbuf_alloc+0x1e0>)
 800f02a:	483b      	ldr	r0, [pc, #236]	; (800f118 <pbuf_alloc+0x1dc>)
 800f02c:	f009 ff62 	bl	8018ef4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f032:	2b00      	cmp	r3, #0
 800f034:	d102      	bne.n	800f03c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f036:	693b      	ldr	r3, [r7, #16]
 800f038:	627b      	str	r3, [r7, #36]	; 0x24
 800f03a:	e002      	b.n	800f042 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f03c:	69fb      	ldr	r3, [r7, #28]
 800f03e:	693a      	ldr	r2, [r7, #16]
 800f040:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f046:	8b7a      	ldrh	r2, [r7, #26]
 800f048:	89fb      	ldrh	r3, [r7, #14]
 800f04a:	1ad3      	subs	r3, r2, r3
 800f04c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f04e:	2300      	movs	r3, #0
 800f050:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800f052:	8b7b      	ldrh	r3, [r7, #26]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d19e      	bne.n	800ef96 <pbuf_alloc+0x5a>
      break;
 800f058:	e055      	b.n	800f106 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f05a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f05c:	3303      	adds	r3, #3
 800f05e:	b29b      	uxth	r3, r3
 800f060:	f023 0303 	bic.w	r3, r3, #3
 800f064:	b29a      	uxth	r2, r3
 800f066:	88bb      	ldrh	r3, [r7, #4]
 800f068:	3303      	adds	r3, #3
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	f023 0303 	bic.w	r3, r3, #3
 800f070:	b29b      	uxth	r3, r3
 800f072:	4413      	add	r3, r2
 800f074:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f076:	8b3b      	ldrh	r3, [r7, #24]
 800f078:	3310      	adds	r3, #16
 800f07a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f07c:	8b3a      	ldrh	r2, [r7, #24]
 800f07e:	88bb      	ldrh	r3, [r7, #4]
 800f080:	3303      	adds	r3, #3
 800f082:	f023 0303 	bic.w	r3, r3, #3
 800f086:	429a      	cmp	r2, r3
 800f088:	d306      	bcc.n	800f098 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f08a:	8afa      	ldrh	r2, [r7, #22]
 800f08c:	88bb      	ldrh	r3, [r7, #4]
 800f08e:	3303      	adds	r3, #3
 800f090:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f094:	429a      	cmp	r2, r3
 800f096:	d201      	bcs.n	800f09c <pbuf_alloc+0x160>
        return NULL;
 800f098:	2300      	movs	r3, #0
 800f09a:	e035      	b.n	800f108 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f09c:	8afb      	ldrh	r3, [r7, #22]
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7ff fa60 	bl	800e564 <mem_malloc>
 800f0a4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800f0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d101      	bne.n	800f0b0 <pbuf_alloc+0x174>
        return NULL;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	e02b      	b.n	800f108 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f0b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f0b2:	3310      	adds	r3, #16
 800f0b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0b6:	4413      	add	r3, r2
 800f0b8:	3303      	adds	r3, #3
 800f0ba:	f023 0303 	bic.w	r3, r3, #3
 800f0be:	4618      	mov	r0, r3
 800f0c0:	88b9      	ldrh	r1, [r7, #4]
 800f0c2:	88ba      	ldrh	r2, [r7, #4]
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	9301      	str	r3, [sp, #4]
 800f0c8:	887b      	ldrh	r3, [r7, #2]
 800f0ca:	9300      	str	r3, [sp, #0]
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	4601      	mov	r1, r0
 800f0d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0d2:	f7ff ff09 	bl	800eee8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	f003 0303 	and.w	r3, r3, #3
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d010      	beq.n	800f104 <pbuf_alloc+0x1c8>
 800f0e2:	4b0b      	ldr	r3, [pc, #44]	; (800f110 <pbuf_alloc+0x1d4>)
 800f0e4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800f0e8:	490d      	ldr	r1, [pc, #52]	; (800f120 <pbuf_alloc+0x1e4>)
 800f0ea:	480b      	ldr	r0, [pc, #44]	; (800f118 <pbuf_alloc+0x1dc>)
 800f0ec:	f009 ff02 	bl	8018ef4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f0f0:	e008      	b.n	800f104 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f0f2:	4b07      	ldr	r3, [pc, #28]	; (800f110 <pbuf_alloc+0x1d4>)
 800f0f4:	f240 1227 	movw	r2, #295	; 0x127
 800f0f8:	490a      	ldr	r1, [pc, #40]	; (800f124 <pbuf_alloc+0x1e8>)
 800f0fa:	4807      	ldr	r0, [pc, #28]	; (800f118 <pbuf_alloc+0x1dc>)
 800f0fc:	f009 fefa 	bl	8018ef4 <iprintf>
      return NULL;
 800f100:	2300      	movs	r3, #0
 800f102:	e001      	b.n	800f108 <pbuf_alloc+0x1cc>
      break;
 800f104:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3728      	adds	r7, #40	; 0x28
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}
 800f110:	0801ab78 	.word	0x0801ab78
 800f114:	0801aba8 	.word	0x0801aba8
 800f118:	0801abd8 	.word	0x0801abd8
 800f11c:	0801ac00 	.word	0x0801ac00
 800f120:	0801ac34 	.word	0x0801ac34
 800f124:	0801ac60 	.word	0x0801ac60

0800f128 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b086      	sub	sp, #24
 800f12c:	af02      	add	r7, sp, #8
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	460b      	mov	r3, r1
 800f132:	807b      	strh	r3, [r7, #2]
 800f134:	4613      	mov	r3, r2
 800f136:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f138:	883b      	ldrh	r3, [r7, #0]
 800f13a:	2b41      	cmp	r3, #65	; 0x41
 800f13c:	d009      	beq.n	800f152 <pbuf_alloc_reference+0x2a>
 800f13e:	883b      	ldrh	r3, [r7, #0]
 800f140:	2b01      	cmp	r3, #1
 800f142:	d006      	beq.n	800f152 <pbuf_alloc_reference+0x2a>
 800f144:	4b0f      	ldr	r3, [pc, #60]	; (800f184 <pbuf_alloc_reference+0x5c>)
 800f146:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800f14a:	490f      	ldr	r1, [pc, #60]	; (800f188 <pbuf_alloc_reference+0x60>)
 800f14c:	480f      	ldr	r0, [pc, #60]	; (800f18c <pbuf_alloc_reference+0x64>)
 800f14e:	f009 fed1 	bl	8018ef4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f152:	2007      	movs	r0, #7
 800f154:	f7ff fb78 	bl	800e848 <memp_malloc>
 800f158:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d101      	bne.n	800f164 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f160:	2300      	movs	r3, #0
 800f162:	e00b      	b.n	800f17c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f164:	8879      	ldrh	r1, [r7, #2]
 800f166:	887a      	ldrh	r2, [r7, #2]
 800f168:	2300      	movs	r3, #0
 800f16a:	9301      	str	r3, [sp, #4]
 800f16c:	883b      	ldrh	r3, [r7, #0]
 800f16e:	9300      	str	r3, [sp, #0]
 800f170:	460b      	mov	r3, r1
 800f172:	6879      	ldr	r1, [r7, #4]
 800f174:	68f8      	ldr	r0, [r7, #12]
 800f176:	f7ff feb7 	bl	800eee8 <pbuf_init_alloced_pbuf>
  return p;
 800f17a:	68fb      	ldr	r3, [r7, #12]
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	0801ab78 	.word	0x0801ab78
 800f188:	0801ac7c 	.word	0x0801ac7c
 800f18c:	0801abd8 	.word	0x0801abd8

0800f190 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b088      	sub	sp, #32
 800f194:	af02      	add	r7, sp, #8
 800f196:	607b      	str	r3, [r7, #4]
 800f198:	4603      	mov	r3, r0
 800f19a:	73fb      	strb	r3, [r7, #15]
 800f19c:	460b      	mov	r3, r1
 800f19e:	81bb      	strh	r3, [r7, #12]
 800f1a0:	4613      	mov	r3, r2
 800f1a2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f1a4:	7bfb      	ldrb	r3, [r7, #15]
 800f1a6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f1a8:	8a7b      	ldrh	r3, [r7, #18]
 800f1aa:	3303      	adds	r3, #3
 800f1ac:	f023 0203 	bic.w	r2, r3, #3
 800f1b0:	89bb      	ldrh	r3, [r7, #12]
 800f1b2:	441a      	add	r2, r3
 800f1b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d901      	bls.n	800f1be <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	e018      	b.n	800f1f0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f1be:	6a3b      	ldr	r3, [r7, #32]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d007      	beq.n	800f1d4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f1c4:	8a7b      	ldrh	r3, [r7, #18]
 800f1c6:	3303      	adds	r3, #3
 800f1c8:	f023 0303 	bic.w	r3, r3, #3
 800f1cc:	6a3a      	ldr	r2, [r7, #32]
 800f1ce:	4413      	add	r3, r2
 800f1d0:	617b      	str	r3, [r7, #20]
 800f1d2:	e001      	b.n	800f1d8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	89b9      	ldrh	r1, [r7, #12]
 800f1dc:	89ba      	ldrh	r2, [r7, #12]
 800f1de:	2302      	movs	r3, #2
 800f1e0:	9301      	str	r3, [sp, #4]
 800f1e2:	897b      	ldrh	r3, [r7, #10]
 800f1e4:	9300      	str	r3, [sp, #0]
 800f1e6:	460b      	mov	r3, r1
 800f1e8:	6979      	ldr	r1, [r7, #20]
 800f1ea:	f7ff fe7d 	bl	800eee8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f1ee:	687b      	ldr	r3, [r7, #4]
}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3718      	adds	r7, #24
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b084      	sub	sp, #16
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	460b      	mov	r3, r1
 800f202:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d106      	bne.n	800f218 <pbuf_realloc+0x20>
 800f20a:	4b3a      	ldr	r3, [pc, #232]	; (800f2f4 <pbuf_realloc+0xfc>)
 800f20c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f210:	4939      	ldr	r1, [pc, #228]	; (800f2f8 <pbuf_realloc+0x100>)
 800f212:	483a      	ldr	r0, [pc, #232]	; (800f2fc <pbuf_realloc+0x104>)
 800f214:	f009 fe6e 	bl	8018ef4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	891b      	ldrh	r3, [r3, #8]
 800f21c:	887a      	ldrh	r2, [r7, #2]
 800f21e:	429a      	cmp	r2, r3
 800f220:	d263      	bcs.n	800f2ea <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	891a      	ldrh	r2, [r3, #8]
 800f226:	887b      	ldrh	r3, [r7, #2]
 800f228:	1ad3      	subs	r3, r2, r3
 800f22a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f22c:	887b      	ldrh	r3, [r7, #2]
 800f22e:	817b      	strh	r3, [r7, #10]
  q = p;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f234:	e018      	b.n	800f268 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	895b      	ldrh	r3, [r3, #10]
 800f23a:	897a      	ldrh	r2, [r7, #10]
 800f23c:	1ad3      	subs	r3, r2, r3
 800f23e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	891a      	ldrh	r2, [r3, #8]
 800f244:	893b      	ldrh	r3, [r7, #8]
 800f246:	1ad3      	subs	r3, r2, r3
 800f248:	b29a      	uxth	r2, r3
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d106      	bne.n	800f268 <pbuf_realloc+0x70>
 800f25a:	4b26      	ldr	r3, [pc, #152]	; (800f2f4 <pbuf_realloc+0xfc>)
 800f25c:	f240 12af 	movw	r2, #431	; 0x1af
 800f260:	4927      	ldr	r1, [pc, #156]	; (800f300 <pbuf_realloc+0x108>)
 800f262:	4826      	ldr	r0, [pc, #152]	; (800f2fc <pbuf_realloc+0x104>)
 800f264:	f009 fe46 	bl	8018ef4 <iprintf>
  while (rem_len > q->len) {
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	895b      	ldrh	r3, [r3, #10]
 800f26c:	897a      	ldrh	r2, [r7, #10]
 800f26e:	429a      	cmp	r2, r3
 800f270:	d8e1      	bhi.n	800f236 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	7b1b      	ldrb	r3, [r3, #12]
 800f276:	f003 030f 	and.w	r3, r3, #15
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d121      	bne.n	800f2c2 <pbuf_realloc+0xca>
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	895b      	ldrh	r3, [r3, #10]
 800f282:	897a      	ldrh	r2, [r7, #10]
 800f284:	429a      	cmp	r2, r3
 800f286:	d01c      	beq.n	800f2c2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	7b5b      	ldrb	r3, [r3, #13]
 800f28c:	f003 0302 	and.w	r3, r3, #2
 800f290:	2b00      	cmp	r3, #0
 800f292:	d116      	bne.n	800f2c2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	685a      	ldr	r2, [r3, #4]
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	1ad3      	subs	r3, r2, r3
 800f29c:	b29a      	uxth	r2, r3
 800f29e:	897b      	ldrh	r3, [r7, #10]
 800f2a0:	4413      	add	r3, r2
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	68f8      	ldr	r0, [r7, #12]
 800f2a8:	f7ff f85a 	bl	800e360 <mem_trim>
 800f2ac:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d106      	bne.n	800f2c2 <pbuf_realloc+0xca>
 800f2b4:	4b0f      	ldr	r3, [pc, #60]	; (800f2f4 <pbuf_realloc+0xfc>)
 800f2b6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800f2ba:	4912      	ldr	r1, [pc, #72]	; (800f304 <pbuf_realloc+0x10c>)
 800f2bc:	480f      	ldr	r0, [pc, #60]	; (800f2fc <pbuf_realloc+0x104>)
 800f2be:	f009 fe19 	bl	8018ef4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	897a      	ldrh	r2, [r7, #10]
 800f2c6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	895a      	ldrh	r2, [r3, #10]
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d004      	beq.n	800f2e2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f000 f911 	bl	800f504 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	601a      	str	r2, [r3, #0]
 800f2e8:	e000      	b.n	800f2ec <pbuf_realloc+0xf4>
    return;
 800f2ea:	bf00      	nop

}
 800f2ec:	3710      	adds	r7, #16
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
 800f2f2:	bf00      	nop
 800f2f4:	0801ab78 	.word	0x0801ab78
 800f2f8:	0801ac90 	.word	0x0801ac90
 800f2fc:	0801abd8 	.word	0x0801abd8
 800f300:	0801aca8 	.word	0x0801aca8
 800f304:	0801acc0 	.word	0x0801acc0

0800f308 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b086      	sub	sp, #24
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	60f8      	str	r0, [r7, #12]
 800f310:	60b9      	str	r1, [r7, #8]
 800f312:	4613      	mov	r3, r2
 800f314:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d106      	bne.n	800f32a <pbuf_add_header_impl+0x22>
 800f31c:	4b2b      	ldr	r3, [pc, #172]	; (800f3cc <pbuf_add_header_impl+0xc4>)
 800f31e:	f240 12df 	movw	r2, #479	; 0x1df
 800f322:	492b      	ldr	r1, [pc, #172]	; (800f3d0 <pbuf_add_header_impl+0xc8>)
 800f324:	482b      	ldr	r0, [pc, #172]	; (800f3d4 <pbuf_add_header_impl+0xcc>)
 800f326:	f009 fde5 	bl	8018ef4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d003      	beq.n	800f338 <pbuf_add_header_impl+0x30>
 800f330:	68bb      	ldr	r3, [r7, #8]
 800f332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f336:	d301      	bcc.n	800f33c <pbuf_add_header_impl+0x34>
    return 1;
 800f338:	2301      	movs	r3, #1
 800f33a:	e043      	b.n	800f3c4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d101      	bne.n	800f346 <pbuf_add_header_impl+0x3e>
    return 0;
 800f342:	2300      	movs	r3, #0
 800f344:	e03e      	b.n	800f3c4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	891a      	ldrh	r2, [r3, #8]
 800f34e:	8a7b      	ldrh	r3, [r7, #18]
 800f350:	4413      	add	r3, r2
 800f352:	b29b      	uxth	r3, r3
 800f354:	8a7a      	ldrh	r2, [r7, #18]
 800f356:	429a      	cmp	r2, r3
 800f358:	d901      	bls.n	800f35e <pbuf_add_header_impl+0x56>
    return 1;
 800f35a:	2301      	movs	r3, #1
 800f35c:	e032      	b.n	800f3c4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	7b1b      	ldrb	r3, [r3, #12]
 800f362:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f364:	8a3b      	ldrh	r3, [r7, #16]
 800f366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d00c      	beq.n	800f388 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	685a      	ldr	r2, [r3, #4]
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	425b      	negs	r3, r3
 800f376:	4413      	add	r3, r2
 800f378:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	3310      	adds	r3, #16
 800f37e:	697a      	ldr	r2, [r7, #20]
 800f380:	429a      	cmp	r2, r3
 800f382:	d20d      	bcs.n	800f3a0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f384:	2301      	movs	r3, #1
 800f386:	e01d      	b.n	800f3c4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f388:	79fb      	ldrb	r3, [r7, #7]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d006      	beq.n	800f39c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	685a      	ldr	r2, [r3, #4]
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	425b      	negs	r3, r3
 800f396:	4413      	add	r3, r2
 800f398:	617b      	str	r3, [r7, #20]
 800f39a:	e001      	b.n	800f3a0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f39c:	2301      	movs	r3, #1
 800f39e:	e011      	b.n	800f3c4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	697a      	ldr	r2, [r7, #20]
 800f3a4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	895a      	ldrh	r2, [r3, #10]
 800f3aa:	8a7b      	ldrh	r3, [r7, #18]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	b29a      	uxth	r2, r3
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	891a      	ldrh	r2, [r3, #8]
 800f3b8:	8a7b      	ldrh	r3, [r7, #18]
 800f3ba:	4413      	add	r3, r2
 800f3bc:	b29a      	uxth	r2, r3
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	811a      	strh	r2, [r3, #8]


  return 0;
 800f3c2:	2300      	movs	r3, #0
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3718      	adds	r7, #24
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}
 800f3cc:	0801ab78 	.word	0x0801ab78
 800f3d0:	0801acdc 	.word	0x0801acdc
 800f3d4:	0801abd8 	.word	0x0801abd8

0800f3d8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	6839      	ldr	r1, [r7, #0]
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f7ff ff8e 	bl	800f308 <pbuf_add_header_impl>
 800f3ec:	4603      	mov	r3, r0
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3708      	adds	r7, #8
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
	...

0800f3f8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b084      	sub	sp, #16
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d106      	bne.n	800f416 <pbuf_remove_header+0x1e>
 800f408:	4b20      	ldr	r3, [pc, #128]	; (800f48c <pbuf_remove_header+0x94>)
 800f40a:	f240 224b 	movw	r2, #587	; 0x24b
 800f40e:	4920      	ldr	r1, [pc, #128]	; (800f490 <pbuf_remove_header+0x98>)
 800f410:	4820      	ldr	r0, [pc, #128]	; (800f494 <pbuf_remove_header+0x9c>)
 800f412:	f009 fd6f 	bl	8018ef4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d003      	beq.n	800f424 <pbuf_remove_header+0x2c>
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f422:	d301      	bcc.n	800f428 <pbuf_remove_header+0x30>
    return 1;
 800f424:	2301      	movs	r3, #1
 800f426:	e02c      	b.n	800f482 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d101      	bne.n	800f432 <pbuf_remove_header+0x3a>
    return 0;
 800f42e:	2300      	movs	r3, #0
 800f430:	e027      	b.n	800f482 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	895b      	ldrh	r3, [r3, #10]
 800f43a:	89fa      	ldrh	r2, [r7, #14]
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d908      	bls.n	800f452 <pbuf_remove_header+0x5a>
 800f440:	4b12      	ldr	r3, [pc, #72]	; (800f48c <pbuf_remove_header+0x94>)
 800f442:	f240 2255 	movw	r2, #597	; 0x255
 800f446:	4914      	ldr	r1, [pc, #80]	; (800f498 <pbuf_remove_header+0xa0>)
 800f448:	4812      	ldr	r0, [pc, #72]	; (800f494 <pbuf_remove_header+0x9c>)
 800f44a:	f009 fd53 	bl	8018ef4 <iprintf>
 800f44e:	2301      	movs	r3, #1
 800f450:	e017      	b.n	800f482 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	685a      	ldr	r2, [r3, #4]
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	441a      	add	r2, r3
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	895a      	ldrh	r2, [r3, #10]
 800f468:	89fb      	ldrh	r3, [r7, #14]
 800f46a:	1ad3      	subs	r3, r2, r3
 800f46c:	b29a      	uxth	r2, r3
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	891a      	ldrh	r2, [r3, #8]
 800f476:	89fb      	ldrh	r3, [r7, #14]
 800f478:	1ad3      	subs	r3, r2, r3
 800f47a:	b29a      	uxth	r2, r3
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f480:	2300      	movs	r3, #0
}
 800f482:	4618      	mov	r0, r3
 800f484:	3710      	adds	r7, #16
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}
 800f48a:	bf00      	nop
 800f48c:	0801ab78 	.word	0x0801ab78
 800f490:	0801acdc 	.word	0x0801acdc
 800f494:	0801abd8 	.word	0x0801abd8
 800f498:	0801ace8 	.word	0x0801ace8

0800f49c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b082      	sub	sp, #8
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
 800f4a4:	460b      	mov	r3, r1
 800f4a6:	807b      	strh	r3, [r7, #2]
 800f4a8:	4613      	mov	r3, r2
 800f4aa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f4ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	da08      	bge.n	800f4c6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f4b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f4b8:	425b      	negs	r3, r3
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f7ff ff9b 	bl	800f3f8 <pbuf_remove_header>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	e007      	b.n	800f4d6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f4c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f4ca:	787a      	ldrb	r2, [r7, #1]
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7ff ff1a 	bl	800f308 <pbuf_add_header_impl>
 800f4d4:	4603      	mov	r3, r0
  }
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3708      	adds	r7, #8
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}

0800f4de <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f4de:	b580      	push	{r7, lr}
 800f4e0:	b082      	sub	sp, #8
 800f4e2:	af00      	add	r7, sp, #0
 800f4e4:	6078      	str	r0, [r7, #4]
 800f4e6:	460b      	mov	r3, r1
 800f4e8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f4ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f4ee:	2201      	movs	r2, #1
 800f4f0:	4619      	mov	r1, r3
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f7ff ffd2 	bl	800f49c <pbuf_header_impl>
 800f4f8:	4603      	mov	r3, r0
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3708      	adds	r7, #8
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
	...

0800f504 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b086      	sub	sp, #24
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d10b      	bne.n	800f52a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d106      	bne.n	800f526 <pbuf_free+0x22>
 800f518:	4b38      	ldr	r3, [pc, #224]	; (800f5fc <pbuf_free+0xf8>)
 800f51a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f51e:	4938      	ldr	r1, [pc, #224]	; (800f600 <pbuf_free+0xfc>)
 800f520:	4838      	ldr	r0, [pc, #224]	; (800f604 <pbuf_free+0x100>)
 800f522:	f009 fce7 	bl	8018ef4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f526:	2300      	movs	r3, #0
 800f528:	e063      	b.n	800f5f2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f52a:	2300      	movs	r3, #0
 800f52c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f52e:	e05c      	b.n	800f5ea <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	7b9b      	ldrb	r3, [r3, #14]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d106      	bne.n	800f546 <pbuf_free+0x42>
 800f538:	4b30      	ldr	r3, [pc, #192]	; (800f5fc <pbuf_free+0xf8>)
 800f53a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f53e:	4932      	ldr	r1, [pc, #200]	; (800f608 <pbuf_free+0x104>)
 800f540:	4830      	ldr	r0, [pc, #192]	; (800f604 <pbuf_free+0x100>)
 800f542:	f009 fcd7 	bl	8018ef4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	7b9b      	ldrb	r3, [r3, #14]
 800f54a:	3b01      	subs	r3, #1
 800f54c:	b2da      	uxtb	r2, r3
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	739a      	strb	r2, [r3, #14]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	7b9b      	ldrb	r3, [r3, #14]
 800f556:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f558:	7dbb      	ldrb	r3, [r7, #22]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d143      	bne.n	800f5e6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	7b1b      	ldrb	r3, [r3, #12]
 800f568:	f003 030f 	and.w	r3, r3, #15
 800f56c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	7b5b      	ldrb	r3, [r3, #13]
 800f572:	f003 0302 	and.w	r3, r3, #2
 800f576:	2b00      	cmp	r3, #0
 800f578:	d011      	beq.n	800f59e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	691b      	ldr	r3, [r3, #16]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d106      	bne.n	800f594 <pbuf_free+0x90>
 800f586:	4b1d      	ldr	r3, [pc, #116]	; (800f5fc <pbuf_free+0xf8>)
 800f588:	f240 22ff 	movw	r2, #767	; 0x2ff
 800f58c:	491f      	ldr	r1, [pc, #124]	; (800f60c <pbuf_free+0x108>)
 800f58e:	481d      	ldr	r0, [pc, #116]	; (800f604 <pbuf_free+0x100>)
 800f590:	f009 fcb0 	bl	8018ef4 <iprintf>
        pc->custom_free_function(p);
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	691b      	ldr	r3, [r3, #16]
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	4798      	blx	r3
 800f59c:	e01d      	b.n	800f5da <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f59e:	7bfb      	ldrb	r3, [r7, #15]
 800f5a0:	2b02      	cmp	r3, #2
 800f5a2:	d104      	bne.n	800f5ae <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800f5a4:	6879      	ldr	r1, [r7, #4]
 800f5a6:	2008      	movs	r0, #8
 800f5a8:	f7ff f99a 	bl	800e8e0 <memp_free>
 800f5ac:	e015      	b.n	800f5da <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f5ae:	7bfb      	ldrb	r3, [r7, #15]
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d104      	bne.n	800f5be <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800f5b4:	6879      	ldr	r1, [r7, #4]
 800f5b6:	2007      	movs	r0, #7
 800f5b8:	f7ff f992 	bl	800e8e0 <memp_free>
 800f5bc:	e00d      	b.n	800f5da <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f5be:	7bfb      	ldrb	r3, [r7, #15]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d103      	bne.n	800f5cc <pbuf_free+0xc8>
          mem_free(p);
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f7fe fe61 	bl	800e28c <mem_free>
 800f5ca:	e006      	b.n	800f5da <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f5cc:	4b0b      	ldr	r3, [pc, #44]	; (800f5fc <pbuf_free+0xf8>)
 800f5ce:	f240 320f 	movw	r2, #783	; 0x30f
 800f5d2:	490f      	ldr	r1, [pc, #60]	; (800f610 <pbuf_free+0x10c>)
 800f5d4:	480b      	ldr	r0, [pc, #44]	; (800f604 <pbuf_free+0x100>)
 800f5d6:	f009 fc8d 	bl	8018ef4 <iprintf>
        }
      }
      count++;
 800f5da:	7dfb      	ldrb	r3, [r7, #23]
 800f5dc:	3301      	adds	r3, #1
 800f5de:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	607b      	str	r3, [r7, #4]
 800f5e4:	e001      	b.n	800f5ea <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d19f      	bne.n	800f530 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f5f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3718      	adds	r7, #24
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	0801ab78 	.word	0x0801ab78
 800f600:	0801acdc 	.word	0x0801acdc
 800f604:	0801abd8 	.word	0x0801abd8
 800f608:	0801ad08 	.word	0x0801ad08
 800f60c:	0801ad20 	.word	0x0801ad20
 800f610:	0801ad44 	.word	0x0801ad44

0800f614 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f614:	b480      	push	{r7}
 800f616:	b085      	sub	sp, #20
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f61c:	2300      	movs	r3, #0
 800f61e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f620:	e005      	b.n	800f62e <pbuf_clen+0x1a>
    ++len;
 800f622:	89fb      	ldrh	r3, [r7, #14]
 800f624:	3301      	adds	r3, #1
 800f626:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d1f6      	bne.n	800f622 <pbuf_clen+0xe>
  }
  return len;
 800f634:	89fb      	ldrh	r3, [r7, #14]
}
 800f636:	4618      	mov	r0, r3
 800f638:	3714      	adds	r7, #20
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr
	...

0800f644 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d010      	beq.n	800f674 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	7b9b      	ldrb	r3, [r3, #14]
 800f656:	3301      	adds	r3, #1
 800f658:	b2da      	uxtb	r2, r3
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	7b9b      	ldrb	r3, [r3, #14]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d106      	bne.n	800f674 <pbuf_ref+0x30>
 800f666:	4b05      	ldr	r3, [pc, #20]	; (800f67c <pbuf_ref+0x38>)
 800f668:	f240 3242 	movw	r2, #834	; 0x342
 800f66c:	4904      	ldr	r1, [pc, #16]	; (800f680 <pbuf_ref+0x3c>)
 800f66e:	4805      	ldr	r0, [pc, #20]	; (800f684 <pbuf_ref+0x40>)
 800f670:	f009 fc40 	bl	8018ef4 <iprintf>
  }
}
 800f674:	bf00      	nop
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	0801ab78 	.word	0x0801ab78
 800f680:	0801ad58 	.word	0x0801ad58
 800f684:	0801abd8 	.word	0x0801abd8

0800f688 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d002      	beq.n	800f69e <pbuf_cat+0x16>
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d107      	bne.n	800f6ae <pbuf_cat+0x26>
 800f69e:	4b20      	ldr	r3, [pc, #128]	; (800f720 <pbuf_cat+0x98>)
 800f6a0:	f240 3259 	movw	r2, #857	; 0x359
 800f6a4:	491f      	ldr	r1, [pc, #124]	; (800f724 <pbuf_cat+0x9c>)
 800f6a6:	4820      	ldr	r0, [pc, #128]	; (800f728 <pbuf_cat+0xa0>)
 800f6a8:	f009 fc24 	bl	8018ef4 <iprintf>
 800f6ac:	e034      	b.n	800f718 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	60fb      	str	r3, [r7, #12]
 800f6b2:	e00a      	b.n	800f6ca <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	891a      	ldrh	r2, [r3, #8]
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	891b      	ldrh	r3, [r3, #8]
 800f6bc:	4413      	add	r3, r2
 800f6be:	b29a      	uxth	r2, r3
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	60fb      	str	r3, [r7, #12]
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d1f0      	bne.n	800f6b4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	891a      	ldrh	r2, [r3, #8]
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	895b      	ldrh	r3, [r3, #10]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d006      	beq.n	800f6ec <pbuf_cat+0x64>
 800f6de:	4b10      	ldr	r3, [pc, #64]	; (800f720 <pbuf_cat+0x98>)
 800f6e0:	f240 3262 	movw	r2, #866	; 0x362
 800f6e4:	4911      	ldr	r1, [pc, #68]	; (800f72c <pbuf_cat+0xa4>)
 800f6e6:	4810      	ldr	r0, [pc, #64]	; (800f728 <pbuf_cat+0xa0>)
 800f6e8:	f009 fc04 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d006      	beq.n	800f702 <pbuf_cat+0x7a>
 800f6f4:	4b0a      	ldr	r3, [pc, #40]	; (800f720 <pbuf_cat+0x98>)
 800f6f6:	f240 3263 	movw	r2, #867	; 0x363
 800f6fa:	490d      	ldr	r1, [pc, #52]	; (800f730 <pbuf_cat+0xa8>)
 800f6fc:	480a      	ldr	r0, [pc, #40]	; (800f728 <pbuf_cat+0xa0>)
 800f6fe:	f009 fbf9 	bl	8018ef4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	891a      	ldrh	r2, [r3, #8]
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	891b      	ldrh	r3, [r3, #8]
 800f70a:	4413      	add	r3, r2
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	683a      	ldr	r2, [r7, #0]
 800f716:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f718:	3710      	adds	r7, #16
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}
 800f71e:	bf00      	nop
 800f720:	0801ab78 	.word	0x0801ab78
 800f724:	0801ad6c 	.word	0x0801ad6c
 800f728:	0801abd8 	.word	0x0801abd8
 800f72c:	0801ada4 	.word	0x0801ada4
 800f730:	0801add4 	.word	0x0801add4

0800f734 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b086      	sub	sp, #24
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f73e:	2300      	movs	r3, #0
 800f740:	617b      	str	r3, [r7, #20]
 800f742:	2300      	movs	r3, #0
 800f744:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d008      	beq.n	800f75e <pbuf_copy+0x2a>
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d005      	beq.n	800f75e <pbuf_copy+0x2a>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	891a      	ldrh	r2, [r3, #8]
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	891b      	ldrh	r3, [r3, #8]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d209      	bcs.n	800f772 <pbuf_copy+0x3e>
 800f75e:	4b57      	ldr	r3, [pc, #348]	; (800f8bc <pbuf_copy+0x188>)
 800f760:	f240 32c9 	movw	r2, #969	; 0x3c9
 800f764:	4956      	ldr	r1, [pc, #344]	; (800f8c0 <pbuf_copy+0x18c>)
 800f766:	4857      	ldr	r0, [pc, #348]	; (800f8c4 <pbuf_copy+0x190>)
 800f768:	f009 fbc4 	bl	8018ef4 <iprintf>
 800f76c:	f06f 030f 	mvn.w	r3, #15
 800f770:	e09f      	b.n	800f8b2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	895b      	ldrh	r3, [r3, #10]
 800f776:	461a      	mov	r2, r3
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	1ad2      	subs	r2, r2, r3
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	895b      	ldrh	r3, [r3, #10]
 800f780:	4619      	mov	r1, r3
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	1acb      	subs	r3, r1, r3
 800f786:	429a      	cmp	r2, r3
 800f788:	d306      	bcc.n	800f798 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	895b      	ldrh	r3, [r3, #10]
 800f78e:	461a      	mov	r2, r3
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	1ad3      	subs	r3, r2, r3
 800f794:	60fb      	str	r3, [r7, #12]
 800f796:	e005      	b.n	800f7a4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	895b      	ldrh	r3, [r3, #10]
 800f79c:	461a      	mov	r2, r3
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	1ad3      	subs	r3, r2, r3
 800f7a2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	685a      	ldr	r2, [r3, #4]
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	18d0      	adds	r0, r2, r3
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	685a      	ldr	r2, [r3, #4]
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	4413      	add	r3, r2
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	f009 fadc 	bl	8018d74 <memcpy>
    offset_to += len;
 800f7bc:	697a      	ldr	r2, [r7, #20]
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	4413      	add	r3, r2
 800f7c2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f7c4:	693a      	ldr	r2, [r7, #16]
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	4413      	add	r3, r2
 800f7ca:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	895b      	ldrh	r3, [r3, #10]
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	4293      	cmp	r3, r2
 800f7d6:	d906      	bls.n	800f7e6 <pbuf_copy+0xb2>
 800f7d8:	4b38      	ldr	r3, [pc, #224]	; (800f8bc <pbuf_copy+0x188>)
 800f7da:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f7de:	493a      	ldr	r1, [pc, #232]	; (800f8c8 <pbuf_copy+0x194>)
 800f7e0:	4838      	ldr	r0, [pc, #224]	; (800f8c4 <pbuf_copy+0x190>)
 800f7e2:	f009 fb87 	bl	8018ef4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	895b      	ldrh	r3, [r3, #10]
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	4293      	cmp	r3, r2
 800f7f0:	d906      	bls.n	800f800 <pbuf_copy+0xcc>
 800f7f2:	4b32      	ldr	r3, [pc, #200]	; (800f8bc <pbuf_copy+0x188>)
 800f7f4:	f240 32da 	movw	r2, #986	; 0x3da
 800f7f8:	4934      	ldr	r1, [pc, #208]	; (800f8cc <pbuf_copy+0x198>)
 800f7fa:	4832      	ldr	r0, [pc, #200]	; (800f8c4 <pbuf_copy+0x190>)
 800f7fc:	f009 fb7a 	bl	8018ef4 <iprintf>
    if (offset_from >= p_from->len) {
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	895b      	ldrh	r3, [r3, #10]
 800f804:	461a      	mov	r2, r3
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	4293      	cmp	r3, r2
 800f80a:	d304      	bcc.n	800f816 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f80c:	2300      	movs	r3, #0
 800f80e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	895b      	ldrh	r3, [r3, #10]
 800f81a:	461a      	mov	r2, r3
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	4293      	cmp	r3, r2
 800f820:	d114      	bne.n	800f84c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f822:	2300      	movs	r3, #0
 800f824:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d10c      	bne.n	800f84c <pbuf_copy+0x118>
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d009      	beq.n	800f84c <pbuf_copy+0x118>
 800f838:	4b20      	ldr	r3, [pc, #128]	; (800f8bc <pbuf_copy+0x188>)
 800f83a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f83e:	4924      	ldr	r1, [pc, #144]	; (800f8d0 <pbuf_copy+0x19c>)
 800f840:	4820      	ldr	r0, [pc, #128]	; (800f8c4 <pbuf_copy+0x190>)
 800f842:	f009 fb57 	bl	8018ef4 <iprintf>
 800f846:	f06f 030f 	mvn.w	r3, #15
 800f84a:	e032      	b.n	800f8b2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d013      	beq.n	800f87a <pbuf_copy+0x146>
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	895a      	ldrh	r2, [r3, #10]
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	891b      	ldrh	r3, [r3, #8]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d10d      	bne.n	800f87a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d009      	beq.n	800f87a <pbuf_copy+0x146>
 800f866:	4b15      	ldr	r3, [pc, #84]	; (800f8bc <pbuf_copy+0x188>)
 800f868:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f86c:	4919      	ldr	r1, [pc, #100]	; (800f8d4 <pbuf_copy+0x1a0>)
 800f86e:	4815      	ldr	r0, [pc, #84]	; (800f8c4 <pbuf_copy+0x190>)
 800f870:	f009 fb40 	bl	8018ef4 <iprintf>
 800f874:	f06f 0305 	mvn.w	r3, #5
 800f878:	e01b      	b.n	800f8b2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d013      	beq.n	800f8a8 <pbuf_copy+0x174>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	895a      	ldrh	r2, [r3, #10]
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	891b      	ldrh	r3, [r3, #8]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d10d      	bne.n	800f8a8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d009      	beq.n	800f8a8 <pbuf_copy+0x174>
 800f894:	4b09      	ldr	r3, [pc, #36]	; (800f8bc <pbuf_copy+0x188>)
 800f896:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f89a:	490e      	ldr	r1, [pc, #56]	; (800f8d4 <pbuf_copy+0x1a0>)
 800f89c:	4809      	ldr	r0, [pc, #36]	; (800f8c4 <pbuf_copy+0x190>)
 800f89e:	f009 fb29 	bl	8018ef4 <iprintf>
 800f8a2:	f06f 0305 	mvn.w	r3, #5
 800f8a6:	e004      	b.n	800f8b2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	f47f af61 	bne.w	800f772 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f8b0:	2300      	movs	r3, #0
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3718      	adds	r7, #24
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	0801ab78 	.word	0x0801ab78
 800f8c0:	0801ae20 	.word	0x0801ae20
 800f8c4:	0801abd8 	.word	0x0801abd8
 800f8c8:	0801ae50 	.word	0x0801ae50
 800f8cc:	0801ae68 	.word	0x0801ae68
 800f8d0:	0801ae84 	.word	0x0801ae84
 800f8d4:	0801ae94 	.word	0x0801ae94

0800f8d8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b088      	sub	sp, #32
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	4611      	mov	r1, r2
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	460b      	mov	r3, r1
 800f8e8:	80fb      	strh	r3, [r7, #6]
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d108      	bne.n	800f90e <pbuf_copy_partial+0x36>
 800f8fc:	4b2b      	ldr	r3, [pc, #172]	; (800f9ac <pbuf_copy_partial+0xd4>)
 800f8fe:	f240 420a 	movw	r2, #1034	; 0x40a
 800f902:	492b      	ldr	r1, [pc, #172]	; (800f9b0 <pbuf_copy_partial+0xd8>)
 800f904:	482b      	ldr	r0, [pc, #172]	; (800f9b4 <pbuf_copy_partial+0xdc>)
 800f906:	f009 faf5 	bl	8018ef4 <iprintf>
 800f90a:	2300      	movs	r3, #0
 800f90c:	e04a      	b.n	800f9a4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d108      	bne.n	800f926 <pbuf_copy_partial+0x4e>
 800f914:	4b25      	ldr	r3, [pc, #148]	; (800f9ac <pbuf_copy_partial+0xd4>)
 800f916:	f240 420b 	movw	r2, #1035	; 0x40b
 800f91a:	4927      	ldr	r1, [pc, #156]	; (800f9b8 <pbuf_copy_partial+0xe0>)
 800f91c:	4825      	ldr	r0, [pc, #148]	; (800f9b4 <pbuf_copy_partial+0xdc>)
 800f91e:	f009 fae9 	bl	8018ef4 <iprintf>
 800f922:	2300      	movs	r3, #0
 800f924:	e03e      	b.n	800f9a4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	61fb      	str	r3, [r7, #28]
 800f92a:	e034      	b.n	800f996 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f92c:	88bb      	ldrh	r3, [r7, #4]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d00a      	beq.n	800f948 <pbuf_copy_partial+0x70>
 800f932:	69fb      	ldr	r3, [r7, #28]
 800f934:	895b      	ldrh	r3, [r3, #10]
 800f936:	88ba      	ldrh	r2, [r7, #4]
 800f938:	429a      	cmp	r2, r3
 800f93a:	d305      	bcc.n	800f948 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f93c:	69fb      	ldr	r3, [r7, #28]
 800f93e:	895b      	ldrh	r3, [r3, #10]
 800f940:	88ba      	ldrh	r2, [r7, #4]
 800f942:	1ad3      	subs	r3, r2, r3
 800f944:	80bb      	strh	r3, [r7, #4]
 800f946:	e023      	b.n	800f990 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	895a      	ldrh	r2, [r3, #10]
 800f94c:	88bb      	ldrh	r3, [r7, #4]
 800f94e:	1ad3      	subs	r3, r2, r3
 800f950:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f952:	8b3a      	ldrh	r2, [r7, #24]
 800f954:	88fb      	ldrh	r3, [r7, #6]
 800f956:	429a      	cmp	r2, r3
 800f958:	d901      	bls.n	800f95e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f95a:	88fb      	ldrh	r3, [r7, #6]
 800f95c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f95e:	8b7b      	ldrh	r3, [r7, #26]
 800f960:	68ba      	ldr	r2, [r7, #8]
 800f962:	18d0      	adds	r0, r2, r3
 800f964:	69fb      	ldr	r3, [r7, #28]
 800f966:	685a      	ldr	r2, [r3, #4]
 800f968:	88bb      	ldrh	r3, [r7, #4]
 800f96a:	4413      	add	r3, r2
 800f96c:	8b3a      	ldrh	r2, [r7, #24]
 800f96e:	4619      	mov	r1, r3
 800f970:	f009 fa00 	bl	8018d74 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f974:	8afa      	ldrh	r2, [r7, #22]
 800f976:	8b3b      	ldrh	r3, [r7, #24]
 800f978:	4413      	add	r3, r2
 800f97a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f97c:	8b7a      	ldrh	r2, [r7, #26]
 800f97e:	8b3b      	ldrh	r3, [r7, #24]
 800f980:	4413      	add	r3, r2
 800f982:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f984:	88fa      	ldrh	r2, [r7, #6]
 800f986:	8b3b      	ldrh	r3, [r7, #24]
 800f988:	1ad3      	subs	r3, r2, r3
 800f98a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f98c:	2300      	movs	r3, #0
 800f98e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	61fb      	str	r3, [r7, #28]
 800f996:	88fb      	ldrh	r3, [r7, #6]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d002      	beq.n	800f9a2 <pbuf_copy_partial+0xca>
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d1c4      	bne.n	800f92c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f9a2:	8afb      	ldrh	r3, [r7, #22]
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3720      	adds	r7, #32
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	0801ab78 	.word	0x0801ab78
 800f9b0:	0801aec0 	.word	0x0801aec0
 800f9b4:	0801abd8 	.word	0x0801abd8
 800f9b8:	0801aee0 	.word	0x0801aee0

0800f9bc <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b088      	sub	sp, #32
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	4613      	mov	r3, r2
 800f9c8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800f9ca:	88fb      	ldrh	r3, [r7, #6]
 800f9cc:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d109      	bne.n	800f9ec <pbuf_take+0x30>
 800f9d8:	4b3a      	ldr	r3, [pc, #232]	; (800fac4 <pbuf_take+0x108>)
 800f9da:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800f9de:	493a      	ldr	r1, [pc, #232]	; (800fac8 <pbuf_take+0x10c>)
 800f9e0:	483a      	ldr	r0, [pc, #232]	; (800facc <pbuf_take+0x110>)
 800f9e2:	f009 fa87 	bl	8018ef4 <iprintf>
 800f9e6:	f06f 030f 	mvn.w	r3, #15
 800f9ea:	e067      	b.n	800fabc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d109      	bne.n	800fa06 <pbuf_take+0x4a>
 800f9f2:	4b34      	ldr	r3, [pc, #208]	; (800fac4 <pbuf_take+0x108>)
 800f9f4:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800f9f8:	4935      	ldr	r1, [pc, #212]	; (800fad0 <pbuf_take+0x114>)
 800f9fa:	4834      	ldr	r0, [pc, #208]	; (800facc <pbuf_take+0x110>)
 800f9fc:	f009 fa7a 	bl	8018ef4 <iprintf>
 800fa00:	f06f 030f 	mvn.w	r3, #15
 800fa04:	e05a      	b.n	800fabc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	891b      	ldrh	r3, [r3, #8]
 800fa0a:	88fa      	ldrh	r2, [r7, #6]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d909      	bls.n	800fa24 <pbuf_take+0x68>
 800fa10:	4b2c      	ldr	r3, [pc, #176]	; (800fac4 <pbuf_take+0x108>)
 800fa12:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800fa16:	492f      	ldr	r1, [pc, #188]	; (800fad4 <pbuf_take+0x118>)
 800fa18:	482c      	ldr	r0, [pc, #176]	; (800facc <pbuf_take+0x110>)
 800fa1a:	f009 fa6b 	bl	8018ef4 <iprintf>
 800fa1e:	f04f 33ff 	mov.w	r3, #4294967295
 800fa22:	e04b      	b.n	800fabc <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d007      	beq.n	800fa3a <pbuf_take+0x7e>
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d004      	beq.n	800fa3a <pbuf_take+0x7e>
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	891b      	ldrh	r3, [r3, #8]
 800fa34:	88fa      	ldrh	r2, [r7, #6]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d902      	bls.n	800fa40 <pbuf_take+0x84>
    return ERR_ARG;
 800fa3a:	f06f 030f 	mvn.w	r3, #15
 800fa3e:	e03d      	b.n	800fabc <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	61fb      	str	r3, [r7, #28]
 800fa44:	e028      	b.n	800fa98 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d106      	bne.n	800fa5a <pbuf_take+0x9e>
 800fa4c:	4b1d      	ldr	r3, [pc, #116]	; (800fac4 <pbuf_take+0x108>)
 800fa4e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800fa52:	4921      	ldr	r1, [pc, #132]	; (800fad8 <pbuf_take+0x11c>)
 800fa54:	481d      	ldr	r0, [pc, #116]	; (800facc <pbuf_take+0x110>)
 800fa56:	f009 fa4d 	bl	8018ef4 <iprintf>
    buf_copy_len = total_copy_len;
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800fa5e:	69fb      	ldr	r3, [r7, #28]
 800fa60:	895b      	ldrh	r3, [r3, #10]
 800fa62:	461a      	mov	r2, r3
 800fa64:	69bb      	ldr	r3, [r7, #24]
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d902      	bls.n	800fa70 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800fa6a:	69fb      	ldr	r3, [r7, #28]
 800fa6c:	895b      	ldrh	r3, [r3, #10]
 800fa6e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800fa70:	69fb      	ldr	r3, [r7, #28]
 800fa72:	6858      	ldr	r0, [r3, #4]
 800fa74:	68ba      	ldr	r2, [r7, #8]
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	4413      	add	r3, r2
 800fa7a:	69ba      	ldr	r2, [r7, #24]
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	f009 f979 	bl	8018d74 <memcpy>
    total_copy_len -= buf_copy_len;
 800fa82:	697a      	ldr	r2, [r7, #20]
 800fa84:	69bb      	ldr	r3, [r7, #24]
 800fa86:	1ad3      	subs	r3, r2, r3
 800fa88:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800fa8a:	693a      	ldr	r2, [r7, #16]
 800fa8c:	69bb      	ldr	r3, [r7, #24]
 800fa8e:	4413      	add	r3, r2
 800fa90:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	61fb      	str	r3, [r7, #28]
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d1d3      	bne.n	800fa46 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d103      	bne.n	800faac <pbuf_take+0xf0>
 800faa4:	88fb      	ldrh	r3, [r7, #6]
 800faa6:	693a      	ldr	r2, [r7, #16]
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d006      	beq.n	800faba <pbuf_take+0xfe>
 800faac:	4b05      	ldr	r3, [pc, #20]	; (800fac4 <pbuf_take+0x108>)
 800faae:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800fab2:	490a      	ldr	r1, [pc, #40]	; (800fadc <pbuf_take+0x120>)
 800fab4:	4805      	ldr	r0, [pc, #20]	; (800facc <pbuf_take+0x110>)
 800fab6:	f009 fa1d 	bl	8018ef4 <iprintf>
  return ERR_OK;
 800faba:	2300      	movs	r3, #0
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3720      	adds	r7, #32
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	0801ab78 	.word	0x0801ab78
 800fac8:	0801af50 	.word	0x0801af50
 800facc:	0801abd8 	.word	0x0801abd8
 800fad0:	0801af68 	.word	0x0801af68
 800fad4:	0801af84 	.word	0x0801af84
 800fad8:	0801afa4 	.word	0x0801afa4
 800fadc:	0801afbc 	.word	0x0801afbc

0800fae0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b084      	sub	sp, #16
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	4603      	mov	r3, r0
 800fae8:	603a      	str	r2, [r7, #0]
 800faea:	71fb      	strb	r3, [r7, #7]
 800faec:	460b      	mov	r3, r1
 800faee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	8919      	ldrh	r1, [r3, #8]
 800faf4:	88ba      	ldrh	r2, [r7, #4]
 800faf6:	79fb      	ldrb	r3, [r7, #7]
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7ff fa1f 	bl	800ef3c <pbuf_alloc>
 800fafe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d101      	bne.n	800fb0a <pbuf_clone+0x2a>
    return NULL;
 800fb06:	2300      	movs	r3, #0
 800fb08:	e011      	b.n	800fb2e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800fb0a:	6839      	ldr	r1, [r7, #0]
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	f7ff fe11 	bl	800f734 <pbuf_copy>
 800fb12:	4603      	mov	r3, r0
 800fb14:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800fb16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d006      	beq.n	800fb2c <pbuf_clone+0x4c>
 800fb1e:	4b06      	ldr	r3, [pc, #24]	; (800fb38 <pbuf_clone+0x58>)
 800fb20:	f240 5224 	movw	r2, #1316	; 0x524
 800fb24:	4905      	ldr	r1, [pc, #20]	; (800fb3c <pbuf_clone+0x5c>)
 800fb26:	4806      	ldr	r0, [pc, #24]	; (800fb40 <pbuf_clone+0x60>)
 800fb28:	f009 f9e4 	bl	8018ef4 <iprintf>
  return q;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3710      	adds	r7, #16
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}
 800fb36:	bf00      	nop
 800fb38:	0801ab78 	.word	0x0801ab78
 800fb3c:	0801afec 	.word	0x0801afec
 800fb40:	0801abd8 	.word	0x0801abd8

0800fb44 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fb48:	f009 fa02 	bl	8018f50 <rand>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fb54:	b29b      	uxth	r3, r3
 800fb56:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800fb5a:	b29a      	uxth	r2, r3
 800fb5c:	4b01      	ldr	r3, [pc, #4]	; (800fb64 <tcp_init+0x20>)
 800fb5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fb60:	bf00      	nop
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	200005ac 	.word	0x200005ac

0800fb68 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	7d1b      	ldrb	r3, [r3, #20]
 800fb74:	2b01      	cmp	r3, #1
 800fb76:	d105      	bne.n	800fb84 <tcp_free+0x1c>
 800fb78:	4b06      	ldr	r3, [pc, #24]	; (800fb94 <tcp_free+0x2c>)
 800fb7a:	22d4      	movs	r2, #212	; 0xd4
 800fb7c:	4906      	ldr	r1, [pc, #24]	; (800fb98 <tcp_free+0x30>)
 800fb7e:	4807      	ldr	r0, [pc, #28]	; (800fb9c <tcp_free+0x34>)
 800fb80:	f009 f9b8 	bl	8018ef4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800fb84:	6879      	ldr	r1, [r7, #4]
 800fb86:	2001      	movs	r0, #1
 800fb88:	f7fe feaa 	bl	800e8e0 <memp_free>
}
 800fb8c:	bf00      	nop
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	0801b078 	.word	0x0801b078
 800fb98:	0801b0a8 	.word	0x0801b0a8
 800fb9c:	0801b0bc 	.word	0x0801b0bc

0800fba0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	7d1b      	ldrb	r3, [r3, #20]
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d105      	bne.n	800fbbc <tcp_free_listen+0x1c>
 800fbb0:	4b06      	ldr	r3, [pc, #24]	; (800fbcc <tcp_free_listen+0x2c>)
 800fbb2:	22df      	movs	r2, #223	; 0xdf
 800fbb4:	4906      	ldr	r1, [pc, #24]	; (800fbd0 <tcp_free_listen+0x30>)
 800fbb6:	4807      	ldr	r0, [pc, #28]	; (800fbd4 <tcp_free_listen+0x34>)
 800fbb8:	f009 f99c 	bl	8018ef4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800fbbc:	6879      	ldr	r1, [r7, #4]
 800fbbe:	2002      	movs	r0, #2
 800fbc0:	f7fe fe8e 	bl	800e8e0 <memp_free>
}
 800fbc4:	bf00      	nop
 800fbc6:	3708      	adds	r7, #8
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}
 800fbcc:	0801b078 	.word	0x0801b078
 800fbd0:	0801b0e4 	.word	0x0801b0e4
 800fbd4:	0801b0bc 	.word	0x0801b0bc

0800fbd8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800fbdc:	f001 f802 	bl	8010be4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800fbe0:	4b07      	ldr	r3, [pc, #28]	; (800fc00 <tcp_tmr+0x28>)
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	3301      	adds	r3, #1
 800fbe6:	b2da      	uxtb	r2, r3
 800fbe8:	4b05      	ldr	r3, [pc, #20]	; (800fc00 <tcp_tmr+0x28>)
 800fbea:	701a      	strb	r2, [r3, #0]
 800fbec:	4b04      	ldr	r3, [pc, #16]	; (800fc00 <tcp_tmr+0x28>)
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	f003 0301 	and.w	r3, r3, #1
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d001      	beq.n	800fbfc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800fbf8:	f000 fcb4 	bl	8010564 <tcp_slowtmr>
  }
}
 800fbfc:	bf00      	nop
 800fbfe:	bd80      	pop	{r7, pc}
 800fc00:	200006a5 	.word	0x200006a5

0800fc04 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b084      	sub	sp, #16
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d105      	bne.n	800fc20 <tcp_remove_listener+0x1c>
 800fc14:	4b0d      	ldr	r3, [pc, #52]	; (800fc4c <tcp_remove_listener+0x48>)
 800fc16:	22ff      	movs	r2, #255	; 0xff
 800fc18:	490d      	ldr	r1, [pc, #52]	; (800fc50 <tcp_remove_listener+0x4c>)
 800fc1a:	480e      	ldr	r0, [pc, #56]	; (800fc54 <tcp_remove_listener+0x50>)
 800fc1c:	f009 f96a 	bl	8018ef4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	60fb      	str	r3, [r7, #12]
 800fc24:	e00a      	b.n	800fc3c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc2a:	683a      	ldr	r2, [r7, #0]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d102      	bne.n	800fc36 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2200      	movs	r2, #0
 800fc34:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	68db      	ldr	r3, [r3, #12]
 800fc3a:	60fb      	str	r3, [r7, #12]
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d1f1      	bne.n	800fc26 <tcp_remove_listener+0x22>
    }
  }
}
 800fc42:	bf00      	nop
 800fc44:	bf00      	nop
 800fc46:	3710      	adds	r7, #16
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	0801b078 	.word	0x0801b078
 800fc50:	0801b100 	.word	0x0801b100
 800fc54:	0801b0bc 	.word	0x0801b0bc

0800fc58 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b084      	sub	sp, #16
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d106      	bne.n	800fc74 <tcp_listen_closed+0x1c>
 800fc66:	4b14      	ldr	r3, [pc, #80]	; (800fcb8 <tcp_listen_closed+0x60>)
 800fc68:	f240 1211 	movw	r2, #273	; 0x111
 800fc6c:	4913      	ldr	r1, [pc, #76]	; (800fcbc <tcp_listen_closed+0x64>)
 800fc6e:	4814      	ldr	r0, [pc, #80]	; (800fcc0 <tcp_listen_closed+0x68>)
 800fc70:	f009 f940 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	7d1b      	ldrb	r3, [r3, #20]
 800fc78:	2b01      	cmp	r3, #1
 800fc7a:	d006      	beq.n	800fc8a <tcp_listen_closed+0x32>
 800fc7c:	4b0e      	ldr	r3, [pc, #56]	; (800fcb8 <tcp_listen_closed+0x60>)
 800fc7e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800fc82:	4910      	ldr	r1, [pc, #64]	; (800fcc4 <tcp_listen_closed+0x6c>)
 800fc84:	480e      	ldr	r0, [pc, #56]	; (800fcc0 <tcp_listen_closed+0x68>)
 800fc86:	f009 f935 	bl	8018ef4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	60fb      	str	r3, [r7, #12]
 800fc8e:	e00b      	b.n	800fca8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800fc90:	4a0d      	ldr	r2, [pc, #52]	; (800fcc8 <tcp_listen_closed+0x70>)
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	6879      	ldr	r1, [r7, #4]
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7ff ffb1 	bl	800fc04 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	3301      	adds	r3, #1
 800fca6:	60fb      	str	r3, [r7, #12]
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2b03      	cmp	r3, #3
 800fcac:	d9f0      	bls.n	800fc90 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800fcae:	bf00      	nop
 800fcb0:	bf00      	nop
 800fcb2:	3710      	adds	r7, #16
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	0801b078 	.word	0x0801b078
 800fcbc:	0801b128 	.word	0x0801b128
 800fcc0:	0801b0bc 	.word	0x0801b0bc
 800fcc4:	0801b134 	.word	0x0801b134
 800fcc8:	0801d1dc 	.word	0x0801d1dc

0800fccc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800fccc:	b5b0      	push	{r4, r5, r7, lr}
 800fcce:	b088      	sub	sp, #32
 800fcd0:	af04      	add	r7, sp, #16
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d106      	bne.n	800fcec <tcp_close_shutdown+0x20>
 800fcde:	4b63      	ldr	r3, [pc, #396]	; (800fe6c <tcp_close_shutdown+0x1a0>)
 800fce0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800fce4:	4962      	ldr	r1, [pc, #392]	; (800fe70 <tcp_close_shutdown+0x1a4>)
 800fce6:	4863      	ldr	r0, [pc, #396]	; (800fe74 <tcp_close_shutdown+0x1a8>)
 800fce8:	f009 f904 	bl	8018ef4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800fcec:	78fb      	ldrb	r3, [r7, #3]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d067      	beq.n	800fdc2 <tcp_close_shutdown+0xf6>
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	7d1b      	ldrb	r3, [r3, #20]
 800fcf6:	2b04      	cmp	r3, #4
 800fcf8:	d003      	beq.n	800fd02 <tcp_close_shutdown+0x36>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	7d1b      	ldrb	r3, [r3, #20]
 800fcfe:	2b07      	cmp	r3, #7
 800fd00:	d15f      	bne.n	800fdc2 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d105      	bne.n	800fd16 <tcp_close_shutdown+0x4a>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd0e:	f241 0268 	movw	r2, #4200	; 0x1068
 800fd12:	4293      	cmp	r3, r2
 800fd14:	d055      	beq.n	800fdc2 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	8b5b      	ldrh	r3, [r3, #26]
 800fd1a:	f003 0310 	and.w	r3, r3, #16
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d106      	bne.n	800fd30 <tcp_close_shutdown+0x64>
 800fd22:	4b52      	ldr	r3, [pc, #328]	; (800fe6c <tcp_close_shutdown+0x1a0>)
 800fd24:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800fd28:	4953      	ldr	r1, [pc, #332]	; (800fe78 <tcp_close_shutdown+0x1ac>)
 800fd2a:	4852      	ldr	r0, [pc, #328]	; (800fe74 <tcp_close_shutdown+0x1a8>)
 800fd2c:	f009 f8e2 	bl	8018ef4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fd38:	687d      	ldr	r5, [r7, #4]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	3304      	adds	r3, #4
 800fd3e:	687a      	ldr	r2, [r7, #4]
 800fd40:	8ad2      	ldrh	r2, [r2, #22]
 800fd42:	6879      	ldr	r1, [r7, #4]
 800fd44:	8b09      	ldrh	r1, [r1, #24]
 800fd46:	9102      	str	r1, [sp, #8]
 800fd48:	9201      	str	r2, [sp, #4]
 800fd4a:	9300      	str	r3, [sp, #0]
 800fd4c:	462b      	mov	r3, r5
 800fd4e:	4622      	mov	r2, r4
 800fd50:	4601      	mov	r1, r0
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f005 fcfc 	bl	8015750 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f001 fad7 	bl	801130c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fd5e:	4b47      	ldr	r3, [pc, #284]	; (800fe7c <tcp_close_shutdown+0x1b0>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	687a      	ldr	r2, [r7, #4]
 800fd64:	429a      	cmp	r2, r3
 800fd66:	d105      	bne.n	800fd74 <tcp_close_shutdown+0xa8>
 800fd68:	4b44      	ldr	r3, [pc, #272]	; (800fe7c <tcp_close_shutdown+0x1b0>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	68db      	ldr	r3, [r3, #12]
 800fd6e:	4a43      	ldr	r2, [pc, #268]	; (800fe7c <tcp_close_shutdown+0x1b0>)
 800fd70:	6013      	str	r3, [r2, #0]
 800fd72:	e013      	b.n	800fd9c <tcp_close_shutdown+0xd0>
 800fd74:	4b41      	ldr	r3, [pc, #260]	; (800fe7c <tcp_close_shutdown+0x1b0>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	60fb      	str	r3, [r7, #12]
 800fd7a:	e00c      	b.n	800fd96 <tcp_close_shutdown+0xca>
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	68db      	ldr	r3, [r3, #12]
 800fd80:	687a      	ldr	r2, [r7, #4]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d104      	bne.n	800fd90 <tcp_close_shutdown+0xc4>
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	68da      	ldr	r2, [r3, #12]
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	60da      	str	r2, [r3, #12]
 800fd8e:	e005      	b.n	800fd9c <tcp_close_shutdown+0xd0>
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	68db      	ldr	r3, [r3, #12]
 800fd94:	60fb      	str	r3, [r7, #12]
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d1ef      	bne.n	800fd7c <tcp_close_shutdown+0xb0>
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	60da      	str	r2, [r3, #12]
 800fda2:	4b37      	ldr	r3, [pc, #220]	; (800fe80 <tcp_close_shutdown+0x1b4>)
 800fda4:	2201      	movs	r2, #1
 800fda6:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800fda8:	4b36      	ldr	r3, [pc, #216]	; (800fe84 <tcp_close_shutdown+0x1b8>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	687a      	ldr	r2, [r7, #4]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d102      	bne.n	800fdb8 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fdb2:	f003 ff6d 	bl	8013c90 <tcp_trigger_input_pcb_close>
 800fdb6:	e002      	b.n	800fdbe <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f7ff fed5 	bl	800fb68 <tcp_free>
      }
      return ERR_OK;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	e050      	b.n	800fe64 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	7d1b      	ldrb	r3, [r3, #20]
 800fdc6:	2b02      	cmp	r3, #2
 800fdc8:	d03b      	beq.n	800fe42 <tcp_close_shutdown+0x176>
 800fdca:	2b02      	cmp	r3, #2
 800fdcc:	dc44      	bgt.n	800fe58 <tcp_close_shutdown+0x18c>
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d002      	beq.n	800fdd8 <tcp_close_shutdown+0x10c>
 800fdd2:	2b01      	cmp	r3, #1
 800fdd4:	d02a      	beq.n	800fe2c <tcp_close_shutdown+0x160>
 800fdd6:	e03f      	b.n	800fe58 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	8adb      	ldrh	r3, [r3, #22]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d021      	beq.n	800fe24 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fde0:	4b29      	ldr	r3, [pc, #164]	; (800fe88 <tcp_close_shutdown+0x1bc>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	687a      	ldr	r2, [r7, #4]
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d105      	bne.n	800fdf6 <tcp_close_shutdown+0x12a>
 800fdea:	4b27      	ldr	r3, [pc, #156]	; (800fe88 <tcp_close_shutdown+0x1bc>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	68db      	ldr	r3, [r3, #12]
 800fdf0:	4a25      	ldr	r2, [pc, #148]	; (800fe88 <tcp_close_shutdown+0x1bc>)
 800fdf2:	6013      	str	r3, [r2, #0]
 800fdf4:	e013      	b.n	800fe1e <tcp_close_shutdown+0x152>
 800fdf6:	4b24      	ldr	r3, [pc, #144]	; (800fe88 <tcp_close_shutdown+0x1bc>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	60bb      	str	r3, [r7, #8]
 800fdfc:	e00c      	b.n	800fe18 <tcp_close_shutdown+0x14c>
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	68db      	ldr	r3, [r3, #12]
 800fe02:	687a      	ldr	r2, [r7, #4]
 800fe04:	429a      	cmp	r2, r3
 800fe06:	d104      	bne.n	800fe12 <tcp_close_shutdown+0x146>
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	68da      	ldr	r2, [r3, #12]
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	60da      	str	r2, [r3, #12]
 800fe10:	e005      	b.n	800fe1e <tcp_close_shutdown+0x152>
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	68db      	ldr	r3, [r3, #12]
 800fe16:	60bb      	str	r3, [r7, #8]
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d1ef      	bne.n	800fdfe <tcp_close_shutdown+0x132>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2200      	movs	r2, #0
 800fe22:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f7ff fe9f 	bl	800fb68 <tcp_free>
      break;
 800fe2a:	e01a      	b.n	800fe62 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7ff ff13 	bl	800fc58 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fe32:	6879      	ldr	r1, [r7, #4]
 800fe34:	4815      	ldr	r0, [pc, #84]	; (800fe8c <tcp_close_shutdown+0x1c0>)
 800fe36:	f001 fab9 	bl	80113ac <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f7ff feb0 	bl	800fba0 <tcp_free_listen>
      break;
 800fe40:	e00f      	b.n	800fe62 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fe42:	6879      	ldr	r1, [r7, #4]
 800fe44:	480d      	ldr	r0, [pc, #52]	; (800fe7c <tcp_close_shutdown+0x1b0>)
 800fe46:	f001 fab1 	bl	80113ac <tcp_pcb_remove>
 800fe4a:	4b0d      	ldr	r3, [pc, #52]	; (800fe80 <tcp_close_shutdown+0x1b4>)
 800fe4c:	2201      	movs	r2, #1
 800fe4e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f7ff fe89 	bl	800fb68 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800fe56:	e004      	b.n	800fe62 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f000 f819 	bl	800fe90 <tcp_close_shutdown_fin>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	e000      	b.n	800fe64 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800fe62:	2300      	movs	r3, #0
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3710      	adds	r7, #16
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bdb0      	pop	{r4, r5, r7, pc}
 800fe6c:	0801b078 	.word	0x0801b078
 800fe70:	0801b14c 	.word	0x0801b14c
 800fe74:	0801b0bc 	.word	0x0801b0bc
 800fe78:	0801b16c 	.word	0x0801b16c
 800fe7c:	2001879c 	.word	0x2001879c
 800fe80:	20018798 	.word	0x20018798
 800fe84:	200187b0 	.word	0x200187b0
 800fe88:	200187a8 	.word	0x200187a8
 800fe8c:	200187a4 	.word	0x200187a4

0800fe90 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d106      	bne.n	800feac <tcp_close_shutdown_fin+0x1c>
 800fe9e:	4b2e      	ldr	r3, [pc, #184]	; (800ff58 <tcp_close_shutdown_fin+0xc8>)
 800fea0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800fea4:	492d      	ldr	r1, [pc, #180]	; (800ff5c <tcp_close_shutdown_fin+0xcc>)
 800fea6:	482e      	ldr	r0, [pc, #184]	; (800ff60 <tcp_close_shutdown_fin+0xd0>)
 800fea8:	f009 f824 	bl	8018ef4 <iprintf>

  switch (pcb->state) {
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	7d1b      	ldrb	r3, [r3, #20]
 800feb0:	2b07      	cmp	r3, #7
 800feb2:	d020      	beq.n	800fef6 <tcp_close_shutdown_fin+0x66>
 800feb4:	2b07      	cmp	r3, #7
 800feb6:	dc2b      	bgt.n	800ff10 <tcp_close_shutdown_fin+0x80>
 800feb8:	2b03      	cmp	r3, #3
 800feba:	d002      	beq.n	800fec2 <tcp_close_shutdown_fin+0x32>
 800febc:	2b04      	cmp	r3, #4
 800febe:	d00d      	beq.n	800fedc <tcp_close_shutdown_fin+0x4c>
 800fec0:	e026      	b.n	800ff10 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f004 fd52 	bl	801496c <tcp_send_fin>
 800fec8:	4603      	mov	r3, r0
 800feca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d11f      	bne.n	800ff14 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2205      	movs	r2, #5
 800fed8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800feda:	e01b      	b.n	800ff14 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f004 fd45 	bl	801496c <tcp_send_fin>
 800fee2:	4603      	mov	r3, r0
 800fee4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d114      	bne.n	800ff18 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2205      	movs	r2, #5
 800fef2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fef4:	e010      	b.n	800ff18 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f004 fd38 	bl	801496c <tcp_send_fin>
 800fefc:	4603      	mov	r3, r0
 800fefe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ff00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d109      	bne.n	800ff1c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2209      	movs	r2, #9
 800ff0c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff0e:	e005      	b.n	800ff1c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ff10:	2300      	movs	r3, #0
 800ff12:	e01c      	b.n	800ff4e <tcp_close_shutdown_fin+0xbe>
      break;
 800ff14:	bf00      	nop
 800ff16:	e002      	b.n	800ff1e <tcp_close_shutdown_fin+0x8e>
      break;
 800ff18:	bf00      	nop
 800ff1a:	e000      	b.n	800ff1e <tcp_close_shutdown_fin+0x8e>
      break;
 800ff1c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ff1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d103      	bne.n	800ff2e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f004 fe5e 	bl	8014be8 <tcp_output>
 800ff2c:	e00d      	b.n	800ff4a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ff2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff36:	d108      	bne.n	800ff4a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	8b5b      	ldrh	r3, [r3, #26]
 800ff3c:	f043 0308 	orr.w	r3, r3, #8
 800ff40:	b29a      	uxth	r2, r3
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ff46:	2300      	movs	r3, #0
 800ff48:	e001      	b.n	800ff4e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ff4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3710      	adds	r7, #16
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	bf00      	nop
 800ff58:	0801b078 	.word	0x0801b078
 800ff5c:	0801b128 	.word	0x0801b128
 800ff60:	0801b0bc 	.word	0x0801b0bc

0800ff64 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b082      	sub	sp, #8
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d109      	bne.n	800ff86 <tcp_close+0x22>
 800ff72:	4b0f      	ldr	r3, [pc, #60]	; (800ffb0 <tcp_close+0x4c>)
 800ff74:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ff78:	490e      	ldr	r1, [pc, #56]	; (800ffb4 <tcp_close+0x50>)
 800ff7a:	480f      	ldr	r0, [pc, #60]	; (800ffb8 <tcp_close+0x54>)
 800ff7c:	f008 ffba 	bl	8018ef4 <iprintf>
 800ff80:	f06f 030f 	mvn.w	r3, #15
 800ff84:	e00f      	b.n	800ffa6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	7d1b      	ldrb	r3, [r3, #20]
 800ff8a:	2b01      	cmp	r3, #1
 800ff8c:	d006      	beq.n	800ff9c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	8b5b      	ldrh	r3, [r3, #26]
 800ff92:	f043 0310 	orr.w	r3, r3, #16
 800ff96:	b29a      	uxth	r2, r3
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ff9c:	2101      	movs	r1, #1
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f7ff fe94 	bl	800fccc <tcp_close_shutdown>
 800ffa4:	4603      	mov	r3, r0
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3708      	adds	r7, #8
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	bf00      	nop
 800ffb0:	0801b078 	.word	0x0801b078
 800ffb4:	0801b188 	.word	0x0801b188
 800ffb8:	0801b0bc 	.word	0x0801b0bc

0800ffbc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b08e      	sub	sp, #56	; 0x38
 800ffc0:	af04      	add	r7, sp, #16
 800ffc2:	6078      	str	r0, [r7, #4]
 800ffc4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d107      	bne.n	800ffdc <tcp_abandon+0x20>
 800ffcc:	4b52      	ldr	r3, [pc, #328]	; (8010118 <tcp_abandon+0x15c>)
 800ffce:	f240 223d 	movw	r2, #573	; 0x23d
 800ffd2:	4952      	ldr	r1, [pc, #328]	; (801011c <tcp_abandon+0x160>)
 800ffd4:	4852      	ldr	r0, [pc, #328]	; (8010120 <tcp_abandon+0x164>)
 800ffd6:	f008 ff8d 	bl	8018ef4 <iprintf>
 800ffda:	e099      	b.n	8010110 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	7d1b      	ldrb	r3, [r3, #20]
 800ffe0:	2b01      	cmp	r3, #1
 800ffe2:	d106      	bne.n	800fff2 <tcp_abandon+0x36>
 800ffe4:	4b4c      	ldr	r3, [pc, #304]	; (8010118 <tcp_abandon+0x15c>)
 800ffe6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ffea:	494e      	ldr	r1, [pc, #312]	; (8010124 <tcp_abandon+0x168>)
 800ffec:	484c      	ldr	r0, [pc, #304]	; (8010120 <tcp_abandon+0x164>)
 800ffee:	f008 ff81 	bl	8018ef4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	7d1b      	ldrb	r3, [r3, #20]
 800fff6:	2b0a      	cmp	r3, #10
 800fff8:	d107      	bne.n	801000a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800fffa:	6879      	ldr	r1, [r7, #4]
 800fffc:	484a      	ldr	r0, [pc, #296]	; (8010128 <tcp_abandon+0x16c>)
 800fffe:	f001 f9d5 	bl	80113ac <tcp_pcb_remove>
    tcp_free(pcb);
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f7ff fdb0 	bl	800fb68 <tcp_free>
 8010008:	e082      	b.n	8010110 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801000a:	2300      	movs	r3, #0
 801000c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801000e:	2300      	movs	r3, #0
 8010010:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010016:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801001c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010024:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	691b      	ldr	r3, [r3, #16]
 801002a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	7d1b      	ldrb	r3, [r3, #20]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d126      	bne.n	8010082 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	8adb      	ldrh	r3, [r3, #22]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d02e      	beq.n	801009a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801003c:	4b3b      	ldr	r3, [pc, #236]	; (801012c <tcp_abandon+0x170>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	687a      	ldr	r2, [r7, #4]
 8010042:	429a      	cmp	r2, r3
 8010044:	d105      	bne.n	8010052 <tcp_abandon+0x96>
 8010046:	4b39      	ldr	r3, [pc, #228]	; (801012c <tcp_abandon+0x170>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	68db      	ldr	r3, [r3, #12]
 801004c:	4a37      	ldr	r2, [pc, #220]	; (801012c <tcp_abandon+0x170>)
 801004e:	6013      	str	r3, [r2, #0]
 8010050:	e013      	b.n	801007a <tcp_abandon+0xbe>
 8010052:	4b36      	ldr	r3, [pc, #216]	; (801012c <tcp_abandon+0x170>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	61fb      	str	r3, [r7, #28]
 8010058:	e00c      	b.n	8010074 <tcp_abandon+0xb8>
 801005a:	69fb      	ldr	r3, [r7, #28]
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	429a      	cmp	r2, r3
 8010062:	d104      	bne.n	801006e <tcp_abandon+0xb2>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	68da      	ldr	r2, [r3, #12]
 8010068:	69fb      	ldr	r3, [r7, #28]
 801006a:	60da      	str	r2, [r3, #12]
 801006c:	e005      	b.n	801007a <tcp_abandon+0xbe>
 801006e:	69fb      	ldr	r3, [r7, #28]
 8010070:	68db      	ldr	r3, [r3, #12]
 8010072:	61fb      	str	r3, [r7, #28]
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d1ef      	bne.n	801005a <tcp_abandon+0x9e>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2200      	movs	r2, #0
 801007e:	60da      	str	r2, [r3, #12]
 8010080:	e00b      	b.n	801009a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	8adb      	ldrh	r3, [r3, #22]
 801008a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801008c:	6879      	ldr	r1, [r7, #4]
 801008e:	4828      	ldr	r0, [pc, #160]	; (8010130 <tcp_abandon+0x174>)
 8010090:	f001 f98c 	bl	80113ac <tcp_pcb_remove>
 8010094:	4b27      	ldr	r3, [pc, #156]	; (8010134 <tcp_abandon+0x178>)
 8010096:	2201      	movs	r2, #1
 8010098:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d004      	beq.n	80100ac <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100a6:	4618      	mov	r0, r3
 80100a8:	f000 fe7e 	bl	8010da8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d004      	beq.n	80100be <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100b8:	4618      	mov	r0, r3
 80100ba:	f000 fe75 	bl	8010da8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d004      	beq.n	80100d0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100ca:	4618      	mov	r0, r3
 80100cc:	f000 fe6c 	bl	8010da8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80100d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d00e      	beq.n	80100f4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80100d6:	6879      	ldr	r1, [r7, #4]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	3304      	adds	r3, #4
 80100dc:	687a      	ldr	r2, [r7, #4]
 80100de:	8b12      	ldrh	r2, [r2, #24]
 80100e0:	9202      	str	r2, [sp, #8]
 80100e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80100e4:	9201      	str	r2, [sp, #4]
 80100e6:	9300      	str	r3, [sp, #0]
 80100e8:	460b      	mov	r3, r1
 80100ea:	697a      	ldr	r2, [r7, #20]
 80100ec:	69b9      	ldr	r1, [r7, #24]
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f005 fb2e 	bl	8015750 <tcp_rst>
    }
    last_state = pcb->state;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	7d1b      	ldrb	r3, [r3, #20]
 80100f8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f7ff fd34 	bl	800fb68 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d004      	beq.n	8010110 <tcp_abandon+0x154>
 8010106:	693b      	ldr	r3, [r7, #16]
 8010108:	f06f 010c 	mvn.w	r1, #12
 801010c:	68f8      	ldr	r0, [r7, #12]
 801010e:	4798      	blx	r3
  }
}
 8010110:	3728      	adds	r7, #40	; 0x28
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	0801b078 	.word	0x0801b078
 801011c:	0801b1bc 	.word	0x0801b1bc
 8010120:	0801b0bc 	.word	0x0801b0bc
 8010124:	0801b1d8 	.word	0x0801b1d8
 8010128:	200187ac 	.word	0x200187ac
 801012c:	200187a8 	.word	0x200187a8
 8010130:	2001879c 	.word	0x2001879c
 8010134:	20018798 	.word	0x20018798

08010138 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010140:	2101      	movs	r1, #1
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f7ff ff3a 	bl	800ffbc <tcp_abandon>
}
 8010148:	bf00      	nop
 801014a:	3708      	adds	r7, #8
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}

08010150 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d106      	bne.n	801016c <tcp_update_rcv_ann_wnd+0x1c>
 801015e:	4b25      	ldr	r3, [pc, #148]	; (80101f4 <tcp_update_rcv_ann_wnd+0xa4>)
 8010160:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010164:	4924      	ldr	r1, [pc, #144]	; (80101f8 <tcp_update_rcv_ann_wnd+0xa8>)
 8010166:	4825      	ldr	r0, [pc, #148]	; (80101fc <tcp_update_rcv_ann_wnd+0xac>)
 8010168:	f008 fec4 	bl	8018ef4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010174:	4413      	add	r3, r2
 8010176:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801017c:	687a      	ldr	r2, [r7, #4]
 801017e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010180:	f640 0134 	movw	r1, #2100	; 0x834
 8010184:	428a      	cmp	r2, r1
 8010186:	bf28      	it	cs
 8010188:	460a      	movcs	r2, r1
 801018a:	b292      	uxth	r2, r2
 801018c:	4413      	add	r3, r2
 801018e:	68fa      	ldr	r2, [r7, #12]
 8010190:	1ad3      	subs	r3, r2, r3
 8010192:	2b00      	cmp	r3, #0
 8010194:	db08      	blt.n	80101a8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101a2:	68fa      	ldr	r2, [r7, #12]
 80101a4:	1ad3      	subs	r3, r2, r3
 80101a6:	e020      	b.n	80101ea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101b0:	1ad3      	subs	r3, r2, r3
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	dd03      	ble.n	80101be <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2200      	movs	r2, #0
 80101ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80101bc:	e014      	b.n	80101e8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c6:	1ad3      	subs	r3, r2, r3
 80101c8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101d0:	d306      	bcc.n	80101e0 <tcp_update_rcv_ann_wnd+0x90>
 80101d2:	4b08      	ldr	r3, [pc, #32]	; (80101f4 <tcp_update_rcv_ann_wnd+0xa4>)
 80101d4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80101d8:	4909      	ldr	r1, [pc, #36]	; (8010200 <tcp_update_rcv_ann_wnd+0xb0>)
 80101da:	4808      	ldr	r0, [pc, #32]	; (80101fc <tcp_update_rcv_ann_wnd+0xac>)
 80101dc:	f008 fe8a 	bl	8018ef4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	b29a      	uxth	r2, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80101e8:	2300      	movs	r3, #0
  }
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3710      	adds	r7, #16
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
 80101f2:	bf00      	nop
 80101f4:	0801b078 	.word	0x0801b078
 80101f8:	0801b2d4 	.word	0x0801b2d4
 80101fc:	0801b0bc 	.word	0x0801b0bc
 8010200:	0801b2f8 	.word	0x0801b2f8

08010204 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b084      	sub	sp, #16
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	460b      	mov	r3, r1
 801020e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d107      	bne.n	8010226 <tcp_recved+0x22>
 8010216:	4b20      	ldr	r3, [pc, #128]	; (8010298 <tcp_recved+0x94>)
 8010218:	f240 32cf 	movw	r2, #975	; 0x3cf
 801021c:	491f      	ldr	r1, [pc, #124]	; (801029c <tcp_recved+0x98>)
 801021e:	4820      	ldr	r0, [pc, #128]	; (80102a0 <tcp_recved+0x9c>)
 8010220:	f008 fe68 	bl	8018ef4 <iprintf>
 8010224:	e034      	b.n	8010290 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	7d1b      	ldrb	r3, [r3, #20]
 801022a:	2b01      	cmp	r3, #1
 801022c:	d106      	bne.n	801023c <tcp_recved+0x38>
 801022e:	4b1a      	ldr	r3, [pc, #104]	; (8010298 <tcp_recved+0x94>)
 8010230:	f240 32d2 	movw	r2, #978	; 0x3d2
 8010234:	491b      	ldr	r1, [pc, #108]	; (80102a4 <tcp_recved+0xa0>)
 8010236:	481a      	ldr	r0, [pc, #104]	; (80102a0 <tcp_recved+0x9c>)
 8010238:	f008 fe5c 	bl	8018ef4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010240:	887b      	ldrh	r3, [r7, #2]
 8010242:	4413      	add	r3, r2
 8010244:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010246:	89fb      	ldrh	r3, [r7, #14]
 8010248:	f241 0268 	movw	r2, #4200	; 0x1068
 801024c:	4293      	cmp	r3, r2
 801024e:	d804      	bhi.n	801025a <tcp_recved+0x56>
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010254:	89fa      	ldrh	r2, [r7, #14]
 8010256:	429a      	cmp	r2, r3
 8010258:	d204      	bcs.n	8010264 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f241 0268 	movw	r2, #4200	; 0x1068
 8010260:	851a      	strh	r2, [r3, #40]	; 0x28
 8010262:	e002      	b.n	801026a <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	89fa      	ldrh	r2, [r7, #14]
 8010268:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f7ff ff70 	bl	8010150 <tcp_update_rcv_ann_wnd>
 8010270:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	f240 4219 	movw	r2, #1049	; 0x419
 8010278:	4293      	cmp	r3, r2
 801027a:	d909      	bls.n	8010290 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	8b5b      	ldrh	r3, [r3, #26]
 8010280:	f043 0302 	orr.w	r3, r3, #2
 8010284:	b29a      	uxth	r2, r3
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f004 fcac 	bl	8014be8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010290:	3710      	adds	r7, #16
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}
 8010296:	bf00      	nop
 8010298:	0801b078 	.word	0x0801b078
 801029c:	0801b314 	.word	0x0801b314
 80102a0:	0801b0bc 	.word	0x0801b0bc
 80102a4:	0801b32c 	.word	0x0801b32c

080102a8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b083      	sub	sp, #12
 80102ac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80102ae:	2300      	movs	r3, #0
 80102b0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80102b2:	4b1e      	ldr	r3, [pc, #120]	; (801032c <tcp_new_port+0x84>)
 80102b4:	881b      	ldrh	r3, [r3, #0]
 80102b6:	3301      	adds	r3, #1
 80102b8:	b29a      	uxth	r2, r3
 80102ba:	4b1c      	ldr	r3, [pc, #112]	; (801032c <tcp_new_port+0x84>)
 80102bc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80102be:	4b1b      	ldr	r3, [pc, #108]	; (801032c <tcp_new_port+0x84>)
 80102c0:	881b      	ldrh	r3, [r3, #0]
 80102c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d103      	bne.n	80102d2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80102ca:	4b18      	ldr	r3, [pc, #96]	; (801032c <tcp_new_port+0x84>)
 80102cc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80102d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80102d2:	2300      	movs	r3, #0
 80102d4:	71fb      	strb	r3, [r7, #7]
 80102d6:	e01e      	b.n	8010316 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80102d8:	79fb      	ldrb	r3, [r7, #7]
 80102da:	4a15      	ldr	r2, [pc, #84]	; (8010330 <tcp_new_port+0x88>)
 80102dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	603b      	str	r3, [r7, #0]
 80102e4:	e011      	b.n	801030a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	8ada      	ldrh	r2, [r3, #22]
 80102ea:	4b10      	ldr	r3, [pc, #64]	; (801032c <tcp_new_port+0x84>)
 80102ec:	881b      	ldrh	r3, [r3, #0]
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d108      	bne.n	8010304 <tcp_new_port+0x5c>
        n++;
 80102f2:	88bb      	ldrh	r3, [r7, #4]
 80102f4:	3301      	adds	r3, #1
 80102f6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80102f8:	88bb      	ldrh	r3, [r7, #4]
 80102fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80102fe:	d3d8      	bcc.n	80102b2 <tcp_new_port+0xa>
          return 0;
 8010300:	2300      	movs	r3, #0
 8010302:	e00d      	b.n	8010320 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	603b      	str	r3, [r7, #0]
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d1ea      	bne.n	80102e6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010310:	79fb      	ldrb	r3, [r7, #7]
 8010312:	3301      	adds	r3, #1
 8010314:	71fb      	strb	r3, [r7, #7]
 8010316:	79fb      	ldrb	r3, [r7, #7]
 8010318:	2b03      	cmp	r3, #3
 801031a:	d9dd      	bls.n	80102d8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801031c:	4b03      	ldr	r3, [pc, #12]	; (801032c <tcp_new_port+0x84>)
 801031e:	881b      	ldrh	r3, [r3, #0]
}
 8010320:	4618      	mov	r0, r3
 8010322:	370c      	adds	r7, #12
 8010324:	46bd      	mov	sp, r7
 8010326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032a:	4770      	bx	lr
 801032c:	200005ac 	.word	0x200005ac
 8010330:	0801d1dc 	.word	0x0801d1dc

08010334 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b08a      	sub	sp, #40	; 0x28
 8010338:	af00      	add	r7, sp, #0
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	60b9      	str	r1, [r7, #8]
 801033e:	603b      	str	r3, [r7, #0]
 8010340:	4613      	mov	r3, r2
 8010342:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8010344:	2300      	movs	r3, #0
 8010346:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d109      	bne.n	8010362 <tcp_connect+0x2e>
 801034e:	4b7d      	ldr	r3, [pc, #500]	; (8010544 <tcp_connect+0x210>)
 8010350:	f240 4235 	movw	r2, #1077	; 0x435
 8010354:	497c      	ldr	r1, [pc, #496]	; (8010548 <tcp_connect+0x214>)
 8010356:	487d      	ldr	r0, [pc, #500]	; (801054c <tcp_connect+0x218>)
 8010358:	f008 fdcc 	bl	8018ef4 <iprintf>
 801035c:	f06f 030f 	mvn.w	r3, #15
 8010360:	e0ec      	b.n	801053c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d109      	bne.n	801037c <tcp_connect+0x48>
 8010368:	4b76      	ldr	r3, [pc, #472]	; (8010544 <tcp_connect+0x210>)
 801036a:	f240 4236 	movw	r2, #1078	; 0x436
 801036e:	4978      	ldr	r1, [pc, #480]	; (8010550 <tcp_connect+0x21c>)
 8010370:	4876      	ldr	r0, [pc, #472]	; (801054c <tcp_connect+0x218>)
 8010372:	f008 fdbf 	bl	8018ef4 <iprintf>
 8010376:	f06f 030f 	mvn.w	r3, #15
 801037a:	e0df      	b.n	801053c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	7d1b      	ldrb	r3, [r3, #20]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d009      	beq.n	8010398 <tcp_connect+0x64>
 8010384:	4b6f      	ldr	r3, [pc, #444]	; (8010544 <tcp_connect+0x210>)
 8010386:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801038a:	4972      	ldr	r1, [pc, #456]	; (8010554 <tcp_connect+0x220>)
 801038c:	486f      	ldr	r0, [pc, #444]	; (801054c <tcp_connect+0x218>)
 801038e:	f008 fdb1 	bl	8018ef4 <iprintf>
 8010392:	f06f 0309 	mvn.w	r3, #9
 8010396:	e0d1      	b.n	801053c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d002      	beq.n	80103a4 <tcp_connect+0x70>
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	e000      	b.n	80103a6 <tcp_connect+0x72>
 80103a4:	2300      	movs	r3, #0
 80103a6:	68fa      	ldr	r2, [r7, #12]
 80103a8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	88fa      	ldrh	r2, [r7, #6]
 80103ae:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	7a1b      	ldrb	r3, [r3, #8]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d006      	beq.n	80103c6 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	7a1b      	ldrb	r3, [r3, #8]
 80103bc:	4618      	mov	r0, r3
 80103be:	f7fe fd41 	bl	800ee44 <netif_get_by_index>
 80103c2:	6278      	str	r0, [r7, #36]	; 0x24
 80103c4:	e005      	b.n	80103d2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	3304      	adds	r3, #4
 80103ca:	4618      	mov	r0, r3
 80103cc:	f006 ff60 	bl	8017290 <ip4_route>
 80103d0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 80103d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d102      	bne.n	80103de <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 80103d8:	f06f 0303 	mvn.w	r3, #3
 80103dc:	e0ae      	b.n	801053c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d003      	beq.n	80103ec <tcp_connect+0xb8>
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d111      	bne.n	8010410 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 80103ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d002      	beq.n	80103f8 <tcp_connect+0xc4>
 80103f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f4:	3304      	adds	r3, #4
 80103f6:	e000      	b.n	80103fa <tcp_connect+0xc6>
 80103f8:	2300      	movs	r3, #0
 80103fa:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 80103fc:	69fb      	ldr	r3, [r7, #28]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d102      	bne.n	8010408 <tcp_connect+0xd4>
      return ERR_RTE;
 8010402:	f06f 0303 	mvn.w	r3, #3
 8010406:	e099      	b.n	801053c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010408:	69fb      	ldr	r3, [r7, #28]
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	8adb      	ldrh	r3, [r3, #22]
 8010414:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	8adb      	ldrh	r3, [r3, #22]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d10c      	bne.n	8010438 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801041e:	f7ff ff43 	bl	80102a8 <tcp_new_port>
 8010422:	4603      	mov	r3, r0
 8010424:	461a      	mov	r2, r3
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	8adb      	ldrh	r3, [r3, #22]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d102      	bne.n	8010438 <tcp_connect+0x104>
      return ERR_BUF;
 8010432:	f06f 0301 	mvn.w	r3, #1
 8010436:	e081      	b.n	801053c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8010438:	68f8      	ldr	r0, [r7, #12]
 801043a:	f001 f84b 	bl	80114d4 <tcp_next_iss>
 801043e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	2200      	movs	r2, #0
 8010444:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	697a      	ldr	r2, [r7, #20]
 801044a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	1e5a      	subs	r2, r3, #1
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	1e5a      	subs	r2, r3, #1
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	1e5a      	subs	r2, r3, #1
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	f241 0268 	movw	r2, #4200	; 0x1068
 801046a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f241 0268 	movw	r2, #4200	; 0x1068
 8010482:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	f44f 7206 	mov.w	r2, #536	; 0x218
 801048c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	3304      	adds	r3, #4
 8010496:	461a      	mov	r2, r3
 8010498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801049a:	f001 f841 	bl	8011520 <tcp_eff_send_mss_netif>
 801049e:	4603      	mov	r3, r0
 80104a0:	461a      	mov	r2, r3
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	2201      	movs	r2, #1
 80104aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	683a      	ldr	r2, [r7, #0]
 80104b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80104b6:	2102      	movs	r1, #2
 80104b8:	68f8      	ldr	r0, [r7, #12]
 80104ba:	f004 faa7 	bl	8014a0c <tcp_enqueue_flags>
 80104be:	4603      	mov	r3, r0
 80104c0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80104c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d136      	bne.n	8010538 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	2202      	movs	r2, #2
 80104ce:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80104d0:	8b7b      	ldrh	r3, [r7, #26]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d021      	beq.n	801051a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80104d6:	4b20      	ldr	r3, [pc, #128]	; (8010558 <tcp_connect+0x224>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	68fa      	ldr	r2, [r7, #12]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d105      	bne.n	80104ec <tcp_connect+0x1b8>
 80104e0:	4b1d      	ldr	r3, [pc, #116]	; (8010558 <tcp_connect+0x224>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	68db      	ldr	r3, [r3, #12]
 80104e6:	4a1c      	ldr	r2, [pc, #112]	; (8010558 <tcp_connect+0x224>)
 80104e8:	6013      	str	r3, [r2, #0]
 80104ea:	e013      	b.n	8010514 <tcp_connect+0x1e0>
 80104ec:	4b1a      	ldr	r3, [pc, #104]	; (8010558 <tcp_connect+0x224>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	623b      	str	r3, [r7, #32]
 80104f2:	e00c      	b.n	801050e <tcp_connect+0x1da>
 80104f4:	6a3b      	ldr	r3, [r7, #32]
 80104f6:	68db      	ldr	r3, [r3, #12]
 80104f8:	68fa      	ldr	r2, [r7, #12]
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d104      	bne.n	8010508 <tcp_connect+0x1d4>
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	68da      	ldr	r2, [r3, #12]
 8010502:	6a3b      	ldr	r3, [r7, #32]
 8010504:	60da      	str	r2, [r3, #12]
 8010506:	e005      	b.n	8010514 <tcp_connect+0x1e0>
 8010508:	6a3b      	ldr	r3, [r7, #32]
 801050a:	68db      	ldr	r3, [r3, #12]
 801050c:	623b      	str	r3, [r7, #32]
 801050e:	6a3b      	ldr	r3, [r7, #32]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d1ef      	bne.n	80104f4 <tcp_connect+0x1c0>
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2200      	movs	r2, #0
 8010518:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801051a:	4b10      	ldr	r3, [pc, #64]	; (801055c <tcp_connect+0x228>)
 801051c:	681a      	ldr	r2, [r3, #0]
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	60da      	str	r2, [r3, #12]
 8010522:	4a0e      	ldr	r2, [pc, #56]	; (801055c <tcp_connect+0x228>)
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	6013      	str	r3, [r2, #0]
 8010528:	f005 fad4 	bl	8015ad4 <tcp_timer_needed>
 801052c:	4b0c      	ldr	r3, [pc, #48]	; (8010560 <tcp_connect+0x22c>)
 801052e:	2201      	movs	r2, #1
 8010530:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8010532:	68f8      	ldr	r0, [r7, #12]
 8010534:	f004 fb58 	bl	8014be8 <tcp_output>
  }
  return ret;
 8010538:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801053c:	4618      	mov	r0, r3
 801053e:	3728      	adds	r7, #40	; 0x28
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}
 8010544:	0801b078 	.word	0x0801b078
 8010548:	0801b354 	.word	0x0801b354
 801054c:	0801b0bc 	.word	0x0801b0bc
 8010550:	0801b370 	.word	0x0801b370
 8010554:	0801b38c 	.word	0x0801b38c
 8010558:	200187a8 	.word	0x200187a8
 801055c:	2001879c 	.word	0x2001879c
 8010560:	20018798 	.word	0x20018798

08010564 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010564:	b5b0      	push	{r4, r5, r7, lr}
 8010566:	b090      	sub	sp, #64	; 0x40
 8010568:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801056a:	2300      	movs	r3, #0
 801056c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8010570:	4b94      	ldr	r3, [pc, #592]	; (80107c4 <tcp_slowtmr+0x260>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	3301      	adds	r3, #1
 8010576:	4a93      	ldr	r2, [pc, #588]	; (80107c4 <tcp_slowtmr+0x260>)
 8010578:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801057a:	4b93      	ldr	r3, [pc, #588]	; (80107c8 <tcp_slowtmr+0x264>)
 801057c:	781b      	ldrb	r3, [r3, #0]
 801057e:	3301      	adds	r3, #1
 8010580:	b2da      	uxtb	r2, r3
 8010582:	4b91      	ldr	r3, [pc, #580]	; (80107c8 <tcp_slowtmr+0x264>)
 8010584:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010586:	2300      	movs	r3, #0
 8010588:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801058a:	4b90      	ldr	r3, [pc, #576]	; (80107cc <tcp_slowtmr+0x268>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010590:	e29f      	b.n	8010ad2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010594:	7d1b      	ldrb	r3, [r3, #20]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d106      	bne.n	80105a8 <tcp_slowtmr+0x44>
 801059a:	4b8d      	ldr	r3, [pc, #564]	; (80107d0 <tcp_slowtmr+0x26c>)
 801059c:	f240 42be 	movw	r2, #1214	; 0x4be
 80105a0:	498c      	ldr	r1, [pc, #560]	; (80107d4 <tcp_slowtmr+0x270>)
 80105a2:	488d      	ldr	r0, [pc, #564]	; (80107d8 <tcp_slowtmr+0x274>)
 80105a4:	f008 fca6 	bl	8018ef4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80105a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105aa:	7d1b      	ldrb	r3, [r3, #20]
 80105ac:	2b01      	cmp	r3, #1
 80105ae:	d106      	bne.n	80105be <tcp_slowtmr+0x5a>
 80105b0:	4b87      	ldr	r3, [pc, #540]	; (80107d0 <tcp_slowtmr+0x26c>)
 80105b2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80105b6:	4989      	ldr	r1, [pc, #548]	; (80107dc <tcp_slowtmr+0x278>)
 80105b8:	4887      	ldr	r0, [pc, #540]	; (80107d8 <tcp_slowtmr+0x274>)
 80105ba:	f008 fc9b 	bl	8018ef4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80105be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c0:	7d1b      	ldrb	r3, [r3, #20]
 80105c2:	2b0a      	cmp	r3, #10
 80105c4:	d106      	bne.n	80105d4 <tcp_slowtmr+0x70>
 80105c6:	4b82      	ldr	r3, [pc, #520]	; (80107d0 <tcp_slowtmr+0x26c>)
 80105c8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80105cc:	4984      	ldr	r1, [pc, #528]	; (80107e0 <tcp_slowtmr+0x27c>)
 80105ce:	4882      	ldr	r0, [pc, #520]	; (80107d8 <tcp_slowtmr+0x274>)
 80105d0:	f008 fc90 	bl	8018ef4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80105d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d6:	7f9a      	ldrb	r2, [r3, #30]
 80105d8:	4b7b      	ldr	r3, [pc, #492]	; (80107c8 <tcp_slowtmr+0x264>)
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	429a      	cmp	r2, r3
 80105de:	d105      	bne.n	80105ec <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80105e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80105e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e6:	68db      	ldr	r3, [r3, #12]
 80105e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80105ea:	e272      	b.n	8010ad2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80105ec:	4b76      	ldr	r3, [pc, #472]	; (80107c8 <tcp_slowtmr+0x264>)
 80105ee:	781a      	ldrb	r2, [r3, #0]
 80105f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80105f4:	2300      	movs	r3, #0
 80105f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80105fa:	2300      	movs	r3, #0
 80105fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010602:	7d1b      	ldrb	r3, [r3, #20]
 8010604:	2b02      	cmp	r3, #2
 8010606:	d10a      	bne.n	801061e <tcp_slowtmr+0xba>
 8010608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801060e:	2b05      	cmp	r3, #5
 8010610:	d905      	bls.n	801061e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8010612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010616:	3301      	adds	r3, #1
 8010618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801061c:	e11e      	b.n	801085c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801061e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010620:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010624:	2b0b      	cmp	r3, #11
 8010626:	d905      	bls.n	8010634 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801062c:	3301      	adds	r3, #1
 801062e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010632:	e113      	b.n	801085c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010636:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801063a:	2b00      	cmp	r3, #0
 801063c:	d075      	beq.n	801072a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801063e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010642:	2b00      	cmp	r3, #0
 8010644:	d006      	beq.n	8010654 <tcp_slowtmr+0xf0>
 8010646:	4b62      	ldr	r3, [pc, #392]	; (80107d0 <tcp_slowtmr+0x26c>)
 8010648:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801064c:	4965      	ldr	r1, [pc, #404]	; (80107e4 <tcp_slowtmr+0x280>)
 801064e:	4862      	ldr	r0, [pc, #392]	; (80107d8 <tcp_slowtmr+0x274>)
 8010650:	f008 fc50 	bl	8018ef4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010658:	2b00      	cmp	r3, #0
 801065a:	d106      	bne.n	801066a <tcp_slowtmr+0x106>
 801065c:	4b5c      	ldr	r3, [pc, #368]	; (80107d0 <tcp_slowtmr+0x26c>)
 801065e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010662:	4961      	ldr	r1, [pc, #388]	; (80107e8 <tcp_slowtmr+0x284>)
 8010664:	485c      	ldr	r0, [pc, #368]	; (80107d8 <tcp_slowtmr+0x274>)
 8010666:	f008 fc45 	bl	8018ef4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010670:	2b0b      	cmp	r3, #11
 8010672:	d905      	bls.n	8010680 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8010674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010678:	3301      	adds	r3, #1
 801067a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801067e:	e0ed      	b.n	801085c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010682:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010686:	3b01      	subs	r3, #1
 8010688:	4a58      	ldr	r2, [pc, #352]	; (80107ec <tcp_slowtmr+0x288>)
 801068a:	5cd3      	ldrb	r3, [r2, r3]
 801068c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801068e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010690:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010694:	7c7a      	ldrb	r2, [r7, #17]
 8010696:	429a      	cmp	r2, r3
 8010698:	d907      	bls.n	80106aa <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80106a0:	3301      	adds	r3, #1
 80106a2:	b2da      	uxtb	r2, r3
 80106a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80106aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80106b0:	7c7a      	ldrb	r2, [r7, #17]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	f200 80d2 	bhi.w	801085c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80106b8:	2301      	movs	r3, #1
 80106ba:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80106bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d108      	bne.n	80106d8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80106c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106c8:	f005 f936 	bl	8015938 <tcp_zero_window_probe>
 80106cc:	4603      	mov	r3, r0
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d014      	beq.n	80106fc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80106d2:	2300      	movs	r3, #0
 80106d4:	623b      	str	r3, [r7, #32]
 80106d6:	e011      	b.n	80106fc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80106d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80106de:	4619      	mov	r1, r3
 80106e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106e2:	f003 fffb 	bl	80146dc <tcp_split_unsent_seg>
 80106e6:	4603      	mov	r3, r0
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d107      	bne.n	80106fc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80106ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106ee:	f004 fa7b 	bl	8014be8 <tcp_output>
 80106f2:	4603      	mov	r3, r0
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d101      	bne.n	80106fc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80106f8:	2300      	movs	r3, #0
 80106fa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80106fc:	6a3b      	ldr	r3, [r7, #32]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	f000 80ac 	beq.w	801085c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8010704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010706:	2200      	movs	r2, #0
 8010708:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801070c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010712:	2b06      	cmp	r3, #6
 8010714:	f200 80a2 	bhi.w	801085c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8010718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801071e:	3301      	adds	r3, #1
 8010720:	b2da      	uxtb	r2, r3
 8010722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010724:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8010728:	e098      	b.n	801085c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801072a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801072c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010730:	2b00      	cmp	r3, #0
 8010732:	db0f      	blt.n	8010754 <tcp_slowtmr+0x1f0>
 8010734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010736:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801073a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801073e:	4293      	cmp	r3, r2
 8010740:	d008      	beq.n	8010754 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8010742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010744:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010748:	b29b      	uxth	r3, r3
 801074a:	3301      	adds	r3, #1
 801074c:	b29b      	uxth	r3, r3
 801074e:	b21a      	sxth	r2, r3
 8010750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010752:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8010754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010756:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801075a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801075c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010760:	429a      	cmp	r2, r3
 8010762:	db7b      	blt.n	801085c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010764:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010766:	f004 fd31 	bl	80151cc <tcp_rexmit_rto_prepare>
 801076a:	4603      	mov	r3, r0
 801076c:	2b00      	cmp	r3, #0
 801076e:	d007      	beq.n	8010780 <tcp_slowtmr+0x21c>
 8010770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010774:	2b00      	cmp	r3, #0
 8010776:	d171      	bne.n	801085c <tcp_slowtmr+0x2f8>
 8010778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801077c:	2b00      	cmp	r3, #0
 801077e:	d06d      	beq.n	801085c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8010780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010782:	7d1b      	ldrb	r3, [r3, #20]
 8010784:	2b02      	cmp	r3, #2
 8010786:	d03a      	beq.n	80107fe <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801078a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801078e:	2b0c      	cmp	r3, #12
 8010790:	bf28      	it	cs
 8010792:	230c      	movcs	r3, #12
 8010794:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010798:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801079c:	10db      	asrs	r3, r3, #3
 801079e:	b21b      	sxth	r3, r3
 80107a0:	461a      	mov	r2, r3
 80107a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80107a8:	4413      	add	r3, r2
 80107aa:	7efa      	ldrb	r2, [r7, #27]
 80107ac:	4910      	ldr	r1, [pc, #64]	; (80107f0 <tcp_slowtmr+0x28c>)
 80107ae:	5c8a      	ldrb	r2, [r1, r2]
 80107b0:	4093      	lsls	r3, r2
 80107b2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80107ba:	4293      	cmp	r3, r2
 80107bc:	dc1a      	bgt.n	80107f4 <tcp_slowtmr+0x290>
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	b21a      	sxth	r2, r3
 80107c2:	e019      	b.n	80107f8 <tcp_slowtmr+0x294>
 80107c4:	200187a0 	.word	0x200187a0
 80107c8:	200006a6 	.word	0x200006a6
 80107cc:	2001879c 	.word	0x2001879c
 80107d0:	0801b078 	.word	0x0801b078
 80107d4:	0801b3bc 	.word	0x0801b3bc
 80107d8:	0801b0bc 	.word	0x0801b0bc
 80107dc:	0801b3e8 	.word	0x0801b3e8
 80107e0:	0801b414 	.word	0x0801b414
 80107e4:	0801b444 	.word	0x0801b444
 80107e8:	0801b478 	.word	0x0801b478
 80107ec:	0801d1d4 	.word	0x0801d1d4
 80107f0:	0801d1c4 	.word	0x0801d1c4
 80107f4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80107f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80107fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010800:	2200      	movs	r2, #0
 8010802:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010806:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801080a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801080c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010810:	4293      	cmp	r3, r2
 8010812:	bf28      	it	cs
 8010814:	4613      	movcs	r3, r2
 8010816:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010818:	8a7b      	ldrh	r3, [r7, #18]
 801081a:	085b      	lsrs	r3, r3, #1
 801081c:	b29a      	uxth	r2, r3
 801081e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010820:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010826:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801082a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801082c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801082e:	005b      	lsls	r3, r3, #1
 8010830:	b29b      	uxth	r3, r3
 8010832:	429a      	cmp	r2, r3
 8010834:	d206      	bcs.n	8010844 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010838:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801083a:	005b      	lsls	r3, r3, #1
 801083c:	b29a      	uxth	r2, r3
 801083e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010840:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8010844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010846:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801084a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801084e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010850:	2200      	movs	r2, #0
 8010852:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8010856:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010858:	f004 fd28 	bl	80152ac <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801085c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801085e:	7d1b      	ldrb	r3, [r3, #20]
 8010860:	2b06      	cmp	r3, #6
 8010862:	d111      	bne.n	8010888 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010866:	8b5b      	ldrh	r3, [r3, #26]
 8010868:	f003 0310 	and.w	r3, r3, #16
 801086c:	2b00      	cmp	r3, #0
 801086e:	d00b      	beq.n	8010888 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010870:	4b9d      	ldr	r3, [pc, #628]	; (8010ae8 <tcp_slowtmr+0x584>)
 8010872:	681a      	ldr	r2, [r3, #0]
 8010874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010876:	6a1b      	ldr	r3, [r3, #32]
 8010878:	1ad3      	subs	r3, r2, r3
 801087a:	2b28      	cmp	r3, #40	; 0x28
 801087c:	d904      	bls.n	8010888 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801087e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010882:	3301      	adds	r3, #1
 8010884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801088a:	7a5b      	ldrb	r3, [r3, #9]
 801088c:	f003 0308 	and.w	r3, r3, #8
 8010890:	2b00      	cmp	r3, #0
 8010892:	d04c      	beq.n	801092e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010896:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010898:	2b04      	cmp	r3, #4
 801089a:	d003      	beq.n	80108a4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801089c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801089e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80108a0:	2b07      	cmp	r3, #7
 80108a2:	d144      	bne.n	801092e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80108a4:	4b90      	ldr	r3, [pc, #576]	; (8010ae8 <tcp_slowtmr+0x584>)
 80108a6:	681a      	ldr	r2, [r3, #0]
 80108a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108aa:	6a1b      	ldr	r3, [r3, #32]
 80108ac:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80108ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80108b4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80108b8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80108bc:	498b      	ldr	r1, [pc, #556]	; (8010aec <tcp_slowtmr+0x588>)
 80108be:	fba1 1303 	umull	r1, r3, r1, r3
 80108c2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d90a      	bls.n	80108de <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80108c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108cc:	3301      	adds	r3, #1
 80108ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80108d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80108d6:	3301      	adds	r3, #1
 80108d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80108dc:	e027      	b.n	801092e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80108de:	4b82      	ldr	r3, [pc, #520]	; (8010ae8 <tcp_slowtmr+0x584>)
 80108e0:	681a      	ldr	r2, [r3, #0]
 80108e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108e4:	6a1b      	ldr	r3, [r3, #32]
 80108e6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80108e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ea:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80108ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80108f4:	4618      	mov	r0, r3
 80108f6:	4b7e      	ldr	r3, [pc, #504]	; (8010af0 <tcp_slowtmr+0x58c>)
 80108f8:	fb03 f300 	mul.w	r3, r3, r0
 80108fc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80108fe:	497b      	ldr	r1, [pc, #492]	; (8010aec <tcp_slowtmr+0x588>)
 8010900:	fba1 1303 	umull	r1, r3, r1, r3
 8010904:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010906:	429a      	cmp	r2, r3
 8010908:	d911      	bls.n	801092e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801090a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801090c:	f004 ffd4 	bl	80158b8 <tcp_keepalive>
 8010910:	4603      	mov	r3, r0
 8010912:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8010916:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801091a:	2b00      	cmp	r3, #0
 801091c:	d107      	bne.n	801092e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801091e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010920:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010924:	3301      	adds	r3, #1
 8010926:	b2da      	uxtb	r2, r3
 8010928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801092a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801092e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010932:	2b00      	cmp	r3, #0
 8010934:	d011      	beq.n	801095a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8010936:	4b6c      	ldr	r3, [pc, #432]	; (8010ae8 <tcp_slowtmr+0x584>)
 8010938:	681a      	ldr	r2, [r3, #0]
 801093a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801093c:	6a1b      	ldr	r3, [r3, #32]
 801093e:	1ad2      	subs	r2, r2, r3
 8010940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010942:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010946:	4619      	mov	r1, r3
 8010948:	460b      	mov	r3, r1
 801094a:	005b      	lsls	r3, r3, #1
 801094c:	440b      	add	r3, r1
 801094e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010950:	429a      	cmp	r2, r3
 8010952:	d302      	bcc.n	801095a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8010954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010956:	f000 fe8d 	bl	8011674 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801095a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801095c:	7d1b      	ldrb	r3, [r3, #20]
 801095e:	2b03      	cmp	r3, #3
 8010960:	d10b      	bne.n	801097a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010962:	4b61      	ldr	r3, [pc, #388]	; (8010ae8 <tcp_slowtmr+0x584>)
 8010964:	681a      	ldr	r2, [r3, #0]
 8010966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010968:	6a1b      	ldr	r3, [r3, #32]
 801096a:	1ad3      	subs	r3, r2, r3
 801096c:	2b28      	cmp	r3, #40	; 0x28
 801096e:	d904      	bls.n	801097a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8010970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010974:	3301      	adds	r3, #1
 8010976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801097a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801097c:	7d1b      	ldrb	r3, [r3, #20]
 801097e:	2b09      	cmp	r3, #9
 8010980:	d10b      	bne.n	801099a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010982:	4b59      	ldr	r3, [pc, #356]	; (8010ae8 <tcp_slowtmr+0x584>)
 8010984:	681a      	ldr	r2, [r3, #0]
 8010986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010988:	6a1b      	ldr	r3, [r3, #32]
 801098a:	1ad3      	subs	r3, r2, r3
 801098c:	2bf0      	cmp	r3, #240	; 0xf0
 801098e:	d904      	bls.n	801099a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8010990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010994:	3301      	adds	r3, #1
 8010996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801099a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d060      	beq.n	8010a64 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80109a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109a8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80109aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80109ac:	f000 fcae 	bl	801130c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80109b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d010      	beq.n	80109d8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80109b6:	4b4f      	ldr	r3, [pc, #316]	; (8010af4 <tcp_slowtmr+0x590>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109bc:	429a      	cmp	r2, r3
 80109be:	d106      	bne.n	80109ce <tcp_slowtmr+0x46a>
 80109c0:	4b4d      	ldr	r3, [pc, #308]	; (8010af8 <tcp_slowtmr+0x594>)
 80109c2:	f240 526d 	movw	r2, #1389	; 0x56d
 80109c6:	494d      	ldr	r1, [pc, #308]	; (8010afc <tcp_slowtmr+0x598>)
 80109c8:	484d      	ldr	r0, [pc, #308]	; (8010b00 <tcp_slowtmr+0x59c>)
 80109ca:	f008 fa93 	bl	8018ef4 <iprintf>
        prev->next = pcb->next;
 80109ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109d0:	68da      	ldr	r2, [r3, #12]
 80109d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109d4:	60da      	str	r2, [r3, #12]
 80109d6:	e00f      	b.n	80109f8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80109d8:	4b46      	ldr	r3, [pc, #280]	; (8010af4 <tcp_slowtmr+0x590>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109de:	429a      	cmp	r2, r3
 80109e0:	d006      	beq.n	80109f0 <tcp_slowtmr+0x48c>
 80109e2:	4b45      	ldr	r3, [pc, #276]	; (8010af8 <tcp_slowtmr+0x594>)
 80109e4:	f240 5271 	movw	r2, #1393	; 0x571
 80109e8:	4946      	ldr	r1, [pc, #280]	; (8010b04 <tcp_slowtmr+0x5a0>)
 80109ea:	4845      	ldr	r0, [pc, #276]	; (8010b00 <tcp_slowtmr+0x59c>)
 80109ec:	f008 fa82 	bl	8018ef4 <iprintf>
        tcp_active_pcbs = pcb->next;
 80109f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109f2:	68db      	ldr	r3, [r3, #12]
 80109f4:	4a3f      	ldr	r2, [pc, #252]	; (8010af4 <tcp_slowtmr+0x590>)
 80109f6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80109f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d013      	beq.n	8010a28 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a02:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a06:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010a08:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8010a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a0c:	3304      	adds	r3, #4
 8010a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a10:	8ad2      	ldrh	r2, [r2, #22]
 8010a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a14:	8b09      	ldrh	r1, [r1, #24]
 8010a16:	9102      	str	r1, [sp, #8]
 8010a18:	9201      	str	r2, [sp, #4]
 8010a1a:	9300      	str	r3, [sp, #0]
 8010a1c:	462b      	mov	r3, r5
 8010a1e:	4622      	mov	r2, r4
 8010a20:	4601      	mov	r1, r0
 8010a22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a24:	f004 fe94 	bl	8015750 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a2a:	691b      	ldr	r3, [r3, #16]
 8010a2c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a30:	7d1b      	ldrb	r3, [r3, #20]
 8010a32:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a36:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a3a:	68db      	ldr	r3, [r3, #12]
 8010a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010a3e:	6838      	ldr	r0, [r7, #0]
 8010a40:	f7ff f892 	bl	800fb68 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8010a44:	4b30      	ldr	r3, [pc, #192]	; (8010b08 <tcp_slowtmr+0x5a4>)
 8010a46:	2200      	movs	r2, #0
 8010a48:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d004      	beq.n	8010a5a <tcp_slowtmr+0x4f6>
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f06f 010c 	mvn.w	r1, #12
 8010a56:	68b8      	ldr	r0, [r7, #8]
 8010a58:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010a5a:	4b2b      	ldr	r3, [pc, #172]	; (8010b08 <tcp_slowtmr+0x5a4>)
 8010a5c:	781b      	ldrb	r3, [r3, #0]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d037      	beq.n	8010ad2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8010a62:	e590      	b.n	8010586 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a66:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a6a:	68db      	ldr	r3, [r3, #12]
 8010a6c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8010a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a70:	7f1b      	ldrb	r3, [r3, #28]
 8010a72:	3301      	adds	r3, #1
 8010a74:	b2da      	uxtb	r2, r3
 8010a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a78:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a7c:	7f1a      	ldrb	r2, [r3, #28]
 8010a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a80:	7f5b      	ldrb	r3, [r3, #29]
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d325      	bcc.n	8010ad2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8010a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a88:	2200      	movs	r2, #0
 8010a8a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010a8c:	4b1e      	ldr	r3, [pc, #120]	; (8010b08 <tcp_slowtmr+0x5a4>)
 8010a8e:	2200      	movs	r2, #0
 8010a90:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d00b      	beq.n	8010ab4 <tcp_slowtmr+0x550>
 8010a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010aa4:	6912      	ldr	r2, [r2, #16]
 8010aa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010aa8:	4610      	mov	r0, r2
 8010aaa:	4798      	blx	r3
 8010aac:	4603      	mov	r3, r0
 8010aae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010ab2:	e002      	b.n	8010aba <tcp_slowtmr+0x556>
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8010aba:	4b13      	ldr	r3, [pc, #76]	; (8010b08 <tcp_slowtmr+0x5a4>)
 8010abc:	781b      	ldrb	r3, [r3, #0]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d000      	beq.n	8010ac4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8010ac2:	e560      	b.n	8010586 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010ac4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d102      	bne.n	8010ad2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8010acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ace:	f004 f88b 	bl	8014be8 <tcp_output>
  while (pcb != NULL) {
 8010ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	f47f ad5c 	bne.w	8010592 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010ada:	2300      	movs	r3, #0
 8010adc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8010ade:	4b0b      	ldr	r3, [pc, #44]	; (8010b0c <tcp_slowtmr+0x5a8>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010ae4:	e067      	b.n	8010bb6 <tcp_slowtmr+0x652>
 8010ae6:	bf00      	nop
 8010ae8:	200187a0 	.word	0x200187a0
 8010aec:	10624dd3 	.word	0x10624dd3
 8010af0:	000124f8 	.word	0x000124f8
 8010af4:	2001879c 	.word	0x2001879c
 8010af8:	0801b078 	.word	0x0801b078
 8010afc:	0801b4b0 	.word	0x0801b4b0
 8010b00:	0801b0bc 	.word	0x0801b0bc
 8010b04:	0801b4dc 	.word	0x0801b4dc
 8010b08:	20018798 	.word	0x20018798
 8010b0c:	200187ac 	.word	0x200187ac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b12:	7d1b      	ldrb	r3, [r3, #20]
 8010b14:	2b0a      	cmp	r3, #10
 8010b16:	d006      	beq.n	8010b26 <tcp_slowtmr+0x5c2>
 8010b18:	4b2b      	ldr	r3, [pc, #172]	; (8010bc8 <tcp_slowtmr+0x664>)
 8010b1a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8010b1e:	492b      	ldr	r1, [pc, #172]	; (8010bcc <tcp_slowtmr+0x668>)
 8010b20:	482b      	ldr	r0, [pc, #172]	; (8010bd0 <tcp_slowtmr+0x66c>)
 8010b22:	f008 f9e7 	bl	8018ef4 <iprintf>
    pcb_remove = 0;
 8010b26:	2300      	movs	r3, #0
 8010b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010b2c:	4b29      	ldr	r3, [pc, #164]	; (8010bd4 <tcp_slowtmr+0x670>)
 8010b2e:	681a      	ldr	r2, [r3, #0]
 8010b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b32:	6a1b      	ldr	r3, [r3, #32]
 8010b34:	1ad3      	subs	r3, r2, r3
 8010b36:	2bf0      	cmp	r3, #240	; 0xf0
 8010b38:	d904      	bls.n	8010b44 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8010b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b3e:	3301      	adds	r3, #1
 8010b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d02f      	beq.n	8010bac <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010b4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b4e:	f000 fbdd 	bl	801130c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d010      	beq.n	8010b7a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010b58:	4b1f      	ldr	r3, [pc, #124]	; (8010bd8 <tcp_slowtmr+0x674>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d106      	bne.n	8010b70 <tcp_slowtmr+0x60c>
 8010b62:	4b19      	ldr	r3, [pc, #100]	; (8010bc8 <tcp_slowtmr+0x664>)
 8010b64:	f240 52af 	movw	r2, #1455	; 0x5af
 8010b68:	491c      	ldr	r1, [pc, #112]	; (8010bdc <tcp_slowtmr+0x678>)
 8010b6a:	4819      	ldr	r0, [pc, #100]	; (8010bd0 <tcp_slowtmr+0x66c>)
 8010b6c:	f008 f9c2 	bl	8018ef4 <iprintf>
        prev->next = pcb->next;
 8010b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b72:	68da      	ldr	r2, [r3, #12]
 8010b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b76:	60da      	str	r2, [r3, #12]
 8010b78:	e00f      	b.n	8010b9a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010b7a:	4b17      	ldr	r3, [pc, #92]	; (8010bd8 <tcp_slowtmr+0x674>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d006      	beq.n	8010b92 <tcp_slowtmr+0x62e>
 8010b84:	4b10      	ldr	r3, [pc, #64]	; (8010bc8 <tcp_slowtmr+0x664>)
 8010b86:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8010b8a:	4915      	ldr	r1, [pc, #84]	; (8010be0 <tcp_slowtmr+0x67c>)
 8010b8c:	4810      	ldr	r0, [pc, #64]	; (8010bd0 <tcp_slowtmr+0x66c>)
 8010b8e:	f008 f9b1 	bl	8018ef4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b94:	68db      	ldr	r3, [r3, #12]
 8010b96:	4a10      	ldr	r2, [pc, #64]	; (8010bd8 <tcp_slowtmr+0x674>)
 8010b98:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b9c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba0:	68db      	ldr	r3, [r3, #12]
 8010ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010ba4:	69f8      	ldr	r0, [r7, #28]
 8010ba6:	f7fe ffdf 	bl	800fb68 <tcp_free>
 8010baa:	e004      	b.n	8010bb6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8010bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bb2:	68db      	ldr	r3, [r3, #12]
 8010bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d1a9      	bne.n	8010b10 <tcp_slowtmr+0x5ac>
    }
  }
}
 8010bbc:	bf00      	nop
 8010bbe:	bf00      	nop
 8010bc0:	3730      	adds	r7, #48	; 0x30
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8010bc6:	bf00      	nop
 8010bc8:	0801b078 	.word	0x0801b078
 8010bcc:	0801b508 	.word	0x0801b508
 8010bd0:	0801b0bc 	.word	0x0801b0bc
 8010bd4:	200187a0 	.word	0x200187a0
 8010bd8:	200187ac 	.word	0x200187ac
 8010bdc:	0801b538 	.word	0x0801b538
 8010be0:	0801b560 	.word	0x0801b560

08010be4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b082      	sub	sp, #8
 8010be8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010bea:	4b2d      	ldr	r3, [pc, #180]	; (8010ca0 <tcp_fasttmr+0xbc>)
 8010bec:	781b      	ldrb	r3, [r3, #0]
 8010bee:	3301      	adds	r3, #1
 8010bf0:	b2da      	uxtb	r2, r3
 8010bf2:	4b2b      	ldr	r3, [pc, #172]	; (8010ca0 <tcp_fasttmr+0xbc>)
 8010bf4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010bf6:	4b2b      	ldr	r3, [pc, #172]	; (8010ca4 <tcp_fasttmr+0xc0>)
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010bfc:	e048      	b.n	8010c90 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	7f9a      	ldrb	r2, [r3, #30]
 8010c02:	4b27      	ldr	r3, [pc, #156]	; (8010ca0 <tcp_fasttmr+0xbc>)
 8010c04:	781b      	ldrb	r3, [r3, #0]
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d03f      	beq.n	8010c8a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010c0a:	4b25      	ldr	r3, [pc, #148]	; (8010ca0 <tcp_fasttmr+0xbc>)
 8010c0c:	781a      	ldrb	r2, [r3, #0]
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	8b5b      	ldrh	r3, [r3, #26]
 8010c16:	f003 0301 	and.w	r3, r3, #1
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d010      	beq.n	8010c40 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	8b5b      	ldrh	r3, [r3, #26]
 8010c22:	f043 0302 	orr.w	r3, r3, #2
 8010c26:	b29a      	uxth	r2, r3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f003 ffdb 	bl	8014be8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	8b5b      	ldrh	r3, [r3, #26]
 8010c36:	f023 0303 	bic.w	r3, r3, #3
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	8b5b      	ldrh	r3, [r3, #26]
 8010c44:	f003 0308 	and.w	r3, r3, #8
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d009      	beq.n	8010c60 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	8b5b      	ldrh	r3, [r3, #26]
 8010c50:	f023 0308 	bic.w	r3, r3, #8
 8010c54:	b29a      	uxth	r2, r3
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	f7ff f918 	bl	800fe90 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	68db      	ldr	r3, [r3, #12]
 8010c64:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d00a      	beq.n	8010c84 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010c6e:	4b0e      	ldr	r3, [pc, #56]	; (8010ca8 <tcp_fasttmr+0xc4>)
 8010c70:	2200      	movs	r2, #0
 8010c72:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010c74:	6878      	ldr	r0, [r7, #4]
 8010c76:	f000 f819 	bl	8010cac <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010c7a:	4b0b      	ldr	r3, [pc, #44]	; (8010ca8 <tcp_fasttmr+0xc4>)
 8010c7c:	781b      	ldrb	r3, [r3, #0]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d000      	beq.n	8010c84 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010c82:	e7b8      	b.n	8010bf6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	607b      	str	r3, [r7, #4]
 8010c88:	e002      	b.n	8010c90 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	68db      	ldr	r3, [r3, #12]
 8010c8e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d1b3      	bne.n	8010bfe <tcp_fasttmr+0x1a>
    }
  }
}
 8010c96:	bf00      	nop
 8010c98:	bf00      	nop
 8010c9a:	3708      	adds	r7, #8
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}
 8010ca0:	200006a6 	.word	0x200006a6
 8010ca4:	2001879c 	.word	0x2001879c
 8010ca8:	20018798 	.word	0x20018798

08010cac <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010cac:	b590      	push	{r4, r7, lr}
 8010cae:	b085      	sub	sp, #20
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d109      	bne.n	8010cce <tcp_process_refused_data+0x22>
 8010cba:	4b38      	ldr	r3, [pc, #224]	; (8010d9c <tcp_process_refused_data+0xf0>)
 8010cbc:	f240 6209 	movw	r2, #1545	; 0x609
 8010cc0:	4937      	ldr	r1, [pc, #220]	; (8010da0 <tcp_process_refused_data+0xf4>)
 8010cc2:	4838      	ldr	r0, [pc, #224]	; (8010da4 <tcp_process_refused_data+0xf8>)
 8010cc4:	f008 f916 	bl	8018ef4 <iprintf>
 8010cc8:	f06f 030f 	mvn.w	r3, #15
 8010ccc:	e061      	b.n	8010d92 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010cd2:	7b5b      	ldrb	r3, [r3, #13]
 8010cd4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010cda:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d00b      	beq.n	8010d04 <tcp_process_refused_data+0x58>
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	6918      	ldr	r0, [r3, #16]
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	68ba      	ldr	r2, [r7, #8]
 8010cfa:	6879      	ldr	r1, [r7, #4]
 8010cfc:	47a0      	blx	r4
 8010cfe:	4603      	mov	r3, r0
 8010d00:	73fb      	strb	r3, [r7, #15]
 8010d02:	e007      	b.n	8010d14 <tcp_process_refused_data+0x68>
 8010d04:	2300      	movs	r3, #0
 8010d06:	68ba      	ldr	r2, [r7, #8]
 8010d08:	6879      	ldr	r1, [r7, #4]
 8010d0a:	2000      	movs	r0, #0
 8010d0c:	f000 f8a6 	bl	8010e5c <tcp_recv_null>
 8010d10:	4603      	mov	r3, r0
 8010d12:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d12b      	bne.n	8010d74 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010d1c:	7bbb      	ldrb	r3, [r7, #14]
 8010d1e:	f003 0320 	and.w	r3, r3, #32
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d034      	beq.n	8010d90 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d2a:	f241 0268 	movw	r2, #4200	; 0x1068
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	d005      	beq.n	8010d3e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d36:	3301      	adds	r3, #1
 8010d38:	b29a      	uxth	r2, r3
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d00b      	beq.n	8010d60 <tcp_process_refused_data+0xb4>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	6918      	ldr	r0, [r3, #16]
 8010d52:	2300      	movs	r3, #0
 8010d54:	2200      	movs	r2, #0
 8010d56:	6879      	ldr	r1, [r7, #4]
 8010d58:	47a0      	blx	r4
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	73fb      	strb	r3, [r7, #15]
 8010d5e:	e001      	b.n	8010d64 <tcp_process_refused_data+0xb8>
 8010d60:	2300      	movs	r3, #0
 8010d62:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d68:	f113 0f0d 	cmn.w	r3, #13
 8010d6c:	d110      	bne.n	8010d90 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8010d6e:	f06f 030c 	mvn.w	r3, #12
 8010d72:	e00e      	b.n	8010d92 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8010d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d78:	f113 0f0d 	cmn.w	r3, #13
 8010d7c:	d102      	bne.n	8010d84 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010d7e:	f06f 030c 	mvn.w	r3, #12
 8010d82:	e006      	b.n	8010d92 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	68ba      	ldr	r2, [r7, #8]
 8010d88:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010d8a:	f06f 0304 	mvn.w	r3, #4
 8010d8e:	e000      	b.n	8010d92 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8010d90:	2300      	movs	r3, #0
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3714      	adds	r7, #20
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd90      	pop	{r4, r7, pc}
 8010d9a:	bf00      	nop
 8010d9c:	0801b078 	.word	0x0801b078
 8010da0:	0801b588 	.word	0x0801b588
 8010da4:	0801b0bc 	.word	0x0801b0bc

08010da8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b084      	sub	sp, #16
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010db0:	e007      	b.n	8010dc2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f000 f80a 	bl	8010dd2 <tcp_seg_free>
    seg = next;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d1f4      	bne.n	8010db2 <tcp_segs_free+0xa>
  }
}
 8010dc8:	bf00      	nop
 8010dca:	bf00      	nop
 8010dcc:	3710      	adds	r7, #16
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}

08010dd2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010dd2:	b580      	push	{r7, lr}
 8010dd4:	b082      	sub	sp, #8
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d00c      	beq.n	8010dfa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d004      	beq.n	8010df2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7fe fb89 	bl	800f504 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010df2:	6879      	ldr	r1, [r7, #4]
 8010df4:	2003      	movs	r0, #3
 8010df6:	f7fd fd73 	bl	800e8e0 <memp_free>
  }
}
 8010dfa:	bf00      	nop
 8010dfc:	3708      	adds	r7, #8
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}
	...

08010e04 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b084      	sub	sp, #16
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d106      	bne.n	8010e20 <tcp_seg_copy+0x1c>
 8010e12:	4b0f      	ldr	r3, [pc, #60]	; (8010e50 <tcp_seg_copy+0x4c>)
 8010e14:	f240 6282 	movw	r2, #1666	; 0x682
 8010e18:	490e      	ldr	r1, [pc, #56]	; (8010e54 <tcp_seg_copy+0x50>)
 8010e1a:	480f      	ldr	r0, [pc, #60]	; (8010e58 <tcp_seg_copy+0x54>)
 8010e1c:	f008 f86a 	bl	8018ef4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010e20:	2003      	movs	r0, #3
 8010e22:	f7fd fd11 	bl	800e848 <memp_malloc>
 8010e26:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d101      	bne.n	8010e32 <tcp_seg_copy+0x2e>
    return NULL;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	e00a      	b.n	8010e48 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010e32:	2210      	movs	r2, #16
 8010e34:	6879      	ldr	r1, [r7, #4]
 8010e36:	68f8      	ldr	r0, [r7, #12]
 8010e38:	f007 ff9c 	bl	8018d74 <memcpy>
  pbuf_ref(cseg->p);
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	685b      	ldr	r3, [r3, #4]
 8010e40:	4618      	mov	r0, r3
 8010e42:	f7fe fbff 	bl	800f644 <pbuf_ref>
  return cseg;
 8010e46:	68fb      	ldr	r3, [r7, #12]
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3710      	adds	r7, #16
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}
 8010e50:	0801b078 	.word	0x0801b078
 8010e54:	0801b5cc 	.word	0x0801b5cc
 8010e58:	0801b0bc 	.word	0x0801b0bc

08010e5c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b084      	sub	sp, #16
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	60b9      	str	r1, [r7, #8]
 8010e66:	607a      	str	r2, [r7, #4]
 8010e68:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d109      	bne.n	8010e84 <tcp_recv_null+0x28>
 8010e70:	4b12      	ldr	r3, [pc, #72]	; (8010ebc <tcp_recv_null+0x60>)
 8010e72:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010e76:	4912      	ldr	r1, [pc, #72]	; (8010ec0 <tcp_recv_null+0x64>)
 8010e78:	4812      	ldr	r0, [pc, #72]	; (8010ec4 <tcp_recv_null+0x68>)
 8010e7a:	f008 f83b 	bl	8018ef4 <iprintf>
 8010e7e:	f06f 030f 	mvn.w	r3, #15
 8010e82:	e016      	b.n	8010eb2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d009      	beq.n	8010e9e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	891b      	ldrh	r3, [r3, #8]
 8010e8e:	4619      	mov	r1, r3
 8010e90:	68b8      	ldr	r0, [r7, #8]
 8010e92:	f7ff f9b7 	bl	8010204 <tcp_recved>
    pbuf_free(p);
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	f7fe fb34 	bl	800f504 <pbuf_free>
 8010e9c:	e008      	b.n	8010eb0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010e9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d104      	bne.n	8010eb0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010ea6:	68b8      	ldr	r0, [r7, #8]
 8010ea8:	f7ff f85c 	bl	800ff64 <tcp_close>
 8010eac:	4603      	mov	r3, r0
 8010eae:	e000      	b.n	8010eb2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010eb0:	2300      	movs	r3, #0
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	3710      	adds	r7, #16
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}
 8010eba:	bf00      	nop
 8010ebc:	0801b078 	.word	0x0801b078
 8010ec0:	0801b5e8 	.word	0x0801b5e8
 8010ec4:	0801b0bc 	.word	0x0801b0bc

08010ec8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b086      	sub	sp, #24
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	4603      	mov	r3, r0
 8010ed0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	db01      	blt.n	8010ede <tcp_kill_prio+0x16>
 8010eda:	79fb      	ldrb	r3, [r7, #7]
 8010edc:	e000      	b.n	8010ee0 <tcp_kill_prio+0x18>
 8010ede:	237f      	movs	r3, #127	; 0x7f
 8010ee0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010ee2:	7afb      	ldrb	r3, [r7, #11]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d034      	beq.n	8010f52 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010ee8:	7afb      	ldrb	r3, [r7, #11]
 8010eea:	3b01      	subs	r3, #1
 8010eec:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ef6:	4b19      	ldr	r3, [pc, #100]	; (8010f5c <tcp_kill_prio+0x94>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	617b      	str	r3, [r7, #20]
 8010efc:	e01f      	b.n	8010f3e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	7d5b      	ldrb	r3, [r3, #21]
 8010f02:	7afa      	ldrb	r2, [r7, #11]
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d80c      	bhi.n	8010f22 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010f0c:	7afa      	ldrb	r2, [r7, #11]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d112      	bne.n	8010f38 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010f12:	4b13      	ldr	r3, [pc, #76]	; (8010f60 <tcp_kill_prio+0x98>)
 8010f14:	681a      	ldr	r2, [r3, #0]
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	6a1b      	ldr	r3, [r3, #32]
 8010f1a:	1ad3      	subs	r3, r2, r3
 8010f1c:	68fa      	ldr	r2, [r7, #12]
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	d80a      	bhi.n	8010f38 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010f22:	4b0f      	ldr	r3, [pc, #60]	; (8010f60 <tcp_kill_prio+0x98>)
 8010f24:	681a      	ldr	r2, [r3, #0]
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	6a1b      	ldr	r3, [r3, #32]
 8010f2a:	1ad3      	subs	r3, r2, r3
 8010f2c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	7d5b      	ldrb	r3, [r3, #21]
 8010f36:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	68db      	ldr	r3, [r3, #12]
 8010f3c:	617b      	str	r3, [r7, #20]
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d1dc      	bne.n	8010efe <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d004      	beq.n	8010f54 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010f4a:	6938      	ldr	r0, [r7, #16]
 8010f4c:	f7ff f8f4 	bl	8010138 <tcp_abort>
 8010f50:	e000      	b.n	8010f54 <tcp_kill_prio+0x8c>
    return;
 8010f52:	bf00      	nop
  }
}
 8010f54:	3718      	adds	r7, #24
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	bf00      	nop
 8010f5c:	2001879c 	.word	0x2001879c
 8010f60:	200187a0 	.word	0x200187a0

08010f64 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b086      	sub	sp, #24
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010f6e:	79fb      	ldrb	r3, [r7, #7]
 8010f70:	2b08      	cmp	r3, #8
 8010f72:	d009      	beq.n	8010f88 <tcp_kill_state+0x24>
 8010f74:	79fb      	ldrb	r3, [r7, #7]
 8010f76:	2b09      	cmp	r3, #9
 8010f78:	d006      	beq.n	8010f88 <tcp_kill_state+0x24>
 8010f7a:	4b1a      	ldr	r3, [pc, #104]	; (8010fe4 <tcp_kill_state+0x80>)
 8010f7c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010f80:	4919      	ldr	r1, [pc, #100]	; (8010fe8 <tcp_kill_state+0x84>)
 8010f82:	481a      	ldr	r0, [pc, #104]	; (8010fec <tcp_kill_state+0x88>)
 8010f84:	f007 ffb6 	bl	8018ef4 <iprintf>

  inactivity = 0;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f90:	4b17      	ldr	r3, [pc, #92]	; (8010ff0 <tcp_kill_state+0x8c>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	617b      	str	r3, [r7, #20]
 8010f96:	e017      	b.n	8010fc8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	7d1b      	ldrb	r3, [r3, #20]
 8010f9c:	79fa      	ldrb	r2, [r7, #7]
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d10f      	bne.n	8010fc2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010fa2:	4b14      	ldr	r3, [pc, #80]	; (8010ff4 <tcp_kill_state+0x90>)
 8010fa4:	681a      	ldr	r2, [r3, #0]
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	6a1b      	ldr	r3, [r3, #32]
 8010faa:	1ad3      	subs	r3, r2, r3
 8010fac:	68fa      	ldr	r2, [r7, #12]
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d807      	bhi.n	8010fc2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010fb2:	4b10      	ldr	r3, [pc, #64]	; (8010ff4 <tcp_kill_state+0x90>)
 8010fb4:	681a      	ldr	r2, [r3, #0]
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	6a1b      	ldr	r3, [r3, #32]
 8010fba:	1ad3      	subs	r3, r2, r3
 8010fbc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	68db      	ldr	r3, [r3, #12]
 8010fc6:	617b      	str	r3, [r7, #20]
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d1e4      	bne.n	8010f98 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010fce:	693b      	ldr	r3, [r7, #16]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d003      	beq.n	8010fdc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010fd4:	2100      	movs	r1, #0
 8010fd6:	6938      	ldr	r0, [r7, #16]
 8010fd8:	f7fe fff0 	bl	800ffbc <tcp_abandon>
  }
}
 8010fdc:	bf00      	nop
 8010fde:	3718      	adds	r7, #24
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}
 8010fe4:	0801b078 	.word	0x0801b078
 8010fe8:	0801b604 	.word	0x0801b604
 8010fec:	0801b0bc 	.word	0x0801b0bc
 8010ff0:	2001879c 	.word	0x2001879c
 8010ff4:	200187a0 	.word	0x200187a0

08010ff8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b084      	sub	sp, #16
 8010ffc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010ffe:	2300      	movs	r3, #0
 8011000:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011002:	2300      	movs	r3, #0
 8011004:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011006:	4b12      	ldr	r3, [pc, #72]	; (8011050 <tcp_kill_timewait+0x58>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	60fb      	str	r3, [r7, #12]
 801100c:	e012      	b.n	8011034 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801100e:	4b11      	ldr	r3, [pc, #68]	; (8011054 <tcp_kill_timewait+0x5c>)
 8011010:	681a      	ldr	r2, [r3, #0]
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	6a1b      	ldr	r3, [r3, #32]
 8011016:	1ad3      	subs	r3, r2, r3
 8011018:	687a      	ldr	r2, [r7, #4]
 801101a:	429a      	cmp	r2, r3
 801101c:	d807      	bhi.n	801102e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801101e:	4b0d      	ldr	r3, [pc, #52]	; (8011054 <tcp_kill_timewait+0x5c>)
 8011020:	681a      	ldr	r2, [r3, #0]
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	6a1b      	ldr	r3, [r3, #32]
 8011026:	1ad3      	subs	r3, r2, r3
 8011028:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	68db      	ldr	r3, [r3, #12]
 8011032:	60fb      	str	r3, [r7, #12]
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d1e9      	bne.n	801100e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d002      	beq.n	8011046 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011040:	68b8      	ldr	r0, [r7, #8]
 8011042:	f7ff f879 	bl	8010138 <tcp_abort>
  }
}
 8011046:	bf00      	nop
 8011048:	3710      	adds	r7, #16
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}
 801104e:	bf00      	nop
 8011050:	200187ac 	.word	0x200187ac
 8011054:	200187a0 	.word	0x200187a0

08011058 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801105e:	4b10      	ldr	r3, [pc, #64]	; (80110a0 <tcp_handle_closepend+0x48>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011064:	e014      	b.n	8011090 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	68db      	ldr	r3, [r3, #12]
 801106a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	8b5b      	ldrh	r3, [r3, #26]
 8011070:	f003 0308 	and.w	r3, r3, #8
 8011074:	2b00      	cmp	r3, #0
 8011076:	d009      	beq.n	801108c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	8b5b      	ldrh	r3, [r3, #26]
 801107c:	f023 0308 	bic.w	r3, r3, #8
 8011080:	b29a      	uxth	r2, r3
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f7fe ff02 	bl	800fe90 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d1e7      	bne.n	8011066 <tcp_handle_closepend+0xe>
  }
}
 8011096:	bf00      	nop
 8011098:	bf00      	nop
 801109a:	3708      	adds	r7, #8
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}
 80110a0:	2001879c 	.word	0x2001879c

080110a4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b084      	sub	sp, #16
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	4603      	mov	r3, r0
 80110ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80110ae:	2001      	movs	r0, #1
 80110b0:	f7fd fbca 	bl	800e848 <memp_malloc>
 80110b4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d126      	bne.n	801110a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80110bc:	f7ff ffcc 	bl	8011058 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80110c0:	f7ff ff9a 	bl	8010ff8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80110c4:	2001      	movs	r0, #1
 80110c6:	f7fd fbbf 	bl	800e848 <memp_malloc>
 80110ca:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d11b      	bne.n	801110a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80110d2:	2009      	movs	r0, #9
 80110d4:	f7ff ff46 	bl	8010f64 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80110d8:	2001      	movs	r0, #1
 80110da:	f7fd fbb5 	bl	800e848 <memp_malloc>
 80110de:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d111      	bne.n	801110a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80110e6:	2008      	movs	r0, #8
 80110e8:	f7ff ff3c 	bl	8010f64 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80110ec:	2001      	movs	r0, #1
 80110ee:	f7fd fbab 	bl	800e848 <memp_malloc>
 80110f2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d107      	bne.n	801110a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80110fa:	79fb      	ldrb	r3, [r7, #7]
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7ff fee3 	bl	8010ec8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011102:	2001      	movs	r0, #1
 8011104:	f7fd fba0 	bl	800e848 <memp_malloc>
 8011108:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d03f      	beq.n	8011190 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011110:	229c      	movs	r2, #156	; 0x9c
 8011112:	2100      	movs	r1, #0
 8011114:	68f8      	ldr	r0, [r7, #12]
 8011116:	f007 fe3b 	bl	8018d90 <memset>
    pcb->prio = prio;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	79fa      	ldrb	r2, [r7, #7]
 801111e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	f241 0268 	movw	r2, #4200	; 0x1068
 8011126:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	f241 0268 	movw	r2, #4200	; 0x1068
 8011130:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	22ff      	movs	r2, #255	; 0xff
 801113e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011146:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	2206      	movs	r2, #6
 801114c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	2206      	movs	r2, #6
 8011154:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801115c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	2201      	movs	r2, #1
 8011162:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011166:	4b0d      	ldr	r3, [pc, #52]	; (801119c <tcp_alloc+0xf8>)
 8011168:	681a      	ldr	r2, [r3, #0]
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801116e:	4b0c      	ldr	r3, [pc, #48]	; (80111a0 <tcp_alloc+0xfc>)
 8011170:	781a      	ldrb	r2, [r3, #0]
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	f241 0268 	movw	r2, #4200	; 0x1068
 801117c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	4a08      	ldr	r2, [pc, #32]	; (80111a4 <tcp_alloc+0x100>)
 8011184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	4a07      	ldr	r2, [pc, #28]	; (80111a8 <tcp_alloc+0x104>)
 801118c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011190:	68fb      	ldr	r3, [r7, #12]
}
 8011192:	4618      	mov	r0, r3
 8011194:	3710      	adds	r7, #16
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}
 801119a:	bf00      	nop
 801119c:	200187a0 	.word	0x200187a0
 80111a0:	200006a6 	.word	0x200006a6
 80111a4:	08010e5d 	.word	0x08010e5d
 80111a8:	006ddd00 	.word	0x006ddd00

080111ac <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80111b0:	2040      	movs	r0, #64	; 0x40
 80111b2:	f7ff ff77 	bl	80110a4 <tcp_alloc>
 80111b6:	4603      	mov	r3, r0
}
 80111b8:	4618      	mov	r0, r3
 80111ba:	bd80      	pop	{r7, pc}

080111bc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80111bc:	b480      	push	{r7}
 80111be:	b083      	sub	sp, #12
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d002      	beq.n	80111d2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	683a      	ldr	r2, [r7, #0]
 80111d0:	611a      	str	r2, [r3, #16]
  }
}
 80111d2:	bf00      	nop
 80111d4:	370c      	adds	r7, #12
 80111d6:	46bd      	mov	sp, r7
 80111d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111dc:	4770      	bx	lr
	...

080111e0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b082      	sub	sp, #8
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d00e      	beq.n	801120e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	7d1b      	ldrb	r3, [r3, #20]
 80111f4:	2b01      	cmp	r3, #1
 80111f6:	d106      	bne.n	8011206 <tcp_recv+0x26>
 80111f8:	4b07      	ldr	r3, [pc, #28]	; (8011218 <tcp_recv+0x38>)
 80111fa:	f240 72df 	movw	r2, #2015	; 0x7df
 80111fe:	4907      	ldr	r1, [pc, #28]	; (801121c <tcp_recv+0x3c>)
 8011200:	4807      	ldr	r0, [pc, #28]	; (8011220 <tcp_recv+0x40>)
 8011202:	f007 fe77 	bl	8018ef4 <iprintf>
    pcb->recv = recv;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	683a      	ldr	r2, [r7, #0]
 801120a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801120e:	bf00      	nop
 8011210:	3708      	adds	r7, #8
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	0801b078 	.word	0x0801b078
 801121c:	0801b614 	.word	0x0801b614
 8011220:	0801b0bc 	.word	0x0801b0bc

08011224 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d00e      	beq.n	8011252 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	7d1b      	ldrb	r3, [r3, #20]
 8011238:	2b01      	cmp	r3, #1
 801123a:	d106      	bne.n	801124a <tcp_sent+0x26>
 801123c:	4b07      	ldr	r3, [pc, #28]	; (801125c <tcp_sent+0x38>)
 801123e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8011242:	4907      	ldr	r1, [pc, #28]	; (8011260 <tcp_sent+0x3c>)
 8011244:	4807      	ldr	r0, [pc, #28]	; (8011264 <tcp_sent+0x40>)
 8011246:	f007 fe55 	bl	8018ef4 <iprintf>
    pcb->sent = sent;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	683a      	ldr	r2, [r7, #0]
 801124e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8011252:	bf00      	nop
 8011254:	3708      	adds	r7, #8
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}
 801125a:	bf00      	nop
 801125c:	0801b078 	.word	0x0801b078
 8011260:	0801b63c 	.word	0x0801b63c
 8011264:	0801b0bc 	.word	0x0801b0bc

08011268 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d00e      	beq.n	8011296 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	7d1b      	ldrb	r3, [r3, #20]
 801127c:	2b01      	cmp	r3, #1
 801127e:	d106      	bne.n	801128e <tcp_err+0x26>
 8011280:	4b07      	ldr	r3, [pc, #28]	; (80112a0 <tcp_err+0x38>)
 8011282:	f640 020d 	movw	r2, #2061	; 0x80d
 8011286:	4907      	ldr	r1, [pc, #28]	; (80112a4 <tcp_err+0x3c>)
 8011288:	4807      	ldr	r0, [pc, #28]	; (80112a8 <tcp_err+0x40>)
 801128a:	f007 fe33 	bl	8018ef4 <iprintf>
    pcb->errf = err;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	683a      	ldr	r2, [r7, #0]
 8011292:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8011296:	bf00      	nop
 8011298:	3708      	adds	r7, #8
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}
 801129e:	bf00      	nop
 80112a0:	0801b078 	.word	0x0801b078
 80112a4:	0801b664 	.word	0x0801b664
 80112a8:	0801b0bc 	.word	0x0801b0bc

080112ac <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b084      	sub	sp, #16
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	60f8      	str	r0, [r7, #12]
 80112b4:	60b9      	str	r1, [r7, #8]
 80112b6:	4613      	mov	r3, r2
 80112b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d107      	bne.n	80112d0 <tcp_poll+0x24>
 80112c0:	4b0e      	ldr	r3, [pc, #56]	; (80112fc <tcp_poll+0x50>)
 80112c2:	f640 023d 	movw	r2, #2109	; 0x83d
 80112c6:	490e      	ldr	r1, [pc, #56]	; (8011300 <tcp_poll+0x54>)
 80112c8:	480e      	ldr	r0, [pc, #56]	; (8011304 <tcp_poll+0x58>)
 80112ca:	f007 fe13 	bl	8018ef4 <iprintf>
 80112ce:	e011      	b.n	80112f4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	7d1b      	ldrb	r3, [r3, #20]
 80112d4:	2b01      	cmp	r3, #1
 80112d6:	d106      	bne.n	80112e6 <tcp_poll+0x3a>
 80112d8:	4b08      	ldr	r3, [pc, #32]	; (80112fc <tcp_poll+0x50>)
 80112da:	f640 023e 	movw	r2, #2110	; 0x83e
 80112de:	490a      	ldr	r1, [pc, #40]	; (8011308 <tcp_poll+0x5c>)
 80112e0:	4808      	ldr	r0, [pc, #32]	; (8011304 <tcp_poll+0x58>)
 80112e2:	f007 fe07 	bl	8018ef4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	68ba      	ldr	r2, [r7, #8]
 80112ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	79fa      	ldrb	r2, [r7, #7]
 80112f2:	775a      	strb	r2, [r3, #29]
}
 80112f4:	3710      	adds	r7, #16
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}
 80112fa:	bf00      	nop
 80112fc:	0801b078 	.word	0x0801b078
 8011300:	0801b68c 	.word	0x0801b68c
 8011304:	0801b0bc 	.word	0x0801b0bc
 8011308:	0801b6a4 	.word	0x0801b6a4

0801130c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b082      	sub	sp, #8
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d107      	bne.n	801132a <tcp_pcb_purge+0x1e>
 801131a:	4b21      	ldr	r3, [pc, #132]	; (80113a0 <tcp_pcb_purge+0x94>)
 801131c:	f640 0251 	movw	r2, #2129	; 0x851
 8011320:	4920      	ldr	r1, [pc, #128]	; (80113a4 <tcp_pcb_purge+0x98>)
 8011322:	4821      	ldr	r0, [pc, #132]	; (80113a8 <tcp_pcb_purge+0x9c>)
 8011324:	f007 fde6 	bl	8018ef4 <iprintf>
 8011328:	e037      	b.n	801139a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	7d1b      	ldrb	r3, [r3, #20]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d033      	beq.n	801139a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011336:	2b0a      	cmp	r3, #10
 8011338:	d02f      	beq.n	801139a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801133e:	2b01      	cmp	r3, #1
 8011340:	d02b      	beq.n	801139a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011346:	2b00      	cmp	r3, #0
 8011348:	d007      	beq.n	801135a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801134e:	4618      	mov	r0, r3
 8011350:	f7fe f8d8 	bl	800f504 <pbuf_free>
      pcb->refused_data = NULL;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2200      	movs	r2, #0
 8011358:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801135e:	2b00      	cmp	r3, #0
 8011360:	d002      	beq.n	8011368 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f000 f986 	bl	8011674 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801136e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011374:	4618      	mov	r0, r3
 8011376:	f7ff fd17 	bl	8010da8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801137e:	4618      	mov	r0, r3
 8011380:	f7ff fd12 	bl	8010da8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2200      	movs	r2, #0
 8011388:	66da      	str	r2, [r3, #108]	; 0x6c
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2200      	movs	r2, #0
 8011396:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801139a:	3708      	adds	r7, #8
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}
 80113a0:	0801b078 	.word	0x0801b078
 80113a4:	0801b6c4 	.word	0x0801b6c4
 80113a8:	0801b0bc 	.word	0x0801b0bc

080113ac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b084      	sub	sp, #16
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80113b6:	683b      	ldr	r3, [r7, #0]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d106      	bne.n	80113ca <tcp_pcb_remove+0x1e>
 80113bc:	4b3e      	ldr	r3, [pc, #248]	; (80114b8 <tcp_pcb_remove+0x10c>)
 80113be:	f640 0283 	movw	r2, #2179	; 0x883
 80113c2:	493e      	ldr	r1, [pc, #248]	; (80114bc <tcp_pcb_remove+0x110>)
 80113c4:	483e      	ldr	r0, [pc, #248]	; (80114c0 <tcp_pcb_remove+0x114>)
 80113c6:	f007 fd95 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d106      	bne.n	80113de <tcp_pcb_remove+0x32>
 80113d0:	4b39      	ldr	r3, [pc, #228]	; (80114b8 <tcp_pcb_remove+0x10c>)
 80113d2:	f640 0284 	movw	r2, #2180	; 0x884
 80113d6:	493b      	ldr	r1, [pc, #236]	; (80114c4 <tcp_pcb_remove+0x118>)
 80113d8:	4839      	ldr	r0, [pc, #228]	; (80114c0 <tcp_pcb_remove+0x114>)
 80113da:	f007 fd8b 	bl	8018ef4 <iprintf>

  TCP_RMV(pcblist, pcb);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	683a      	ldr	r2, [r7, #0]
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d105      	bne.n	80113f4 <tcp_pcb_remove+0x48>
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	68da      	ldr	r2, [r3, #12]
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	601a      	str	r2, [r3, #0]
 80113f2:	e013      	b.n	801141c <tcp_pcb_remove+0x70>
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	60fb      	str	r3, [r7, #12]
 80113fa:	e00c      	b.n	8011416 <tcp_pcb_remove+0x6a>
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	68db      	ldr	r3, [r3, #12]
 8011400:	683a      	ldr	r2, [r7, #0]
 8011402:	429a      	cmp	r2, r3
 8011404:	d104      	bne.n	8011410 <tcp_pcb_remove+0x64>
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	68da      	ldr	r2, [r3, #12]
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	60da      	str	r2, [r3, #12]
 801140e:	e005      	b.n	801141c <tcp_pcb_remove+0x70>
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	68db      	ldr	r3, [r3, #12]
 8011414:	60fb      	str	r3, [r7, #12]
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d1ef      	bne.n	80113fc <tcp_pcb_remove+0x50>
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	2200      	movs	r2, #0
 8011420:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011422:	6838      	ldr	r0, [r7, #0]
 8011424:	f7ff ff72 	bl	801130c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	7d1b      	ldrb	r3, [r3, #20]
 801142c:	2b0a      	cmp	r3, #10
 801142e:	d013      	beq.n	8011458 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011434:	2b01      	cmp	r3, #1
 8011436:	d00f      	beq.n	8011458 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	8b5b      	ldrh	r3, [r3, #26]
 801143c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011440:	2b00      	cmp	r3, #0
 8011442:	d009      	beq.n	8011458 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	8b5b      	ldrh	r3, [r3, #26]
 8011448:	f043 0302 	orr.w	r3, r3, #2
 801144c:	b29a      	uxth	r2, r3
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011452:	6838      	ldr	r0, [r7, #0]
 8011454:	f003 fbc8 	bl	8014be8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	7d1b      	ldrb	r3, [r3, #20]
 801145c:	2b01      	cmp	r3, #1
 801145e:	d020      	beq.n	80114a2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011464:	2b00      	cmp	r3, #0
 8011466:	d006      	beq.n	8011476 <tcp_pcb_remove+0xca>
 8011468:	4b13      	ldr	r3, [pc, #76]	; (80114b8 <tcp_pcb_remove+0x10c>)
 801146a:	f640 0293 	movw	r2, #2195	; 0x893
 801146e:	4916      	ldr	r1, [pc, #88]	; (80114c8 <tcp_pcb_remove+0x11c>)
 8011470:	4813      	ldr	r0, [pc, #76]	; (80114c0 <tcp_pcb_remove+0x114>)
 8011472:	f007 fd3f 	bl	8018ef4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801147a:	2b00      	cmp	r3, #0
 801147c:	d006      	beq.n	801148c <tcp_pcb_remove+0xe0>
 801147e:	4b0e      	ldr	r3, [pc, #56]	; (80114b8 <tcp_pcb_remove+0x10c>)
 8011480:	f640 0294 	movw	r2, #2196	; 0x894
 8011484:	4911      	ldr	r1, [pc, #68]	; (80114cc <tcp_pcb_remove+0x120>)
 8011486:	480e      	ldr	r0, [pc, #56]	; (80114c0 <tcp_pcb_remove+0x114>)
 8011488:	f007 fd34 	bl	8018ef4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011490:	2b00      	cmp	r3, #0
 8011492:	d006      	beq.n	80114a2 <tcp_pcb_remove+0xf6>
 8011494:	4b08      	ldr	r3, [pc, #32]	; (80114b8 <tcp_pcb_remove+0x10c>)
 8011496:	f640 0296 	movw	r2, #2198	; 0x896
 801149a:	490d      	ldr	r1, [pc, #52]	; (80114d0 <tcp_pcb_remove+0x124>)
 801149c:	4808      	ldr	r0, [pc, #32]	; (80114c0 <tcp_pcb_remove+0x114>)
 801149e:	f007 fd29 	bl	8018ef4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	2200      	movs	r2, #0
 80114a6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	2200      	movs	r2, #0
 80114ac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80114ae:	bf00      	nop
 80114b0:	3710      	adds	r7, #16
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
 80114b6:	bf00      	nop
 80114b8:	0801b078 	.word	0x0801b078
 80114bc:	0801b6e0 	.word	0x0801b6e0
 80114c0:	0801b0bc 	.word	0x0801b0bc
 80114c4:	0801b6fc 	.word	0x0801b6fc
 80114c8:	0801b71c 	.word	0x0801b71c
 80114cc:	0801b734 	.word	0x0801b734
 80114d0:	0801b750 	.word	0x0801b750

080114d4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b082      	sub	sp, #8
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d106      	bne.n	80114f0 <tcp_next_iss+0x1c>
 80114e2:	4b0a      	ldr	r3, [pc, #40]	; (801150c <tcp_next_iss+0x38>)
 80114e4:	f640 02af 	movw	r2, #2223	; 0x8af
 80114e8:	4909      	ldr	r1, [pc, #36]	; (8011510 <tcp_next_iss+0x3c>)
 80114ea:	480a      	ldr	r0, [pc, #40]	; (8011514 <tcp_next_iss+0x40>)
 80114ec:	f007 fd02 	bl	8018ef4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80114f0:	4b09      	ldr	r3, [pc, #36]	; (8011518 <tcp_next_iss+0x44>)
 80114f2:	681a      	ldr	r2, [r3, #0]
 80114f4:	4b09      	ldr	r3, [pc, #36]	; (801151c <tcp_next_iss+0x48>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	4413      	add	r3, r2
 80114fa:	4a07      	ldr	r2, [pc, #28]	; (8011518 <tcp_next_iss+0x44>)
 80114fc:	6013      	str	r3, [r2, #0]
  return iss;
 80114fe:	4b06      	ldr	r3, [pc, #24]	; (8011518 <tcp_next_iss+0x44>)
 8011500:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011502:	4618      	mov	r0, r3
 8011504:	3708      	adds	r7, #8
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}
 801150a:	bf00      	nop
 801150c:	0801b078 	.word	0x0801b078
 8011510:	0801b768 	.word	0x0801b768
 8011514:	0801b0bc 	.word	0x0801b0bc
 8011518:	200005b0 	.word	0x200005b0
 801151c:	200187a0 	.word	0x200187a0

08011520 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b086      	sub	sp, #24
 8011524:	af00      	add	r7, sp, #0
 8011526:	4603      	mov	r3, r0
 8011528:	60b9      	str	r1, [r7, #8]
 801152a:	607a      	str	r2, [r7, #4]
 801152c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d106      	bne.n	8011542 <tcp_eff_send_mss_netif+0x22>
 8011534:	4b14      	ldr	r3, [pc, #80]	; (8011588 <tcp_eff_send_mss_netif+0x68>)
 8011536:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801153a:	4914      	ldr	r1, [pc, #80]	; (801158c <tcp_eff_send_mss_netif+0x6c>)
 801153c:	4814      	ldr	r0, [pc, #80]	; (8011590 <tcp_eff_send_mss_netif+0x70>)
 801153e:	f007 fcd9 	bl	8018ef4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d101      	bne.n	801154c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011548:	89fb      	ldrh	r3, [r7, #14]
 801154a:	e019      	b.n	8011580 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011550:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011552:	8afb      	ldrh	r3, [r7, #22]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d012      	beq.n	801157e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011558:	2328      	movs	r3, #40	; 0x28
 801155a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801155c:	8afa      	ldrh	r2, [r7, #22]
 801155e:	8abb      	ldrh	r3, [r7, #20]
 8011560:	429a      	cmp	r2, r3
 8011562:	d904      	bls.n	801156e <tcp_eff_send_mss_netif+0x4e>
 8011564:	8afa      	ldrh	r2, [r7, #22]
 8011566:	8abb      	ldrh	r3, [r7, #20]
 8011568:	1ad3      	subs	r3, r2, r3
 801156a:	b29b      	uxth	r3, r3
 801156c:	e000      	b.n	8011570 <tcp_eff_send_mss_netif+0x50>
 801156e:	2300      	movs	r3, #0
 8011570:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011572:	8a7a      	ldrh	r2, [r7, #18]
 8011574:	89fb      	ldrh	r3, [r7, #14]
 8011576:	4293      	cmp	r3, r2
 8011578:	bf28      	it	cs
 801157a:	4613      	movcs	r3, r2
 801157c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801157e:	89fb      	ldrh	r3, [r7, #14]
}
 8011580:	4618      	mov	r0, r3
 8011582:	3718      	adds	r7, #24
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}
 8011588:	0801b078 	.word	0x0801b078
 801158c:	0801b784 	.word	0x0801b784
 8011590:	0801b0bc 	.word	0x0801b0bc

08011594 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b084      	sub	sp, #16
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d119      	bne.n	80115dc <tcp_netif_ip_addr_changed_pcblist+0x48>
 80115a8:	4b10      	ldr	r3, [pc, #64]	; (80115ec <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80115aa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80115ae:	4910      	ldr	r1, [pc, #64]	; (80115f0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80115b0:	4810      	ldr	r0, [pc, #64]	; (80115f4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80115b2:	f007 fc9f 	bl	8018ef4 <iprintf>

  while (pcb != NULL) {
 80115b6:	e011      	b.n	80115dc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	681a      	ldr	r2, [r3, #0]
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d108      	bne.n	80115d6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	68db      	ldr	r3, [r3, #12]
 80115c8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80115ca:	68f8      	ldr	r0, [r7, #12]
 80115cc:	f7fe fdb4 	bl	8010138 <tcp_abort>
      pcb = next;
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	60fb      	str	r3, [r7, #12]
 80115d4:	e002      	b.n	80115dc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	68db      	ldr	r3, [r3, #12]
 80115da:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d1ea      	bne.n	80115b8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80115e2:	bf00      	nop
 80115e4:	bf00      	nop
 80115e6:	3710      	adds	r7, #16
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	0801b078 	.word	0x0801b078
 80115f0:	0801b7ac 	.word	0x0801b7ac
 80115f4:	0801b0bc 	.word	0x0801b0bc

080115f8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b084      	sub	sp, #16
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
 8011600:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d02a      	beq.n	801165e <tcp_netif_ip_addr_changed+0x66>
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d026      	beq.n	801165e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011610:	4b15      	ldr	r3, [pc, #84]	; (8011668 <tcp_netif_ip_addr_changed+0x70>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	4619      	mov	r1, r3
 8011616:	6878      	ldr	r0, [r7, #4]
 8011618:	f7ff ffbc 	bl	8011594 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801161c:	4b13      	ldr	r3, [pc, #76]	; (801166c <tcp_netif_ip_addr_changed+0x74>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	4619      	mov	r1, r3
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f7ff ffb6 	bl	8011594 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011628:	683b      	ldr	r3, [r7, #0]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d017      	beq.n	801165e <tcp_netif_ip_addr_changed+0x66>
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d013      	beq.n	801165e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011636:	4b0e      	ldr	r3, [pc, #56]	; (8011670 <tcp_netif_ip_addr_changed+0x78>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	60fb      	str	r3, [r7, #12]
 801163c:	e00c      	b.n	8011658 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	681a      	ldr	r2, [r3, #0]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	429a      	cmp	r2, r3
 8011648:	d103      	bne.n	8011652 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	681a      	ldr	r2, [r3, #0]
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	68db      	ldr	r3, [r3, #12]
 8011656:	60fb      	str	r3, [r7, #12]
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d1ef      	bne.n	801163e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801165e:	bf00      	nop
 8011660:	3710      	adds	r7, #16
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}
 8011666:	bf00      	nop
 8011668:	2001879c 	.word	0x2001879c
 801166c:	200187a8 	.word	0x200187a8
 8011670:	200187a4 	.word	0x200187a4

08011674 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b082      	sub	sp, #8
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011680:	2b00      	cmp	r3, #0
 8011682:	d007      	beq.n	8011694 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011688:	4618      	mov	r0, r3
 801168a:	f7ff fb8d 	bl	8010da8 <tcp_segs_free>
    pcb->ooseq = NULL;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2200      	movs	r2, #0
 8011692:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011694:	bf00      	nop
 8011696:	3708      	adds	r7, #8
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}

0801169c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801169c:	b590      	push	{r4, r7, lr}
 801169e:	b08d      	sub	sp, #52	; 0x34
 80116a0:	af04      	add	r7, sp, #16
 80116a2:	6078      	str	r0, [r7, #4]
 80116a4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d105      	bne.n	80116b8 <tcp_input+0x1c>
 80116ac:	4b9b      	ldr	r3, [pc, #620]	; (801191c <tcp_input+0x280>)
 80116ae:	2283      	movs	r2, #131	; 0x83
 80116b0:	499b      	ldr	r1, [pc, #620]	; (8011920 <tcp_input+0x284>)
 80116b2:	489c      	ldr	r0, [pc, #624]	; (8011924 <tcp_input+0x288>)
 80116b4:	f007 fc1e 	bl	8018ef4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	685b      	ldr	r3, [r3, #4]
 80116bc:	4a9a      	ldr	r2, [pc, #616]	; (8011928 <tcp_input+0x28c>)
 80116be:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	895b      	ldrh	r3, [r3, #10]
 80116c4:	2b13      	cmp	r3, #19
 80116c6:	f240 83c5 	bls.w	8011e54 <tcp_input+0x7b8>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80116ca:	4b98      	ldr	r3, [pc, #608]	; (801192c <tcp_input+0x290>)
 80116cc:	695b      	ldr	r3, [r3, #20]
 80116ce:	4a97      	ldr	r2, [pc, #604]	; (801192c <tcp_input+0x290>)
 80116d0:	6812      	ldr	r2, [r2, #0]
 80116d2:	4611      	mov	r1, r2
 80116d4:	4618      	mov	r0, r3
 80116d6:	f006 f871 	bl	80177bc <ip4_addr_isbroadcast_u32>
 80116da:	4603      	mov	r3, r0
 80116dc:	2b00      	cmp	r3, #0
 80116de:	f040 83bb 	bne.w	8011e58 <tcp_input+0x7bc>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80116e2:	4b92      	ldr	r3, [pc, #584]	; (801192c <tcp_input+0x290>)
 80116e4:	695b      	ldr	r3, [r3, #20]
 80116e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80116ea:	2be0      	cmp	r3, #224	; 0xe0
 80116ec:	f000 83b4 	beq.w	8011e58 <tcp_input+0x7bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80116f0:	4b8d      	ldr	r3, [pc, #564]	; (8011928 <tcp_input+0x28c>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	899b      	ldrh	r3, [r3, #12]
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7fc fc40 	bl	800df7e <lwip_htons>
 80116fe:	4603      	mov	r3, r0
 8011700:	0b1b      	lsrs	r3, r3, #12
 8011702:	b29b      	uxth	r3, r3
 8011704:	b2db      	uxtb	r3, r3
 8011706:	009b      	lsls	r3, r3, #2
 8011708:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801170a:	7cbb      	ldrb	r3, [r7, #18]
 801170c:	2b13      	cmp	r3, #19
 801170e:	f240 83a5 	bls.w	8011e5c <tcp_input+0x7c0>
 8011712:	7cbb      	ldrb	r3, [r7, #18]
 8011714:	b29a      	uxth	r2, r3
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	891b      	ldrh	r3, [r3, #8]
 801171a:	429a      	cmp	r2, r3
 801171c:	f200 839e 	bhi.w	8011e5c <tcp_input+0x7c0>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011720:	7cbb      	ldrb	r3, [r7, #18]
 8011722:	b29b      	uxth	r3, r3
 8011724:	3b14      	subs	r3, #20
 8011726:	b29a      	uxth	r2, r3
 8011728:	4b81      	ldr	r3, [pc, #516]	; (8011930 <tcp_input+0x294>)
 801172a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801172c:	4b81      	ldr	r3, [pc, #516]	; (8011934 <tcp_input+0x298>)
 801172e:	2200      	movs	r2, #0
 8011730:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	895a      	ldrh	r2, [r3, #10]
 8011736:	7cbb      	ldrb	r3, [r7, #18]
 8011738:	b29b      	uxth	r3, r3
 801173a:	429a      	cmp	r2, r3
 801173c:	d309      	bcc.n	8011752 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801173e:	4b7c      	ldr	r3, [pc, #496]	; (8011930 <tcp_input+0x294>)
 8011740:	881a      	ldrh	r2, [r3, #0]
 8011742:	4b7d      	ldr	r3, [pc, #500]	; (8011938 <tcp_input+0x29c>)
 8011744:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011746:	7cbb      	ldrb	r3, [r7, #18]
 8011748:	4619      	mov	r1, r3
 801174a:	6878      	ldr	r0, [r7, #4]
 801174c:	f7fd fe54 	bl	800f3f8 <pbuf_remove_header>
 8011750:	e04e      	b.n	80117f0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d105      	bne.n	8011766 <tcp_input+0xca>
 801175a:	4b70      	ldr	r3, [pc, #448]	; (801191c <tcp_input+0x280>)
 801175c:	22c2      	movs	r2, #194	; 0xc2
 801175e:	4977      	ldr	r1, [pc, #476]	; (801193c <tcp_input+0x2a0>)
 8011760:	4870      	ldr	r0, [pc, #448]	; (8011924 <tcp_input+0x288>)
 8011762:	f007 fbc7 	bl	8018ef4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011766:	2114      	movs	r1, #20
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f7fd fe45 	bl	800f3f8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	895a      	ldrh	r2, [r3, #10]
 8011772:	4b71      	ldr	r3, [pc, #452]	; (8011938 <tcp_input+0x29c>)
 8011774:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011776:	4b6e      	ldr	r3, [pc, #440]	; (8011930 <tcp_input+0x294>)
 8011778:	881a      	ldrh	r2, [r3, #0]
 801177a:	4b6f      	ldr	r3, [pc, #444]	; (8011938 <tcp_input+0x29c>)
 801177c:	881b      	ldrh	r3, [r3, #0]
 801177e:	1ad3      	subs	r3, r2, r3
 8011780:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011782:	4b6d      	ldr	r3, [pc, #436]	; (8011938 <tcp_input+0x29c>)
 8011784:	881b      	ldrh	r3, [r3, #0]
 8011786:	4619      	mov	r1, r3
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f7fd fe35 	bl	800f3f8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	895b      	ldrh	r3, [r3, #10]
 8011794:	8a3a      	ldrh	r2, [r7, #16]
 8011796:	429a      	cmp	r2, r3
 8011798:	f200 8362 	bhi.w	8011e60 <tcp_input+0x7c4>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	4a64      	ldr	r2, [pc, #400]	; (8011934 <tcp_input+0x298>)
 80117a4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	8a3a      	ldrh	r2, [r7, #16]
 80117ac:	4611      	mov	r1, r2
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7fd fe22 	bl	800f3f8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	891a      	ldrh	r2, [r3, #8]
 80117b8:	8a3b      	ldrh	r3, [r7, #16]
 80117ba:	1ad3      	subs	r3, r2, r3
 80117bc:	b29a      	uxth	r2, r3
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	895b      	ldrh	r3, [r3, #10]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d005      	beq.n	80117d6 <tcp_input+0x13a>
 80117ca:	4b54      	ldr	r3, [pc, #336]	; (801191c <tcp_input+0x280>)
 80117cc:	22df      	movs	r2, #223	; 0xdf
 80117ce:	495c      	ldr	r1, [pc, #368]	; (8011940 <tcp_input+0x2a4>)
 80117d0:	4854      	ldr	r0, [pc, #336]	; (8011924 <tcp_input+0x288>)
 80117d2:	f007 fb8f 	bl	8018ef4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	891a      	ldrh	r2, [r3, #8]
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	891b      	ldrh	r3, [r3, #8]
 80117e0:	429a      	cmp	r2, r3
 80117e2:	d005      	beq.n	80117f0 <tcp_input+0x154>
 80117e4:	4b4d      	ldr	r3, [pc, #308]	; (801191c <tcp_input+0x280>)
 80117e6:	22e0      	movs	r2, #224	; 0xe0
 80117e8:	4956      	ldr	r1, [pc, #344]	; (8011944 <tcp_input+0x2a8>)
 80117ea:	484e      	ldr	r0, [pc, #312]	; (8011924 <tcp_input+0x288>)
 80117ec:	f007 fb82 	bl	8018ef4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80117f0:	4b4d      	ldr	r3, [pc, #308]	; (8011928 <tcp_input+0x28c>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	881b      	ldrh	r3, [r3, #0]
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	4a4b      	ldr	r2, [pc, #300]	; (8011928 <tcp_input+0x28c>)
 80117fa:	6814      	ldr	r4, [r2, #0]
 80117fc:	4618      	mov	r0, r3
 80117fe:	f7fc fbbe 	bl	800df7e <lwip_htons>
 8011802:	4603      	mov	r3, r0
 8011804:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011806:	4b48      	ldr	r3, [pc, #288]	; (8011928 <tcp_input+0x28c>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	885b      	ldrh	r3, [r3, #2]
 801180c:	b29b      	uxth	r3, r3
 801180e:	4a46      	ldr	r2, [pc, #280]	; (8011928 <tcp_input+0x28c>)
 8011810:	6814      	ldr	r4, [r2, #0]
 8011812:	4618      	mov	r0, r3
 8011814:	f7fc fbb3 	bl	800df7e <lwip_htons>
 8011818:	4603      	mov	r3, r0
 801181a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801181c:	4b42      	ldr	r3, [pc, #264]	; (8011928 <tcp_input+0x28c>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	4a41      	ldr	r2, [pc, #260]	; (8011928 <tcp_input+0x28c>)
 8011824:	6814      	ldr	r4, [r2, #0]
 8011826:	4618      	mov	r0, r3
 8011828:	f7fc fbbe 	bl	800dfa8 <lwip_htonl>
 801182c:	4603      	mov	r3, r0
 801182e:	6063      	str	r3, [r4, #4]
 8011830:	6863      	ldr	r3, [r4, #4]
 8011832:	4a45      	ldr	r2, [pc, #276]	; (8011948 <tcp_input+0x2ac>)
 8011834:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011836:	4b3c      	ldr	r3, [pc, #240]	; (8011928 <tcp_input+0x28c>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	689b      	ldr	r3, [r3, #8]
 801183c:	4a3a      	ldr	r2, [pc, #232]	; (8011928 <tcp_input+0x28c>)
 801183e:	6814      	ldr	r4, [r2, #0]
 8011840:	4618      	mov	r0, r3
 8011842:	f7fc fbb1 	bl	800dfa8 <lwip_htonl>
 8011846:	4603      	mov	r3, r0
 8011848:	60a3      	str	r3, [r4, #8]
 801184a:	68a3      	ldr	r3, [r4, #8]
 801184c:	4a3f      	ldr	r2, [pc, #252]	; (801194c <tcp_input+0x2b0>)
 801184e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011850:	4b35      	ldr	r3, [pc, #212]	; (8011928 <tcp_input+0x28c>)
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	89db      	ldrh	r3, [r3, #14]
 8011856:	b29b      	uxth	r3, r3
 8011858:	4a33      	ldr	r2, [pc, #204]	; (8011928 <tcp_input+0x28c>)
 801185a:	6814      	ldr	r4, [r2, #0]
 801185c:	4618      	mov	r0, r3
 801185e:	f7fc fb8e 	bl	800df7e <lwip_htons>
 8011862:	4603      	mov	r3, r0
 8011864:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011866:	4b30      	ldr	r3, [pc, #192]	; (8011928 <tcp_input+0x28c>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	899b      	ldrh	r3, [r3, #12]
 801186c:	b29b      	uxth	r3, r3
 801186e:	4618      	mov	r0, r3
 8011870:	f7fc fb85 	bl	800df7e <lwip_htons>
 8011874:	4603      	mov	r3, r0
 8011876:	b2db      	uxtb	r3, r3
 8011878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801187c:	b2da      	uxtb	r2, r3
 801187e:	4b34      	ldr	r3, [pc, #208]	; (8011950 <tcp_input+0x2b4>)
 8011880:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	891a      	ldrh	r2, [r3, #8]
 8011886:	4b33      	ldr	r3, [pc, #204]	; (8011954 <tcp_input+0x2b8>)
 8011888:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801188a:	4b31      	ldr	r3, [pc, #196]	; (8011950 <tcp_input+0x2b4>)
 801188c:	781b      	ldrb	r3, [r3, #0]
 801188e:	f003 0303 	and.w	r3, r3, #3
 8011892:	2b00      	cmp	r3, #0
 8011894:	d00c      	beq.n	80118b0 <tcp_input+0x214>
    tcplen++;
 8011896:	4b2f      	ldr	r3, [pc, #188]	; (8011954 <tcp_input+0x2b8>)
 8011898:	881b      	ldrh	r3, [r3, #0]
 801189a:	3301      	adds	r3, #1
 801189c:	b29a      	uxth	r2, r3
 801189e:	4b2d      	ldr	r3, [pc, #180]	; (8011954 <tcp_input+0x2b8>)
 80118a0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	891a      	ldrh	r2, [r3, #8]
 80118a6:	4b2b      	ldr	r3, [pc, #172]	; (8011954 <tcp_input+0x2b8>)
 80118a8:	881b      	ldrh	r3, [r3, #0]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	f200 82da 	bhi.w	8011e64 <tcp_input+0x7c8>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80118b0:	2300      	movs	r3, #0
 80118b2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80118b4:	4b28      	ldr	r3, [pc, #160]	; (8011958 <tcp_input+0x2bc>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	61fb      	str	r3, [r7, #28]
 80118ba:	e09d      	b.n	80119f8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80118bc:	69fb      	ldr	r3, [r7, #28]
 80118be:	7d1b      	ldrb	r3, [r3, #20]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d105      	bne.n	80118d0 <tcp_input+0x234>
 80118c4:	4b15      	ldr	r3, [pc, #84]	; (801191c <tcp_input+0x280>)
 80118c6:	22fb      	movs	r2, #251	; 0xfb
 80118c8:	4924      	ldr	r1, [pc, #144]	; (801195c <tcp_input+0x2c0>)
 80118ca:	4816      	ldr	r0, [pc, #88]	; (8011924 <tcp_input+0x288>)
 80118cc:	f007 fb12 	bl	8018ef4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80118d0:	69fb      	ldr	r3, [r7, #28]
 80118d2:	7d1b      	ldrb	r3, [r3, #20]
 80118d4:	2b0a      	cmp	r3, #10
 80118d6:	d105      	bne.n	80118e4 <tcp_input+0x248>
 80118d8:	4b10      	ldr	r3, [pc, #64]	; (801191c <tcp_input+0x280>)
 80118da:	22fc      	movs	r2, #252	; 0xfc
 80118dc:	4920      	ldr	r1, [pc, #128]	; (8011960 <tcp_input+0x2c4>)
 80118de:	4811      	ldr	r0, [pc, #68]	; (8011924 <tcp_input+0x288>)
 80118e0:	f007 fb08 	bl	8018ef4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80118e4:	69fb      	ldr	r3, [r7, #28]
 80118e6:	7d1b      	ldrb	r3, [r3, #20]
 80118e8:	2b01      	cmp	r3, #1
 80118ea:	d105      	bne.n	80118f8 <tcp_input+0x25c>
 80118ec:	4b0b      	ldr	r3, [pc, #44]	; (801191c <tcp_input+0x280>)
 80118ee:	22fd      	movs	r2, #253	; 0xfd
 80118f0:	491c      	ldr	r1, [pc, #112]	; (8011964 <tcp_input+0x2c8>)
 80118f2:	480c      	ldr	r0, [pc, #48]	; (8011924 <tcp_input+0x288>)
 80118f4:	f007 fafe 	bl	8018ef4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80118f8:	69fb      	ldr	r3, [r7, #28]
 80118fa:	7a1b      	ldrb	r3, [r3, #8]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d033      	beq.n	8011968 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011900:	69fb      	ldr	r3, [r7, #28]
 8011902:	7a1a      	ldrb	r2, [r3, #8]
 8011904:	4b09      	ldr	r3, [pc, #36]	; (801192c <tcp_input+0x290>)
 8011906:	685b      	ldr	r3, [r3, #4]
 8011908:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801190c:	3301      	adds	r3, #1
 801190e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011910:	429a      	cmp	r2, r3
 8011912:	d029      	beq.n	8011968 <tcp_input+0x2cc>
      prev = pcb;
 8011914:	69fb      	ldr	r3, [r7, #28]
 8011916:	61bb      	str	r3, [r7, #24]
      continue;
 8011918:	e06b      	b.n	80119f2 <tcp_input+0x356>
 801191a:	bf00      	nop
 801191c:	0801b7e0 	.word	0x0801b7e0
 8011920:	0801b814 	.word	0x0801b814
 8011924:	0801b82c 	.word	0x0801b82c
 8011928:	200006b8 	.word	0x200006b8
 801192c:	20007b38 	.word	0x20007b38
 8011930:	200006bc 	.word	0x200006bc
 8011934:	200006c0 	.word	0x200006c0
 8011938:	200006be 	.word	0x200006be
 801193c:	0801b854 	.word	0x0801b854
 8011940:	0801b864 	.word	0x0801b864
 8011944:	0801b870 	.word	0x0801b870
 8011948:	200006c8 	.word	0x200006c8
 801194c:	200006cc 	.word	0x200006cc
 8011950:	200006d4 	.word	0x200006d4
 8011954:	200006d2 	.word	0x200006d2
 8011958:	2001879c 	.word	0x2001879c
 801195c:	0801b890 	.word	0x0801b890
 8011960:	0801b8b8 	.word	0x0801b8b8
 8011964:	0801b8e4 	.word	0x0801b8e4
    }

    if (pcb->remote_port == tcphdr->src &&
 8011968:	69fb      	ldr	r3, [r7, #28]
 801196a:	8b1a      	ldrh	r2, [r3, #24]
 801196c:	4b94      	ldr	r3, [pc, #592]	; (8011bc0 <tcp_input+0x524>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	881b      	ldrh	r3, [r3, #0]
 8011972:	b29b      	uxth	r3, r3
 8011974:	429a      	cmp	r2, r3
 8011976:	d13a      	bne.n	80119ee <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011978:	69fb      	ldr	r3, [r7, #28]
 801197a:	8ada      	ldrh	r2, [r3, #22]
 801197c:	4b90      	ldr	r3, [pc, #576]	; (8011bc0 <tcp_input+0x524>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	885b      	ldrh	r3, [r3, #2]
 8011982:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011984:	429a      	cmp	r2, r3
 8011986:	d132      	bne.n	80119ee <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011988:	69fb      	ldr	r3, [r7, #28]
 801198a:	685a      	ldr	r2, [r3, #4]
 801198c:	4b8d      	ldr	r3, [pc, #564]	; (8011bc4 <tcp_input+0x528>)
 801198e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011990:	429a      	cmp	r2, r3
 8011992:	d12c      	bne.n	80119ee <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011994:	69fb      	ldr	r3, [r7, #28]
 8011996:	681a      	ldr	r2, [r3, #0]
 8011998:	4b8a      	ldr	r3, [pc, #552]	; (8011bc4 <tcp_input+0x528>)
 801199a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801199c:	429a      	cmp	r2, r3
 801199e:	d126      	bne.n	80119ee <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80119a0:	69fb      	ldr	r3, [r7, #28]
 80119a2:	68db      	ldr	r3, [r3, #12]
 80119a4:	69fa      	ldr	r2, [r7, #28]
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d106      	bne.n	80119b8 <tcp_input+0x31c>
 80119aa:	4b87      	ldr	r3, [pc, #540]	; (8011bc8 <tcp_input+0x52c>)
 80119ac:	f240 120d 	movw	r2, #269	; 0x10d
 80119b0:	4986      	ldr	r1, [pc, #536]	; (8011bcc <tcp_input+0x530>)
 80119b2:	4887      	ldr	r0, [pc, #540]	; (8011bd0 <tcp_input+0x534>)
 80119b4:	f007 fa9e 	bl	8018ef4 <iprintf>
      if (prev != NULL) {
 80119b8:	69bb      	ldr	r3, [r7, #24]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d00a      	beq.n	80119d4 <tcp_input+0x338>
        prev->next = pcb->next;
 80119be:	69fb      	ldr	r3, [r7, #28]
 80119c0:	68da      	ldr	r2, [r3, #12]
 80119c2:	69bb      	ldr	r3, [r7, #24]
 80119c4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80119c6:	4b83      	ldr	r3, [pc, #524]	; (8011bd4 <tcp_input+0x538>)
 80119c8:	681a      	ldr	r2, [r3, #0]
 80119ca:	69fb      	ldr	r3, [r7, #28]
 80119cc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80119ce:	4a81      	ldr	r2, [pc, #516]	; (8011bd4 <tcp_input+0x538>)
 80119d0:	69fb      	ldr	r3, [r7, #28]
 80119d2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80119d4:	69fb      	ldr	r3, [r7, #28]
 80119d6:	68db      	ldr	r3, [r3, #12]
 80119d8:	69fa      	ldr	r2, [r7, #28]
 80119da:	429a      	cmp	r2, r3
 80119dc:	d111      	bne.n	8011a02 <tcp_input+0x366>
 80119de:	4b7a      	ldr	r3, [pc, #488]	; (8011bc8 <tcp_input+0x52c>)
 80119e0:	f240 1215 	movw	r2, #277	; 0x115
 80119e4:	497c      	ldr	r1, [pc, #496]	; (8011bd8 <tcp_input+0x53c>)
 80119e6:	487a      	ldr	r0, [pc, #488]	; (8011bd0 <tcp_input+0x534>)
 80119e8:	f007 fa84 	bl	8018ef4 <iprintf>
      break;
 80119ec:	e009      	b.n	8011a02 <tcp_input+0x366>
    }
    prev = pcb;
 80119ee:	69fb      	ldr	r3, [r7, #28]
 80119f0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80119f2:	69fb      	ldr	r3, [r7, #28]
 80119f4:	68db      	ldr	r3, [r3, #12]
 80119f6:	61fb      	str	r3, [r7, #28]
 80119f8:	69fb      	ldr	r3, [r7, #28]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	f47f af5e 	bne.w	80118bc <tcp_input+0x220>
 8011a00:	e000      	b.n	8011a04 <tcp_input+0x368>
      break;
 8011a02:	bf00      	nop
  }

  if (pcb == NULL) {
 8011a04:	69fb      	ldr	r3, [r7, #28]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	f040 8095 	bne.w	8011b36 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a0c:	4b73      	ldr	r3, [pc, #460]	; (8011bdc <tcp_input+0x540>)
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	61fb      	str	r3, [r7, #28]
 8011a12:	e03f      	b.n	8011a94 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011a14:	69fb      	ldr	r3, [r7, #28]
 8011a16:	7d1b      	ldrb	r3, [r3, #20]
 8011a18:	2b0a      	cmp	r3, #10
 8011a1a:	d006      	beq.n	8011a2a <tcp_input+0x38e>
 8011a1c:	4b6a      	ldr	r3, [pc, #424]	; (8011bc8 <tcp_input+0x52c>)
 8011a1e:	f240 121f 	movw	r2, #287	; 0x11f
 8011a22:	496f      	ldr	r1, [pc, #444]	; (8011be0 <tcp_input+0x544>)
 8011a24:	486a      	ldr	r0, [pc, #424]	; (8011bd0 <tcp_input+0x534>)
 8011a26:	f007 fa65 	bl	8018ef4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011a2a:	69fb      	ldr	r3, [r7, #28]
 8011a2c:	7a1b      	ldrb	r3, [r3, #8]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d009      	beq.n	8011a46 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011a32:	69fb      	ldr	r3, [r7, #28]
 8011a34:	7a1a      	ldrb	r2, [r3, #8]
 8011a36:	4b63      	ldr	r3, [pc, #396]	; (8011bc4 <tcp_input+0x528>)
 8011a38:	685b      	ldr	r3, [r3, #4]
 8011a3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011a3e:	3301      	adds	r3, #1
 8011a40:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011a42:	429a      	cmp	r2, r3
 8011a44:	d122      	bne.n	8011a8c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011a46:	69fb      	ldr	r3, [r7, #28]
 8011a48:	8b1a      	ldrh	r2, [r3, #24]
 8011a4a:	4b5d      	ldr	r3, [pc, #372]	; (8011bc0 <tcp_input+0x524>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	881b      	ldrh	r3, [r3, #0]
 8011a50:	b29b      	uxth	r3, r3
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d11b      	bne.n	8011a8e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8011a56:	69fb      	ldr	r3, [r7, #28]
 8011a58:	8ada      	ldrh	r2, [r3, #22]
 8011a5a:	4b59      	ldr	r3, [pc, #356]	; (8011bc0 <tcp_input+0x524>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	885b      	ldrh	r3, [r3, #2]
 8011a60:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d113      	bne.n	8011a8e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011a66:	69fb      	ldr	r3, [r7, #28]
 8011a68:	685a      	ldr	r2, [r3, #4]
 8011a6a:	4b56      	ldr	r3, [pc, #344]	; (8011bc4 <tcp_input+0x528>)
 8011a6c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	d10d      	bne.n	8011a8e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011a72:	69fb      	ldr	r3, [r7, #28]
 8011a74:	681a      	ldr	r2, [r3, #0]
 8011a76:	4b53      	ldr	r3, [pc, #332]	; (8011bc4 <tcp_input+0x528>)
 8011a78:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d107      	bne.n	8011a8e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011a7e:	69f8      	ldr	r0, [r7, #28]
 8011a80:	f000 fb56 	bl	8012130 <tcp_timewait_input>
        }
        pbuf_free(p);
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f7fd fd3d 	bl	800f504 <pbuf_free>
        return;
 8011a8a:	e1f1      	b.n	8011e70 <tcp_input+0x7d4>
        continue;
 8011a8c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a8e:	69fb      	ldr	r3, [r7, #28]
 8011a90:	68db      	ldr	r3, [r3, #12]
 8011a92:	61fb      	str	r3, [r7, #28]
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d1bc      	bne.n	8011a14 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011a9e:	4b51      	ldr	r3, [pc, #324]	; (8011be4 <tcp_input+0x548>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	617b      	str	r3, [r7, #20]
 8011aa4:	e02a      	b.n	8011afc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011aa6:	697b      	ldr	r3, [r7, #20]
 8011aa8:	7a1b      	ldrb	r3, [r3, #8]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d00c      	beq.n	8011ac8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011aae:	697b      	ldr	r3, [r7, #20]
 8011ab0:	7a1a      	ldrb	r2, [r3, #8]
 8011ab2:	4b44      	ldr	r3, [pc, #272]	; (8011bc4 <tcp_input+0x528>)
 8011ab4:	685b      	ldr	r3, [r3, #4]
 8011ab6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011aba:	3301      	adds	r3, #1
 8011abc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d002      	beq.n	8011ac8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	61bb      	str	r3, [r7, #24]
        continue;
 8011ac6:	e016      	b.n	8011af6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	8ada      	ldrh	r2, [r3, #22]
 8011acc:	4b3c      	ldr	r3, [pc, #240]	; (8011bc0 <tcp_input+0x524>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	885b      	ldrh	r3, [r3, #2]
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	d10c      	bne.n	8011af2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	681a      	ldr	r2, [r3, #0]
 8011adc:	4b39      	ldr	r3, [pc, #228]	; (8011bc4 <tcp_input+0x528>)
 8011ade:	695b      	ldr	r3, [r3, #20]
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d00f      	beq.n	8011b04 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d00d      	beq.n	8011b06 <tcp_input+0x46a>
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d009      	beq.n	8011b06 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	68db      	ldr	r3, [r3, #12]
 8011afa:	617b      	str	r3, [r7, #20]
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d1d1      	bne.n	8011aa6 <tcp_input+0x40a>
 8011b02:	e000      	b.n	8011b06 <tcp_input+0x46a>
            break;
 8011b04:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d014      	beq.n	8011b36 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011b0c:	69bb      	ldr	r3, [r7, #24]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d00a      	beq.n	8011b28 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	68da      	ldr	r2, [r3, #12]
 8011b16:	69bb      	ldr	r3, [r7, #24]
 8011b18:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011b1a:	4b32      	ldr	r3, [pc, #200]	; (8011be4 <tcp_input+0x548>)
 8011b1c:	681a      	ldr	r2, [r3, #0]
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011b22:	4a30      	ldr	r2, [pc, #192]	; (8011be4 <tcp_input+0x548>)
 8011b24:	697b      	ldr	r3, [r7, #20]
 8011b26:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011b28:	6978      	ldr	r0, [r7, #20]
 8011b2a:	f000 fa03 	bl	8011f34 <tcp_listen_input>
      }
      pbuf_free(p);
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f7fd fce8 	bl	800f504 <pbuf_free>
      return;
 8011b34:	e19c      	b.n	8011e70 <tcp_input+0x7d4>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011b36:	69fb      	ldr	r3, [r7, #28]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	f000 8161 	beq.w	8011e00 <tcp_input+0x764>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011b3e:	4b2a      	ldr	r3, [pc, #168]	; (8011be8 <tcp_input+0x54c>)
 8011b40:	2200      	movs	r2, #0
 8011b42:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	891a      	ldrh	r2, [r3, #8]
 8011b48:	4b27      	ldr	r3, [pc, #156]	; (8011be8 <tcp_input+0x54c>)
 8011b4a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011b4c:	4a26      	ldr	r2, [pc, #152]	; (8011be8 <tcp_input+0x54c>)
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011b52:	4b1b      	ldr	r3, [pc, #108]	; (8011bc0 <tcp_input+0x524>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	4a24      	ldr	r2, [pc, #144]	; (8011be8 <tcp_input+0x54c>)
 8011b58:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011b5a:	4b24      	ldr	r3, [pc, #144]	; (8011bec <tcp_input+0x550>)
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011b60:	4b23      	ldr	r3, [pc, #140]	; (8011bf0 <tcp_input+0x554>)
 8011b62:	2200      	movs	r2, #0
 8011b64:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011b66:	4b23      	ldr	r3, [pc, #140]	; (8011bf4 <tcp_input+0x558>)
 8011b68:	2200      	movs	r2, #0
 8011b6a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011b6c:	4b22      	ldr	r3, [pc, #136]	; (8011bf8 <tcp_input+0x55c>)
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	f003 0308 	and.w	r3, r3, #8
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d006      	beq.n	8011b86 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	7b5b      	ldrb	r3, [r3, #13]
 8011b7c:	f043 0301 	orr.w	r3, r3, #1
 8011b80:	b2da      	uxtb	r2, r3
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011b86:	69fb      	ldr	r3, [r7, #28]
 8011b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d038      	beq.n	8011c00 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011b8e:	69f8      	ldr	r0, [r7, #28]
 8011b90:	f7ff f88c 	bl	8010cac <tcp_process_refused_data>
 8011b94:	4603      	mov	r3, r0
 8011b96:	f113 0f0d 	cmn.w	r3, #13
 8011b9a:	d007      	beq.n	8011bac <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011b9c:	69fb      	ldr	r3, [r7, #28]
 8011b9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d02d      	beq.n	8011c00 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011ba4:	4b15      	ldr	r3, [pc, #84]	; (8011bfc <tcp_input+0x560>)
 8011ba6:	881b      	ldrh	r3, [r3, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d029      	beq.n	8011c00 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011bac:	69fb      	ldr	r3, [r7, #28]
 8011bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	f040 8105 	bne.w	8011dc0 <tcp_input+0x724>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011bb6:	69f8      	ldr	r0, [r7, #28]
 8011bb8:	f003 fe1c 	bl	80157f4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011bbc:	e100      	b.n	8011dc0 <tcp_input+0x724>
 8011bbe:	bf00      	nop
 8011bc0:	200006b8 	.word	0x200006b8
 8011bc4:	20007b38 	.word	0x20007b38
 8011bc8:	0801b7e0 	.word	0x0801b7e0
 8011bcc:	0801b90c 	.word	0x0801b90c
 8011bd0:	0801b82c 	.word	0x0801b82c
 8011bd4:	2001879c 	.word	0x2001879c
 8011bd8:	0801b938 	.word	0x0801b938
 8011bdc:	200187ac 	.word	0x200187ac
 8011be0:	0801b964 	.word	0x0801b964
 8011be4:	200187a4 	.word	0x200187a4
 8011be8:	200006a8 	.word	0x200006a8
 8011bec:	200006d8 	.word	0x200006d8
 8011bf0:	200006d5 	.word	0x200006d5
 8011bf4:	200006d0 	.word	0x200006d0
 8011bf8:	200006d4 	.word	0x200006d4
 8011bfc:	200006d2 	.word	0x200006d2
      }
    }
    tcp_input_pcb = pcb;
 8011c00:	4a9d      	ldr	r2, [pc, #628]	; (8011e78 <tcp_input+0x7dc>)
 8011c02:	69fb      	ldr	r3, [r7, #28]
 8011c04:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011c06:	69f8      	ldr	r0, [r7, #28]
 8011c08:	f000 fb0c 	bl	8012224 <tcp_process>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011c10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011c14:	f113 0f0d 	cmn.w	r3, #13
 8011c18:	f000 80d4 	beq.w	8011dc4 <tcp_input+0x728>
      if (recv_flags & TF_RESET) {
 8011c1c:	4b97      	ldr	r3, [pc, #604]	; (8011e7c <tcp_input+0x7e0>)
 8011c1e:	781b      	ldrb	r3, [r3, #0]
 8011c20:	f003 0308 	and.w	r3, r3, #8
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d015      	beq.n	8011c54 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011c28:	69fb      	ldr	r3, [r7, #28]
 8011c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d008      	beq.n	8011c44 <tcp_input+0x5a8>
 8011c32:	69fb      	ldr	r3, [r7, #28]
 8011c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c38:	69fa      	ldr	r2, [r7, #28]
 8011c3a:	6912      	ldr	r2, [r2, #16]
 8011c3c:	f06f 010d 	mvn.w	r1, #13
 8011c40:	4610      	mov	r0, r2
 8011c42:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011c44:	69f9      	ldr	r1, [r7, #28]
 8011c46:	488e      	ldr	r0, [pc, #568]	; (8011e80 <tcp_input+0x7e4>)
 8011c48:	f7ff fbb0 	bl	80113ac <tcp_pcb_remove>
        tcp_free(pcb);
 8011c4c:	69f8      	ldr	r0, [r7, #28]
 8011c4e:	f7fd ff8b 	bl	800fb68 <tcp_free>
 8011c52:	e0c2      	b.n	8011dda <tcp_input+0x73e>
      } else {
        err = ERR_OK;
 8011c54:	2300      	movs	r3, #0
 8011c56:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011c58:	4b8a      	ldr	r3, [pc, #552]	; (8011e84 <tcp_input+0x7e8>)
 8011c5a:	881b      	ldrh	r3, [r3, #0]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d01d      	beq.n	8011c9c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011c60:	4b88      	ldr	r3, [pc, #544]	; (8011e84 <tcp_input+0x7e8>)
 8011c62:	881b      	ldrh	r3, [r3, #0]
 8011c64:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011c66:	69fb      	ldr	r3, [r7, #28]
 8011c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d00a      	beq.n	8011c86 <tcp_input+0x5ea>
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011c76:	69fa      	ldr	r2, [r7, #28]
 8011c78:	6910      	ldr	r0, [r2, #16]
 8011c7a:	89fa      	ldrh	r2, [r7, #14]
 8011c7c:	69f9      	ldr	r1, [r7, #28]
 8011c7e:	4798      	blx	r3
 8011c80:	4603      	mov	r3, r0
 8011c82:	74fb      	strb	r3, [r7, #19]
 8011c84:	e001      	b.n	8011c8a <tcp_input+0x5ee>
 8011c86:	2300      	movs	r3, #0
 8011c88:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011c8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011c8e:	f113 0f0d 	cmn.w	r3, #13
 8011c92:	f000 8099 	beq.w	8011dc8 <tcp_input+0x72c>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011c96:	4b7b      	ldr	r3, [pc, #492]	; (8011e84 <tcp_input+0x7e8>)
 8011c98:	2200      	movs	r2, #0
 8011c9a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011c9c:	69f8      	ldr	r0, [r7, #28]
 8011c9e:	f000 f909 	bl	8011eb4 <tcp_input_delayed_close>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	f040 8091 	bne.w	8011dcc <tcp_input+0x730>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011caa:	4b77      	ldr	r3, [pc, #476]	; (8011e88 <tcp_input+0x7ec>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d041      	beq.n	8011d36 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011cb2:	69fb      	ldr	r3, [r7, #28]
 8011cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d006      	beq.n	8011cc8 <tcp_input+0x62c>
 8011cba:	4b74      	ldr	r3, [pc, #464]	; (8011e8c <tcp_input+0x7f0>)
 8011cbc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011cc0:	4973      	ldr	r1, [pc, #460]	; (8011e90 <tcp_input+0x7f4>)
 8011cc2:	4874      	ldr	r0, [pc, #464]	; (8011e94 <tcp_input+0x7f8>)
 8011cc4:	f007 f916 	bl	8018ef4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011cc8:	69fb      	ldr	r3, [r7, #28]
 8011cca:	8b5b      	ldrh	r3, [r3, #26]
 8011ccc:	f003 0310 	and.w	r3, r3, #16
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d008      	beq.n	8011ce6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011cd4:	4b6c      	ldr	r3, [pc, #432]	; (8011e88 <tcp_input+0x7ec>)
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7fd fc13 	bl	800f504 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011cde:	69f8      	ldr	r0, [r7, #28]
 8011ce0:	f7fe fa2a 	bl	8010138 <tcp_abort>
            goto aborted;
 8011ce4:	e079      	b.n	8011dda <tcp_input+0x73e>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011ce6:	69fb      	ldr	r3, [r7, #28]
 8011ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d00c      	beq.n	8011d0a <tcp_input+0x66e>
 8011cf0:	69fb      	ldr	r3, [r7, #28]
 8011cf2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011cf6:	69fb      	ldr	r3, [r7, #28]
 8011cf8:	6918      	ldr	r0, [r3, #16]
 8011cfa:	4b63      	ldr	r3, [pc, #396]	; (8011e88 <tcp_input+0x7ec>)
 8011cfc:	681a      	ldr	r2, [r3, #0]
 8011cfe:	2300      	movs	r3, #0
 8011d00:	69f9      	ldr	r1, [r7, #28]
 8011d02:	47a0      	blx	r4
 8011d04:	4603      	mov	r3, r0
 8011d06:	74fb      	strb	r3, [r7, #19]
 8011d08:	e008      	b.n	8011d1c <tcp_input+0x680>
 8011d0a:	4b5f      	ldr	r3, [pc, #380]	; (8011e88 <tcp_input+0x7ec>)
 8011d0c:	681a      	ldr	r2, [r3, #0]
 8011d0e:	2300      	movs	r3, #0
 8011d10:	69f9      	ldr	r1, [r7, #28]
 8011d12:	2000      	movs	r0, #0
 8011d14:	f7ff f8a2 	bl	8010e5c <tcp_recv_null>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011d1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011d20:	f113 0f0d 	cmn.w	r3, #13
 8011d24:	d054      	beq.n	8011dd0 <tcp_input+0x734>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011d26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d003      	beq.n	8011d36 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011d2e:	4b56      	ldr	r3, [pc, #344]	; (8011e88 <tcp_input+0x7ec>)
 8011d30:	681a      	ldr	r2, [r3, #0]
 8011d32:	69fb      	ldr	r3, [r7, #28]
 8011d34:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011d36:	4b51      	ldr	r3, [pc, #324]	; (8011e7c <tcp_input+0x7e0>)
 8011d38:	781b      	ldrb	r3, [r3, #0]
 8011d3a:	f003 0320 	and.w	r3, r3, #32
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d031      	beq.n	8011da6 <tcp_input+0x70a>
          if (pcb->refused_data != NULL) {
 8011d42:	69fb      	ldr	r3, [r7, #28]
 8011d44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d009      	beq.n	8011d5e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011d4a:	69fb      	ldr	r3, [r7, #28]
 8011d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d4e:	7b5a      	ldrb	r2, [r3, #13]
 8011d50:	69fb      	ldr	r3, [r7, #28]
 8011d52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d54:	f042 0220 	orr.w	r2, r2, #32
 8011d58:	b2d2      	uxtb	r2, r2
 8011d5a:	735a      	strb	r2, [r3, #13]
 8011d5c:	e023      	b.n	8011da6 <tcp_input+0x70a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011d5e:	69fb      	ldr	r3, [r7, #28]
 8011d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d62:	f241 0268 	movw	r2, #4200	; 0x1068
 8011d66:	4293      	cmp	r3, r2
 8011d68:	d005      	beq.n	8011d76 <tcp_input+0x6da>
              pcb->rcv_wnd++;
 8011d6a:	69fb      	ldr	r3, [r7, #28]
 8011d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d6e:	3301      	adds	r3, #1
 8011d70:	b29a      	uxth	r2, r3
 8011d72:	69fb      	ldr	r3, [r7, #28]
 8011d74:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011d76:	69fb      	ldr	r3, [r7, #28]
 8011d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d00b      	beq.n	8011d98 <tcp_input+0x6fc>
 8011d80:	69fb      	ldr	r3, [r7, #28]
 8011d82:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011d86:	69fb      	ldr	r3, [r7, #28]
 8011d88:	6918      	ldr	r0, [r3, #16]
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	69f9      	ldr	r1, [r7, #28]
 8011d90:	47a0      	blx	r4
 8011d92:	4603      	mov	r3, r0
 8011d94:	74fb      	strb	r3, [r7, #19]
 8011d96:	e001      	b.n	8011d9c <tcp_input+0x700>
 8011d98:	2300      	movs	r3, #0
 8011d9a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011d9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011da0:	f113 0f0d 	cmn.w	r3, #13
 8011da4:	d016      	beq.n	8011dd4 <tcp_input+0x738>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011da6:	4b34      	ldr	r3, [pc, #208]	; (8011e78 <tcp_input+0x7dc>)
 8011da8:	2200      	movs	r2, #0
 8011daa:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011dac:	69f8      	ldr	r0, [r7, #28]
 8011dae:	f000 f881 	bl	8011eb4 <tcp_input_delayed_close>
 8011db2:	4603      	mov	r3, r0
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d10f      	bne.n	8011dd8 <tcp_input+0x73c>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011db8:	69f8      	ldr	r0, [r7, #28]
 8011dba:	f002 ff15 	bl	8014be8 <tcp_output>
 8011dbe:	e00c      	b.n	8011dda <tcp_input+0x73e>
        goto aborted;
 8011dc0:	bf00      	nop
 8011dc2:	e00a      	b.n	8011dda <tcp_input+0x73e>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011dc4:	bf00      	nop
 8011dc6:	e008      	b.n	8011dda <tcp_input+0x73e>
              goto aborted;
 8011dc8:	bf00      	nop
 8011dca:	e006      	b.n	8011dda <tcp_input+0x73e>
          goto aborted;
 8011dcc:	bf00      	nop
 8011dce:	e004      	b.n	8011dda <tcp_input+0x73e>
            goto aborted;
 8011dd0:	bf00      	nop
 8011dd2:	e002      	b.n	8011dda <tcp_input+0x73e>
              goto aborted;
 8011dd4:	bf00      	nop
 8011dd6:	e000      	b.n	8011dda <tcp_input+0x73e>
          goto aborted;
 8011dd8:	bf00      	nop
    tcp_input_pcb = NULL;
 8011dda:	4b27      	ldr	r3, [pc, #156]	; (8011e78 <tcp_input+0x7dc>)
 8011ddc:	2200      	movs	r2, #0
 8011dde:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011de0:	4b29      	ldr	r3, [pc, #164]	; (8011e88 <tcp_input+0x7ec>)
 8011de2:	2200      	movs	r2, #0
 8011de4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011de6:	4b2c      	ldr	r3, [pc, #176]	; (8011e98 <tcp_input+0x7fc>)
 8011de8:	685b      	ldr	r3, [r3, #4]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d03f      	beq.n	8011e6e <tcp_input+0x7d2>
      pbuf_free(inseg.p);
 8011dee:	4b2a      	ldr	r3, [pc, #168]	; (8011e98 <tcp_input+0x7fc>)
 8011df0:	685b      	ldr	r3, [r3, #4]
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7fd fb86 	bl	800f504 <pbuf_free>
      inseg.p = NULL;
 8011df8:	4b27      	ldr	r3, [pc, #156]	; (8011e98 <tcp_input+0x7fc>)
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011dfe:	e036      	b.n	8011e6e <tcp_input+0x7d2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011e00:	4b26      	ldr	r3, [pc, #152]	; (8011e9c <tcp_input+0x800>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	899b      	ldrh	r3, [r3, #12]
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f7fc f8b8 	bl	800df7e <lwip_htons>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	b2db      	uxtb	r3, r3
 8011e12:	f003 0304 	and.w	r3, r3, #4
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d118      	bne.n	8011e4c <tcp_input+0x7b0>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e1a:	4b21      	ldr	r3, [pc, #132]	; (8011ea0 <tcp_input+0x804>)
 8011e1c:	6819      	ldr	r1, [r3, #0]
 8011e1e:	4b21      	ldr	r3, [pc, #132]	; (8011ea4 <tcp_input+0x808>)
 8011e20:	881b      	ldrh	r3, [r3, #0]
 8011e22:	461a      	mov	r2, r3
 8011e24:	4b20      	ldr	r3, [pc, #128]	; (8011ea8 <tcp_input+0x80c>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e2a:	4b1c      	ldr	r3, [pc, #112]	; (8011e9c <tcp_input+0x800>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e2e:	885b      	ldrh	r3, [r3, #2]
 8011e30:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e32:	4a1a      	ldr	r2, [pc, #104]	; (8011e9c <tcp_input+0x800>)
 8011e34:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e36:	8812      	ldrh	r2, [r2, #0]
 8011e38:	b292      	uxth	r2, r2
 8011e3a:	9202      	str	r2, [sp, #8]
 8011e3c:	9301      	str	r3, [sp, #4]
 8011e3e:	4b1b      	ldr	r3, [pc, #108]	; (8011eac <tcp_input+0x810>)
 8011e40:	9300      	str	r3, [sp, #0]
 8011e42:	4b1b      	ldr	r3, [pc, #108]	; (8011eb0 <tcp_input+0x814>)
 8011e44:	4602      	mov	r2, r0
 8011e46:	2000      	movs	r0, #0
 8011e48:	f003 fc82 	bl	8015750 <tcp_rst>
    pbuf_free(p);
 8011e4c:	6878      	ldr	r0, [r7, #4]
 8011e4e:	f7fd fb59 	bl	800f504 <pbuf_free>
  return;
 8011e52:	e00c      	b.n	8011e6e <tcp_input+0x7d2>
    goto dropped;
 8011e54:	bf00      	nop
 8011e56:	e006      	b.n	8011e66 <tcp_input+0x7ca>
    goto dropped;
 8011e58:	bf00      	nop
 8011e5a:	e004      	b.n	8011e66 <tcp_input+0x7ca>
    goto dropped;
 8011e5c:	bf00      	nop
 8011e5e:	e002      	b.n	8011e66 <tcp_input+0x7ca>
      goto dropped;
 8011e60:	bf00      	nop
 8011e62:	e000      	b.n	8011e66 <tcp_input+0x7ca>
      goto dropped;
 8011e64:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f7fd fb4c 	bl	800f504 <pbuf_free>
 8011e6c:	e000      	b.n	8011e70 <tcp_input+0x7d4>
  return;
 8011e6e:	bf00      	nop
}
 8011e70:	3724      	adds	r7, #36	; 0x24
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd90      	pop	{r4, r7, pc}
 8011e76:	bf00      	nop
 8011e78:	200187b0 	.word	0x200187b0
 8011e7c:	200006d5 	.word	0x200006d5
 8011e80:	2001879c 	.word	0x2001879c
 8011e84:	200006d0 	.word	0x200006d0
 8011e88:	200006d8 	.word	0x200006d8
 8011e8c:	0801b7e0 	.word	0x0801b7e0
 8011e90:	0801b994 	.word	0x0801b994
 8011e94:	0801b82c 	.word	0x0801b82c
 8011e98:	200006a8 	.word	0x200006a8
 8011e9c:	200006b8 	.word	0x200006b8
 8011ea0:	200006cc 	.word	0x200006cc
 8011ea4:	200006d2 	.word	0x200006d2
 8011ea8:	200006c8 	.word	0x200006c8
 8011eac:	20007b48 	.word	0x20007b48
 8011eb0:	20007b4c 	.word	0x20007b4c

08011eb4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b082      	sub	sp, #8
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d106      	bne.n	8011ed0 <tcp_input_delayed_close+0x1c>
 8011ec2:	4b17      	ldr	r3, [pc, #92]	; (8011f20 <tcp_input_delayed_close+0x6c>)
 8011ec4:	f240 225a 	movw	r2, #602	; 0x25a
 8011ec8:	4916      	ldr	r1, [pc, #88]	; (8011f24 <tcp_input_delayed_close+0x70>)
 8011eca:	4817      	ldr	r0, [pc, #92]	; (8011f28 <tcp_input_delayed_close+0x74>)
 8011ecc:	f007 f812 	bl	8018ef4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011ed0:	4b16      	ldr	r3, [pc, #88]	; (8011f2c <tcp_input_delayed_close+0x78>)
 8011ed2:	781b      	ldrb	r3, [r3, #0]
 8011ed4:	f003 0310 	and.w	r3, r3, #16
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d01c      	beq.n	8011f16 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	8b5b      	ldrh	r3, [r3, #26]
 8011ee0:	f003 0310 	and.w	r3, r3, #16
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d10d      	bne.n	8011f04 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d008      	beq.n	8011f04 <tcp_input_delayed_close+0x50>
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ef8:	687a      	ldr	r2, [r7, #4]
 8011efa:	6912      	ldr	r2, [r2, #16]
 8011efc:	f06f 010e 	mvn.w	r1, #14
 8011f00:	4610      	mov	r0, r2
 8011f02:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011f04:	6879      	ldr	r1, [r7, #4]
 8011f06:	480a      	ldr	r0, [pc, #40]	; (8011f30 <tcp_input_delayed_close+0x7c>)
 8011f08:	f7ff fa50 	bl	80113ac <tcp_pcb_remove>
    tcp_free(pcb);
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f7fd fe2b 	bl	800fb68 <tcp_free>
    return 1;
 8011f12:	2301      	movs	r3, #1
 8011f14:	e000      	b.n	8011f18 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011f16:	2300      	movs	r3, #0
}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	3708      	adds	r7, #8
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}
 8011f20:	0801b7e0 	.word	0x0801b7e0
 8011f24:	0801b9b0 	.word	0x0801b9b0
 8011f28:	0801b82c 	.word	0x0801b82c
 8011f2c:	200006d5 	.word	0x200006d5
 8011f30:	2001879c 	.word	0x2001879c

08011f34 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011f34:	b590      	push	{r4, r7, lr}
 8011f36:	b08b      	sub	sp, #44	; 0x2c
 8011f38:	af04      	add	r7, sp, #16
 8011f3a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011f3c:	4b6f      	ldr	r3, [pc, #444]	; (80120fc <tcp_listen_input+0x1c8>)
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	f003 0304 	and.w	r3, r3, #4
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	f040 80d2 	bne.w	80120ee <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d106      	bne.n	8011f5e <tcp_listen_input+0x2a>
 8011f50:	4b6b      	ldr	r3, [pc, #428]	; (8012100 <tcp_listen_input+0x1cc>)
 8011f52:	f240 2281 	movw	r2, #641	; 0x281
 8011f56:	496b      	ldr	r1, [pc, #428]	; (8012104 <tcp_listen_input+0x1d0>)
 8011f58:	486b      	ldr	r0, [pc, #428]	; (8012108 <tcp_listen_input+0x1d4>)
 8011f5a:	f006 ffcb 	bl	8018ef4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011f5e:	4b67      	ldr	r3, [pc, #412]	; (80120fc <tcp_listen_input+0x1c8>)
 8011f60:	781b      	ldrb	r3, [r3, #0]
 8011f62:	f003 0310 	and.w	r3, r3, #16
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d019      	beq.n	8011f9e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f6a:	4b68      	ldr	r3, [pc, #416]	; (801210c <tcp_listen_input+0x1d8>)
 8011f6c:	6819      	ldr	r1, [r3, #0]
 8011f6e:	4b68      	ldr	r3, [pc, #416]	; (8012110 <tcp_listen_input+0x1dc>)
 8011f70:	881b      	ldrh	r3, [r3, #0]
 8011f72:	461a      	mov	r2, r3
 8011f74:	4b67      	ldr	r3, [pc, #412]	; (8012114 <tcp_listen_input+0x1e0>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f7a:	4b67      	ldr	r3, [pc, #412]	; (8012118 <tcp_listen_input+0x1e4>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f7e:	885b      	ldrh	r3, [r3, #2]
 8011f80:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f82:	4a65      	ldr	r2, [pc, #404]	; (8012118 <tcp_listen_input+0x1e4>)
 8011f84:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f86:	8812      	ldrh	r2, [r2, #0]
 8011f88:	b292      	uxth	r2, r2
 8011f8a:	9202      	str	r2, [sp, #8]
 8011f8c:	9301      	str	r3, [sp, #4]
 8011f8e:	4b63      	ldr	r3, [pc, #396]	; (801211c <tcp_listen_input+0x1e8>)
 8011f90:	9300      	str	r3, [sp, #0]
 8011f92:	4b63      	ldr	r3, [pc, #396]	; (8012120 <tcp_listen_input+0x1ec>)
 8011f94:	4602      	mov	r2, r0
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f003 fbda 	bl	8015750 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011f9c:	e0a9      	b.n	80120f2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011f9e:	4b57      	ldr	r3, [pc, #348]	; (80120fc <tcp_listen_input+0x1c8>)
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	f003 0302 	and.w	r3, r3, #2
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	f000 80a3 	beq.w	80120f2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	7d5b      	ldrb	r3, [r3, #21]
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f7ff f877 	bl	80110a4 <tcp_alloc>
 8011fb6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d111      	bne.n	8011fe2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	699b      	ldr	r3, [r3, #24]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d00a      	beq.n	8011fdc <tcp_listen_input+0xa8>
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	699b      	ldr	r3, [r3, #24]
 8011fca:	687a      	ldr	r2, [r7, #4]
 8011fcc:	6910      	ldr	r0, [r2, #16]
 8011fce:	f04f 32ff 	mov.w	r2, #4294967295
 8011fd2:	2100      	movs	r1, #0
 8011fd4:	4798      	blx	r3
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	73bb      	strb	r3, [r7, #14]
      return;
 8011fda:	e08b      	b.n	80120f4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011fdc:	23f0      	movs	r3, #240	; 0xf0
 8011fde:	73bb      	strb	r3, [r7, #14]
      return;
 8011fe0:	e088      	b.n	80120f4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011fe2:	4b50      	ldr	r3, [pc, #320]	; (8012124 <tcp_listen_input+0x1f0>)
 8011fe4:	695a      	ldr	r2, [r3, #20]
 8011fe6:	697b      	ldr	r3, [r7, #20]
 8011fe8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011fea:	4b4e      	ldr	r3, [pc, #312]	; (8012124 <tcp_listen_input+0x1f0>)
 8011fec:	691a      	ldr	r2, [r3, #16]
 8011fee:	697b      	ldr	r3, [r7, #20]
 8011ff0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	8ada      	ldrh	r2, [r3, #22]
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011ffa:	4b47      	ldr	r3, [pc, #284]	; (8012118 <tcp_listen_input+0x1e4>)
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	881b      	ldrh	r3, [r3, #0]
 8012000:	b29a      	uxth	r2, r3
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012006:	697b      	ldr	r3, [r7, #20]
 8012008:	2203      	movs	r2, #3
 801200a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801200c:	4b41      	ldr	r3, [pc, #260]	; (8012114 <tcp_listen_input+0x1e0>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	1c5a      	adds	r2, r3, #1
 8012012:	697b      	ldr	r3, [r7, #20]
 8012014:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801201a:	697b      	ldr	r3, [r7, #20]
 801201c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801201e:	6978      	ldr	r0, [r7, #20]
 8012020:	f7ff fa58 	bl	80114d4 <tcp_next_iss>
 8012024:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012026:	697b      	ldr	r3, [r7, #20]
 8012028:	693a      	ldr	r2, [r7, #16]
 801202a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801202c:	697b      	ldr	r3, [r7, #20]
 801202e:	693a      	ldr	r2, [r7, #16]
 8012030:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	693a      	ldr	r2, [r7, #16]
 8012036:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	693a      	ldr	r2, [r7, #16]
 801203c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801203e:	4b35      	ldr	r3, [pc, #212]	; (8012114 <tcp_listen_input+0x1e0>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	1e5a      	subs	r2, r3, #1
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	691a      	ldr	r2, [r3, #16]
 801204c:	697b      	ldr	r3, [r7, #20]
 801204e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012050:	697b      	ldr	r3, [r7, #20]
 8012052:	687a      	ldr	r2, [r7, #4]
 8012054:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	7a5b      	ldrb	r3, [r3, #9]
 801205a:	f003 030c 	and.w	r3, r3, #12
 801205e:	b2da      	uxtb	r2, r3
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	7a1a      	ldrb	r2, [r3, #8]
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801206c:	4b2e      	ldr	r3, [pc, #184]	; (8012128 <tcp_listen_input+0x1f4>)
 801206e:	681a      	ldr	r2, [r3, #0]
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	60da      	str	r2, [r3, #12]
 8012074:	4a2c      	ldr	r2, [pc, #176]	; (8012128 <tcp_listen_input+0x1f4>)
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	6013      	str	r3, [r2, #0]
 801207a:	f003 fd2b 	bl	8015ad4 <tcp_timer_needed>
 801207e:	4b2b      	ldr	r3, [pc, #172]	; (801212c <tcp_listen_input+0x1f8>)
 8012080:	2201      	movs	r2, #1
 8012082:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012084:	6978      	ldr	r0, [r7, #20]
 8012086:	f001 fd8d 	bl	8013ba4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801208a:	4b23      	ldr	r3, [pc, #140]	; (8012118 <tcp_listen_input+0x1e4>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	89db      	ldrh	r3, [r3, #14]
 8012090:	b29a      	uxth	r2, r3
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012098:	697b      	ldr	r3, [r7, #20]
 801209a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	3304      	adds	r3, #4
 80120ac:	4618      	mov	r0, r3
 80120ae:	f005 f8ef 	bl	8017290 <ip4_route>
 80120b2:	4601      	mov	r1, r0
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	3304      	adds	r3, #4
 80120b8:	461a      	mov	r2, r3
 80120ba:	4620      	mov	r0, r4
 80120bc:	f7ff fa30 	bl	8011520 <tcp_eff_send_mss_netif>
 80120c0:	4603      	mov	r3, r0
 80120c2:	461a      	mov	r2, r3
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80120c8:	2112      	movs	r1, #18
 80120ca:	6978      	ldr	r0, [r7, #20]
 80120cc:	f002 fc9e 	bl	8014a0c <tcp_enqueue_flags>
 80120d0:	4603      	mov	r3, r0
 80120d2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80120d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d004      	beq.n	80120e6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80120dc:	2100      	movs	r1, #0
 80120de:	6978      	ldr	r0, [r7, #20]
 80120e0:	f7fd ff6c 	bl	800ffbc <tcp_abandon>
      return;
 80120e4:	e006      	b.n	80120f4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80120e6:	6978      	ldr	r0, [r7, #20]
 80120e8:	f002 fd7e 	bl	8014be8 <tcp_output>
  return;
 80120ec:	e001      	b.n	80120f2 <tcp_listen_input+0x1be>
    return;
 80120ee:	bf00      	nop
 80120f0:	e000      	b.n	80120f4 <tcp_listen_input+0x1c0>
  return;
 80120f2:	bf00      	nop
}
 80120f4:	371c      	adds	r7, #28
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd90      	pop	{r4, r7, pc}
 80120fa:	bf00      	nop
 80120fc:	200006d4 	.word	0x200006d4
 8012100:	0801b7e0 	.word	0x0801b7e0
 8012104:	0801b9d8 	.word	0x0801b9d8
 8012108:	0801b82c 	.word	0x0801b82c
 801210c:	200006cc 	.word	0x200006cc
 8012110:	200006d2 	.word	0x200006d2
 8012114:	200006c8 	.word	0x200006c8
 8012118:	200006b8 	.word	0x200006b8
 801211c:	20007b48 	.word	0x20007b48
 8012120:	20007b4c 	.word	0x20007b4c
 8012124:	20007b38 	.word	0x20007b38
 8012128:	2001879c 	.word	0x2001879c
 801212c:	20018798 	.word	0x20018798

08012130 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b086      	sub	sp, #24
 8012134:	af04      	add	r7, sp, #16
 8012136:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012138:	4b2f      	ldr	r3, [pc, #188]	; (80121f8 <tcp_timewait_input+0xc8>)
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	f003 0304 	and.w	r3, r3, #4
 8012140:	2b00      	cmp	r3, #0
 8012142:	d153      	bne.n	80121ec <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d106      	bne.n	8012158 <tcp_timewait_input+0x28>
 801214a:	4b2c      	ldr	r3, [pc, #176]	; (80121fc <tcp_timewait_input+0xcc>)
 801214c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012150:	492b      	ldr	r1, [pc, #172]	; (8012200 <tcp_timewait_input+0xd0>)
 8012152:	482c      	ldr	r0, [pc, #176]	; (8012204 <tcp_timewait_input+0xd4>)
 8012154:	f006 fece 	bl	8018ef4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012158:	4b27      	ldr	r3, [pc, #156]	; (80121f8 <tcp_timewait_input+0xc8>)
 801215a:	781b      	ldrb	r3, [r3, #0]
 801215c:	f003 0302 	and.w	r3, r3, #2
 8012160:	2b00      	cmp	r3, #0
 8012162:	d02a      	beq.n	80121ba <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012164:	4b28      	ldr	r3, [pc, #160]	; (8012208 <tcp_timewait_input+0xd8>)
 8012166:	681a      	ldr	r2, [r3, #0]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801216c:	1ad3      	subs	r3, r2, r3
 801216e:	2b00      	cmp	r3, #0
 8012170:	db2d      	blt.n	80121ce <tcp_timewait_input+0x9e>
 8012172:	4b25      	ldr	r3, [pc, #148]	; (8012208 <tcp_timewait_input+0xd8>)
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801217a:	6879      	ldr	r1, [r7, #4]
 801217c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801217e:	440b      	add	r3, r1
 8012180:	1ad3      	subs	r3, r2, r3
 8012182:	2b00      	cmp	r3, #0
 8012184:	dc23      	bgt.n	80121ce <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012186:	4b21      	ldr	r3, [pc, #132]	; (801220c <tcp_timewait_input+0xdc>)
 8012188:	6819      	ldr	r1, [r3, #0]
 801218a:	4b21      	ldr	r3, [pc, #132]	; (8012210 <tcp_timewait_input+0xe0>)
 801218c:	881b      	ldrh	r3, [r3, #0]
 801218e:	461a      	mov	r2, r3
 8012190:	4b1d      	ldr	r3, [pc, #116]	; (8012208 <tcp_timewait_input+0xd8>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012196:	4b1f      	ldr	r3, [pc, #124]	; (8012214 <tcp_timewait_input+0xe4>)
 8012198:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801219a:	885b      	ldrh	r3, [r3, #2]
 801219c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801219e:	4a1d      	ldr	r2, [pc, #116]	; (8012214 <tcp_timewait_input+0xe4>)
 80121a0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121a2:	8812      	ldrh	r2, [r2, #0]
 80121a4:	b292      	uxth	r2, r2
 80121a6:	9202      	str	r2, [sp, #8]
 80121a8:	9301      	str	r3, [sp, #4]
 80121aa:	4b1b      	ldr	r3, [pc, #108]	; (8012218 <tcp_timewait_input+0xe8>)
 80121ac:	9300      	str	r3, [sp, #0]
 80121ae:	4b1b      	ldr	r3, [pc, #108]	; (801221c <tcp_timewait_input+0xec>)
 80121b0:	4602      	mov	r2, r0
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f003 facc 	bl	8015750 <tcp_rst>
      return;
 80121b8:	e01b      	b.n	80121f2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80121ba:	4b0f      	ldr	r3, [pc, #60]	; (80121f8 <tcp_timewait_input+0xc8>)
 80121bc:	781b      	ldrb	r3, [r3, #0]
 80121be:	f003 0301 	and.w	r3, r3, #1
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d003      	beq.n	80121ce <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80121c6:	4b16      	ldr	r3, [pc, #88]	; (8012220 <tcp_timewait_input+0xf0>)
 80121c8:	681a      	ldr	r2, [r3, #0]
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80121ce:	4b10      	ldr	r3, [pc, #64]	; (8012210 <tcp_timewait_input+0xe0>)
 80121d0:	881b      	ldrh	r3, [r3, #0]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d00c      	beq.n	80121f0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	8b5b      	ldrh	r3, [r3, #26]
 80121da:	f043 0302 	orr.w	r3, r3, #2
 80121de:	b29a      	uxth	r2, r3
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f002 fcff 	bl	8014be8 <tcp_output>
  }
  return;
 80121ea:	e001      	b.n	80121f0 <tcp_timewait_input+0xc0>
    return;
 80121ec:	bf00      	nop
 80121ee:	e000      	b.n	80121f2 <tcp_timewait_input+0xc2>
  return;
 80121f0:	bf00      	nop
}
 80121f2:	3708      	adds	r7, #8
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}
 80121f8:	200006d4 	.word	0x200006d4
 80121fc:	0801b7e0 	.word	0x0801b7e0
 8012200:	0801b9f8 	.word	0x0801b9f8
 8012204:	0801b82c 	.word	0x0801b82c
 8012208:	200006c8 	.word	0x200006c8
 801220c:	200006cc 	.word	0x200006cc
 8012210:	200006d2 	.word	0x200006d2
 8012214:	200006b8 	.word	0x200006b8
 8012218:	20007b48 	.word	0x20007b48
 801221c:	20007b4c 	.word	0x20007b4c
 8012220:	200187a0 	.word	0x200187a0

08012224 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012224:	b590      	push	{r4, r7, lr}
 8012226:	b08d      	sub	sp, #52	; 0x34
 8012228:	af04      	add	r7, sp, #16
 801222a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801222c:	2300      	movs	r3, #0
 801222e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012230:	2300      	movs	r3, #0
 8012232:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d106      	bne.n	8012248 <tcp_process+0x24>
 801223a:	4ba5      	ldr	r3, [pc, #660]	; (80124d0 <tcp_process+0x2ac>)
 801223c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012240:	49a4      	ldr	r1, [pc, #656]	; (80124d4 <tcp_process+0x2b0>)
 8012242:	48a5      	ldr	r0, [pc, #660]	; (80124d8 <tcp_process+0x2b4>)
 8012244:	f006 fe56 	bl	8018ef4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012248:	4ba4      	ldr	r3, [pc, #656]	; (80124dc <tcp_process+0x2b8>)
 801224a:	781b      	ldrb	r3, [r3, #0]
 801224c:	f003 0304 	and.w	r3, r3, #4
 8012250:	2b00      	cmp	r3, #0
 8012252:	d04e      	beq.n	80122f2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	7d1b      	ldrb	r3, [r3, #20]
 8012258:	2b02      	cmp	r3, #2
 801225a:	d108      	bne.n	801226e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012260:	4b9f      	ldr	r3, [pc, #636]	; (80124e0 <tcp_process+0x2bc>)
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	429a      	cmp	r2, r3
 8012266:	d123      	bne.n	80122b0 <tcp_process+0x8c>
        acceptable = 1;
 8012268:	2301      	movs	r3, #1
 801226a:	76fb      	strb	r3, [r7, #27]
 801226c:	e020      	b.n	80122b0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012272:	4b9c      	ldr	r3, [pc, #624]	; (80124e4 <tcp_process+0x2c0>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	429a      	cmp	r2, r3
 8012278:	d102      	bne.n	8012280 <tcp_process+0x5c>
        acceptable = 1;
 801227a:	2301      	movs	r3, #1
 801227c:	76fb      	strb	r3, [r7, #27]
 801227e:	e017      	b.n	80122b0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012280:	4b98      	ldr	r3, [pc, #608]	; (80124e4 <tcp_process+0x2c0>)
 8012282:	681a      	ldr	r2, [r3, #0]
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012288:	1ad3      	subs	r3, r2, r3
 801228a:	2b00      	cmp	r3, #0
 801228c:	db10      	blt.n	80122b0 <tcp_process+0x8c>
 801228e:	4b95      	ldr	r3, [pc, #596]	; (80124e4 <tcp_process+0x2c0>)
 8012290:	681a      	ldr	r2, [r3, #0]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012296:	6879      	ldr	r1, [r7, #4]
 8012298:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801229a:	440b      	add	r3, r1
 801229c:	1ad3      	subs	r3, r2, r3
 801229e:	2b00      	cmp	r3, #0
 80122a0:	dc06      	bgt.n	80122b0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	8b5b      	ldrh	r3, [r3, #26]
 80122a6:	f043 0302 	orr.w	r3, r3, #2
 80122aa:	b29a      	uxth	r2, r3
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80122b0:	7efb      	ldrb	r3, [r7, #27]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d01b      	beq.n	80122ee <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	7d1b      	ldrb	r3, [r3, #20]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d106      	bne.n	80122cc <tcp_process+0xa8>
 80122be:	4b84      	ldr	r3, [pc, #528]	; (80124d0 <tcp_process+0x2ac>)
 80122c0:	f44f 724e 	mov.w	r2, #824	; 0x338
 80122c4:	4988      	ldr	r1, [pc, #544]	; (80124e8 <tcp_process+0x2c4>)
 80122c6:	4884      	ldr	r0, [pc, #528]	; (80124d8 <tcp_process+0x2b4>)
 80122c8:	f006 fe14 	bl	8018ef4 <iprintf>
      recv_flags |= TF_RESET;
 80122cc:	4b87      	ldr	r3, [pc, #540]	; (80124ec <tcp_process+0x2c8>)
 80122ce:	781b      	ldrb	r3, [r3, #0]
 80122d0:	f043 0308 	orr.w	r3, r3, #8
 80122d4:	b2da      	uxtb	r2, r3
 80122d6:	4b85      	ldr	r3, [pc, #532]	; (80124ec <tcp_process+0x2c8>)
 80122d8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	8b5b      	ldrh	r3, [r3, #26]
 80122de:	f023 0301 	bic.w	r3, r3, #1
 80122e2:	b29a      	uxth	r2, r3
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80122e8:	f06f 030d 	mvn.w	r3, #13
 80122ec:	e37a      	b.n	80129e4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80122ee:	2300      	movs	r3, #0
 80122f0:	e378      	b.n	80129e4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80122f2:	4b7a      	ldr	r3, [pc, #488]	; (80124dc <tcp_process+0x2b8>)
 80122f4:	781b      	ldrb	r3, [r3, #0]
 80122f6:	f003 0302 	and.w	r3, r3, #2
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d010      	beq.n	8012320 <tcp_process+0xfc>
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	7d1b      	ldrb	r3, [r3, #20]
 8012302:	2b02      	cmp	r3, #2
 8012304:	d00c      	beq.n	8012320 <tcp_process+0xfc>
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	7d1b      	ldrb	r3, [r3, #20]
 801230a:	2b03      	cmp	r3, #3
 801230c:	d008      	beq.n	8012320 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	8b5b      	ldrh	r3, [r3, #26]
 8012312:	f043 0302 	orr.w	r3, r3, #2
 8012316:	b29a      	uxth	r2, r3
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801231c:	2300      	movs	r3, #0
 801231e:	e361      	b.n	80129e4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	8b5b      	ldrh	r3, [r3, #26]
 8012324:	f003 0310 	and.w	r3, r3, #16
 8012328:	2b00      	cmp	r3, #0
 801232a:	d103      	bne.n	8012334 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801232c:	4b70      	ldr	r3, [pc, #448]	; (80124f0 <tcp_process+0x2cc>)
 801232e:	681a      	ldr	r2, [r3, #0]
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2200      	movs	r2, #0
 8012338:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2200      	movs	r2, #0
 8012340:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	f001 fc2d 	bl	8013ba4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	7d1b      	ldrb	r3, [r3, #20]
 801234e:	3b02      	subs	r3, #2
 8012350:	2b07      	cmp	r3, #7
 8012352:	f200 8337 	bhi.w	80129c4 <tcp_process+0x7a0>
 8012356:	a201      	add	r2, pc, #4	; (adr r2, 801235c <tcp_process+0x138>)
 8012358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801235c:	0801237d 	.word	0x0801237d
 8012360:	080125ad 	.word	0x080125ad
 8012364:	08012725 	.word	0x08012725
 8012368:	0801274f 	.word	0x0801274f
 801236c:	08012873 	.word	0x08012873
 8012370:	08012725 	.word	0x08012725
 8012374:	080128ff 	.word	0x080128ff
 8012378:	0801298f 	.word	0x0801298f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801237c:	4b57      	ldr	r3, [pc, #348]	; (80124dc <tcp_process+0x2b8>)
 801237e:	781b      	ldrb	r3, [r3, #0]
 8012380:	f003 0310 	and.w	r3, r3, #16
 8012384:	2b00      	cmp	r3, #0
 8012386:	f000 80e4 	beq.w	8012552 <tcp_process+0x32e>
 801238a:	4b54      	ldr	r3, [pc, #336]	; (80124dc <tcp_process+0x2b8>)
 801238c:	781b      	ldrb	r3, [r3, #0]
 801238e:	f003 0302 	and.w	r3, r3, #2
 8012392:	2b00      	cmp	r3, #0
 8012394:	f000 80dd 	beq.w	8012552 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801239c:	1c5a      	adds	r2, r3, #1
 801239e:	4b50      	ldr	r3, [pc, #320]	; (80124e0 <tcp_process+0x2bc>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	429a      	cmp	r2, r3
 80123a4:	f040 80d5 	bne.w	8012552 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80123a8:	4b4e      	ldr	r3, [pc, #312]	; (80124e4 <tcp_process+0x2c0>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	1c5a      	adds	r2, r3, #1
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80123ba:	4b49      	ldr	r3, [pc, #292]	; (80124e0 <tcp_process+0x2bc>)
 80123bc:	681a      	ldr	r2, [r3, #0]
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80123c2:	4b4c      	ldr	r3, [pc, #304]	; (80124f4 <tcp_process+0x2d0>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	89db      	ldrh	r3, [r3, #14]
 80123c8:	b29a      	uxth	r2, r3
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80123dc:	4b41      	ldr	r3, [pc, #260]	; (80124e4 <tcp_process+0x2c0>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	1e5a      	subs	r2, r3, #1
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2204      	movs	r2, #4
 80123ea:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	3304      	adds	r3, #4
 80123f4:	4618      	mov	r0, r3
 80123f6:	f004 ff4b 	bl	8017290 <ip4_route>
 80123fa:	4601      	mov	r1, r0
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	3304      	adds	r3, #4
 8012400:	461a      	mov	r2, r3
 8012402:	4620      	mov	r0, r4
 8012404:	f7ff f88c 	bl	8011520 <tcp_eff_send_mss_netif>
 8012408:	4603      	mov	r3, r0
 801240a:	461a      	mov	r2, r3
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012414:	009a      	lsls	r2, r3, #2
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801241a:	005b      	lsls	r3, r3, #1
 801241c:	f241 111c 	movw	r1, #4380	; 0x111c
 8012420:	428b      	cmp	r3, r1
 8012422:	bf38      	it	cc
 8012424:	460b      	movcc	r3, r1
 8012426:	429a      	cmp	r2, r3
 8012428:	d204      	bcs.n	8012434 <tcp_process+0x210>
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801242e:	009b      	lsls	r3, r3, #2
 8012430:	b29b      	uxth	r3, r3
 8012432:	e00d      	b.n	8012450 <tcp_process+0x22c>
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012438:	005b      	lsls	r3, r3, #1
 801243a:	f241 121c 	movw	r2, #4380	; 0x111c
 801243e:	4293      	cmp	r3, r2
 8012440:	d904      	bls.n	801244c <tcp_process+0x228>
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012446:	005b      	lsls	r3, r3, #1
 8012448:	b29b      	uxth	r3, r3
 801244a:	e001      	b.n	8012450 <tcp_process+0x22c>
 801244c:	f241 131c 	movw	r3, #4380	; 0x111c
 8012450:	687a      	ldr	r2, [r7, #4]
 8012452:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801245c:	2b00      	cmp	r3, #0
 801245e:	d106      	bne.n	801246e <tcp_process+0x24a>
 8012460:	4b1b      	ldr	r3, [pc, #108]	; (80124d0 <tcp_process+0x2ac>)
 8012462:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012466:	4924      	ldr	r1, [pc, #144]	; (80124f8 <tcp_process+0x2d4>)
 8012468:	481b      	ldr	r0, [pc, #108]	; (80124d8 <tcp_process+0x2b4>)
 801246a:	f006 fd43 	bl	8018ef4 <iprintf>
        --pcb->snd_queuelen;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012474:	3b01      	subs	r3, #1
 8012476:	b29a      	uxth	r2, r3
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012482:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012484:	69fb      	ldr	r3, [r7, #28]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d111      	bne.n	80124ae <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801248e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012490:	69fb      	ldr	r3, [r7, #28]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d106      	bne.n	80124a4 <tcp_process+0x280>
 8012496:	4b0e      	ldr	r3, [pc, #56]	; (80124d0 <tcp_process+0x2ac>)
 8012498:	f44f 725d 	mov.w	r2, #884	; 0x374
 801249c:	4917      	ldr	r1, [pc, #92]	; (80124fc <tcp_process+0x2d8>)
 801249e:	480e      	ldr	r0, [pc, #56]	; (80124d8 <tcp_process+0x2b4>)
 80124a0:	f006 fd28 	bl	8018ef4 <iprintf>
          pcb->unsent = rseg->next;
 80124a4:	69fb      	ldr	r3, [r7, #28]
 80124a6:	681a      	ldr	r2, [r3, #0]
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	66da      	str	r2, [r3, #108]	; 0x6c
 80124ac:	e003      	b.n	80124b6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80124ae:	69fb      	ldr	r3, [r7, #28]
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80124b6:	69f8      	ldr	r0, [r7, #28]
 80124b8:	f7fe fc8b 	bl	8010dd2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d11d      	bne.n	8012500 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124ca:	861a      	strh	r2, [r3, #48]	; 0x30
 80124cc:	e01f      	b.n	801250e <tcp_process+0x2ea>
 80124ce:	bf00      	nop
 80124d0:	0801b7e0 	.word	0x0801b7e0
 80124d4:	0801ba18 	.word	0x0801ba18
 80124d8:	0801b82c 	.word	0x0801b82c
 80124dc:	200006d4 	.word	0x200006d4
 80124e0:	200006cc 	.word	0x200006cc
 80124e4:	200006c8 	.word	0x200006c8
 80124e8:	0801ba34 	.word	0x0801ba34
 80124ec:	200006d5 	.word	0x200006d5
 80124f0:	200187a0 	.word	0x200187a0
 80124f4:	200006b8 	.word	0x200006b8
 80124f8:	0801ba54 	.word	0x0801ba54
 80124fc:	0801ba6c 	.word	0x0801ba6c
        } else {
          pcb->rtime = 0;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2200      	movs	r2, #0
 8012504:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	2200      	movs	r2, #0
 801250a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012514:	2b00      	cmp	r3, #0
 8012516:	d00a      	beq.n	801252e <tcp_process+0x30a>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801251e:	687a      	ldr	r2, [r7, #4]
 8012520:	6910      	ldr	r0, [r2, #16]
 8012522:	2200      	movs	r2, #0
 8012524:	6879      	ldr	r1, [r7, #4]
 8012526:	4798      	blx	r3
 8012528:	4603      	mov	r3, r0
 801252a:	76bb      	strb	r3, [r7, #26]
 801252c:	e001      	b.n	8012532 <tcp_process+0x30e>
 801252e:	2300      	movs	r3, #0
 8012530:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012532:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012536:	f113 0f0d 	cmn.w	r3, #13
 801253a:	d102      	bne.n	8012542 <tcp_process+0x31e>
          return ERR_ABRT;
 801253c:	f06f 030c 	mvn.w	r3, #12
 8012540:	e250      	b.n	80129e4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	8b5b      	ldrh	r3, [r3, #26]
 8012546:	f043 0302 	orr.w	r3, r3, #2
 801254a:	b29a      	uxth	r2, r3
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012550:	e23a      	b.n	80129c8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012552:	4b9d      	ldr	r3, [pc, #628]	; (80127c8 <tcp_process+0x5a4>)
 8012554:	781b      	ldrb	r3, [r3, #0]
 8012556:	f003 0310 	and.w	r3, r3, #16
 801255a:	2b00      	cmp	r3, #0
 801255c:	f000 8234 	beq.w	80129c8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012560:	4b9a      	ldr	r3, [pc, #616]	; (80127cc <tcp_process+0x5a8>)
 8012562:	6819      	ldr	r1, [r3, #0]
 8012564:	4b9a      	ldr	r3, [pc, #616]	; (80127d0 <tcp_process+0x5ac>)
 8012566:	881b      	ldrh	r3, [r3, #0]
 8012568:	461a      	mov	r2, r3
 801256a:	4b9a      	ldr	r3, [pc, #616]	; (80127d4 <tcp_process+0x5b0>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012570:	4b99      	ldr	r3, [pc, #612]	; (80127d8 <tcp_process+0x5b4>)
 8012572:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012574:	885b      	ldrh	r3, [r3, #2]
 8012576:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012578:	4a97      	ldr	r2, [pc, #604]	; (80127d8 <tcp_process+0x5b4>)
 801257a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801257c:	8812      	ldrh	r2, [r2, #0]
 801257e:	b292      	uxth	r2, r2
 8012580:	9202      	str	r2, [sp, #8]
 8012582:	9301      	str	r3, [sp, #4]
 8012584:	4b95      	ldr	r3, [pc, #596]	; (80127dc <tcp_process+0x5b8>)
 8012586:	9300      	str	r3, [sp, #0]
 8012588:	4b95      	ldr	r3, [pc, #596]	; (80127e0 <tcp_process+0x5bc>)
 801258a:	4602      	mov	r2, r0
 801258c:	6878      	ldr	r0, [r7, #4]
 801258e:	f003 f8df 	bl	8015750 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012598:	2b05      	cmp	r3, #5
 801259a:	f200 8215 	bhi.w	80129c8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2200      	movs	r2, #0
 80125a2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f002 fea9 	bl	80152fc <tcp_rexmit_rto>
      break;
 80125aa:	e20d      	b.n	80129c8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80125ac:	4b86      	ldr	r3, [pc, #536]	; (80127c8 <tcp_process+0x5a4>)
 80125ae:	781b      	ldrb	r3, [r3, #0]
 80125b0:	f003 0310 	and.w	r3, r3, #16
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	f000 80a1 	beq.w	80126fc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80125ba:	4b84      	ldr	r3, [pc, #528]	; (80127cc <tcp_process+0x5a8>)
 80125bc:	681a      	ldr	r2, [r3, #0]
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125c2:	1ad3      	subs	r3, r2, r3
 80125c4:	3b01      	subs	r3, #1
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	db7e      	blt.n	80126c8 <tcp_process+0x4a4>
 80125ca:	4b80      	ldr	r3, [pc, #512]	; (80127cc <tcp_process+0x5a8>)
 80125cc:	681a      	ldr	r2, [r3, #0]
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125d2:	1ad3      	subs	r3, r2, r3
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	dc77      	bgt.n	80126c8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2204      	movs	r2, #4
 80125dc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d102      	bne.n	80125ec <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80125e6:	23fa      	movs	r3, #250	; 0xfa
 80125e8:	76bb      	strb	r3, [r7, #26]
 80125ea:	e01d      	b.n	8012628 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80125f0:	699b      	ldr	r3, [r3, #24]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d106      	bne.n	8012604 <tcp_process+0x3e0>
 80125f6:	4b7b      	ldr	r3, [pc, #492]	; (80127e4 <tcp_process+0x5c0>)
 80125f8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80125fc:	497a      	ldr	r1, [pc, #488]	; (80127e8 <tcp_process+0x5c4>)
 80125fe:	487b      	ldr	r0, [pc, #492]	; (80127ec <tcp_process+0x5c8>)
 8012600:	f006 fc78 	bl	8018ef4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012608:	699b      	ldr	r3, [r3, #24]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d00a      	beq.n	8012624 <tcp_process+0x400>
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012612:	699b      	ldr	r3, [r3, #24]
 8012614:	687a      	ldr	r2, [r7, #4]
 8012616:	6910      	ldr	r0, [r2, #16]
 8012618:	2200      	movs	r2, #0
 801261a:	6879      	ldr	r1, [r7, #4]
 801261c:	4798      	blx	r3
 801261e:	4603      	mov	r3, r0
 8012620:	76bb      	strb	r3, [r7, #26]
 8012622:	e001      	b.n	8012628 <tcp_process+0x404>
 8012624:	23f0      	movs	r3, #240	; 0xf0
 8012626:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012628:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d00a      	beq.n	8012646 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012630:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012634:	f113 0f0d 	cmn.w	r3, #13
 8012638:	d002      	beq.n	8012640 <tcp_process+0x41c>
              tcp_abort(pcb);
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f7fd fd7c 	bl	8010138 <tcp_abort>
            }
            return ERR_ABRT;
 8012640:	f06f 030c 	mvn.w	r3, #12
 8012644:	e1ce      	b.n	80129e4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	f000 fae0 	bl	8012c0c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801264c:	4b68      	ldr	r3, [pc, #416]	; (80127f0 <tcp_process+0x5cc>)
 801264e:	881b      	ldrh	r3, [r3, #0]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d005      	beq.n	8012660 <tcp_process+0x43c>
            recv_acked--;
 8012654:	4b66      	ldr	r3, [pc, #408]	; (80127f0 <tcp_process+0x5cc>)
 8012656:	881b      	ldrh	r3, [r3, #0]
 8012658:	3b01      	subs	r3, #1
 801265a:	b29a      	uxth	r2, r3
 801265c:	4b64      	ldr	r3, [pc, #400]	; (80127f0 <tcp_process+0x5cc>)
 801265e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012664:	009a      	lsls	r2, r3, #2
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801266a:	005b      	lsls	r3, r3, #1
 801266c:	f241 111c 	movw	r1, #4380	; 0x111c
 8012670:	428b      	cmp	r3, r1
 8012672:	bf38      	it	cc
 8012674:	460b      	movcc	r3, r1
 8012676:	429a      	cmp	r2, r3
 8012678:	d204      	bcs.n	8012684 <tcp_process+0x460>
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801267e:	009b      	lsls	r3, r3, #2
 8012680:	b29b      	uxth	r3, r3
 8012682:	e00d      	b.n	80126a0 <tcp_process+0x47c>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012688:	005b      	lsls	r3, r3, #1
 801268a:	f241 121c 	movw	r2, #4380	; 0x111c
 801268e:	4293      	cmp	r3, r2
 8012690:	d904      	bls.n	801269c <tcp_process+0x478>
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012696:	005b      	lsls	r3, r3, #1
 8012698:	b29b      	uxth	r3, r3
 801269a:	e001      	b.n	80126a0 <tcp_process+0x47c>
 801269c:	f241 131c 	movw	r3, #4380	; 0x111c
 80126a0:	687a      	ldr	r2, [r7, #4]
 80126a2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80126a6:	4b53      	ldr	r3, [pc, #332]	; (80127f4 <tcp_process+0x5d0>)
 80126a8:	781b      	ldrb	r3, [r3, #0]
 80126aa:	f003 0320 	and.w	r3, r3, #32
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d037      	beq.n	8012722 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	8b5b      	ldrh	r3, [r3, #26]
 80126b6:	f043 0302 	orr.w	r3, r3, #2
 80126ba:	b29a      	uxth	r2, r3
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2207      	movs	r2, #7
 80126c4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80126c6:	e02c      	b.n	8012722 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80126c8:	4b40      	ldr	r3, [pc, #256]	; (80127cc <tcp_process+0x5a8>)
 80126ca:	6819      	ldr	r1, [r3, #0]
 80126cc:	4b40      	ldr	r3, [pc, #256]	; (80127d0 <tcp_process+0x5ac>)
 80126ce:	881b      	ldrh	r3, [r3, #0]
 80126d0:	461a      	mov	r2, r3
 80126d2:	4b40      	ldr	r3, [pc, #256]	; (80127d4 <tcp_process+0x5b0>)
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80126d8:	4b3f      	ldr	r3, [pc, #252]	; (80127d8 <tcp_process+0x5b4>)
 80126da:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80126dc:	885b      	ldrh	r3, [r3, #2]
 80126de:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80126e0:	4a3d      	ldr	r2, [pc, #244]	; (80127d8 <tcp_process+0x5b4>)
 80126e2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80126e4:	8812      	ldrh	r2, [r2, #0]
 80126e6:	b292      	uxth	r2, r2
 80126e8:	9202      	str	r2, [sp, #8]
 80126ea:	9301      	str	r3, [sp, #4]
 80126ec:	4b3b      	ldr	r3, [pc, #236]	; (80127dc <tcp_process+0x5b8>)
 80126ee:	9300      	str	r3, [sp, #0]
 80126f0:	4b3b      	ldr	r3, [pc, #236]	; (80127e0 <tcp_process+0x5bc>)
 80126f2:	4602      	mov	r2, r0
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f003 f82b 	bl	8015750 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80126fa:	e167      	b.n	80129cc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80126fc:	4b32      	ldr	r3, [pc, #200]	; (80127c8 <tcp_process+0x5a4>)
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	f003 0302 	and.w	r3, r3, #2
 8012704:	2b00      	cmp	r3, #0
 8012706:	f000 8161 	beq.w	80129cc <tcp_process+0x7a8>
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801270e:	1e5a      	subs	r2, r3, #1
 8012710:	4b30      	ldr	r3, [pc, #192]	; (80127d4 <tcp_process+0x5b0>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	429a      	cmp	r2, r3
 8012716:	f040 8159 	bne.w	80129cc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f002 fe10 	bl	8015340 <tcp_rexmit>
      break;
 8012720:	e154      	b.n	80129cc <tcp_process+0x7a8>
 8012722:	e153      	b.n	80129cc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012724:	6878      	ldr	r0, [r7, #4]
 8012726:	f000 fa71 	bl	8012c0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801272a:	4b32      	ldr	r3, [pc, #200]	; (80127f4 <tcp_process+0x5d0>)
 801272c:	781b      	ldrb	r3, [r3, #0]
 801272e:	f003 0320 	and.w	r3, r3, #32
 8012732:	2b00      	cmp	r3, #0
 8012734:	f000 814c 	beq.w	80129d0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	8b5b      	ldrh	r3, [r3, #26]
 801273c:	f043 0302 	orr.w	r3, r3, #2
 8012740:	b29a      	uxth	r2, r3
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2207      	movs	r2, #7
 801274a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801274c:	e140      	b.n	80129d0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f000 fa5c 	bl	8012c0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012754:	4b27      	ldr	r3, [pc, #156]	; (80127f4 <tcp_process+0x5d0>)
 8012756:	781b      	ldrb	r3, [r3, #0]
 8012758:	f003 0320 	and.w	r3, r3, #32
 801275c:	2b00      	cmp	r3, #0
 801275e:	d071      	beq.n	8012844 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012760:	4b19      	ldr	r3, [pc, #100]	; (80127c8 <tcp_process+0x5a4>)
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	f003 0310 	and.w	r3, r3, #16
 8012768:	2b00      	cmp	r3, #0
 801276a:	d060      	beq.n	801282e <tcp_process+0x60a>
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012770:	4b16      	ldr	r3, [pc, #88]	; (80127cc <tcp_process+0x5a8>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	429a      	cmp	r2, r3
 8012776:	d15a      	bne.n	801282e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801277c:	2b00      	cmp	r3, #0
 801277e:	d156      	bne.n	801282e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	8b5b      	ldrh	r3, [r3, #26]
 8012784:	f043 0302 	orr.w	r3, r3, #2
 8012788:	b29a      	uxth	r2, r3
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f7fe fdbc 	bl	801130c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012794:	4b18      	ldr	r3, [pc, #96]	; (80127f8 <tcp_process+0x5d4>)
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	687a      	ldr	r2, [r7, #4]
 801279a:	429a      	cmp	r2, r3
 801279c:	d105      	bne.n	80127aa <tcp_process+0x586>
 801279e:	4b16      	ldr	r3, [pc, #88]	; (80127f8 <tcp_process+0x5d4>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	68db      	ldr	r3, [r3, #12]
 80127a4:	4a14      	ldr	r2, [pc, #80]	; (80127f8 <tcp_process+0x5d4>)
 80127a6:	6013      	str	r3, [r2, #0]
 80127a8:	e02e      	b.n	8012808 <tcp_process+0x5e4>
 80127aa:	4b13      	ldr	r3, [pc, #76]	; (80127f8 <tcp_process+0x5d4>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	617b      	str	r3, [r7, #20]
 80127b0:	e027      	b.n	8012802 <tcp_process+0x5de>
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	68db      	ldr	r3, [r3, #12]
 80127b6:	687a      	ldr	r2, [r7, #4]
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d11f      	bne.n	80127fc <tcp_process+0x5d8>
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	68da      	ldr	r2, [r3, #12]
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	60da      	str	r2, [r3, #12]
 80127c4:	e020      	b.n	8012808 <tcp_process+0x5e4>
 80127c6:	bf00      	nop
 80127c8:	200006d4 	.word	0x200006d4
 80127cc:	200006cc 	.word	0x200006cc
 80127d0:	200006d2 	.word	0x200006d2
 80127d4:	200006c8 	.word	0x200006c8
 80127d8:	200006b8 	.word	0x200006b8
 80127dc:	20007b48 	.word	0x20007b48
 80127e0:	20007b4c 	.word	0x20007b4c
 80127e4:	0801b7e0 	.word	0x0801b7e0
 80127e8:	0801ba80 	.word	0x0801ba80
 80127ec:	0801b82c 	.word	0x0801b82c
 80127f0:	200006d0 	.word	0x200006d0
 80127f4:	200006d5 	.word	0x200006d5
 80127f8:	2001879c 	.word	0x2001879c
 80127fc:	697b      	ldr	r3, [r7, #20]
 80127fe:	68db      	ldr	r3, [r3, #12]
 8012800:	617b      	str	r3, [r7, #20]
 8012802:	697b      	ldr	r3, [r7, #20]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d1d4      	bne.n	80127b2 <tcp_process+0x58e>
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2200      	movs	r2, #0
 801280c:	60da      	str	r2, [r3, #12]
 801280e:	4b77      	ldr	r3, [pc, #476]	; (80129ec <tcp_process+0x7c8>)
 8012810:	2201      	movs	r2, #1
 8012812:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	220a      	movs	r2, #10
 8012818:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801281a:	4b75      	ldr	r3, [pc, #468]	; (80129f0 <tcp_process+0x7cc>)
 801281c:	681a      	ldr	r2, [r3, #0]
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	60da      	str	r2, [r3, #12]
 8012822:	4a73      	ldr	r2, [pc, #460]	; (80129f0 <tcp_process+0x7cc>)
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	6013      	str	r3, [r2, #0]
 8012828:	f003 f954 	bl	8015ad4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801282c:	e0d2      	b.n	80129d4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	8b5b      	ldrh	r3, [r3, #26]
 8012832:	f043 0302 	orr.w	r3, r3, #2
 8012836:	b29a      	uxth	r2, r3
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2208      	movs	r2, #8
 8012840:	751a      	strb	r2, [r3, #20]
      break;
 8012842:	e0c7      	b.n	80129d4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012844:	4b6b      	ldr	r3, [pc, #428]	; (80129f4 <tcp_process+0x7d0>)
 8012846:	781b      	ldrb	r3, [r3, #0]
 8012848:	f003 0310 	and.w	r3, r3, #16
 801284c:	2b00      	cmp	r3, #0
 801284e:	f000 80c1 	beq.w	80129d4 <tcp_process+0x7b0>
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012856:	4b68      	ldr	r3, [pc, #416]	; (80129f8 <tcp_process+0x7d4>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	429a      	cmp	r2, r3
 801285c:	f040 80ba 	bne.w	80129d4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012864:	2b00      	cmp	r3, #0
 8012866:	f040 80b5 	bne.w	80129d4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	2206      	movs	r2, #6
 801286e:	751a      	strb	r2, [r3, #20]
      break;
 8012870:	e0b0      	b.n	80129d4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f000 f9ca 	bl	8012c0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012878:	4b60      	ldr	r3, [pc, #384]	; (80129fc <tcp_process+0x7d8>)
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	f003 0320 	and.w	r3, r3, #32
 8012880:	2b00      	cmp	r3, #0
 8012882:	f000 80a9 	beq.w	80129d8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	8b5b      	ldrh	r3, [r3, #26]
 801288a:	f043 0302 	orr.w	r3, r3, #2
 801288e:	b29a      	uxth	r2, r3
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f7fe fd39 	bl	801130c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801289a:	4b59      	ldr	r3, [pc, #356]	; (8012a00 <tcp_process+0x7dc>)
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d105      	bne.n	80128b0 <tcp_process+0x68c>
 80128a4:	4b56      	ldr	r3, [pc, #344]	; (8012a00 <tcp_process+0x7dc>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	68db      	ldr	r3, [r3, #12]
 80128aa:	4a55      	ldr	r2, [pc, #340]	; (8012a00 <tcp_process+0x7dc>)
 80128ac:	6013      	str	r3, [r2, #0]
 80128ae:	e013      	b.n	80128d8 <tcp_process+0x6b4>
 80128b0:	4b53      	ldr	r3, [pc, #332]	; (8012a00 <tcp_process+0x7dc>)
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	613b      	str	r3, [r7, #16]
 80128b6:	e00c      	b.n	80128d2 <tcp_process+0x6ae>
 80128b8:	693b      	ldr	r3, [r7, #16]
 80128ba:	68db      	ldr	r3, [r3, #12]
 80128bc:	687a      	ldr	r2, [r7, #4]
 80128be:	429a      	cmp	r2, r3
 80128c0:	d104      	bne.n	80128cc <tcp_process+0x6a8>
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	68da      	ldr	r2, [r3, #12]
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	60da      	str	r2, [r3, #12]
 80128ca:	e005      	b.n	80128d8 <tcp_process+0x6b4>
 80128cc:	693b      	ldr	r3, [r7, #16]
 80128ce:	68db      	ldr	r3, [r3, #12]
 80128d0:	613b      	str	r3, [r7, #16]
 80128d2:	693b      	ldr	r3, [r7, #16]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d1ef      	bne.n	80128b8 <tcp_process+0x694>
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2200      	movs	r2, #0
 80128dc:	60da      	str	r2, [r3, #12]
 80128de:	4b43      	ldr	r3, [pc, #268]	; (80129ec <tcp_process+0x7c8>)
 80128e0:	2201      	movs	r2, #1
 80128e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	220a      	movs	r2, #10
 80128e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80128ea:	4b41      	ldr	r3, [pc, #260]	; (80129f0 <tcp_process+0x7cc>)
 80128ec:	681a      	ldr	r2, [r3, #0]
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	60da      	str	r2, [r3, #12]
 80128f2:	4a3f      	ldr	r2, [pc, #252]	; (80129f0 <tcp_process+0x7cc>)
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	6013      	str	r3, [r2, #0]
 80128f8:	f003 f8ec 	bl	8015ad4 <tcp_timer_needed>
      }
      break;
 80128fc:	e06c      	b.n	80129d8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80128fe:	6878      	ldr	r0, [r7, #4]
 8012900:	f000 f984 	bl	8012c0c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012904:	4b3b      	ldr	r3, [pc, #236]	; (80129f4 <tcp_process+0x7d0>)
 8012906:	781b      	ldrb	r3, [r3, #0]
 8012908:	f003 0310 	and.w	r3, r3, #16
 801290c:	2b00      	cmp	r3, #0
 801290e:	d065      	beq.n	80129dc <tcp_process+0x7b8>
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012914:	4b38      	ldr	r3, [pc, #224]	; (80129f8 <tcp_process+0x7d4>)
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	429a      	cmp	r2, r3
 801291a:	d15f      	bne.n	80129dc <tcp_process+0x7b8>
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012920:	2b00      	cmp	r3, #0
 8012922:	d15b      	bne.n	80129dc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012924:	6878      	ldr	r0, [r7, #4]
 8012926:	f7fe fcf1 	bl	801130c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801292a:	4b35      	ldr	r3, [pc, #212]	; (8012a00 <tcp_process+0x7dc>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	687a      	ldr	r2, [r7, #4]
 8012930:	429a      	cmp	r2, r3
 8012932:	d105      	bne.n	8012940 <tcp_process+0x71c>
 8012934:	4b32      	ldr	r3, [pc, #200]	; (8012a00 <tcp_process+0x7dc>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	68db      	ldr	r3, [r3, #12]
 801293a:	4a31      	ldr	r2, [pc, #196]	; (8012a00 <tcp_process+0x7dc>)
 801293c:	6013      	str	r3, [r2, #0]
 801293e:	e013      	b.n	8012968 <tcp_process+0x744>
 8012940:	4b2f      	ldr	r3, [pc, #188]	; (8012a00 <tcp_process+0x7dc>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	60fb      	str	r3, [r7, #12]
 8012946:	e00c      	b.n	8012962 <tcp_process+0x73e>
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	68db      	ldr	r3, [r3, #12]
 801294c:	687a      	ldr	r2, [r7, #4]
 801294e:	429a      	cmp	r2, r3
 8012950:	d104      	bne.n	801295c <tcp_process+0x738>
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	68da      	ldr	r2, [r3, #12]
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	60da      	str	r2, [r3, #12]
 801295a:	e005      	b.n	8012968 <tcp_process+0x744>
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	68db      	ldr	r3, [r3, #12]
 8012960:	60fb      	str	r3, [r7, #12]
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d1ef      	bne.n	8012948 <tcp_process+0x724>
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2200      	movs	r2, #0
 801296c:	60da      	str	r2, [r3, #12]
 801296e:	4b1f      	ldr	r3, [pc, #124]	; (80129ec <tcp_process+0x7c8>)
 8012970:	2201      	movs	r2, #1
 8012972:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	220a      	movs	r2, #10
 8012978:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801297a:	4b1d      	ldr	r3, [pc, #116]	; (80129f0 <tcp_process+0x7cc>)
 801297c:	681a      	ldr	r2, [r3, #0]
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	60da      	str	r2, [r3, #12]
 8012982:	4a1b      	ldr	r2, [pc, #108]	; (80129f0 <tcp_process+0x7cc>)
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	6013      	str	r3, [r2, #0]
 8012988:	f003 f8a4 	bl	8015ad4 <tcp_timer_needed>
      }
      break;
 801298c:	e026      	b.n	80129dc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	f000 f93c 	bl	8012c0c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012994:	4b17      	ldr	r3, [pc, #92]	; (80129f4 <tcp_process+0x7d0>)
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	f003 0310 	and.w	r3, r3, #16
 801299c:	2b00      	cmp	r3, #0
 801299e:	d01f      	beq.n	80129e0 <tcp_process+0x7bc>
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80129a4:	4b14      	ldr	r3, [pc, #80]	; (80129f8 <tcp_process+0x7d4>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d119      	bne.n	80129e0 <tcp_process+0x7bc>
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d115      	bne.n	80129e0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80129b4:	4b11      	ldr	r3, [pc, #68]	; (80129fc <tcp_process+0x7d8>)
 80129b6:	781b      	ldrb	r3, [r3, #0]
 80129b8:	f043 0310 	orr.w	r3, r3, #16
 80129bc:	b2da      	uxtb	r2, r3
 80129be:	4b0f      	ldr	r3, [pc, #60]	; (80129fc <tcp_process+0x7d8>)
 80129c0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80129c2:	e00d      	b.n	80129e0 <tcp_process+0x7bc>
    default:
      break;
 80129c4:	bf00      	nop
 80129c6:	e00c      	b.n	80129e2 <tcp_process+0x7be>
      break;
 80129c8:	bf00      	nop
 80129ca:	e00a      	b.n	80129e2 <tcp_process+0x7be>
      break;
 80129cc:	bf00      	nop
 80129ce:	e008      	b.n	80129e2 <tcp_process+0x7be>
      break;
 80129d0:	bf00      	nop
 80129d2:	e006      	b.n	80129e2 <tcp_process+0x7be>
      break;
 80129d4:	bf00      	nop
 80129d6:	e004      	b.n	80129e2 <tcp_process+0x7be>
      break;
 80129d8:	bf00      	nop
 80129da:	e002      	b.n	80129e2 <tcp_process+0x7be>
      break;
 80129dc:	bf00      	nop
 80129de:	e000      	b.n	80129e2 <tcp_process+0x7be>
      break;
 80129e0:	bf00      	nop
  }
  return ERR_OK;
 80129e2:	2300      	movs	r3, #0
}
 80129e4:	4618      	mov	r0, r3
 80129e6:	3724      	adds	r7, #36	; 0x24
 80129e8:	46bd      	mov	sp, r7
 80129ea:	bd90      	pop	{r4, r7, pc}
 80129ec:	20018798 	.word	0x20018798
 80129f0:	200187ac 	.word	0x200187ac
 80129f4:	200006d4 	.word	0x200006d4
 80129f8:	200006cc 	.word	0x200006cc
 80129fc:	200006d5 	.word	0x200006d5
 8012a00:	2001879c 	.word	0x2001879c

08012a04 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012a04:	b590      	push	{r4, r7, lr}
 8012a06:	b085      	sub	sp, #20
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
 8012a0c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d106      	bne.n	8012a22 <tcp_oos_insert_segment+0x1e>
 8012a14:	4b3b      	ldr	r3, [pc, #236]	; (8012b04 <tcp_oos_insert_segment+0x100>)
 8012a16:	f240 421f 	movw	r2, #1055	; 0x41f
 8012a1a:	493b      	ldr	r1, [pc, #236]	; (8012b08 <tcp_oos_insert_segment+0x104>)
 8012a1c:	483b      	ldr	r0, [pc, #236]	; (8012b0c <tcp_oos_insert_segment+0x108>)
 8012a1e:	f006 fa69 	bl	8018ef4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	68db      	ldr	r3, [r3, #12]
 8012a26:	899b      	ldrh	r3, [r3, #12]
 8012a28:	b29b      	uxth	r3, r3
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7fb faa7 	bl	800df7e <lwip_htons>
 8012a30:	4603      	mov	r3, r0
 8012a32:	b2db      	uxtb	r3, r3
 8012a34:	f003 0301 	and.w	r3, r3, #1
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d028      	beq.n	8012a8e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012a3c:	6838      	ldr	r0, [r7, #0]
 8012a3e:	f7fe f9b3 	bl	8010da8 <tcp_segs_free>
    next = NULL;
 8012a42:	2300      	movs	r3, #0
 8012a44:	603b      	str	r3, [r7, #0]
 8012a46:	e056      	b.n	8012af6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012a48:	683b      	ldr	r3, [r7, #0]
 8012a4a:	68db      	ldr	r3, [r3, #12]
 8012a4c:	899b      	ldrh	r3, [r3, #12]
 8012a4e:	b29b      	uxth	r3, r3
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7fb fa94 	bl	800df7e <lwip_htons>
 8012a56:	4603      	mov	r3, r0
 8012a58:	b2db      	uxtb	r3, r3
 8012a5a:	f003 0301 	and.w	r3, r3, #1
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d00d      	beq.n	8012a7e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	68db      	ldr	r3, [r3, #12]
 8012a66:	899b      	ldrh	r3, [r3, #12]
 8012a68:	b29c      	uxth	r4, r3
 8012a6a:	2001      	movs	r0, #1
 8012a6c:	f7fb fa87 	bl	800df7e <lwip_htons>
 8012a70:	4603      	mov	r3, r0
 8012a72:	461a      	mov	r2, r3
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	68db      	ldr	r3, [r3, #12]
 8012a78:	4322      	orrs	r2, r4
 8012a7a:	b292      	uxth	r2, r2
 8012a7c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012a7e:	683b      	ldr	r3, [r7, #0]
 8012a80:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012a88:	68f8      	ldr	r0, [r7, #12]
 8012a8a:	f7fe f9a2 	bl	8010dd2 <tcp_seg_free>
    while (next &&
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d00e      	beq.n	8012ab2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	891b      	ldrh	r3, [r3, #8]
 8012a98:	461a      	mov	r2, r3
 8012a9a:	4b1d      	ldr	r3, [pc, #116]	; (8012b10 <tcp_oos_insert_segment+0x10c>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	441a      	add	r2, r3
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	68db      	ldr	r3, [r3, #12]
 8012aa4:	685b      	ldr	r3, [r3, #4]
 8012aa6:	6839      	ldr	r1, [r7, #0]
 8012aa8:	8909      	ldrh	r1, [r1, #8]
 8012aaa:	440b      	add	r3, r1
 8012aac:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	daca      	bge.n	8012a48 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d01e      	beq.n	8012af6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	891b      	ldrh	r3, [r3, #8]
 8012abc:	461a      	mov	r2, r3
 8012abe:	4b14      	ldr	r3, [pc, #80]	; (8012b10 <tcp_oos_insert_segment+0x10c>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	441a      	add	r2, r3
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	68db      	ldr	r3, [r3, #12]
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	dd12      	ble.n	8012af6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012ad0:	683b      	ldr	r3, [r7, #0]
 8012ad2:	68db      	ldr	r3, [r3, #12]
 8012ad4:	685b      	ldr	r3, [r3, #4]
 8012ad6:	b29a      	uxth	r2, r3
 8012ad8:	4b0d      	ldr	r3, [pc, #52]	; (8012b10 <tcp_oos_insert_segment+0x10c>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	b29b      	uxth	r3, r3
 8012ade:	1ad3      	subs	r3, r2, r3
 8012ae0:	b29a      	uxth	r2, r3
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	685a      	ldr	r2, [r3, #4]
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	891b      	ldrh	r3, [r3, #8]
 8012aee:	4619      	mov	r1, r3
 8012af0:	4610      	mov	r0, r2
 8012af2:	f7fc fb81 	bl	800f1f8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	683a      	ldr	r2, [r7, #0]
 8012afa:	601a      	str	r2, [r3, #0]
}
 8012afc:	bf00      	nop
 8012afe:	3714      	adds	r7, #20
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd90      	pop	{r4, r7, pc}
 8012b04:	0801b7e0 	.word	0x0801b7e0
 8012b08:	0801baa0 	.word	0x0801baa0
 8012b0c:	0801b82c 	.word	0x0801b82c
 8012b10:	200006c8 	.word	0x200006c8

08012b14 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012b14:	b5b0      	push	{r4, r5, r7, lr}
 8012b16:	b086      	sub	sp, #24
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	60f8      	str	r0, [r7, #12]
 8012b1c:	60b9      	str	r1, [r7, #8]
 8012b1e:	607a      	str	r2, [r7, #4]
 8012b20:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8012b22:	e03e      	b.n	8012ba2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	685b      	ldr	r3, [r3, #4]
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7fc fd6e 	bl	800f614 <pbuf_clen>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b42:	8a7a      	ldrh	r2, [r7, #18]
 8012b44:	429a      	cmp	r2, r3
 8012b46:	d906      	bls.n	8012b56 <tcp_free_acked_segments+0x42>
 8012b48:	4b2a      	ldr	r3, [pc, #168]	; (8012bf4 <tcp_free_acked_segments+0xe0>)
 8012b4a:	f240 4257 	movw	r2, #1111	; 0x457
 8012b4e:	492a      	ldr	r1, [pc, #168]	; (8012bf8 <tcp_free_acked_segments+0xe4>)
 8012b50:	482a      	ldr	r0, [pc, #168]	; (8012bfc <tcp_free_acked_segments+0xe8>)
 8012b52:	f006 f9cf 	bl	8018ef4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8012b5c:	8a7b      	ldrh	r3, [r7, #18]
 8012b5e:	1ad3      	subs	r3, r2, r3
 8012b60:	b29a      	uxth	r2, r3
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012b68:	697b      	ldr	r3, [r7, #20]
 8012b6a:	891a      	ldrh	r2, [r3, #8]
 8012b6c:	4b24      	ldr	r3, [pc, #144]	; (8012c00 <tcp_free_acked_segments+0xec>)
 8012b6e:	881b      	ldrh	r3, [r3, #0]
 8012b70:	4413      	add	r3, r2
 8012b72:	b29a      	uxth	r2, r3
 8012b74:	4b22      	ldr	r3, [pc, #136]	; (8012c00 <tcp_free_acked_segments+0xec>)
 8012b76:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012b78:	6978      	ldr	r0, [r7, #20]
 8012b7a:	f7fe f92a 	bl	8010dd2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d00c      	beq.n	8012ba2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d109      	bne.n	8012ba2 <tcp_free_acked_segments+0x8e>
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d106      	bne.n	8012ba2 <tcp_free_acked_segments+0x8e>
 8012b94:	4b17      	ldr	r3, [pc, #92]	; (8012bf4 <tcp_free_acked_segments+0xe0>)
 8012b96:	f240 4261 	movw	r2, #1121	; 0x461
 8012b9a:	491a      	ldr	r1, [pc, #104]	; (8012c04 <tcp_free_acked_segments+0xf0>)
 8012b9c:	4817      	ldr	r0, [pc, #92]	; (8012bfc <tcp_free_acked_segments+0xe8>)
 8012b9e:	f006 f9a9 	bl	8018ef4 <iprintf>
  while (seg_list != NULL &&
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d020      	beq.n	8012bea <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	68db      	ldr	r3, [r3, #12]
 8012bac:	685b      	ldr	r3, [r3, #4]
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f7fb f9fa 	bl	800dfa8 <lwip_htonl>
 8012bb4:	4604      	mov	r4, r0
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	891b      	ldrh	r3, [r3, #8]
 8012bba:	461d      	mov	r5, r3
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	68db      	ldr	r3, [r3, #12]
 8012bc0:	899b      	ldrh	r3, [r3, #12]
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7fb f9da 	bl	800df7e <lwip_htons>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	b2db      	uxtb	r3, r3
 8012bce:	f003 0303 	and.w	r3, r3, #3
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d001      	beq.n	8012bda <tcp_free_acked_segments+0xc6>
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	e000      	b.n	8012bdc <tcp_free_acked_segments+0xc8>
 8012bda:	2300      	movs	r3, #0
 8012bdc:	442b      	add	r3, r5
 8012bde:	18e2      	adds	r2, r4, r3
 8012be0:	4b09      	ldr	r3, [pc, #36]	; (8012c08 <tcp_free_acked_segments+0xf4>)
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	dd9c      	ble.n	8012b24 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012bea:	68bb      	ldr	r3, [r7, #8]
}
 8012bec:	4618      	mov	r0, r3
 8012bee:	3718      	adds	r7, #24
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8012bf4:	0801b7e0 	.word	0x0801b7e0
 8012bf8:	0801bac8 	.word	0x0801bac8
 8012bfc:	0801b82c 	.word	0x0801b82c
 8012c00:	200006d0 	.word	0x200006d0
 8012c04:	0801baf0 	.word	0x0801baf0
 8012c08:	200006cc 	.word	0x200006cc

08012c0c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012c0c:	b5b0      	push	{r4, r5, r7, lr}
 8012c0e:	b094      	sub	sp, #80	; 0x50
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012c14:	2300      	movs	r3, #0
 8012c16:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d106      	bne.n	8012c2c <tcp_receive+0x20>
 8012c1e:	4ba6      	ldr	r3, [pc, #664]	; (8012eb8 <tcp_receive+0x2ac>)
 8012c20:	f240 427b 	movw	r2, #1147	; 0x47b
 8012c24:	49a5      	ldr	r1, [pc, #660]	; (8012ebc <tcp_receive+0x2b0>)
 8012c26:	48a6      	ldr	r0, [pc, #664]	; (8012ec0 <tcp_receive+0x2b4>)
 8012c28:	f006 f964 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	7d1b      	ldrb	r3, [r3, #20]
 8012c30:	2b03      	cmp	r3, #3
 8012c32:	d806      	bhi.n	8012c42 <tcp_receive+0x36>
 8012c34:	4ba0      	ldr	r3, [pc, #640]	; (8012eb8 <tcp_receive+0x2ac>)
 8012c36:	f240 427c 	movw	r2, #1148	; 0x47c
 8012c3a:	49a2      	ldr	r1, [pc, #648]	; (8012ec4 <tcp_receive+0x2b8>)
 8012c3c:	48a0      	ldr	r0, [pc, #640]	; (8012ec0 <tcp_receive+0x2b4>)
 8012c3e:	f006 f959 	bl	8018ef4 <iprintf>

  if (flags & TCP_ACK) {
 8012c42:	4ba1      	ldr	r3, [pc, #644]	; (8012ec8 <tcp_receive+0x2bc>)
 8012c44:	781b      	ldrb	r3, [r3, #0]
 8012c46:	f003 0310 	and.w	r3, r3, #16
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	f000 8263 	beq.w	8013116 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012c56:	461a      	mov	r2, r3
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c5c:	4413      	add	r3, r2
 8012c5e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012c64:	4b99      	ldr	r3, [pc, #612]	; (8012ecc <tcp_receive+0x2c0>)
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	1ad3      	subs	r3, r2, r3
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	db1b      	blt.n	8012ca6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012c72:	4b96      	ldr	r3, [pc, #600]	; (8012ecc <tcp_receive+0x2c0>)
 8012c74:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012c76:	429a      	cmp	r2, r3
 8012c78:	d106      	bne.n	8012c88 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012c7e:	4b94      	ldr	r3, [pc, #592]	; (8012ed0 <tcp_receive+0x2c4>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	1ad3      	subs	r3, r2, r3
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	db0e      	blt.n	8012ca6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012c8c:	4b90      	ldr	r3, [pc, #576]	; (8012ed0 <tcp_receive+0x2c4>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012c90:	429a      	cmp	r2, r3
 8012c92:	d125      	bne.n	8012ce0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012c94:	4b8f      	ldr	r3, [pc, #572]	; (8012ed4 <tcp_receive+0x2c8>)
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	89db      	ldrh	r3, [r3, #14]
 8012c9a:	b29a      	uxth	r2, r3
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d91c      	bls.n	8012ce0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012ca6:	4b8b      	ldr	r3, [pc, #556]	; (8012ed4 <tcp_receive+0x2c8>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	89db      	ldrh	r3, [r3, #14]
 8012cac:	b29a      	uxth	r2, r3
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012cc0:	429a      	cmp	r2, r3
 8012cc2:	d205      	bcs.n	8012cd0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8012cd0:	4b7e      	ldr	r3, [pc, #504]	; (8012ecc <tcp_receive+0x2c0>)
 8012cd2:	681a      	ldr	r2, [r3, #0]
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012cd8:	4b7d      	ldr	r3, [pc, #500]	; (8012ed0 <tcp_receive+0x2c4>)
 8012cda:	681a      	ldr	r2, [r3, #0]
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012ce0:	4b7b      	ldr	r3, [pc, #492]	; (8012ed0 <tcp_receive+0x2c4>)
 8012ce2:	681a      	ldr	r2, [r3, #0]
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ce8:	1ad3      	subs	r3, r2, r3
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	dc58      	bgt.n	8012da0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012cee:	4b7a      	ldr	r3, [pc, #488]	; (8012ed8 <tcp_receive+0x2cc>)
 8012cf0:	881b      	ldrh	r3, [r3, #0]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d14b      	bne.n	8012d8e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012cfa:	687a      	ldr	r2, [r7, #4]
 8012cfc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012d00:	4413      	add	r3, r2
 8012d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d04:	429a      	cmp	r2, r3
 8012d06:	d142      	bne.n	8012d8e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	db3d      	blt.n	8012d8e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012d16:	4b6e      	ldr	r3, [pc, #440]	; (8012ed0 <tcp_receive+0x2c4>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d137      	bne.n	8012d8e <tcp_receive+0x182>
              found_dupack = 1;
 8012d1e:	2301      	movs	r3, #1
 8012d20:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012d28:	2bff      	cmp	r3, #255	; 0xff
 8012d2a:	d007      	beq.n	8012d3c <tcp_receive+0x130>
                ++pcb->dupacks;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012d32:	3301      	adds	r3, #1
 8012d34:	b2da      	uxtb	r2, r3
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012d42:	2b03      	cmp	r3, #3
 8012d44:	d91b      	bls.n	8012d7e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d50:	4413      	add	r3, r2
 8012d52:	b29a      	uxth	r2, r3
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	d30a      	bcc.n	8012d74 <tcp_receive+0x168>
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d68:	4413      	add	r3, r2
 8012d6a:	b29a      	uxth	r2, r3
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012d72:	e004      	b.n	8012d7e <tcp_receive+0x172>
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012d84:	2b02      	cmp	r3, #2
 8012d86:	d902      	bls.n	8012d8e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f002 fb45 	bl	8015418 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	f040 8160 	bne.w	8013056 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2200      	movs	r2, #0
 8012d9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012d9e:	e15a      	b.n	8013056 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012da0:	4b4b      	ldr	r3, [pc, #300]	; (8012ed0 <tcp_receive+0x2c4>)
 8012da2:	681a      	ldr	r2, [r3, #0]
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012da8:	1ad3      	subs	r3, r2, r3
 8012daa:	3b01      	subs	r3, #1
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	f2c0 814d 	blt.w	801304c <tcp_receive+0x440>
 8012db2:	4b47      	ldr	r3, [pc, #284]	; (8012ed0 <tcp_receive+0x2c4>)
 8012db4:	681a      	ldr	r2, [r3, #0]
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012dba:	1ad3      	subs	r3, r2, r3
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	f300 8145 	bgt.w	801304c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	8b5b      	ldrh	r3, [r3, #26]
 8012dc6:	f003 0304 	and.w	r3, r3, #4
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d010      	beq.n	8012df0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	8b5b      	ldrh	r3, [r3, #26]
 8012dd2:	f023 0304 	bic.w	r3, r3, #4
 8012dd6:	b29a      	uxth	r2, r3
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2200      	movs	r2, #0
 8012dec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2200      	movs	r2, #0
 8012df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012dfe:	10db      	asrs	r3, r3, #3
 8012e00:	b21b      	sxth	r3, r3
 8012e02:	b29a      	uxth	r2, r3
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012e0a:	b29b      	uxth	r3, r3
 8012e0c:	4413      	add	r3, r2
 8012e0e:	b29b      	uxth	r3, r3
 8012e10:	b21a      	sxth	r2, r3
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012e18:	4b2d      	ldr	r3, [pc, #180]	; (8012ed0 <tcp_receive+0x2c4>)
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	b29a      	uxth	r2, r3
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e22:	b29b      	uxth	r3, r3
 8012e24:	1ad3      	subs	r3, r2, r3
 8012e26:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012e30:	4b27      	ldr	r3, [pc, #156]	; (8012ed0 <tcp_receive+0x2c4>)
 8012e32:	681a      	ldr	r2, [r3, #0]
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	7d1b      	ldrb	r3, [r3, #20]
 8012e3c:	2b03      	cmp	r3, #3
 8012e3e:	f240 8096 	bls.w	8012f6e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d244      	bcs.n	8012edc <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	8b5b      	ldrh	r3, [r3, #26]
 8012e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d001      	beq.n	8012e62 <tcp_receive+0x256>
 8012e5e:	2301      	movs	r3, #1
 8012e60:	e000      	b.n	8012e64 <tcp_receive+0x258>
 8012e62:	2302      	movs	r3, #2
 8012e64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012e68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012e6c:	b29a      	uxth	r2, r3
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e72:	fb12 f303 	smulbb	r3, r2, r3
 8012e76:	b29b      	uxth	r3, r3
 8012e78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012e7a:	4293      	cmp	r3, r2
 8012e7c:	bf28      	it	cs
 8012e7e:	4613      	movcs	r3, r2
 8012e80:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012e88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012e8a:	4413      	add	r3, r2
 8012e8c:	b29a      	uxth	r2, r3
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012e94:	429a      	cmp	r2, r3
 8012e96:	d309      	bcc.n	8012eac <tcp_receive+0x2a0>
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012e9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012ea0:	4413      	add	r3, r2
 8012ea2:	b29a      	uxth	r2, r3
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012eaa:	e060      	b.n	8012f6e <tcp_receive+0x362>
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012eb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012eb6:	e05a      	b.n	8012f6e <tcp_receive+0x362>
 8012eb8:	0801b7e0 	.word	0x0801b7e0
 8012ebc:	0801bb10 	.word	0x0801bb10
 8012ec0:	0801b82c 	.word	0x0801b82c
 8012ec4:	0801bb2c 	.word	0x0801bb2c
 8012ec8:	200006d4 	.word	0x200006d4
 8012ecc:	200006c8 	.word	0x200006c8
 8012ed0:	200006cc 	.word	0x200006cc
 8012ed4:	200006b8 	.word	0x200006b8
 8012ed8:	200006d2 	.word	0x200006d2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012ee2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012ee4:	4413      	add	r3, r2
 8012ee6:	b29a      	uxth	r2, r3
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012eee:	429a      	cmp	r2, r3
 8012ef0:	d309      	bcc.n	8012f06 <tcp_receive+0x2fa>
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012ef8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012efa:	4413      	add	r3, r2
 8012efc:	b29a      	uxth	r2, r3
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012f04:	e004      	b.n	8012f10 <tcp_receive+0x304>
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012f1c:	429a      	cmp	r2, r3
 8012f1e:	d326      	bcc.n	8012f6e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012f2c:	1ad3      	subs	r3, r2, r3
 8012f2e:	b29a      	uxth	r2, r3
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f40:	4413      	add	r3, r2
 8012f42:	b29a      	uxth	r2, r3
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	d30a      	bcc.n	8012f64 <tcp_receive+0x358>
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f58:	4413      	add	r3, r2
 8012f5a:	b29a      	uxth	r2, r3
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012f62:	e004      	b.n	8012f6e <tcp_receive+0x362>
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f76:	4a98      	ldr	r2, [pc, #608]	; (80131d8 <tcp_receive+0x5cc>)
 8012f78:	6878      	ldr	r0, [r7, #4]
 8012f7a:	f7ff fdcb 	bl	8012b14 <tcp_free_acked_segments>
 8012f7e:	4602      	mov	r2, r0
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f8c:	4a93      	ldr	r2, [pc, #588]	; (80131dc <tcp_receive+0x5d0>)
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f7ff fdc0 	bl	8012b14 <tcp_free_acked_segments>
 8012f94:	4602      	mov	r2, r0
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d104      	bne.n	8012fac <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012fa8:	861a      	strh	r2, [r3, #48]	; 0x30
 8012faa:	e002      	b.n	8012fb2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	2200      	movs	r2, #0
 8012fb0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d103      	bne.n	8012fc8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012fce:	4b84      	ldr	r3, [pc, #528]	; (80131e0 <tcp_receive+0x5d4>)
 8012fd0:	881b      	ldrh	r3, [r3, #0]
 8012fd2:	4413      	add	r3, r2
 8012fd4:	b29a      	uxth	r2, r3
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	8b5b      	ldrh	r3, [r3, #26]
 8012fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d035      	beq.n	8013054 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d118      	bne.n	8013022 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d00c      	beq.n	8013012 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013000:	68db      	ldr	r3, [r3, #12]
 8013002:	685b      	ldr	r3, [r3, #4]
 8013004:	4618      	mov	r0, r3
 8013006:	f7fa ffcf 	bl	800dfa8 <lwip_htonl>
 801300a:	4603      	mov	r3, r0
 801300c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801300e:	2b00      	cmp	r3, #0
 8013010:	dc20      	bgt.n	8013054 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	8b5b      	ldrh	r3, [r3, #26]
 8013016:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801301a:	b29a      	uxth	r2, r3
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013020:	e018      	b.n	8013054 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801302a:	68db      	ldr	r3, [r3, #12]
 801302c:	685b      	ldr	r3, [r3, #4]
 801302e:	4618      	mov	r0, r3
 8013030:	f7fa ffba 	bl	800dfa8 <lwip_htonl>
 8013034:	4603      	mov	r3, r0
 8013036:	1ae3      	subs	r3, r4, r3
 8013038:	2b00      	cmp	r3, #0
 801303a:	dc0b      	bgt.n	8013054 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	8b5b      	ldrh	r3, [r3, #26]
 8013040:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013044:	b29a      	uxth	r2, r3
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801304a:	e003      	b.n	8013054 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801304c:	6878      	ldr	r0, [r7, #4]
 801304e:	f002 fbd1 	bl	80157f4 <tcp_send_empty_ack>
 8013052:	e000      	b.n	8013056 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013054:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801305a:	2b00      	cmp	r3, #0
 801305c:	d05b      	beq.n	8013116 <tcp_receive+0x50a>
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013062:	4b60      	ldr	r3, [pc, #384]	; (80131e4 <tcp_receive+0x5d8>)
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	1ad3      	subs	r3, r2, r3
 8013068:	2b00      	cmp	r3, #0
 801306a:	da54      	bge.n	8013116 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801306c:	4b5e      	ldr	r3, [pc, #376]	; (80131e8 <tcp_receive+0x5dc>)
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	b29a      	uxth	r2, r3
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013076:	b29b      	uxth	r3, r3
 8013078:	1ad3      	subs	r3, r2, r3
 801307a:	b29b      	uxth	r3, r3
 801307c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013080:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801308a:	10db      	asrs	r3, r3, #3
 801308c:	b21b      	sxth	r3, r3
 801308e:	b29b      	uxth	r3, r3
 8013090:	1ad3      	subs	r3, r2, r3
 8013092:	b29b      	uxth	r3, r3
 8013094:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801309e:	b29a      	uxth	r2, r3
 80130a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80130a4:	4413      	add	r3, r2
 80130a6:	b29b      	uxth	r3, r3
 80130a8:	b21a      	sxth	r2, r3
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80130ae:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	da05      	bge.n	80130c2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80130b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80130ba:	425b      	negs	r3, r3
 80130bc:	b29b      	uxth	r3, r3
 80130be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80130c2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80130cc:	109b      	asrs	r3, r3, #2
 80130ce:	b21b      	sxth	r3, r3
 80130d0:	b29b      	uxth	r3, r3
 80130d2:	1ad3      	subs	r3, r2, r3
 80130d4:	b29b      	uxth	r3, r3
 80130d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80130e0:	b29a      	uxth	r2, r3
 80130e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80130e6:	4413      	add	r3, r2
 80130e8:	b29b      	uxth	r3, r3
 80130ea:	b21a      	sxth	r2, r3
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80130f6:	10db      	asrs	r3, r3, #3
 80130f8:	b21b      	sxth	r3, r3
 80130fa:	b29a      	uxth	r2, r3
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013102:	b29b      	uxth	r3, r3
 8013104:	4413      	add	r3, r2
 8013106:	b29b      	uxth	r3, r3
 8013108:	b21a      	sxth	r2, r3
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2200      	movs	r2, #0
 8013114:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013116:	4b35      	ldr	r3, [pc, #212]	; (80131ec <tcp_receive+0x5e0>)
 8013118:	881b      	ldrh	r3, [r3, #0]
 801311a:	2b00      	cmp	r3, #0
 801311c:	f000 84e1 	beq.w	8013ae2 <tcp_receive+0xed6>
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	7d1b      	ldrb	r3, [r3, #20]
 8013124:	2b06      	cmp	r3, #6
 8013126:	f200 84dc 	bhi.w	8013ae2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801312e:	4b30      	ldr	r3, [pc, #192]	; (80131f0 <tcp_receive+0x5e4>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	1ad3      	subs	r3, r2, r3
 8013134:	3b01      	subs	r3, #1
 8013136:	2b00      	cmp	r3, #0
 8013138:	f2c0 808e 	blt.w	8013258 <tcp_receive+0x64c>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013140:	4b2a      	ldr	r3, [pc, #168]	; (80131ec <tcp_receive+0x5e0>)
 8013142:	881b      	ldrh	r3, [r3, #0]
 8013144:	4619      	mov	r1, r3
 8013146:	4b2a      	ldr	r3, [pc, #168]	; (80131f0 <tcp_receive+0x5e4>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	440b      	add	r3, r1
 801314c:	1ad3      	subs	r3, r2, r3
 801314e:	3301      	adds	r3, #1
 8013150:	2b00      	cmp	r3, #0
 8013152:	f300 8081 	bgt.w	8013258 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013156:	4b27      	ldr	r3, [pc, #156]	; (80131f4 <tcp_receive+0x5e8>)
 8013158:	685b      	ldr	r3, [r3, #4]
 801315a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013160:	4b23      	ldr	r3, [pc, #140]	; (80131f0 <tcp_receive+0x5e4>)
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	1ad3      	subs	r3, r2, r3
 8013166:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013168:	4b22      	ldr	r3, [pc, #136]	; (80131f4 <tcp_receive+0x5e8>)
 801316a:	685b      	ldr	r3, [r3, #4]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d106      	bne.n	801317e <tcp_receive+0x572>
 8013170:	4b21      	ldr	r3, [pc, #132]	; (80131f8 <tcp_receive+0x5ec>)
 8013172:	f240 5294 	movw	r2, #1428	; 0x594
 8013176:	4921      	ldr	r1, [pc, #132]	; (80131fc <tcp_receive+0x5f0>)
 8013178:	4821      	ldr	r0, [pc, #132]	; (8013200 <tcp_receive+0x5f4>)
 801317a:	f005 febb 	bl	8018ef4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013180:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013184:	4293      	cmp	r3, r2
 8013186:	d906      	bls.n	8013196 <tcp_receive+0x58a>
 8013188:	4b1b      	ldr	r3, [pc, #108]	; (80131f8 <tcp_receive+0x5ec>)
 801318a:	f240 5295 	movw	r2, #1429	; 0x595
 801318e:	491d      	ldr	r1, [pc, #116]	; (8013204 <tcp_receive+0x5f8>)
 8013190:	481b      	ldr	r0, [pc, #108]	; (8013200 <tcp_receive+0x5f4>)
 8013192:	f005 feaf 	bl	8018ef4 <iprintf>
      off = (u16_t)off32;
 8013196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013198:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801319c:	4b15      	ldr	r3, [pc, #84]	; (80131f4 <tcp_receive+0x5e8>)
 801319e:	685b      	ldr	r3, [r3, #4]
 80131a0:	891b      	ldrh	r3, [r3, #8]
 80131a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80131a6:	429a      	cmp	r2, r3
 80131a8:	d906      	bls.n	80131b8 <tcp_receive+0x5ac>
 80131aa:	4b13      	ldr	r3, [pc, #76]	; (80131f8 <tcp_receive+0x5ec>)
 80131ac:	f240 5297 	movw	r2, #1431	; 0x597
 80131b0:	4915      	ldr	r1, [pc, #84]	; (8013208 <tcp_receive+0x5fc>)
 80131b2:	4813      	ldr	r0, [pc, #76]	; (8013200 <tcp_receive+0x5f4>)
 80131b4:	f005 fe9e 	bl	8018ef4 <iprintf>
      inseg.len -= off;
 80131b8:	4b0e      	ldr	r3, [pc, #56]	; (80131f4 <tcp_receive+0x5e8>)
 80131ba:	891a      	ldrh	r2, [r3, #8]
 80131bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80131c0:	1ad3      	subs	r3, r2, r3
 80131c2:	b29a      	uxth	r2, r3
 80131c4:	4b0b      	ldr	r3, [pc, #44]	; (80131f4 <tcp_receive+0x5e8>)
 80131c6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80131c8:	4b0a      	ldr	r3, [pc, #40]	; (80131f4 <tcp_receive+0x5e8>)
 80131ca:	685b      	ldr	r3, [r3, #4]
 80131cc:	891a      	ldrh	r2, [r3, #8]
 80131ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80131d2:	1ad3      	subs	r3, r2, r3
 80131d4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80131d6:	e029      	b.n	801322c <tcp_receive+0x620>
 80131d8:	0801bb48 	.word	0x0801bb48
 80131dc:	0801bb50 	.word	0x0801bb50
 80131e0:	200006d0 	.word	0x200006d0
 80131e4:	200006cc 	.word	0x200006cc
 80131e8:	200187a0 	.word	0x200187a0
 80131ec:	200006d2 	.word	0x200006d2
 80131f0:	200006c8 	.word	0x200006c8
 80131f4:	200006a8 	.word	0x200006a8
 80131f8:	0801b7e0 	.word	0x0801b7e0
 80131fc:	0801bb58 	.word	0x0801bb58
 8013200:	0801b82c 	.word	0x0801b82c
 8013204:	0801bb68 	.word	0x0801bb68
 8013208:	0801bb78 	.word	0x0801bb78
        off -= p->len;
 801320c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801320e:	895b      	ldrh	r3, [r3, #10]
 8013210:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013214:	1ad3      	subs	r3, r2, r3
 8013216:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801321a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801321c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801321e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013222:	2200      	movs	r2, #0
 8013224:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801322c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801322e:	895b      	ldrh	r3, [r3, #10]
 8013230:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013234:	429a      	cmp	r2, r3
 8013236:	d8e9      	bhi.n	801320c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013238:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801323c:	4619      	mov	r1, r3
 801323e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013240:	f7fc f8da 	bl	800f3f8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013248:	4a91      	ldr	r2, [pc, #580]	; (8013490 <tcp_receive+0x884>)
 801324a:	6013      	str	r3, [r2, #0]
 801324c:	4b91      	ldr	r3, [pc, #580]	; (8013494 <tcp_receive+0x888>)
 801324e:	68db      	ldr	r3, [r3, #12]
 8013250:	4a8f      	ldr	r2, [pc, #572]	; (8013490 <tcp_receive+0x884>)
 8013252:	6812      	ldr	r2, [r2, #0]
 8013254:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013256:	e00d      	b.n	8013274 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013258:	4b8d      	ldr	r3, [pc, #564]	; (8013490 <tcp_receive+0x884>)
 801325a:	681a      	ldr	r2, [r3, #0]
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013260:	1ad3      	subs	r3, r2, r3
 8013262:	2b00      	cmp	r3, #0
 8013264:	da06      	bge.n	8013274 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	8b5b      	ldrh	r3, [r3, #26]
 801326a:	f043 0302 	orr.w	r3, r3, #2
 801326e:	b29a      	uxth	r2, r3
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013274:	4b86      	ldr	r3, [pc, #536]	; (8013490 <tcp_receive+0x884>)
 8013276:	681a      	ldr	r2, [r3, #0]
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801327c:	1ad3      	subs	r3, r2, r3
 801327e:	2b00      	cmp	r3, #0
 8013280:	f2c0 842a 	blt.w	8013ad8 <tcp_receive+0xecc>
 8013284:	4b82      	ldr	r3, [pc, #520]	; (8013490 <tcp_receive+0x884>)
 8013286:	681a      	ldr	r2, [r3, #0]
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801328c:	6879      	ldr	r1, [r7, #4]
 801328e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013290:	440b      	add	r3, r1
 8013292:	1ad3      	subs	r3, r2, r3
 8013294:	3301      	adds	r3, #1
 8013296:	2b00      	cmp	r3, #0
 8013298:	f300 841e 	bgt.w	8013ad8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80132a0:	4b7b      	ldr	r3, [pc, #492]	; (8013490 <tcp_receive+0x884>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	429a      	cmp	r2, r3
 80132a6:	f040 829a 	bne.w	80137de <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80132aa:	4b7a      	ldr	r3, [pc, #488]	; (8013494 <tcp_receive+0x888>)
 80132ac:	891c      	ldrh	r4, [r3, #8]
 80132ae:	4b79      	ldr	r3, [pc, #484]	; (8013494 <tcp_receive+0x888>)
 80132b0:	68db      	ldr	r3, [r3, #12]
 80132b2:	899b      	ldrh	r3, [r3, #12]
 80132b4:	b29b      	uxth	r3, r3
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7fa fe61 	bl	800df7e <lwip_htons>
 80132bc:	4603      	mov	r3, r0
 80132be:	b2db      	uxtb	r3, r3
 80132c0:	f003 0303 	and.w	r3, r3, #3
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d001      	beq.n	80132cc <tcp_receive+0x6c0>
 80132c8:	2301      	movs	r3, #1
 80132ca:	e000      	b.n	80132ce <tcp_receive+0x6c2>
 80132cc:	2300      	movs	r3, #0
 80132ce:	4423      	add	r3, r4
 80132d0:	b29a      	uxth	r2, r3
 80132d2:	4b71      	ldr	r3, [pc, #452]	; (8013498 <tcp_receive+0x88c>)
 80132d4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80132da:	4b6f      	ldr	r3, [pc, #444]	; (8013498 <tcp_receive+0x88c>)
 80132dc:	881b      	ldrh	r3, [r3, #0]
 80132de:	429a      	cmp	r2, r3
 80132e0:	d275      	bcs.n	80133ce <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80132e2:	4b6c      	ldr	r3, [pc, #432]	; (8013494 <tcp_receive+0x888>)
 80132e4:	68db      	ldr	r3, [r3, #12]
 80132e6:	899b      	ldrh	r3, [r3, #12]
 80132e8:	b29b      	uxth	r3, r3
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7fa fe47 	bl	800df7e <lwip_htons>
 80132f0:	4603      	mov	r3, r0
 80132f2:	b2db      	uxtb	r3, r3
 80132f4:	f003 0301 	and.w	r3, r3, #1
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d01f      	beq.n	801333c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80132fc:	4b65      	ldr	r3, [pc, #404]	; (8013494 <tcp_receive+0x888>)
 80132fe:	68db      	ldr	r3, [r3, #12]
 8013300:	899b      	ldrh	r3, [r3, #12]
 8013302:	b29b      	uxth	r3, r3
 8013304:	b21b      	sxth	r3, r3
 8013306:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801330a:	b21c      	sxth	r4, r3
 801330c:	4b61      	ldr	r3, [pc, #388]	; (8013494 <tcp_receive+0x888>)
 801330e:	68db      	ldr	r3, [r3, #12]
 8013310:	899b      	ldrh	r3, [r3, #12]
 8013312:	b29b      	uxth	r3, r3
 8013314:	4618      	mov	r0, r3
 8013316:	f7fa fe32 	bl	800df7e <lwip_htons>
 801331a:	4603      	mov	r3, r0
 801331c:	b2db      	uxtb	r3, r3
 801331e:	b29b      	uxth	r3, r3
 8013320:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013324:	b29b      	uxth	r3, r3
 8013326:	4618      	mov	r0, r3
 8013328:	f7fa fe29 	bl	800df7e <lwip_htons>
 801332c:	4603      	mov	r3, r0
 801332e:	b21b      	sxth	r3, r3
 8013330:	4323      	orrs	r3, r4
 8013332:	b21a      	sxth	r2, r3
 8013334:	4b57      	ldr	r3, [pc, #348]	; (8013494 <tcp_receive+0x888>)
 8013336:	68db      	ldr	r3, [r3, #12]
 8013338:	b292      	uxth	r2, r2
 801333a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013340:	4b54      	ldr	r3, [pc, #336]	; (8013494 <tcp_receive+0x888>)
 8013342:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013344:	4b53      	ldr	r3, [pc, #332]	; (8013494 <tcp_receive+0x888>)
 8013346:	68db      	ldr	r3, [r3, #12]
 8013348:	899b      	ldrh	r3, [r3, #12]
 801334a:	b29b      	uxth	r3, r3
 801334c:	4618      	mov	r0, r3
 801334e:	f7fa fe16 	bl	800df7e <lwip_htons>
 8013352:	4603      	mov	r3, r0
 8013354:	b2db      	uxtb	r3, r3
 8013356:	f003 0302 	and.w	r3, r3, #2
 801335a:	2b00      	cmp	r3, #0
 801335c:	d005      	beq.n	801336a <tcp_receive+0x75e>
            inseg.len -= 1;
 801335e:	4b4d      	ldr	r3, [pc, #308]	; (8013494 <tcp_receive+0x888>)
 8013360:	891b      	ldrh	r3, [r3, #8]
 8013362:	3b01      	subs	r3, #1
 8013364:	b29a      	uxth	r2, r3
 8013366:	4b4b      	ldr	r3, [pc, #300]	; (8013494 <tcp_receive+0x888>)
 8013368:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801336a:	4b4a      	ldr	r3, [pc, #296]	; (8013494 <tcp_receive+0x888>)
 801336c:	685b      	ldr	r3, [r3, #4]
 801336e:	4a49      	ldr	r2, [pc, #292]	; (8013494 <tcp_receive+0x888>)
 8013370:	8912      	ldrh	r2, [r2, #8]
 8013372:	4611      	mov	r1, r2
 8013374:	4618      	mov	r0, r3
 8013376:	f7fb ff3f 	bl	800f1f8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801337a:	4b46      	ldr	r3, [pc, #280]	; (8013494 <tcp_receive+0x888>)
 801337c:	891c      	ldrh	r4, [r3, #8]
 801337e:	4b45      	ldr	r3, [pc, #276]	; (8013494 <tcp_receive+0x888>)
 8013380:	68db      	ldr	r3, [r3, #12]
 8013382:	899b      	ldrh	r3, [r3, #12]
 8013384:	b29b      	uxth	r3, r3
 8013386:	4618      	mov	r0, r3
 8013388:	f7fa fdf9 	bl	800df7e <lwip_htons>
 801338c:	4603      	mov	r3, r0
 801338e:	b2db      	uxtb	r3, r3
 8013390:	f003 0303 	and.w	r3, r3, #3
 8013394:	2b00      	cmp	r3, #0
 8013396:	d001      	beq.n	801339c <tcp_receive+0x790>
 8013398:	2301      	movs	r3, #1
 801339a:	e000      	b.n	801339e <tcp_receive+0x792>
 801339c:	2300      	movs	r3, #0
 801339e:	4423      	add	r3, r4
 80133a0:	b29a      	uxth	r2, r3
 80133a2:	4b3d      	ldr	r3, [pc, #244]	; (8013498 <tcp_receive+0x88c>)
 80133a4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80133a6:	4b3c      	ldr	r3, [pc, #240]	; (8013498 <tcp_receive+0x88c>)
 80133a8:	881b      	ldrh	r3, [r3, #0]
 80133aa:	461a      	mov	r2, r3
 80133ac:	4b38      	ldr	r3, [pc, #224]	; (8013490 <tcp_receive+0x884>)
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	441a      	add	r2, r3
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133b6:	6879      	ldr	r1, [r7, #4]
 80133b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80133ba:	440b      	add	r3, r1
 80133bc:	429a      	cmp	r2, r3
 80133be:	d006      	beq.n	80133ce <tcp_receive+0x7c2>
 80133c0:	4b36      	ldr	r3, [pc, #216]	; (801349c <tcp_receive+0x890>)
 80133c2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80133c6:	4936      	ldr	r1, [pc, #216]	; (80134a0 <tcp_receive+0x894>)
 80133c8:	4836      	ldr	r0, [pc, #216]	; (80134a4 <tcp_receive+0x898>)
 80133ca:	f005 fd93 	bl	8018ef4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	f000 80e7 	beq.w	80135a6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80133d8:	4b2e      	ldr	r3, [pc, #184]	; (8013494 <tcp_receive+0x888>)
 80133da:	68db      	ldr	r3, [r3, #12]
 80133dc:	899b      	ldrh	r3, [r3, #12]
 80133de:	b29b      	uxth	r3, r3
 80133e0:	4618      	mov	r0, r3
 80133e2:	f7fa fdcc 	bl	800df7e <lwip_htons>
 80133e6:	4603      	mov	r3, r0
 80133e8:	b2db      	uxtb	r3, r3
 80133ea:	f003 0301 	and.w	r3, r3, #1
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d010      	beq.n	8013414 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80133f2:	e00a      	b.n	801340a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133f8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133fe:	681a      	ldr	r2, [r3, #0]
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013404:	68f8      	ldr	r0, [r7, #12]
 8013406:	f7fd fce4 	bl	8010dd2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801340e:	2b00      	cmp	r3, #0
 8013410:	d1f0      	bne.n	80133f4 <tcp_receive+0x7e8>
 8013412:	e0c8      	b.n	80135a6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013418:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801341a:	e052      	b.n	80134c2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801341c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801341e:	68db      	ldr	r3, [r3, #12]
 8013420:	899b      	ldrh	r3, [r3, #12]
 8013422:	b29b      	uxth	r3, r3
 8013424:	4618      	mov	r0, r3
 8013426:	f7fa fdaa 	bl	800df7e <lwip_htons>
 801342a:	4603      	mov	r3, r0
 801342c:	b2db      	uxtb	r3, r3
 801342e:	f003 0301 	and.w	r3, r3, #1
 8013432:	2b00      	cmp	r3, #0
 8013434:	d03d      	beq.n	80134b2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013436:	4b17      	ldr	r3, [pc, #92]	; (8013494 <tcp_receive+0x888>)
 8013438:	68db      	ldr	r3, [r3, #12]
 801343a:	899b      	ldrh	r3, [r3, #12]
 801343c:	b29b      	uxth	r3, r3
 801343e:	4618      	mov	r0, r3
 8013440:	f7fa fd9d 	bl	800df7e <lwip_htons>
 8013444:	4603      	mov	r3, r0
 8013446:	b2db      	uxtb	r3, r3
 8013448:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801344c:	2b00      	cmp	r3, #0
 801344e:	d130      	bne.n	80134b2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013450:	4b10      	ldr	r3, [pc, #64]	; (8013494 <tcp_receive+0x888>)
 8013452:	68db      	ldr	r3, [r3, #12]
 8013454:	899b      	ldrh	r3, [r3, #12]
 8013456:	b29c      	uxth	r4, r3
 8013458:	2001      	movs	r0, #1
 801345a:	f7fa fd90 	bl	800df7e <lwip_htons>
 801345e:	4603      	mov	r3, r0
 8013460:	461a      	mov	r2, r3
 8013462:	4b0c      	ldr	r3, [pc, #48]	; (8013494 <tcp_receive+0x888>)
 8013464:	68db      	ldr	r3, [r3, #12]
 8013466:	4322      	orrs	r2, r4
 8013468:	b292      	uxth	r2, r2
 801346a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801346c:	4b09      	ldr	r3, [pc, #36]	; (8013494 <tcp_receive+0x888>)
 801346e:	891c      	ldrh	r4, [r3, #8]
 8013470:	4b08      	ldr	r3, [pc, #32]	; (8013494 <tcp_receive+0x888>)
 8013472:	68db      	ldr	r3, [r3, #12]
 8013474:	899b      	ldrh	r3, [r3, #12]
 8013476:	b29b      	uxth	r3, r3
 8013478:	4618      	mov	r0, r3
 801347a:	f7fa fd80 	bl	800df7e <lwip_htons>
 801347e:	4603      	mov	r3, r0
 8013480:	b2db      	uxtb	r3, r3
 8013482:	f003 0303 	and.w	r3, r3, #3
 8013486:	2b00      	cmp	r3, #0
 8013488:	d00e      	beq.n	80134a8 <tcp_receive+0x89c>
 801348a:	2301      	movs	r3, #1
 801348c:	e00d      	b.n	80134aa <tcp_receive+0x89e>
 801348e:	bf00      	nop
 8013490:	200006c8 	.word	0x200006c8
 8013494:	200006a8 	.word	0x200006a8
 8013498:	200006d2 	.word	0x200006d2
 801349c:	0801b7e0 	.word	0x0801b7e0
 80134a0:	0801bb88 	.word	0x0801bb88
 80134a4:	0801b82c 	.word	0x0801b82c
 80134a8:	2300      	movs	r3, #0
 80134aa:	4423      	add	r3, r4
 80134ac:	b29a      	uxth	r2, r3
 80134ae:	4b98      	ldr	r3, [pc, #608]	; (8013710 <tcp_receive+0xb04>)
 80134b0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80134b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134b4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80134b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80134bc:	6938      	ldr	r0, [r7, #16]
 80134be:	f7fd fc88 	bl	8010dd2 <tcp_seg_free>
            while (next &&
 80134c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d00e      	beq.n	80134e6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80134c8:	4b91      	ldr	r3, [pc, #580]	; (8013710 <tcp_receive+0xb04>)
 80134ca:	881b      	ldrh	r3, [r3, #0]
 80134cc:	461a      	mov	r2, r3
 80134ce:	4b91      	ldr	r3, [pc, #580]	; (8013714 <tcp_receive+0xb08>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	441a      	add	r2, r3
 80134d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134d6:	68db      	ldr	r3, [r3, #12]
 80134d8:	685b      	ldr	r3, [r3, #4]
 80134da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80134dc:	8909      	ldrh	r1, [r1, #8]
 80134de:	440b      	add	r3, r1
 80134e0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	da9a      	bge.n	801341c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80134e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d059      	beq.n	80135a0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80134ec:	4b88      	ldr	r3, [pc, #544]	; (8013710 <tcp_receive+0xb04>)
 80134ee:	881b      	ldrh	r3, [r3, #0]
 80134f0:	461a      	mov	r2, r3
 80134f2:	4b88      	ldr	r3, [pc, #544]	; (8013714 <tcp_receive+0xb08>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	441a      	add	r2, r3
 80134f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134fa:	68db      	ldr	r3, [r3, #12]
 80134fc:	685b      	ldr	r3, [r3, #4]
 80134fe:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013500:	2b00      	cmp	r3, #0
 8013502:	dd4d      	ble.n	80135a0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013506:	68db      	ldr	r3, [r3, #12]
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	b29a      	uxth	r2, r3
 801350c:	4b81      	ldr	r3, [pc, #516]	; (8013714 <tcp_receive+0xb08>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	b29b      	uxth	r3, r3
 8013512:	1ad3      	subs	r3, r2, r3
 8013514:	b29a      	uxth	r2, r3
 8013516:	4b80      	ldr	r3, [pc, #512]	; (8013718 <tcp_receive+0xb0c>)
 8013518:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801351a:	4b7f      	ldr	r3, [pc, #508]	; (8013718 <tcp_receive+0xb0c>)
 801351c:	68db      	ldr	r3, [r3, #12]
 801351e:	899b      	ldrh	r3, [r3, #12]
 8013520:	b29b      	uxth	r3, r3
 8013522:	4618      	mov	r0, r3
 8013524:	f7fa fd2b 	bl	800df7e <lwip_htons>
 8013528:	4603      	mov	r3, r0
 801352a:	b2db      	uxtb	r3, r3
 801352c:	f003 0302 	and.w	r3, r3, #2
 8013530:	2b00      	cmp	r3, #0
 8013532:	d005      	beq.n	8013540 <tcp_receive+0x934>
                inseg.len -= 1;
 8013534:	4b78      	ldr	r3, [pc, #480]	; (8013718 <tcp_receive+0xb0c>)
 8013536:	891b      	ldrh	r3, [r3, #8]
 8013538:	3b01      	subs	r3, #1
 801353a:	b29a      	uxth	r2, r3
 801353c:	4b76      	ldr	r3, [pc, #472]	; (8013718 <tcp_receive+0xb0c>)
 801353e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013540:	4b75      	ldr	r3, [pc, #468]	; (8013718 <tcp_receive+0xb0c>)
 8013542:	685b      	ldr	r3, [r3, #4]
 8013544:	4a74      	ldr	r2, [pc, #464]	; (8013718 <tcp_receive+0xb0c>)
 8013546:	8912      	ldrh	r2, [r2, #8]
 8013548:	4611      	mov	r1, r2
 801354a:	4618      	mov	r0, r3
 801354c:	f7fb fe54 	bl	800f1f8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013550:	4b71      	ldr	r3, [pc, #452]	; (8013718 <tcp_receive+0xb0c>)
 8013552:	891c      	ldrh	r4, [r3, #8]
 8013554:	4b70      	ldr	r3, [pc, #448]	; (8013718 <tcp_receive+0xb0c>)
 8013556:	68db      	ldr	r3, [r3, #12]
 8013558:	899b      	ldrh	r3, [r3, #12]
 801355a:	b29b      	uxth	r3, r3
 801355c:	4618      	mov	r0, r3
 801355e:	f7fa fd0e 	bl	800df7e <lwip_htons>
 8013562:	4603      	mov	r3, r0
 8013564:	b2db      	uxtb	r3, r3
 8013566:	f003 0303 	and.w	r3, r3, #3
 801356a:	2b00      	cmp	r3, #0
 801356c:	d001      	beq.n	8013572 <tcp_receive+0x966>
 801356e:	2301      	movs	r3, #1
 8013570:	e000      	b.n	8013574 <tcp_receive+0x968>
 8013572:	2300      	movs	r3, #0
 8013574:	4423      	add	r3, r4
 8013576:	b29a      	uxth	r2, r3
 8013578:	4b65      	ldr	r3, [pc, #404]	; (8013710 <tcp_receive+0xb04>)
 801357a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801357c:	4b64      	ldr	r3, [pc, #400]	; (8013710 <tcp_receive+0xb04>)
 801357e:	881b      	ldrh	r3, [r3, #0]
 8013580:	461a      	mov	r2, r3
 8013582:	4b64      	ldr	r3, [pc, #400]	; (8013714 <tcp_receive+0xb08>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	441a      	add	r2, r3
 8013588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801358a:	68db      	ldr	r3, [r3, #12]
 801358c:	685b      	ldr	r3, [r3, #4]
 801358e:	429a      	cmp	r2, r3
 8013590:	d006      	beq.n	80135a0 <tcp_receive+0x994>
 8013592:	4b62      	ldr	r3, [pc, #392]	; (801371c <tcp_receive+0xb10>)
 8013594:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013598:	4961      	ldr	r1, [pc, #388]	; (8013720 <tcp_receive+0xb14>)
 801359a:	4862      	ldr	r0, [pc, #392]	; (8013724 <tcp_receive+0xb18>)
 801359c:	f005 fcaa 	bl	8018ef4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80135a4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80135a6:	4b5a      	ldr	r3, [pc, #360]	; (8013710 <tcp_receive+0xb04>)
 80135a8:	881b      	ldrh	r3, [r3, #0]
 80135aa:	461a      	mov	r2, r3
 80135ac:	4b59      	ldr	r3, [pc, #356]	; (8013714 <tcp_receive+0xb08>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	441a      	add	r2, r3
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80135ba:	4b55      	ldr	r3, [pc, #340]	; (8013710 <tcp_receive+0xb04>)
 80135bc:	881b      	ldrh	r3, [r3, #0]
 80135be:	429a      	cmp	r2, r3
 80135c0:	d206      	bcs.n	80135d0 <tcp_receive+0x9c4>
 80135c2:	4b56      	ldr	r3, [pc, #344]	; (801371c <tcp_receive+0xb10>)
 80135c4:	f240 6207 	movw	r2, #1543	; 0x607
 80135c8:	4957      	ldr	r1, [pc, #348]	; (8013728 <tcp_receive+0xb1c>)
 80135ca:	4856      	ldr	r0, [pc, #344]	; (8013724 <tcp_receive+0xb18>)
 80135cc:	f005 fc92 	bl	8018ef4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80135d4:	4b4e      	ldr	r3, [pc, #312]	; (8013710 <tcp_receive+0xb04>)
 80135d6:	881b      	ldrh	r3, [r3, #0]
 80135d8:	1ad3      	subs	r3, r2, r3
 80135da:	b29a      	uxth	r2, r3
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80135e0:	6878      	ldr	r0, [r7, #4]
 80135e2:	f7fc fdb5 	bl	8010150 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80135e6:	4b4c      	ldr	r3, [pc, #304]	; (8013718 <tcp_receive+0xb0c>)
 80135e8:	685b      	ldr	r3, [r3, #4]
 80135ea:	891b      	ldrh	r3, [r3, #8]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d006      	beq.n	80135fe <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80135f0:	4b49      	ldr	r3, [pc, #292]	; (8013718 <tcp_receive+0xb0c>)
 80135f2:	685b      	ldr	r3, [r3, #4]
 80135f4:	4a4d      	ldr	r2, [pc, #308]	; (801372c <tcp_receive+0xb20>)
 80135f6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80135f8:	4b47      	ldr	r3, [pc, #284]	; (8013718 <tcp_receive+0xb0c>)
 80135fa:	2200      	movs	r2, #0
 80135fc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80135fe:	4b46      	ldr	r3, [pc, #280]	; (8013718 <tcp_receive+0xb0c>)
 8013600:	68db      	ldr	r3, [r3, #12]
 8013602:	899b      	ldrh	r3, [r3, #12]
 8013604:	b29b      	uxth	r3, r3
 8013606:	4618      	mov	r0, r3
 8013608:	f7fa fcb9 	bl	800df7e <lwip_htons>
 801360c:	4603      	mov	r3, r0
 801360e:	b2db      	uxtb	r3, r3
 8013610:	f003 0301 	and.w	r3, r3, #1
 8013614:	2b00      	cmp	r3, #0
 8013616:	f000 80b8 	beq.w	801378a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801361a:	4b45      	ldr	r3, [pc, #276]	; (8013730 <tcp_receive+0xb24>)
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	f043 0320 	orr.w	r3, r3, #32
 8013622:	b2da      	uxtb	r2, r3
 8013624:	4b42      	ldr	r3, [pc, #264]	; (8013730 <tcp_receive+0xb24>)
 8013626:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013628:	e0af      	b.n	801378a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801362e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013634:	68db      	ldr	r3, [r3, #12]
 8013636:	685b      	ldr	r3, [r3, #4]
 8013638:	4a36      	ldr	r2, [pc, #216]	; (8013714 <tcp_receive+0xb08>)
 801363a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	891b      	ldrh	r3, [r3, #8]
 8013640:	461c      	mov	r4, r3
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	68db      	ldr	r3, [r3, #12]
 8013646:	899b      	ldrh	r3, [r3, #12]
 8013648:	b29b      	uxth	r3, r3
 801364a:	4618      	mov	r0, r3
 801364c:	f7fa fc97 	bl	800df7e <lwip_htons>
 8013650:	4603      	mov	r3, r0
 8013652:	b2db      	uxtb	r3, r3
 8013654:	f003 0303 	and.w	r3, r3, #3
 8013658:	2b00      	cmp	r3, #0
 801365a:	d001      	beq.n	8013660 <tcp_receive+0xa54>
 801365c:	2301      	movs	r3, #1
 801365e:	e000      	b.n	8013662 <tcp_receive+0xa56>
 8013660:	2300      	movs	r3, #0
 8013662:	191a      	adds	r2, r3, r4
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013668:	441a      	add	r2, r3
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013672:	461c      	mov	r4, r3
 8013674:	68bb      	ldr	r3, [r7, #8]
 8013676:	891b      	ldrh	r3, [r3, #8]
 8013678:	461d      	mov	r5, r3
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	68db      	ldr	r3, [r3, #12]
 801367e:	899b      	ldrh	r3, [r3, #12]
 8013680:	b29b      	uxth	r3, r3
 8013682:	4618      	mov	r0, r3
 8013684:	f7fa fc7b 	bl	800df7e <lwip_htons>
 8013688:	4603      	mov	r3, r0
 801368a:	b2db      	uxtb	r3, r3
 801368c:	f003 0303 	and.w	r3, r3, #3
 8013690:	2b00      	cmp	r3, #0
 8013692:	d001      	beq.n	8013698 <tcp_receive+0xa8c>
 8013694:	2301      	movs	r3, #1
 8013696:	e000      	b.n	801369a <tcp_receive+0xa8e>
 8013698:	2300      	movs	r3, #0
 801369a:	442b      	add	r3, r5
 801369c:	429c      	cmp	r4, r3
 801369e:	d206      	bcs.n	80136ae <tcp_receive+0xaa2>
 80136a0:	4b1e      	ldr	r3, [pc, #120]	; (801371c <tcp_receive+0xb10>)
 80136a2:	f240 622b 	movw	r2, #1579	; 0x62b
 80136a6:	4923      	ldr	r1, [pc, #140]	; (8013734 <tcp_receive+0xb28>)
 80136a8:	481e      	ldr	r0, [pc, #120]	; (8013724 <tcp_receive+0xb18>)
 80136aa:	f005 fc23 	bl	8018ef4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	891b      	ldrh	r3, [r3, #8]
 80136b2:	461c      	mov	r4, r3
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	68db      	ldr	r3, [r3, #12]
 80136b8:	899b      	ldrh	r3, [r3, #12]
 80136ba:	b29b      	uxth	r3, r3
 80136bc:	4618      	mov	r0, r3
 80136be:	f7fa fc5e 	bl	800df7e <lwip_htons>
 80136c2:	4603      	mov	r3, r0
 80136c4:	b2db      	uxtb	r3, r3
 80136c6:	f003 0303 	and.w	r3, r3, #3
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d001      	beq.n	80136d2 <tcp_receive+0xac6>
 80136ce:	2301      	movs	r3, #1
 80136d0:	e000      	b.n	80136d4 <tcp_receive+0xac8>
 80136d2:	2300      	movs	r3, #0
 80136d4:	1919      	adds	r1, r3, r4
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80136da:	b28b      	uxth	r3, r1
 80136dc:	1ad3      	subs	r3, r2, r3
 80136de:	b29a      	uxth	r2, r3
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80136e4:	6878      	ldr	r0, [r7, #4]
 80136e6:	f7fc fd33 	bl	8010150 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80136ea:	68bb      	ldr	r3, [r7, #8]
 80136ec:	685b      	ldr	r3, [r3, #4]
 80136ee:	891b      	ldrh	r3, [r3, #8]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d028      	beq.n	8013746 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80136f4:	4b0d      	ldr	r3, [pc, #52]	; (801372c <tcp_receive+0xb20>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d01d      	beq.n	8013738 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80136fc:	4b0b      	ldr	r3, [pc, #44]	; (801372c <tcp_receive+0xb20>)
 80136fe:	681a      	ldr	r2, [r3, #0]
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	685b      	ldr	r3, [r3, #4]
 8013704:	4619      	mov	r1, r3
 8013706:	4610      	mov	r0, r2
 8013708:	f7fb ffbe 	bl	800f688 <pbuf_cat>
 801370c:	e018      	b.n	8013740 <tcp_receive+0xb34>
 801370e:	bf00      	nop
 8013710:	200006d2 	.word	0x200006d2
 8013714:	200006c8 	.word	0x200006c8
 8013718:	200006a8 	.word	0x200006a8
 801371c:	0801b7e0 	.word	0x0801b7e0
 8013720:	0801bbc0 	.word	0x0801bbc0
 8013724:	0801b82c 	.word	0x0801b82c
 8013728:	0801bbfc 	.word	0x0801bbfc
 801372c:	200006d8 	.word	0x200006d8
 8013730:	200006d5 	.word	0x200006d5
 8013734:	0801bc1c 	.word	0x0801bc1c
            } else {
              recv_data = cseg->p;
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	685b      	ldr	r3, [r3, #4]
 801373c:	4a70      	ldr	r2, [pc, #448]	; (8013900 <tcp_receive+0xcf4>)
 801373e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013740:	68bb      	ldr	r3, [r7, #8]
 8013742:	2200      	movs	r2, #0
 8013744:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	68db      	ldr	r3, [r3, #12]
 801374a:	899b      	ldrh	r3, [r3, #12]
 801374c:	b29b      	uxth	r3, r3
 801374e:	4618      	mov	r0, r3
 8013750:	f7fa fc15 	bl	800df7e <lwip_htons>
 8013754:	4603      	mov	r3, r0
 8013756:	b2db      	uxtb	r3, r3
 8013758:	f003 0301 	and.w	r3, r3, #1
 801375c:	2b00      	cmp	r3, #0
 801375e:	d00d      	beq.n	801377c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013760:	4b68      	ldr	r3, [pc, #416]	; (8013904 <tcp_receive+0xcf8>)
 8013762:	781b      	ldrb	r3, [r3, #0]
 8013764:	f043 0320 	orr.w	r3, r3, #32
 8013768:	b2da      	uxtb	r2, r3
 801376a:	4b66      	ldr	r3, [pc, #408]	; (8013904 <tcp_receive+0xcf8>)
 801376c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	7d1b      	ldrb	r3, [r3, #20]
 8013772:	2b04      	cmp	r3, #4
 8013774:	d102      	bne.n	801377c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	2207      	movs	r2, #7
 801377a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	681a      	ldr	r2, [r3, #0]
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8013784:	68b8      	ldr	r0, [r7, #8]
 8013786:	f7fd fb24 	bl	8010dd2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801378e:	2b00      	cmp	r3, #0
 8013790:	d008      	beq.n	80137a4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013796:	68db      	ldr	r3, [r3, #12]
 8013798:	685a      	ldr	r2, [r3, #4]
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801379e:	429a      	cmp	r2, r3
 80137a0:	f43f af43 	beq.w	801362a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	8b5b      	ldrh	r3, [r3, #26]
 80137a8:	f003 0301 	and.w	r3, r3, #1
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d00e      	beq.n	80137ce <tcp_receive+0xbc2>
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	8b5b      	ldrh	r3, [r3, #26]
 80137b4:	f023 0301 	bic.w	r3, r3, #1
 80137b8:	b29a      	uxth	r2, r3
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	835a      	strh	r2, [r3, #26]
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	8b5b      	ldrh	r3, [r3, #26]
 80137c2:	f043 0302 	orr.w	r3, r3, #2
 80137c6:	b29a      	uxth	r2, r3
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80137cc:	e188      	b.n	8013ae0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	8b5b      	ldrh	r3, [r3, #26]
 80137d2:	f043 0301 	orr.w	r3, r3, #1
 80137d6:	b29a      	uxth	r2, r3
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80137dc:	e180      	b.n	8013ae0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d106      	bne.n	80137f4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80137e6:	4848      	ldr	r0, [pc, #288]	; (8013908 <tcp_receive+0xcfc>)
 80137e8:	f7fd fb0c 	bl	8010e04 <tcp_seg_copy>
 80137ec:	4602      	mov	r2, r0
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	675a      	str	r2, [r3, #116]	; 0x74
 80137f2:	e16d      	b.n	8013ad0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80137f4:	2300      	movs	r3, #0
 80137f6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80137fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80137fe:	e157      	b.n	8013ab0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8013800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013802:	68db      	ldr	r3, [r3, #12]
 8013804:	685a      	ldr	r2, [r3, #4]
 8013806:	4b41      	ldr	r3, [pc, #260]	; (801390c <tcp_receive+0xd00>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	429a      	cmp	r2, r3
 801380c:	d11d      	bne.n	801384a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801380e:	4b3e      	ldr	r3, [pc, #248]	; (8013908 <tcp_receive+0xcfc>)
 8013810:	891a      	ldrh	r2, [r3, #8]
 8013812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013814:	891b      	ldrh	r3, [r3, #8]
 8013816:	429a      	cmp	r2, r3
 8013818:	f240 814f 	bls.w	8013aba <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801381c:	483a      	ldr	r0, [pc, #232]	; (8013908 <tcp_receive+0xcfc>)
 801381e:	f7fd faf1 	bl	8010e04 <tcp_seg_copy>
 8013822:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013824:	697b      	ldr	r3, [r7, #20]
 8013826:	2b00      	cmp	r3, #0
 8013828:	f000 8149 	beq.w	8013abe <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801382c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801382e:	2b00      	cmp	r3, #0
 8013830:	d003      	beq.n	801383a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8013832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013834:	697a      	ldr	r2, [r7, #20]
 8013836:	601a      	str	r2, [r3, #0]
 8013838:	e002      	b.n	8013840 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	697a      	ldr	r2, [r7, #20]
 801383e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013840:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013842:	6978      	ldr	r0, [r7, #20]
 8013844:	f7ff f8de 	bl	8012a04 <tcp_oos_insert_segment>
                }
                break;
 8013848:	e139      	b.n	8013abe <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801384a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801384c:	2b00      	cmp	r3, #0
 801384e:	d117      	bne.n	8013880 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013850:	4b2e      	ldr	r3, [pc, #184]	; (801390c <tcp_receive+0xd00>)
 8013852:	681a      	ldr	r2, [r3, #0]
 8013854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013856:	68db      	ldr	r3, [r3, #12]
 8013858:	685b      	ldr	r3, [r3, #4]
 801385a:	1ad3      	subs	r3, r2, r3
 801385c:	2b00      	cmp	r3, #0
 801385e:	da57      	bge.n	8013910 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013860:	4829      	ldr	r0, [pc, #164]	; (8013908 <tcp_receive+0xcfc>)
 8013862:	f7fd facf 	bl	8010e04 <tcp_seg_copy>
 8013866:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013868:	69bb      	ldr	r3, [r7, #24]
 801386a:	2b00      	cmp	r3, #0
 801386c:	f000 8129 	beq.w	8013ac2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	69ba      	ldr	r2, [r7, #24]
 8013874:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013876:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013878:	69b8      	ldr	r0, [r7, #24]
 801387a:	f7ff f8c3 	bl	8012a04 <tcp_oos_insert_segment>
                  }
                  break;
 801387e:	e120      	b.n	8013ac2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013880:	4b22      	ldr	r3, [pc, #136]	; (801390c <tcp_receive+0xd00>)
 8013882:	681a      	ldr	r2, [r3, #0]
 8013884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013886:	68db      	ldr	r3, [r3, #12]
 8013888:	685b      	ldr	r3, [r3, #4]
 801388a:	1ad3      	subs	r3, r2, r3
 801388c:	3b01      	subs	r3, #1
 801388e:	2b00      	cmp	r3, #0
 8013890:	db3e      	blt.n	8013910 <tcp_receive+0xd04>
 8013892:	4b1e      	ldr	r3, [pc, #120]	; (801390c <tcp_receive+0xd00>)
 8013894:	681a      	ldr	r2, [r3, #0]
 8013896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013898:	68db      	ldr	r3, [r3, #12]
 801389a:	685b      	ldr	r3, [r3, #4]
 801389c:	1ad3      	subs	r3, r2, r3
 801389e:	3301      	adds	r3, #1
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	dc35      	bgt.n	8013910 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80138a4:	4818      	ldr	r0, [pc, #96]	; (8013908 <tcp_receive+0xcfc>)
 80138a6:	f7fd faad 	bl	8010e04 <tcp_seg_copy>
 80138aa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80138ac:	69fb      	ldr	r3, [r7, #28]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	f000 8109 	beq.w	8013ac6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80138b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138b6:	68db      	ldr	r3, [r3, #12]
 80138b8:	685b      	ldr	r3, [r3, #4]
 80138ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80138bc:	8912      	ldrh	r2, [r2, #8]
 80138be:	441a      	add	r2, r3
 80138c0:	4b12      	ldr	r3, [pc, #72]	; (801390c <tcp_receive+0xd00>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	1ad3      	subs	r3, r2, r3
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	dd12      	ble.n	80138f0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80138ca:	4b10      	ldr	r3, [pc, #64]	; (801390c <tcp_receive+0xd00>)
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	b29a      	uxth	r2, r3
 80138d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138d2:	68db      	ldr	r3, [r3, #12]
 80138d4:	685b      	ldr	r3, [r3, #4]
 80138d6:	b29b      	uxth	r3, r3
 80138d8:	1ad3      	subs	r3, r2, r3
 80138da:	b29a      	uxth	r2, r3
 80138dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138de:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80138e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138e2:	685a      	ldr	r2, [r3, #4]
 80138e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138e6:	891b      	ldrh	r3, [r3, #8]
 80138e8:	4619      	mov	r1, r3
 80138ea:	4610      	mov	r0, r2
 80138ec:	f7fb fc84 	bl	800f1f8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80138f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138f2:	69fa      	ldr	r2, [r7, #28]
 80138f4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80138f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80138f8:	69f8      	ldr	r0, [r7, #28]
 80138fa:	f7ff f883 	bl	8012a04 <tcp_oos_insert_segment>
                  }
                  break;
 80138fe:	e0e2      	b.n	8013ac6 <tcp_receive+0xeba>
 8013900:	200006d8 	.word	0x200006d8
 8013904:	200006d5 	.word	0x200006d5
 8013908:	200006a8 	.word	0x200006a8
 801390c:	200006c8 	.word	0x200006c8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013912:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	2b00      	cmp	r3, #0
 801391a:	f040 80c6 	bne.w	8013aaa <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801391e:	4b80      	ldr	r3, [pc, #512]	; (8013b20 <tcp_receive+0xf14>)
 8013920:	681a      	ldr	r2, [r3, #0]
 8013922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013924:	68db      	ldr	r3, [r3, #12]
 8013926:	685b      	ldr	r3, [r3, #4]
 8013928:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801392a:	2b00      	cmp	r3, #0
 801392c:	f340 80bd 	ble.w	8013aaa <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013932:	68db      	ldr	r3, [r3, #12]
 8013934:	899b      	ldrh	r3, [r3, #12]
 8013936:	b29b      	uxth	r3, r3
 8013938:	4618      	mov	r0, r3
 801393a:	f7fa fb20 	bl	800df7e <lwip_htons>
 801393e:	4603      	mov	r3, r0
 8013940:	b2db      	uxtb	r3, r3
 8013942:	f003 0301 	and.w	r3, r3, #1
 8013946:	2b00      	cmp	r3, #0
 8013948:	f040 80bf 	bne.w	8013aca <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801394c:	4875      	ldr	r0, [pc, #468]	; (8013b24 <tcp_receive+0xf18>)
 801394e:	f7fd fa59 	bl	8010e04 <tcp_seg_copy>
 8013952:	4602      	mov	r2, r0
 8013954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013956:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	2b00      	cmp	r3, #0
 801395e:	f000 80b6 	beq.w	8013ace <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013964:	68db      	ldr	r3, [r3, #12]
 8013966:	685b      	ldr	r3, [r3, #4]
 8013968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801396a:	8912      	ldrh	r2, [r2, #8]
 801396c:	441a      	add	r2, r3
 801396e:	4b6c      	ldr	r3, [pc, #432]	; (8013b20 <tcp_receive+0xf14>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	1ad3      	subs	r3, r2, r3
 8013974:	2b00      	cmp	r3, #0
 8013976:	dd12      	ble.n	801399e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013978:	4b69      	ldr	r3, [pc, #420]	; (8013b20 <tcp_receive+0xf14>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	b29a      	uxth	r2, r3
 801397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013980:	68db      	ldr	r3, [r3, #12]
 8013982:	685b      	ldr	r3, [r3, #4]
 8013984:	b29b      	uxth	r3, r3
 8013986:	1ad3      	subs	r3, r2, r3
 8013988:	b29a      	uxth	r2, r3
 801398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801398c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013990:	685a      	ldr	r2, [r3, #4]
 8013992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013994:	891b      	ldrh	r3, [r3, #8]
 8013996:	4619      	mov	r1, r3
 8013998:	4610      	mov	r0, r2
 801399a:	f7fb fc2d 	bl	800f1f8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801399e:	4b62      	ldr	r3, [pc, #392]	; (8013b28 <tcp_receive+0xf1c>)
 80139a0:	881b      	ldrh	r3, [r3, #0]
 80139a2:	461a      	mov	r2, r3
 80139a4:	4b5e      	ldr	r3, [pc, #376]	; (8013b20 <tcp_receive+0xf14>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	441a      	add	r2, r3
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139ae:	6879      	ldr	r1, [r7, #4]
 80139b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80139b2:	440b      	add	r3, r1
 80139b4:	1ad3      	subs	r3, r2, r3
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	f340 8089 	ble.w	8013ace <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80139bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	68db      	ldr	r3, [r3, #12]
 80139c2:	899b      	ldrh	r3, [r3, #12]
 80139c4:	b29b      	uxth	r3, r3
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7fa fad9 	bl	800df7e <lwip_htons>
 80139cc:	4603      	mov	r3, r0
 80139ce:	b2db      	uxtb	r3, r3
 80139d0:	f003 0301 	and.w	r3, r3, #1
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d022      	beq.n	8013a1e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80139d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	68db      	ldr	r3, [r3, #12]
 80139de:	899b      	ldrh	r3, [r3, #12]
 80139e0:	b29b      	uxth	r3, r3
 80139e2:	b21b      	sxth	r3, r3
 80139e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80139e8:	b21c      	sxth	r4, r3
 80139ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	68db      	ldr	r3, [r3, #12]
 80139f0:	899b      	ldrh	r3, [r3, #12]
 80139f2:	b29b      	uxth	r3, r3
 80139f4:	4618      	mov	r0, r3
 80139f6:	f7fa fac2 	bl	800df7e <lwip_htons>
 80139fa:	4603      	mov	r3, r0
 80139fc:	b2db      	uxtb	r3, r3
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013a04:	b29b      	uxth	r3, r3
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7fa fab9 	bl	800df7e <lwip_htons>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	b21b      	sxth	r3, r3
 8013a10:	4323      	orrs	r3, r4
 8013a12:	b21a      	sxth	r2, r3
 8013a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	68db      	ldr	r3, [r3, #12]
 8013a1a:	b292      	uxth	r2, r2
 8013a1c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a22:	b29a      	uxth	r2, r3
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013a28:	4413      	add	r3, r2
 8013a2a:	b299      	uxth	r1, r3
 8013a2c:	4b3c      	ldr	r3, [pc, #240]	; (8013b20 <tcp_receive+0xf14>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	b29a      	uxth	r2, r3
 8013a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	1a8a      	subs	r2, r1, r2
 8013a38:	b292      	uxth	r2, r2
 8013a3a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	685a      	ldr	r2, [r3, #4]
 8013a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	891b      	ldrh	r3, [r3, #8]
 8013a48:	4619      	mov	r1, r3
 8013a4a:	4610      	mov	r0, r2
 8013a4c:	f7fb fbd4 	bl	800f1f8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	891c      	ldrh	r4, [r3, #8]
 8013a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	68db      	ldr	r3, [r3, #12]
 8013a5c:	899b      	ldrh	r3, [r3, #12]
 8013a5e:	b29b      	uxth	r3, r3
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7fa fa8c 	bl	800df7e <lwip_htons>
 8013a66:	4603      	mov	r3, r0
 8013a68:	b2db      	uxtb	r3, r3
 8013a6a:	f003 0303 	and.w	r3, r3, #3
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d001      	beq.n	8013a76 <tcp_receive+0xe6a>
 8013a72:	2301      	movs	r3, #1
 8013a74:	e000      	b.n	8013a78 <tcp_receive+0xe6c>
 8013a76:	2300      	movs	r3, #0
 8013a78:	4423      	add	r3, r4
 8013a7a:	b29a      	uxth	r2, r3
 8013a7c:	4b2a      	ldr	r3, [pc, #168]	; (8013b28 <tcp_receive+0xf1c>)
 8013a7e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013a80:	4b29      	ldr	r3, [pc, #164]	; (8013b28 <tcp_receive+0xf1c>)
 8013a82:	881b      	ldrh	r3, [r3, #0]
 8013a84:	461a      	mov	r2, r3
 8013a86:	4b26      	ldr	r3, [pc, #152]	; (8013b20 <tcp_receive+0xf14>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	441a      	add	r2, r3
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a90:	6879      	ldr	r1, [r7, #4]
 8013a92:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013a94:	440b      	add	r3, r1
 8013a96:	429a      	cmp	r2, r3
 8013a98:	d019      	beq.n	8013ace <tcp_receive+0xec2>
 8013a9a:	4b24      	ldr	r3, [pc, #144]	; (8013b2c <tcp_receive+0xf20>)
 8013a9c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8013aa0:	4923      	ldr	r1, [pc, #140]	; (8013b30 <tcp_receive+0xf24>)
 8013aa2:	4824      	ldr	r0, [pc, #144]	; (8013b34 <tcp_receive+0xf28>)
 8013aa4:	f005 fa26 	bl	8018ef4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013aa8:	e011      	b.n	8013ace <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8013ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	f47f aea4 	bne.w	8013800 <tcp_receive+0xbf4>
 8013ab8:	e00a      	b.n	8013ad0 <tcp_receive+0xec4>
                break;
 8013aba:	bf00      	nop
 8013abc:	e008      	b.n	8013ad0 <tcp_receive+0xec4>
                break;
 8013abe:	bf00      	nop
 8013ac0:	e006      	b.n	8013ad0 <tcp_receive+0xec4>
                  break;
 8013ac2:	bf00      	nop
 8013ac4:	e004      	b.n	8013ad0 <tcp_receive+0xec4>
                  break;
 8013ac6:	bf00      	nop
 8013ac8:	e002      	b.n	8013ad0 <tcp_receive+0xec4>
                  break;
 8013aca:	bf00      	nop
 8013acc:	e000      	b.n	8013ad0 <tcp_receive+0xec4>
                break;
 8013ace:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013ad0:	6878      	ldr	r0, [r7, #4]
 8013ad2:	f001 fe8f 	bl	80157f4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013ad6:	e003      	b.n	8013ae0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f001 fe8b 	bl	80157f4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013ade:	e01a      	b.n	8013b16 <tcp_receive+0xf0a>
 8013ae0:	e019      	b.n	8013b16 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013ae2:	4b0f      	ldr	r3, [pc, #60]	; (8013b20 <tcp_receive+0xf14>)
 8013ae4:	681a      	ldr	r2, [r3, #0]
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aea:	1ad3      	subs	r3, r2, r3
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	db0a      	blt.n	8013b06 <tcp_receive+0xefa>
 8013af0:	4b0b      	ldr	r3, [pc, #44]	; (8013b20 <tcp_receive+0xf14>)
 8013af2:	681a      	ldr	r2, [r3, #0]
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013af8:	6879      	ldr	r1, [r7, #4]
 8013afa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013afc:	440b      	add	r3, r1
 8013afe:	1ad3      	subs	r3, r2, r3
 8013b00:	3301      	adds	r3, #1
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	dd07      	ble.n	8013b16 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	8b5b      	ldrh	r3, [r3, #26]
 8013b0a:	f043 0302 	orr.w	r3, r3, #2
 8013b0e:	b29a      	uxth	r2, r3
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013b14:	e7ff      	b.n	8013b16 <tcp_receive+0xf0a>
 8013b16:	bf00      	nop
 8013b18:	3750      	adds	r7, #80	; 0x50
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8013b1e:	bf00      	nop
 8013b20:	200006c8 	.word	0x200006c8
 8013b24:	200006a8 	.word	0x200006a8
 8013b28:	200006d2 	.word	0x200006d2
 8013b2c:	0801b7e0 	.word	0x0801b7e0
 8013b30:	0801bb88 	.word	0x0801bb88
 8013b34:	0801b82c 	.word	0x0801b82c

08013b38 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013b38:	b480      	push	{r7}
 8013b3a:	b083      	sub	sp, #12
 8013b3c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8013b3e:	4b15      	ldr	r3, [pc, #84]	; (8013b94 <tcp_get_next_optbyte+0x5c>)
 8013b40:	881b      	ldrh	r3, [r3, #0]
 8013b42:	1c5a      	adds	r2, r3, #1
 8013b44:	b291      	uxth	r1, r2
 8013b46:	4a13      	ldr	r2, [pc, #76]	; (8013b94 <tcp_get_next_optbyte+0x5c>)
 8013b48:	8011      	strh	r1, [r2, #0]
 8013b4a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013b4c:	4b12      	ldr	r3, [pc, #72]	; (8013b98 <tcp_get_next_optbyte+0x60>)
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d004      	beq.n	8013b5e <tcp_get_next_optbyte+0x26>
 8013b54:	4b11      	ldr	r3, [pc, #68]	; (8013b9c <tcp_get_next_optbyte+0x64>)
 8013b56:	881b      	ldrh	r3, [r3, #0]
 8013b58:	88fa      	ldrh	r2, [r7, #6]
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d208      	bcs.n	8013b70 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8013b5e:	4b10      	ldr	r3, [pc, #64]	; (8013ba0 <tcp_get_next_optbyte+0x68>)
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	3314      	adds	r3, #20
 8013b64:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013b66:	88fb      	ldrh	r3, [r7, #6]
 8013b68:	683a      	ldr	r2, [r7, #0]
 8013b6a:	4413      	add	r3, r2
 8013b6c:	781b      	ldrb	r3, [r3, #0]
 8013b6e:	e00b      	b.n	8013b88 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013b70:	88fb      	ldrh	r3, [r7, #6]
 8013b72:	b2da      	uxtb	r2, r3
 8013b74:	4b09      	ldr	r3, [pc, #36]	; (8013b9c <tcp_get_next_optbyte+0x64>)
 8013b76:	881b      	ldrh	r3, [r3, #0]
 8013b78:	b2db      	uxtb	r3, r3
 8013b7a:	1ad3      	subs	r3, r2, r3
 8013b7c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8013b7e:	4b06      	ldr	r3, [pc, #24]	; (8013b98 <tcp_get_next_optbyte+0x60>)
 8013b80:	681a      	ldr	r2, [r3, #0]
 8013b82:	797b      	ldrb	r3, [r7, #5]
 8013b84:	4413      	add	r3, r2
 8013b86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	370c      	adds	r7, #12
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b92:	4770      	bx	lr
 8013b94:	200006c4 	.word	0x200006c4
 8013b98:	200006c0 	.word	0x200006c0
 8013b9c:	200006be 	.word	0x200006be
 8013ba0:	200006b8 	.word	0x200006b8

08013ba4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b084      	sub	sp, #16
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d106      	bne.n	8013bc0 <tcp_parseopt+0x1c>
 8013bb2:	4b32      	ldr	r3, [pc, #200]	; (8013c7c <tcp_parseopt+0xd8>)
 8013bb4:	f240 727d 	movw	r2, #1917	; 0x77d
 8013bb8:	4931      	ldr	r1, [pc, #196]	; (8013c80 <tcp_parseopt+0xdc>)
 8013bba:	4832      	ldr	r0, [pc, #200]	; (8013c84 <tcp_parseopt+0xe0>)
 8013bbc:	f005 f99a 	bl	8018ef4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013bc0:	4b31      	ldr	r3, [pc, #196]	; (8013c88 <tcp_parseopt+0xe4>)
 8013bc2:	881b      	ldrh	r3, [r3, #0]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d055      	beq.n	8013c74 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013bc8:	4b30      	ldr	r3, [pc, #192]	; (8013c8c <tcp_parseopt+0xe8>)
 8013bca:	2200      	movs	r2, #0
 8013bcc:	801a      	strh	r2, [r3, #0]
 8013bce:	e045      	b.n	8013c5c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8013bd0:	f7ff ffb2 	bl	8013b38 <tcp_get_next_optbyte>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013bd8:	7bfb      	ldrb	r3, [r7, #15]
 8013bda:	2b02      	cmp	r3, #2
 8013bdc:	d006      	beq.n	8013bec <tcp_parseopt+0x48>
 8013bde:	2b02      	cmp	r3, #2
 8013be0:	dc2b      	bgt.n	8013c3a <tcp_parseopt+0x96>
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d041      	beq.n	8013c6a <tcp_parseopt+0xc6>
 8013be6:	2b01      	cmp	r3, #1
 8013be8:	d127      	bne.n	8013c3a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013bea:	e037      	b.n	8013c5c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013bec:	f7ff ffa4 	bl	8013b38 <tcp_get_next_optbyte>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	2b04      	cmp	r3, #4
 8013bf4:	d13b      	bne.n	8013c6e <tcp_parseopt+0xca>
 8013bf6:	4b25      	ldr	r3, [pc, #148]	; (8013c8c <tcp_parseopt+0xe8>)
 8013bf8:	881b      	ldrh	r3, [r3, #0]
 8013bfa:	3301      	adds	r3, #1
 8013bfc:	4a22      	ldr	r2, [pc, #136]	; (8013c88 <tcp_parseopt+0xe4>)
 8013bfe:	8812      	ldrh	r2, [r2, #0]
 8013c00:	4293      	cmp	r3, r2
 8013c02:	da34      	bge.n	8013c6e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013c04:	f7ff ff98 	bl	8013b38 <tcp_get_next_optbyte>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	b29b      	uxth	r3, r3
 8013c0c:	021b      	lsls	r3, r3, #8
 8013c0e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013c10:	f7ff ff92 	bl	8013b38 <tcp_get_next_optbyte>
 8013c14:	4603      	mov	r3, r0
 8013c16:	b29a      	uxth	r2, r3
 8013c18:	89bb      	ldrh	r3, [r7, #12]
 8013c1a:	4313      	orrs	r3, r2
 8013c1c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013c1e:	89bb      	ldrh	r3, [r7, #12]
 8013c20:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8013c24:	d804      	bhi.n	8013c30 <tcp_parseopt+0x8c>
 8013c26:	89bb      	ldrh	r3, [r7, #12]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d001      	beq.n	8013c30 <tcp_parseopt+0x8c>
 8013c2c:	89ba      	ldrh	r2, [r7, #12]
 8013c2e:	e001      	b.n	8013c34 <tcp_parseopt+0x90>
 8013c30:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013c38:	e010      	b.n	8013c5c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013c3a:	f7ff ff7d 	bl	8013b38 <tcp_get_next_optbyte>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013c42:	7afb      	ldrb	r3, [r7, #11]
 8013c44:	2b01      	cmp	r3, #1
 8013c46:	d914      	bls.n	8013c72 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013c48:	7afb      	ldrb	r3, [r7, #11]
 8013c4a:	b29a      	uxth	r2, r3
 8013c4c:	4b0f      	ldr	r3, [pc, #60]	; (8013c8c <tcp_parseopt+0xe8>)
 8013c4e:	881b      	ldrh	r3, [r3, #0]
 8013c50:	4413      	add	r3, r2
 8013c52:	b29b      	uxth	r3, r3
 8013c54:	3b02      	subs	r3, #2
 8013c56:	b29a      	uxth	r2, r3
 8013c58:	4b0c      	ldr	r3, [pc, #48]	; (8013c8c <tcp_parseopt+0xe8>)
 8013c5a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013c5c:	4b0b      	ldr	r3, [pc, #44]	; (8013c8c <tcp_parseopt+0xe8>)
 8013c5e:	881a      	ldrh	r2, [r3, #0]
 8013c60:	4b09      	ldr	r3, [pc, #36]	; (8013c88 <tcp_parseopt+0xe4>)
 8013c62:	881b      	ldrh	r3, [r3, #0]
 8013c64:	429a      	cmp	r2, r3
 8013c66:	d3b3      	bcc.n	8013bd0 <tcp_parseopt+0x2c>
 8013c68:	e004      	b.n	8013c74 <tcp_parseopt+0xd0>
          return;
 8013c6a:	bf00      	nop
 8013c6c:	e002      	b.n	8013c74 <tcp_parseopt+0xd0>
            return;
 8013c6e:	bf00      	nop
 8013c70:	e000      	b.n	8013c74 <tcp_parseopt+0xd0>
            return;
 8013c72:	bf00      	nop
      }
    }
  }
}
 8013c74:	3710      	adds	r7, #16
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}
 8013c7a:	bf00      	nop
 8013c7c:	0801b7e0 	.word	0x0801b7e0
 8013c80:	0801bc44 	.word	0x0801bc44
 8013c84:	0801b82c 	.word	0x0801b82c
 8013c88:	200006bc 	.word	0x200006bc
 8013c8c:	200006c4 	.word	0x200006c4

08013c90 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013c90:	b480      	push	{r7}
 8013c92:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013c94:	4b05      	ldr	r3, [pc, #20]	; (8013cac <tcp_trigger_input_pcb_close+0x1c>)
 8013c96:	781b      	ldrb	r3, [r3, #0]
 8013c98:	f043 0310 	orr.w	r3, r3, #16
 8013c9c:	b2da      	uxtb	r2, r3
 8013c9e:	4b03      	ldr	r3, [pc, #12]	; (8013cac <tcp_trigger_input_pcb_close+0x1c>)
 8013ca0:	701a      	strb	r2, [r3, #0]
}
 8013ca2:	bf00      	nop
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013caa:	4770      	bx	lr
 8013cac:	200006d5 	.word	0x200006d5

08013cb0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b084      	sub	sp, #16
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	60f8      	str	r0, [r7, #12]
 8013cb8:	60b9      	str	r1, [r7, #8]
 8013cba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d00a      	beq.n	8013cd8 <tcp_route+0x28>
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	7a1b      	ldrb	r3, [r3, #8]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d006      	beq.n	8013cd8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	7a1b      	ldrb	r3, [r3, #8]
 8013cce:	4618      	mov	r0, r3
 8013cd0:	f7fb f8b8 	bl	800ee44 <netif_get_by_index>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	e003      	b.n	8013ce0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f003 fad9 	bl	8017290 <ip4_route>
 8013cde:	4603      	mov	r3, r0
  }
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3710      	adds	r7, #16
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}

08013ce8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013ce8:	b590      	push	{r4, r7, lr}
 8013cea:	b087      	sub	sp, #28
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	60f8      	str	r0, [r7, #12]
 8013cf0:	60b9      	str	r1, [r7, #8]
 8013cf2:	603b      	str	r3, [r7, #0]
 8013cf4:	4613      	mov	r3, r2
 8013cf6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d105      	bne.n	8013d0a <tcp_create_segment+0x22>
 8013cfe:	4b44      	ldr	r3, [pc, #272]	; (8013e10 <tcp_create_segment+0x128>)
 8013d00:	22a3      	movs	r2, #163	; 0xa3
 8013d02:	4944      	ldr	r1, [pc, #272]	; (8013e14 <tcp_create_segment+0x12c>)
 8013d04:	4844      	ldr	r0, [pc, #272]	; (8013e18 <tcp_create_segment+0x130>)
 8013d06:	f005 f8f5 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d105      	bne.n	8013d1c <tcp_create_segment+0x34>
 8013d10:	4b3f      	ldr	r3, [pc, #252]	; (8013e10 <tcp_create_segment+0x128>)
 8013d12:	22a4      	movs	r2, #164	; 0xa4
 8013d14:	4941      	ldr	r1, [pc, #260]	; (8013e1c <tcp_create_segment+0x134>)
 8013d16:	4840      	ldr	r0, [pc, #256]	; (8013e18 <tcp_create_segment+0x130>)
 8013d18:	f005 f8ec 	bl	8018ef4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013d1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013d20:	009b      	lsls	r3, r3, #2
 8013d22:	b2db      	uxtb	r3, r3
 8013d24:	f003 0304 	and.w	r3, r3, #4
 8013d28:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013d2a:	2003      	movs	r0, #3
 8013d2c:	f7fa fd8c 	bl	800e848 <memp_malloc>
 8013d30:	6138      	str	r0, [r7, #16]
 8013d32:	693b      	ldr	r3, [r7, #16]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d104      	bne.n	8013d42 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013d38:	68b8      	ldr	r0, [r7, #8]
 8013d3a:	f7fb fbe3 	bl	800f504 <pbuf_free>
    return NULL;
 8013d3e:	2300      	movs	r3, #0
 8013d40:	e061      	b.n	8013e06 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8013d42:	693b      	ldr	r3, [r7, #16]
 8013d44:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013d48:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013d4a:	693b      	ldr	r3, [r7, #16]
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013d50:	693b      	ldr	r3, [r7, #16]
 8013d52:	68ba      	ldr	r2, [r7, #8]
 8013d54:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013d56:	68bb      	ldr	r3, [r7, #8]
 8013d58:	891a      	ldrh	r2, [r3, #8]
 8013d5a:	7dfb      	ldrb	r3, [r7, #23]
 8013d5c:	b29b      	uxth	r3, r3
 8013d5e:	429a      	cmp	r2, r3
 8013d60:	d205      	bcs.n	8013d6e <tcp_create_segment+0x86>
 8013d62:	4b2b      	ldr	r3, [pc, #172]	; (8013e10 <tcp_create_segment+0x128>)
 8013d64:	22b0      	movs	r2, #176	; 0xb0
 8013d66:	492e      	ldr	r1, [pc, #184]	; (8013e20 <tcp_create_segment+0x138>)
 8013d68:	482b      	ldr	r0, [pc, #172]	; (8013e18 <tcp_create_segment+0x130>)
 8013d6a:	f005 f8c3 	bl	8018ef4 <iprintf>
  seg->len = p->tot_len - optlen;
 8013d6e:	68bb      	ldr	r3, [r7, #8]
 8013d70:	891a      	ldrh	r2, [r3, #8]
 8013d72:	7dfb      	ldrb	r3, [r7, #23]
 8013d74:	b29b      	uxth	r3, r3
 8013d76:	1ad3      	subs	r3, r2, r3
 8013d78:	b29a      	uxth	r2, r3
 8013d7a:	693b      	ldr	r3, [r7, #16]
 8013d7c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013d7e:	2114      	movs	r1, #20
 8013d80:	68b8      	ldr	r0, [r7, #8]
 8013d82:	f7fb fb29 	bl	800f3d8 <pbuf_add_header>
 8013d86:	4603      	mov	r3, r0
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d004      	beq.n	8013d96 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013d8c:	6938      	ldr	r0, [r7, #16]
 8013d8e:	f7fd f820 	bl	8010dd2 <tcp_seg_free>
    return NULL;
 8013d92:	2300      	movs	r3, #0
 8013d94:	e037      	b.n	8013e06 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	685b      	ldr	r3, [r3, #4]
 8013d9a:	685a      	ldr	r2, [r3, #4]
 8013d9c:	693b      	ldr	r3, [r7, #16]
 8013d9e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	8ada      	ldrh	r2, [r3, #22]
 8013da4:	693b      	ldr	r3, [r7, #16]
 8013da6:	68dc      	ldr	r4, [r3, #12]
 8013da8:	4610      	mov	r0, r2
 8013daa:	f7fa f8e8 	bl	800df7e <lwip_htons>
 8013dae:	4603      	mov	r3, r0
 8013db0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	8b1a      	ldrh	r2, [r3, #24]
 8013db6:	693b      	ldr	r3, [r7, #16]
 8013db8:	68dc      	ldr	r4, [r3, #12]
 8013dba:	4610      	mov	r0, r2
 8013dbc:	f7fa f8df 	bl	800df7e <lwip_htons>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013dc4:	693b      	ldr	r3, [r7, #16]
 8013dc6:	68dc      	ldr	r4, [r3, #12]
 8013dc8:	6838      	ldr	r0, [r7, #0]
 8013dca:	f7fa f8ed 	bl	800dfa8 <lwip_htonl>
 8013dce:	4603      	mov	r3, r0
 8013dd0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013dd2:	7dfb      	ldrb	r3, [r7, #23]
 8013dd4:	089b      	lsrs	r3, r3, #2
 8013dd6:	b2db      	uxtb	r3, r3
 8013dd8:	b29b      	uxth	r3, r3
 8013dda:	3305      	adds	r3, #5
 8013ddc:	b29b      	uxth	r3, r3
 8013dde:	031b      	lsls	r3, r3, #12
 8013de0:	b29a      	uxth	r2, r3
 8013de2:	79fb      	ldrb	r3, [r7, #7]
 8013de4:	b29b      	uxth	r3, r3
 8013de6:	4313      	orrs	r3, r2
 8013de8:	b29a      	uxth	r2, r3
 8013dea:	693b      	ldr	r3, [r7, #16]
 8013dec:	68dc      	ldr	r4, [r3, #12]
 8013dee:	4610      	mov	r0, r2
 8013df0:	f7fa f8c5 	bl	800df7e <lwip_htons>
 8013df4:	4603      	mov	r3, r0
 8013df6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013df8:	693b      	ldr	r3, [r7, #16]
 8013dfa:	68db      	ldr	r3, [r3, #12]
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	749a      	strb	r2, [r3, #18]
 8013e00:	2200      	movs	r2, #0
 8013e02:	74da      	strb	r2, [r3, #19]
  return seg;
 8013e04:	693b      	ldr	r3, [r7, #16]
}
 8013e06:	4618      	mov	r0, r3
 8013e08:	371c      	adds	r7, #28
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd90      	pop	{r4, r7, pc}
 8013e0e:	bf00      	nop
 8013e10:	0801bc60 	.word	0x0801bc60
 8013e14:	0801bc94 	.word	0x0801bc94
 8013e18:	0801bcb4 	.word	0x0801bcb4
 8013e1c:	0801bcdc 	.word	0x0801bcdc
 8013e20:	0801bd00 	.word	0x0801bd00

08013e24 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b086      	sub	sp, #24
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	607b      	str	r3, [r7, #4]
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	73fb      	strb	r3, [r7, #15]
 8013e30:	460b      	mov	r3, r1
 8013e32:	81bb      	strh	r3, [r7, #12]
 8013e34:	4613      	mov	r3, r2
 8013e36:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013e38:	89bb      	ldrh	r3, [r7, #12]
 8013e3a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d105      	bne.n	8013e4e <tcp_pbuf_prealloc+0x2a>
 8013e42:	4b30      	ldr	r3, [pc, #192]	; (8013f04 <tcp_pbuf_prealloc+0xe0>)
 8013e44:	22e8      	movs	r2, #232	; 0xe8
 8013e46:	4930      	ldr	r1, [pc, #192]	; (8013f08 <tcp_pbuf_prealloc+0xe4>)
 8013e48:	4830      	ldr	r0, [pc, #192]	; (8013f0c <tcp_pbuf_prealloc+0xe8>)
 8013e4a:	f005 f853 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8013e4e:	6a3b      	ldr	r3, [r7, #32]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d105      	bne.n	8013e60 <tcp_pbuf_prealloc+0x3c>
 8013e54:	4b2b      	ldr	r3, [pc, #172]	; (8013f04 <tcp_pbuf_prealloc+0xe0>)
 8013e56:	22e9      	movs	r2, #233	; 0xe9
 8013e58:	492d      	ldr	r1, [pc, #180]	; (8013f10 <tcp_pbuf_prealloc+0xec>)
 8013e5a:	482c      	ldr	r0, [pc, #176]	; (8013f0c <tcp_pbuf_prealloc+0xe8>)
 8013e5c:	f005 f84a 	bl	8018ef4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013e60:	89ba      	ldrh	r2, [r7, #12]
 8013e62:	897b      	ldrh	r3, [r7, #10]
 8013e64:	429a      	cmp	r2, r3
 8013e66:	d221      	bcs.n	8013eac <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013e68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013e6c:	f003 0302 	and.w	r3, r3, #2
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d111      	bne.n	8013e98 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013e74:	6a3b      	ldr	r3, [r7, #32]
 8013e76:	8b5b      	ldrh	r3, [r3, #26]
 8013e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d115      	bne.n	8013eac <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8013e80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d007      	beq.n	8013e98 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013e88:	6a3b      	ldr	r3, [r7, #32]
 8013e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d103      	bne.n	8013e98 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8013e90:	6a3b      	ldr	r3, [r7, #32]
 8013e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d009      	beq.n	8013eac <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013e98:	89bb      	ldrh	r3, [r7, #12]
 8013e9a:	f203 537b 	addw	r3, r3, #1403	; 0x57b
 8013e9e:	f023 0203 	bic.w	r2, r3, #3
 8013ea2:	897b      	ldrh	r3, [r7, #10]
 8013ea4:	4293      	cmp	r3, r2
 8013ea6:	bf28      	it	cs
 8013ea8:	4613      	movcs	r3, r2
 8013eaa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013eac:	8af9      	ldrh	r1, [r7, #22]
 8013eae:	7bfb      	ldrb	r3, [r7, #15]
 8013eb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7fb f841 	bl	800ef3c <pbuf_alloc>
 8013eba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013ebc:	693b      	ldr	r3, [r7, #16]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d101      	bne.n	8013ec6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	e019      	b.n	8013efa <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013ec6:	693b      	ldr	r3, [r7, #16]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d006      	beq.n	8013edc <tcp_pbuf_prealloc+0xb8>
 8013ece:	4b0d      	ldr	r3, [pc, #52]	; (8013f04 <tcp_pbuf_prealloc+0xe0>)
 8013ed0:	f240 120b 	movw	r2, #267	; 0x10b
 8013ed4:	490f      	ldr	r1, [pc, #60]	; (8013f14 <tcp_pbuf_prealloc+0xf0>)
 8013ed6:	480d      	ldr	r0, [pc, #52]	; (8013f0c <tcp_pbuf_prealloc+0xe8>)
 8013ed8:	f005 f80c 	bl	8018ef4 <iprintf>
  *oversize = p->len - length;
 8013edc:	693b      	ldr	r3, [r7, #16]
 8013ede:	895a      	ldrh	r2, [r3, #10]
 8013ee0:	89bb      	ldrh	r3, [r7, #12]
 8013ee2:	1ad3      	subs	r3, r2, r3
 8013ee4:	b29a      	uxth	r2, r3
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	89ba      	ldrh	r2, [r7, #12]
 8013eee:	811a      	strh	r2, [r3, #8]
 8013ef0:	693b      	ldr	r3, [r7, #16]
 8013ef2:	891a      	ldrh	r2, [r3, #8]
 8013ef4:	693b      	ldr	r3, [r7, #16]
 8013ef6:	815a      	strh	r2, [r3, #10]
  return p;
 8013ef8:	693b      	ldr	r3, [r7, #16]
}
 8013efa:	4618      	mov	r0, r3
 8013efc:	3718      	adds	r7, #24
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd80      	pop	{r7, pc}
 8013f02:	bf00      	nop
 8013f04:	0801bc60 	.word	0x0801bc60
 8013f08:	0801bd18 	.word	0x0801bd18
 8013f0c:	0801bcb4 	.word	0x0801bcb4
 8013f10:	0801bd3c 	.word	0x0801bd3c
 8013f14:	0801bd5c 	.word	0x0801bd5c

08013f18 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b082      	sub	sp, #8
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
 8013f20:	460b      	mov	r3, r1
 8013f22:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d106      	bne.n	8013f38 <tcp_write_checks+0x20>
 8013f2a:	4b34      	ldr	r3, [pc, #208]	; (8013ffc <tcp_write_checks+0xe4>)
 8013f2c:	f240 1233 	movw	r2, #307	; 0x133
 8013f30:	4933      	ldr	r1, [pc, #204]	; (8014000 <tcp_write_checks+0xe8>)
 8013f32:	4834      	ldr	r0, [pc, #208]	; (8014004 <tcp_write_checks+0xec>)
 8013f34:	f004 ffde 	bl	8018ef4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	7d1b      	ldrb	r3, [r3, #20]
 8013f3c:	2b04      	cmp	r3, #4
 8013f3e:	d00e      	beq.n	8013f5e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013f44:	2b07      	cmp	r3, #7
 8013f46:	d00a      	beq.n	8013f5e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013f4c:	2b02      	cmp	r3, #2
 8013f4e:	d006      	beq.n	8013f5e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013f54:	2b03      	cmp	r3, #3
 8013f56:	d002      	beq.n	8013f5e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013f58:	f06f 030a 	mvn.w	r3, #10
 8013f5c:	e049      	b.n	8013ff2 <tcp_write_checks+0xda>
  } else if (len == 0) {
 8013f5e:	887b      	ldrh	r3, [r7, #2]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d101      	bne.n	8013f68 <tcp_write_checks+0x50>
    return ERR_OK;
 8013f64:	2300      	movs	r3, #0
 8013f66:	e044      	b.n	8013ff2 <tcp_write_checks+0xda>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013f6e:	887a      	ldrh	r2, [r7, #2]
 8013f70:	429a      	cmp	r2, r3
 8013f72:	d909      	bls.n	8013f88 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	8b5b      	ldrh	r3, [r3, #26]
 8013f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f7c:	b29a      	uxth	r2, r3
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013f82:	f04f 33ff 	mov.w	r3, #4294967295
 8013f86:	e034      	b.n	8013ff2 <tcp_write_checks+0xda>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013f8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013f92:	d309      	bcc.n	8013fa8 <tcp_write_checks+0x90>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	8b5b      	ldrh	r3, [r3, #26]
 8013f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f9c:	b29a      	uxth	r2, r3
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8013fa6:	e024      	b.n	8013ff2 <tcp_write_checks+0xda>
  }
  if (pcb->snd_queuelen != 0) {
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d00f      	beq.n	8013fd2 <tcp_write_checks+0xba>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d11a      	bne.n	8013ff0 <tcp_write_checks+0xd8>
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d116      	bne.n	8013ff0 <tcp_write_checks+0xd8>
 8013fc2:	4b0e      	ldr	r3, [pc, #56]	; (8013ffc <tcp_write_checks+0xe4>)
 8013fc4:	f240 1255 	movw	r2, #341	; 0x155
 8013fc8:	490f      	ldr	r1, [pc, #60]	; (8014008 <tcp_write_checks+0xf0>)
 8013fca:	480e      	ldr	r0, [pc, #56]	; (8014004 <tcp_write_checks+0xec>)
 8013fcc:	f004 ff92 	bl	8018ef4 <iprintf>
 8013fd0:	e00e      	b.n	8013ff0 <tcp_write_checks+0xd8>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d103      	bne.n	8013fe2 <tcp_write_checks+0xca>
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d006      	beq.n	8013ff0 <tcp_write_checks+0xd8>
 8013fe2:	4b06      	ldr	r3, [pc, #24]	; (8013ffc <tcp_write_checks+0xe4>)
 8013fe4:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8013fe8:	4908      	ldr	r1, [pc, #32]	; (801400c <tcp_write_checks+0xf4>)
 8013fea:	4806      	ldr	r0, [pc, #24]	; (8014004 <tcp_write_checks+0xec>)
 8013fec:	f004 ff82 	bl	8018ef4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013ff0:	2300      	movs	r3, #0
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	3708      	adds	r7, #8
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}
 8013ffa:	bf00      	nop
 8013ffc:	0801bc60 	.word	0x0801bc60
 8014000:	0801bd70 	.word	0x0801bd70
 8014004:	0801bcb4 	.word	0x0801bcb4
 8014008:	0801bd90 	.word	0x0801bd90
 801400c:	0801bdcc 	.word	0x0801bdcc

08014010 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8014010:	b590      	push	{r4, r7, lr}
 8014012:	b09b      	sub	sp, #108	; 0x6c
 8014014:	af04      	add	r7, sp, #16
 8014016:	60f8      	str	r0, [r7, #12]
 8014018:	60b9      	str	r1, [r7, #8]
 801401a:	4611      	mov	r1, r2
 801401c:	461a      	mov	r2, r3
 801401e:	460b      	mov	r3, r1
 8014020:	80fb      	strh	r3, [r7, #6]
 8014022:	4613      	mov	r3, r2
 8014024:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8014026:	2300      	movs	r3, #0
 8014028:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801402a:	2300      	movs	r3, #0
 801402c:	653b      	str	r3, [r7, #80]	; 0x50
 801402e:	2300      	movs	r3, #0
 8014030:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014032:	2300      	movs	r3, #0
 8014034:	64bb      	str	r3, [r7, #72]	; 0x48
 8014036:	2300      	movs	r3, #0
 8014038:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801403a:	2300      	movs	r3, #0
 801403c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8014040:	2300      	movs	r3, #0
 8014042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8014046:	2300      	movs	r3, #0
 8014048:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801404a:	2300      	movs	r3, #0
 801404c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801404e:	2300      	movs	r3, #0
 8014050:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d109      	bne.n	801406c <tcp_write+0x5c>
 8014058:	4ba4      	ldr	r3, [pc, #656]	; (80142ec <tcp_write+0x2dc>)
 801405a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801405e:	49a4      	ldr	r1, [pc, #656]	; (80142f0 <tcp_write+0x2e0>)
 8014060:	48a4      	ldr	r0, [pc, #656]	; (80142f4 <tcp_write+0x2e4>)
 8014062:	f004 ff47 	bl	8018ef4 <iprintf>
 8014066:	f06f 030f 	mvn.w	r3, #15
 801406a:	e32c      	b.n	80146c6 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014072:	085b      	lsrs	r3, r3, #1
 8014074:	b29a      	uxth	r2, r3
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801407a:	4293      	cmp	r3, r2
 801407c:	bf28      	it	cs
 801407e:	4613      	movcs	r3, r2
 8014080:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8014082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014084:	2b00      	cmp	r3, #0
 8014086:	d102      	bne.n	801408e <tcp_write+0x7e>
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801408c:	e000      	b.n	8014090 <tcp_write+0x80>
 801408e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014090:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8014092:	68bb      	ldr	r3, [r7, #8]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d109      	bne.n	80140ac <tcp_write+0x9c>
 8014098:	4b94      	ldr	r3, [pc, #592]	; (80142ec <tcp_write+0x2dc>)
 801409a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801409e:	4996      	ldr	r1, [pc, #600]	; (80142f8 <tcp_write+0x2e8>)
 80140a0:	4894      	ldr	r0, [pc, #592]	; (80142f4 <tcp_write+0x2e4>)
 80140a2:	f004 ff27 	bl	8018ef4 <iprintf>
 80140a6:	f06f 030f 	mvn.w	r3, #15
 80140aa:	e30c      	b.n	80146c6 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80140ac:	88fb      	ldrh	r3, [r7, #6]
 80140ae:	4619      	mov	r1, r3
 80140b0:	68f8      	ldr	r0, [r7, #12]
 80140b2:	f7ff ff31 	bl	8013f18 <tcp_write_checks>
 80140b6:	4603      	mov	r3, r0
 80140b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80140bc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d002      	beq.n	80140ca <tcp_write+0xba>
    return err;
 80140c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80140c8:	e2fd      	b.n	80146c6 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80140d0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80140d4:	2300      	movs	r3, #0
 80140d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140de:	2b00      	cmp	r3, #0
 80140e0:	f000 80f6 	beq.w	80142d0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140e8:	653b      	str	r3, [r7, #80]	; 0x50
 80140ea:	e002      	b.n	80140f2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80140ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80140f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d1f8      	bne.n	80140ec <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80140fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80140fc:	7a9b      	ldrb	r3, [r3, #10]
 80140fe:	009b      	lsls	r3, r3, #2
 8014100:	b29b      	uxth	r3, r3
 8014102:	f003 0304 	and.w	r3, r3, #4
 8014106:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8014108:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801410a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801410c:	891b      	ldrh	r3, [r3, #8]
 801410e:	4619      	mov	r1, r3
 8014110:	8c3b      	ldrh	r3, [r7, #32]
 8014112:	440b      	add	r3, r1
 8014114:	429a      	cmp	r2, r3
 8014116:	da06      	bge.n	8014126 <tcp_write+0x116>
 8014118:	4b74      	ldr	r3, [pc, #464]	; (80142ec <tcp_write+0x2dc>)
 801411a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801411e:	4977      	ldr	r1, [pc, #476]	; (80142fc <tcp_write+0x2ec>)
 8014120:	4874      	ldr	r0, [pc, #464]	; (80142f4 <tcp_write+0x2e4>)
 8014122:	f004 fee7 	bl	8018ef4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8014126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014128:	891a      	ldrh	r2, [r3, #8]
 801412a:	8c3b      	ldrh	r3, [r7, #32]
 801412c:	4413      	add	r3, r2
 801412e:	b29b      	uxth	r3, r3
 8014130:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014132:	1ad3      	subs	r3, r2, r3
 8014134:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801413c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801413e:	8a7b      	ldrh	r3, [r7, #18]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d026      	beq.n	8014192 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8014144:	8a7b      	ldrh	r3, [r7, #18]
 8014146:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014148:	429a      	cmp	r2, r3
 801414a:	d206      	bcs.n	801415a <tcp_write+0x14a>
 801414c:	4b67      	ldr	r3, [pc, #412]	; (80142ec <tcp_write+0x2dc>)
 801414e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8014152:	496b      	ldr	r1, [pc, #428]	; (8014300 <tcp_write+0x2f0>)
 8014154:	4867      	ldr	r0, [pc, #412]	; (80142f4 <tcp_write+0x2e4>)
 8014156:	f004 fecd 	bl	8018ef4 <iprintf>
      seg = last_unsent;
 801415a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801415c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801415e:	8a7b      	ldrh	r3, [r7, #18]
 8014160:	88fa      	ldrh	r2, [r7, #6]
 8014162:	4293      	cmp	r3, r2
 8014164:	bf28      	it	cs
 8014166:	4613      	movcs	r3, r2
 8014168:	b29b      	uxth	r3, r3
 801416a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801416c:	4293      	cmp	r3, r2
 801416e:	bf28      	it	cs
 8014170:	4613      	movcs	r3, r2
 8014172:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8014174:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014178:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801417a:	4413      	add	r3, r2
 801417c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8014180:	8a7a      	ldrh	r2, [r7, #18]
 8014182:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014184:	1ad3      	subs	r3, r2, r3
 8014186:	b29b      	uxth	r3, r3
 8014188:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801418a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801418c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801418e:	1ad3      	subs	r3, r2, r3
 8014190:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8014192:	8a7b      	ldrh	r3, [r7, #18]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d00b      	beq.n	80141b0 <tcp_write+0x1a0>
 8014198:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801419c:	88fb      	ldrh	r3, [r7, #6]
 801419e:	429a      	cmp	r2, r3
 80141a0:	d006      	beq.n	80141b0 <tcp_write+0x1a0>
 80141a2:	4b52      	ldr	r3, [pc, #328]	; (80142ec <tcp_write+0x2dc>)
 80141a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141a8:	4956      	ldr	r1, [pc, #344]	; (8014304 <tcp_write+0x2f4>)
 80141aa:	4852      	ldr	r0, [pc, #328]	; (80142f4 <tcp_write+0x2e4>)
 80141ac:	f004 fea2 	bl	8018ef4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80141b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80141b4:	88fb      	ldrh	r3, [r7, #6]
 80141b6:	429a      	cmp	r2, r3
 80141b8:	f080 8168 	bcs.w	801448c <tcp_write+0x47c>
 80141bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80141be:	2b00      	cmp	r3, #0
 80141c0:	f000 8164 	beq.w	801448c <tcp_write+0x47c>
 80141c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141c6:	891b      	ldrh	r3, [r3, #8]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	f000 815f 	beq.w	801448c <tcp_write+0x47c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80141ce:	88fa      	ldrh	r2, [r7, #6]
 80141d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80141d4:	1ad2      	subs	r2, r2, r3
 80141d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80141d8:	4293      	cmp	r3, r2
 80141da:	bfa8      	it	ge
 80141dc:	4613      	movge	r3, r2
 80141de:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80141e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141e2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80141e4:	797b      	ldrb	r3, [r7, #5]
 80141e6:	f003 0301 	and.w	r3, r3, #1
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d027      	beq.n	801423e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80141ee:	f107 0012 	add.w	r0, r7, #18
 80141f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80141f4:	8bf9      	ldrh	r1, [r7, #30]
 80141f6:	2301      	movs	r3, #1
 80141f8:	9302      	str	r3, [sp, #8]
 80141fa:	797b      	ldrb	r3, [r7, #5]
 80141fc:	9301      	str	r3, [sp, #4]
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	9300      	str	r3, [sp, #0]
 8014202:	4603      	mov	r3, r0
 8014204:	2000      	movs	r0, #0
 8014206:	f7ff fe0d 	bl	8013e24 <tcp_pbuf_prealloc>
 801420a:	6578      	str	r0, [r7, #84]	; 0x54
 801420c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801420e:	2b00      	cmp	r3, #0
 8014210:	f000 8227 	beq.w	8014662 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8014214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014216:	6858      	ldr	r0, [r3, #4]
 8014218:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801421c:	68ba      	ldr	r2, [r7, #8]
 801421e:	4413      	add	r3, r2
 8014220:	8bfa      	ldrh	r2, [r7, #30]
 8014222:	4619      	mov	r1, r3
 8014224:	f004 fda6 	bl	8018d74 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8014228:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801422a:	f7fb f9f3 	bl	800f614 <pbuf_clen>
 801422e:	4603      	mov	r3, r0
 8014230:	461a      	mov	r2, r3
 8014232:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014236:	4413      	add	r3, r2
 8014238:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801423c:	e041      	b.n	80142c2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801423e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014240:	685b      	ldr	r3, [r3, #4]
 8014242:	637b      	str	r3, [r7, #52]	; 0x34
 8014244:	e002      	b.n	801424c <tcp_write+0x23c>
 8014246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	637b      	str	r3, [r7, #52]	; 0x34
 801424c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d1f8      	bne.n	8014246 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014256:	7b1b      	ldrb	r3, [r3, #12]
 8014258:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801425c:	2b00      	cmp	r3, #0
 801425e:	d115      	bne.n	801428c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014262:	685b      	ldr	r3, [r3, #4]
 8014264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014266:	8952      	ldrh	r2, [r2, #10]
 8014268:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801426a:	68ba      	ldr	r2, [r7, #8]
 801426c:	429a      	cmp	r2, r3
 801426e:	d10d      	bne.n	801428c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014270:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014274:	2b00      	cmp	r3, #0
 8014276:	d006      	beq.n	8014286 <tcp_write+0x276>
 8014278:	4b1c      	ldr	r3, [pc, #112]	; (80142ec <tcp_write+0x2dc>)
 801427a:	f240 2231 	movw	r2, #561	; 0x231
 801427e:	4922      	ldr	r1, [pc, #136]	; (8014308 <tcp_write+0x2f8>)
 8014280:	481c      	ldr	r0, [pc, #112]	; (80142f4 <tcp_write+0x2e4>)
 8014282:	f004 fe37 	bl	8018ef4 <iprintf>
          extendlen = seglen;
 8014286:	8bfb      	ldrh	r3, [r7, #30]
 8014288:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801428a:	e01a      	b.n	80142c2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801428c:	8bfb      	ldrh	r3, [r7, #30]
 801428e:	2201      	movs	r2, #1
 8014290:	4619      	mov	r1, r3
 8014292:	2000      	movs	r0, #0
 8014294:	f7fa fe52 	bl	800ef3c <pbuf_alloc>
 8014298:	6578      	str	r0, [r7, #84]	; 0x54
 801429a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801429c:	2b00      	cmp	r3, #0
 801429e:	f000 81e2 	beq.w	8014666 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80142a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80142a6:	68ba      	ldr	r2, [r7, #8]
 80142a8:	441a      	add	r2, r3
 80142aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142ac:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80142ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80142b0:	f7fb f9b0 	bl	800f614 <pbuf_clen>
 80142b4:	4603      	mov	r3, r0
 80142b6:	461a      	mov	r2, r3
 80142b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80142bc:	4413      	add	r3, r2
 80142be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80142c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80142c6:	8bfb      	ldrh	r3, [r7, #30]
 80142c8:	4413      	add	r3, r2
 80142ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80142ce:	e0dd      	b.n	801448c <tcp_write+0x47c>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	f000 80d8 	beq.w	801448c <tcp_write+0x47c>
 80142dc:	4b03      	ldr	r3, [pc, #12]	; (80142ec <tcp_write+0x2dc>)
 80142de:	f240 224a 	movw	r2, #586	; 0x24a
 80142e2:	490a      	ldr	r1, [pc, #40]	; (801430c <tcp_write+0x2fc>)
 80142e4:	4803      	ldr	r0, [pc, #12]	; (80142f4 <tcp_write+0x2e4>)
 80142e6:	f004 fe05 	bl	8018ef4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80142ea:	e0cf      	b.n	801448c <tcp_write+0x47c>
 80142ec:	0801bc60 	.word	0x0801bc60
 80142f0:	0801be00 	.word	0x0801be00
 80142f4:	0801bcb4 	.word	0x0801bcb4
 80142f8:	0801be18 	.word	0x0801be18
 80142fc:	0801be4c 	.word	0x0801be4c
 8014300:	0801be64 	.word	0x0801be64
 8014304:	0801be84 	.word	0x0801be84
 8014308:	0801bea4 	.word	0x0801bea4
 801430c:	0801bed0 	.word	0x0801bed0
    struct pbuf *p;
    u16_t left = len - pos;
 8014310:	88fa      	ldrh	r2, [r7, #6]
 8014312:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014316:	1ad3      	subs	r3, r2, r3
 8014318:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801431a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801431e:	b29b      	uxth	r3, r3
 8014320:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014322:	1ad3      	subs	r3, r2, r3
 8014324:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8014326:	8b7a      	ldrh	r2, [r7, #26]
 8014328:	8bbb      	ldrh	r3, [r7, #28]
 801432a:	4293      	cmp	r3, r2
 801432c:	bf28      	it	cs
 801432e:	4613      	movcs	r3, r2
 8014330:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014332:	797b      	ldrb	r3, [r7, #5]
 8014334:	f003 0301 	and.w	r3, r3, #1
 8014338:	2b00      	cmp	r3, #0
 801433a:	d036      	beq.n	80143aa <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801433c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014340:	b29a      	uxth	r2, r3
 8014342:	8b3b      	ldrh	r3, [r7, #24]
 8014344:	4413      	add	r3, r2
 8014346:	b299      	uxth	r1, r3
 8014348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801434a:	2b00      	cmp	r3, #0
 801434c:	bf0c      	ite	eq
 801434e:	2301      	moveq	r3, #1
 8014350:	2300      	movne	r3, #0
 8014352:	b2db      	uxtb	r3, r3
 8014354:	f107 0012 	add.w	r0, r7, #18
 8014358:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801435a:	9302      	str	r3, [sp, #8]
 801435c:	797b      	ldrb	r3, [r7, #5]
 801435e:	9301      	str	r3, [sp, #4]
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	9300      	str	r3, [sp, #0]
 8014364:	4603      	mov	r3, r0
 8014366:	2036      	movs	r0, #54	; 0x36
 8014368:	f7ff fd5c 	bl	8013e24 <tcp_pbuf_prealloc>
 801436c:	6338      	str	r0, [r7, #48]	; 0x30
 801436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014370:	2b00      	cmp	r3, #0
 8014372:	f000 817a 	beq.w	801466a <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8014376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014378:	895b      	ldrh	r3, [r3, #10]
 801437a:	8b3a      	ldrh	r2, [r7, #24]
 801437c:	429a      	cmp	r2, r3
 801437e:	d906      	bls.n	801438e <tcp_write+0x37e>
 8014380:	4b8d      	ldr	r3, [pc, #564]	; (80145b8 <tcp_write+0x5a8>)
 8014382:	f240 2266 	movw	r2, #614	; 0x266
 8014386:	498d      	ldr	r1, [pc, #564]	; (80145bc <tcp_write+0x5ac>)
 8014388:	488d      	ldr	r0, [pc, #564]	; (80145c0 <tcp_write+0x5b0>)
 801438a:	f004 fdb3 	bl	8018ef4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014390:	685a      	ldr	r2, [r3, #4]
 8014392:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014396:	18d0      	adds	r0, r2, r3
 8014398:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801439c:	68ba      	ldr	r2, [r7, #8]
 801439e:	4413      	add	r3, r2
 80143a0:	8b3a      	ldrh	r2, [r7, #24]
 80143a2:	4619      	mov	r1, r3
 80143a4:	f004 fce6 	bl	8018d74 <memcpy>
 80143a8:	e02f      	b.n	801440a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80143aa:	8a7b      	ldrh	r3, [r7, #18]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d006      	beq.n	80143be <tcp_write+0x3ae>
 80143b0:	4b81      	ldr	r3, [pc, #516]	; (80145b8 <tcp_write+0x5a8>)
 80143b2:	f240 2271 	movw	r2, #625	; 0x271
 80143b6:	4983      	ldr	r1, [pc, #524]	; (80145c4 <tcp_write+0x5b4>)
 80143b8:	4881      	ldr	r0, [pc, #516]	; (80145c0 <tcp_write+0x5b0>)
 80143ba:	f004 fd9b 	bl	8018ef4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80143be:	8b3b      	ldrh	r3, [r7, #24]
 80143c0:	2201      	movs	r2, #1
 80143c2:	4619      	mov	r1, r3
 80143c4:	2036      	movs	r0, #54	; 0x36
 80143c6:	f7fa fdb9 	bl	800ef3c <pbuf_alloc>
 80143ca:	6178      	str	r0, [r7, #20]
 80143cc:	697b      	ldr	r3, [r7, #20]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	f000 814d 	beq.w	801466e <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80143d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80143d8:	68ba      	ldr	r2, [r7, #8]
 80143da:	441a      	add	r2, r3
 80143dc:	697b      	ldr	r3, [r7, #20]
 80143de:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80143e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80143e4:	b29b      	uxth	r3, r3
 80143e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80143ea:	4619      	mov	r1, r3
 80143ec:	2036      	movs	r0, #54	; 0x36
 80143ee:	f7fa fda5 	bl	800ef3c <pbuf_alloc>
 80143f2:	6338      	str	r0, [r7, #48]	; 0x30
 80143f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d103      	bne.n	8014402 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80143fa:	6978      	ldr	r0, [r7, #20]
 80143fc:	f7fb f882 	bl	800f504 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8014400:	e138      	b.n	8014674 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8014402:	6979      	ldr	r1, [r7, #20]
 8014404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014406:	f7fb f93f 	bl	800f688 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801440a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801440c:	f7fb f902 	bl	800f614 <pbuf_clen>
 8014410:	4603      	mov	r3, r0
 8014412:	461a      	mov	r2, r3
 8014414:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014418:	4413      	add	r3, r2
 801441a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801441e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014426:	d903      	bls.n	8014430 <tcp_write+0x420>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8014428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801442a:	f7fb f86b 	bl	800f504 <pbuf_free>
      goto memerr;
 801442e:	e121      	b.n	8014674 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014434:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014438:	441a      	add	r2, r3
 801443a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801443e:	9300      	str	r3, [sp, #0]
 8014440:	4613      	mov	r3, r2
 8014442:	2200      	movs	r2, #0
 8014444:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014446:	68f8      	ldr	r0, [r7, #12]
 8014448:	f7ff fc4e 	bl	8013ce8 <tcp_create_segment>
 801444c:	64f8      	str	r0, [r7, #76]	; 0x4c
 801444e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014450:	2b00      	cmp	r3, #0
 8014452:	f000 810e 	beq.w	8014672 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8014456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014458:	2b00      	cmp	r3, #0
 801445a:	d102      	bne.n	8014462 <tcp_write+0x452>
      queue = seg;
 801445c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801445e:	647b      	str	r3, [r7, #68]	; 0x44
 8014460:	e00c      	b.n	801447c <tcp_write+0x46c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014464:	2b00      	cmp	r3, #0
 8014466:	d106      	bne.n	8014476 <tcp_write+0x466>
 8014468:	4b53      	ldr	r3, [pc, #332]	; (80145b8 <tcp_write+0x5a8>)
 801446a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801446e:	4956      	ldr	r1, [pc, #344]	; (80145c8 <tcp_write+0x5b8>)
 8014470:	4853      	ldr	r0, [pc, #332]	; (80145c0 <tcp_write+0x5b0>)
 8014472:	f004 fd3f 	bl	8018ef4 <iprintf>
      prev_seg->next = seg;
 8014476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014478:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801447a:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801447c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801447e:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014480:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014484:	8b3b      	ldrh	r3, [r7, #24]
 8014486:	4413      	add	r3, r2
 8014488:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801448c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014490:	88fb      	ldrh	r3, [r7, #6]
 8014492:	429a      	cmp	r2, r3
 8014494:	f4ff af3c 	bcc.w	8014310 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8014498:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801449a:	2b00      	cmp	r3, #0
 801449c:	d02c      	beq.n	80144f8 <tcp_write+0x4e8>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801449e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80144a0:	685b      	ldr	r3, [r3, #4]
 80144a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80144a4:	e01e      	b.n	80144e4 <tcp_write+0x4d4>
      p->tot_len += oversize_used;
 80144a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144a8:	891a      	ldrh	r2, [r3, #8]
 80144aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80144ac:	4413      	add	r3, r2
 80144ae:	b29a      	uxth	r2, r3
 80144b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144b2:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80144b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d110      	bne.n	80144de <tcp_write+0x4ce>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80144bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144be:	685b      	ldr	r3, [r3, #4]
 80144c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80144c2:	8952      	ldrh	r2, [r2, #10]
 80144c4:	4413      	add	r3, r2
 80144c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80144c8:	68b9      	ldr	r1, [r7, #8]
 80144ca:	4618      	mov	r0, r3
 80144cc:	f004 fc52 	bl	8018d74 <memcpy>
        p->len += oversize_used;
 80144d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144d2:	895a      	ldrh	r2, [r3, #10]
 80144d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80144d6:	4413      	add	r3, r2
 80144d8:	b29a      	uxth	r2, r3
 80144da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144dc:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80144de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80144e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d1dd      	bne.n	80144a6 <tcp_write+0x496>
      }
    }
    last_unsent->len += oversize_used;
 80144ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80144ec:	891a      	ldrh	r2, [r3, #8]
 80144ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80144f0:	4413      	add	r3, r2
 80144f2:	b29a      	uxth	r2, r3
 80144f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80144f6:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80144f8:	8a7a      	ldrh	r2, [r7, #18]
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8014500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014502:	2b00      	cmp	r3, #0
 8014504:	d018      	beq.n	8014538 <tcp_write+0x528>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8014506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014508:	2b00      	cmp	r3, #0
 801450a:	d106      	bne.n	801451a <tcp_write+0x50a>
 801450c:	4b2a      	ldr	r3, [pc, #168]	; (80145b8 <tcp_write+0x5a8>)
 801450e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8014512:	492e      	ldr	r1, [pc, #184]	; (80145cc <tcp_write+0x5bc>)
 8014514:	482a      	ldr	r0, [pc, #168]	; (80145c0 <tcp_write+0x5b0>)
 8014516:	f004 fced 	bl	8018ef4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801451a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801451c:	685b      	ldr	r3, [r3, #4]
 801451e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014520:	4618      	mov	r0, r3
 8014522:	f7fb f8b1 	bl	800f688 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8014526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014528:	891a      	ldrh	r2, [r3, #8]
 801452a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801452c:	891b      	ldrh	r3, [r3, #8]
 801452e:	4413      	add	r3, r2
 8014530:	b29a      	uxth	r2, r3
 8014532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014534:	811a      	strh	r2, [r3, #8]
 8014536:	e037      	b.n	80145a8 <tcp_write+0x598>
  } else if (extendlen > 0) {
 8014538:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801453a:	2b00      	cmp	r3, #0
 801453c:	d034      	beq.n	80145a8 <tcp_write+0x598>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801453e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014540:	2b00      	cmp	r3, #0
 8014542:	d003      	beq.n	801454c <tcp_write+0x53c>
 8014544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014546:	685b      	ldr	r3, [r3, #4]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d106      	bne.n	801455a <tcp_write+0x54a>
 801454c:	4b1a      	ldr	r3, [pc, #104]	; (80145b8 <tcp_write+0x5a8>)
 801454e:	f240 22e6 	movw	r2, #742	; 0x2e6
 8014552:	491f      	ldr	r1, [pc, #124]	; (80145d0 <tcp_write+0x5c0>)
 8014554:	481a      	ldr	r0, [pc, #104]	; (80145c0 <tcp_write+0x5b0>)
 8014556:	f004 fccd 	bl	8018ef4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801455a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801455c:	685b      	ldr	r3, [r3, #4]
 801455e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014560:	e009      	b.n	8014576 <tcp_write+0x566>
      p->tot_len += extendlen;
 8014562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014564:	891a      	ldrh	r2, [r3, #8]
 8014566:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014568:	4413      	add	r3, r2
 801456a:	b29a      	uxth	r2, r3
 801456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801456e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	62bb      	str	r3, [r7, #40]	; 0x28
 8014576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d1f1      	bne.n	8014562 <tcp_write+0x552>
    }
    p->tot_len += extendlen;
 801457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014580:	891a      	ldrh	r2, [r3, #8]
 8014582:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014584:	4413      	add	r3, r2
 8014586:	b29a      	uxth	r2, r3
 8014588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801458a:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801458e:	895a      	ldrh	r2, [r3, #10]
 8014590:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014592:	4413      	add	r3, r2
 8014594:	b29a      	uxth	r2, r3
 8014596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014598:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801459a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801459c:	891a      	ldrh	r2, [r3, #8]
 801459e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80145a0:	4413      	add	r3, r2
 80145a2:	b29a      	uxth	r2, r3
 80145a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145a6:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80145a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d112      	bne.n	80145d4 <tcp_write+0x5c4>
    pcb->unsent = queue;
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80145b2:	66da      	str	r2, [r3, #108]	; 0x6c
 80145b4:	e011      	b.n	80145da <tcp_write+0x5ca>
 80145b6:	bf00      	nop
 80145b8:	0801bc60 	.word	0x0801bc60
 80145bc:	0801bf00 	.word	0x0801bf00
 80145c0:	0801bcb4 	.word	0x0801bcb4
 80145c4:	0801bf40 	.word	0x0801bf40
 80145c8:	0801bf50 	.word	0x0801bf50
 80145cc:	0801bf64 	.word	0x0801bf64
 80145d0:	0801bf9c 	.word	0x0801bf9c
  } else {
    last_unsent->next = queue;
 80145d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80145d8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80145de:	88fb      	ldrh	r3, [r7, #6]
 80145e0:	441a      	add	r2, r3
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80145ec:	88fb      	ldrh	r3, [r7, #6]
 80145ee:	1ad3      	subs	r3, r2, r3
 80145f0:	b29a      	uxth	r2, r3
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80145fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014608:	2b00      	cmp	r3, #0
 801460a:	d00e      	beq.n	801462a <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014610:	2b00      	cmp	r3, #0
 8014612:	d10a      	bne.n	801462a <tcp_write+0x61a>
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014618:	2b00      	cmp	r3, #0
 801461a:	d106      	bne.n	801462a <tcp_write+0x61a>
 801461c:	4b2c      	ldr	r3, [pc, #176]	; (80146d0 <tcp_write+0x6c0>)
 801461e:	f240 3212 	movw	r2, #786	; 0x312
 8014622:	492c      	ldr	r1, [pc, #176]	; (80146d4 <tcp_write+0x6c4>)
 8014624:	482c      	ldr	r0, [pc, #176]	; (80146d8 <tcp_write+0x6c8>)
 8014626:	f004 fc65 	bl	8018ef4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801462a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801462c:	2b00      	cmp	r3, #0
 801462e:	d016      	beq.n	801465e <tcp_write+0x64e>
 8014630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014632:	68db      	ldr	r3, [r3, #12]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d012      	beq.n	801465e <tcp_write+0x64e>
 8014638:	797b      	ldrb	r3, [r7, #5]
 801463a:	f003 0302 	and.w	r3, r3, #2
 801463e:	2b00      	cmp	r3, #0
 8014640:	d10d      	bne.n	801465e <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8014642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014644:	68db      	ldr	r3, [r3, #12]
 8014646:	899b      	ldrh	r3, [r3, #12]
 8014648:	b29c      	uxth	r4, r3
 801464a:	2008      	movs	r0, #8
 801464c:	f7f9 fc97 	bl	800df7e <lwip_htons>
 8014650:	4603      	mov	r3, r0
 8014652:	461a      	mov	r2, r3
 8014654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014656:	68db      	ldr	r3, [r3, #12]
 8014658:	4322      	orrs	r2, r4
 801465a:	b292      	uxth	r2, r2
 801465c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801465e:	2300      	movs	r3, #0
 8014660:	e031      	b.n	80146c6 <tcp_write+0x6b6>
          goto memerr;
 8014662:	bf00      	nop
 8014664:	e006      	b.n	8014674 <tcp_write+0x664>
            goto memerr;
 8014666:	bf00      	nop
 8014668:	e004      	b.n	8014674 <tcp_write+0x664>
        goto memerr;
 801466a:	bf00      	nop
 801466c:	e002      	b.n	8014674 <tcp_write+0x664>
        goto memerr;
 801466e:	bf00      	nop
 8014670:	e000      	b.n	8014674 <tcp_write+0x664>
      goto memerr;
 8014672:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	8b5b      	ldrh	r3, [r3, #26]
 8014678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801467c:	b29a      	uxth	r2, r3
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014684:	2b00      	cmp	r3, #0
 8014686:	d002      	beq.n	801468e <tcp_write+0x67e>
    pbuf_free(concat_p);
 8014688:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801468a:	f7fa ff3b 	bl	800f504 <pbuf_free>
  }
  if (queue != NULL) {
 801468e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014690:	2b00      	cmp	r3, #0
 8014692:	d002      	beq.n	801469a <tcp_write+0x68a>
    tcp_segs_free(queue);
 8014694:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014696:	f7fc fb87 	bl	8010da8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d00e      	beq.n	80146c2 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d10a      	bne.n	80146c2 <tcp_write+0x6b2>
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d106      	bne.n	80146c2 <tcp_write+0x6b2>
 80146b4:	4b06      	ldr	r3, [pc, #24]	; (80146d0 <tcp_write+0x6c0>)
 80146b6:	f240 3227 	movw	r2, #807	; 0x327
 80146ba:	4906      	ldr	r1, [pc, #24]	; (80146d4 <tcp_write+0x6c4>)
 80146bc:	4806      	ldr	r0, [pc, #24]	; (80146d8 <tcp_write+0x6c8>)
 80146be:	f004 fc19 	bl	8018ef4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80146c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80146c6:	4618      	mov	r0, r3
 80146c8:	375c      	adds	r7, #92	; 0x5c
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd90      	pop	{r4, r7, pc}
 80146ce:	bf00      	nop
 80146d0:	0801bc60 	.word	0x0801bc60
 80146d4:	0801bfd4 	.word	0x0801bfd4
 80146d8:	0801bcb4 	.word	0x0801bcb4

080146dc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80146dc:	b590      	push	{r4, r7, lr}
 80146de:	b08b      	sub	sp, #44	; 0x2c
 80146e0:	af02      	add	r7, sp, #8
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	460b      	mov	r3, r1
 80146e6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80146e8:	2300      	movs	r3, #0
 80146ea:	61fb      	str	r3, [r7, #28]
 80146ec:	2300      	movs	r3, #0
 80146ee:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80146f0:	2300      	movs	r3, #0
 80146f2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d106      	bne.n	8014708 <tcp_split_unsent_seg+0x2c>
 80146fa:	4b95      	ldr	r3, [pc, #596]	; (8014950 <tcp_split_unsent_seg+0x274>)
 80146fc:	f240 324b 	movw	r2, #843	; 0x34b
 8014700:	4994      	ldr	r1, [pc, #592]	; (8014954 <tcp_split_unsent_seg+0x278>)
 8014702:	4895      	ldr	r0, [pc, #596]	; (8014958 <tcp_split_unsent_seg+0x27c>)
 8014704:	f004 fbf6 	bl	8018ef4 <iprintf>

  useg = pcb->unsent;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801470c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801470e:	697b      	ldr	r3, [r7, #20]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d102      	bne.n	801471a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014714:	f04f 33ff 	mov.w	r3, #4294967295
 8014718:	e116      	b.n	8014948 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801471a:	887b      	ldrh	r3, [r7, #2]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d109      	bne.n	8014734 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014720:	4b8b      	ldr	r3, [pc, #556]	; (8014950 <tcp_split_unsent_seg+0x274>)
 8014722:	f240 3253 	movw	r2, #851	; 0x353
 8014726:	498d      	ldr	r1, [pc, #564]	; (801495c <tcp_split_unsent_seg+0x280>)
 8014728:	488b      	ldr	r0, [pc, #556]	; (8014958 <tcp_split_unsent_seg+0x27c>)
 801472a:	f004 fbe3 	bl	8018ef4 <iprintf>
    return ERR_VAL;
 801472e:	f06f 0305 	mvn.w	r3, #5
 8014732:	e109      	b.n	8014948 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014734:	697b      	ldr	r3, [r7, #20]
 8014736:	891b      	ldrh	r3, [r3, #8]
 8014738:	887a      	ldrh	r2, [r7, #2]
 801473a:	429a      	cmp	r2, r3
 801473c:	d301      	bcc.n	8014742 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801473e:	2300      	movs	r3, #0
 8014740:	e102      	b.n	8014948 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014746:	887a      	ldrh	r2, [r7, #2]
 8014748:	429a      	cmp	r2, r3
 801474a:	d906      	bls.n	801475a <tcp_split_unsent_seg+0x7e>
 801474c:	4b80      	ldr	r3, [pc, #512]	; (8014950 <tcp_split_unsent_seg+0x274>)
 801474e:	f240 325b 	movw	r2, #859	; 0x35b
 8014752:	4983      	ldr	r1, [pc, #524]	; (8014960 <tcp_split_unsent_seg+0x284>)
 8014754:	4880      	ldr	r0, [pc, #512]	; (8014958 <tcp_split_unsent_seg+0x27c>)
 8014756:	f004 fbcd 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	891b      	ldrh	r3, [r3, #8]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d106      	bne.n	8014770 <tcp_split_unsent_seg+0x94>
 8014762:	4b7b      	ldr	r3, [pc, #492]	; (8014950 <tcp_split_unsent_seg+0x274>)
 8014764:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8014768:	497e      	ldr	r1, [pc, #504]	; (8014964 <tcp_split_unsent_seg+0x288>)
 801476a:	487b      	ldr	r0, [pc, #492]	; (8014958 <tcp_split_unsent_seg+0x27c>)
 801476c:	f004 fbc2 	bl	8018ef4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014770:	697b      	ldr	r3, [r7, #20]
 8014772:	7a9b      	ldrb	r3, [r3, #10]
 8014774:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014776:	7bfb      	ldrb	r3, [r7, #15]
 8014778:	009b      	lsls	r3, r3, #2
 801477a:	b2db      	uxtb	r3, r3
 801477c:	f003 0304 	and.w	r3, r3, #4
 8014780:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014782:	697b      	ldr	r3, [r7, #20]
 8014784:	891a      	ldrh	r2, [r3, #8]
 8014786:	887b      	ldrh	r3, [r7, #2]
 8014788:	1ad3      	subs	r3, r2, r3
 801478a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801478c:	7bbb      	ldrb	r3, [r7, #14]
 801478e:	b29a      	uxth	r2, r3
 8014790:	89bb      	ldrh	r3, [r7, #12]
 8014792:	4413      	add	r3, r2
 8014794:	b29b      	uxth	r3, r3
 8014796:	f44f 7220 	mov.w	r2, #640	; 0x280
 801479a:	4619      	mov	r1, r3
 801479c:	2036      	movs	r0, #54	; 0x36
 801479e:	f7fa fbcd 	bl	800ef3c <pbuf_alloc>
 80147a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80147a4:	693b      	ldr	r3, [r7, #16]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	f000 80b7 	beq.w	801491a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80147ac:	697b      	ldr	r3, [r7, #20]
 80147ae:	685b      	ldr	r3, [r3, #4]
 80147b0:	891a      	ldrh	r2, [r3, #8]
 80147b2:	697b      	ldr	r3, [r7, #20]
 80147b4:	891b      	ldrh	r3, [r3, #8]
 80147b6:	1ad3      	subs	r3, r2, r3
 80147b8:	b29a      	uxth	r2, r3
 80147ba:	887b      	ldrh	r3, [r7, #2]
 80147bc:	4413      	add	r3, r2
 80147be:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80147c0:	697b      	ldr	r3, [r7, #20]
 80147c2:	6858      	ldr	r0, [r3, #4]
 80147c4:	693b      	ldr	r3, [r7, #16]
 80147c6:	685a      	ldr	r2, [r3, #4]
 80147c8:	7bbb      	ldrb	r3, [r7, #14]
 80147ca:	18d1      	adds	r1, r2, r3
 80147cc:	897b      	ldrh	r3, [r7, #10]
 80147ce:	89ba      	ldrh	r2, [r7, #12]
 80147d0:	f7fb f882 	bl	800f8d8 <pbuf_copy_partial>
 80147d4:	4603      	mov	r3, r0
 80147d6:	461a      	mov	r2, r3
 80147d8:	89bb      	ldrh	r3, [r7, #12]
 80147da:	4293      	cmp	r3, r2
 80147dc:	f040 809f 	bne.w	801491e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	68db      	ldr	r3, [r3, #12]
 80147e4:	899b      	ldrh	r3, [r3, #12]
 80147e6:	b29b      	uxth	r3, r3
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7f9 fbc8 	bl	800df7e <lwip_htons>
 80147ee:	4603      	mov	r3, r0
 80147f0:	b2db      	uxtb	r3, r3
 80147f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80147f6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80147f8:	2300      	movs	r3, #0
 80147fa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80147fc:	7efb      	ldrb	r3, [r7, #27]
 80147fe:	f003 0308 	and.w	r3, r3, #8
 8014802:	2b00      	cmp	r3, #0
 8014804:	d007      	beq.n	8014816 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014806:	7efb      	ldrb	r3, [r7, #27]
 8014808:	f023 0308 	bic.w	r3, r3, #8
 801480c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801480e:	7ebb      	ldrb	r3, [r7, #26]
 8014810:	f043 0308 	orr.w	r3, r3, #8
 8014814:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014816:	7efb      	ldrb	r3, [r7, #27]
 8014818:	f003 0301 	and.w	r3, r3, #1
 801481c:	2b00      	cmp	r3, #0
 801481e:	d007      	beq.n	8014830 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014820:	7efb      	ldrb	r3, [r7, #27]
 8014822:	f023 0301 	bic.w	r3, r3, #1
 8014826:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014828:	7ebb      	ldrb	r3, [r7, #26]
 801482a:	f043 0301 	orr.w	r3, r3, #1
 801482e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014830:	697b      	ldr	r3, [r7, #20]
 8014832:	68db      	ldr	r3, [r3, #12]
 8014834:	685b      	ldr	r3, [r3, #4]
 8014836:	4618      	mov	r0, r3
 8014838:	f7f9 fbb6 	bl	800dfa8 <lwip_htonl>
 801483c:	4602      	mov	r2, r0
 801483e:	887b      	ldrh	r3, [r7, #2]
 8014840:	18d1      	adds	r1, r2, r3
 8014842:	7eba      	ldrb	r2, [r7, #26]
 8014844:	7bfb      	ldrb	r3, [r7, #15]
 8014846:	9300      	str	r3, [sp, #0]
 8014848:	460b      	mov	r3, r1
 801484a:	6939      	ldr	r1, [r7, #16]
 801484c:	6878      	ldr	r0, [r7, #4]
 801484e:	f7ff fa4b 	bl	8013ce8 <tcp_create_segment>
 8014852:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014854:	69fb      	ldr	r3, [r7, #28]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d063      	beq.n	8014922 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801485a:	697b      	ldr	r3, [r7, #20]
 801485c:	685b      	ldr	r3, [r3, #4]
 801485e:	4618      	mov	r0, r3
 8014860:	f7fa fed8 	bl	800f614 <pbuf_clen>
 8014864:	4603      	mov	r3, r0
 8014866:	461a      	mov	r2, r3
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801486e:	1a9b      	subs	r3, r3, r2
 8014870:	b29a      	uxth	r2, r3
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014878:	697b      	ldr	r3, [r7, #20]
 801487a:	6858      	ldr	r0, [r3, #4]
 801487c:	697b      	ldr	r3, [r7, #20]
 801487e:	685b      	ldr	r3, [r3, #4]
 8014880:	891a      	ldrh	r2, [r3, #8]
 8014882:	89bb      	ldrh	r3, [r7, #12]
 8014884:	1ad3      	subs	r3, r2, r3
 8014886:	b29b      	uxth	r3, r3
 8014888:	4619      	mov	r1, r3
 801488a:	f7fa fcb5 	bl	800f1f8 <pbuf_realloc>
  useg->len -= remainder;
 801488e:	697b      	ldr	r3, [r7, #20]
 8014890:	891a      	ldrh	r2, [r3, #8]
 8014892:	89bb      	ldrh	r3, [r7, #12]
 8014894:	1ad3      	subs	r3, r2, r3
 8014896:	b29a      	uxth	r2, r3
 8014898:	697b      	ldr	r3, [r7, #20]
 801489a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801489c:	697b      	ldr	r3, [r7, #20]
 801489e:	68db      	ldr	r3, [r3, #12]
 80148a0:	899b      	ldrh	r3, [r3, #12]
 80148a2:	b29c      	uxth	r4, r3
 80148a4:	7efb      	ldrb	r3, [r7, #27]
 80148a6:	b29b      	uxth	r3, r3
 80148a8:	4618      	mov	r0, r3
 80148aa:	f7f9 fb68 	bl	800df7e <lwip_htons>
 80148ae:	4603      	mov	r3, r0
 80148b0:	461a      	mov	r2, r3
 80148b2:	697b      	ldr	r3, [r7, #20]
 80148b4:	68db      	ldr	r3, [r3, #12]
 80148b6:	4322      	orrs	r2, r4
 80148b8:	b292      	uxth	r2, r2
 80148ba:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80148bc:	697b      	ldr	r3, [r7, #20]
 80148be:	685b      	ldr	r3, [r3, #4]
 80148c0:	4618      	mov	r0, r3
 80148c2:	f7fa fea7 	bl	800f614 <pbuf_clen>
 80148c6:	4603      	mov	r3, r0
 80148c8:	461a      	mov	r2, r3
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80148d0:	4413      	add	r3, r2
 80148d2:	b29a      	uxth	r2, r3
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80148da:	69fb      	ldr	r3, [r7, #28]
 80148dc:	685b      	ldr	r3, [r3, #4]
 80148de:	4618      	mov	r0, r3
 80148e0:	f7fa fe98 	bl	800f614 <pbuf_clen>
 80148e4:	4603      	mov	r3, r0
 80148e6:	461a      	mov	r2, r3
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80148ee:	4413      	add	r3, r2
 80148f0:	b29a      	uxth	r2, r3
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80148f8:	697b      	ldr	r3, [r7, #20]
 80148fa:	681a      	ldr	r2, [r3, #0]
 80148fc:	69fb      	ldr	r3, [r7, #28]
 80148fe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	69fa      	ldr	r2, [r7, #28]
 8014904:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014906:	69fb      	ldr	r3, [r7, #28]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d103      	bne.n	8014916 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	2200      	movs	r2, #0
 8014912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014916:	2300      	movs	r3, #0
 8014918:	e016      	b.n	8014948 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801491a:	bf00      	nop
 801491c:	e002      	b.n	8014924 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801491e:	bf00      	nop
 8014920:	e000      	b.n	8014924 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014922:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014924:	69fb      	ldr	r3, [r7, #28]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d006      	beq.n	8014938 <tcp_split_unsent_seg+0x25c>
 801492a:	4b09      	ldr	r3, [pc, #36]	; (8014950 <tcp_split_unsent_seg+0x274>)
 801492c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014930:	490d      	ldr	r1, [pc, #52]	; (8014968 <tcp_split_unsent_seg+0x28c>)
 8014932:	4809      	ldr	r0, [pc, #36]	; (8014958 <tcp_split_unsent_seg+0x27c>)
 8014934:	f004 fade 	bl	8018ef4 <iprintf>
  if (p != NULL) {
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d002      	beq.n	8014944 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801493e:	6938      	ldr	r0, [r7, #16]
 8014940:	f7fa fde0 	bl	800f504 <pbuf_free>
  }

  return ERR_MEM;
 8014944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014948:	4618      	mov	r0, r3
 801494a:	3724      	adds	r7, #36	; 0x24
 801494c:	46bd      	mov	sp, r7
 801494e:	bd90      	pop	{r4, r7, pc}
 8014950:	0801bc60 	.word	0x0801bc60
 8014954:	0801bff4 	.word	0x0801bff4
 8014958:	0801bcb4 	.word	0x0801bcb4
 801495c:	0801c018 	.word	0x0801c018
 8014960:	0801c03c 	.word	0x0801c03c
 8014964:	0801c04c 	.word	0x0801c04c
 8014968:	0801c05c 	.word	0x0801c05c

0801496c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801496c:	b590      	push	{r4, r7, lr}
 801496e:	b085      	sub	sp, #20
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d106      	bne.n	8014988 <tcp_send_fin+0x1c>
 801497a:	4b21      	ldr	r3, [pc, #132]	; (8014a00 <tcp_send_fin+0x94>)
 801497c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8014980:	4920      	ldr	r1, [pc, #128]	; (8014a04 <tcp_send_fin+0x98>)
 8014982:	4821      	ldr	r0, [pc, #132]	; (8014a08 <tcp_send_fin+0x9c>)
 8014984:	f004 fab6 	bl	8018ef4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801498c:	2b00      	cmp	r3, #0
 801498e:	d02e      	beq.n	80149ee <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014994:	60fb      	str	r3, [r7, #12]
 8014996:	e002      	b.n	801499e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d1f8      	bne.n	8014998 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	68db      	ldr	r3, [r3, #12]
 80149aa:	899b      	ldrh	r3, [r3, #12]
 80149ac:	b29b      	uxth	r3, r3
 80149ae:	4618      	mov	r0, r3
 80149b0:	f7f9 fae5 	bl	800df7e <lwip_htons>
 80149b4:	4603      	mov	r3, r0
 80149b6:	b2db      	uxtb	r3, r3
 80149b8:	f003 0307 	and.w	r3, r3, #7
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d116      	bne.n	80149ee <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	68db      	ldr	r3, [r3, #12]
 80149c4:	899b      	ldrh	r3, [r3, #12]
 80149c6:	b29c      	uxth	r4, r3
 80149c8:	2001      	movs	r0, #1
 80149ca:	f7f9 fad8 	bl	800df7e <lwip_htons>
 80149ce:	4603      	mov	r3, r0
 80149d0:	461a      	mov	r2, r3
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	68db      	ldr	r3, [r3, #12]
 80149d6:	4322      	orrs	r2, r4
 80149d8:	b292      	uxth	r2, r2
 80149da:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	8b5b      	ldrh	r3, [r3, #26]
 80149e0:	f043 0320 	orr.w	r3, r3, #32
 80149e4:	b29a      	uxth	r2, r3
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80149ea:	2300      	movs	r3, #0
 80149ec:	e004      	b.n	80149f8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80149ee:	2101      	movs	r1, #1
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f000 f80b 	bl	8014a0c <tcp_enqueue_flags>
 80149f6:	4603      	mov	r3, r0
}
 80149f8:	4618      	mov	r0, r3
 80149fa:	3714      	adds	r7, #20
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd90      	pop	{r4, r7, pc}
 8014a00:	0801bc60 	.word	0x0801bc60
 8014a04:	0801c068 	.word	0x0801c068
 8014a08:	0801bcb4 	.word	0x0801bcb4

08014a0c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b08a      	sub	sp, #40	; 0x28
 8014a10:	af02      	add	r7, sp, #8
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	460b      	mov	r3, r1
 8014a16:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014a18:	2300      	movs	r3, #0
 8014a1a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014a20:	78fb      	ldrb	r3, [r7, #3]
 8014a22:	f003 0303 	and.w	r3, r3, #3
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d106      	bne.n	8014a38 <tcp_enqueue_flags+0x2c>
 8014a2a:	4b67      	ldr	r3, [pc, #412]	; (8014bc8 <tcp_enqueue_flags+0x1bc>)
 8014a2c:	f240 4211 	movw	r2, #1041	; 0x411
 8014a30:	4966      	ldr	r1, [pc, #408]	; (8014bcc <tcp_enqueue_flags+0x1c0>)
 8014a32:	4867      	ldr	r0, [pc, #412]	; (8014bd0 <tcp_enqueue_flags+0x1c4>)
 8014a34:	f004 fa5e 	bl	8018ef4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d106      	bne.n	8014a4c <tcp_enqueue_flags+0x40>
 8014a3e:	4b62      	ldr	r3, [pc, #392]	; (8014bc8 <tcp_enqueue_flags+0x1bc>)
 8014a40:	f240 4213 	movw	r2, #1043	; 0x413
 8014a44:	4963      	ldr	r1, [pc, #396]	; (8014bd4 <tcp_enqueue_flags+0x1c8>)
 8014a46:	4862      	ldr	r0, [pc, #392]	; (8014bd0 <tcp_enqueue_flags+0x1c4>)
 8014a48:	f004 fa54 	bl	8018ef4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014a4c:	78fb      	ldrb	r3, [r7, #3]
 8014a4e:	f003 0302 	and.w	r3, r3, #2
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d001      	beq.n	8014a5a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014a56:	2301      	movs	r3, #1
 8014a58:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014a5a:	7ffb      	ldrb	r3, [r7, #31]
 8014a5c:	009b      	lsls	r3, r3, #2
 8014a5e:	b2db      	uxtb	r3, r3
 8014a60:	f003 0304 	and.w	r3, r3, #4
 8014a64:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014a66:	7dfb      	ldrb	r3, [r7, #23]
 8014a68:	b29b      	uxth	r3, r3
 8014a6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014a6e:	4619      	mov	r1, r3
 8014a70:	2036      	movs	r0, #54	; 0x36
 8014a72:	f7fa fa63 	bl	800ef3c <pbuf_alloc>
 8014a76:	6138      	str	r0, [r7, #16]
 8014a78:	693b      	ldr	r3, [r7, #16]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d109      	bne.n	8014a92 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	8b5b      	ldrh	r3, [r3, #26]
 8014a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a86:	b29a      	uxth	r2, r3
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a90:	e095      	b.n	8014bbe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014a92:	693b      	ldr	r3, [r7, #16]
 8014a94:	895a      	ldrh	r2, [r3, #10]
 8014a96:	7dfb      	ldrb	r3, [r7, #23]
 8014a98:	b29b      	uxth	r3, r3
 8014a9a:	429a      	cmp	r2, r3
 8014a9c:	d206      	bcs.n	8014aac <tcp_enqueue_flags+0xa0>
 8014a9e:	4b4a      	ldr	r3, [pc, #296]	; (8014bc8 <tcp_enqueue_flags+0x1bc>)
 8014aa0:	f240 4239 	movw	r2, #1081	; 0x439
 8014aa4:	494c      	ldr	r1, [pc, #304]	; (8014bd8 <tcp_enqueue_flags+0x1cc>)
 8014aa6:	484a      	ldr	r0, [pc, #296]	; (8014bd0 <tcp_enqueue_flags+0x1c4>)
 8014aa8:	f004 fa24 	bl	8018ef4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014ab0:	78fa      	ldrb	r2, [r7, #3]
 8014ab2:	7ffb      	ldrb	r3, [r7, #31]
 8014ab4:	9300      	str	r3, [sp, #0]
 8014ab6:	460b      	mov	r3, r1
 8014ab8:	6939      	ldr	r1, [r7, #16]
 8014aba:	6878      	ldr	r0, [r7, #4]
 8014abc:	f7ff f914 	bl	8013ce8 <tcp_create_segment>
 8014ac0:	60f8      	str	r0, [r7, #12]
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d109      	bne.n	8014adc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	8b5b      	ldrh	r3, [r3, #26]
 8014acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ad0:	b29a      	uxth	r2, r3
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8014ada:	e070      	b.n	8014bbe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	68db      	ldr	r3, [r3, #12]
 8014ae0:	f003 0303 	and.w	r3, r3, #3
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d006      	beq.n	8014af6 <tcp_enqueue_flags+0xea>
 8014ae8:	4b37      	ldr	r3, [pc, #220]	; (8014bc8 <tcp_enqueue_flags+0x1bc>)
 8014aea:	f240 4242 	movw	r2, #1090	; 0x442
 8014aee:	493b      	ldr	r1, [pc, #236]	; (8014bdc <tcp_enqueue_flags+0x1d0>)
 8014af0:	4837      	ldr	r0, [pc, #220]	; (8014bd0 <tcp_enqueue_flags+0x1c4>)
 8014af2:	f004 f9ff 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	891b      	ldrh	r3, [r3, #8]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d006      	beq.n	8014b0c <tcp_enqueue_flags+0x100>
 8014afe:	4b32      	ldr	r3, [pc, #200]	; (8014bc8 <tcp_enqueue_flags+0x1bc>)
 8014b00:	f240 4243 	movw	r2, #1091	; 0x443
 8014b04:	4936      	ldr	r1, [pc, #216]	; (8014be0 <tcp_enqueue_flags+0x1d4>)
 8014b06:	4832      	ldr	r0, [pc, #200]	; (8014bd0 <tcp_enqueue_flags+0x1c4>)
 8014b08:	f004 f9f4 	bl	8018ef4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d103      	bne.n	8014b1c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	68fa      	ldr	r2, [r7, #12]
 8014b18:	66da      	str	r2, [r3, #108]	; 0x6c
 8014b1a:	e00d      	b.n	8014b38 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b20:	61bb      	str	r3, [r7, #24]
 8014b22:	e002      	b.n	8014b2a <tcp_enqueue_flags+0x11e>
 8014b24:	69bb      	ldr	r3, [r7, #24]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	61bb      	str	r3, [r7, #24]
 8014b2a:	69bb      	ldr	r3, [r7, #24]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d1f8      	bne.n	8014b24 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014b32:	69bb      	ldr	r3, [r7, #24]
 8014b34:	68fa      	ldr	r2, [r7, #12]
 8014b36:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014b40:	78fb      	ldrb	r3, [r7, #3]
 8014b42:	f003 0302 	and.w	r3, r3, #2
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d104      	bne.n	8014b54 <tcp_enqueue_flags+0x148>
 8014b4a:	78fb      	ldrb	r3, [r7, #3]
 8014b4c:	f003 0301 	and.w	r3, r3, #1
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d004      	beq.n	8014b5e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014b58:	1c5a      	adds	r2, r3, #1
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014b5e:	78fb      	ldrb	r3, [r7, #3]
 8014b60:	f003 0301 	and.w	r3, r3, #1
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d006      	beq.n	8014b76 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	8b5b      	ldrh	r3, [r3, #26]
 8014b6c:	f043 0320 	orr.w	r3, r3, #32
 8014b70:	b29a      	uxth	r2, r3
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	685b      	ldr	r3, [r3, #4]
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f7fa fd4a 	bl	800f614 <pbuf_clen>
 8014b80:	4603      	mov	r3, r0
 8014b82:	461a      	mov	r2, r3
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b8a:	4413      	add	r3, r2
 8014b8c:	b29a      	uxth	r2, r3
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d00e      	beq.n	8014bbc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d10a      	bne.n	8014bbc <tcp_enqueue_flags+0x1b0>
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d106      	bne.n	8014bbc <tcp_enqueue_flags+0x1b0>
 8014bae:	4b06      	ldr	r3, [pc, #24]	; (8014bc8 <tcp_enqueue_flags+0x1bc>)
 8014bb0:	f240 4265 	movw	r2, #1125	; 0x465
 8014bb4:	490b      	ldr	r1, [pc, #44]	; (8014be4 <tcp_enqueue_flags+0x1d8>)
 8014bb6:	4806      	ldr	r0, [pc, #24]	; (8014bd0 <tcp_enqueue_flags+0x1c4>)
 8014bb8:	f004 f99c 	bl	8018ef4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014bbc:	2300      	movs	r3, #0
}
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	3720      	adds	r7, #32
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	bd80      	pop	{r7, pc}
 8014bc6:	bf00      	nop
 8014bc8:	0801bc60 	.word	0x0801bc60
 8014bcc:	0801c084 	.word	0x0801c084
 8014bd0:	0801bcb4 	.word	0x0801bcb4
 8014bd4:	0801c0dc 	.word	0x0801c0dc
 8014bd8:	0801c0fc 	.word	0x0801c0fc
 8014bdc:	0801c138 	.word	0x0801c138
 8014be0:	0801c150 	.word	0x0801c150
 8014be4:	0801c17c 	.word	0x0801c17c

08014be8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014be8:	b5b0      	push	{r4, r5, r7, lr}
 8014bea:	b08a      	sub	sp, #40	; 0x28
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d106      	bne.n	8014c04 <tcp_output+0x1c>
 8014bf6:	4b9e      	ldr	r3, [pc, #632]	; (8014e70 <tcp_output+0x288>)
 8014bf8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014bfc:	499d      	ldr	r1, [pc, #628]	; (8014e74 <tcp_output+0x28c>)
 8014bfe:	489e      	ldr	r0, [pc, #632]	; (8014e78 <tcp_output+0x290>)
 8014c00:	f004 f978 	bl	8018ef4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	7d1b      	ldrb	r3, [r3, #20]
 8014c08:	2b01      	cmp	r3, #1
 8014c0a:	d106      	bne.n	8014c1a <tcp_output+0x32>
 8014c0c:	4b98      	ldr	r3, [pc, #608]	; (8014e70 <tcp_output+0x288>)
 8014c0e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014c12:	499a      	ldr	r1, [pc, #616]	; (8014e7c <tcp_output+0x294>)
 8014c14:	4898      	ldr	r0, [pc, #608]	; (8014e78 <tcp_output+0x290>)
 8014c16:	f004 f96d 	bl	8018ef4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014c1a:	4b99      	ldr	r3, [pc, #612]	; (8014e80 <tcp_output+0x298>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	687a      	ldr	r2, [r7, #4]
 8014c20:	429a      	cmp	r2, r3
 8014c22:	d101      	bne.n	8014c28 <tcp_output+0x40>
    return ERR_OK;
 8014c24:	2300      	movs	r3, #0
 8014c26:	e1ce      	b.n	8014fc6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014c34:	4293      	cmp	r3, r2
 8014c36:	bf28      	it	cs
 8014c38:	4613      	movcs	r3, r2
 8014c3a:	b29b      	uxth	r3, r3
 8014c3c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c42:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d10b      	bne.n	8014c62 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	8b5b      	ldrh	r3, [r3, #26]
 8014c4e:	f003 0302 	and.w	r3, r3, #2
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	f000 81aa 	beq.w	8014fac <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f000 fdcb 	bl	80157f4 <tcp_send_empty_ack>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	e1b1      	b.n	8014fc6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014c62:	6879      	ldr	r1, [r7, #4]
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	3304      	adds	r3, #4
 8014c68:	461a      	mov	r2, r3
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f7ff f820 	bl	8013cb0 <tcp_route>
 8014c70:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014c72:	697b      	ldr	r3, [r7, #20]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d102      	bne.n	8014c7e <tcp_output+0x96>
    return ERR_RTE;
 8014c78:	f06f 0303 	mvn.w	r3, #3
 8014c7c:	e1a3      	b.n	8014fc6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d003      	beq.n	8014c8c <tcp_output+0xa4>
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d111      	bne.n	8014cb0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014c8c:	697b      	ldr	r3, [r7, #20]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d002      	beq.n	8014c98 <tcp_output+0xb0>
 8014c92:	697b      	ldr	r3, [r7, #20]
 8014c94:	3304      	adds	r3, #4
 8014c96:	e000      	b.n	8014c9a <tcp_output+0xb2>
 8014c98:	2300      	movs	r3, #0
 8014c9a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014c9c:	693b      	ldr	r3, [r7, #16]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d102      	bne.n	8014ca8 <tcp_output+0xc0>
      return ERR_RTE;
 8014ca2:	f06f 0303 	mvn.w	r3, #3
 8014ca6:	e18e      	b.n	8014fc6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014ca8:	693b      	ldr	r3, [r7, #16]
 8014caa:	681a      	ldr	r2, [r3, #0]
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb2:	68db      	ldr	r3, [r3, #12]
 8014cb4:	685b      	ldr	r3, [r3, #4]
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f7f9 f976 	bl	800dfa8 <lwip_htonl>
 8014cbc:	4602      	mov	r2, r0
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014cc2:	1ad3      	subs	r3, r2, r3
 8014cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cc6:	8912      	ldrh	r2, [r2, #8]
 8014cc8:	4413      	add	r3, r2
 8014cca:	69ba      	ldr	r2, [r7, #24]
 8014ccc:	429a      	cmp	r2, r3
 8014cce:	d227      	bcs.n	8014d20 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014cd6:	461a      	mov	r2, r3
 8014cd8:	69bb      	ldr	r3, [r7, #24]
 8014cda:	4293      	cmp	r3, r2
 8014cdc:	d114      	bne.n	8014d08 <tcp_output+0x120>
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d110      	bne.n	8014d08 <tcp_output+0x120>
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d10b      	bne.n	8014d08 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	2200      	movs	r2, #0
 8014cf4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	2201      	movs	r2, #1
 8014cfc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	2200      	movs	r2, #0
 8014d04:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	8b5b      	ldrh	r3, [r3, #26]
 8014d0c:	f003 0302 	and.w	r3, r3, #2
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	f000 814d 	beq.w	8014fb0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	f000 fd6c 	bl	80157f4 <tcp_send_empty_ack>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	e152      	b.n	8014fc6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	2200      	movs	r2, #0
 8014d24:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d2c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014d2e:	6a3b      	ldr	r3, [r7, #32]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	f000 811c 	beq.w	8014f6e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014d36:	e002      	b.n	8014d3e <tcp_output+0x156>
 8014d38:	6a3b      	ldr	r3, [r7, #32]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	623b      	str	r3, [r7, #32]
 8014d3e:	6a3b      	ldr	r3, [r7, #32]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d1f8      	bne.n	8014d38 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014d46:	e112      	b.n	8014f6e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d4a:	68db      	ldr	r3, [r3, #12]
 8014d4c:	899b      	ldrh	r3, [r3, #12]
 8014d4e:	b29b      	uxth	r3, r3
 8014d50:	4618      	mov	r0, r3
 8014d52:	f7f9 f914 	bl	800df7e <lwip_htons>
 8014d56:	4603      	mov	r3, r0
 8014d58:	b2db      	uxtb	r3, r3
 8014d5a:	f003 0304 	and.w	r3, r3, #4
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d006      	beq.n	8014d70 <tcp_output+0x188>
 8014d62:	4b43      	ldr	r3, [pc, #268]	; (8014e70 <tcp_output+0x288>)
 8014d64:	f240 5236 	movw	r2, #1334	; 0x536
 8014d68:	4946      	ldr	r1, [pc, #280]	; (8014e84 <tcp_output+0x29c>)
 8014d6a:	4843      	ldr	r0, [pc, #268]	; (8014e78 <tcp_output+0x290>)
 8014d6c:	f004 f8c2 	bl	8018ef4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d020      	beq.n	8014dba <tcp_output+0x1d2>
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	8b5b      	ldrh	r3, [r3, #26]
 8014d7c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d11a      	bne.n	8014dba <tcp_output+0x1d2>
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d00b      	beq.n	8014da4 <tcp_output+0x1bc>
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d111      	bne.n	8014dba <tcp_output+0x1d2>
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d9a:	891a      	ldrh	r2, [r3, #8]
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014da0:	429a      	cmp	r2, r3
 8014da2:	d20a      	bcs.n	8014dba <tcp_output+0x1d2>
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d005      	beq.n	8014dba <tcp_output+0x1d2>
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014db4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014db8:	d301      	bcc.n	8014dbe <tcp_output+0x1d6>
 8014dba:	2301      	movs	r3, #1
 8014dbc:	e000      	b.n	8014dc0 <tcp_output+0x1d8>
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d106      	bne.n	8014dd2 <tcp_output+0x1ea>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	8b5b      	ldrh	r3, [r3, #26]
 8014dc8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	f000 80e3 	beq.w	8014f98 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	7d1b      	ldrb	r3, [r3, #20]
 8014dd6:	2b02      	cmp	r3, #2
 8014dd8:	d00d      	beq.n	8014df6 <tcp_output+0x20e>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ddc:	68db      	ldr	r3, [r3, #12]
 8014dde:	899b      	ldrh	r3, [r3, #12]
 8014de0:	b29c      	uxth	r4, r3
 8014de2:	2010      	movs	r0, #16
 8014de4:	f7f9 f8cb 	bl	800df7e <lwip_htons>
 8014de8:	4603      	mov	r3, r0
 8014dea:	461a      	mov	r2, r3
 8014dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dee:	68db      	ldr	r3, [r3, #12]
 8014df0:	4322      	orrs	r2, r4
 8014df2:	b292      	uxth	r2, r2
 8014df4:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014df6:	697a      	ldr	r2, [r7, #20]
 8014df8:	6879      	ldr	r1, [r7, #4]
 8014dfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014dfc:	f000 f908 	bl	8015010 <tcp_output_segment>
 8014e00:	4603      	mov	r3, r0
 8014e02:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d009      	beq.n	8014e20 <tcp_output+0x238>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	8b5b      	ldrh	r3, [r3, #26]
 8014e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e14:	b29a      	uxth	r2, r3
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	835a      	strh	r2, [r3, #26]
      return err;
 8014e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e1e:	e0d2      	b.n	8014fc6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e22:	681a      	ldr	r2, [r3, #0]
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	7d1b      	ldrb	r3, [r3, #20]
 8014e2c:	2b02      	cmp	r3, #2
 8014e2e:	d006      	beq.n	8014e3e <tcp_output+0x256>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	8b5b      	ldrh	r3, [r3, #26]
 8014e34:	f023 0303 	bic.w	r3, r3, #3
 8014e38:	b29a      	uxth	r2, r3
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e40:	68db      	ldr	r3, [r3, #12]
 8014e42:	685b      	ldr	r3, [r3, #4]
 8014e44:	4618      	mov	r0, r3
 8014e46:	f7f9 f8af 	bl	800dfa8 <lwip_htonl>
 8014e4a:	4604      	mov	r4, r0
 8014e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e4e:	891b      	ldrh	r3, [r3, #8]
 8014e50:	461d      	mov	r5, r3
 8014e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e54:	68db      	ldr	r3, [r3, #12]
 8014e56:	899b      	ldrh	r3, [r3, #12]
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f7f9 f88f 	bl	800df7e <lwip_htons>
 8014e60:	4603      	mov	r3, r0
 8014e62:	b2db      	uxtb	r3, r3
 8014e64:	f003 0303 	and.w	r3, r3, #3
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d00d      	beq.n	8014e88 <tcp_output+0x2a0>
 8014e6c:	2301      	movs	r3, #1
 8014e6e:	e00c      	b.n	8014e8a <tcp_output+0x2a2>
 8014e70:	0801bc60 	.word	0x0801bc60
 8014e74:	0801c1a4 	.word	0x0801c1a4
 8014e78:	0801bcb4 	.word	0x0801bcb4
 8014e7c:	0801c1bc 	.word	0x0801c1bc
 8014e80:	200187b0 	.word	0x200187b0
 8014e84:	0801c1e4 	.word	0x0801c1e4
 8014e88:	2300      	movs	r3, #0
 8014e8a:	442b      	add	r3, r5
 8014e8c:	4423      	add	r3, r4
 8014e8e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014e94:	68bb      	ldr	r3, [r7, #8]
 8014e96:	1ad3      	subs	r3, r2, r3
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	da02      	bge.n	8014ea2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	68ba      	ldr	r2, [r7, #8]
 8014ea0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea4:	891b      	ldrh	r3, [r3, #8]
 8014ea6:	461c      	mov	r4, r3
 8014ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eaa:	68db      	ldr	r3, [r3, #12]
 8014eac:	899b      	ldrh	r3, [r3, #12]
 8014eae:	b29b      	uxth	r3, r3
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7f9 f864 	bl	800df7e <lwip_htons>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	b2db      	uxtb	r3, r3
 8014eba:	f003 0303 	and.w	r3, r3, #3
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d001      	beq.n	8014ec6 <tcp_output+0x2de>
 8014ec2:	2301      	movs	r3, #1
 8014ec4:	e000      	b.n	8014ec8 <tcp_output+0x2e0>
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	4423      	add	r3, r4
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d049      	beq.n	8014f62 <tcp_output+0x37a>
      seg->next = NULL;
 8014ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d105      	bne.n	8014ee8 <tcp_output+0x300>
        pcb->unacked = seg;
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ee0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee4:	623b      	str	r3, [r7, #32]
 8014ee6:	e03f      	b.n	8014f68 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eea:	68db      	ldr	r3, [r3, #12]
 8014eec:	685b      	ldr	r3, [r3, #4]
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7f9 f85a 	bl	800dfa8 <lwip_htonl>
 8014ef4:	4604      	mov	r4, r0
 8014ef6:	6a3b      	ldr	r3, [r7, #32]
 8014ef8:	68db      	ldr	r3, [r3, #12]
 8014efa:	685b      	ldr	r3, [r3, #4]
 8014efc:	4618      	mov	r0, r3
 8014efe:	f7f9 f853 	bl	800dfa8 <lwip_htonl>
 8014f02:	4603      	mov	r3, r0
 8014f04:	1ae3      	subs	r3, r4, r3
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	da24      	bge.n	8014f54 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	3370      	adds	r3, #112	; 0x70
 8014f0e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014f10:	e002      	b.n	8014f18 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014f12:	69fb      	ldr	r3, [r7, #28]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014f18:	69fb      	ldr	r3, [r7, #28]
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d011      	beq.n	8014f44 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014f20:	69fb      	ldr	r3, [r7, #28]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	68db      	ldr	r3, [r3, #12]
 8014f26:	685b      	ldr	r3, [r3, #4]
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f7f9 f83d 	bl	800dfa8 <lwip_htonl>
 8014f2e:	4604      	mov	r4, r0
 8014f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f32:	68db      	ldr	r3, [r3, #12]
 8014f34:	685b      	ldr	r3, [r3, #4]
 8014f36:	4618      	mov	r0, r3
 8014f38:	f7f9 f836 	bl	800dfa8 <lwip_htonl>
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	dbe6      	blt.n	8014f12 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014f44:	69fb      	ldr	r3, [r7, #28]
 8014f46:	681a      	ldr	r2, [r3, #0]
 8014f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f4a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014f4c:	69fb      	ldr	r3, [r7, #28]
 8014f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f50:	601a      	str	r2, [r3, #0]
 8014f52:	e009      	b.n	8014f68 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014f54:	6a3b      	ldr	r3, [r7, #32]
 8014f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f58:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014f5a:	6a3b      	ldr	r3, [r7, #32]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	623b      	str	r3, [r7, #32]
 8014f60:	e002      	b.n	8014f68 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014f62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014f64:	f7fb ff35 	bl	8010dd2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f6c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d012      	beq.n	8014f9a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f76:	68db      	ldr	r3, [r3, #12]
 8014f78:	685b      	ldr	r3, [r3, #4]
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f7f9 f814 	bl	800dfa8 <lwip_htonl>
 8014f80:	4602      	mov	r2, r0
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f86:	1ad3      	subs	r3, r2, r3
 8014f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f8a:	8912      	ldrh	r2, [r2, #8]
 8014f8c:	4413      	add	r3, r2
  while (seg != NULL &&
 8014f8e:	69ba      	ldr	r2, [r7, #24]
 8014f90:	429a      	cmp	r2, r3
 8014f92:	f4bf aed9 	bcs.w	8014d48 <tcp_output+0x160>
 8014f96:	e000      	b.n	8014f9a <tcp_output+0x3b2>
      break;
 8014f98:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d108      	bne.n	8014fb4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014faa:	e004      	b.n	8014fb6 <tcp_output+0x3ce>
    goto output_done;
 8014fac:	bf00      	nop
 8014fae:	e002      	b.n	8014fb6 <tcp_output+0x3ce>
    goto output_done;
 8014fb0:	bf00      	nop
 8014fb2:	e000      	b.n	8014fb6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014fb4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	8b5b      	ldrh	r3, [r3, #26]
 8014fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014fbe:	b29a      	uxth	r2, r3
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014fc4:	2300      	movs	r3, #0
}
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	3728      	adds	r7, #40	; 0x28
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8014fce:	bf00      	nop

08014fd0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b082      	sub	sp, #8
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d106      	bne.n	8014fec <tcp_output_segment_busy+0x1c>
 8014fde:	4b09      	ldr	r3, [pc, #36]	; (8015004 <tcp_output_segment_busy+0x34>)
 8014fe0:	f240 529a 	movw	r2, #1434	; 0x59a
 8014fe4:	4908      	ldr	r1, [pc, #32]	; (8015008 <tcp_output_segment_busy+0x38>)
 8014fe6:	4809      	ldr	r0, [pc, #36]	; (801500c <tcp_output_segment_busy+0x3c>)
 8014fe8:	f003 ff84 	bl	8018ef4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	685b      	ldr	r3, [r3, #4]
 8014ff0:	7b9b      	ldrb	r3, [r3, #14]
 8014ff2:	2b01      	cmp	r3, #1
 8014ff4:	d001      	beq.n	8014ffa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	e000      	b.n	8014ffc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014ffa:	2300      	movs	r3, #0
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3708      	adds	r7, #8
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}
 8015004:	0801bc60 	.word	0x0801bc60
 8015008:	0801c1fc 	.word	0x0801c1fc
 801500c:	0801bcb4 	.word	0x0801bcb4

08015010 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015010:	b5b0      	push	{r4, r5, r7, lr}
 8015012:	b08c      	sub	sp, #48	; 0x30
 8015014:	af04      	add	r7, sp, #16
 8015016:	60f8      	str	r0, [r7, #12]
 8015018:	60b9      	str	r1, [r7, #8]
 801501a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d106      	bne.n	8015030 <tcp_output_segment+0x20>
 8015022:	4b63      	ldr	r3, [pc, #396]	; (80151b0 <tcp_output_segment+0x1a0>)
 8015024:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015028:	4962      	ldr	r1, [pc, #392]	; (80151b4 <tcp_output_segment+0x1a4>)
 801502a:	4863      	ldr	r0, [pc, #396]	; (80151b8 <tcp_output_segment+0x1a8>)
 801502c:	f003 ff62 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015030:	68bb      	ldr	r3, [r7, #8]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d106      	bne.n	8015044 <tcp_output_segment+0x34>
 8015036:	4b5e      	ldr	r3, [pc, #376]	; (80151b0 <tcp_output_segment+0x1a0>)
 8015038:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801503c:	495f      	ldr	r1, [pc, #380]	; (80151bc <tcp_output_segment+0x1ac>)
 801503e:	485e      	ldr	r0, [pc, #376]	; (80151b8 <tcp_output_segment+0x1a8>)
 8015040:	f003 ff58 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d106      	bne.n	8015058 <tcp_output_segment+0x48>
 801504a:	4b59      	ldr	r3, [pc, #356]	; (80151b0 <tcp_output_segment+0x1a0>)
 801504c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015050:	495b      	ldr	r1, [pc, #364]	; (80151c0 <tcp_output_segment+0x1b0>)
 8015052:	4859      	ldr	r0, [pc, #356]	; (80151b8 <tcp_output_segment+0x1a8>)
 8015054:	f003 ff4e 	bl	8018ef4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015058:	68f8      	ldr	r0, [r7, #12]
 801505a:	f7ff ffb9 	bl	8014fd0 <tcp_output_segment_busy>
 801505e:	4603      	mov	r3, r0
 8015060:	2b00      	cmp	r3, #0
 8015062:	d001      	beq.n	8015068 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015064:	2300      	movs	r3, #0
 8015066:	e09f      	b.n	80151a8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015068:	68bb      	ldr	r3, [r7, #8]
 801506a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	68dc      	ldr	r4, [r3, #12]
 8015070:	4610      	mov	r0, r2
 8015072:	f7f8 ff99 	bl	800dfa8 <lwip_htonl>
 8015076:	4603      	mov	r3, r0
 8015078:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801507a:	68bb      	ldr	r3, [r7, #8]
 801507c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	68dc      	ldr	r4, [r3, #12]
 8015082:	4610      	mov	r0, r2
 8015084:	f7f8 ff7b 	bl	800df7e <lwip_htons>
 8015088:	4603      	mov	r3, r0
 801508a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015090:	68ba      	ldr	r2, [r7, #8]
 8015092:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015094:	441a      	add	r2, r3
 8015096:	68bb      	ldr	r3, [r7, #8]
 8015098:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	68db      	ldr	r3, [r3, #12]
 801509e:	3314      	adds	r3, #20
 80150a0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	7a9b      	ldrb	r3, [r3, #10]
 80150a6:	f003 0301 	and.w	r3, r3, #1
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d015      	beq.n	80150da <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80150ae:	68bb      	ldr	r3, [r7, #8]
 80150b0:	3304      	adds	r3, #4
 80150b2:	461a      	mov	r2, r3
 80150b4:	6879      	ldr	r1, [r7, #4]
 80150b6:	f44f 60af 	mov.w	r0, #1400	; 0x578
 80150ba:	f7fc fa31 	bl	8011520 <tcp_eff_send_mss_netif>
 80150be:	4603      	mov	r3, r0
 80150c0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80150c2:	8b7b      	ldrh	r3, [r7, #26]
 80150c4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80150c8:	4618      	mov	r0, r3
 80150ca:	f7f8 ff6d 	bl	800dfa8 <lwip_htonl>
 80150ce:	4602      	mov	r2, r0
 80150d0:	69fb      	ldr	r3, [r7, #28]
 80150d2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80150d4:	69fb      	ldr	r3, [r7, #28]
 80150d6:	3304      	adds	r3, #4
 80150d8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80150da:	68bb      	ldr	r3, [r7, #8]
 80150dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	da02      	bge.n	80150ea <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80150e4:	68bb      	ldr	r3, [r7, #8]
 80150e6:	2200      	movs	r2, #0
 80150e8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d10c      	bne.n	801510c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80150f2:	4b34      	ldr	r3, [pc, #208]	; (80151c4 <tcp_output_segment+0x1b4>)
 80150f4:	681a      	ldr	r2, [r3, #0]
 80150f6:	68bb      	ldr	r3, [r7, #8]
 80150f8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	68db      	ldr	r3, [r3, #12]
 80150fe:	685b      	ldr	r3, [r3, #4]
 8015100:	4618      	mov	r0, r3
 8015102:	f7f8 ff51 	bl	800dfa8 <lwip_htonl>
 8015106:	4602      	mov	r2, r0
 8015108:	68bb      	ldr	r3, [r7, #8]
 801510a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	68da      	ldr	r2, [r3, #12]
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	685b      	ldr	r3, [r3, #4]
 8015114:	685b      	ldr	r3, [r3, #4]
 8015116:	1ad3      	subs	r3, r2, r3
 8015118:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	685b      	ldr	r3, [r3, #4]
 801511e:	8959      	ldrh	r1, [r3, #10]
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	685b      	ldr	r3, [r3, #4]
 8015124:	8b3a      	ldrh	r2, [r7, #24]
 8015126:	1a8a      	subs	r2, r1, r2
 8015128:	b292      	uxth	r2, r2
 801512a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	685b      	ldr	r3, [r3, #4]
 8015130:	8919      	ldrh	r1, [r3, #8]
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	685b      	ldr	r3, [r3, #4]
 8015136:	8b3a      	ldrh	r2, [r7, #24]
 8015138:	1a8a      	subs	r2, r1, r2
 801513a:	b292      	uxth	r2, r2
 801513c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	685b      	ldr	r3, [r3, #4]
 8015142:	68fa      	ldr	r2, [r7, #12]
 8015144:	68d2      	ldr	r2, [r2, #12]
 8015146:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	68db      	ldr	r3, [r3, #12]
 801514c:	2200      	movs	r2, #0
 801514e:	741a      	strb	r2, [r3, #16]
 8015150:	2200      	movs	r2, #0
 8015152:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	68db      	ldr	r3, [r3, #12]
 8015158:	f103 0214 	add.w	r2, r3, #20
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	7a9b      	ldrb	r3, [r3, #10]
 8015160:	009b      	lsls	r3, r3, #2
 8015162:	f003 0304 	and.w	r3, r3, #4
 8015166:	4413      	add	r3, r2
 8015168:	69fa      	ldr	r2, [r7, #28]
 801516a:	429a      	cmp	r2, r3
 801516c:	d006      	beq.n	801517c <tcp_output_segment+0x16c>
 801516e:	4b10      	ldr	r3, [pc, #64]	; (80151b0 <tcp_output_segment+0x1a0>)
 8015170:	f240 621c 	movw	r2, #1564	; 0x61c
 8015174:	4914      	ldr	r1, [pc, #80]	; (80151c8 <tcp_output_segment+0x1b8>)
 8015176:	4810      	ldr	r0, [pc, #64]	; (80151b8 <tcp_output_segment+0x1a8>)
 8015178:	f003 febc 	bl	8018ef4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	6858      	ldr	r0, [r3, #4]
 8015180:	68b9      	ldr	r1, [r7, #8]
 8015182:	68bb      	ldr	r3, [r7, #8]
 8015184:	1d1c      	adds	r4, r3, #4
 8015186:	68bb      	ldr	r3, [r7, #8]
 8015188:	7add      	ldrb	r5, [r3, #11]
 801518a:	68bb      	ldr	r3, [r7, #8]
 801518c:	7a9b      	ldrb	r3, [r3, #10]
 801518e:	687a      	ldr	r2, [r7, #4]
 8015190:	9202      	str	r2, [sp, #8]
 8015192:	2206      	movs	r2, #6
 8015194:	9201      	str	r2, [sp, #4]
 8015196:	9300      	str	r3, [sp, #0]
 8015198:	462b      	mov	r3, r5
 801519a:	4622      	mov	r2, r4
 801519c:	f002 fa36 	bl	801760c <ip4_output_if>
 80151a0:	4603      	mov	r3, r0
 80151a2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80151a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80151a8:	4618      	mov	r0, r3
 80151aa:	3720      	adds	r7, #32
 80151ac:	46bd      	mov	sp, r7
 80151ae:	bdb0      	pop	{r4, r5, r7, pc}
 80151b0:	0801bc60 	.word	0x0801bc60
 80151b4:	0801c224 	.word	0x0801c224
 80151b8:	0801bcb4 	.word	0x0801bcb4
 80151bc:	0801c244 	.word	0x0801c244
 80151c0:	0801c264 	.word	0x0801c264
 80151c4:	200187a0 	.word	0x200187a0
 80151c8:	0801c288 	.word	0x0801c288

080151cc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80151cc:	b5b0      	push	{r4, r5, r7, lr}
 80151ce:	b084      	sub	sp, #16
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d106      	bne.n	80151e8 <tcp_rexmit_rto_prepare+0x1c>
 80151da:	4b31      	ldr	r3, [pc, #196]	; (80152a0 <tcp_rexmit_rto_prepare+0xd4>)
 80151dc:	f240 6263 	movw	r2, #1635	; 0x663
 80151e0:	4930      	ldr	r1, [pc, #192]	; (80152a4 <tcp_rexmit_rto_prepare+0xd8>)
 80151e2:	4831      	ldr	r0, [pc, #196]	; (80152a8 <tcp_rexmit_rto_prepare+0xdc>)
 80151e4:	f003 fe86 	bl	8018ef4 <iprintf>

  if (pcb->unacked == NULL) {
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d102      	bne.n	80151f6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80151f0:	f06f 0305 	mvn.w	r3, #5
 80151f4:	e050      	b.n	8015298 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151fa:	60fb      	str	r3, [r7, #12]
 80151fc:	e00b      	b.n	8015216 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80151fe:	68f8      	ldr	r0, [r7, #12]
 8015200:	f7ff fee6 	bl	8014fd0 <tcp_output_segment_busy>
 8015204:	4603      	mov	r3, r0
 8015206:	2b00      	cmp	r3, #0
 8015208:	d002      	beq.n	8015210 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801520a:	f06f 0305 	mvn.w	r3, #5
 801520e:	e043      	b.n	8015298 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	60fb      	str	r3, [r7, #12]
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d1ef      	bne.n	80151fe <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801521e:	68f8      	ldr	r0, [r7, #12]
 8015220:	f7ff fed6 	bl	8014fd0 <tcp_output_segment_busy>
 8015224:	4603      	mov	r3, r0
 8015226:	2b00      	cmp	r3, #0
 8015228:	d002      	beq.n	8015230 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801522a:	f06f 0305 	mvn.w	r3, #5
 801522e:	e033      	b.n	8015298 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2200      	movs	r2, #0
 8015244:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	8b5b      	ldrh	r3, [r3, #26]
 801524a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801524e:	b29a      	uxth	r2, r3
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	68db      	ldr	r3, [r3, #12]
 8015258:	685b      	ldr	r3, [r3, #4]
 801525a:	4618      	mov	r0, r3
 801525c:	f7f8 fea4 	bl	800dfa8 <lwip_htonl>
 8015260:	4604      	mov	r4, r0
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	891b      	ldrh	r3, [r3, #8]
 8015266:	461d      	mov	r5, r3
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	68db      	ldr	r3, [r3, #12]
 801526c:	899b      	ldrh	r3, [r3, #12]
 801526e:	b29b      	uxth	r3, r3
 8015270:	4618      	mov	r0, r3
 8015272:	f7f8 fe84 	bl	800df7e <lwip_htons>
 8015276:	4603      	mov	r3, r0
 8015278:	b2db      	uxtb	r3, r3
 801527a:	f003 0303 	and.w	r3, r3, #3
 801527e:	2b00      	cmp	r3, #0
 8015280:	d001      	beq.n	8015286 <tcp_rexmit_rto_prepare+0xba>
 8015282:	2301      	movs	r3, #1
 8015284:	e000      	b.n	8015288 <tcp_rexmit_rto_prepare+0xbc>
 8015286:	2300      	movs	r3, #0
 8015288:	442b      	add	r3, r5
 801528a:	18e2      	adds	r2, r4, r3
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	2200      	movs	r2, #0
 8015294:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015296:	2300      	movs	r3, #0
}
 8015298:	4618      	mov	r0, r3
 801529a:	3710      	adds	r7, #16
 801529c:	46bd      	mov	sp, r7
 801529e:	bdb0      	pop	{r4, r5, r7, pc}
 80152a0:	0801bc60 	.word	0x0801bc60
 80152a4:	0801c29c 	.word	0x0801c29c
 80152a8:	0801bcb4 	.word	0x0801bcb4

080152ac <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b082      	sub	sp, #8
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d106      	bne.n	80152c8 <tcp_rexmit_rto_commit+0x1c>
 80152ba:	4b0d      	ldr	r3, [pc, #52]	; (80152f0 <tcp_rexmit_rto_commit+0x44>)
 80152bc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80152c0:	490c      	ldr	r1, [pc, #48]	; (80152f4 <tcp_rexmit_rto_commit+0x48>)
 80152c2:	480d      	ldr	r0, [pc, #52]	; (80152f8 <tcp_rexmit_rto_commit+0x4c>)
 80152c4:	f003 fe16 	bl	8018ef4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80152ce:	2bff      	cmp	r3, #255	; 0xff
 80152d0:	d007      	beq.n	80152e2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80152d8:	3301      	adds	r3, #1
 80152da:	b2da      	uxtb	r2, r3
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80152e2:	6878      	ldr	r0, [r7, #4]
 80152e4:	f7ff fc80 	bl	8014be8 <tcp_output>
}
 80152e8:	bf00      	nop
 80152ea:	3708      	adds	r7, #8
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd80      	pop	{r7, pc}
 80152f0:	0801bc60 	.word	0x0801bc60
 80152f4:	0801c2c0 	.word	0x0801c2c0
 80152f8:	0801bcb4 	.word	0x0801bcb4

080152fc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b082      	sub	sp, #8
 8015300:	af00      	add	r7, sp, #0
 8015302:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d106      	bne.n	8015318 <tcp_rexmit_rto+0x1c>
 801530a:	4b0a      	ldr	r3, [pc, #40]	; (8015334 <tcp_rexmit_rto+0x38>)
 801530c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015310:	4909      	ldr	r1, [pc, #36]	; (8015338 <tcp_rexmit_rto+0x3c>)
 8015312:	480a      	ldr	r0, [pc, #40]	; (801533c <tcp_rexmit_rto+0x40>)
 8015314:	f003 fdee 	bl	8018ef4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015318:	6878      	ldr	r0, [r7, #4]
 801531a:	f7ff ff57 	bl	80151cc <tcp_rexmit_rto_prepare>
 801531e:	4603      	mov	r3, r0
 8015320:	2b00      	cmp	r3, #0
 8015322:	d102      	bne.n	801532a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015324:	6878      	ldr	r0, [r7, #4]
 8015326:	f7ff ffc1 	bl	80152ac <tcp_rexmit_rto_commit>
  }
}
 801532a:	bf00      	nop
 801532c:	3708      	adds	r7, #8
 801532e:	46bd      	mov	sp, r7
 8015330:	bd80      	pop	{r7, pc}
 8015332:	bf00      	nop
 8015334:	0801bc60 	.word	0x0801bc60
 8015338:	0801c2e4 	.word	0x0801c2e4
 801533c:	0801bcb4 	.word	0x0801bcb4

08015340 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015340:	b590      	push	{r4, r7, lr}
 8015342:	b085      	sub	sp, #20
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d106      	bne.n	801535c <tcp_rexmit+0x1c>
 801534e:	4b2f      	ldr	r3, [pc, #188]	; (801540c <tcp_rexmit+0xcc>)
 8015350:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015354:	492e      	ldr	r1, [pc, #184]	; (8015410 <tcp_rexmit+0xd0>)
 8015356:	482f      	ldr	r0, [pc, #188]	; (8015414 <tcp_rexmit+0xd4>)
 8015358:	f003 fdcc 	bl	8018ef4 <iprintf>

  if (pcb->unacked == NULL) {
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015360:	2b00      	cmp	r3, #0
 8015362:	d102      	bne.n	801536a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015364:	f06f 0305 	mvn.w	r3, #5
 8015368:	e04c      	b.n	8015404 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801536e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015370:	68b8      	ldr	r0, [r7, #8]
 8015372:	f7ff fe2d 	bl	8014fd0 <tcp_output_segment_busy>
 8015376:	4603      	mov	r3, r0
 8015378:	2b00      	cmp	r3, #0
 801537a:	d002      	beq.n	8015382 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801537c:	f06f 0305 	mvn.w	r3, #5
 8015380:	e040      	b.n	8015404 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015382:	68bb      	ldr	r3, [r7, #8]
 8015384:	681a      	ldr	r2, [r3, #0]
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	336c      	adds	r3, #108	; 0x6c
 801538e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015390:	e002      	b.n	8015398 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	2b00      	cmp	r3, #0
 801539e:	d011      	beq.n	80153c4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	68db      	ldr	r3, [r3, #12]
 80153a6:	685b      	ldr	r3, [r3, #4]
 80153a8:	4618      	mov	r0, r3
 80153aa:	f7f8 fdfd 	bl	800dfa8 <lwip_htonl>
 80153ae:	4604      	mov	r4, r0
 80153b0:	68bb      	ldr	r3, [r7, #8]
 80153b2:	68db      	ldr	r3, [r3, #12]
 80153b4:	685b      	ldr	r3, [r3, #4]
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7f8 fdf6 	bl	800dfa8 <lwip_htonl>
 80153bc:	4603      	mov	r3, r0
 80153be:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	dbe6      	blt.n	8015392 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	681a      	ldr	r2, [r3, #0]
 80153c8:	68bb      	ldr	r3, [r7, #8]
 80153ca:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	68ba      	ldr	r2, [r7, #8]
 80153d0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80153d2:	68bb      	ldr	r3, [r7, #8]
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d103      	bne.n	80153e2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	2200      	movs	r2, #0
 80153de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80153e8:	2bff      	cmp	r3, #255	; 0xff
 80153ea:	d007      	beq.n	80153fc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80153f2:	3301      	adds	r3, #1
 80153f4:	b2da      	uxtb	r2, r3
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2200      	movs	r2, #0
 8015400:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015402:	2300      	movs	r3, #0
}
 8015404:	4618      	mov	r0, r3
 8015406:	3714      	adds	r7, #20
 8015408:	46bd      	mov	sp, r7
 801540a:	bd90      	pop	{r4, r7, pc}
 801540c:	0801bc60 	.word	0x0801bc60
 8015410:	0801c300 	.word	0x0801c300
 8015414:	0801bcb4 	.word	0x0801bcb4

08015418 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b082      	sub	sp, #8
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d106      	bne.n	8015434 <tcp_rexmit_fast+0x1c>
 8015426:	4b2a      	ldr	r3, [pc, #168]	; (80154d0 <tcp_rexmit_fast+0xb8>)
 8015428:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801542c:	4929      	ldr	r1, [pc, #164]	; (80154d4 <tcp_rexmit_fast+0xbc>)
 801542e:	482a      	ldr	r0, [pc, #168]	; (80154d8 <tcp_rexmit_fast+0xc0>)
 8015430:	f003 fd60 	bl	8018ef4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015438:	2b00      	cmp	r3, #0
 801543a:	d044      	beq.n	80154c6 <tcp_rexmit_fast+0xae>
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	8b5b      	ldrh	r3, [r3, #26]
 8015440:	f003 0304 	and.w	r3, r3, #4
 8015444:	2b00      	cmp	r3, #0
 8015446:	d13e      	bne.n	80154c6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015448:	6878      	ldr	r0, [r7, #4]
 801544a:	f7ff ff79 	bl	8015340 <tcp_rexmit>
 801544e:	4603      	mov	r3, r0
 8015450:	2b00      	cmp	r3, #0
 8015452:	d138      	bne.n	80154c6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015460:	4293      	cmp	r3, r2
 8015462:	bf28      	it	cs
 8015464:	4613      	movcs	r3, r2
 8015466:	b29b      	uxth	r3, r3
 8015468:	0fda      	lsrs	r2, r3, #31
 801546a:	4413      	add	r3, r2
 801546c:	105b      	asrs	r3, r3, #1
 801546e:	b29a      	uxth	r2, r3
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801547c:	461a      	mov	r2, r3
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015482:	005b      	lsls	r3, r3, #1
 8015484:	429a      	cmp	r2, r3
 8015486:	d206      	bcs.n	8015496 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801548c:	005b      	lsls	r3, r3, #1
 801548e:	b29a      	uxth	r2, r3
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80154a0:	4619      	mov	r1, r3
 80154a2:	0049      	lsls	r1, r1, #1
 80154a4:	440b      	add	r3, r1
 80154a6:	b29b      	uxth	r3, r3
 80154a8:	4413      	add	r3, r2
 80154aa:	b29a      	uxth	r2, r3
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	8b5b      	ldrh	r3, [r3, #26]
 80154b6:	f043 0304 	orr.w	r3, r3, #4
 80154ba:	b29a      	uxth	r2, r3
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	2200      	movs	r2, #0
 80154c4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80154c6:	bf00      	nop
 80154c8:	3708      	adds	r7, #8
 80154ca:	46bd      	mov	sp, r7
 80154cc:	bd80      	pop	{r7, pc}
 80154ce:	bf00      	nop
 80154d0:	0801bc60 	.word	0x0801bc60
 80154d4:	0801c318 	.word	0x0801c318
 80154d8:	0801bcb4 	.word	0x0801bcb4

080154dc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b086      	sub	sp, #24
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	60f8      	str	r0, [r7, #12]
 80154e4:	607b      	str	r3, [r7, #4]
 80154e6:	460b      	mov	r3, r1
 80154e8:	817b      	strh	r3, [r7, #10]
 80154ea:	4613      	mov	r3, r2
 80154ec:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80154ee:	897a      	ldrh	r2, [r7, #10]
 80154f0:	893b      	ldrh	r3, [r7, #8]
 80154f2:	4413      	add	r3, r2
 80154f4:	b29b      	uxth	r3, r3
 80154f6:	3314      	adds	r3, #20
 80154f8:	b29b      	uxth	r3, r3
 80154fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154fe:	4619      	mov	r1, r3
 8015500:	2022      	movs	r0, #34	; 0x22
 8015502:	f7f9 fd1b 	bl	800ef3c <pbuf_alloc>
 8015506:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015508:	697b      	ldr	r3, [r7, #20]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d04d      	beq.n	80155aa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801550e:	897b      	ldrh	r3, [r7, #10]
 8015510:	3313      	adds	r3, #19
 8015512:	697a      	ldr	r2, [r7, #20]
 8015514:	8952      	ldrh	r2, [r2, #10]
 8015516:	4293      	cmp	r3, r2
 8015518:	db06      	blt.n	8015528 <tcp_output_alloc_header_common+0x4c>
 801551a:	4b26      	ldr	r3, [pc, #152]	; (80155b4 <tcp_output_alloc_header_common+0xd8>)
 801551c:	f240 7223 	movw	r2, #1827	; 0x723
 8015520:	4925      	ldr	r1, [pc, #148]	; (80155b8 <tcp_output_alloc_header_common+0xdc>)
 8015522:	4826      	ldr	r0, [pc, #152]	; (80155bc <tcp_output_alloc_header_common+0xe0>)
 8015524:	f003 fce6 	bl	8018ef4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015528:	697b      	ldr	r3, [r7, #20]
 801552a:	685b      	ldr	r3, [r3, #4]
 801552c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801552e:	8c3b      	ldrh	r3, [r7, #32]
 8015530:	4618      	mov	r0, r3
 8015532:	f7f8 fd24 	bl	800df7e <lwip_htons>
 8015536:	4603      	mov	r3, r0
 8015538:	461a      	mov	r2, r3
 801553a:	693b      	ldr	r3, [r7, #16]
 801553c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801553e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015540:	4618      	mov	r0, r3
 8015542:	f7f8 fd1c 	bl	800df7e <lwip_htons>
 8015546:	4603      	mov	r3, r0
 8015548:	461a      	mov	r2, r3
 801554a:	693b      	ldr	r3, [r7, #16]
 801554c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801554e:	693b      	ldr	r3, [r7, #16]
 8015550:	687a      	ldr	r2, [r7, #4]
 8015552:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015554:	68f8      	ldr	r0, [r7, #12]
 8015556:	f7f8 fd27 	bl	800dfa8 <lwip_htonl>
 801555a:	4602      	mov	r2, r0
 801555c:	693b      	ldr	r3, [r7, #16]
 801555e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015560:	897b      	ldrh	r3, [r7, #10]
 8015562:	089b      	lsrs	r3, r3, #2
 8015564:	b29b      	uxth	r3, r3
 8015566:	3305      	adds	r3, #5
 8015568:	b29b      	uxth	r3, r3
 801556a:	031b      	lsls	r3, r3, #12
 801556c:	b29a      	uxth	r2, r3
 801556e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015572:	b29b      	uxth	r3, r3
 8015574:	4313      	orrs	r3, r2
 8015576:	b29b      	uxth	r3, r3
 8015578:	4618      	mov	r0, r3
 801557a:	f7f8 fd00 	bl	800df7e <lwip_htons>
 801557e:	4603      	mov	r3, r0
 8015580:	461a      	mov	r2, r3
 8015582:	693b      	ldr	r3, [r7, #16]
 8015584:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015586:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015588:	4618      	mov	r0, r3
 801558a:	f7f8 fcf8 	bl	800df7e <lwip_htons>
 801558e:	4603      	mov	r3, r0
 8015590:	461a      	mov	r2, r3
 8015592:	693b      	ldr	r3, [r7, #16]
 8015594:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015596:	693b      	ldr	r3, [r7, #16]
 8015598:	2200      	movs	r2, #0
 801559a:	741a      	strb	r2, [r3, #16]
 801559c:	2200      	movs	r2, #0
 801559e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80155a0:	693b      	ldr	r3, [r7, #16]
 80155a2:	2200      	movs	r2, #0
 80155a4:	749a      	strb	r2, [r3, #18]
 80155a6:	2200      	movs	r2, #0
 80155a8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80155aa:	697b      	ldr	r3, [r7, #20]
}
 80155ac:	4618      	mov	r0, r3
 80155ae:	3718      	adds	r7, #24
 80155b0:	46bd      	mov	sp, r7
 80155b2:	bd80      	pop	{r7, pc}
 80155b4:	0801bc60 	.word	0x0801bc60
 80155b8:	0801c338 	.word	0x0801c338
 80155bc:	0801bcb4 	.word	0x0801bcb4

080155c0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80155c0:	b5b0      	push	{r4, r5, r7, lr}
 80155c2:	b08a      	sub	sp, #40	; 0x28
 80155c4:	af04      	add	r7, sp, #16
 80155c6:	60f8      	str	r0, [r7, #12]
 80155c8:	607b      	str	r3, [r7, #4]
 80155ca:	460b      	mov	r3, r1
 80155cc:	817b      	strh	r3, [r7, #10]
 80155ce:	4613      	mov	r3, r2
 80155d0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d106      	bne.n	80155e6 <tcp_output_alloc_header+0x26>
 80155d8:	4b15      	ldr	r3, [pc, #84]	; (8015630 <tcp_output_alloc_header+0x70>)
 80155da:	f240 7242 	movw	r2, #1858	; 0x742
 80155de:	4915      	ldr	r1, [pc, #84]	; (8015634 <tcp_output_alloc_header+0x74>)
 80155e0:	4815      	ldr	r0, [pc, #84]	; (8015638 <tcp_output_alloc_header+0x78>)
 80155e2:	f003 fc87 	bl	8018ef4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	8adb      	ldrh	r3, [r3, #22]
 80155ee:	68fa      	ldr	r2, [r7, #12]
 80155f0:	8b12      	ldrh	r2, [r2, #24]
 80155f2:	68f9      	ldr	r1, [r7, #12]
 80155f4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80155f6:	893d      	ldrh	r5, [r7, #8]
 80155f8:	897c      	ldrh	r4, [r7, #10]
 80155fa:	9103      	str	r1, [sp, #12]
 80155fc:	2110      	movs	r1, #16
 80155fe:	9102      	str	r1, [sp, #8]
 8015600:	9201      	str	r2, [sp, #4]
 8015602:	9300      	str	r3, [sp, #0]
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	462a      	mov	r2, r5
 8015608:	4621      	mov	r1, r4
 801560a:	f7ff ff67 	bl	80154dc <tcp_output_alloc_header_common>
 801560e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015610:	697b      	ldr	r3, [r7, #20]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d006      	beq.n	8015624 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801561a:	68fa      	ldr	r2, [r7, #12]
 801561c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801561e:	441a      	add	r2, r3
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015624:	697b      	ldr	r3, [r7, #20]
}
 8015626:	4618      	mov	r0, r3
 8015628:	3718      	adds	r7, #24
 801562a:	46bd      	mov	sp, r7
 801562c:	bdb0      	pop	{r4, r5, r7, pc}
 801562e:	bf00      	nop
 8015630:	0801bc60 	.word	0x0801bc60
 8015634:	0801c368 	.word	0x0801c368
 8015638:	0801bcb4 	.word	0x0801bcb4

0801563c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b088      	sub	sp, #32
 8015640:	af00      	add	r7, sp, #0
 8015642:	60f8      	str	r0, [r7, #12]
 8015644:	60b9      	str	r1, [r7, #8]
 8015646:	4611      	mov	r1, r2
 8015648:	461a      	mov	r2, r3
 801564a:	460b      	mov	r3, r1
 801564c:	71fb      	strb	r3, [r7, #7]
 801564e:	4613      	mov	r3, r2
 8015650:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015652:	2300      	movs	r3, #0
 8015654:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015656:	68bb      	ldr	r3, [r7, #8]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d106      	bne.n	801566a <tcp_output_fill_options+0x2e>
 801565c:	4b13      	ldr	r3, [pc, #76]	; (80156ac <tcp_output_fill_options+0x70>)
 801565e:	f240 7256 	movw	r2, #1878	; 0x756
 8015662:	4913      	ldr	r1, [pc, #76]	; (80156b0 <tcp_output_fill_options+0x74>)
 8015664:	4813      	ldr	r0, [pc, #76]	; (80156b4 <tcp_output_fill_options+0x78>)
 8015666:	f003 fc45 	bl	8018ef4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801566a:	68bb      	ldr	r3, [r7, #8]
 801566c:	685b      	ldr	r3, [r3, #4]
 801566e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015670:	69bb      	ldr	r3, [r7, #24]
 8015672:	3314      	adds	r3, #20
 8015674:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015676:	69bb      	ldr	r3, [r7, #24]
 8015678:	f103 0214 	add.w	r2, r3, #20
 801567c:	8bfb      	ldrh	r3, [r7, #30]
 801567e:	009b      	lsls	r3, r3, #2
 8015680:	4619      	mov	r1, r3
 8015682:	79fb      	ldrb	r3, [r7, #7]
 8015684:	009b      	lsls	r3, r3, #2
 8015686:	f003 0304 	and.w	r3, r3, #4
 801568a:	440b      	add	r3, r1
 801568c:	4413      	add	r3, r2
 801568e:	697a      	ldr	r2, [r7, #20]
 8015690:	429a      	cmp	r2, r3
 8015692:	d006      	beq.n	80156a2 <tcp_output_fill_options+0x66>
 8015694:	4b05      	ldr	r3, [pc, #20]	; (80156ac <tcp_output_fill_options+0x70>)
 8015696:	f240 7275 	movw	r2, #1909	; 0x775
 801569a:	4907      	ldr	r1, [pc, #28]	; (80156b8 <tcp_output_fill_options+0x7c>)
 801569c:	4805      	ldr	r0, [pc, #20]	; (80156b4 <tcp_output_fill_options+0x78>)
 801569e:	f003 fc29 	bl	8018ef4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80156a2:	bf00      	nop
 80156a4:	3720      	adds	r7, #32
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}
 80156aa:	bf00      	nop
 80156ac:	0801bc60 	.word	0x0801bc60
 80156b0:	0801c390 	.word	0x0801c390
 80156b4:	0801bcb4 	.word	0x0801bcb4
 80156b8:	0801c288 	.word	0x0801c288

080156bc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b08a      	sub	sp, #40	; 0x28
 80156c0:	af04      	add	r7, sp, #16
 80156c2:	60f8      	str	r0, [r7, #12]
 80156c4:	60b9      	str	r1, [r7, #8]
 80156c6:	607a      	str	r2, [r7, #4]
 80156c8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80156ca:	68bb      	ldr	r3, [r7, #8]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d106      	bne.n	80156de <tcp_output_control_segment+0x22>
 80156d0:	4b1c      	ldr	r3, [pc, #112]	; (8015744 <tcp_output_control_segment+0x88>)
 80156d2:	f240 7287 	movw	r2, #1927	; 0x787
 80156d6:	491c      	ldr	r1, [pc, #112]	; (8015748 <tcp_output_control_segment+0x8c>)
 80156d8:	481c      	ldr	r0, [pc, #112]	; (801574c <tcp_output_control_segment+0x90>)
 80156da:	f003 fc0b 	bl	8018ef4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80156de:	683a      	ldr	r2, [r7, #0]
 80156e0:	6879      	ldr	r1, [r7, #4]
 80156e2:	68f8      	ldr	r0, [r7, #12]
 80156e4:	f7fe fae4 	bl	8013cb0 <tcp_route>
 80156e8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80156ea:	693b      	ldr	r3, [r7, #16]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d102      	bne.n	80156f6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80156f0:	23fc      	movs	r3, #252	; 0xfc
 80156f2:	75fb      	strb	r3, [r7, #23]
 80156f4:	e01c      	b.n	8015730 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d006      	beq.n	801570a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	7adb      	ldrb	r3, [r3, #11]
 8015700:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	7a9b      	ldrb	r3, [r3, #10]
 8015706:	757b      	strb	r3, [r7, #21]
 8015708:	e003      	b.n	8015712 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801570a:	23ff      	movs	r3, #255	; 0xff
 801570c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801570e:	2300      	movs	r3, #0
 8015710:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015712:	7dba      	ldrb	r2, [r7, #22]
 8015714:	693b      	ldr	r3, [r7, #16]
 8015716:	9302      	str	r3, [sp, #8]
 8015718:	2306      	movs	r3, #6
 801571a:	9301      	str	r3, [sp, #4]
 801571c:	7d7b      	ldrb	r3, [r7, #21]
 801571e:	9300      	str	r3, [sp, #0]
 8015720:	4613      	mov	r3, r2
 8015722:	683a      	ldr	r2, [r7, #0]
 8015724:	6879      	ldr	r1, [r7, #4]
 8015726:	68b8      	ldr	r0, [r7, #8]
 8015728:	f001 ff70 	bl	801760c <ip4_output_if>
 801572c:	4603      	mov	r3, r0
 801572e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015730:	68b8      	ldr	r0, [r7, #8]
 8015732:	f7f9 fee7 	bl	800f504 <pbuf_free>
  return err;
 8015736:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801573a:	4618      	mov	r0, r3
 801573c:	3718      	adds	r7, #24
 801573e:	46bd      	mov	sp, r7
 8015740:	bd80      	pop	{r7, pc}
 8015742:	bf00      	nop
 8015744:	0801bc60 	.word	0x0801bc60
 8015748:	0801c3b8 	.word	0x0801c3b8
 801574c:	0801bcb4 	.word	0x0801bcb4

08015750 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015750:	b590      	push	{r4, r7, lr}
 8015752:	b08b      	sub	sp, #44	; 0x2c
 8015754:	af04      	add	r7, sp, #16
 8015756:	60f8      	str	r0, [r7, #12]
 8015758:	60b9      	str	r1, [r7, #8]
 801575a:	607a      	str	r2, [r7, #4]
 801575c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801575e:	683b      	ldr	r3, [r7, #0]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d106      	bne.n	8015772 <tcp_rst+0x22>
 8015764:	4b1f      	ldr	r3, [pc, #124]	; (80157e4 <tcp_rst+0x94>)
 8015766:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801576a:	491f      	ldr	r1, [pc, #124]	; (80157e8 <tcp_rst+0x98>)
 801576c:	481f      	ldr	r0, [pc, #124]	; (80157ec <tcp_rst+0x9c>)
 801576e:	f003 fbc1 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015774:	2b00      	cmp	r3, #0
 8015776:	d106      	bne.n	8015786 <tcp_rst+0x36>
 8015778:	4b1a      	ldr	r3, [pc, #104]	; (80157e4 <tcp_rst+0x94>)
 801577a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801577e:	491c      	ldr	r1, [pc, #112]	; (80157f0 <tcp_rst+0xa0>)
 8015780:	481a      	ldr	r0, [pc, #104]	; (80157ec <tcp_rst+0x9c>)
 8015782:	f003 fbb7 	bl	8018ef4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015786:	2300      	movs	r3, #0
 8015788:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801578a:	f646 0310 	movw	r3, #26640	; 0x6810
 801578e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015790:	7dfb      	ldrb	r3, [r7, #23]
 8015792:	b29c      	uxth	r4, r3
 8015794:	68b8      	ldr	r0, [r7, #8]
 8015796:	f7f8 fc07 	bl	800dfa8 <lwip_htonl>
 801579a:	4602      	mov	r2, r0
 801579c:	8abb      	ldrh	r3, [r7, #20]
 801579e:	9303      	str	r3, [sp, #12]
 80157a0:	2314      	movs	r3, #20
 80157a2:	9302      	str	r3, [sp, #8]
 80157a4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80157a6:	9301      	str	r3, [sp, #4]
 80157a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80157aa:	9300      	str	r3, [sp, #0]
 80157ac:	4613      	mov	r3, r2
 80157ae:	2200      	movs	r2, #0
 80157b0:	4621      	mov	r1, r4
 80157b2:	6878      	ldr	r0, [r7, #4]
 80157b4:	f7ff fe92 	bl	80154dc <tcp_output_alloc_header_common>
 80157b8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80157ba:	693b      	ldr	r3, [r7, #16]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d00c      	beq.n	80157da <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80157c0:	7dfb      	ldrb	r3, [r7, #23]
 80157c2:	2200      	movs	r2, #0
 80157c4:	6939      	ldr	r1, [r7, #16]
 80157c6:	68f8      	ldr	r0, [r7, #12]
 80157c8:	f7ff ff38 	bl	801563c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80157cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ce:	683a      	ldr	r2, [r7, #0]
 80157d0:	6939      	ldr	r1, [r7, #16]
 80157d2:	68f8      	ldr	r0, [r7, #12]
 80157d4:	f7ff ff72 	bl	80156bc <tcp_output_control_segment>
 80157d8:	e000      	b.n	80157dc <tcp_rst+0x8c>
    return;
 80157da:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80157dc:	371c      	adds	r7, #28
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd90      	pop	{r4, r7, pc}
 80157e2:	bf00      	nop
 80157e4:	0801bc60 	.word	0x0801bc60
 80157e8:	0801c3e4 	.word	0x0801c3e4
 80157ec:	0801bcb4 	.word	0x0801bcb4
 80157f0:	0801c400 	.word	0x0801c400

080157f4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80157f4:	b590      	push	{r4, r7, lr}
 80157f6:	b087      	sub	sp, #28
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80157fc:	2300      	movs	r3, #0
 80157fe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015800:	2300      	movs	r3, #0
 8015802:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d106      	bne.n	8015818 <tcp_send_empty_ack+0x24>
 801580a:	4b28      	ldr	r3, [pc, #160]	; (80158ac <tcp_send_empty_ack+0xb8>)
 801580c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015810:	4927      	ldr	r1, [pc, #156]	; (80158b0 <tcp_send_empty_ack+0xbc>)
 8015812:	4828      	ldr	r0, [pc, #160]	; (80158b4 <tcp_send_empty_ack+0xc0>)
 8015814:	f003 fb6e 	bl	8018ef4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015818:	7dfb      	ldrb	r3, [r7, #23]
 801581a:	009b      	lsls	r3, r3, #2
 801581c:	b2db      	uxtb	r3, r3
 801581e:	f003 0304 	and.w	r3, r3, #4
 8015822:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015824:	7d7b      	ldrb	r3, [r7, #21]
 8015826:	b29c      	uxth	r4, r3
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801582c:	4618      	mov	r0, r3
 801582e:	f7f8 fbbb 	bl	800dfa8 <lwip_htonl>
 8015832:	4603      	mov	r3, r0
 8015834:	2200      	movs	r2, #0
 8015836:	4621      	mov	r1, r4
 8015838:	6878      	ldr	r0, [r7, #4]
 801583a:	f7ff fec1 	bl	80155c0 <tcp_output_alloc_header>
 801583e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015840:	693b      	ldr	r3, [r7, #16]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d109      	bne.n	801585a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	8b5b      	ldrh	r3, [r3, #26]
 801584a:	f043 0303 	orr.w	r3, r3, #3
 801584e:	b29a      	uxth	r2, r3
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015854:	f06f 0301 	mvn.w	r3, #1
 8015858:	e023      	b.n	80158a2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801585a:	7dbb      	ldrb	r3, [r7, #22]
 801585c:	7dfa      	ldrb	r2, [r7, #23]
 801585e:	6939      	ldr	r1, [r7, #16]
 8015860:	6878      	ldr	r0, [r7, #4]
 8015862:	f7ff feeb 	bl	801563c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015866:	687a      	ldr	r2, [r7, #4]
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	3304      	adds	r3, #4
 801586c:	6939      	ldr	r1, [r7, #16]
 801586e:	6878      	ldr	r0, [r7, #4]
 8015870:	f7ff ff24 	bl	80156bc <tcp_output_control_segment>
 8015874:	4603      	mov	r3, r0
 8015876:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d007      	beq.n	8015890 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	8b5b      	ldrh	r3, [r3, #26]
 8015884:	f043 0303 	orr.w	r3, r3, #3
 8015888:	b29a      	uxth	r2, r3
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	835a      	strh	r2, [r3, #26]
 801588e:	e006      	b.n	801589e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	8b5b      	ldrh	r3, [r3, #26]
 8015894:	f023 0303 	bic.w	r3, r3, #3
 8015898:	b29a      	uxth	r2, r3
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801589e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80158a2:	4618      	mov	r0, r3
 80158a4:	371c      	adds	r7, #28
 80158a6:	46bd      	mov	sp, r7
 80158a8:	bd90      	pop	{r4, r7, pc}
 80158aa:	bf00      	nop
 80158ac:	0801bc60 	.word	0x0801bc60
 80158b0:	0801c41c 	.word	0x0801c41c
 80158b4:	0801bcb4 	.word	0x0801bcb4

080158b8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80158b8:	b590      	push	{r4, r7, lr}
 80158ba:	b087      	sub	sp, #28
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80158c0:	2300      	movs	r3, #0
 80158c2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d106      	bne.n	80158d8 <tcp_keepalive+0x20>
 80158ca:	4b18      	ldr	r3, [pc, #96]	; (801592c <tcp_keepalive+0x74>)
 80158cc:	f640 0224 	movw	r2, #2084	; 0x824
 80158d0:	4917      	ldr	r1, [pc, #92]	; (8015930 <tcp_keepalive+0x78>)
 80158d2:	4818      	ldr	r0, [pc, #96]	; (8015934 <tcp_keepalive+0x7c>)
 80158d4:	f003 fb0e 	bl	8018ef4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80158d8:	7dfb      	ldrb	r3, [r7, #23]
 80158da:	b29c      	uxth	r4, r3
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158e0:	3b01      	subs	r3, #1
 80158e2:	4618      	mov	r0, r3
 80158e4:	f7f8 fb60 	bl	800dfa8 <lwip_htonl>
 80158e8:	4603      	mov	r3, r0
 80158ea:	2200      	movs	r2, #0
 80158ec:	4621      	mov	r1, r4
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	f7ff fe66 	bl	80155c0 <tcp_output_alloc_header>
 80158f4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80158f6:	693b      	ldr	r3, [r7, #16]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d102      	bne.n	8015902 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80158fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015900:	e010      	b.n	8015924 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015902:	7dfb      	ldrb	r3, [r7, #23]
 8015904:	2200      	movs	r2, #0
 8015906:	6939      	ldr	r1, [r7, #16]
 8015908:	6878      	ldr	r0, [r7, #4]
 801590a:	f7ff fe97 	bl	801563c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801590e:	687a      	ldr	r2, [r7, #4]
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	3304      	adds	r3, #4
 8015914:	6939      	ldr	r1, [r7, #16]
 8015916:	6878      	ldr	r0, [r7, #4]
 8015918:	f7ff fed0 	bl	80156bc <tcp_output_control_segment>
 801591c:	4603      	mov	r3, r0
 801591e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015920:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015924:	4618      	mov	r0, r3
 8015926:	371c      	adds	r7, #28
 8015928:	46bd      	mov	sp, r7
 801592a:	bd90      	pop	{r4, r7, pc}
 801592c:	0801bc60 	.word	0x0801bc60
 8015930:	0801c43c 	.word	0x0801c43c
 8015934:	0801bcb4 	.word	0x0801bcb4

08015938 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015938:	b590      	push	{r4, r7, lr}
 801593a:	b08b      	sub	sp, #44	; 0x2c
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015940:	2300      	movs	r3, #0
 8015942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d106      	bne.n	801595a <tcp_zero_window_probe+0x22>
 801594c:	4b4c      	ldr	r3, [pc, #304]	; (8015a80 <tcp_zero_window_probe+0x148>)
 801594e:	f640 024f 	movw	r2, #2127	; 0x84f
 8015952:	494c      	ldr	r1, [pc, #304]	; (8015a84 <tcp_zero_window_probe+0x14c>)
 8015954:	484c      	ldr	r0, [pc, #304]	; (8015a88 <tcp_zero_window_probe+0x150>)
 8015956:	f003 facd 	bl	8018ef4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801595e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015960:	6a3b      	ldr	r3, [r7, #32]
 8015962:	2b00      	cmp	r3, #0
 8015964:	d101      	bne.n	801596a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015966:	2300      	movs	r3, #0
 8015968:	e086      	b.n	8015a78 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015970:	2bff      	cmp	r3, #255	; 0xff
 8015972:	d007      	beq.n	8015984 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801597a:	3301      	adds	r3, #1
 801597c:	b2da      	uxtb	r2, r3
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015984:	6a3b      	ldr	r3, [r7, #32]
 8015986:	68db      	ldr	r3, [r3, #12]
 8015988:	899b      	ldrh	r3, [r3, #12]
 801598a:	b29b      	uxth	r3, r3
 801598c:	4618      	mov	r0, r3
 801598e:	f7f8 faf6 	bl	800df7e <lwip_htons>
 8015992:	4603      	mov	r3, r0
 8015994:	b2db      	uxtb	r3, r3
 8015996:	f003 0301 	and.w	r3, r3, #1
 801599a:	2b00      	cmp	r3, #0
 801599c:	d005      	beq.n	80159aa <tcp_zero_window_probe+0x72>
 801599e:	6a3b      	ldr	r3, [r7, #32]
 80159a0:	891b      	ldrh	r3, [r3, #8]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d101      	bne.n	80159aa <tcp_zero_window_probe+0x72>
 80159a6:	2301      	movs	r3, #1
 80159a8:	e000      	b.n	80159ac <tcp_zero_window_probe+0x74>
 80159aa:	2300      	movs	r3, #0
 80159ac:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80159ae:	7ffb      	ldrb	r3, [r7, #31]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	bf0c      	ite	eq
 80159b4:	2301      	moveq	r3, #1
 80159b6:	2300      	movne	r3, #0
 80159b8:	b2db      	uxtb	r3, r3
 80159ba:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80159bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159c0:	b299      	uxth	r1, r3
 80159c2:	6a3b      	ldr	r3, [r7, #32]
 80159c4:	68db      	ldr	r3, [r3, #12]
 80159c6:	685b      	ldr	r3, [r3, #4]
 80159c8:	8bba      	ldrh	r2, [r7, #28]
 80159ca:	6878      	ldr	r0, [r7, #4]
 80159cc:	f7ff fdf8 	bl	80155c0 <tcp_output_alloc_header>
 80159d0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80159d2:	69bb      	ldr	r3, [r7, #24]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d102      	bne.n	80159de <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80159d8:	f04f 33ff 	mov.w	r3, #4294967295
 80159dc:	e04c      	b.n	8015a78 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80159de:	69bb      	ldr	r3, [r7, #24]
 80159e0:	685b      	ldr	r3, [r3, #4]
 80159e2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80159e4:	7ffb      	ldrb	r3, [r7, #31]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d011      	beq.n	8015a0e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80159ea:	697b      	ldr	r3, [r7, #20]
 80159ec:	899b      	ldrh	r3, [r3, #12]
 80159ee:	b29b      	uxth	r3, r3
 80159f0:	b21b      	sxth	r3, r3
 80159f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80159f6:	b21c      	sxth	r4, r3
 80159f8:	2011      	movs	r0, #17
 80159fa:	f7f8 fac0 	bl	800df7e <lwip_htons>
 80159fe:	4603      	mov	r3, r0
 8015a00:	b21b      	sxth	r3, r3
 8015a02:	4323      	orrs	r3, r4
 8015a04:	b21b      	sxth	r3, r3
 8015a06:	b29a      	uxth	r2, r3
 8015a08:	697b      	ldr	r3, [r7, #20]
 8015a0a:	819a      	strh	r2, [r3, #12]
 8015a0c:	e010      	b.n	8015a30 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015a0e:	69bb      	ldr	r3, [r7, #24]
 8015a10:	685b      	ldr	r3, [r3, #4]
 8015a12:	3314      	adds	r3, #20
 8015a14:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015a16:	6a3b      	ldr	r3, [r7, #32]
 8015a18:	6858      	ldr	r0, [r3, #4]
 8015a1a:	6a3b      	ldr	r3, [r7, #32]
 8015a1c:	685b      	ldr	r3, [r3, #4]
 8015a1e:	891a      	ldrh	r2, [r3, #8]
 8015a20:	6a3b      	ldr	r3, [r7, #32]
 8015a22:	891b      	ldrh	r3, [r3, #8]
 8015a24:	1ad3      	subs	r3, r2, r3
 8015a26:	b29b      	uxth	r3, r3
 8015a28:	2201      	movs	r2, #1
 8015a2a:	6939      	ldr	r1, [r7, #16]
 8015a2c:	f7f9 ff54 	bl	800f8d8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015a30:	6a3b      	ldr	r3, [r7, #32]
 8015a32:	68db      	ldr	r3, [r3, #12]
 8015a34:	685b      	ldr	r3, [r3, #4]
 8015a36:	4618      	mov	r0, r3
 8015a38:	f7f8 fab6 	bl	800dfa8 <lwip_htonl>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	3301      	adds	r3, #1
 8015a40:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	1ad3      	subs	r3, r2, r3
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	da02      	bge.n	8015a54 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	68fa      	ldr	r2, [r7, #12]
 8015a52:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a58:	2200      	movs	r2, #0
 8015a5a:	69b9      	ldr	r1, [r7, #24]
 8015a5c:	6878      	ldr	r0, [r7, #4]
 8015a5e:	f7ff fded 	bl	801563c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015a62:	687a      	ldr	r2, [r7, #4]
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	3304      	adds	r3, #4
 8015a68:	69b9      	ldr	r1, [r7, #24]
 8015a6a:	6878      	ldr	r0, [r7, #4]
 8015a6c:	f7ff fe26 	bl	80156bc <tcp_output_control_segment>
 8015a70:	4603      	mov	r3, r0
 8015a72:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015a74:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015a78:	4618      	mov	r0, r3
 8015a7a:	372c      	adds	r7, #44	; 0x2c
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd90      	pop	{r4, r7, pc}
 8015a80:	0801bc60 	.word	0x0801bc60
 8015a84:	0801c458 	.word	0x0801c458
 8015a88:	0801bcb4 	.word	0x0801bcb4

08015a8c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b082      	sub	sp, #8
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015a94:	f7fa f8a0 	bl	800fbd8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015a98:	4b0a      	ldr	r3, [pc, #40]	; (8015ac4 <tcpip_tcp_timer+0x38>)
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d103      	bne.n	8015aa8 <tcpip_tcp_timer+0x1c>
 8015aa0:	4b09      	ldr	r3, [pc, #36]	; (8015ac8 <tcpip_tcp_timer+0x3c>)
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d005      	beq.n	8015ab4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015aa8:	2200      	movs	r2, #0
 8015aaa:	4908      	ldr	r1, [pc, #32]	; (8015acc <tcpip_tcp_timer+0x40>)
 8015aac:	20fa      	movs	r0, #250	; 0xfa
 8015aae:	f000 f8f3 	bl	8015c98 <sys_timeout>
 8015ab2:	e003      	b.n	8015abc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015ab4:	4b06      	ldr	r3, [pc, #24]	; (8015ad0 <tcpip_tcp_timer+0x44>)
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	601a      	str	r2, [r3, #0]
  }
}
 8015aba:	bf00      	nop
 8015abc:	bf00      	nop
 8015abe:	3708      	adds	r7, #8
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	bd80      	pop	{r7, pc}
 8015ac4:	2001879c 	.word	0x2001879c
 8015ac8:	200187ac 	.word	0x200187ac
 8015acc:	08015a8d 	.word	0x08015a8d
 8015ad0:	200006e4 	.word	0x200006e4

08015ad4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015ad8:	4b0a      	ldr	r3, [pc, #40]	; (8015b04 <tcp_timer_needed+0x30>)
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d10f      	bne.n	8015b00 <tcp_timer_needed+0x2c>
 8015ae0:	4b09      	ldr	r3, [pc, #36]	; (8015b08 <tcp_timer_needed+0x34>)
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d103      	bne.n	8015af0 <tcp_timer_needed+0x1c>
 8015ae8:	4b08      	ldr	r3, [pc, #32]	; (8015b0c <tcp_timer_needed+0x38>)
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d007      	beq.n	8015b00 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015af0:	4b04      	ldr	r3, [pc, #16]	; (8015b04 <tcp_timer_needed+0x30>)
 8015af2:	2201      	movs	r2, #1
 8015af4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015af6:	2200      	movs	r2, #0
 8015af8:	4905      	ldr	r1, [pc, #20]	; (8015b10 <tcp_timer_needed+0x3c>)
 8015afa:	20fa      	movs	r0, #250	; 0xfa
 8015afc:	f000 f8cc 	bl	8015c98 <sys_timeout>
  }
}
 8015b00:	bf00      	nop
 8015b02:	bd80      	pop	{r7, pc}
 8015b04:	200006e4 	.word	0x200006e4
 8015b08:	2001879c 	.word	0x2001879c
 8015b0c:	200187ac 	.word	0x200187ac
 8015b10:	08015a8d 	.word	0x08015a8d

08015b14 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b086      	sub	sp, #24
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	60f8      	str	r0, [r7, #12]
 8015b1c:	60b9      	str	r1, [r7, #8]
 8015b1e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015b20:	2006      	movs	r0, #6
 8015b22:	f7f8 fe91 	bl	800e848 <memp_malloc>
 8015b26:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015b28:	693b      	ldr	r3, [r7, #16]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d109      	bne.n	8015b42 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015b2e:	693b      	ldr	r3, [r7, #16]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d151      	bne.n	8015bd8 <sys_timeout_abs+0xc4>
 8015b34:	4b2a      	ldr	r3, [pc, #168]	; (8015be0 <sys_timeout_abs+0xcc>)
 8015b36:	22be      	movs	r2, #190	; 0xbe
 8015b38:	492a      	ldr	r1, [pc, #168]	; (8015be4 <sys_timeout_abs+0xd0>)
 8015b3a:	482b      	ldr	r0, [pc, #172]	; (8015be8 <sys_timeout_abs+0xd4>)
 8015b3c:	f003 f9da 	bl	8018ef4 <iprintf>
    return;
 8015b40:	e04a      	b.n	8015bd8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015b42:	693b      	ldr	r3, [r7, #16]
 8015b44:	2200      	movs	r2, #0
 8015b46:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015b48:	693b      	ldr	r3, [r7, #16]
 8015b4a:	68ba      	ldr	r2, [r7, #8]
 8015b4c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015b4e:	693b      	ldr	r3, [r7, #16]
 8015b50:	687a      	ldr	r2, [r7, #4]
 8015b52:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015b54:	693b      	ldr	r3, [r7, #16]
 8015b56:	68fa      	ldr	r2, [r7, #12]
 8015b58:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015b5a:	4b24      	ldr	r3, [pc, #144]	; (8015bec <sys_timeout_abs+0xd8>)
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d103      	bne.n	8015b6a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015b62:	4a22      	ldr	r2, [pc, #136]	; (8015bec <sys_timeout_abs+0xd8>)
 8015b64:	693b      	ldr	r3, [r7, #16]
 8015b66:	6013      	str	r3, [r2, #0]
    return;
 8015b68:	e037      	b.n	8015bda <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015b6a:	693b      	ldr	r3, [r7, #16]
 8015b6c:	685a      	ldr	r2, [r3, #4]
 8015b6e:	4b1f      	ldr	r3, [pc, #124]	; (8015bec <sys_timeout_abs+0xd8>)
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	685b      	ldr	r3, [r3, #4]
 8015b74:	1ad3      	subs	r3, r2, r3
 8015b76:	0fdb      	lsrs	r3, r3, #31
 8015b78:	f003 0301 	and.w	r3, r3, #1
 8015b7c:	b2db      	uxtb	r3, r3
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d007      	beq.n	8015b92 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015b82:	4b1a      	ldr	r3, [pc, #104]	; (8015bec <sys_timeout_abs+0xd8>)
 8015b84:	681a      	ldr	r2, [r3, #0]
 8015b86:	693b      	ldr	r3, [r7, #16]
 8015b88:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015b8a:	4a18      	ldr	r2, [pc, #96]	; (8015bec <sys_timeout_abs+0xd8>)
 8015b8c:	693b      	ldr	r3, [r7, #16]
 8015b8e:	6013      	str	r3, [r2, #0]
 8015b90:	e023      	b.n	8015bda <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015b92:	4b16      	ldr	r3, [pc, #88]	; (8015bec <sys_timeout_abs+0xd8>)
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	617b      	str	r3, [r7, #20]
 8015b98:	e01a      	b.n	8015bd0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015b9a:	697b      	ldr	r3, [r7, #20]
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d00b      	beq.n	8015bba <sys_timeout_abs+0xa6>
 8015ba2:	693b      	ldr	r3, [r7, #16]
 8015ba4:	685a      	ldr	r2, [r3, #4]
 8015ba6:	697b      	ldr	r3, [r7, #20]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	685b      	ldr	r3, [r3, #4]
 8015bac:	1ad3      	subs	r3, r2, r3
 8015bae:	0fdb      	lsrs	r3, r3, #31
 8015bb0:	f003 0301 	and.w	r3, r3, #1
 8015bb4:	b2db      	uxtb	r3, r3
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d007      	beq.n	8015bca <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015bba:	697b      	ldr	r3, [r7, #20]
 8015bbc:	681a      	ldr	r2, [r3, #0]
 8015bbe:	693b      	ldr	r3, [r7, #16]
 8015bc0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015bc2:	697b      	ldr	r3, [r7, #20]
 8015bc4:	693a      	ldr	r2, [r7, #16]
 8015bc6:	601a      	str	r2, [r3, #0]
        break;
 8015bc8:	e007      	b.n	8015bda <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015bca:	697b      	ldr	r3, [r7, #20]
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	617b      	str	r3, [r7, #20]
 8015bd0:	697b      	ldr	r3, [r7, #20]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d1e1      	bne.n	8015b9a <sys_timeout_abs+0x86>
 8015bd6:	e000      	b.n	8015bda <sys_timeout_abs+0xc6>
    return;
 8015bd8:	bf00      	nop
      }
    }
  }
}
 8015bda:	3718      	adds	r7, #24
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}
 8015be0:	0801c47c 	.word	0x0801c47c
 8015be4:	0801c4b0 	.word	0x0801c4b0
 8015be8:	0801c4f0 	.word	0x0801c4f0
 8015bec:	200006dc 	.word	0x200006dc

08015bf0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b086      	sub	sp, #24
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015bfc:	697b      	ldr	r3, [r7, #20]
 8015bfe:	685b      	ldr	r3, [r3, #4]
 8015c00:	4798      	blx	r3

  now = sys_now();
 8015c02:	f7f4 fecd 	bl	800a9a0 <sys_now>
 8015c06:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	681a      	ldr	r2, [r3, #0]
 8015c0c:	4b0f      	ldr	r3, [pc, #60]	; (8015c4c <lwip_cyclic_timer+0x5c>)
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	4413      	add	r3, r2
 8015c12:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015c14:	68fa      	ldr	r2, [r7, #12]
 8015c16:	693b      	ldr	r3, [r7, #16]
 8015c18:	1ad3      	subs	r3, r2, r3
 8015c1a:	0fdb      	lsrs	r3, r3, #31
 8015c1c:	f003 0301 	and.w	r3, r3, #1
 8015c20:	b2db      	uxtb	r3, r3
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d009      	beq.n	8015c3a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015c26:	697b      	ldr	r3, [r7, #20]
 8015c28:	681a      	ldr	r2, [r3, #0]
 8015c2a:	693b      	ldr	r3, [r7, #16]
 8015c2c:	4413      	add	r3, r2
 8015c2e:	687a      	ldr	r2, [r7, #4]
 8015c30:	4907      	ldr	r1, [pc, #28]	; (8015c50 <lwip_cyclic_timer+0x60>)
 8015c32:	4618      	mov	r0, r3
 8015c34:	f7ff ff6e 	bl	8015b14 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015c38:	e004      	b.n	8015c44 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015c3a:	687a      	ldr	r2, [r7, #4]
 8015c3c:	4904      	ldr	r1, [pc, #16]	; (8015c50 <lwip_cyclic_timer+0x60>)
 8015c3e:	68f8      	ldr	r0, [r7, #12]
 8015c40:	f7ff ff68 	bl	8015b14 <sys_timeout_abs>
}
 8015c44:	bf00      	nop
 8015c46:	3718      	adds	r7, #24
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	bd80      	pop	{r7, pc}
 8015c4c:	200006e0 	.word	0x200006e0
 8015c50:	08015bf1 	.word	0x08015bf1

08015c54 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b082      	sub	sp, #8
 8015c58:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015c5a:	2301      	movs	r3, #1
 8015c5c:	607b      	str	r3, [r7, #4]
 8015c5e:	e00e      	b.n	8015c7e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015c60:	4a0b      	ldr	r2, [pc, #44]	; (8015c90 <sys_timeouts_init+0x3c>)
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	00db      	lsls	r3, r3, #3
 8015c6c:	4a08      	ldr	r2, [pc, #32]	; (8015c90 <sys_timeouts_init+0x3c>)
 8015c6e:	4413      	add	r3, r2
 8015c70:	461a      	mov	r2, r3
 8015c72:	4908      	ldr	r1, [pc, #32]	; (8015c94 <sys_timeouts_init+0x40>)
 8015c74:	f000 f810 	bl	8015c98 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	3301      	adds	r3, #1
 8015c7c:	607b      	str	r3, [r7, #4]
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	2b02      	cmp	r3, #2
 8015c82:	d9ed      	bls.n	8015c60 <sys_timeouts_init+0xc>
  }
}
 8015c84:	bf00      	nop
 8015c86:	bf00      	nop
 8015c88:	3708      	adds	r7, #8
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd80      	pop	{r7, pc}
 8015c8e:	bf00      	nop
 8015c90:	0801d1ec 	.word	0x0801d1ec
 8015c94:	08015bf1 	.word	0x08015bf1

08015c98 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b086      	sub	sp, #24
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	60f8      	str	r0, [r7, #12]
 8015ca0:	60b9      	str	r1, [r7, #8]
 8015ca2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015caa:	d306      	bcc.n	8015cba <sys_timeout+0x22>
 8015cac:	4b0a      	ldr	r3, [pc, #40]	; (8015cd8 <sys_timeout+0x40>)
 8015cae:	f240 1229 	movw	r2, #297	; 0x129
 8015cb2:	490a      	ldr	r1, [pc, #40]	; (8015cdc <sys_timeout+0x44>)
 8015cb4:	480a      	ldr	r0, [pc, #40]	; (8015ce0 <sys_timeout+0x48>)
 8015cb6:	f003 f91d 	bl	8018ef4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015cba:	f7f4 fe71 	bl	800a9a0 <sys_now>
 8015cbe:	4602      	mov	r2, r0
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	4413      	add	r3, r2
 8015cc4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015cc6:	687a      	ldr	r2, [r7, #4]
 8015cc8:	68b9      	ldr	r1, [r7, #8]
 8015cca:	6978      	ldr	r0, [r7, #20]
 8015ccc:	f7ff ff22 	bl	8015b14 <sys_timeout_abs>
#endif
}
 8015cd0:	bf00      	nop
 8015cd2:	3718      	adds	r7, #24
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	bd80      	pop	{r7, pc}
 8015cd8:	0801c47c 	.word	0x0801c47c
 8015cdc:	0801c518 	.word	0x0801c518
 8015ce0:	0801c4f0 	.word	0x0801c4f0

08015ce4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b084      	sub	sp, #16
 8015ce8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015cea:	f7f4 fe59 	bl	800a9a0 <sys_now>
 8015cee:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8015cf0:	4b1a      	ldr	r3, [pc, #104]	; (8015d5c <sys_check_timeouts+0x78>)
 8015cf2:	781b      	ldrb	r3, [r3, #0]
 8015cf4:	b2db      	uxtb	r3, r3
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d001      	beq.n	8015cfe <sys_check_timeouts+0x1a>
 8015cfa:	f7f9 f8c9 	bl	800ee90 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8015cfe:	4b18      	ldr	r3, [pc, #96]	; (8015d60 <sys_check_timeouts+0x7c>)
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8015d04:	68bb      	ldr	r3, [r7, #8]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d022      	beq.n	8015d50 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015d0a:	68bb      	ldr	r3, [r7, #8]
 8015d0c:	685b      	ldr	r3, [r3, #4]
 8015d0e:	68fa      	ldr	r2, [r7, #12]
 8015d10:	1ad3      	subs	r3, r2, r3
 8015d12:	0fdb      	lsrs	r3, r3, #31
 8015d14:	f003 0301 	and.w	r3, r3, #1
 8015d18:	b2db      	uxtb	r3, r3
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d11a      	bne.n	8015d54 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015d1e:	68bb      	ldr	r3, [r7, #8]
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	4a0f      	ldr	r2, [pc, #60]	; (8015d60 <sys_check_timeouts+0x7c>)
 8015d24:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015d26:	68bb      	ldr	r3, [r7, #8]
 8015d28:	689b      	ldr	r3, [r3, #8]
 8015d2a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015d2c:	68bb      	ldr	r3, [r7, #8]
 8015d2e:	68db      	ldr	r3, [r3, #12]
 8015d30:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015d32:	68bb      	ldr	r3, [r7, #8]
 8015d34:	685b      	ldr	r3, [r3, #4]
 8015d36:	4a0b      	ldr	r2, [pc, #44]	; (8015d64 <sys_check_timeouts+0x80>)
 8015d38:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015d3a:	68b9      	ldr	r1, [r7, #8]
 8015d3c:	2006      	movs	r0, #6
 8015d3e:	f7f8 fdcf 	bl	800e8e0 <memp_free>
    if (handler != NULL) {
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d0d3      	beq.n	8015cf0 <sys_check_timeouts+0xc>
      handler(arg);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	6838      	ldr	r0, [r7, #0]
 8015d4c:	4798      	blx	r3
  do {
 8015d4e:	e7cf      	b.n	8015cf0 <sys_check_timeouts+0xc>
      return;
 8015d50:	bf00      	nop
 8015d52:	e000      	b.n	8015d56 <sys_check_timeouts+0x72>
      return;
 8015d54:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015d56:	3710      	adds	r7, #16
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	bd80      	pop	{r7, pc}
 8015d5c:	20018794 	.word	0x20018794
 8015d60:	200006dc 	.word	0x200006dc
 8015d64:	200006e0 	.word	0x200006e0

08015d68 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015d6c:	f003 f8f0 	bl	8018f50 <rand>
 8015d70:	4603      	mov	r3, r0
 8015d72:	b29b      	uxth	r3, r3
 8015d74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015d78:	b29b      	uxth	r3, r3
 8015d7a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015d7e:	b29a      	uxth	r2, r3
 8015d80:	4b01      	ldr	r3, [pc, #4]	; (8015d88 <udp_init+0x20>)
 8015d82:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015d84:	bf00      	nop
 8015d86:	bd80      	pop	{r7, pc}
 8015d88:	200005b4 	.word	0x200005b4

08015d8c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b084      	sub	sp, #16
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	60f8      	str	r0, [r7, #12]
 8015d94:	60b9      	str	r1, [r7, #8]
 8015d96:	4613      	mov	r3, r2
 8015d98:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d105      	bne.n	8015dac <udp_input_local_match+0x20>
 8015da0:	4b27      	ldr	r3, [pc, #156]	; (8015e40 <udp_input_local_match+0xb4>)
 8015da2:	2287      	movs	r2, #135	; 0x87
 8015da4:	4927      	ldr	r1, [pc, #156]	; (8015e44 <udp_input_local_match+0xb8>)
 8015da6:	4828      	ldr	r0, [pc, #160]	; (8015e48 <udp_input_local_match+0xbc>)
 8015da8:	f003 f8a4 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015dac:	68bb      	ldr	r3, [r7, #8]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d105      	bne.n	8015dbe <udp_input_local_match+0x32>
 8015db2:	4b23      	ldr	r3, [pc, #140]	; (8015e40 <udp_input_local_match+0xb4>)
 8015db4:	2288      	movs	r2, #136	; 0x88
 8015db6:	4925      	ldr	r1, [pc, #148]	; (8015e4c <udp_input_local_match+0xc0>)
 8015db8:	4823      	ldr	r0, [pc, #140]	; (8015e48 <udp_input_local_match+0xbc>)
 8015dba:	f003 f89b 	bl	8018ef4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	7a1b      	ldrb	r3, [r3, #8]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d00b      	beq.n	8015dde <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	7a1a      	ldrb	r2, [r3, #8]
 8015dca:	4b21      	ldr	r3, [pc, #132]	; (8015e50 <udp_input_local_match+0xc4>)
 8015dcc:	685b      	ldr	r3, [r3, #4]
 8015dce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015dd2:	3301      	adds	r3, #1
 8015dd4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015dd6:	429a      	cmp	r2, r3
 8015dd8:	d001      	beq.n	8015dde <udp_input_local_match+0x52>
    return 0;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	e02b      	b.n	8015e36 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015dde:	79fb      	ldrb	r3, [r7, #7]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d018      	beq.n	8015e16 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d013      	beq.n	8015e12 <udp_input_local_match+0x86>
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d00f      	beq.n	8015e12 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015df2:	4b17      	ldr	r3, [pc, #92]	; (8015e50 <udp_input_local_match+0xc4>)
 8015df4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dfa:	d00a      	beq.n	8015e12 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	681a      	ldr	r2, [r3, #0]
 8015e00:	4b13      	ldr	r3, [pc, #76]	; (8015e50 <udp_input_local_match+0xc4>)
 8015e02:	695b      	ldr	r3, [r3, #20]
 8015e04:	405a      	eors	r2, r3
 8015e06:	68bb      	ldr	r3, [r7, #8]
 8015e08:	3308      	adds	r3, #8
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d110      	bne.n	8015e34 <udp_input_local_match+0xa8>
          return 1;
 8015e12:	2301      	movs	r3, #1
 8015e14:	e00f      	b.n	8015e36 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d009      	beq.n	8015e30 <udp_input_local_match+0xa4>
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d005      	beq.n	8015e30 <udp_input_local_match+0xa4>
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	681a      	ldr	r2, [r3, #0]
 8015e28:	4b09      	ldr	r3, [pc, #36]	; (8015e50 <udp_input_local_match+0xc4>)
 8015e2a:	695b      	ldr	r3, [r3, #20]
 8015e2c:	429a      	cmp	r2, r3
 8015e2e:	d101      	bne.n	8015e34 <udp_input_local_match+0xa8>
        return 1;
 8015e30:	2301      	movs	r3, #1
 8015e32:	e000      	b.n	8015e36 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015e34:	2300      	movs	r3, #0
}
 8015e36:	4618      	mov	r0, r3
 8015e38:	3710      	adds	r7, #16
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	bd80      	pop	{r7, pc}
 8015e3e:	bf00      	nop
 8015e40:	0801c564 	.word	0x0801c564
 8015e44:	0801c594 	.word	0x0801c594
 8015e48:	0801c5b8 	.word	0x0801c5b8
 8015e4c:	0801c5e0 	.word	0x0801c5e0
 8015e50:	20007b38 	.word	0x20007b38

08015e54 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015e54:	b590      	push	{r4, r7, lr}
 8015e56:	b08d      	sub	sp, #52	; 0x34
 8015e58:	af02      	add	r7, sp, #8
 8015e5a:	6078      	str	r0, [r7, #4]
 8015e5c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015e5e:	2300      	movs	r3, #0
 8015e60:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d105      	bne.n	8015e74 <udp_input+0x20>
 8015e68:	4b7c      	ldr	r3, [pc, #496]	; (801605c <udp_input+0x208>)
 8015e6a:	22cf      	movs	r2, #207	; 0xcf
 8015e6c:	497c      	ldr	r1, [pc, #496]	; (8016060 <udp_input+0x20c>)
 8015e6e:	487d      	ldr	r0, [pc, #500]	; (8016064 <udp_input+0x210>)
 8015e70:	f003 f840 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015e74:	683b      	ldr	r3, [r7, #0]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d105      	bne.n	8015e86 <udp_input+0x32>
 8015e7a:	4b78      	ldr	r3, [pc, #480]	; (801605c <udp_input+0x208>)
 8015e7c:	22d0      	movs	r2, #208	; 0xd0
 8015e7e:	497a      	ldr	r1, [pc, #488]	; (8016068 <udp_input+0x214>)
 8015e80:	4878      	ldr	r0, [pc, #480]	; (8016064 <udp_input+0x210>)
 8015e82:	f003 f837 	bl	8018ef4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	895b      	ldrh	r3, [r3, #10]
 8015e8a:	2b07      	cmp	r3, #7
 8015e8c:	d803      	bhi.n	8015e96 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015e8e:	6878      	ldr	r0, [r7, #4]
 8015e90:	f7f9 fb38 	bl	800f504 <pbuf_free>
    goto end;
 8015e94:	e0de      	b.n	8016054 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	685b      	ldr	r3, [r3, #4]
 8015e9a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015e9c:	4b73      	ldr	r3, [pc, #460]	; (801606c <udp_input+0x218>)
 8015e9e:	695b      	ldr	r3, [r3, #20]
 8015ea0:	4a72      	ldr	r2, [pc, #456]	; (801606c <udp_input+0x218>)
 8015ea2:	6812      	ldr	r2, [r2, #0]
 8015ea4:	4611      	mov	r1, r2
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	f001 fc88 	bl	80177bc <ip4_addr_isbroadcast_u32>
 8015eac:	4603      	mov	r3, r0
 8015eae:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015eb0:	697b      	ldr	r3, [r7, #20]
 8015eb2:	881b      	ldrh	r3, [r3, #0]
 8015eb4:	b29b      	uxth	r3, r3
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	f7f8 f861 	bl	800df7e <lwip_htons>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015ec0:	697b      	ldr	r3, [r7, #20]
 8015ec2:	885b      	ldrh	r3, [r3, #2]
 8015ec4:	b29b      	uxth	r3, r3
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f7f8 f859 	bl	800df7e <lwip_htons>
 8015ecc:	4603      	mov	r3, r0
 8015ece:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015ed8:	2300      	movs	r3, #0
 8015eda:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015edc:	4b64      	ldr	r3, [pc, #400]	; (8016070 <udp_input+0x21c>)
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8015ee2:	e054      	b.n	8015f8e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ee6:	8a5b      	ldrh	r3, [r3, #18]
 8015ee8:	89fa      	ldrh	r2, [r7, #14]
 8015eea:	429a      	cmp	r2, r3
 8015eec:	d14a      	bne.n	8015f84 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015eee:	7cfb      	ldrb	r3, [r7, #19]
 8015ef0:	461a      	mov	r2, r3
 8015ef2:	6839      	ldr	r1, [r7, #0]
 8015ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ef6:	f7ff ff49 	bl	8015d8c <udp_input_local_match>
 8015efa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d041      	beq.n	8015f84 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f02:	7c1b      	ldrb	r3, [r3, #16]
 8015f04:	f003 0304 	and.w	r3, r3, #4
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d11d      	bne.n	8015f48 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015f0c:	69fb      	ldr	r3, [r7, #28]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d102      	bne.n	8015f18 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f14:	61fb      	str	r3, [r7, #28]
 8015f16:	e017      	b.n	8015f48 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015f18:	7cfb      	ldrb	r3, [r7, #19]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d014      	beq.n	8015f48 <udp_input+0xf4>
 8015f1e:	4b53      	ldr	r3, [pc, #332]	; (801606c <udp_input+0x218>)
 8015f20:	695b      	ldr	r3, [r3, #20]
 8015f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f26:	d10f      	bne.n	8015f48 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015f28:	69fb      	ldr	r3, [r7, #28]
 8015f2a:	681a      	ldr	r2, [r3, #0]
 8015f2c:	683b      	ldr	r3, [r7, #0]
 8015f2e:	3304      	adds	r3, #4
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	429a      	cmp	r2, r3
 8015f34:	d008      	beq.n	8015f48 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f38:	681a      	ldr	r2, [r3, #0]
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	3304      	adds	r3, #4
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	429a      	cmp	r2, r3
 8015f42:	d101      	bne.n	8015f48 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f46:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f4a:	8a9b      	ldrh	r3, [r3, #20]
 8015f4c:	8a3a      	ldrh	r2, [r7, #16]
 8015f4e:	429a      	cmp	r2, r3
 8015f50:	d118      	bne.n	8015f84 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f54:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d005      	beq.n	8015f66 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f5c:	685a      	ldr	r2, [r3, #4]
 8015f5e:	4b43      	ldr	r3, [pc, #268]	; (801606c <udp_input+0x218>)
 8015f60:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015f62:	429a      	cmp	r2, r3
 8015f64:	d10e      	bne.n	8015f84 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015f66:	6a3b      	ldr	r3, [r7, #32]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d014      	beq.n	8015f96 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f6e:	68da      	ldr	r2, [r3, #12]
 8015f70:	6a3b      	ldr	r3, [r7, #32]
 8015f72:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015f74:	4b3e      	ldr	r3, [pc, #248]	; (8016070 <udp_input+0x21c>)
 8015f76:	681a      	ldr	r2, [r3, #0]
 8015f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f7a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015f7c:	4a3c      	ldr	r2, [pc, #240]	; (8016070 <udp_input+0x21c>)
 8015f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f80:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015f82:	e008      	b.n	8015f96 <udp_input+0x142>
      }
    }

    prev = pcb;
 8015f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f86:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f8a:	68db      	ldr	r3, [r3, #12]
 8015f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8015f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d1a7      	bne.n	8015ee4 <udp_input+0x90>
 8015f94:	e000      	b.n	8015f98 <udp_input+0x144>
        break;
 8015f96:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d101      	bne.n	8015fa2 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015f9e:	69fb      	ldr	r3, [r7, #28]
 8015fa0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d002      	beq.n	8015fae <udp_input+0x15a>
    for_us = 1;
 8015fa8:	2301      	movs	r3, #1
 8015faa:	76fb      	strb	r3, [r7, #27]
 8015fac:	e00a      	b.n	8015fc4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015fae:	683b      	ldr	r3, [r7, #0]
 8015fb0:	3304      	adds	r3, #4
 8015fb2:	681a      	ldr	r2, [r3, #0]
 8015fb4:	4b2d      	ldr	r3, [pc, #180]	; (801606c <udp_input+0x218>)
 8015fb6:	695b      	ldr	r3, [r3, #20]
 8015fb8:	429a      	cmp	r2, r3
 8015fba:	bf0c      	ite	eq
 8015fbc:	2301      	moveq	r3, #1
 8015fbe:	2300      	movne	r3, #0
 8015fc0:	b2db      	uxtb	r3, r3
 8015fc2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015fc4:	7efb      	ldrb	r3, [r7, #27]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d041      	beq.n	801604e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015fca:	2108      	movs	r1, #8
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	f7f9 fa13 	bl	800f3f8 <pbuf_remove_header>
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d00a      	beq.n	8015fee <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015fd8:	4b20      	ldr	r3, [pc, #128]	; (801605c <udp_input+0x208>)
 8015fda:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015fde:	4925      	ldr	r1, [pc, #148]	; (8016074 <udp_input+0x220>)
 8015fe0:	4820      	ldr	r0, [pc, #128]	; (8016064 <udp_input+0x210>)
 8015fe2:	f002 ff87 	bl	8018ef4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015fe6:	6878      	ldr	r0, [r7, #4]
 8015fe8:	f7f9 fa8c 	bl	800f504 <pbuf_free>
      goto end;
 8015fec:	e032      	b.n	8016054 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d012      	beq.n	801601a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff6:	699b      	ldr	r3, [r3, #24]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d00a      	beq.n	8016012 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ffe:	699c      	ldr	r4, [r3, #24]
 8016000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016002:	69d8      	ldr	r0, [r3, #28]
 8016004:	8a3b      	ldrh	r3, [r7, #16]
 8016006:	9300      	str	r3, [sp, #0]
 8016008:	4b1b      	ldr	r3, [pc, #108]	; (8016078 <udp_input+0x224>)
 801600a:	687a      	ldr	r2, [r7, #4]
 801600c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801600e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016010:	e021      	b.n	8016056 <udp_input+0x202>
        pbuf_free(p);
 8016012:	6878      	ldr	r0, [r7, #4]
 8016014:	f7f9 fa76 	bl	800f504 <pbuf_free>
        goto end;
 8016018:	e01c      	b.n	8016054 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801601a:	7cfb      	ldrb	r3, [r7, #19]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d112      	bne.n	8016046 <udp_input+0x1f2>
 8016020:	4b12      	ldr	r3, [pc, #72]	; (801606c <udp_input+0x218>)
 8016022:	695b      	ldr	r3, [r3, #20]
 8016024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016028:	2be0      	cmp	r3, #224	; 0xe0
 801602a:	d00c      	beq.n	8016046 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801602c:	4b0f      	ldr	r3, [pc, #60]	; (801606c <udp_input+0x218>)
 801602e:	899b      	ldrh	r3, [r3, #12]
 8016030:	3308      	adds	r3, #8
 8016032:	b29b      	uxth	r3, r3
 8016034:	b21b      	sxth	r3, r3
 8016036:	4619      	mov	r1, r3
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	f7f9 fa50 	bl	800f4de <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801603e:	2103      	movs	r1, #3
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f001 f89b 	bl	801717c <icmp_dest_unreach>
      pbuf_free(p);
 8016046:	6878      	ldr	r0, [r7, #4]
 8016048:	f7f9 fa5c 	bl	800f504 <pbuf_free>
  return;
 801604c:	e003      	b.n	8016056 <udp_input+0x202>
    pbuf_free(p);
 801604e:	6878      	ldr	r0, [r7, #4]
 8016050:	f7f9 fa58 	bl	800f504 <pbuf_free>
  return;
 8016054:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016056:	372c      	adds	r7, #44	; 0x2c
 8016058:	46bd      	mov	sp, r7
 801605a:	bd90      	pop	{r4, r7, pc}
 801605c:	0801c564 	.word	0x0801c564
 8016060:	0801c608 	.word	0x0801c608
 8016064:	0801c5b8 	.word	0x0801c5b8
 8016068:	0801c620 	.word	0x0801c620
 801606c:	20007b38 	.word	0x20007b38
 8016070:	200187b4 	.word	0x200187b4
 8016074:	0801c63c 	.word	0x0801c63c
 8016078:	20007b48 	.word	0x20007b48

0801607c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801607c:	b480      	push	{r7}
 801607e:	b085      	sub	sp, #20
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
 8016084:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d01e      	beq.n	80160ca <udp_netif_ip_addr_changed+0x4e>
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d01a      	beq.n	80160ca <udp_netif_ip_addr_changed+0x4e>
 8016094:	683b      	ldr	r3, [r7, #0]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d017      	beq.n	80160ca <udp_netif_ip_addr_changed+0x4e>
 801609a:	683b      	ldr	r3, [r7, #0]
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d013      	beq.n	80160ca <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80160a2:	4b0d      	ldr	r3, [pc, #52]	; (80160d8 <udp_netif_ip_addr_changed+0x5c>)
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	60fb      	str	r3, [r7, #12]
 80160a8:	e00c      	b.n	80160c4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	681a      	ldr	r2, [r3, #0]
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	429a      	cmp	r2, r3
 80160b4:	d103      	bne.n	80160be <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80160b6:	683b      	ldr	r3, [r7, #0]
 80160b8:	681a      	ldr	r2, [r3, #0]
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	68db      	ldr	r3, [r3, #12]
 80160c2:	60fb      	str	r3, [r7, #12]
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d1ef      	bne.n	80160aa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80160ca:	bf00      	nop
 80160cc:	3714      	adds	r7, #20
 80160ce:	46bd      	mov	sp, r7
 80160d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d4:	4770      	bx	lr
 80160d6:	bf00      	nop
 80160d8:	200187b4 	.word	0x200187b4

080160dc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80160dc:	b580      	push	{r7, lr}
 80160de:	b082      	sub	sp, #8
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80160e4:	4915      	ldr	r1, [pc, #84]	; (801613c <etharp_free_entry+0x60>)
 80160e6:	687a      	ldr	r2, [r7, #4]
 80160e8:	4613      	mov	r3, r2
 80160ea:	005b      	lsls	r3, r3, #1
 80160ec:	4413      	add	r3, r2
 80160ee:	00db      	lsls	r3, r3, #3
 80160f0:	440b      	add	r3, r1
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d013      	beq.n	8016120 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80160f8:	4910      	ldr	r1, [pc, #64]	; (801613c <etharp_free_entry+0x60>)
 80160fa:	687a      	ldr	r2, [r7, #4]
 80160fc:	4613      	mov	r3, r2
 80160fe:	005b      	lsls	r3, r3, #1
 8016100:	4413      	add	r3, r2
 8016102:	00db      	lsls	r3, r3, #3
 8016104:	440b      	add	r3, r1
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	4618      	mov	r0, r3
 801610a:	f7f9 f9fb 	bl	800f504 <pbuf_free>
    arp_table[i].q = NULL;
 801610e:	490b      	ldr	r1, [pc, #44]	; (801613c <etharp_free_entry+0x60>)
 8016110:	687a      	ldr	r2, [r7, #4]
 8016112:	4613      	mov	r3, r2
 8016114:	005b      	lsls	r3, r3, #1
 8016116:	4413      	add	r3, r2
 8016118:	00db      	lsls	r3, r3, #3
 801611a:	440b      	add	r3, r1
 801611c:	2200      	movs	r2, #0
 801611e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016120:	4906      	ldr	r1, [pc, #24]	; (801613c <etharp_free_entry+0x60>)
 8016122:	687a      	ldr	r2, [r7, #4]
 8016124:	4613      	mov	r3, r2
 8016126:	005b      	lsls	r3, r3, #1
 8016128:	4413      	add	r3, r2
 801612a:	00db      	lsls	r3, r3, #3
 801612c:	440b      	add	r3, r1
 801612e:	3314      	adds	r3, #20
 8016130:	2200      	movs	r2, #0
 8016132:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016134:	bf00      	nop
 8016136:	3708      	adds	r7, #8
 8016138:	46bd      	mov	sp, r7
 801613a:	bd80      	pop	{r7, pc}
 801613c:	200006e8 	.word	0x200006e8

08016140 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b082      	sub	sp, #8
 8016144:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016146:	2300      	movs	r3, #0
 8016148:	607b      	str	r3, [r7, #4]
 801614a:	e096      	b.n	801627a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801614c:	494f      	ldr	r1, [pc, #316]	; (801628c <etharp_tmr+0x14c>)
 801614e:	687a      	ldr	r2, [r7, #4]
 8016150:	4613      	mov	r3, r2
 8016152:	005b      	lsls	r3, r3, #1
 8016154:	4413      	add	r3, r2
 8016156:	00db      	lsls	r3, r3, #3
 8016158:	440b      	add	r3, r1
 801615a:	3314      	adds	r3, #20
 801615c:	781b      	ldrb	r3, [r3, #0]
 801615e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016160:	78fb      	ldrb	r3, [r7, #3]
 8016162:	2b00      	cmp	r3, #0
 8016164:	f000 8086 	beq.w	8016274 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016168:	4948      	ldr	r1, [pc, #288]	; (801628c <etharp_tmr+0x14c>)
 801616a:	687a      	ldr	r2, [r7, #4]
 801616c:	4613      	mov	r3, r2
 801616e:	005b      	lsls	r3, r3, #1
 8016170:	4413      	add	r3, r2
 8016172:	00db      	lsls	r3, r3, #3
 8016174:	440b      	add	r3, r1
 8016176:	3312      	adds	r3, #18
 8016178:	881b      	ldrh	r3, [r3, #0]
 801617a:	3301      	adds	r3, #1
 801617c:	b298      	uxth	r0, r3
 801617e:	4943      	ldr	r1, [pc, #268]	; (801628c <etharp_tmr+0x14c>)
 8016180:	687a      	ldr	r2, [r7, #4]
 8016182:	4613      	mov	r3, r2
 8016184:	005b      	lsls	r3, r3, #1
 8016186:	4413      	add	r3, r2
 8016188:	00db      	lsls	r3, r3, #3
 801618a:	440b      	add	r3, r1
 801618c:	3312      	adds	r3, #18
 801618e:	4602      	mov	r2, r0
 8016190:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016192:	493e      	ldr	r1, [pc, #248]	; (801628c <etharp_tmr+0x14c>)
 8016194:	687a      	ldr	r2, [r7, #4]
 8016196:	4613      	mov	r3, r2
 8016198:	005b      	lsls	r3, r3, #1
 801619a:	4413      	add	r3, r2
 801619c:	00db      	lsls	r3, r3, #3
 801619e:	440b      	add	r3, r1
 80161a0:	3312      	adds	r3, #18
 80161a2:	881b      	ldrh	r3, [r3, #0]
 80161a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80161a8:	d215      	bcs.n	80161d6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80161aa:	4938      	ldr	r1, [pc, #224]	; (801628c <etharp_tmr+0x14c>)
 80161ac:	687a      	ldr	r2, [r7, #4]
 80161ae:	4613      	mov	r3, r2
 80161b0:	005b      	lsls	r3, r3, #1
 80161b2:	4413      	add	r3, r2
 80161b4:	00db      	lsls	r3, r3, #3
 80161b6:	440b      	add	r3, r1
 80161b8:	3314      	adds	r3, #20
 80161ba:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80161bc:	2b01      	cmp	r3, #1
 80161be:	d10e      	bne.n	80161de <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80161c0:	4932      	ldr	r1, [pc, #200]	; (801628c <etharp_tmr+0x14c>)
 80161c2:	687a      	ldr	r2, [r7, #4]
 80161c4:	4613      	mov	r3, r2
 80161c6:	005b      	lsls	r3, r3, #1
 80161c8:	4413      	add	r3, r2
 80161ca:	00db      	lsls	r3, r3, #3
 80161cc:	440b      	add	r3, r1
 80161ce:	3312      	adds	r3, #18
 80161d0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80161d2:	2b04      	cmp	r3, #4
 80161d4:	d903      	bls.n	80161de <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	f7ff ff80 	bl	80160dc <etharp_free_entry>
 80161dc:	e04a      	b.n	8016274 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80161de:	492b      	ldr	r1, [pc, #172]	; (801628c <etharp_tmr+0x14c>)
 80161e0:	687a      	ldr	r2, [r7, #4]
 80161e2:	4613      	mov	r3, r2
 80161e4:	005b      	lsls	r3, r3, #1
 80161e6:	4413      	add	r3, r2
 80161e8:	00db      	lsls	r3, r3, #3
 80161ea:	440b      	add	r3, r1
 80161ec:	3314      	adds	r3, #20
 80161ee:	781b      	ldrb	r3, [r3, #0]
 80161f0:	2b03      	cmp	r3, #3
 80161f2:	d10a      	bne.n	801620a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80161f4:	4925      	ldr	r1, [pc, #148]	; (801628c <etharp_tmr+0x14c>)
 80161f6:	687a      	ldr	r2, [r7, #4]
 80161f8:	4613      	mov	r3, r2
 80161fa:	005b      	lsls	r3, r3, #1
 80161fc:	4413      	add	r3, r2
 80161fe:	00db      	lsls	r3, r3, #3
 8016200:	440b      	add	r3, r1
 8016202:	3314      	adds	r3, #20
 8016204:	2204      	movs	r2, #4
 8016206:	701a      	strb	r2, [r3, #0]
 8016208:	e034      	b.n	8016274 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801620a:	4920      	ldr	r1, [pc, #128]	; (801628c <etharp_tmr+0x14c>)
 801620c:	687a      	ldr	r2, [r7, #4]
 801620e:	4613      	mov	r3, r2
 8016210:	005b      	lsls	r3, r3, #1
 8016212:	4413      	add	r3, r2
 8016214:	00db      	lsls	r3, r3, #3
 8016216:	440b      	add	r3, r1
 8016218:	3314      	adds	r3, #20
 801621a:	781b      	ldrb	r3, [r3, #0]
 801621c:	2b04      	cmp	r3, #4
 801621e:	d10a      	bne.n	8016236 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016220:	491a      	ldr	r1, [pc, #104]	; (801628c <etharp_tmr+0x14c>)
 8016222:	687a      	ldr	r2, [r7, #4]
 8016224:	4613      	mov	r3, r2
 8016226:	005b      	lsls	r3, r3, #1
 8016228:	4413      	add	r3, r2
 801622a:	00db      	lsls	r3, r3, #3
 801622c:	440b      	add	r3, r1
 801622e:	3314      	adds	r3, #20
 8016230:	2202      	movs	r2, #2
 8016232:	701a      	strb	r2, [r3, #0]
 8016234:	e01e      	b.n	8016274 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016236:	4915      	ldr	r1, [pc, #84]	; (801628c <etharp_tmr+0x14c>)
 8016238:	687a      	ldr	r2, [r7, #4]
 801623a:	4613      	mov	r3, r2
 801623c:	005b      	lsls	r3, r3, #1
 801623e:	4413      	add	r3, r2
 8016240:	00db      	lsls	r3, r3, #3
 8016242:	440b      	add	r3, r1
 8016244:	3314      	adds	r3, #20
 8016246:	781b      	ldrb	r3, [r3, #0]
 8016248:	2b01      	cmp	r3, #1
 801624a:	d113      	bne.n	8016274 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801624c:	490f      	ldr	r1, [pc, #60]	; (801628c <etharp_tmr+0x14c>)
 801624e:	687a      	ldr	r2, [r7, #4]
 8016250:	4613      	mov	r3, r2
 8016252:	005b      	lsls	r3, r3, #1
 8016254:	4413      	add	r3, r2
 8016256:	00db      	lsls	r3, r3, #3
 8016258:	440b      	add	r3, r1
 801625a:	3308      	adds	r3, #8
 801625c:	6818      	ldr	r0, [r3, #0]
 801625e:	687a      	ldr	r2, [r7, #4]
 8016260:	4613      	mov	r3, r2
 8016262:	005b      	lsls	r3, r3, #1
 8016264:	4413      	add	r3, r2
 8016266:	00db      	lsls	r3, r3, #3
 8016268:	4a08      	ldr	r2, [pc, #32]	; (801628c <etharp_tmr+0x14c>)
 801626a:	4413      	add	r3, r2
 801626c:	3304      	adds	r3, #4
 801626e:	4619      	mov	r1, r3
 8016270:	f000 fe6e 	bl	8016f50 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	3301      	adds	r3, #1
 8016278:	607b      	str	r3, [r7, #4]
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	2b09      	cmp	r3, #9
 801627e:	f77f af65 	ble.w	801614c <etharp_tmr+0xc>
      }
    }
  }
}
 8016282:	bf00      	nop
 8016284:	bf00      	nop
 8016286:	3708      	adds	r7, #8
 8016288:	46bd      	mov	sp, r7
 801628a:	bd80      	pop	{r7, pc}
 801628c:	200006e8 	.word	0x200006e8

08016290 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b08a      	sub	sp, #40	; 0x28
 8016294:	af00      	add	r7, sp, #0
 8016296:	60f8      	str	r0, [r7, #12]
 8016298:	460b      	mov	r3, r1
 801629a:	607a      	str	r2, [r7, #4]
 801629c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801629e:	230a      	movs	r3, #10
 80162a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80162a2:	230a      	movs	r3, #10
 80162a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80162a6:	230a      	movs	r3, #10
 80162a8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80162aa:	2300      	movs	r3, #0
 80162ac:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80162ae:	230a      	movs	r3, #10
 80162b0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80162b2:	2300      	movs	r3, #0
 80162b4:	83bb      	strh	r3, [r7, #28]
 80162b6:	2300      	movs	r3, #0
 80162b8:	837b      	strh	r3, [r7, #26]
 80162ba:	2300      	movs	r3, #0
 80162bc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80162be:	2300      	movs	r3, #0
 80162c0:	843b      	strh	r3, [r7, #32]
 80162c2:	e0ae      	b.n	8016422 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80162c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162c8:	49a6      	ldr	r1, [pc, #664]	; (8016564 <etharp_find_entry+0x2d4>)
 80162ca:	4613      	mov	r3, r2
 80162cc:	005b      	lsls	r3, r3, #1
 80162ce:	4413      	add	r3, r2
 80162d0:	00db      	lsls	r3, r3, #3
 80162d2:	440b      	add	r3, r1
 80162d4:	3314      	adds	r3, #20
 80162d6:	781b      	ldrb	r3, [r3, #0]
 80162d8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80162da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80162de:	2b0a      	cmp	r3, #10
 80162e0:	d105      	bne.n	80162ee <etharp_find_entry+0x5e>
 80162e2:	7dfb      	ldrb	r3, [r7, #23]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d102      	bne.n	80162ee <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80162e8:	8c3b      	ldrh	r3, [r7, #32]
 80162ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80162ec:	e095      	b.n	801641a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80162ee:	7dfb      	ldrb	r3, [r7, #23]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	f000 8092 	beq.w	801641a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80162f6:	7dfb      	ldrb	r3, [r7, #23]
 80162f8:	2b01      	cmp	r3, #1
 80162fa:	d009      	beq.n	8016310 <etharp_find_entry+0x80>
 80162fc:	7dfb      	ldrb	r3, [r7, #23]
 80162fe:	2b01      	cmp	r3, #1
 8016300:	d806      	bhi.n	8016310 <etharp_find_entry+0x80>
 8016302:	4b99      	ldr	r3, [pc, #612]	; (8016568 <etharp_find_entry+0x2d8>)
 8016304:	f240 1223 	movw	r2, #291	; 0x123
 8016308:	4998      	ldr	r1, [pc, #608]	; (801656c <etharp_find_entry+0x2dc>)
 801630a:	4899      	ldr	r0, [pc, #612]	; (8016570 <etharp_find_entry+0x2e0>)
 801630c:	f002 fdf2 	bl	8018ef4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d020      	beq.n	8016358 <etharp_find_entry+0xc8>
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	6819      	ldr	r1, [r3, #0]
 801631a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801631e:	4891      	ldr	r0, [pc, #580]	; (8016564 <etharp_find_entry+0x2d4>)
 8016320:	4613      	mov	r3, r2
 8016322:	005b      	lsls	r3, r3, #1
 8016324:	4413      	add	r3, r2
 8016326:	00db      	lsls	r3, r3, #3
 8016328:	4403      	add	r3, r0
 801632a:	3304      	adds	r3, #4
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	4299      	cmp	r1, r3
 8016330:	d112      	bne.n	8016358 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d00c      	beq.n	8016352 <etharp_find_entry+0xc2>
 8016338:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801633c:	4989      	ldr	r1, [pc, #548]	; (8016564 <etharp_find_entry+0x2d4>)
 801633e:	4613      	mov	r3, r2
 8016340:	005b      	lsls	r3, r3, #1
 8016342:	4413      	add	r3, r2
 8016344:	00db      	lsls	r3, r3, #3
 8016346:	440b      	add	r3, r1
 8016348:	3308      	adds	r3, #8
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	687a      	ldr	r2, [r7, #4]
 801634e:	429a      	cmp	r2, r3
 8016350:	d102      	bne.n	8016358 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016352:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016356:	e100      	b.n	801655a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016358:	7dfb      	ldrb	r3, [r7, #23]
 801635a:	2b01      	cmp	r3, #1
 801635c:	d140      	bne.n	80163e0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801635e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016362:	4980      	ldr	r1, [pc, #512]	; (8016564 <etharp_find_entry+0x2d4>)
 8016364:	4613      	mov	r3, r2
 8016366:	005b      	lsls	r3, r3, #1
 8016368:	4413      	add	r3, r2
 801636a:	00db      	lsls	r3, r3, #3
 801636c:	440b      	add	r3, r1
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d01a      	beq.n	80163aa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016374:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016378:	497a      	ldr	r1, [pc, #488]	; (8016564 <etharp_find_entry+0x2d4>)
 801637a:	4613      	mov	r3, r2
 801637c:	005b      	lsls	r3, r3, #1
 801637e:	4413      	add	r3, r2
 8016380:	00db      	lsls	r3, r3, #3
 8016382:	440b      	add	r3, r1
 8016384:	3312      	adds	r3, #18
 8016386:	881b      	ldrh	r3, [r3, #0]
 8016388:	8bba      	ldrh	r2, [r7, #28]
 801638a:	429a      	cmp	r2, r3
 801638c:	d845      	bhi.n	801641a <etharp_find_entry+0x18a>
            old_queue = i;
 801638e:	8c3b      	ldrh	r3, [r7, #32]
 8016390:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016392:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016396:	4973      	ldr	r1, [pc, #460]	; (8016564 <etharp_find_entry+0x2d4>)
 8016398:	4613      	mov	r3, r2
 801639a:	005b      	lsls	r3, r3, #1
 801639c:	4413      	add	r3, r2
 801639e:	00db      	lsls	r3, r3, #3
 80163a0:	440b      	add	r3, r1
 80163a2:	3312      	adds	r3, #18
 80163a4:	881b      	ldrh	r3, [r3, #0]
 80163a6:	83bb      	strh	r3, [r7, #28]
 80163a8:	e037      	b.n	801641a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80163aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163ae:	496d      	ldr	r1, [pc, #436]	; (8016564 <etharp_find_entry+0x2d4>)
 80163b0:	4613      	mov	r3, r2
 80163b2:	005b      	lsls	r3, r3, #1
 80163b4:	4413      	add	r3, r2
 80163b6:	00db      	lsls	r3, r3, #3
 80163b8:	440b      	add	r3, r1
 80163ba:	3312      	adds	r3, #18
 80163bc:	881b      	ldrh	r3, [r3, #0]
 80163be:	8b7a      	ldrh	r2, [r7, #26]
 80163c0:	429a      	cmp	r2, r3
 80163c2:	d82a      	bhi.n	801641a <etharp_find_entry+0x18a>
            old_pending = i;
 80163c4:	8c3b      	ldrh	r3, [r7, #32]
 80163c6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80163c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163cc:	4965      	ldr	r1, [pc, #404]	; (8016564 <etharp_find_entry+0x2d4>)
 80163ce:	4613      	mov	r3, r2
 80163d0:	005b      	lsls	r3, r3, #1
 80163d2:	4413      	add	r3, r2
 80163d4:	00db      	lsls	r3, r3, #3
 80163d6:	440b      	add	r3, r1
 80163d8:	3312      	adds	r3, #18
 80163da:	881b      	ldrh	r3, [r3, #0]
 80163dc:	837b      	strh	r3, [r7, #26]
 80163de:	e01c      	b.n	801641a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80163e0:	7dfb      	ldrb	r3, [r7, #23]
 80163e2:	2b01      	cmp	r3, #1
 80163e4:	d919      	bls.n	801641a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80163e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163ea:	495e      	ldr	r1, [pc, #376]	; (8016564 <etharp_find_entry+0x2d4>)
 80163ec:	4613      	mov	r3, r2
 80163ee:	005b      	lsls	r3, r3, #1
 80163f0:	4413      	add	r3, r2
 80163f2:	00db      	lsls	r3, r3, #3
 80163f4:	440b      	add	r3, r1
 80163f6:	3312      	adds	r3, #18
 80163f8:	881b      	ldrh	r3, [r3, #0]
 80163fa:	8b3a      	ldrh	r2, [r7, #24]
 80163fc:	429a      	cmp	r2, r3
 80163fe:	d80c      	bhi.n	801641a <etharp_find_entry+0x18a>
            old_stable = i;
 8016400:	8c3b      	ldrh	r3, [r7, #32]
 8016402:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016404:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016408:	4956      	ldr	r1, [pc, #344]	; (8016564 <etharp_find_entry+0x2d4>)
 801640a:	4613      	mov	r3, r2
 801640c:	005b      	lsls	r3, r3, #1
 801640e:	4413      	add	r3, r2
 8016410:	00db      	lsls	r3, r3, #3
 8016412:	440b      	add	r3, r1
 8016414:	3312      	adds	r3, #18
 8016416:	881b      	ldrh	r3, [r3, #0]
 8016418:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801641a:	8c3b      	ldrh	r3, [r7, #32]
 801641c:	3301      	adds	r3, #1
 801641e:	b29b      	uxth	r3, r3
 8016420:	843b      	strh	r3, [r7, #32]
 8016422:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016426:	2b09      	cmp	r3, #9
 8016428:	f77f af4c 	ble.w	80162c4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801642c:	7afb      	ldrb	r3, [r7, #11]
 801642e:	f003 0302 	and.w	r3, r3, #2
 8016432:	2b00      	cmp	r3, #0
 8016434:	d108      	bne.n	8016448 <etharp_find_entry+0x1b8>
 8016436:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801643a:	2b0a      	cmp	r3, #10
 801643c:	d107      	bne.n	801644e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801643e:	7afb      	ldrb	r3, [r7, #11]
 8016440:	f003 0301 	and.w	r3, r3, #1
 8016444:	2b00      	cmp	r3, #0
 8016446:	d102      	bne.n	801644e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016448:	f04f 33ff 	mov.w	r3, #4294967295
 801644c:	e085      	b.n	801655a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801644e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016452:	2b09      	cmp	r3, #9
 8016454:	dc02      	bgt.n	801645c <etharp_find_entry+0x1cc>
    i = empty;
 8016456:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016458:	843b      	strh	r3, [r7, #32]
 801645a:	e039      	b.n	80164d0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801645c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016460:	2b09      	cmp	r3, #9
 8016462:	dc14      	bgt.n	801648e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016464:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016466:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016468:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801646c:	493d      	ldr	r1, [pc, #244]	; (8016564 <etharp_find_entry+0x2d4>)
 801646e:	4613      	mov	r3, r2
 8016470:	005b      	lsls	r3, r3, #1
 8016472:	4413      	add	r3, r2
 8016474:	00db      	lsls	r3, r3, #3
 8016476:	440b      	add	r3, r1
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d018      	beq.n	80164b0 <etharp_find_entry+0x220>
 801647e:	4b3a      	ldr	r3, [pc, #232]	; (8016568 <etharp_find_entry+0x2d8>)
 8016480:	f240 126d 	movw	r2, #365	; 0x16d
 8016484:	493b      	ldr	r1, [pc, #236]	; (8016574 <etharp_find_entry+0x2e4>)
 8016486:	483a      	ldr	r0, [pc, #232]	; (8016570 <etharp_find_entry+0x2e0>)
 8016488:	f002 fd34 	bl	8018ef4 <iprintf>
 801648c:	e010      	b.n	80164b0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801648e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016492:	2b09      	cmp	r3, #9
 8016494:	dc02      	bgt.n	801649c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016496:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016498:	843b      	strh	r3, [r7, #32]
 801649a:	e009      	b.n	80164b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801649c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80164a0:	2b09      	cmp	r3, #9
 80164a2:	dc02      	bgt.n	80164aa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80164a4:	8bfb      	ldrh	r3, [r7, #30]
 80164a6:	843b      	strh	r3, [r7, #32]
 80164a8:	e002      	b.n	80164b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80164aa:	f04f 33ff 	mov.w	r3, #4294967295
 80164ae:	e054      	b.n	801655a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80164b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80164b4:	2b09      	cmp	r3, #9
 80164b6:	dd06      	ble.n	80164c6 <etharp_find_entry+0x236>
 80164b8:	4b2b      	ldr	r3, [pc, #172]	; (8016568 <etharp_find_entry+0x2d8>)
 80164ba:	f240 127f 	movw	r2, #383	; 0x17f
 80164be:	492e      	ldr	r1, [pc, #184]	; (8016578 <etharp_find_entry+0x2e8>)
 80164c0:	482b      	ldr	r0, [pc, #172]	; (8016570 <etharp_find_entry+0x2e0>)
 80164c2:	f002 fd17 	bl	8018ef4 <iprintf>
    etharp_free_entry(i);
 80164c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80164ca:	4618      	mov	r0, r3
 80164cc:	f7ff fe06 	bl	80160dc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80164d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80164d4:	2b09      	cmp	r3, #9
 80164d6:	dd06      	ble.n	80164e6 <etharp_find_entry+0x256>
 80164d8:	4b23      	ldr	r3, [pc, #140]	; (8016568 <etharp_find_entry+0x2d8>)
 80164da:	f240 1283 	movw	r2, #387	; 0x183
 80164de:	4926      	ldr	r1, [pc, #152]	; (8016578 <etharp_find_entry+0x2e8>)
 80164e0:	4823      	ldr	r0, [pc, #140]	; (8016570 <etharp_find_entry+0x2e0>)
 80164e2:	f002 fd07 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80164e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164ea:	491e      	ldr	r1, [pc, #120]	; (8016564 <etharp_find_entry+0x2d4>)
 80164ec:	4613      	mov	r3, r2
 80164ee:	005b      	lsls	r3, r3, #1
 80164f0:	4413      	add	r3, r2
 80164f2:	00db      	lsls	r3, r3, #3
 80164f4:	440b      	add	r3, r1
 80164f6:	3314      	adds	r3, #20
 80164f8:	781b      	ldrb	r3, [r3, #0]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d006      	beq.n	801650c <etharp_find_entry+0x27c>
 80164fe:	4b1a      	ldr	r3, [pc, #104]	; (8016568 <etharp_find_entry+0x2d8>)
 8016500:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016504:	491d      	ldr	r1, [pc, #116]	; (801657c <etharp_find_entry+0x2ec>)
 8016506:	481a      	ldr	r0, [pc, #104]	; (8016570 <etharp_find_entry+0x2e0>)
 8016508:	f002 fcf4 	bl	8018ef4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d00b      	beq.n	801652a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016512:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	6819      	ldr	r1, [r3, #0]
 801651a:	4812      	ldr	r0, [pc, #72]	; (8016564 <etharp_find_entry+0x2d4>)
 801651c:	4613      	mov	r3, r2
 801651e:	005b      	lsls	r3, r3, #1
 8016520:	4413      	add	r3, r2
 8016522:	00db      	lsls	r3, r3, #3
 8016524:	4403      	add	r3, r0
 8016526:	3304      	adds	r3, #4
 8016528:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801652a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801652e:	490d      	ldr	r1, [pc, #52]	; (8016564 <etharp_find_entry+0x2d4>)
 8016530:	4613      	mov	r3, r2
 8016532:	005b      	lsls	r3, r3, #1
 8016534:	4413      	add	r3, r2
 8016536:	00db      	lsls	r3, r3, #3
 8016538:	440b      	add	r3, r1
 801653a:	3312      	adds	r3, #18
 801653c:	2200      	movs	r2, #0
 801653e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016540:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016544:	4907      	ldr	r1, [pc, #28]	; (8016564 <etharp_find_entry+0x2d4>)
 8016546:	4613      	mov	r3, r2
 8016548:	005b      	lsls	r3, r3, #1
 801654a:	4413      	add	r3, r2
 801654c:	00db      	lsls	r3, r3, #3
 801654e:	440b      	add	r3, r1
 8016550:	3308      	adds	r3, #8
 8016552:	687a      	ldr	r2, [r7, #4]
 8016554:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016556:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801655a:	4618      	mov	r0, r3
 801655c:	3728      	adds	r7, #40	; 0x28
 801655e:	46bd      	mov	sp, r7
 8016560:	bd80      	pop	{r7, pc}
 8016562:	bf00      	nop
 8016564:	200006e8 	.word	0x200006e8
 8016568:	0801c8c8 	.word	0x0801c8c8
 801656c:	0801c900 	.word	0x0801c900
 8016570:	0801c940 	.word	0x0801c940
 8016574:	0801c968 	.word	0x0801c968
 8016578:	0801c980 	.word	0x0801c980
 801657c:	0801c994 	.word	0x0801c994

08016580 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b088      	sub	sp, #32
 8016584:	af02      	add	r7, sp, #8
 8016586:	60f8      	str	r0, [r7, #12]
 8016588:	60b9      	str	r1, [r7, #8]
 801658a:	607a      	str	r2, [r7, #4]
 801658c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016594:	2b06      	cmp	r3, #6
 8016596:	d006      	beq.n	80165a6 <etharp_update_arp_entry+0x26>
 8016598:	4b48      	ldr	r3, [pc, #288]	; (80166bc <etharp_update_arp_entry+0x13c>)
 801659a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801659e:	4948      	ldr	r1, [pc, #288]	; (80166c0 <etharp_update_arp_entry+0x140>)
 80165a0:	4848      	ldr	r0, [pc, #288]	; (80166c4 <etharp_update_arp_entry+0x144>)
 80165a2:	f002 fca7 	bl	8018ef4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80165a6:	68bb      	ldr	r3, [r7, #8]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d012      	beq.n	80165d2 <etharp_update_arp_entry+0x52>
 80165ac:	68bb      	ldr	r3, [r7, #8]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d00e      	beq.n	80165d2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80165b4:	68bb      	ldr	r3, [r7, #8]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	68f9      	ldr	r1, [r7, #12]
 80165ba:	4618      	mov	r0, r3
 80165bc:	f001 f8fe 	bl	80177bc <ip4_addr_isbroadcast_u32>
 80165c0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d105      	bne.n	80165d2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80165c6:	68bb      	ldr	r3, [r7, #8]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80165ce:	2be0      	cmp	r3, #224	; 0xe0
 80165d0:	d102      	bne.n	80165d8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80165d2:	f06f 030f 	mvn.w	r3, #15
 80165d6:	e06c      	b.n	80166b2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80165d8:	78fb      	ldrb	r3, [r7, #3]
 80165da:	68fa      	ldr	r2, [r7, #12]
 80165dc:	4619      	mov	r1, r3
 80165de:	68b8      	ldr	r0, [r7, #8]
 80165e0:	f7ff fe56 	bl	8016290 <etharp_find_entry>
 80165e4:	4603      	mov	r3, r0
 80165e6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80165e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	da02      	bge.n	80165f6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80165f0:	8afb      	ldrh	r3, [r7, #22]
 80165f2:	b25b      	sxtb	r3, r3
 80165f4:	e05d      	b.n	80166b2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80165f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80165fa:	4933      	ldr	r1, [pc, #204]	; (80166c8 <etharp_update_arp_entry+0x148>)
 80165fc:	4613      	mov	r3, r2
 80165fe:	005b      	lsls	r3, r3, #1
 8016600:	4413      	add	r3, r2
 8016602:	00db      	lsls	r3, r3, #3
 8016604:	440b      	add	r3, r1
 8016606:	3314      	adds	r3, #20
 8016608:	2202      	movs	r2, #2
 801660a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801660c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016610:	492d      	ldr	r1, [pc, #180]	; (80166c8 <etharp_update_arp_entry+0x148>)
 8016612:	4613      	mov	r3, r2
 8016614:	005b      	lsls	r3, r3, #1
 8016616:	4413      	add	r3, r2
 8016618:	00db      	lsls	r3, r3, #3
 801661a:	440b      	add	r3, r1
 801661c:	3308      	adds	r3, #8
 801661e:	68fa      	ldr	r2, [r7, #12]
 8016620:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016622:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016626:	4613      	mov	r3, r2
 8016628:	005b      	lsls	r3, r3, #1
 801662a:	4413      	add	r3, r2
 801662c:	00db      	lsls	r3, r3, #3
 801662e:	3308      	adds	r3, #8
 8016630:	4a25      	ldr	r2, [pc, #148]	; (80166c8 <etharp_update_arp_entry+0x148>)
 8016632:	4413      	add	r3, r2
 8016634:	3304      	adds	r3, #4
 8016636:	2206      	movs	r2, #6
 8016638:	6879      	ldr	r1, [r7, #4]
 801663a:	4618      	mov	r0, r3
 801663c:	f002 fb9a 	bl	8018d74 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016640:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016644:	4920      	ldr	r1, [pc, #128]	; (80166c8 <etharp_update_arp_entry+0x148>)
 8016646:	4613      	mov	r3, r2
 8016648:	005b      	lsls	r3, r3, #1
 801664a:	4413      	add	r3, r2
 801664c:	00db      	lsls	r3, r3, #3
 801664e:	440b      	add	r3, r1
 8016650:	3312      	adds	r3, #18
 8016652:	2200      	movs	r2, #0
 8016654:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016656:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801665a:	491b      	ldr	r1, [pc, #108]	; (80166c8 <etharp_update_arp_entry+0x148>)
 801665c:	4613      	mov	r3, r2
 801665e:	005b      	lsls	r3, r3, #1
 8016660:	4413      	add	r3, r2
 8016662:	00db      	lsls	r3, r3, #3
 8016664:	440b      	add	r3, r1
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d021      	beq.n	80166b0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801666c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016670:	4915      	ldr	r1, [pc, #84]	; (80166c8 <etharp_update_arp_entry+0x148>)
 8016672:	4613      	mov	r3, r2
 8016674:	005b      	lsls	r3, r3, #1
 8016676:	4413      	add	r3, r2
 8016678:	00db      	lsls	r3, r3, #3
 801667a:	440b      	add	r3, r1
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016680:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016684:	4910      	ldr	r1, [pc, #64]	; (80166c8 <etharp_update_arp_entry+0x148>)
 8016686:	4613      	mov	r3, r2
 8016688:	005b      	lsls	r3, r3, #1
 801668a:	4413      	add	r3, r2
 801668c:	00db      	lsls	r3, r3, #3
 801668e:	440b      	add	r3, r1
 8016690:	2200      	movs	r2, #0
 8016692:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801669a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801669e:	9300      	str	r3, [sp, #0]
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	6939      	ldr	r1, [r7, #16]
 80166a4:	68f8      	ldr	r0, [r7, #12]
 80166a6:	f001 ff91 	bl	80185cc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80166aa:	6938      	ldr	r0, [r7, #16]
 80166ac:	f7f8 ff2a 	bl	800f504 <pbuf_free>
  }
  return ERR_OK;
 80166b0:	2300      	movs	r3, #0
}
 80166b2:	4618      	mov	r0, r3
 80166b4:	3718      	adds	r7, #24
 80166b6:	46bd      	mov	sp, r7
 80166b8:	bd80      	pop	{r7, pc}
 80166ba:	bf00      	nop
 80166bc:	0801c8c8 	.word	0x0801c8c8
 80166c0:	0801c9c0 	.word	0x0801c9c0
 80166c4:	0801c940 	.word	0x0801c940
 80166c8:	200006e8 	.word	0x200006e8

080166cc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b084      	sub	sp, #16
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80166d4:	2300      	movs	r3, #0
 80166d6:	60fb      	str	r3, [r7, #12]
 80166d8:	e01e      	b.n	8016718 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80166da:	4913      	ldr	r1, [pc, #76]	; (8016728 <etharp_cleanup_netif+0x5c>)
 80166dc:	68fa      	ldr	r2, [r7, #12]
 80166de:	4613      	mov	r3, r2
 80166e0:	005b      	lsls	r3, r3, #1
 80166e2:	4413      	add	r3, r2
 80166e4:	00db      	lsls	r3, r3, #3
 80166e6:	440b      	add	r3, r1
 80166e8:	3314      	adds	r3, #20
 80166ea:	781b      	ldrb	r3, [r3, #0]
 80166ec:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80166ee:	7afb      	ldrb	r3, [r7, #11]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d00e      	beq.n	8016712 <etharp_cleanup_netif+0x46>
 80166f4:	490c      	ldr	r1, [pc, #48]	; (8016728 <etharp_cleanup_netif+0x5c>)
 80166f6:	68fa      	ldr	r2, [r7, #12]
 80166f8:	4613      	mov	r3, r2
 80166fa:	005b      	lsls	r3, r3, #1
 80166fc:	4413      	add	r3, r2
 80166fe:	00db      	lsls	r3, r3, #3
 8016700:	440b      	add	r3, r1
 8016702:	3308      	adds	r3, #8
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	687a      	ldr	r2, [r7, #4]
 8016708:	429a      	cmp	r2, r3
 801670a:	d102      	bne.n	8016712 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801670c:	68f8      	ldr	r0, [r7, #12]
 801670e:	f7ff fce5 	bl	80160dc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	3301      	adds	r3, #1
 8016716:	60fb      	str	r3, [r7, #12]
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	2b09      	cmp	r3, #9
 801671c:	dddd      	ble.n	80166da <etharp_cleanup_netif+0xe>
    }
  }
}
 801671e:	bf00      	nop
 8016720:	bf00      	nop
 8016722:	3710      	adds	r7, #16
 8016724:	46bd      	mov	sp, r7
 8016726:	bd80      	pop	{r7, pc}
 8016728:	200006e8 	.word	0x200006e8

0801672c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801672c:	b5b0      	push	{r4, r5, r7, lr}
 801672e:	b08a      	sub	sp, #40	; 0x28
 8016730:	af04      	add	r7, sp, #16
 8016732:	6078      	str	r0, [r7, #4]
 8016734:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016736:	683b      	ldr	r3, [r7, #0]
 8016738:	2b00      	cmp	r3, #0
 801673a:	d107      	bne.n	801674c <etharp_input+0x20>
 801673c:	4b3d      	ldr	r3, [pc, #244]	; (8016834 <etharp_input+0x108>)
 801673e:	f240 228a 	movw	r2, #650	; 0x28a
 8016742:	493d      	ldr	r1, [pc, #244]	; (8016838 <etharp_input+0x10c>)
 8016744:	483d      	ldr	r0, [pc, #244]	; (801683c <etharp_input+0x110>)
 8016746:	f002 fbd5 	bl	8018ef4 <iprintf>
 801674a:	e06f      	b.n	801682c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	685b      	ldr	r3, [r3, #4]
 8016750:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016752:	693b      	ldr	r3, [r7, #16]
 8016754:	881b      	ldrh	r3, [r3, #0]
 8016756:	b29b      	uxth	r3, r3
 8016758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801675c:	d10c      	bne.n	8016778 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801675e:	693b      	ldr	r3, [r7, #16]
 8016760:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016762:	2b06      	cmp	r3, #6
 8016764:	d108      	bne.n	8016778 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016766:	693b      	ldr	r3, [r7, #16]
 8016768:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801676a:	2b04      	cmp	r3, #4
 801676c:	d104      	bne.n	8016778 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801676e:	693b      	ldr	r3, [r7, #16]
 8016770:	885b      	ldrh	r3, [r3, #2]
 8016772:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016774:	2b08      	cmp	r3, #8
 8016776:	d003      	beq.n	8016780 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016778:	6878      	ldr	r0, [r7, #4]
 801677a:	f7f8 fec3 	bl	800f504 <pbuf_free>
    return;
 801677e:	e055      	b.n	801682c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016780:	693b      	ldr	r3, [r7, #16]
 8016782:	330e      	adds	r3, #14
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016788:	693b      	ldr	r3, [r7, #16]
 801678a:	3318      	adds	r3, #24
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016790:	683b      	ldr	r3, [r7, #0]
 8016792:	3304      	adds	r3, #4
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d102      	bne.n	80167a0 <etharp_input+0x74>
    for_us = 0;
 801679a:	2300      	movs	r3, #0
 801679c:	75fb      	strb	r3, [r7, #23]
 801679e:	e009      	b.n	80167b4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80167a0:	68ba      	ldr	r2, [r7, #8]
 80167a2:	683b      	ldr	r3, [r7, #0]
 80167a4:	3304      	adds	r3, #4
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	429a      	cmp	r2, r3
 80167aa:	bf0c      	ite	eq
 80167ac:	2301      	moveq	r3, #1
 80167ae:	2300      	movne	r3, #0
 80167b0:	b2db      	uxtb	r3, r3
 80167b2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80167b4:	693b      	ldr	r3, [r7, #16]
 80167b6:	f103 0208 	add.w	r2, r3, #8
 80167ba:	7dfb      	ldrb	r3, [r7, #23]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d001      	beq.n	80167c4 <etharp_input+0x98>
 80167c0:	2301      	movs	r3, #1
 80167c2:	e000      	b.n	80167c6 <etharp_input+0x9a>
 80167c4:	2302      	movs	r3, #2
 80167c6:	f107 010c 	add.w	r1, r7, #12
 80167ca:	6838      	ldr	r0, [r7, #0]
 80167cc:	f7ff fed8 	bl	8016580 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80167d0:	693b      	ldr	r3, [r7, #16]
 80167d2:	88db      	ldrh	r3, [r3, #6]
 80167d4:	b29b      	uxth	r3, r3
 80167d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80167da:	d003      	beq.n	80167e4 <etharp_input+0xb8>
 80167dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80167e0:	d01e      	beq.n	8016820 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80167e2:	e020      	b.n	8016826 <etharp_input+0xfa>
      if (for_us) {
 80167e4:	7dfb      	ldrb	r3, [r7, #23]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d01c      	beq.n	8016824 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80167ea:	683b      	ldr	r3, [r7, #0]
 80167ec:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80167f0:	693b      	ldr	r3, [r7, #16]
 80167f2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80167f6:	683b      	ldr	r3, [r7, #0]
 80167f8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80167fc:	683b      	ldr	r3, [r7, #0]
 80167fe:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016800:	693a      	ldr	r2, [r7, #16]
 8016802:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016804:	2102      	movs	r1, #2
 8016806:	9103      	str	r1, [sp, #12]
 8016808:	f107 010c 	add.w	r1, r7, #12
 801680c:	9102      	str	r1, [sp, #8]
 801680e:	9201      	str	r2, [sp, #4]
 8016810:	9300      	str	r3, [sp, #0]
 8016812:	462b      	mov	r3, r5
 8016814:	4622      	mov	r2, r4
 8016816:	4601      	mov	r1, r0
 8016818:	6838      	ldr	r0, [r7, #0]
 801681a:	f000 faeb 	bl	8016df4 <etharp_raw>
      break;
 801681e:	e001      	b.n	8016824 <etharp_input+0xf8>
      break;
 8016820:	bf00      	nop
 8016822:	e000      	b.n	8016826 <etharp_input+0xfa>
      break;
 8016824:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016826:	6878      	ldr	r0, [r7, #4]
 8016828:	f7f8 fe6c 	bl	800f504 <pbuf_free>
}
 801682c:	3718      	adds	r7, #24
 801682e:	46bd      	mov	sp, r7
 8016830:	bdb0      	pop	{r4, r5, r7, pc}
 8016832:	bf00      	nop
 8016834:	0801c8c8 	.word	0x0801c8c8
 8016838:	0801ca18 	.word	0x0801ca18
 801683c:	0801c940 	.word	0x0801c940

08016840 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016840:	b580      	push	{r7, lr}
 8016842:	b086      	sub	sp, #24
 8016844:	af02      	add	r7, sp, #8
 8016846:	60f8      	str	r0, [r7, #12]
 8016848:	60b9      	str	r1, [r7, #8]
 801684a:	4613      	mov	r3, r2
 801684c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801684e:	79fa      	ldrb	r2, [r7, #7]
 8016850:	4944      	ldr	r1, [pc, #272]	; (8016964 <etharp_output_to_arp_index+0x124>)
 8016852:	4613      	mov	r3, r2
 8016854:	005b      	lsls	r3, r3, #1
 8016856:	4413      	add	r3, r2
 8016858:	00db      	lsls	r3, r3, #3
 801685a:	440b      	add	r3, r1
 801685c:	3314      	adds	r3, #20
 801685e:	781b      	ldrb	r3, [r3, #0]
 8016860:	2b01      	cmp	r3, #1
 8016862:	d806      	bhi.n	8016872 <etharp_output_to_arp_index+0x32>
 8016864:	4b40      	ldr	r3, [pc, #256]	; (8016968 <etharp_output_to_arp_index+0x128>)
 8016866:	f240 22ee 	movw	r2, #750	; 0x2ee
 801686a:	4940      	ldr	r1, [pc, #256]	; (801696c <etharp_output_to_arp_index+0x12c>)
 801686c:	4840      	ldr	r0, [pc, #256]	; (8016970 <etharp_output_to_arp_index+0x130>)
 801686e:	f002 fb41 	bl	8018ef4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016872:	79fa      	ldrb	r2, [r7, #7]
 8016874:	493b      	ldr	r1, [pc, #236]	; (8016964 <etharp_output_to_arp_index+0x124>)
 8016876:	4613      	mov	r3, r2
 8016878:	005b      	lsls	r3, r3, #1
 801687a:	4413      	add	r3, r2
 801687c:	00db      	lsls	r3, r3, #3
 801687e:	440b      	add	r3, r1
 8016880:	3314      	adds	r3, #20
 8016882:	781b      	ldrb	r3, [r3, #0]
 8016884:	2b02      	cmp	r3, #2
 8016886:	d153      	bne.n	8016930 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016888:	79fa      	ldrb	r2, [r7, #7]
 801688a:	4936      	ldr	r1, [pc, #216]	; (8016964 <etharp_output_to_arp_index+0x124>)
 801688c:	4613      	mov	r3, r2
 801688e:	005b      	lsls	r3, r3, #1
 8016890:	4413      	add	r3, r2
 8016892:	00db      	lsls	r3, r3, #3
 8016894:	440b      	add	r3, r1
 8016896:	3312      	adds	r3, #18
 8016898:	881b      	ldrh	r3, [r3, #0]
 801689a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801689e:	d919      	bls.n	80168d4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80168a0:	79fa      	ldrb	r2, [r7, #7]
 80168a2:	4613      	mov	r3, r2
 80168a4:	005b      	lsls	r3, r3, #1
 80168a6:	4413      	add	r3, r2
 80168a8:	00db      	lsls	r3, r3, #3
 80168aa:	4a2e      	ldr	r2, [pc, #184]	; (8016964 <etharp_output_to_arp_index+0x124>)
 80168ac:	4413      	add	r3, r2
 80168ae:	3304      	adds	r3, #4
 80168b0:	4619      	mov	r1, r3
 80168b2:	68f8      	ldr	r0, [r7, #12]
 80168b4:	f000 fb4c 	bl	8016f50 <etharp_request>
 80168b8:	4603      	mov	r3, r0
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d138      	bne.n	8016930 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80168be:	79fa      	ldrb	r2, [r7, #7]
 80168c0:	4928      	ldr	r1, [pc, #160]	; (8016964 <etharp_output_to_arp_index+0x124>)
 80168c2:	4613      	mov	r3, r2
 80168c4:	005b      	lsls	r3, r3, #1
 80168c6:	4413      	add	r3, r2
 80168c8:	00db      	lsls	r3, r3, #3
 80168ca:	440b      	add	r3, r1
 80168cc:	3314      	adds	r3, #20
 80168ce:	2203      	movs	r2, #3
 80168d0:	701a      	strb	r2, [r3, #0]
 80168d2:	e02d      	b.n	8016930 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80168d4:	79fa      	ldrb	r2, [r7, #7]
 80168d6:	4923      	ldr	r1, [pc, #140]	; (8016964 <etharp_output_to_arp_index+0x124>)
 80168d8:	4613      	mov	r3, r2
 80168da:	005b      	lsls	r3, r3, #1
 80168dc:	4413      	add	r3, r2
 80168de:	00db      	lsls	r3, r3, #3
 80168e0:	440b      	add	r3, r1
 80168e2:	3312      	adds	r3, #18
 80168e4:	881b      	ldrh	r3, [r3, #0]
 80168e6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80168ea:	d321      	bcc.n	8016930 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80168ec:	79fa      	ldrb	r2, [r7, #7]
 80168ee:	4613      	mov	r3, r2
 80168f0:	005b      	lsls	r3, r3, #1
 80168f2:	4413      	add	r3, r2
 80168f4:	00db      	lsls	r3, r3, #3
 80168f6:	4a1b      	ldr	r2, [pc, #108]	; (8016964 <etharp_output_to_arp_index+0x124>)
 80168f8:	4413      	add	r3, r2
 80168fa:	1d19      	adds	r1, r3, #4
 80168fc:	79fa      	ldrb	r2, [r7, #7]
 80168fe:	4613      	mov	r3, r2
 8016900:	005b      	lsls	r3, r3, #1
 8016902:	4413      	add	r3, r2
 8016904:	00db      	lsls	r3, r3, #3
 8016906:	3308      	adds	r3, #8
 8016908:	4a16      	ldr	r2, [pc, #88]	; (8016964 <etharp_output_to_arp_index+0x124>)
 801690a:	4413      	add	r3, r2
 801690c:	3304      	adds	r3, #4
 801690e:	461a      	mov	r2, r3
 8016910:	68f8      	ldr	r0, [r7, #12]
 8016912:	f000 fafb 	bl	8016f0c <etharp_request_dst>
 8016916:	4603      	mov	r3, r0
 8016918:	2b00      	cmp	r3, #0
 801691a:	d109      	bne.n	8016930 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801691c:	79fa      	ldrb	r2, [r7, #7]
 801691e:	4911      	ldr	r1, [pc, #68]	; (8016964 <etharp_output_to_arp_index+0x124>)
 8016920:	4613      	mov	r3, r2
 8016922:	005b      	lsls	r3, r3, #1
 8016924:	4413      	add	r3, r2
 8016926:	00db      	lsls	r3, r3, #3
 8016928:	440b      	add	r3, r1
 801692a:	3314      	adds	r3, #20
 801692c:	2203      	movs	r2, #3
 801692e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8016936:	79fa      	ldrb	r2, [r7, #7]
 8016938:	4613      	mov	r3, r2
 801693a:	005b      	lsls	r3, r3, #1
 801693c:	4413      	add	r3, r2
 801693e:	00db      	lsls	r3, r3, #3
 8016940:	3308      	adds	r3, #8
 8016942:	4a08      	ldr	r2, [pc, #32]	; (8016964 <etharp_output_to_arp_index+0x124>)
 8016944:	4413      	add	r3, r2
 8016946:	3304      	adds	r3, #4
 8016948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801694c:	9200      	str	r2, [sp, #0]
 801694e:	460a      	mov	r2, r1
 8016950:	68b9      	ldr	r1, [r7, #8]
 8016952:	68f8      	ldr	r0, [r7, #12]
 8016954:	f001 fe3a 	bl	80185cc <ethernet_output>
 8016958:	4603      	mov	r3, r0
}
 801695a:	4618      	mov	r0, r3
 801695c:	3710      	adds	r7, #16
 801695e:	46bd      	mov	sp, r7
 8016960:	bd80      	pop	{r7, pc}
 8016962:	bf00      	nop
 8016964:	200006e8 	.word	0x200006e8
 8016968:	0801c8c8 	.word	0x0801c8c8
 801696c:	0801ca38 	.word	0x0801ca38
 8016970:	0801c940 	.word	0x0801c940

08016974 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016974:	b580      	push	{r7, lr}
 8016976:	b08a      	sub	sp, #40	; 0x28
 8016978:	af02      	add	r7, sp, #8
 801697a:	60f8      	str	r0, [r7, #12]
 801697c:	60b9      	str	r1, [r7, #8]
 801697e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	2b00      	cmp	r3, #0
 8016988:	d106      	bne.n	8016998 <etharp_output+0x24>
 801698a:	4b73      	ldr	r3, [pc, #460]	; (8016b58 <etharp_output+0x1e4>)
 801698c:	f240 321e 	movw	r2, #798	; 0x31e
 8016990:	4972      	ldr	r1, [pc, #456]	; (8016b5c <etharp_output+0x1e8>)
 8016992:	4873      	ldr	r0, [pc, #460]	; (8016b60 <etharp_output+0x1ec>)
 8016994:	f002 faae 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016998:	68bb      	ldr	r3, [r7, #8]
 801699a:	2b00      	cmp	r3, #0
 801699c:	d106      	bne.n	80169ac <etharp_output+0x38>
 801699e:	4b6e      	ldr	r3, [pc, #440]	; (8016b58 <etharp_output+0x1e4>)
 80169a0:	f240 321f 	movw	r2, #799	; 0x31f
 80169a4:	496f      	ldr	r1, [pc, #444]	; (8016b64 <etharp_output+0x1f0>)
 80169a6:	486e      	ldr	r0, [pc, #440]	; (8016b60 <etharp_output+0x1ec>)
 80169a8:	f002 faa4 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d106      	bne.n	80169c0 <etharp_output+0x4c>
 80169b2:	4b69      	ldr	r3, [pc, #420]	; (8016b58 <etharp_output+0x1e4>)
 80169b4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80169b8:	496b      	ldr	r1, [pc, #428]	; (8016b68 <etharp_output+0x1f4>)
 80169ba:	4869      	ldr	r0, [pc, #420]	; (8016b60 <etharp_output+0x1ec>)
 80169bc:	f002 fa9a 	bl	8018ef4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	68f9      	ldr	r1, [r7, #12]
 80169c6:	4618      	mov	r0, r3
 80169c8:	f000 fef8 	bl	80177bc <ip4_addr_isbroadcast_u32>
 80169cc:	4603      	mov	r3, r0
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d002      	beq.n	80169d8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80169d2:	4b66      	ldr	r3, [pc, #408]	; (8016b6c <etharp_output+0x1f8>)
 80169d4:	61fb      	str	r3, [r7, #28]
 80169d6:	e0af      	b.n	8016b38 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80169e0:	2be0      	cmp	r3, #224	; 0xe0
 80169e2:	d118      	bne.n	8016a16 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80169e4:	2301      	movs	r3, #1
 80169e6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80169e8:	2300      	movs	r3, #0
 80169ea:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80169ec:	235e      	movs	r3, #94	; 0x5e
 80169ee:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	3301      	adds	r3, #1
 80169f4:	781b      	ldrb	r3, [r3, #0]
 80169f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80169fa:	b2db      	uxtb	r3, r3
 80169fc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	3302      	adds	r3, #2
 8016a02:	781b      	ldrb	r3, [r3, #0]
 8016a04:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	3303      	adds	r3, #3
 8016a0a:	781b      	ldrb	r3, [r3, #0]
 8016a0c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016a0e:	f107 0310 	add.w	r3, r7, #16
 8016a12:	61fb      	str	r3, [r7, #28]
 8016a14:	e090      	b.n	8016b38 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	681a      	ldr	r2, [r3, #0]
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	3304      	adds	r3, #4
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	405a      	eors	r2, r3
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	3308      	adds	r3, #8
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	4013      	ands	r3, r2
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d012      	beq.n	8016a54 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016a34:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016a38:	4293      	cmp	r3, r2
 8016a3a:	d00b      	beq.n	8016a54 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	330c      	adds	r3, #12
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d003      	beq.n	8016a4e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	330c      	adds	r3, #12
 8016a4a:	61bb      	str	r3, [r7, #24]
 8016a4c:	e002      	b.n	8016a54 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016a4e:	f06f 0303 	mvn.w	r3, #3
 8016a52:	e07d      	b.n	8016b50 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016a54:	4b46      	ldr	r3, [pc, #280]	; (8016b70 <etharp_output+0x1fc>)
 8016a56:	781b      	ldrb	r3, [r3, #0]
 8016a58:	4619      	mov	r1, r3
 8016a5a:	4a46      	ldr	r2, [pc, #280]	; (8016b74 <etharp_output+0x200>)
 8016a5c:	460b      	mov	r3, r1
 8016a5e:	005b      	lsls	r3, r3, #1
 8016a60:	440b      	add	r3, r1
 8016a62:	00db      	lsls	r3, r3, #3
 8016a64:	4413      	add	r3, r2
 8016a66:	3314      	adds	r3, #20
 8016a68:	781b      	ldrb	r3, [r3, #0]
 8016a6a:	2b01      	cmp	r3, #1
 8016a6c:	d925      	bls.n	8016aba <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016a6e:	4b40      	ldr	r3, [pc, #256]	; (8016b70 <etharp_output+0x1fc>)
 8016a70:	781b      	ldrb	r3, [r3, #0]
 8016a72:	4619      	mov	r1, r3
 8016a74:	4a3f      	ldr	r2, [pc, #252]	; (8016b74 <etharp_output+0x200>)
 8016a76:	460b      	mov	r3, r1
 8016a78:	005b      	lsls	r3, r3, #1
 8016a7a:	440b      	add	r3, r1
 8016a7c:	00db      	lsls	r3, r3, #3
 8016a7e:	4413      	add	r3, r2
 8016a80:	3308      	adds	r3, #8
 8016a82:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016a84:	68fa      	ldr	r2, [r7, #12]
 8016a86:	429a      	cmp	r2, r3
 8016a88:	d117      	bne.n	8016aba <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016a8a:	69bb      	ldr	r3, [r7, #24]
 8016a8c:	681a      	ldr	r2, [r3, #0]
 8016a8e:	4b38      	ldr	r3, [pc, #224]	; (8016b70 <etharp_output+0x1fc>)
 8016a90:	781b      	ldrb	r3, [r3, #0]
 8016a92:	4618      	mov	r0, r3
 8016a94:	4937      	ldr	r1, [pc, #220]	; (8016b74 <etharp_output+0x200>)
 8016a96:	4603      	mov	r3, r0
 8016a98:	005b      	lsls	r3, r3, #1
 8016a9a:	4403      	add	r3, r0
 8016a9c:	00db      	lsls	r3, r3, #3
 8016a9e:	440b      	add	r3, r1
 8016aa0:	3304      	adds	r3, #4
 8016aa2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016aa4:	429a      	cmp	r2, r3
 8016aa6:	d108      	bne.n	8016aba <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016aa8:	4b31      	ldr	r3, [pc, #196]	; (8016b70 <etharp_output+0x1fc>)
 8016aaa:	781b      	ldrb	r3, [r3, #0]
 8016aac:	461a      	mov	r2, r3
 8016aae:	68b9      	ldr	r1, [r7, #8]
 8016ab0:	68f8      	ldr	r0, [r7, #12]
 8016ab2:	f7ff fec5 	bl	8016840 <etharp_output_to_arp_index>
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	e04a      	b.n	8016b50 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016aba:	2300      	movs	r3, #0
 8016abc:	75fb      	strb	r3, [r7, #23]
 8016abe:	e031      	b.n	8016b24 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016ac0:	7dfa      	ldrb	r2, [r7, #23]
 8016ac2:	492c      	ldr	r1, [pc, #176]	; (8016b74 <etharp_output+0x200>)
 8016ac4:	4613      	mov	r3, r2
 8016ac6:	005b      	lsls	r3, r3, #1
 8016ac8:	4413      	add	r3, r2
 8016aca:	00db      	lsls	r3, r3, #3
 8016acc:	440b      	add	r3, r1
 8016ace:	3314      	adds	r3, #20
 8016ad0:	781b      	ldrb	r3, [r3, #0]
 8016ad2:	2b01      	cmp	r3, #1
 8016ad4:	d923      	bls.n	8016b1e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016ad6:	7dfa      	ldrb	r2, [r7, #23]
 8016ad8:	4926      	ldr	r1, [pc, #152]	; (8016b74 <etharp_output+0x200>)
 8016ada:	4613      	mov	r3, r2
 8016adc:	005b      	lsls	r3, r3, #1
 8016ade:	4413      	add	r3, r2
 8016ae0:	00db      	lsls	r3, r3, #3
 8016ae2:	440b      	add	r3, r1
 8016ae4:	3308      	adds	r3, #8
 8016ae6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016ae8:	68fa      	ldr	r2, [r7, #12]
 8016aea:	429a      	cmp	r2, r3
 8016aec:	d117      	bne.n	8016b1e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016aee:	69bb      	ldr	r3, [r7, #24]
 8016af0:	6819      	ldr	r1, [r3, #0]
 8016af2:	7dfa      	ldrb	r2, [r7, #23]
 8016af4:	481f      	ldr	r0, [pc, #124]	; (8016b74 <etharp_output+0x200>)
 8016af6:	4613      	mov	r3, r2
 8016af8:	005b      	lsls	r3, r3, #1
 8016afa:	4413      	add	r3, r2
 8016afc:	00db      	lsls	r3, r3, #3
 8016afe:	4403      	add	r3, r0
 8016b00:	3304      	adds	r3, #4
 8016b02:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016b04:	4299      	cmp	r1, r3
 8016b06:	d10a      	bne.n	8016b1e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016b08:	4a19      	ldr	r2, [pc, #100]	; (8016b70 <etharp_output+0x1fc>)
 8016b0a:	7dfb      	ldrb	r3, [r7, #23]
 8016b0c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016b0e:	7dfb      	ldrb	r3, [r7, #23]
 8016b10:	461a      	mov	r2, r3
 8016b12:	68b9      	ldr	r1, [r7, #8]
 8016b14:	68f8      	ldr	r0, [r7, #12]
 8016b16:	f7ff fe93 	bl	8016840 <etharp_output_to_arp_index>
 8016b1a:	4603      	mov	r3, r0
 8016b1c:	e018      	b.n	8016b50 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016b1e:	7dfb      	ldrb	r3, [r7, #23]
 8016b20:	3301      	adds	r3, #1
 8016b22:	75fb      	strb	r3, [r7, #23]
 8016b24:	7dfb      	ldrb	r3, [r7, #23]
 8016b26:	2b09      	cmp	r3, #9
 8016b28:	d9ca      	bls.n	8016ac0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016b2a:	68ba      	ldr	r2, [r7, #8]
 8016b2c:	69b9      	ldr	r1, [r7, #24]
 8016b2e:	68f8      	ldr	r0, [r7, #12]
 8016b30:	f000 f822 	bl	8016b78 <etharp_query>
 8016b34:	4603      	mov	r3, r0
 8016b36:	e00b      	b.n	8016b50 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016b3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016b42:	9300      	str	r3, [sp, #0]
 8016b44:	69fb      	ldr	r3, [r7, #28]
 8016b46:	68b9      	ldr	r1, [r7, #8]
 8016b48:	68f8      	ldr	r0, [r7, #12]
 8016b4a:	f001 fd3f 	bl	80185cc <ethernet_output>
 8016b4e:	4603      	mov	r3, r0
}
 8016b50:	4618      	mov	r0, r3
 8016b52:	3720      	adds	r7, #32
 8016b54:	46bd      	mov	sp, r7
 8016b56:	bd80      	pop	{r7, pc}
 8016b58:	0801c8c8 	.word	0x0801c8c8
 8016b5c:	0801ca18 	.word	0x0801ca18
 8016b60:	0801c940 	.word	0x0801c940
 8016b64:	0801ca68 	.word	0x0801ca68
 8016b68:	0801ca08 	.word	0x0801ca08
 8016b6c:	0801d208 	.word	0x0801d208
 8016b70:	200007d8 	.word	0x200007d8
 8016b74:	200006e8 	.word	0x200006e8

08016b78 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b08c      	sub	sp, #48	; 0x30
 8016b7c:	af02      	add	r7, sp, #8
 8016b7e:	60f8      	str	r0, [r7, #12]
 8016b80:	60b9      	str	r1, [r7, #8]
 8016b82:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	3326      	adds	r3, #38	; 0x26
 8016b88:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016b8a:	23ff      	movs	r3, #255	; 0xff
 8016b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016b90:	2300      	movs	r3, #0
 8016b92:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016b94:	68bb      	ldr	r3, [r7, #8]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	68f9      	ldr	r1, [r7, #12]
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	f000 fe0e 	bl	80177bc <ip4_addr_isbroadcast_u32>
 8016ba0:	4603      	mov	r3, r0
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d10c      	bne.n	8016bc0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016ba6:	68bb      	ldr	r3, [r7, #8]
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016bae:	2be0      	cmp	r3, #224	; 0xe0
 8016bb0:	d006      	beq.n	8016bc0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016bb2:	68bb      	ldr	r3, [r7, #8]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d003      	beq.n	8016bc0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016bb8:	68bb      	ldr	r3, [r7, #8]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d102      	bne.n	8016bc6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016bc0:	f06f 030f 	mvn.w	r3, #15
 8016bc4:	e101      	b.n	8016dca <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016bc6:	68fa      	ldr	r2, [r7, #12]
 8016bc8:	2101      	movs	r1, #1
 8016bca:	68b8      	ldr	r0, [r7, #8]
 8016bcc:	f7ff fb60 	bl	8016290 <etharp_find_entry>
 8016bd0:	4603      	mov	r3, r0
 8016bd2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016bd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	da02      	bge.n	8016be2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016bdc:	8a7b      	ldrh	r3, [r7, #18]
 8016bde:	b25b      	sxtb	r3, r3
 8016be0:	e0f3      	b.n	8016dca <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016be2:	8a7b      	ldrh	r3, [r7, #18]
 8016be4:	2b7e      	cmp	r3, #126	; 0x7e
 8016be6:	d906      	bls.n	8016bf6 <etharp_query+0x7e>
 8016be8:	4b7a      	ldr	r3, [pc, #488]	; (8016dd4 <etharp_query+0x25c>)
 8016bea:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016bee:	497a      	ldr	r1, [pc, #488]	; (8016dd8 <etharp_query+0x260>)
 8016bf0:	487a      	ldr	r0, [pc, #488]	; (8016ddc <etharp_query+0x264>)
 8016bf2:	f002 f97f 	bl	8018ef4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016bf6:	8a7b      	ldrh	r3, [r7, #18]
 8016bf8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016bfa:	7c7a      	ldrb	r2, [r7, #17]
 8016bfc:	4978      	ldr	r1, [pc, #480]	; (8016de0 <etharp_query+0x268>)
 8016bfe:	4613      	mov	r3, r2
 8016c00:	005b      	lsls	r3, r3, #1
 8016c02:	4413      	add	r3, r2
 8016c04:	00db      	lsls	r3, r3, #3
 8016c06:	440b      	add	r3, r1
 8016c08:	3314      	adds	r3, #20
 8016c0a:	781b      	ldrb	r3, [r3, #0]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d115      	bne.n	8016c3c <etharp_query+0xc4>
    is_new_entry = 1;
 8016c10:	2301      	movs	r3, #1
 8016c12:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016c14:	7c7a      	ldrb	r2, [r7, #17]
 8016c16:	4972      	ldr	r1, [pc, #456]	; (8016de0 <etharp_query+0x268>)
 8016c18:	4613      	mov	r3, r2
 8016c1a:	005b      	lsls	r3, r3, #1
 8016c1c:	4413      	add	r3, r2
 8016c1e:	00db      	lsls	r3, r3, #3
 8016c20:	440b      	add	r3, r1
 8016c22:	3314      	adds	r3, #20
 8016c24:	2201      	movs	r2, #1
 8016c26:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016c28:	7c7a      	ldrb	r2, [r7, #17]
 8016c2a:	496d      	ldr	r1, [pc, #436]	; (8016de0 <etharp_query+0x268>)
 8016c2c:	4613      	mov	r3, r2
 8016c2e:	005b      	lsls	r3, r3, #1
 8016c30:	4413      	add	r3, r2
 8016c32:	00db      	lsls	r3, r3, #3
 8016c34:	440b      	add	r3, r1
 8016c36:	3308      	adds	r3, #8
 8016c38:	68fa      	ldr	r2, [r7, #12]
 8016c3a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016c3c:	7c7a      	ldrb	r2, [r7, #17]
 8016c3e:	4968      	ldr	r1, [pc, #416]	; (8016de0 <etharp_query+0x268>)
 8016c40:	4613      	mov	r3, r2
 8016c42:	005b      	lsls	r3, r3, #1
 8016c44:	4413      	add	r3, r2
 8016c46:	00db      	lsls	r3, r3, #3
 8016c48:	440b      	add	r3, r1
 8016c4a:	3314      	adds	r3, #20
 8016c4c:	781b      	ldrb	r3, [r3, #0]
 8016c4e:	2b01      	cmp	r3, #1
 8016c50:	d011      	beq.n	8016c76 <etharp_query+0xfe>
 8016c52:	7c7a      	ldrb	r2, [r7, #17]
 8016c54:	4962      	ldr	r1, [pc, #392]	; (8016de0 <etharp_query+0x268>)
 8016c56:	4613      	mov	r3, r2
 8016c58:	005b      	lsls	r3, r3, #1
 8016c5a:	4413      	add	r3, r2
 8016c5c:	00db      	lsls	r3, r3, #3
 8016c5e:	440b      	add	r3, r1
 8016c60:	3314      	adds	r3, #20
 8016c62:	781b      	ldrb	r3, [r3, #0]
 8016c64:	2b01      	cmp	r3, #1
 8016c66:	d806      	bhi.n	8016c76 <etharp_query+0xfe>
 8016c68:	4b5a      	ldr	r3, [pc, #360]	; (8016dd4 <etharp_query+0x25c>)
 8016c6a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016c6e:	495d      	ldr	r1, [pc, #372]	; (8016de4 <etharp_query+0x26c>)
 8016c70:	485a      	ldr	r0, [pc, #360]	; (8016ddc <etharp_query+0x264>)
 8016c72:	f002 f93f 	bl	8018ef4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016c76:	6a3b      	ldr	r3, [r7, #32]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d102      	bne.n	8016c82 <etharp_query+0x10a>
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d10c      	bne.n	8016c9c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016c82:	68b9      	ldr	r1, [r7, #8]
 8016c84:	68f8      	ldr	r0, [r7, #12]
 8016c86:	f000 f963 	bl	8016f50 <etharp_request>
 8016c8a:	4603      	mov	r3, r0
 8016c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d102      	bne.n	8016c9c <etharp_query+0x124>
      return result;
 8016c96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016c9a:	e096      	b.n	8016dca <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d106      	bne.n	8016cb0 <etharp_query+0x138>
 8016ca2:	4b4c      	ldr	r3, [pc, #304]	; (8016dd4 <etharp_query+0x25c>)
 8016ca4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016ca8:	494f      	ldr	r1, [pc, #316]	; (8016de8 <etharp_query+0x270>)
 8016caa:	484c      	ldr	r0, [pc, #304]	; (8016ddc <etharp_query+0x264>)
 8016cac:	f002 f922 	bl	8018ef4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016cb0:	7c7a      	ldrb	r2, [r7, #17]
 8016cb2:	494b      	ldr	r1, [pc, #300]	; (8016de0 <etharp_query+0x268>)
 8016cb4:	4613      	mov	r3, r2
 8016cb6:	005b      	lsls	r3, r3, #1
 8016cb8:	4413      	add	r3, r2
 8016cba:	00db      	lsls	r3, r3, #3
 8016cbc:	440b      	add	r3, r1
 8016cbe:	3314      	adds	r3, #20
 8016cc0:	781b      	ldrb	r3, [r3, #0]
 8016cc2:	2b01      	cmp	r3, #1
 8016cc4:	d917      	bls.n	8016cf6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016cc6:	4a49      	ldr	r2, [pc, #292]	; (8016dec <etharp_query+0x274>)
 8016cc8:	7c7b      	ldrb	r3, [r7, #17]
 8016cca:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016ccc:	7c7a      	ldrb	r2, [r7, #17]
 8016cce:	4613      	mov	r3, r2
 8016cd0:	005b      	lsls	r3, r3, #1
 8016cd2:	4413      	add	r3, r2
 8016cd4:	00db      	lsls	r3, r3, #3
 8016cd6:	3308      	adds	r3, #8
 8016cd8:	4a41      	ldr	r2, [pc, #260]	; (8016de0 <etharp_query+0x268>)
 8016cda:	4413      	add	r3, r2
 8016cdc:	3304      	adds	r3, #4
 8016cde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016ce2:	9200      	str	r2, [sp, #0]
 8016ce4:	697a      	ldr	r2, [r7, #20]
 8016ce6:	6879      	ldr	r1, [r7, #4]
 8016ce8:	68f8      	ldr	r0, [r7, #12]
 8016cea:	f001 fc6f 	bl	80185cc <ethernet_output>
 8016cee:	4603      	mov	r3, r0
 8016cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016cf4:	e067      	b.n	8016dc6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016cf6:	7c7a      	ldrb	r2, [r7, #17]
 8016cf8:	4939      	ldr	r1, [pc, #228]	; (8016de0 <etharp_query+0x268>)
 8016cfa:	4613      	mov	r3, r2
 8016cfc:	005b      	lsls	r3, r3, #1
 8016cfe:	4413      	add	r3, r2
 8016d00:	00db      	lsls	r3, r3, #3
 8016d02:	440b      	add	r3, r1
 8016d04:	3314      	adds	r3, #20
 8016d06:	781b      	ldrb	r3, [r3, #0]
 8016d08:	2b01      	cmp	r3, #1
 8016d0a:	d15c      	bne.n	8016dc6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016d14:	e01c      	b.n	8016d50 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016d16:	69fb      	ldr	r3, [r7, #28]
 8016d18:	895a      	ldrh	r2, [r3, #10]
 8016d1a:	69fb      	ldr	r3, [r7, #28]
 8016d1c:	891b      	ldrh	r3, [r3, #8]
 8016d1e:	429a      	cmp	r2, r3
 8016d20:	d10a      	bne.n	8016d38 <etharp_query+0x1c0>
 8016d22:	69fb      	ldr	r3, [r7, #28]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d006      	beq.n	8016d38 <etharp_query+0x1c0>
 8016d2a:	4b2a      	ldr	r3, [pc, #168]	; (8016dd4 <etharp_query+0x25c>)
 8016d2c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016d30:	492f      	ldr	r1, [pc, #188]	; (8016df0 <etharp_query+0x278>)
 8016d32:	482a      	ldr	r0, [pc, #168]	; (8016ddc <etharp_query+0x264>)
 8016d34:	f002 f8de 	bl	8018ef4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016d38:	69fb      	ldr	r3, [r7, #28]
 8016d3a:	7b1b      	ldrb	r3, [r3, #12]
 8016d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d002      	beq.n	8016d4a <etharp_query+0x1d2>
        copy_needed = 1;
 8016d44:	2301      	movs	r3, #1
 8016d46:	61bb      	str	r3, [r7, #24]
        break;
 8016d48:	e005      	b.n	8016d56 <etharp_query+0x1de>
      }
      p = p->next;
 8016d4a:	69fb      	ldr	r3, [r7, #28]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016d50:	69fb      	ldr	r3, [r7, #28]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d1df      	bne.n	8016d16 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016d56:	69bb      	ldr	r3, [r7, #24]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d007      	beq.n	8016d6c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016d5c:	687a      	ldr	r2, [r7, #4]
 8016d5e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016d62:	200e      	movs	r0, #14
 8016d64:	f7f8 febc 	bl	800fae0 <pbuf_clone>
 8016d68:	61f8      	str	r0, [r7, #28]
 8016d6a:	e004      	b.n	8016d76 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016d70:	69f8      	ldr	r0, [r7, #28]
 8016d72:	f7f8 fc67 	bl	800f644 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016d76:	69fb      	ldr	r3, [r7, #28]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d021      	beq.n	8016dc0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016d7c:	7c7a      	ldrb	r2, [r7, #17]
 8016d7e:	4918      	ldr	r1, [pc, #96]	; (8016de0 <etharp_query+0x268>)
 8016d80:	4613      	mov	r3, r2
 8016d82:	005b      	lsls	r3, r3, #1
 8016d84:	4413      	add	r3, r2
 8016d86:	00db      	lsls	r3, r3, #3
 8016d88:	440b      	add	r3, r1
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d00a      	beq.n	8016da6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016d90:	7c7a      	ldrb	r2, [r7, #17]
 8016d92:	4913      	ldr	r1, [pc, #76]	; (8016de0 <etharp_query+0x268>)
 8016d94:	4613      	mov	r3, r2
 8016d96:	005b      	lsls	r3, r3, #1
 8016d98:	4413      	add	r3, r2
 8016d9a:	00db      	lsls	r3, r3, #3
 8016d9c:	440b      	add	r3, r1
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	4618      	mov	r0, r3
 8016da2:	f7f8 fbaf 	bl	800f504 <pbuf_free>
      }
      arp_table[i].q = p;
 8016da6:	7c7a      	ldrb	r2, [r7, #17]
 8016da8:	490d      	ldr	r1, [pc, #52]	; (8016de0 <etharp_query+0x268>)
 8016daa:	4613      	mov	r3, r2
 8016dac:	005b      	lsls	r3, r3, #1
 8016dae:	4413      	add	r3, r2
 8016db0:	00db      	lsls	r3, r3, #3
 8016db2:	440b      	add	r3, r1
 8016db4:	69fa      	ldr	r2, [r7, #28]
 8016db6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016db8:	2300      	movs	r3, #0
 8016dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016dbe:	e002      	b.n	8016dc6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016dc0:	23ff      	movs	r3, #255	; 0xff
 8016dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016dc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016dca:	4618      	mov	r0, r3
 8016dcc:	3728      	adds	r7, #40	; 0x28
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	bd80      	pop	{r7, pc}
 8016dd2:	bf00      	nop
 8016dd4:	0801c8c8 	.word	0x0801c8c8
 8016dd8:	0801ca74 	.word	0x0801ca74
 8016ddc:	0801c940 	.word	0x0801c940
 8016de0:	200006e8 	.word	0x200006e8
 8016de4:	0801ca84 	.word	0x0801ca84
 8016de8:	0801ca68 	.word	0x0801ca68
 8016dec:	200007d8 	.word	0x200007d8
 8016df0:	0801caac 	.word	0x0801caac

08016df4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016df4:	b580      	push	{r7, lr}
 8016df6:	b08a      	sub	sp, #40	; 0x28
 8016df8:	af02      	add	r7, sp, #8
 8016dfa:	60f8      	str	r0, [r7, #12]
 8016dfc:	60b9      	str	r1, [r7, #8]
 8016dfe:	607a      	str	r2, [r7, #4]
 8016e00:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016e02:	2300      	movs	r3, #0
 8016e04:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d106      	bne.n	8016e1a <etharp_raw+0x26>
 8016e0c:	4b3a      	ldr	r3, [pc, #232]	; (8016ef8 <etharp_raw+0x104>)
 8016e0e:	f240 4257 	movw	r2, #1111	; 0x457
 8016e12:	493a      	ldr	r1, [pc, #232]	; (8016efc <etharp_raw+0x108>)
 8016e14:	483a      	ldr	r0, [pc, #232]	; (8016f00 <etharp_raw+0x10c>)
 8016e16:	f002 f86d 	bl	8018ef4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016e1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016e1e:	211c      	movs	r1, #28
 8016e20:	200e      	movs	r0, #14
 8016e22:	f7f8 f88b 	bl	800ef3c <pbuf_alloc>
 8016e26:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016e28:	69bb      	ldr	r3, [r7, #24]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d102      	bne.n	8016e34 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8016e32:	e05d      	b.n	8016ef0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016e34:	69bb      	ldr	r3, [r7, #24]
 8016e36:	895b      	ldrh	r3, [r3, #10]
 8016e38:	2b1b      	cmp	r3, #27
 8016e3a:	d806      	bhi.n	8016e4a <etharp_raw+0x56>
 8016e3c:	4b2e      	ldr	r3, [pc, #184]	; (8016ef8 <etharp_raw+0x104>)
 8016e3e:	f240 4262 	movw	r2, #1122	; 0x462
 8016e42:	4930      	ldr	r1, [pc, #192]	; (8016f04 <etharp_raw+0x110>)
 8016e44:	482e      	ldr	r0, [pc, #184]	; (8016f00 <etharp_raw+0x10c>)
 8016e46:	f002 f855 	bl	8018ef4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016e4a:	69bb      	ldr	r3, [r7, #24]
 8016e4c:	685b      	ldr	r3, [r3, #4]
 8016e4e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016e50:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016e52:	4618      	mov	r0, r3
 8016e54:	f7f7 f893 	bl	800df7e <lwip_htons>
 8016e58:	4603      	mov	r3, r0
 8016e5a:	461a      	mov	r2, r3
 8016e5c:	697b      	ldr	r3, [r7, #20]
 8016e5e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016e66:	2b06      	cmp	r3, #6
 8016e68:	d006      	beq.n	8016e78 <etharp_raw+0x84>
 8016e6a:	4b23      	ldr	r3, [pc, #140]	; (8016ef8 <etharp_raw+0x104>)
 8016e6c:	f240 4269 	movw	r2, #1129	; 0x469
 8016e70:	4925      	ldr	r1, [pc, #148]	; (8016f08 <etharp_raw+0x114>)
 8016e72:	4823      	ldr	r0, [pc, #140]	; (8016f00 <etharp_raw+0x10c>)
 8016e74:	f002 f83e 	bl	8018ef4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016e78:	697b      	ldr	r3, [r7, #20]
 8016e7a:	3308      	adds	r3, #8
 8016e7c:	2206      	movs	r2, #6
 8016e7e:	6839      	ldr	r1, [r7, #0]
 8016e80:	4618      	mov	r0, r3
 8016e82:	f001 ff77 	bl	8018d74 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016e86:	697b      	ldr	r3, [r7, #20]
 8016e88:	3312      	adds	r3, #18
 8016e8a:	2206      	movs	r2, #6
 8016e8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f001 ff70 	bl	8018d74 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016e94:	697b      	ldr	r3, [r7, #20]
 8016e96:	330e      	adds	r3, #14
 8016e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e9a:	6812      	ldr	r2, [r2, #0]
 8016e9c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016e9e:	697b      	ldr	r3, [r7, #20]
 8016ea0:	3318      	adds	r3, #24
 8016ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ea4:	6812      	ldr	r2, [r2, #0]
 8016ea6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016ea8:	697b      	ldr	r3, [r7, #20]
 8016eaa:	2200      	movs	r2, #0
 8016eac:	701a      	strb	r2, [r3, #0]
 8016eae:	2200      	movs	r2, #0
 8016eb0:	f042 0201 	orr.w	r2, r2, #1
 8016eb4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016eb6:	697b      	ldr	r3, [r7, #20]
 8016eb8:	2200      	movs	r2, #0
 8016eba:	f042 0208 	orr.w	r2, r2, #8
 8016ebe:	709a      	strb	r2, [r3, #2]
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016ec4:	697b      	ldr	r3, [r7, #20]
 8016ec6:	2206      	movs	r2, #6
 8016ec8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016eca:	697b      	ldr	r3, [r7, #20]
 8016ecc:	2204      	movs	r2, #4
 8016ece:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016ed0:	f640 0306 	movw	r3, #2054	; 0x806
 8016ed4:	9300      	str	r3, [sp, #0]
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	68ba      	ldr	r2, [r7, #8]
 8016eda:	69b9      	ldr	r1, [r7, #24]
 8016edc:	68f8      	ldr	r0, [r7, #12]
 8016ede:	f001 fb75 	bl	80185cc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016ee2:	69b8      	ldr	r0, [r7, #24]
 8016ee4:	f7f8 fb0e 	bl	800f504 <pbuf_free>
  p = NULL;
 8016ee8:	2300      	movs	r3, #0
 8016eea:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016eec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	3720      	adds	r7, #32
 8016ef4:	46bd      	mov	sp, r7
 8016ef6:	bd80      	pop	{r7, pc}
 8016ef8:	0801c8c8 	.word	0x0801c8c8
 8016efc:	0801ca18 	.word	0x0801ca18
 8016f00:	0801c940 	.word	0x0801c940
 8016f04:	0801cac8 	.word	0x0801cac8
 8016f08:	0801cafc 	.word	0x0801cafc

08016f0c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b088      	sub	sp, #32
 8016f10:	af04      	add	r7, sp, #16
 8016f12:	60f8      	str	r0, [r7, #12]
 8016f14:	60b9      	str	r1, [r7, #8]
 8016f16:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016f28:	2201      	movs	r2, #1
 8016f2a:	9203      	str	r2, [sp, #12]
 8016f2c:	68ba      	ldr	r2, [r7, #8]
 8016f2e:	9202      	str	r2, [sp, #8]
 8016f30:	4a06      	ldr	r2, [pc, #24]	; (8016f4c <etharp_request_dst+0x40>)
 8016f32:	9201      	str	r2, [sp, #4]
 8016f34:	9300      	str	r3, [sp, #0]
 8016f36:	4603      	mov	r3, r0
 8016f38:	687a      	ldr	r2, [r7, #4]
 8016f3a:	68f8      	ldr	r0, [r7, #12]
 8016f3c:	f7ff ff5a 	bl	8016df4 <etharp_raw>
 8016f40:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016f42:	4618      	mov	r0, r3
 8016f44:	3710      	adds	r7, #16
 8016f46:	46bd      	mov	sp, r7
 8016f48:	bd80      	pop	{r7, pc}
 8016f4a:	bf00      	nop
 8016f4c:	0801d210 	.word	0x0801d210

08016f50 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b082      	sub	sp, #8
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
 8016f58:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016f5a:	4a05      	ldr	r2, [pc, #20]	; (8016f70 <etharp_request+0x20>)
 8016f5c:	6839      	ldr	r1, [r7, #0]
 8016f5e:	6878      	ldr	r0, [r7, #4]
 8016f60:	f7ff ffd4 	bl	8016f0c <etharp_request_dst>
 8016f64:	4603      	mov	r3, r0
}
 8016f66:	4618      	mov	r0, r3
 8016f68:	3708      	adds	r7, #8
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	bd80      	pop	{r7, pc}
 8016f6e:	bf00      	nop
 8016f70:	0801d208 	.word	0x0801d208

08016f74 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016f74:	b580      	push	{r7, lr}
 8016f76:	b08e      	sub	sp, #56	; 0x38
 8016f78:	af04      	add	r7, sp, #16
 8016f7a:	6078      	str	r0, [r7, #4]
 8016f7c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016f7e:	4b79      	ldr	r3, [pc, #484]	; (8017164 <icmp_input+0x1f0>)
 8016f80:	689b      	ldr	r3, [r3, #8]
 8016f82:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f86:	781b      	ldrb	r3, [r3, #0]
 8016f88:	f003 030f 	and.w	r3, r3, #15
 8016f8c:	b2db      	uxtb	r3, r3
 8016f8e:	009b      	lsls	r3, r3, #2
 8016f90:	b2db      	uxtb	r3, r3
 8016f92:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016f94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f96:	2b13      	cmp	r3, #19
 8016f98:	f240 80cd 	bls.w	8017136 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	895b      	ldrh	r3, [r3, #10]
 8016fa0:	2b03      	cmp	r3, #3
 8016fa2:	f240 80ca 	bls.w	801713a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	685b      	ldr	r3, [r3, #4]
 8016faa:	781b      	ldrb	r3, [r3, #0]
 8016fac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016fb0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	f000 80b7 	beq.w	8017128 <icmp_input+0x1b4>
 8016fba:	2b08      	cmp	r3, #8
 8016fbc:	f040 80b7 	bne.w	801712e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016fc0:	4b69      	ldr	r3, [pc, #420]	; (8017168 <icmp_input+0x1f4>)
 8016fc2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016fc4:	4b67      	ldr	r3, [pc, #412]	; (8017164 <icmp_input+0x1f0>)
 8016fc6:	695b      	ldr	r3, [r3, #20]
 8016fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016fcc:	2be0      	cmp	r3, #224	; 0xe0
 8016fce:	f000 80bb 	beq.w	8017148 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016fd2:	4b64      	ldr	r3, [pc, #400]	; (8017164 <icmp_input+0x1f0>)
 8016fd4:	695b      	ldr	r3, [r3, #20]
 8016fd6:	4a63      	ldr	r2, [pc, #396]	; (8017164 <icmp_input+0x1f0>)
 8016fd8:	6812      	ldr	r2, [r2, #0]
 8016fda:	4611      	mov	r1, r2
 8016fdc:	4618      	mov	r0, r3
 8016fde:	f000 fbed 	bl	80177bc <ip4_addr_isbroadcast_u32>
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	f040 80b1 	bne.w	801714c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	891b      	ldrh	r3, [r3, #8]
 8016fee:	2b07      	cmp	r3, #7
 8016ff0:	f240 80a5 	bls.w	801713e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016ff4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ff6:	330e      	adds	r3, #14
 8016ff8:	4619      	mov	r1, r3
 8016ffa:	6878      	ldr	r0, [r7, #4]
 8016ffc:	f7f8 f9ec 	bl	800f3d8 <pbuf_add_header>
 8017000:	4603      	mov	r3, r0
 8017002:	2b00      	cmp	r3, #0
 8017004:	d04b      	beq.n	801709e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	891a      	ldrh	r2, [r3, #8]
 801700a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801700c:	4413      	add	r3, r2
 801700e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	891b      	ldrh	r3, [r3, #8]
 8017014:	8b7a      	ldrh	r2, [r7, #26]
 8017016:	429a      	cmp	r2, r3
 8017018:	f0c0 809a 	bcc.w	8017150 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801701c:	8b7b      	ldrh	r3, [r7, #26]
 801701e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017022:	4619      	mov	r1, r3
 8017024:	200e      	movs	r0, #14
 8017026:	f7f7 ff89 	bl	800ef3c <pbuf_alloc>
 801702a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801702c:	697b      	ldr	r3, [r7, #20]
 801702e:	2b00      	cmp	r3, #0
 8017030:	f000 8090 	beq.w	8017154 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017034:	697b      	ldr	r3, [r7, #20]
 8017036:	895b      	ldrh	r3, [r3, #10]
 8017038:	461a      	mov	r2, r3
 801703a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801703c:	3308      	adds	r3, #8
 801703e:	429a      	cmp	r2, r3
 8017040:	d203      	bcs.n	801704a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017042:	6978      	ldr	r0, [r7, #20]
 8017044:	f7f8 fa5e 	bl	800f504 <pbuf_free>
          goto icmperr;
 8017048:	e085      	b.n	8017156 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801704a:	697b      	ldr	r3, [r7, #20]
 801704c:	685b      	ldr	r3, [r3, #4]
 801704e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017052:	4618      	mov	r0, r3
 8017054:	f001 fe8e 	bl	8018d74 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017058:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801705a:	4619      	mov	r1, r3
 801705c:	6978      	ldr	r0, [r7, #20]
 801705e:	f7f8 f9cb 	bl	800f3f8 <pbuf_remove_header>
 8017062:	4603      	mov	r3, r0
 8017064:	2b00      	cmp	r3, #0
 8017066:	d009      	beq.n	801707c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017068:	4b40      	ldr	r3, [pc, #256]	; (801716c <icmp_input+0x1f8>)
 801706a:	22b6      	movs	r2, #182	; 0xb6
 801706c:	4940      	ldr	r1, [pc, #256]	; (8017170 <icmp_input+0x1fc>)
 801706e:	4841      	ldr	r0, [pc, #260]	; (8017174 <icmp_input+0x200>)
 8017070:	f001 ff40 	bl	8018ef4 <iprintf>
          pbuf_free(r);
 8017074:	6978      	ldr	r0, [r7, #20]
 8017076:	f7f8 fa45 	bl	800f504 <pbuf_free>
          goto icmperr;
 801707a:	e06c      	b.n	8017156 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801707c:	6879      	ldr	r1, [r7, #4]
 801707e:	6978      	ldr	r0, [r7, #20]
 8017080:	f7f8 fb58 	bl	800f734 <pbuf_copy>
 8017084:	4603      	mov	r3, r0
 8017086:	2b00      	cmp	r3, #0
 8017088:	d003      	beq.n	8017092 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801708a:	6978      	ldr	r0, [r7, #20]
 801708c:	f7f8 fa3a 	bl	800f504 <pbuf_free>
          goto icmperr;
 8017090:	e061      	b.n	8017156 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017092:	6878      	ldr	r0, [r7, #4]
 8017094:	f7f8 fa36 	bl	800f504 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017098:	697b      	ldr	r3, [r7, #20]
 801709a:	607b      	str	r3, [r7, #4]
 801709c:	e00f      	b.n	80170be <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801709e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80170a0:	330e      	adds	r3, #14
 80170a2:	4619      	mov	r1, r3
 80170a4:	6878      	ldr	r0, [r7, #4]
 80170a6:	f7f8 f9a7 	bl	800f3f8 <pbuf_remove_header>
 80170aa:	4603      	mov	r3, r0
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d006      	beq.n	80170be <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80170b0:	4b2e      	ldr	r3, [pc, #184]	; (801716c <icmp_input+0x1f8>)
 80170b2:	22c7      	movs	r2, #199	; 0xc7
 80170b4:	4930      	ldr	r1, [pc, #192]	; (8017178 <icmp_input+0x204>)
 80170b6:	482f      	ldr	r0, [pc, #188]	; (8017174 <icmp_input+0x200>)
 80170b8:	f001 ff1c 	bl	8018ef4 <iprintf>
          goto icmperr;
 80170bc:	e04b      	b.n	8017156 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	685b      	ldr	r3, [r3, #4]
 80170c2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80170c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80170c6:	4619      	mov	r1, r3
 80170c8:	6878      	ldr	r0, [r7, #4]
 80170ca:	f7f8 f985 	bl	800f3d8 <pbuf_add_header>
 80170ce:	4603      	mov	r3, r0
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d12b      	bne.n	801712c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	685b      	ldr	r3, [r3, #4]
 80170d8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80170da:	69fb      	ldr	r3, [r7, #28]
 80170dc:	681a      	ldr	r2, [r3, #0]
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80170e2:	4b20      	ldr	r3, [pc, #128]	; (8017164 <icmp_input+0x1f0>)
 80170e4:	691a      	ldr	r2, [r3, #16]
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80170ea:	693b      	ldr	r3, [r7, #16]
 80170ec:	2200      	movs	r2, #0
 80170ee:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80170f0:	693b      	ldr	r3, [r7, #16]
 80170f2:	2200      	movs	r2, #0
 80170f4:	709a      	strb	r2, [r3, #2]
 80170f6:	2200      	movs	r2, #0
 80170f8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	22ff      	movs	r2, #255	; 0xff
 80170fe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	2200      	movs	r2, #0
 8017104:	729a      	strb	r2, [r3, #10]
 8017106:	2200      	movs	r2, #0
 8017108:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801710a:	683b      	ldr	r3, [r7, #0]
 801710c:	9302      	str	r3, [sp, #8]
 801710e:	2301      	movs	r3, #1
 8017110:	9301      	str	r3, [sp, #4]
 8017112:	2300      	movs	r3, #0
 8017114:	9300      	str	r3, [sp, #0]
 8017116:	23ff      	movs	r3, #255	; 0xff
 8017118:	2200      	movs	r2, #0
 801711a:	69f9      	ldr	r1, [r7, #28]
 801711c:	6878      	ldr	r0, [r7, #4]
 801711e:	f000 fa75 	bl	801760c <ip4_output_if>
 8017122:	4603      	mov	r3, r0
 8017124:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017126:	e001      	b.n	801712c <icmp_input+0x1b8>
      break;
 8017128:	bf00      	nop
 801712a:	e000      	b.n	801712e <icmp_input+0x1ba>
      break;
 801712c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801712e:	6878      	ldr	r0, [r7, #4]
 8017130:	f7f8 f9e8 	bl	800f504 <pbuf_free>
  return;
 8017134:	e013      	b.n	801715e <icmp_input+0x1ea>
    goto lenerr;
 8017136:	bf00      	nop
 8017138:	e002      	b.n	8017140 <icmp_input+0x1cc>
    goto lenerr;
 801713a:	bf00      	nop
 801713c:	e000      	b.n	8017140 <icmp_input+0x1cc>
        goto lenerr;
 801713e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017140:	6878      	ldr	r0, [r7, #4]
 8017142:	f7f8 f9df 	bl	800f504 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017146:	e00a      	b.n	801715e <icmp_input+0x1ea>
        goto icmperr;
 8017148:	bf00      	nop
 801714a:	e004      	b.n	8017156 <icmp_input+0x1e2>
        goto icmperr;
 801714c:	bf00      	nop
 801714e:	e002      	b.n	8017156 <icmp_input+0x1e2>
          goto icmperr;
 8017150:	bf00      	nop
 8017152:	e000      	b.n	8017156 <icmp_input+0x1e2>
          goto icmperr;
 8017154:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017156:	6878      	ldr	r0, [r7, #4]
 8017158:	f7f8 f9d4 	bl	800f504 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801715c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801715e:	3728      	adds	r7, #40	; 0x28
 8017160:	46bd      	mov	sp, r7
 8017162:	bd80      	pop	{r7, pc}
 8017164:	20007b38 	.word	0x20007b38
 8017168:	20007b4c 	.word	0x20007b4c
 801716c:	0801cb40 	.word	0x0801cb40
 8017170:	0801cb78 	.word	0x0801cb78
 8017174:	0801cbb0 	.word	0x0801cbb0
 8017178:	0801cbd8 	.word	0x0801cbd8

0801717c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801717c:	b580      	push	{r7, lr}
 801717e:	b082      	sub	sp, #8
 8017180:	af00      	add	r7, sp, #0
 8017182:	6078      	str	r0, [r7, #4]
 8017184:	460b      	mov	r3, r1
 8017186:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017188:	78fb      	ldrb	r3, [r7, #3]
 801718a:	461a      	mov	r2, r3
 801718c:	2103      	movs	r1, #3
 801718e:	6878      	ldr	r0, [r7, #4]
 8017190:	f000 f814 	bl	80171bc <icmp_send_response>
}
 8017194:	bf00      	nop
 8017196:	3708      	adds	r7, #8
 8017198:	46bd      	mov	sp, r7
 801719a:	bd80      	pop	{r7, pc}

0801719c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801719c:	b580      	push	{r7, lr}
 801719e:	b082      	sub	sp, #8
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]
 80171a4:	460b      	mov	r3, r1
 80171a6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80171a8:	78fb      	ldrb	r3, [r7, #3]
 80171aa:	461a      	mov	r2, r3
 80171ac:	210b      	movs	r1, #11
 80171ae:	6878      	ldr	r0, [r7, #4]
 80171b0:	f000 f804 	bl	80171bc <icmp_send_response>
}
 80171b4:	bf00      	nop
 80171b6:	3708      	adds	r7, #8
 80171b8:	46bd      	mov	sp, r7
 80171ba:	bd80      	pop	{r7, pc}

080171bc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80171bc:	b580      	push	{r7, lr}
 80171be:	b08c      	sub	sp, #48	; 0x30
 80171c0:	af04      	add	r7, sp, #16
 80171c2:	6078      	str	r0, [r7, #4]
 80171c4:	460b      	mov	r3, r1
 80171c6:	70fb      	strb	r3, [r7, #3]
 80171c8:	4613      	mov	r3, r2
 80171ca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80171cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80171d0:	2124      	movs	r1, #36	; 0x24
 80171d2:	2022      	movs	r0, #34	; 0x22
 80171d4:	f7f7 feb2 	bl	800ef3c <pbuf_alloc>
 80171d8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80171da:	69fb      	ldr	r3, [r7, #28]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d04c      	beq.n	801727a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80171e0:	69fb      	ldr	r3, [r7, #28]
 80171e2:	895b      	ldrh	r3, [r3, #10]
 80171e4:	2b23      	cmp	r3, #35	; 0x23
 80171e6:	d806      	bhi.n	80171f6 <icmp_send_response+0x3a>
 80171e8:	4b26      	ldr	r3, [pc, #152]	; (8017284 <icmp_send_response+0xc8>)
 80171ea:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80171ee:	4926      	ldr	r1, [pc, #152]	; (8017288 <icmp_send_response+0xcc>)
 80171f0:	4826      	ldr	r0, [pc, #152]	; (801728c <icmp_send_response+0xd0>)
 80171f2:	f001 fe7f 	bl	8018ef4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	685b      	ldr	r3, [r3, #4]
 80171fa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80171fc:	69fb      	ldr	r3, [r7, #28]
 80171fe:	685b      	ldr	r3, [r3, #4]
 8017200:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017202:	697b      	ldr	r3, [r7, #20]
 8017204:	78fa      	ldrb	r2, [r7, #3]
 8017206:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017208:	697b      	ldr	r3, [r7, #20]
 801720a:	78ba      	ldrb	r2, [r7, #2]
 801720c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801720e:	697b      	ldr	r3, [r7, #20]
 8017210:	2200      	movs	r2, #0
 8017212:	711a      	strb	r2, [r3, #4]
 8017214:	2200      	movs	r2, #0
 8017216:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017218:	697b      	ldr	r3, [r7, #20]
 801721a:	2200      	movs	r2, #0
 801721c:	719a      	strb	r2, [r3, #6]
 801721e:	2200      	movs	r2, #0
 8017220:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017222:	69fb      	ldr	r3, [r7, #28]
 8017224:	685b      	ldr	r3, [r3, #4]
 8017226:	f103 0008 	add.w	r0, r3, #8
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	685b      	ldr	r3, [r3, #4]
 801722e:	221c      	movs	r2, #28
 8017230:	4619      	mov	r1, r3
 8017232:	f001 fd9f 	bl	8018d74 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017236:	69bb      	ldr	r3, [r7, #24]
 8017238:	68db      	ldr	r3, [r3, #12]
 801723a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801723c:	f107 030c 	add.w	r3, r7, #12
 8017240:	4618      	mov	r0, r3
 8017242:	f000 f825 	bl	8017290 <ip4_route>
 8017246:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017248:	693b      	ldr	r3, [r7, #16]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d011      	beq.n	8017272 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801724e:	697b      	ldr	r3, [r7, #20]
 8017250:	2200      	movs	r2, #0
 8017252:	709a      	strb	r2, [r3, #2]
 8017254:	2200      	movs	r2, #0
 8017256:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017258:	f107 020c 	add.w	r2, r7, #12
 801725c:	693b      	ldr	r3, [r7, #16]
 801725e:	9302      	str	r3, [sp, #8]
 8017260:	2301      	movs	r3, #1
 8017262:	9301      	str	r3, [sp, #4]
 8017264:	2300      	movs	r3, #0
 8017266:	9300      	str	r3, [sp, #0]
 8017268:	23ff      	movs	r3, #255	; 0xff
 801726a:	2100      	movs	r1, #0
 801726c:	69f8      	ldr	r0, [r7, #28]
 801726e:	f000 f9cd 	bl	801760c <ip4_output_if>
  }
  pbuf_free(q);
 8017272:	69f8      	ldr	r0, [r7, #28]
 8017274:	f7f8 f946 	bl	800f504 <pbuf_free>
 8017278:	e000      	b.n	801727c <icmp_send_response+0xc0>
    return;
 801727a:	bf00      	nop
}
 801727c:	3720      	adds	r7, #32
 801727e:	46bd      	mov	sp, r7
 8017280:	bd80      	pop	{r7, pc}
 8017282:	bf00      	nop
 8017284:	0801cb40 	.word	0x0801cb40
 8017288:	0801cc0c 	.word	0x0801cc0c
 801728c:	0801cbb0 	.word	0x0801cbb0

08017290 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017290:	b480      	push	{r7}
 8017292:	b085      	sub	sp, #20
 8017294:	af00      	add	r7, sp, #0
 8017296:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017298:	4b33      	ldr	r3, [pc, #204]	; (8017368 <ip4_route+0xd8>)
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	60fb      	str	r3, [r7, #12]
 801729e:	e036      	b.n	801730e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80172a6:	f003 0301 	and.w	r3, r3, #1
 80172aa:	b2db      	uxtb	r3, r3
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d02b      	beq.n	8017308 <ip4_route+0x78>
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80172b6:	089b      	lsrs	r3, r3, #2
 80172b8:	f003 0301 	and.w	r3, r3, #1
 80172bc:	b2db      	uxtb	r3, r3
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d022      	beq.n	8017308 <ip4_route+0x78>
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	3304      	adds	r3, #4
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d01d      	beq.n	8017308 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	681a      	ldr	r2, [r3, #0]
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	3304      	adds	r3, #4
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	405a      	eors	r2, r3
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	3308      	adds	r3, #8
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	4013      	ands	r3, r2
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d101      	bne.n	80172e8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	e038      	b.n	801735a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80172ee:	f003 0302 	and.w	r3, r3, #2
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d108      	bne.n	8017308 <ip4_route+0x78>
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	681a      	ldr	r2, [r3, #0]
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	330c      	adds	r3, #12
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	429a      	cmp	r2, r3
 8017302:	d101      	bne.n	8017308 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	e028      	b.n	801735a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	60fb      	str	r3, [r7, #12]
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d1c5      	bne.n	80172a0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017314:	4b15      	ldr	r3, [pc, #84]	; (801736c <ip4_route+0xdc>)
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d01a      	beq.n	8017352 <ip4_route+0xc2>
 801731c:	4b13      	ldr	r3, [pc, #76]	; (801736c <ip4_route+0xdc>)
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017324:	f003 0301 	and.w	r3, r3, #1
 8017328:	2b00      	cmp	r3, #0
 801732a:	d012      	beq.n	8017352 <ip4_route+0xc2>
 801732c:	4b0f      	ldr	r3, [pc, #60]	; (801736c <ip4_route+0xdc>)
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017334:	f003 0304 	and.w	r3, r3, #4
 8017338:	2b00      	cmp	r3, #0
 801733a:	d00a      	beq.n	8017352 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801733c:	4b0b      	ldr	r3, [pc, #44]	; (801736c <ip4_route+0xdc>)
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	3304      	adds	r3, #4
 8017342:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017344:	2b00      	cmp	r3, #0
 8017346:	d004      	beq.n	8017352 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	b2db      	uxtb	r3, r3
 801734e:	2b7f      	cmp	r3, #127	; 0x7f
 8017350:	d101      	bne.n	8017356 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017352:	2300      	movs	r3, #0
 8017354:	e001      	b.n	801735a <ip4_route+0xca>
  }

  return netif_default;
 8017356:	4b05      	ldr	r3, [pc, #20]	; (801736c <ip4_route+0xdc>)
 8017358:	681b      	ldr	r3, [r3, #0]
}
 801735a:	4618      	mov	r0, r3
 801735c:	3714      	adds	r7, #20
 801735e:	46bd      	mov	sp, r7
 8017360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017364:	4770      	bx	lr
 8017366:	bf00      	nop
 8017368:	2001878c 	.word	0x2001878c
 801736c:	20018790 	.word	0x20018790

08017370 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b082      	sub	sp, #8
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801737e:	f003 0301 	and.w	r3, r3, #1
 8017382:	b2db      	uxtb	r3, r3
 8017384:	2b00      	cmp	r3, #0
 8017386:	d016      	beq.n	80173b6 <ip4_input_accept+0x46>
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	3304      	adds	r3, #4
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d011      	beq.n	80173b6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017392:	4b0b      	ldr	r3, [pc, #44]	; (80173c0 <ip4_input_accept+0x50>)
 8017394:	695a      	ldr	r2, [r3, #20]
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	3304      	adds	r3, #4
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	429a      	cmp	r2, r3
 801739e:	d008      	beq.n	80173b2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80173a0:	4b07      	ldr	r3, [pc, #28]	; (80173c0 <ip4_input_accept+0x50>)
 80173a2:	695b      	ldr	r3, [r3, #20]
 80173a4:	6879      	ldr	r1, [r7, #4]
 80173a6:	4618      	mov	r0, r3
 80173a8:	f000 fa08 	bl	80177bc <ip4_addr_isbroadcast_u32>
 80173ac:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d001      	beq.n	80173b6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80173b2:	2301      	movs	r3, #1
 80173b4:	e000      	b.n	80173b8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80173b6:	2300      	movs	r3, #0
}
 80173b8:	4618      	mov	r0, r3
 80173ba:	3708      	adds	r7, #8
 80173bc:	46bd      	mov	sp, r7
 80173be:	bd80      	pop	{r7, pc}
 80173c0:	20007b38 	.word	0x20007b38

080173c4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b086      	sub	sp, #24
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	6078      	str	r0, [r7, #4]
 80173cc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	685b      	ldr	r3, [r3, #4]
 80173d2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80173d4:	697b      	ldr	r3, [r7, #20]
 80173d6:	781b      	ldrb	r3, [r3, #0]
 80173d8:	091b      	lsrs	r3, r3, #4
 80173da:	b2db      	uxtb	r3, r3
 80173dc:	2b04      	cmp	r3, #4
 80173de:	d004      	beq.n	80173ea <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80173e0:	6878      	ldr	r0, [r7, #4]
 80173e2:	f7f8 f88f 	bl	800f504 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80173e6:	2300      	movs	r3, #0
 80173e8:	e107      	b.n	80175fa <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80173ea:	697b      	ldr	r3, [r7, #20]
 80173ec:	781b      	ldrb	r3, [r3, #0]
 80173ee:	f003 030f 	and.w	r3, r3, #15
 80173f2:	b2db      	uxtb	r3, r3
 80173f4:	009b      	lsls	r3, r3, #2
 80173f6:	b2db      	uxtb	r3, r3
 80173f8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80173fa:	697b      	ldr	r3, [r7, #20]
 80173fc:	885b      	ldrh	r3, [r3, #2]
 80173fe:	b29b      	uxth	r3, r3
 8017400:	4618      	mov	r0, r3
 8017402:	f7f6 fdbc 	bl	800df7e <lwip_htons>
 8017406:	4603      	mov	r3, r0
 8017408:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	891b      	ldrh	r3, [r3, #8]
 801740e:	89ba      	ldrh	r2, [r7, #12]
 8017410:	429a      	cmp	r2, r3
 8017412:	d204      	bcs.n	801741e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017414:	89bb      	ldrh	r3, [r7, #12]
 8017416:	4619      	mov	r1, r3
 8017418:	6878      	ldr	r0, [r7, #4]
 801741a:	f7f7 feed 	bl	800f1f8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	895b      	ldrh	r3, [r3, #10]
 8017422:	89fa      	ldrh	r2, [r7, #14]
 8017424:	429a      	cmp	r2, r3
 8017426:	d807      	bhi.n	8017438 <ip4_input+0x74>
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	891b      	ldrh	r3, [r3, #8]
 801742c:	89ba      	ldrh	r2, [r7, #12]
 801742e:	429a      	cmp	r2, r3
 8017430:	d802      	bhi.n	8017438 <ip4_input+0x74>
 8017432:	89fb      	ldrh	r3, [r7, #14]
 8017434:	2b13      	cmp	r3, #19
 8017436:	d804      	bhi.n	8017442 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017438:	6878      	ldr	r0, [r7, #4]
 801743a:	f7f8 f863 	bl	800f504 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801743e:	2300      	movs	r3, #0
 8017440:	e0db      	b.n	80175fa <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017442:	697b      	ldr	r3, [r7, #20]
 8017444:	691b      	ldr	r3, [r3, #16]
 8017446:	4a6f      	ldr	r2, [pc, #444]	; (8017604 <ip4_input+0x240>)
 8017448:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801744a:	697b      	ldr	r3, [r7, #20]
 801744c:	68db      	ldr	r3, [r3, #12]
 801744e:	4a6d      	ldr	r2, [pc, #436]	; (8017604 <ip4_input+0x240>)
 8017450:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017452:	4b6c      	ldr	r3, [pc, #432]	; (8017604 <ip4_input+0x240>)
 8017454:	695b      	ldr	r3, [r3, #20]
 8017456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801745a:	2be0      	cmp	r3, #224	; 0xe0
 801745c:	d112      	bne.n	8017484 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801745e:	683b      	ldr	r3, [r7, #0]
 8017460:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017464:	f003 0301 	and.w	r3, r3, #1
 8017468:	b2db      	uxtb	r3, r3
 801746a:	2b00      	cmp	r3, #0
 801746c:	d007      	beq.n	801747e <ip4_input+0xba>
 801746e:	683b      	ldr	r3, [r7, #0]
 8017470:	3304      	adds	r3, #4
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	2b00      	cmp	r3, #0
 8017476:	d002      	beq.n	801747e <ip4_input+0xba>
      netif = inp;
 8017478:	683b      	ldr	r3, [r7, #0]
 801747a:	613b      	str	r3, [r7, #16]
 801747c:	e02a      	b.n	80174d4 <ip4_input+0x110>
    } else {
      netif = NULL;
 801747e:	2300      	movs	r3, #0
 8017480:	613b      	str	r3, [r7, #16]
 8017482:	e027      	b.n	80174d4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017484:	6838      	ldr	r0, [r7, #0]
 8017486:	f7ff ff73 	bl	8017370 <ip4_input_accept>
 801748a:	4603      	mov	r3, r0
 801748c:	2b00      	cmp	r3, #0
 801748e:	d002      	beq.n	8017496 <ip4_input+0xd2>
      netif = inp;
 8017490:	683b      	ldr	r3, [r7, #0]
 8017492:	613b      	str	r3, [r7, #16]
 8017494:	e01e      	b.n	80174d4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017496:	2300      	movs	r3, #0
 8017498:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801749a:	4b5a      	ldr	r3, [pc, #360]	; (8017604 <ip4_input+0x240>)
 801749c:	695b      	ldr	r3, [r3, #20]
 801749e:	b2db      	uxtb	r3, r3
 80174a0:	2b7f      	cmp	r3, #127	; 0x7f
 80174a2:	d017      	beq.n	80174d4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80174a4:	4b58      	ldr	r3, [pc, #352]	; (8017608 <ip4_input+0x244>)
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	613b      	str	r3, [r7, #16]
 80174aa:	e00e      	b.n	80174ca <ip4_input+0x106>
          if (netif == inp) {
 80174ac:	693a      	ldr	r2, [r7, #16]
 80174ae:	683b      	ldr	r3, [r7, #0]
 80174b0:	429a      	cmp	r2, r3
 80174b2:	d006      	beq.n	80174c2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80174b4:	6938      	ldr	r0, [r7, #16]
 80174b6:	f7ff ff5b 	bl	8017370 <ip4_input_accept>
 80174ba:	4603      	mov	r3, r0
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d108      	bne.n	80174d2 <ip4_input+0x10e>
 80174c0:	e000      	b.n	80174c4 <ip4_input+0x100>
            continue;
 80174c2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80174c4:	693b      	ldr	r3, [r7, #16]
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	613b      	str	r3, [r7, #16]
 80174ca:	693b      	ldr	r3, [r7, #16]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d1ed      	bne.n	80174ac <ip4_input+0xe8>
 80174d0:	e000      	b.n	80174d4 <ip4_input+0x110>
            break;
 80174d2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80174d4:	4b4b      	ldr	r3, [pc, #300]	; (8017604 <ip4_input+0x240>)
 80174d6:	691b      	ldr	r3, [r3, #16]
 80174d8:	6839      	ldr	r1, [r7, #0]
 80174da:	4618      	mov	r0, r3
 80174dc:	f000 f96e 	bl	80177bc <ip4_addr_isbroadcast_u32>
 80174e0:	4603      	mov	r3, r0
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d105      	bne.n	80174f2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80174e6:	4b47      	ldr	r3, [pc, #284]	; (8017604 <ip4_input+0x240>)
 80174e8:	691b      	ldr	r3, [r3, #16]
 80174ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80174ee:	2be0      	cmp	r3, #224	; 0xe0
 80174f0:	d104      	bne.n	80174fc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80174f2:	6878      	ldr	r0, [r7, #4]
 80174f4:	f7f8 f806 	bl	800f504 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80174f8:	2300      	movs	r3, #0
 80174fa:	e07e      	b.n	80175fa <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80174fc:	693b      	ldr	r3, [r7, #16]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d104      	bne.n	801750c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017502:	6878      	ldr	r0, [r7, #4]
 8017504:	f7f7 fffe 	bl	800f504 <pbuf_free>
    return ERR_OK;
 8017508:	2300      	movs	r3, #0
 801750a:	e076      	b.n	80175fa <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801750c:	697b      	ldr	r3, [r7, #20]
 801750e:	88db      	ldrh	r3, [r3, #6]
 8017510:	b29b      	uxth	r3, r3
 8017512:	461a      	mov	r2, r3
 8017514:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017518:	4013      	ands	r3, r2
 801751a:	2b00      	cmp	r3, #0
 801751c:	d00b      	beq.n	8017536 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801751e:	6878      	ldr	r0, [r7, #4]
 8017520:	f000 fc92 	bl	8017e48 <ip4_reass>
 8017524:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	2b00      	cmp	r3, #0
 801752a:	d101      	bne.n	8017530 <ip4_input+0x16c>
      return ERR_OK;
 801752c:	2300      	movs	r3, #0
 801752e:	e064      	b.n	80175fa <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	685b      	ldr	r3, [r3, #4]
 8017534:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017536:	4a33      	ldr	r2, [pc, #204]	; (8017604 <ip4_input+0x240>)
 8017538:	693b      	ldr	r3, [r7, #16]
 801753a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801753c:	4a31      	ldr	r2, [pc, #196]	; (8017604 <ip4_input+0x240>)
 801753e:	683b      	ldr	r3, [r7, #0]
 8017540:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017542:	4a30      	ldr	r2, [pc, #192]	; (8017604 <ip4_input+0x240>)
 8017544:	697b      	ldr	r3, [r7, #20]
 8017546:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017548:	697b      	ldr	r3, [r7, #20]
 801754a:	781b      	ldrb	r3, [r3, #0]
 801754c:	f003 030f 	and.w	r3, r3, #15
 8017550:	b2db      	uxtb	r3, r3
 8017552:	009b      	lsls	r3, r3, #2
 8017554:	b2db      	uxtb	r3, r3
 8017556:	b29a      	uxth	r2, r3
 8017558:	4b2a      	ldr	r3, [pc, #168]	; (8017604 <ip4_input+0x240>)
 801755a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801755c:	89fb      	ldrh	r3, [r7, #14]
 801755e:	4619      	mov	r1, r3
 8017560:	6878      	ldr	r0, [r7, #4]
 8017562:	f7f7 ff49 	bl	800f3f8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017566:	697b      	ldr	r3, [r7, #20]
 8017568:	7a5b      	ldrb	r3, [r3, #9]
 801756a:	2b11      	cmp	r3, #17
 801756c:	d006      	beq.n	801757c <ip4_input+0x1b8>
 801756e:	2b11      	cmp	r3, #17
 8017570:	dc13      	bgt.n	801759a <ip4_input+0x1d6>
 8017572:	2b01      	cmp	r3, #1
 8017574:	d00c      	beq.n	8017590 <ip4_input+0x1cc>
 8017576:	2b06      	cmp	r3, #6
 8017578:	d005      	beq.n	8017586 <ip4_input+0x1c2>
 801757a:	e00e      	b.n	801759a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801757c:	6839      	ldr	r1, [r7, #0]
 801757e:	6878      	ldr	r0, [r7, #4]
 8017580:	f7fe fc68 	bl	8015e54 <udp_input>
        break;
 8017584:	e026      	b.n	80175d4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017586:	6839      	ldr	r1, [r7, #0]
 8017588:	6878      	ldr	r0, [r7, #4]
 801758a:	f7fa f887 	bl	801169c <tcp_input>
        break;
 801758e:	e021      	b.n	80175d4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017590:	6839      	ldr	r1, [r7, #0]
 8017592:	6878      	ldr	r0, [r7, #4]
 8017594:	f7ff fcee 	bl	8016f74 <icmp_input>
        break;
 8017598:	e01c      	b.n	80175d4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801759a:	4b1a      	ldr	r3, [pc, #104]	; (8017604 <ip4_input+0x240>)
 801759c:	695b      	ldr	r3, [r3, #20]
 801759e:	6939      	ldr	r1, [r7, #16]
 80175a0:	4618      	mov	r0, r3
 80175a2:	f000 f90b 	bl	80177bc <ip4_addr_isbroadcast_u32>
 80175a6:	4603      	mov	r3, r0
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d10f      	bne.n	80175cc <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80175ac:	4b15      	ldr	r3, [pc, #84]	; (8017604 <ip4_input+0x240>)
 80175ae:	695b      	ldr	r3, [r3, #20]
 80175b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80175b4:	2be0      	cmp	r3, #224	; 0xe0
 80175b6:	d009      	beq.n	80175cc <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80175b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80175bc:	4619      	mov	r1, r3
 80175be:	6878      	ldr	r0, [r7, #4]
 80175c0:	f7f7 ff8d 	bl	800f4de <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80175c4:	2102      	movs	r1, #2
 80175c6:	6878      	ldr	r0, [r7, #4]
 80175c8:	f7ff fdd8 	bl	801717c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80175cc:	6878      	ldr	r0, [r7, #4]
 80175ce:	f7f7 ff99 	bl	800f504 <pbuf_free>
        break;
 80175d2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80175d4:	4b0b      	ldr	r3, [pc, #44]	; (8017604 <ip4_input+0x240>)
 80175d6:	2200      	movs	r2, #0
 80175d8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80175da:	4b0a      	ldr	r3, [pc, #40]	; (8017604 <ip4_input+0x240>)
 80175dc:	2200      	movs	r2, #0
 80175de:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80175e0:	4b08      	ldr	r3, [pc, #32]	; (8017604 <ip4_input+0x240>)
 80175e2:	2200      	movs	r2, #0
 80175e4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80175e6:	4b07      	ldr	r3, [pc, #28]	; (8017604 <ip4_input+0x240>)
 80175e8:	2200      	movs	r2, #0
 80175ea:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80175ec:	4b05      	ldr	r3, [pc, #20]	; (8017604 <ip4_input+0x240>)
 80175ee:	2200      	movs	r2, #0
 80175f0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80175f2:	4b04      	ldr	r3, [pc, #16]	; (8017604 <ip4_input+0x240>)
 80175f4:	2200      	movs	r2, #0
 80175f6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80175f8:	2300      	movs	r3, #0
}
 80175fa:	4618      	mov	r0, r3
 80175fc:	3718      	adds	r7, #24
 80175fe:	46bd      	mov	sp, r7
 8017600:	bd80      	pop	{r7, pc}
 8017602:	bf00      	nop
 8017604:	20007b38 	.word	0x20007b38
 8017608:	2001878c 	.word	0x2001878c

0801760c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801760c:	b580      	push	{r7, lr}
 801760e:	b08a      	sub	sp, #40	; 0x28
 8017610:	af04      	add	r7, sp, #16
 8017612:	60f8      	str	r0, [r7, #12]
 8017614:	60b9      	str	r1, [r7, #8]
 8017616:	607a      	str	r2, [r7, #4]
 8017618:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801761a:	68bb      	ldr	r3, [r7, #8]
 801761c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d009      	beq.n	8017638 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017624:	68bb      	ldr	r3, [r7, #8]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d003      	beq.n	8017632 <ip4_output_if+0x26>
 801762a:	68bb      	ldr	r3, [r7, #8]
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d102      	bne.n	8017638 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017634:	3304      	adds	r3, #4
 8017636:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017638:	78fa      	ldrb	r2, [r7, #3]
 801763a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801763c:	9302      	str	r3, [sp, #8]
 801763e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017642:	9301      	str	r3, [sp, #4]
 8017644:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017648:	9300      	str	r3, [sp, #0]
 801764a:	4613      	mov	r3, r2
 801764c:	687a      	ldr	r2, [r7, #4]
 801764e:	6979      	ldr	r1, [r7, #20]
 8017650:	68f8      	ldr	r0, [r7, #12]
 8017652:	f000 f805 	bl	8017660 <ip4_output_if_src>
 8017656:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017658:	4618      	mov	r0, r3
 801765a:	3718      	adds	r7, #24
 801765c:	46bd      	mov	sp, r7
 801765e:	bd80      	pop	{r7, pc}

08017660 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017660:	b580      	push	{r7, lr}
 8017662:	b088      	sub	sp, #32
 8017664:	af00      	add	r7, sp, #0
 8017666:	60f8      	str	r0, [r7, #12]
 8017668:	60b9      	str	r1, [r7, #8]
 801766a:	607a      	str	r2, [r7, #4]
 801766c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	7b9b      	ldrb	r3, [r3, #14]
 8017672:	2b01      	cmp	r3, #1
 8017674:	d006      	beq.n	8017684 <ip4_output_if_src+0x24>
 8017676:	4b4b      	ldr	r3, [pc, #300]	; (80177a4 <ip4_output_if_src+0x144>)
 8017678:	f44f 7255 	mov.w	r2, #852	; 0x354
 801767c:	494a      	ldr	r1, [pc, #296]	; (80177a8 <ip4_output_if_src+0x148>)
 801767e:	484b      	ldr	r0, [pc, #300]	; (80177ac <ip4_output_if_src+0x14c>)
 8017680:	f001 fc38 	bl	8018ef4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d060      	beq.n	801774c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801768a:	2314      	movs	r3, #20
 801768c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801768e:	2114      	movs	r1, #20
 8017690:	68f8      	ldr	r0, [r7, #12]
 8017692:	f7f7 fea1 	bl	800f3d8 <pbuf_add_header>
 8017696:	4603      	mov	r3, r0
 8017698:	2b00      	cmp	r3, #0
 801769a:	d002      	beq.n	80176a2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801769c:	f06f 0301 	mvn.w	r3, #1
 80176a0:	e07c      	b.n	801779c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	685b      	ldr	r3, [r3, #4]
 80176a6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	895b      	ldrh	r3, [r3, #10]
 80176ac:	2b13      	cmp	r3, #19
 80176ae:	d806      	bhi.n	80176be <ip4_output_if_src+0x5e>
 80176b0:	4b3c      	ldr	r3, [pc, #240]	; (80177a4 <ip4_output_if_src+0x144>)
 80176b2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80176b6:	493e      	ldr	r1, [pc, #248]	; (80177b0 <ip4_output_if_src+0x150>)
 80176b8:	483c      	ldr	r0, [pc, #240]	; (80177ac <ip4_output_if_src+0x14c>)
 80176ba:	f001 fc1b 	bl	8018ef4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80176be:	69fb      	ldr	r3, [r7, #28]
 80176c0:	78fa      	ldrb	r2, [r7, #3]
 80176c2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80176c4:	69fb      	ldr	r3, [r7, #28]
 80176c6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80176ca:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	681a      	ldr	r2, [r3, #0]
 80176d0:	69fb      	ldr	r3, [r7, #28]
 80176d2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80176d4:	8b7b      	ldrh	r3, [r7, #26]
 80176d6:	089b      	lsrs	r3, r3, #2
 80176d8:	b29b      	uxth	r3, r3
 80176da:	b2db      	uxtb	r3, r3
 80176dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80176e0:	b2da      	uxtb	r2, r3
 80176e2:	69fb      	ldr	r3, [r7, #28]
 80176e4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80176e6:	69fb      	ldr	r3, [r7, #28]
 80176e8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80176ec:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	891b      	ldrh	r3, [r3, #8]
 80176f2:	4618      	mov	r0, r3
 80176f4:	f7f6 fc43 	bl	800df7e <lwip_htons>
 80176f8:	4603      	mov	r3, r0
 80176fa:	461a      	mov	r2, r3
 80176fc:	69fb      	ldr	r3, [r7, #28]
 80176fe:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017700:	69fb      	ldr	r3, [r7, #28]
 8017702:	2200      	movs	r2, #0
 8017704:	719a      	strb	r2, [r3, #6]
 8017706:	2200      	movs	r2, #0
 8017708:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801770a:	4b2a      	ldr	r3, [pc, #168]	; (80177b4 <ip4_output_if_src+0x154>)
 801770c:	881b      	ldrh	r3, [r3, #0]
 801770e:	4618      	mov	r0, r3
 8017710:	f7f6 fc35 	bl	800df7e <lwip_htons>
 8017714:	4603      	mov	r3, r0
 8017716:	461a      	mov	r2, r3
 8017718:	69fb      	ldr	r3, [r7, #28]
 801771a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801771c:	4b25      	ldr	r3, [pc, #148]	; (80177b4 <ip4_output_if_src+0x154>)
 801771e:	881b      	ldrh	r3, [r3, #0]
 8017720:	3301      	adds	r3, #1
 8017722:	b29a      	uxth	r2, r3
 8017724:	4b23      	ldr	r3, [pc, #140]	; (80177b4 <ip4_output_if_src+0x154>)
 8017726:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017728:	68bb      	ldr	r3, [r7, #8]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d104      	bne.n	8017738 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801772e:	4b22      	ldr	r3, [pc, #136]	; (80177b8 <ip4_output_if_src+0x158>)
 8017730:	681a      	ldr	r2, [r3, #0]
 8017732:	69fb      	ldr	r3, [r7, #28]
 8017734:	60da      	str	r2, [r3, #12]
 8017736:	e003      	b.n	8017740 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017738:	68bb      	ldr	r3, [r7, #8]
 801773a:	681a      	ldr	r2, [r3, #0]
 801773c:	69fb      	ldr	r3, [r7, #28]
 801773e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017740:	69fb      	ldr	r3, [r7, #28]
 8017742:	2200      	movs	r2, #0
 8017744:	729a      	strb	r2, [r3, #10]
 8017746:	2200      	movs	r2, #0
 8017748:	72da      	strb	r2, [r3, #11]
 801774a:	e00f      	b.n	801776c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	895b      	ldrh	r3, [r3, #10]
 8017750:	2b13      	cmp	r3, #19
 8017752:	d802      	bhi.n	801775a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017754:	f06f 0301 	mvn.w	r3, #1
 8017758:	e020      	b.n	801779c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	685b      	ldr	r3, [r3, #4]
 801775e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017760:	69fb      	ldr	r3, [r7, #28]
 8017762:	691b      	ldr	r3, [r3, #16]
 8017764:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017766:	f107 0314 	add.w	r3, r7, #20
 801776a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801776e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017770:	2b00      	cmp	r3, #0
 8017772:	d00c      	beq.n	801778e <ip4_output_if_src+0x12e>
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	891a      	ldrh	r2, [r3, #8]
 8017778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801777a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801777c:	429a      	cmp	r2, r3
 801777e:	d906      	bls.n	801778e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017780:	687a      	ldr	r2, [r7, #4]
 8017782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017784:	68f8      	ldr	r0, [r7, #12]
 8017786:	f000 fd4d 	bl	8018224 <ip4_frag>
 801778a:	4603      	mov	r3, r0
 801778c:	e006      	b.n	801779c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017790:	695b      	ldr	r3, [r3, #20]
 8017792:	687a      	ldr	r2, [r7, #4]
 8017794:	68f9      	ldr	r1, [r7, #12]
 8017796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017798:	4798      	blx	r3
 801779a:	4603      	mov	r3, r0
}
 801779c:	4618      	mov	r0, r3
 801779e:	3720      	adds	r7, #32
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}
 80177a4:	0801cc38 	.word	0x0801cc38
 80177a8:	0801cc6c 	.word	0x0801cc6c
 80177ac:	0801cc78 	.word	0x0801cc78
 80177b0:	0801cca0 	.word	0x0801cca0
 80177b4:	200007da 	.word	0x200007da
 80177b8:	0801d204 	.word	0x0801d204

080177bc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80177bc:	b480      	push	{r7}
 80177be:	b085      	sub	sp, #20
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	6078      	str	r0, [r7, #4]
 80177c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177d0:	d002      	beq.n	80177d8 <ip4_addr_isbroadcast_u32+0x1c>
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d101      	bne.n	80177dc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80177d8:	2301      	movs	r3, #1
 80177da:	e02a      	b.n	8017832 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80177dc:	683b      	ldr	r3, [r7, #0]
 80177de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80177e2:	f003 0302 	and.w	r3, r3, #2
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d101      	bne.n	80177ee <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80177ea:	2300      	movs	r3, #0
 80177ec:	e021      	b.n	8017832 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80177ee:	683b      	ldr	r3, [r7, #0]
 80177f0:	3304      	adds	r3, #4
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	687a      	ldr	r2, [r7, #4]
 80177f6:	429a      	cmp	r2, r3
 80177f8:	d101      	bne.n	80177fe <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80177fa:	2300      	movs	r3, #0
 80177fc:	e019      	b.n	8017832 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80177fe:	68fa      	ldr	r2, [r7, #12]
 8017800:	683b      	ldr	r3, [r7, #0]
 8017802:	3304      	adds	r3, #4
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	405a      	eors	r2, r3
 8017808:	683b      	ldr	r3, [r7, #0]
 801780a:	3308      	adds	r3, #8
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	4013      	ands	r3, r2
 8017810:	2b00      	cmp	r3, #0
 8017812:	d10d      	bne.n	8017830 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017814:	683b      	ldr	r3, [r7, #0]
 8017816:	3308      	adds	r3, #8
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	43da      	mvns	r2, r3
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017820:	683b      	ldr	r3, [r7, #0]
 8017822:	3308      	adds	r3, #8
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017828:	429a      	cmp	r2, r3
 801782a:	d101      	bne.n	8017830 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801782c:	2301      	movs	r3, #1
 801782e:	e000      	b.n	8017832 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017830:	2300      	movs	r3, #0
  }
}
 8017832:	4618      	mov	r0, r3
 8017834:	3714      	adds	r7, #20
 8017836:	46bd      	mov	sp, r7
 8017838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801783c:	4770      	bx	lr
	...

08017840 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017840:	b580      	push	{r7, lr}
 8017842:	b084      	sub	sp, #16
 8017844:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017846:	2300      	movs	r3, #0
 8017848:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801784a:	4b12      	ldr	r3, [pc, #72]	; (8017894 <ip_reass_tmr+0x54>)
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017850:	e018      	b.n	8017884 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	7fdb      	ldrb	r3, [r3, #31]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d00b      	beq.n	8017872 <ip_reass_tmr+0x32>
      r->timer--;
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	7fdb      	ldrb	r3, [r3, #31]
 801785e:	3b01      	subs	r3, #1
 8017860:	b2da      	uxtb	r2, r3
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	60fb      	str	r3, [r7, #12]
 8017870:	e008      	b.n	8017884 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801787c:	68b9      	ldr	r1, [r7, #8]
 801787e:	6878      	ldr	r0, [r7, #4]
 8017880:	f000 f80a 	bl	8017898 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d1e3      	bne.n	8017852 <ip_reass_tmr+0x12>
    }
  }
}
 801788a:	bf00      	nop
 801788c:	bf00      	nop
 801788e:	3710      	adds	r7, #16
 8017890:	46bd      	mov	sp, r7
 8017892:	bd80      	pop	{r7, pc}
 8017894:	200007dc 	.word	0x200007dc

08017898 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017898:	b580      	push	{r7, lr}
 801789a:	b088      	sub	sp, #32
 801789c:	af00      	add	r7, sp, #0
 801789e:	6078      	str	r0, [r7, #4]
 80178a0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80178a2:	2300      	movs	r3, #0
 80178a4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80178a6:	683a      	ldr	r2, [r7, #0]
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	429a      	cmp	r2, r3
 80178ac:	d105      	bne.n	80178ba <ip_reass_free_complete_datagram+0x22>
 80178ae:	4b45      	ldr	r3, [pc, #276]	; (80179c4 <ip_reass_free_complete_datagram+0x12c>)
 80178b0:	22ab      	movs	r2, #171	; 0xab
 80178b2:	4945      	ldr	r1, [pc, #276]	; (80179c8 <ip_reass_free_complete_datagram+0x130>)
 80178b4:	4845      	ldr	r0, [pc, #276]	; (80179cc <ip_reass_free_complete_datagram+0x134>)
 80178b6:	f001 fb1d 	bl	8018ef4 <iprintf>
  if (prev != NULL) {
 80178ba:	683b      	ldr	r3, [r7, #0]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d00a      	beq.n	80178d6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80178c0:	683b      	ldr	r3, [r7, #0]
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	687a      	ldr	r2, [r7, #4]
 80178c6:	429a      	cmp	r2, r3
 80178c8:	d005      	beq.n	80178d6 <ip_reass_free_complete_datagram+0x3e>
 80178ca:	4b3e      	ldr	r3, [pc, #248]	; (80179c4 <ip_reass_free_complete_datagram+0x12c>)
 80178cc:	22ad      	movs	r2, #173	; 0xad
 80178ce:	4940      	ldr	r1, [pc, #256]	; (80179d0 <ip_reass_free_complete_datagram+0x138>)
 80178d0:	483e      	ldr	r0, [pc, #248]	; (80179cc <ip_reass_free_complete_datagram+0x134>)
 80178d2:	f001 fb0f 	bl	8018ef4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	685b      	ldr	r3, [r3, #4]
 80178da:	685b      	ldr	r3, [r3, #4]
 80178dc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80178de:	697b      	ldr	r3, [r7, #20]
 80178e0:	889b      	ldrh	r3, [r3, #4]
 80178e2:	b29b      	uxth	r3, r3
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d12a      	bne.n	801793e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	685b      	ldr	r3, [r3, #4]
 80178ec:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80178ee:	697b      	ldr	r3, [r7, #20]
 80178f0:	681a      	ldr	r2, [r3, #0]
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80178f6:	69bb      	ldr	r3, [r7, #24]
 80178f8:	6858      	ldr	r0, [r3, #4]
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	3308      	adds	r3, #8
 80178fe:	2214      	movs	r2, #20
 8017900:	4619      	mov	r1, r3
 8017902:	f001 fa37 	bl	8018d74 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017906:	2101      	movs	r1, #1
 8017908:	69b8      	ldr	r0, [r7, #24]
 801790a:	f7ff fc47 	bl	801719c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801790e:	69b8      	ldr	r0, [r7, #24]
 8017910:	f7f7 fe80 	bl	800f614 <pbuf_clen>
 8017914:	4603      	mov	r3, r0
 8017916:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017918:	8bfa      	ldrh	r2, [r7, #30]
 801791a:	8a7b      	ldrh	r3, [r7, #18]
 801791c:	4413      	add	r3, r2
 801791e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017922:	db05      	blt.n	8017930 <ip_reass_free_complete_datagram+0x98>
 8017924:	4b27      	ldr	r3, [pc, #156]	; (80179c4 <ip_reass_free_complete_datagram+0x12c>)
 8017926:	22bc      	movs	r2, #188	; 0xbc
 8017928:	492a      	ldr	r1, [pc, #168]	; (80179d4 <ip_reass_free_complete_datagram+0x13c>)
 801792a:	4828      	ldr	r0, [pc, #160]	; (80179cc <ip_reass_free_complete_datagram+0x134>)
 801792c:	f001 fae2 	bl	8018ef4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017930:	8bfa      	ldrh	r2, [r7, #30]
 8017932:	8a7b      	ldrh	r3, [r7, #18]
 8017934:	4413      	add	r3, r2
 8017936:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017938:	69b8      	ldr	r0, [r7, #24]
 801793a:	f7f7 fde3 	bl	800f504 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	685b      	ldr	r3, [r3, #4]
 8017942:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017944:	e01f      	b.n	8017986 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017946:	69bb      	ldr	r3, [r7, #24]
 8017948:	685b      	ldr	r3, [r3, #4]
 801794a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801794c:	69bb      	ldr	r3, [r7, #24]
 801794e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017950:	697b      	ldr	r3, [r7, #20]
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017956:	68f8      	ldr	r0, [r7, #12]
 8017958:	f7f7 fe5c 	bl	800f614 <pbuf_clen>
 801795c:	4603      	mov	r3, r0
 801795e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017960:	8bfa      	ldrh	r2, [r7, #30]
 8017962:	8a7b      	ldrh	r3, [r7, #18]
 8017964:	4413      	add	r3, r2
 8017966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801796a:	db05      	blt.n	8017978 <ip_reass_free_complete_datagram+0xe0>
 801796c:	4b15      	ldr	r3, [pc, #84]	; (80179c4 <ip_reass_free_complete_datagram+0x12c>)
 801796e:	22cc      	movs	r2, #204	; 0xcc
 8017970:	4918      	ldr	r1, [pc, #96]	; (80179d4 <ip_reass_free_complete_datagram+0x13c>)
 8017972:	4816      	ldr	r0, [pc, #88]	; (80179cc <ip_reass_free_complete_datagram+0x134>)
 8017974:	f001 fabe 	bl	8018ef4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017978:	8bfa      	ldrh	r2, [r7, #30]
 801797a:	8a7b      	ldrh	r3, [r7, #18]
 801797c:	4413      	add	r3, r2
 801797e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017980:	68f8      	ldr	r0, [r7, #12]
 8017982:	f7f7 fdbf 	bl	800f504 <pbuf_free>
  while (p != NULL) {
 8017986:	69bb      	ldr	r3, [r7, #24]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d1dc      	bne.n	8017946 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801798c:	6839      	ldr	r1, [r7, #0]
 801798e:	6878      	ldr	r0, [r7, #4]
 8017990:	f000 f8c2 	bl	8017b18 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017994:	4b10      	ldr	r3, [pc, #64]	; (80179d8 <ip_reass_free_complete_datagram+0x140>)
 8017996:	881b      	ldrh	r3, [r3, #0]
 8017998:	8bfa      	ldrh	r2, [r7, #30]
 801799a:	429a      	cmp	r2, r3
 801799c:	d905      	bls.n	80179aa <ip_reass_free_complete_datagram+0x112>
 801799e:	4b09      	ldr	r3, [pc, #36]	; (80179c4 <ip_reass_free_complete_datagram+0x12c>)
 80179a0:	22d2      	movs	r2, #210	; 0xd2
 80179a2:	490e      	ldr	r1, [pc, #56]	; (80179dc <ip_reass_free_complete_datagram+0x144>)
 80179a4:	4809      	ldr	r0, [pc, #36]	; (80179cc <ip_reass_free_complete_datagram+0x134>)
 80179a6:	f001 faa5 	bl	8018ef4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80179aa:	4b0b      	ldr	r3, [pc, #44]	; (80179d8 <ip_reass_free_complete_datagram+0x140>)
 80179ac:	881a      	ldrh	r2, [r3, #0]
 80179ae:	8bfb      	ldrh	r3, [r7, #30]
 80179b0:	1ad3      	subs	r3, r2, r3
 80179b2:	b29a      	uxth	r2, r3
 80179b4:	4b08      	ldr	r3, [pc, #32]	; (80179d8 <ip_reass_free_complete_datagram+0x140>)
 80179b6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80179b8:	8bfb      	ldrh	r3, [r7, #30]
}
 80179ba:	4618      	mov	r0, r3
 80179bc:	3720      	adds	r7, #32
 80179be:	46bd      	mov	sp, r7
 80179c0:	bd80      	pop	{r7, pc}
 80179c2:	bf00      	nop
 80179c4:	0801ccd0 	.word	0x0801ccd0
 80179c8:	0801cd0c 	.word	0x0801cd0c
 80179cc:	0801cd18 	.word	0x0801cd18
 80179d0:	0801cd40 	.word	0x0801cd40
 80179d4:	0801cd54 	.word	0x0801cd54
 80179d8:	200007e0 	.word	0x200007e0
 80179dc:	0801cd74 	.word	0x0801cd74

080179e0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b08a      	sub	sp, #40	; 0x28
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	6078      	str	r0, [r7, #4]
 80179e8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80179ea:	2300      	movs	r3, #0
 80179ec:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80179ee:	2300      	movs	r3, #0
 80179f0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80179f2:	2300      	movs	r3, #0
 80179f4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80179f6:	2300      	movs	r3, #0
 80179f8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80179fa:	2300      	movs	r3, #0
 80179fc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80179fe:	4b28      	ldr	r3, [pc, #160]	; (8017aa0 <ip_reass_remove_oldest_datagram+0xc0>)
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017a04:	e030      	b.n	8017a68 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a08:	695a      	ldr	r2, [r3, #20]
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	68db      	ldr	r3, [r3, #12]
 8017a0e:	429a      	cmp	r2, r3
 8017a10:	d10c      	bne.n	8017a2c <ip_reass_remove_oldest_datagram+0x4c>
 8017a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a14:	699a      	ldr	r2, [r3, #24]
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	691b      	ldr	r3, [r3, #16]
 8017a1a:	429a      	cmp	r2, r3
 8017a1c:	d106      	bne.n	8017a2c <ip_reass_remove_oldest_datagram+0x4c>
 8017a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a20:	899a      	ldrh	r2, [r3, #12]
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	889b      	ldrh	r3, [r3, #4]
 8017a26:	b29b      	uxth	r3, r3
 8017a28:	429a      	cmp	r2, r3
 8017a2a:	d014      	beq.n	8017a56 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017a2c:	693b      	ldr	r3, [r7, #16]
 8017a2e:	3301      	adds	r3, #1
 8017a30:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017a32:	6a3b      	ldr	r3, [r7, #32]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d104      	bne.n	8017a42 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a3a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017a3c:	69fb      	ldr	r3, [r7, #28]
 8017a3e:	61bb      	str	r3, [r7, #24]
 8017a40:	e009      	b.n	8017a56 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a44:	7fda      	ldrb	r2, [r3, #31]
 8017a46:	6a3b      	ldr	r3, [r7, #32]
 8017a48:	7fdb      	ldrb	r3, [r3, #31]
 8017a4a:	429a      	cmp	r2, r3
 8017a4c:	d803      	bhi.n	8017a56 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a50:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017a52:	69fb      	ldr	r3, [r7, #28]
 8017a54:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d001      	beq.n	8017a62 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a60:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d1cb      	bne.n	8017a06 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017a6e:	6a3b      	ldr	r3, [r7, #32]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d008      	beq.n	8017a86 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017a74:	69b9      	ldr	r1, [r7, #24]
 8017a76:	6a38      	ldr	r0, [r7, #32]
 8017a78:	f7ff ff0e 	bl	8017898 <ip_reass_free_complete_datagram>
 8017a7c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017a7e:	697a      	ldr	r2, [r7, #20]
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	4413      	add	r3, r2
 8017a84:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017a86:	697a      	ldr	r2, [r7, #20]
 8017a88:	683b      	ldr	r3, [r7, #0]
 8017a8a:	429a      	cmp	r2, r3
 8017a8c:	da02      	bge.n	8017a94 <ip_reass_remove_oldest_datagram+0xb4>
 8017a8e:	693b      	ldr	r3, [r7, #16]
 8017a90:	2b01      	cmp	r3, #1
 8017a92:	dcac      	bgt.n	80179ee <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017a94:	697b      	ldr	r3, [r7, #20]
}
 8017a96:	4618      	mov	r0, r3
 8017a98:	3728      	adds	r7, #40	; 0x28
 8017a9a:	46bd      	mov	sp, r7
 8017a9c:	bd80      	pop	{r7, pc}
 8017a9e:	bf00      	nop
 8017aa0:	200007dc 	.word	0x200007dc

08017aa4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b084      	sub	sp, #16
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	6078      	str	r0, [r7, #4]
 8017aac:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017aae:	2004      	movs	r0, #4
 8017ab0:	f7f6 feca 	bl	800e848 <memp_malloc>
 8017ab4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d110      	bne.n	8017ade <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017abc:	6839      	ldr	r1, [r7, #0]
 8017abe:	6878      	ldr	r0, [r7, #4]
 8017ac0:	f7ff ff8e 	bl	80179e0 <ip_reass_remove_oldest_datagram>
 8017ac4:	4602      	mov	r2, r0
 8017ac6:	683b      	ldr	r3, [r7, #0]
 8017ac8:	4293      	cmp	r3, r2
 8017aca:	dc03      	bgt.n	8017ad4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017acc:	2004      	movs	r0, #4
 8017ace:	f7f6 febb 	bl	800e848 <memp_malloc>
 8017ad2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d101      	bne.n	8017ade <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017ada:	2300      	movs	r3, #0
 8017adc:	e016      	b.n	8017b0c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017ade:	2220      	movs	r2, #32
 8017ae0:	2100      	movs	r1, #0
 8017ae2:	68f8      	ldr	r0, [r7, #12]
 8017ae4:	f001 f954 	bl	8018d90 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	220f      	movs	r2, #15
 8017aec:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017aee:	4b09      	ldr	r3, [pc, #36]	; (8017b14 <ip_reass_enqueue_new_datagram+0x70>)
 8017af0:	681a      	ldr	r2, [r3, #0]
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017af6:	4a07      	ldr	r2, [pc, #28]	; (8017b14 <ip_reass_enqueue_new_datagram+0x70>)
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	3308      	adds	r3, #8
 8017b00:	2214      	movs	r2, #20
 8017b02:	6879      	ldr	r1, [r7, #4]
 8017b04:	4618      	mov	r0, r3
 8017b06:	f001 f935 	bl	8018d74 <memcpy>
  return ipr;
 8017b0a:	68fb      	ldr	r3, [r7, #12]
}
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	3710      	adds	r7, #16
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bd80      	pop	{r7, pc}
 8017b14:	200007dc 	.word	0x200007dc

08017b18 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b082      	sub	sp, #8
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	6078      	str	r0, [r7, #4]
 8017b20:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017b22:	4b10      	ldr	r3, [pc, #64]	; (8017b64 <ip_reass_dequeue_datagram+0x4c>)
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	687a      	ldr	r2, [r7, #4]
 8017b28:	429a      	cmp	r2, r3
 8017b2a:	d104      	bne.n	8017b36 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	4a0c      	ldr	r2, [pc, #48]	; (8017b64 <ip_reass_dequeue_datagram+0x4c>)
 8017b32:	6013      	str	r3, [r2, #0]
 8017b34:	e00d      	b.n	8017b52 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017b36:	683b      	ldr	r3, [r7, #0]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d106      	bne.n	8017b4a <ip_reass_dequeue_datagram+0x32>
 8017b3c:	4b0a      	ldr	r3, [pc, #40]	; (8017b68 <ip_reass_dequeue_datagram+0x50>)
 8017b3e:	f240 1245 	movw	r2, #325	; 0x145
 8017b42:	490a      	ldr	r1, [pc, #40]	; (8017b6c <ip_reass_dequeue_datagram+0x54>)
 8017b44:	480a      	ldr	r0, [pc, #40]	; (8017b70 <ip_reass_dequeue_datagram+0x58>)
 8017b46:	f001 f9d5 	bl	8018ef4 <iprintf>
    prev->next = ipr->next;
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	681a      	ldr	r2, [r3, #0]
 8017b4e:	683b      	ldr	r3, [r7, #0]
 8017b50:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017b52:	6879      	ldr	r1, [r7, #4]
 8017b54:	2004      	movs	r0, #4
 8017b56:	f7f6 fec3 	bl	800e8e0 <memp_free>
}
 8017b5a:	bf00      	nop
 8017b5c:	3708      	adds	r7, #8
 8017b5e:	46bd      	mov	sp, r7
 8017b60:	bd80      	pop	{r7, pc}
 8017b62:	bf00      	nop
 8017b64:	200007dc 	.word	0x200007dc
 8017b68:	0801ccd0 	.word	0x0801ccd0
 8017b6c:	0801cd98 	.word	0x0801cd98
 8017b70:	0801cd18 	.word	0x0801cd18

08017b74 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b08c      	sub	sp, #48	; 0x30
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	60f8      	str	r0, [r7, #12]
 8017b7c:	60b9      	str	r1, [r7, #8]
 8017b7e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017b80:	2300      	movs	r3, #0
 8017b82:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017b84:	2301      	movs	r3, #1
 8017b86:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017b88:	68bb      	ldr	r3, [r7, #8]
 8017b8a:	685b      	ldr	r3, [r3, #4]
 8017b8c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017b8e:	69fb      	ldr	r3, [r7, #28]
 8017b90:	885b      	ldrh	r3, [r3, #2]
 8017b92:	b29b      	uxth	r3, r3
 8017b94:	4618      	mov	r0, r3
 8017b96:	f7f6 f9f2 	bl	800df7e <lwip_htons>
 8017b9a:	4603      	mov	r3, r0
 8017b9c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017b9e:	69fb      	ldr	r3, [r7, #28]
 8017ba0:	781b      	ldrb	r3, [r3, #0]
 8017ba2:	f003 030f 	and.w	r3, r3, #15
 8017ba6:	b2db      	uxtb	r3, r3
 8017ba8:	009b      	lsls	r3, r3, #2
 8017baa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017bac:	7e7b      	ldrb	r3, [r7, #25]
 8017bae:	b29b      	uxth	r3, r3
 8017bb0:	8b7a      	ldrh	r2, [r7, #26]
 8017bb2:	429a      	cmp	r2, r3
 8017bb4:	d202      	bcs.n	8017bbc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8017bba:	e135      	b.n	8017e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017bbc:	7e7b      	ldrb	r3, [r7, #25]
 8017bbe:	b29b      	uxth	r3, r3
 8017bc0:	8b7a      	ldrh	r2, [r7, #26]
 8017bc2:	1ad3      	subs	r3, r2, r3
 8017bc4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017bc6:	69fb      	ldr	r3, [r7, #28]
 8017bc8:	88db      	ldrh	r3, [r3, #6]
 8017bca:	b29b      	uxth	r3, r3
 8017bcc:	4618      	mov	r0, r3
 8017bce:	f7f6 f9d6 	bl	800df7e <lwip_htons>
 8017bd2:	4603      	mov	r3, r0
 8017bd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017bd8:	b29b      	uxth	r3, r3
 8017bda:	00db      	lsls	r3, r3, #3
 8017bdc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017bde:	68bb      	ldr	r3, [r7, #8]
 8017be0:	685b      	ldr	r3, [r3, #4]
 8017be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017be6:	2200      	movs	r2, #0
 8017be8:	701a      	strb	r2, [r3, #0]
 8017bea:	2200      	movs	r2, #0
 8017bec:	705a      	strb	r2, [r3, #1]
 8017bee:	2200      	movs	r2, #0
 8017bf0:	709a      	strb	r2, [r3, #2]
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bf8:	8afa      	ldrh	r2, [r7, #22]
 8017bfa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017bfc:	8afa      	ldrh	r2, [r7, #22]
 8017bfe:	8b7b      	ldrh	r3, [r7, #26]
 8017c00:	4413      	add	r3, r2
 8017c02:	b29a      	uxth	r2, r3
 8017c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c06:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c0a:	88db      	ldrh	r3, [r3, #6]
 8017c0c:	b29b      	uxth	r3, r3
 8017c0e:	8afa      	ldrh	r2, [r7, #22]
 8017c10:	429a      	cmp	r2, r3
 8017c12:	d902      	bls.n	8017c1a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c14:	f04f 33ff 	mov.w	r3, #4294967295
 8017c18:	e106      	b.n	8017e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	685b      	ldr	r3, [r3, #4]
 8017c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8017c20:	e068      	b.n	8017cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c24:	685b      	ldr	r3, [r3, #4]
 8017c26:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c2a:	889b      	ldrh	r3, [r3, #4]
 8017c2c:	b29a      	uxth	r2, r3
 8017c2e:	693b      	ldr	r3, [r7, #16]
 8017c30:	889b      	ldrh	r3, [r3, #4]
 8017c32:	b29b      	uxth	r3, r3
 8017c34:	429a      	cmp	r2, r3
 8017c36:	d235      	bcs.n	8017ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c3c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d020      	beq.n	8017c86 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c46:	889b      	ldrh	r3, [r3, #4]
 8017c48:	b29a      	uxth	r2, r3
 8017c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c4c:	88db      	ldrh	r3, [r3, #6]
 8017c4e:	b29b      	uxth	r3, r3
 8017c50:	429a      	cmp	r2, r3
 8017c52:	d307      	bcc.n	8017c64 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c56:	88db      	ldrh	r3, [r3, #6]
 8017c58:	b29a      	uxth	r2, r3
 8017c5a:	693b      	ldr	r3, [r7, #16]
 8017c5c:	889b      	ldrh	r3, [r3, #4]
 8017c5e:	b29b      	uxth	r3, r3
 8017c60:	429a      	cmp	r2, r3
 8017c62:	d902      	bls.n	8017c6a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c64:	f04f 33ff 	mov.w	r3, #4294967295
 8017c68:	e0de      	b.n	8017e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c6c:	68ba      	ldr	r2, [r7, #8]
 8017c6e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c72:	88db      	ldrh	r3, [r3, #6]
 8017c74:	b29a      	uxth	r2, r3
 8017c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c78:	889b      	ldrh	r3, [r3, #4]
 8017c7a:	b29b      	uxth	r3, r3
 8017c7c:	429a      	cmp	r2, r3
 8017c7e:	d03d      	beq.n	8017cfc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017c80:	2300      	movs	r3, #0
 8017c82:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017c84:	e03a      	b.n	8017cfc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c88:	88db      	ldrh	r3, [r3, #6]
 8017c8a:	b29a      	uxth	r2, r3
 8017c8c:	693b      	ldr	r3, [r7, #16]
 8017c8e:	889b      	ldrh	r3, [r3, #4]
 8017c90:	b29b      	uxth	r3, r3
 8017c92:	429a      	cmp	r2, r3
 8017c94:	d902      	bls.n	8017c9c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c96:	f04f 33ff 	mov.w	r3, #4294967295
 8017c9a:	e0c5      	b.n	8017e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	68ba      	ldr	r2, [r7, #8]
 8017ca0:	605a      	str	r2, [r3, #4]
      break;
 8017ca2:	e02b      	b.n	8017cfc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ca6:	889b      	ldrh	r3, [r3, #4]
 8017ca8:	b29a      	uxth	r2, r3
 8017caa:	693b      	ldr	r3, [r7, #16]
 8017cac:	889b      	ldrh	r3, [r3, #4]
 8017cae:	b29b      	uxth	r3, r3
 8017cb0:	429a      	cmp	r2, r3
 8017cb2:	d102      	bne.n	8017cba <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8017cb8:	e0b6      	b.n	8017e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cbc:	889b      	ldrh	r3, [r3, #4]
 8017cbe:	b29a      	uxth	r2, r3
 8017cc0:	693b      	ldr	r3, [r7, #16]
 8017cc2:	88db      	ldrh	r3, [r3, #6]
 8017cc4:	b29b      	uxth	r3, r3
 8017cc6:	429a      	cmp	r2, r3
 8017cc8:	d202      	bcs.n	8017cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017cca:	f04f 33ff 	mov.w	r3, #4294967295
 8017cce:	e0ab      	b.n	8017e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d009      	beq.n	8017cea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cd8:	88db      	ldrh	r3, [r3, #6]
 8017cda:	b29a      	uxth	r2, r3
 8017cdc:	693b      	ldr	r3, [r7, #16]
 8017cde:	889b      	ldrh	r3, [r3, #4]
 8017ce0:	b29b      	uxth	r3, r3
 8017ce2:	429a      	cmp	r2, r3
 8017ce4:	d001      	beq.n	8017cea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017cea:	693b      	ldr	r3, [r7, #16]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017cf0:	693b      	ldr	r3, [r7, #16]
 8017cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d193      	bne.n	8017c22 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017cfa:	e000      	b.n	8017cfe <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017cfc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d12d      	bne.n	8017d60 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d01c      	beq.n	8017d44 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d0c:	88db      	ldrh	r3, [r3, #6]
 8017d0e:	b29a      	uxth	r2, r3
 8017d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d12:	889b      	ldrh	r3, [r3, #4]
 8017d14:	b29b      	uxth	r3, r3
 8017d16:	429a      	cmp	r2, r3
 8017d18:	d906      	bls.n	8017d28 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017d1a:	4b45      	ldr	r3, [pc, #276]	; (8017e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d1c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017d20:	4944      	ldr	r1, [pc, #272]	; (8017e34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017d22:	4845      	ldr	r0, [pc, #276]	; (8017e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d24:	f001 f8e6 	bl	8018ef4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d2a:	68ba      	ldr	r2, [r7, #8]
 8017d2c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d30:	88db      	ldrh	r3, [r3, #6]
 8017d32:	b29a      	uxth	r2, r3
 8017d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d36:	889b      	ldrh	r3, [r3, #4]
 8017d38:	b29b      	uxth	r3, r3
 8017d3a:	429a      	cmp	r2, r3
 8017d3c:	d010      	beq.n	8017d60 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017d3e:	2300      	movs	r3, #0
 8017d40:	623b      	str	r3, [r7, #32]
 8017d42:	e00d      	b.n	8017d60 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	685b      	ldr	r3, [r3, #4]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d006      	beq.n	8017d5a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017d4c:	4b38      	ldr	r3, [pc, #224]	; (8017e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d4e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017d52:	493a      	ldr	r1, [pc, #232]	; (8017e3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017d54:	4838      	ldr	r0, [pc, #224]	; (8017e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d56:	f001 f8cd 	bl	8018ef4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	68ba      	ldr	r2, [r7, #8]
 8017d5e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d105      	bne.n	8017d72 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	7f9b      	ldrb	r3, [r3, #30]
 8017d6a:	f003 0301 	and.w	r3, r3, #1
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d059      	beq.n	8017e26 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017d72:	6a3b      	ldr	r3, [r7, #32]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d04f      	beq.n	8017e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	685b      	ldr	r3, [r3, #4]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d006      	beq.n	8017d8e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	685b      	ldr	r3, [r3, #4]
 8017d84:	685b      	ldr	r3, [r3, #4]
 8017d86:	889b      	ldrh	r3, [r3, #4]
 8017d88:	b29b      	uxth	r3, r3
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d002      	beq.n	8017d94 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017d8e:	2300      	movs	r3, #0
 8017d90:	623b      	str	r3, [r7, #32]
 8017d92:	e041      	b.n	8017e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d96:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017d9e:	e012      	b.n	8017dc6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017da2:	685b      	ldr	r3, [r3, #4]
 8017da4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017da8:	88db      	ldrh	r3, [r3, #6]
 8017daa:	b29a      	uxth	r2, r3
 8017dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dae:	889b      	ldrh	r3, [r3, #4]
 8017db0:	b29b      	uxth	r3, r3
 8017db2:	429a      	cmp	r2, r3
 8017db4:	d002      	beq.n	8017dbc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017db6:	2300      	movs	r3, #0
 8017db8:	623b      	str	r3, [r7, #32]
            break;
 8017dba:	e007      	b.n	8017dcc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dbe:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d1e9      	bne.n	8017da0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017dcc:	6a3b      	ldr	r3, [r7, #32]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d022      	beq.n	8017e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	685b      	ldr	r3, [r3, #4]
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d106      	bne.n	8017de8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017dda:	4b15      	ldr	r3, [pc, #84]	; (8017e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017ddc:	f240 12df 	movw	r2, #479	; 0x1df
 8017de0:	4917      	ldr	r1, [pc, #92]	; (8017e40 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017de2:	4815      	ldr	r0, [pc, #84]	; (8017e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017de4:	f001 f886 	bl	8018ef4 <iprintf>
          LWIP_ASSERT("sanity check",
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	685b      	ldr	r3, [r3, #4]
 8017dec:	685b      	ldr	r3, [r3, #4]
 8017dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017df0:	429a      	cmp	r2, r3
 8017df2:	d106      	bne.n	8017e02 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017df4:	4b0e      	ldr	r3, [pc, #56]	; (8017e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017df6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017dfa:	4911      	ldr	r1, [pc, #68]	; (8017e40 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017dfc:	480e      	ldr	r0, [pc, #56]	; (8017e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017dfe:	f001 f879 	bl	8018ef4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d006      	beq.n	8017e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017e0a:	4b09      	ldr	r3, [pc, #36]	; (8017e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017e0c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017e10:	490c      	ldr	r1, [pc, #48]	; (8017e44 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017e12:	4809      	ldr	r0, [pc, #36]	; (8017e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017e14:	f001 f86e 	bl	8018ef4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017e18:	6a3b      	ldr	r3, [r7, #32]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	bf14      	ite	ne
 8017e1e:	2301      	movne	r3, #1
 8017e20:	2300      	moveq	r3, #0
 8017e22:	b2db      	uxtb	r3, r3
 8017e24:	e000      	b.n	8017e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017e26:	2300      	movs	r3, #0
}
 8017e28:	4618      	mov	r0, r3
 8017e2a:	3730      	adds	r7, #48	; 0x30
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	bd80      	pop	{r7, pc}
 8017e30:	0801ccd0 	.word	0x0801ccd0
 8017e34:	0801cdb4 	.word	0x0801cdb4
 8017e38:	0801cd18 	.word	0x0801cd18
 8017e3c:	0801cdd4 	.word	0x0801cdd4
 8017e40:	0801ce0c 	.word	0x0801ce0c
 8017e44:	0801ce1c 	.word	0x0801ce1c

08017e48 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b08e      	sub	sp, #56	; 0x38
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	685b      	ldr	r3, [r3, #4]
 8017e54:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e58:	781b      	ldrb	r3, [r3, #0]
 8017e5a:	f003 030f 	and.w	r3, r3, #15
 8017e5e:	b2db      	uxtb	r3, r3
 8017e60:	009b      	lsls	r3, r3, #2
 8017e62:	b2db      	uxtb	r3, r3
 8017e64:	2b14      	cmp	r3, #20
 8017e66:	f040 8167 	bne.w	8018138 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e6c:	88db      	ldrh	r3, [r3, #6]
 8017e6e:	b29b      	uxth	r3, r3
 8017e70:	4618      	mov	r0, r3
 8017e72:	f7f6 f884 	bl	800df7e <lwip_htons>
 8017e76:	4603      	mov	r3, r0
 8017e78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e7c:	b29b      	uxth	r3, r3
 8017e7e:	00db      	lsls	r3, r3, #3
 8017e80:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e84:	885b      	ldrh	r3, [r3, #2]
 8017e86:	b29b      	uxth	r3, r3
 8017e88:	4618      	mov	r0, r3
 8017e8a:	f7f6 f878 	bl	800df7e <lwip_htons>
 8017e8e:	4603      	mov	r3, r0
 8017e90:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e94:	781b      	ldrb	r3, [r3, #0]
 8017e96:	f003 030f 	and.w	r3, r3, #15
 8017e9a:	b2db      	uxtb	r3, r3
 8017e9c:	009b      	lsls	r3, r3, #2
 8017e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017ea2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017ea6:	b29b      	uxth	r3, r3
 8017ea8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017eaa:	429a      	cmp	r2, r3
 8017eac:	f0c0 8146 	bcc.w	801813c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017eb4:	b29b      	uxth	r3, r3
 8017eb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017eb8:	1ad3      	subs	r3, r2, r3
 8017eba:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017ebc:	6878      	ldr	r0, [r7, #4]
 8017ebe:	f7f7 fba9 	bl	800f614 <pbuf_clen>
 8017ec2:	4603      	mov	r3, r0
 8017ec4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017ec6:	4b9f      	ldr	r3, [pc, #636]	; (8018144 <ip4_reass+0x2fc>)
 8017ec8:	881b      	ldrh	r3, [r3, #0]
 8017eca:	461a      	mov	r2, r3
 8017ecc:	8c3b      	ldrh	r3, [r7, #32]
 8017ece:	4413      	add	r3, r2
 8017ed0:	2b0a      	cmp	r3, #10
 8017ed2:	dd10      	ble.n	8017ef6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017ed4:	8c3b      	ldrh	r3, [r7, #32]
 8017ed6:	4619      	mov	r1, r3
 8017ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017eda:	f7ff fd81 	bl	80179e0 <ip_reass_remove_oldest_datagram>
 8017ede:	4603      	mov	r3, r0
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	f000 812d 	beq.w	8018140 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017ee6:	4b97      	ldr	r3, [pc, #604]	; (8018144 <ip4_reass+0x2fc>)
 8017ee8:	881b      	ldrh	r3, [r3, #0]
 8017eea:	461a      	mov	r2, r3
 8017eec:	8c3b      	ldrh	r3, [r7, #32]
 8017eee:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017ef0:	2b0a      	cmp	r3, #10
 8017ef2:	f300 8125 	bgt.w	8018140 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017ef6:	4b94      	ldr	r3, [pc, #592]	; (8018148 <ip4_reass+0x300>)
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	633b      	str	r3, [r7, #48]	; 0x30
 8017efc:	e015      	b.n	8017f2a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f00:	695a      	ldr	r2, [r3, #20]
 8017f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f04:	68db      	ldr	r3, [r3, #12]
 8017f06:	429a      	cmp	r2, r3
 8017f08:	d10c      	bne.n	8017f24 <ip4_reass+0xdc>
 8017f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f0c:	699a      	ldr	r2, [r3, #24]
 8017f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f10:	691b      	ldr	r3, [r3, #16]
 8017f12:	429a      	cmp	r2, r3
 8017f14:	d106      	bne.n	8017f24 <ip4_reass+0xdc>
 8017f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f18:	899a      	ldrh	r2, [r3, #12]
 8017f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f1c:	889b      	ldrh	r3, [r3, #4]
 8017f1e:	b29b      	uxth	r3, r3
 8017f20:	429a      	cmp	r2, r3
 8017f22:	d006      	beq.n	8017f32 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	633b      	str	r3, [r7, #48]	; 0x30
 8017f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d1e6      	bne.n	8017efe <ip4_reass+0xb6>
 8017f30:	e000      	b.n	8017f34 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017f32:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d109      	bne.n	8017f4e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017f3a:	8c3b      	ldrh	r3, [r7, #32]
 8017f3c:	4619      	mov	r1, r3
 8017f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f40:	f7ff fdb0 	bl	8017aa4 <ip_reass_enqueue_new_datagram>
 8017f44:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d11c      	bne.n	8017f86 <ip4_reass+0x13e>
      goto nullreturn;
 8017f4c:	e109      	b.n	8018162 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f50:	88db      	ldrh	r3, [r3, #6]
 8017f52:	b29b      	uxth	r3, r3
 8017f54:	4618      	mov	r0, r3
 8017f56:	f7f6 f812 	bl	800df7e <lwip_htons>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d110      	bne.n	8017f86 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f66:	89db      	ldrh	r3, [r3, #14]
 8017f68:	4618      	mov	r0, r3
 8017f6a:	f7f6 f808 	bl	800df7e <lwip_htons>
 8017f6e:	4603      	mov	r3, r0
 8017f70:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d006      	beq.n	8017f86 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f7a:	3308      	adds	r3, #8
 8017f7c:	2214      	movs	r2, #20
 8017f7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017f80:	4618      	mov	r0, r3
 8017f82:	f000 fef7 	bl	8018d74 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f88:	88db      	ldrh	r3, [r3, #6]
 8017f8a:	b29b      	uxth	r3, r3
 8017f8c:	f003 0320 	and.w	r3, r3, #32
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	bf0c      	ite	eq
 8017f94:	2301      	moveq	r3, #1
 8017f96:	2300      	movne	r3, #0
 8017f98:	b2db      	uxtb	r3, r3
 8017f9a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017f9c:	69fb      	ldr	r3, [r7, #28]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d00e      	beq.n	8017fc0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017fa2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017fa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017fa6:	4413      	add	r3, r2
 8017fa8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017faa:	8b7a      	ldrh	r2, [r7, #26]
 8017fac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017fae:	429a      	cmp	r2, r3
 8017fb0:	f0c0 80a0 	bcc.w	80180f4 <ip4_reass+0x2ac>
 8017fb4:	8b7b      	ldrh	r3, [r7, #26]
 8017fb6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017fba:	4293      	cmp	r3, r2
 8017fbc:	f200 809a 	bhi.w	80180f4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017fc0:	69fa      	ldr	r2, [r7, #28]
 8017fc2:	6879      	ldr	r1, [r7, #4]
 8017fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017fc6:	f7ff fdd5 	bl	8017b74 <ip_reass_chain_frag_into_datagram_and_validate>
 8017fca:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017fcc:	697b      	ldr	r3, [r7, #20]
 8017fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fd2:	f000 8091 	beq.w	80180f8 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017fd6:	4b5b      	ldr	r3, [pc, #364]	; (8018144 <ip4_reass+0x2fc>)
 8017fd8:	881a      	ldrh	r2, [r3, #0]
 8017fda:	8c3b      	ldrh	r3, [r7, #32]
 8017fdc:	4413      	add	r3, r2
 8017fde:	b29a      	uxth	r2, r3
 8017fe0:	4b58      	ldr	r3, [pc, #352]	; (8018144 <ip4_reass+0x2fc>)
 8017fe2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017fe4:	69fb      	ldr	r3, [r7, #28]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d00d      	beq.n	8018006 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017fea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017fec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017fee:	4413      	add	r3, r2
 8017ff0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ff4:	8a7a      	ldrh	r2, [r7, #18]
 8017ff6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ffa:	7f9b      	ldrb	r3, [r3, #30]
 8017ffc:	f043 0301 	orr.w	r3, r3, #1
 8018000:	b2da      	uxtb	r2, r3
 8018002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018004:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018006:	697b      	ldr	r3, [r7, #20]
 8018008:	2b01      	cmp	r3, #1
 801800a:	d171      	bne.n	80180f0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801800e:	8b9b      	ldrh	r3, [r3, #28]
 8018010:	3314      	adds	r3, #20
 8018012:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018016:	685b      	ldr	r3, [r3, #4]
 8018018:	685b      	ldr	r3, [r3, #4]
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018020:	685b      	ldr	r3, [r3, #4]
 8018022:	685b      	ldr	r3, [r3, #4]
 8018024:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018028:	3308      	adds	r3, #8
 801802a:	2214      	movs	r2, #20
 801802c:	4619      	mov	r1, r3
 801802e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018030:	f000 fea0 	bl	8018d74 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018034:	8a3b      	ldrh	r3, [r7, #16]
 8018036:	4618      	mov	r0, r3
 8018038:	f7f5 ffa1 	bl	800df7e <lwip_htons>
 801803c:	4603      	mov	r3, r0
 801803e:	461a      	mov	r2, r3
 8018040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018042:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018046:	2200      	movs	r2, #0
 8018048:	719a      	strb	r2, [r3, #6]
 801804a:	2200      	movs	r2, #0
 801804c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018050:	2200      	movs	r2, #0
 8018052:	729a      	strb	r2, [r3, #10]
 8018054:	2200      	movs	r2, #0
 8018056:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801805a:	685b      	ldr	r3, [r3, #4]
 801805c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801805e:	e00d      	b.n	801807c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018062:	685b      	ldr	r3, [r3, #4]
 8018064:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018066:	2114      	movs	r1, #20
 8018068:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801806a:	f7f7 f9c5 	bl	800f3f8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801806e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018070:	6878      	ldr	r0, [r7, #4]
 8018072:	f7f7 fb09 	bl	800f688 <pbuf_cat>
      r = iprh->next_pbuf;
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801807c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801807e:	2b00      	cmp	r3, #0
 8018080:	d1ee      	bne.n	8018060 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018082:	4b31      	ldr	r3, [pc, #196]	; (8018148 <ip4_reass+0x300>)
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018088:	429a      	cmp	r2, r3
 801808a:	d102      	bne.n	8018092 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801808c:	2300      	movs	r3, #0
 801808e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018090:	e010      	b.n	80180b4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018092:	4b2d      	ldr	r3, [pc, #180]	; (8018148 <ip4_reass+0x300>)
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018098:	e007      	b.n	80180aa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80180a0:	429a      	cmp	r2, r3
 80180a2:	d006      	beq.n	80180b2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80180a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80180aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d1f4      	bne.n	801809a <ip4_reass+0x252>
 80180b0:	e000      	b.n	80180b4 <ip4_reass+0x26c>
          break;
 80180b2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80180b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80180b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80180b8:	f7ff fd2e 	bl	8017b18 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80180bc:	6878      	ldr	r0, [r7, #4]
 80180be:	f7f7 faa9 	bl	800f614 <pbuf_clen>
 80180c2:	4603      	mov	r3, r0
 80180c4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80180c6:	4b1f      	ldr	r3, [pc, #124]	; (8018144 <ip4_reass+0x2fc>)
 80180c8:	881b      	ldrh	r3, [r3, #0]
 80180ca:	8c3a      	ldrh	r2, [r7, #32]
 80180cc:	429a      	cmp	r2, r3
 80180ce:	d906      	bls.n	80180de <ip4_reass+0x296>
 80180d0:	4b1e      	ldr	r3, [pc, #120]	; (801814c <ip4_reass+0x304>)
 80180d2:	f240 229b 	movw	r2, #667	; 0x29b
 80180d6:	491e      	ldr	r1, [pc, #120]	; (8018150 <ip4_reass+0x308>)
 80180d8:	481e      	ldr	r0, [pc, #120]	; (8018154 <ip4_reass+0x30c>)
 80180da:	f000 ff0b 	bl	8018ef4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80180de:	4b19      	ldr	r3, [pc, #100]	; (8018144 <ip4_reass+0x2fc>)
 80180e0:	881a      	ldrh	r2, [r3, #0]
 80180e2:	8c3b      	ldrh	r3, [r7, #32]
 80180e4:	1ad3      	subs	r3, r2, r3
 80180e6:	b29a      	uxth	r2, r3
 80180e8:	4b16      	ldr	r3, [pc, #88]	; (8018144 <ip4_reass+0x2fc>)
 80180ea:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	e03c      	b.n	801816a <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80180f0:	2300      	movs	r3, #0
 80180f2:	e03a      	b.n	801816a <ip4_reass+0x322>
      goto nullreturn_ipr;
 80180f4:	bf00      	nop
 80180f6:	e000      	b.n	80180fa <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80180f8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80180fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d106      	bne.n	801810e <ip4_reass+0x2c6>
 8018100:	4b12      	ldr	r3, [pc, #72]	; (801814c <ip4_reass+0x304>)
 8018102:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018106:	4914      	ldr	r1, [pc, #80]	; (8018158 <ip4_reass+0x310>)
 8018108:	4812      	ldr	r0, [pc, #72]	; (8018154 <ip4_reass+0x30c>)
 801810a:	f000 fef3 	bl	8018ef4 <iprintf>
  if (ipr->p == NULL) {
 801810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018110:	685b      	ldr	r3, [r3, #4]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d124      	bne.n	8018160 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018116:	4b0c      	ldr	r3, [pc, #48]	; (8018148 <ip4_reass+0x300>)
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801811c:	429a      	cmp	r2, r3
 801811e:	d006      	beq.n	801812e <ip4_reass+0x2e6>
 8018120:	4b0a      	ldr	r3, [pc, #40]	; (801814c <ip4_reass+0x304>)
 8018122:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018126:	490d      	ldr	r1, [pc, #52]	; (801815c <ip4_reass+0x314>)
 8018128:	480a      	ldr	r0, [pc, #40]	; (8018154 <ip4_reass+0x30c>)
 801812a:	f000 fee3 	bl	8018ef4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801812e:	2100      	movs	r1, #0
 8018130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018132:	f7ff fcf1 	bl	8017b18 <ip_reass_dequeue_datagram>
 8018136:	e014      	b.n	8018162 <ip4_reass+0x31a>
    goto nullreturn;
 8018138:	bf00      	nop
 801813a:	e012      	b.n	8018162 <ip4_reass+0x31a>
    goto nullreturn;
 801813c:	bf00      	nop
 801813e:	e010      	b.n	8018162 <ip4_reass+0x31a>
      goto nullreturn;
 8018140:	bf00      	nop
 8018142:	e00e      	b.n	8018162 <ip4_reass+0x31a>
 8018144:	200007e0 	.word	0x200007e0
 8018148:	200007dc 	.word	0x200007dc
 801814c:	0801ccd0 	.word	0x0801ccd0
 8018150:	0801ce40 	.word	0x0801ce40
 8018154:	0801cd18 	.word	0x0801cd18
 8018158:	0801ce5c 	.word	0x0801ce5c
 801815c:	0801ce68 	.word	0x0801ce68
  }

nullreturn:
 8018160:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018162:	6878      	ldr	r0, [r7, #4]
 8018164:	f7f7 f9ce 	bl	800f504 <pbuf_free>
  return NULL;
 8018168:	2300      	movs	r3, #0
}
 801816a:	4618      	mov	r0, r3
 801816c:	3738      	adds	r7, #56	; 0x38
 801816e:	46bd      	mov	sp, r7
 8018170:	bd80      	pop	{r7, pc}
 8018172:	bf00      	nop

08018174 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018174:	b580      	push	{r7, lr}
 8018176:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018178:	2005      	movs	r0, #5
 801817a:	f7f6 fb65 	bl	800e848 <memp_malloc>
 801817e:	4603      	mov	r3, r0
}
 8018180:	4618      	mov	r0, r3
 8018182:	bd80      	pop	{r7, pc}

08018184 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018184:	b580      	push	{r7, lr}
 8018186:	b082      	sub	sp, #8
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	2b00      	cmp	r3, #0
 8018190:	d106      	bne.n	80181a0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018192:	4b07      	ldr	r3, [pc, #28]	; (80181b0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018194:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018198:	4906      	ldr	r1, [pc, #24]	; (80181b4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801819a:	4807      	ldr	r0, [pc, #28]	; (80181b8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801819c:	f000 feaa 	bl	8018ef4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80181a0:	6879      	ldr	r1, [r7, #4]
 80181a2:	2005      	movs	r0, #5
 80181a4:	f7f6 fb9c 	bl	800e8e0 <memp_free>
}
 80181a8:	bf00      	nop
 80181aa:	3708      	adds	r7, #8
 80181ac:	46bd      	mov	sp, r7
 80181ae:	bd80      	pop	{r7, pc}
 80181b0:	0801ccd0 	.word	0x0801ccd0
 80181b4:	0801ce88 	.word	0x0801ce88
 80181b8:	0801cd18 	.word	0x0801cd18

080181bc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80181bc:	b580      	push	{r7, lr}
 80181be:	b084      	sub	sp, #16
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d106      	bne.n	80181dc <ipfrag_free_pbuf_custom+0x20>
 80181ce:	4b11      	ldr	r3, [pc, #68]	; (8018214 <ipfrag_free_pbuf_custom+0x58>)
 80181d0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80181d4:	4910      	ldr	r1, [pc, #64]	; (8018218 <ipfrag_free_pbuf_custom+0x5c>)
 80181d6:	4811      	ldr	r0, [pc, #68]	; (801821c <ipfrag_free_pbuf_custom+0x60>)
 80181d8:	f000 fe8c 	bl	8018ef4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80181dc:	68fa      	ldr	r2, [r7, #12]
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	429a      	cmp	r2, r3
 80181e2:	d006      	beq.n	80181f2 <ipfrag_free_pbuf_custom+0x36>
 80181e4:	4b0b      	ldr	r3, [pc, #44]	; (8018214 <ipfrag_free_pbuf_custom+0x58>)
 80181e6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80181ea:	490d      	ldr	r1, [pc, #52]	; (8018220 <ipfrag_free_pbuf_custom+0x64>)
 80181ec:	480b      	ldr	r0, [pc, #44]	; (801821c <ipfrag_free_pbuf_custom+0x60>)
 80181ee:	f000 fe81 	bl	8018ef4 <iprintf>
  if (pcr->original != NULL) {
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	695b      	ldr	r3, [r3, #20]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d004      	beq.n	8018204 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	695b      	ldr	r3, [r3, #20]
 80181fe:	4618      	mov	r0, r3
 8018200:	f7f7 f980 	bl	800f504 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018204:	68f8      	ldr	r0, [r7, #12]
 8018206:	f7ff ffbd 	bl	8018184 <ip_frag_free_pbuf_custom_ref>
}
 801820a:	bf00      	nop
 801820c:	3710      	adds	r7, #16
 801820e:	46bd      	mov	sp, r7
 8018210:	bd80      	pop	{r7, pc}
 8018212:	bf00      	nop
 8018214:	0801ccd0 	.word	0x0801ccd0
 8018218:	0801ce94 	.word	0x0801ce94
 801821c:	0801cd18 	.word	0x0801cd18
 8018220:	0801cea0 	.word	0x0801cea0

08018224 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018224:	b580      	push	{r7, lr}
 8018226:	b094      	sub	sp, #80	; 0x50
 8018228:	af02      	add	r7, sp, #8
 801822a:	60f8      	str	r0, [r7, #12]
 801822c:	60b9      	str	r1, [r7, #8]
 801822e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018230:	2300      	movs	r3, #0
 8018232:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018236:	68bb      	ldr	r3, [r7, #8]
 8018238:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801823a:	3b14      	subs	r3, #20
 801823c:	2b00      	cmp	r3, #0
 801823e:	da00      	bge.n	8018242 <ip4_frag+0x1e>
 8018240:	3307      	adds	r3, #7
 8018242:	10db      	asrs	r3, r3, #3
 8018244:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018246:	2314      	movs	r3, #20
 8018248:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	685b      	ldr	r3, [r3, #4]
 801824e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018252:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018256:	781b      	ldrb	r3, [r3, #0]
 8018258:	f003 030f 	and.w	r3, r3, #15
 801825c:	b2db      	uxtb	r3, r3
 801825e:	009b      	lsls	r3, r3, #2
 8018260:	b2db      	uxtb	r3, r3
 8018262:	2b14      	cmp	r3, #20
 8018264:	d002      	beq.n	801826c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018266:	f06f 0305 	mvn.w	r3, #5
 801826a:	e110      	b.n	801848e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801826c:	68fb      	ldr	r3, [r7, #12]
 801826e:	895b      	ldrh	r3, [r3, #10]
 8018270:	2b13      	cmp	r3, #19
 8018272:	d809      	bhi.n	8018288 <ip4_frag+0x64>
 8018274:	4b88      	ldr	r3, [pc, #544]	; (8018498 <ip4_frag+0x274>)
 8018276:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801827a:	4988      	ldr	r1, [pc, #544]	; (801849c <ip4_frag+0x278>)
 801827c:	4888      	ldr	r0, [pc, #544]	; (80184a0 <ip4_frag+0x27c>)
 801827e:	f000 fe39 	bl	8018ef4 <iprintf>
 8018282:	f06f 0305 	mvn.w	r3, #5
 8018286:	e102      	b.n	801848e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801828a:	88db      	ldrh	r3, [r3, #6]
 801828c:	b29b      	uxth	r3, r3
 801828e:	4618      	mov	r0, r3
 8018290:	f7f5 fe75 	bl	800df7e <lwip_htons>
 8018294:	4603      	mov	r3, r0
 8018296:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018298:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801829a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801829e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80182a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80182a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80182a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80182aa:	68fb      	ldr	r3, [r7, #12]
 80182ac:	891b      	ldrh	r3, [r3, #8]
 80182ae:	3b14      	subs	r3, #20
 80182b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80182b4:	e0e1      	b.n	801847a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80182b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80182b8:	00db      	lsls	r3, r3, #3
 80182ba:	b29b      	uxth	r3, r3
 80182bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80182c0:	4293      	cmp	r3, r2
 80182c2:	bf28      	it	cs
 80182c4:	4613      	movcs	r3, r2
 80182c6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80182c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80182cc:	2114      	movs	r1, #20
 80182ce:	200e      	movs	r0, #14
 80182d0:	f7f6 fe34 	bl	800ef3c <pbuf_alloc>
 80182d4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80182d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182d8:	2b00      	cmp	r3, #0
 80182da:	f000 80d5 	beq.w	8018488 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80182de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182e0:	895b      	ldrh	r3, [r3, #10]
 80182e2:	2b13      	cmp	r3, #19
 80182e4:	d806      	bhi.n	80182f4 <ip4_frag+0xd0>
 80182e6:	4b6c      	ldr	r3, [pc, #432]	; (8018498 <ip4_frag+0x274>)
 80182e8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80182ec:	496d      	ldr	r1, [pc, #436]	; (80184a4 <ip4_frag+0x280>)
 80182ee:	486c      	ldr	r0, [pc, #432]	; (80184a0 <ip4_frag+0x27c>)
 80182f0:	f000 fe00 	bl	8018ef4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80182f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182f6:	685b      	ldr	r3, [r3, #4]
 80182f8:	2214      	movs	r2, #20
 80182fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80182fc:	4618      	mov	r0, r3
 80182fe:	f000 fd39 	bl	8018d74 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018304:	685b      	ldr	r3, [r3, #4]
 8018306:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018308:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801830a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801830e:	e064      	b.n	80183da <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	895a      	ldrh	r2, [r3, #10]
 8018314:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018316:	1ad3      	subs	r3, r2, r3
 8018318:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	895b      	ldrh	r3, [r3, #10]
 801831e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018320:	429a      	cmp	r2, r3
 8018322:	d906      	bls.n	8018332 <ip4_frag+0x10e>
 8018324:	4b5c      	ldr	r3, [pc, #368]	; (8018498 <ip4_frag+0x274>)
 8018326:	f240 322d 	movw	r2, #813	; 0x32d
 801832a:	495f      	ldr	r1, [pc, #380]	; (80184a8 <ip4_frag+0x284>)
 801832c:	485c      	ldr	r0, [pc, #368]	; (80184a0 <ip4_frag+0x27c>)
 801832e:	f000 fde1 	bl	8018ef4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018332:	8bfa      	ldrh	r2, [r7, #30]
 8018334:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018338:	4293      	cmp	r3, r2
 801833a:	bf28      	it	cs
 801833c:	4613      	movcs	r3, r2
 801833e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018342:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018346:	2b00      	cmp	r3, #0
 8018348:	d105      	bne.n	8018356 <ip4_frag+0x132>
        poff = 0;
 801834a:	2300      	movs	r3, #0
 801834c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801834e:	68fb      	ldr	r3, [r7, #12]
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	60fb      	str	r3, [r7, #12]
        continue;
 8018354:	e041      	b.n	80183da <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018356:	f7ff ff0d 	bl	8018174 <ip_frag_alloc_pbuf_custom_ref>
 801835a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801835c:	69bb      	ldr	r3, [r7, #24]
 801835e:	2b00      	cmp	r3, #0
 8018360:	d103      	bne.n	801836a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018362:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018364:	f7f7 f8ce 	bl	800f504 <pbuf_free>
        goto memerr;
 8018368:	e08f      	b.n	801848a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801836a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018370:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018372:	4413      	add	r3, r2
 8018374:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018378:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801837c:	9201      	str	r2, [sp, #4]
 801837e:	9300      	str	r3, [sp, #0]
 8018380:	4603      	mov	r3, r0
 8018382:	2241      	movs	r2, #65	; 0x41
 8018384:	2000      	movs	r0, #0
 8018386:	f7f6 ff03 	bl	800f190 <pbuf_alloced_custom>
 801838a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801838c:	697b      	ldr	r3, [r7, #20]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d106      	bne.n	80183a0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018392:	69b8      	ldr	r0, [r7, #24]
 8018394:	f7ff fef6 	bl	8018184 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018398:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801839a:	f7f7 f8b3 	bl	800f504 <pbuf_free>
        goto memerr;
 801839e:	e074      	b.n	801848a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80183a0:	68f8      	ldr	r0, [r7, #12]
 80183a2:	f7f7 f94f 	bl	800f644 <pbuf_ref>
      pcr->original = p;
 80183a6:	69bb      	ldr	r3, [r7, #24]
 80183a8:	68fa      	ldr	r2, [r7, #12]
 80183aa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80183ac:	69bb      	ldr	r3, [r7, #24]
 80183ae:	4a3f      	ldr	r2, [pc, #252]	; (80184ac <ip4_frag+0x288>)
 80183b0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80183b2:	6979      	ldr	r1, [r7, #20]
 80183b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80183b6:	f7f7 f967 	bl	800f688 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80183ba:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80183be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80183c2:	1ad3      	subs	r3, r2, r3
 80183c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80183c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d004      	beq.n	80183da <ip4_frag+0x1b6>
        poff = 0;
 80183d0:	2300      	movs	r3, #0
 80183d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80183d4:	68fb      	ldr	r3, [r7, #12]
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80183da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d196      	bne.n	8018310 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80183e2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80183e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80183e8:	4413      	add	r3, r2
 80183ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80183ec:	68bb      	ldr	r3, [r7, #8]
 80183ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80183f0:	f1a3 0213 	sub.w	r2, r3, #19
 80183f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80183f8:	429a      	cmp	r2, r3
 80183fa:	bfcc      	ite	gt
 80183fc:	2301      	movgt	r3, #1
 80183fe:	2300      	movle	r3, #0
 8018400:	b2db      	uxtb	r3, r3
 8018402:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018404:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801840c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801840e:	6a3b      	ldr	r3, [r7, #32]
 8018410:	2b00      	cmp	r3, #0
 8018412:	d002      	beq.n	801841a <ip4_frag+0x1f6>
 8018414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018416:	2b00      	cmp	r3, #0
 8018418:	d003      	beq.n	8018422 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801841a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801841c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018420:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018422:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018424:	4618      	mov	r0, r3
 8018426:	f7f5 fdaa 	bl	800df7e <lwip_htons>
 801842a:	4603      	mov	r3, r0
 801842c:	461a      	mov	r2, r3
 801842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018430:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018432:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018434:	3314      	adds	r3, #20
 8018436:	b29b      	uxth	r3, r3
 8018438:	4618      	mov	r0, r3
 801843a:	f7f5 fda0 	bl	800df7e <lwip_htons>
 801843e:	4603      	mov	r3, r0
 8018440:	461a      	mov	r2, r3
 8018442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018444:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018448:	2200      	movs	r2, #0
 801844a:	729a      	strb	r2, [r3, #10]
 801844c:	2200      	movs	r2, #0
 801844e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018450:	68bb      	ldr	r3, [r7, #8]
 8018452:	695b      	ldr	r3, [r3, #20]
 8018454:	687a      	ldr	r2, [r7, #4]
 8018456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018458:	68b8      	ldr	r0, [r7, #8]
 801845a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801845c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801845e:	f7f7 f851 	bl	800f504 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018462:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018466:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018468:	1ad3      	subs	r3, r2, r3
 801846a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801846e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018472:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018474:	4413      	add	r3, r2
 8018476:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801847a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801847e:	2b00      	cmp	r3, #0
 8018480:	f47f af19 	bne.w	80182b6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018484:	2300      	movs	r3, #0
 8018486:	e002      	b.n	801848e <ip4_frag+0x26a>
      goto memerr;
 8018488:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801848a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801848e:	4618      	mov	r0, r3
 8018490:	3748      	adds	r7, #72	; 0x48
 8018492:	46bd      	mov	sp, r7
 8018494:	bd80      	pop	{r7, pc}
 8018496:	bf00      	nop
 8018498:	0801ccd0 	.word	0x0801ccd0
 801849c:	0801ceac 	.word	0x0801ceac
 80184a0:	0801cd18 	.word	0x0801cd18
 80184a4:	0801cec8 	.word	0x0801cec8
 80184a8:	0801cee8 	.word	0x0801cee8
 80184ac:	080181bd 	.word	0x080181bd

080184b0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b086      	sub	sp, #24
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
 80184b8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80184ba:	230e      	movs	r3, #14
 80184bc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	895b      	ldrh	r3, [r3, #10]
 80184c2:	2b0e      	cmp	r3, #14
 80184c4:	d96e      	bls.n	80185a4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	7bdb      	ldrb	r3, [r3, #15]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d106      	bne.n	80184dc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80184ce:	683b      	ldr	r3, [r7, #0]
 80184d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80184d4:	3301      	adds	r3, #1
 80184d6:	b2da      	uxtb	r2, r3
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	685b      	ldr	r3, [r3, #4]
 80184e0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80184e2:	693b      	ldr	r3, [r7, #16]
 80184e4:	7b1a      	ldrb	r2, [r3, #12]
 80184e6:	7b5b      	ldrb	r3, [r3, #13]
 80184e8:	021b      	lsls	r3, r3, #8
 80184ea:	4313      	orrs	r3, r2
 80184ec:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80184ee:	693b      	ldr	r3, [r7, #16]
 80184f0:	781b      	ldrb	r3, [r3, #0]
 80184f2:	f003 0301 	and.w	r3, r3, #1
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d023      	beq.n	8018542 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80184fa:	693b      	ldr	r3, [r7, #16]
 80184fc:	781b      	ldrb	r3, [r3, #0]
 80184fe:	2b01      	cmp	r3, #1
 8018500:	d10f      	bne.n	8018522 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018502:	693b      	ldr	r3, [r7, #16]
 8018504:	785b      	ldrb	r3, [r3, #1]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d11b      	bne.n	8018542 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801850a:	693b      	ldr	r3, [r7, #16]
 801850c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801850e:	2b5e      	cmp	r3, #94	; 0x5e
 8018510:	d117      	bne.n	8018542 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	7b5b      	ldrb	r3, [r3, #13]
 8018516:	f043 0310 	orr.w	r3, r3, #16
 801851a:	b2da      	uxtb	r2, r3
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	735a      	strb	r2, [r3, #13]
 8018520:	e00f      	b.n	8018542 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018522:	693b      	ldr	r3, [r7, #16]
 8018524:	2206      	movs	r2, #6
 8018526:	4928      	ldr	r1, [pc, #160]	; (80185c8 <ethernet_input+0x118>)
 8018528:	4618      	mov	r0, r3
 801852a:	f000 fc15 	bl	8018d58 <memcmp>
 801852e:	4603      	mov	r3, r0
 8018530:	2b00      	cmp	r3, #0
 8018532:	d106      	bne.n	8018542 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	7b5b      	ldrb	r3, [r3, #13]
 8018538:	f043 0308 	orr.w	r3, r3, #8
 801853c:	b2da      	uxtb	r2, r3
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018542:	89fb      	ldrh	r3, [r7, #14]
 8018544:	2b08      	cmp	r3, #8
 8018546:	d003      	beq.n	8018550 <ethernet_input+0xa0>
 8018548:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801854c:	d014      	beq.n	8018578 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801854e:	e032      	b.n	80185b6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018550:	683b      	ldr	r3, [r7, #0]
 8018552:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018556:	f003 0308 	and.w	r3, r3, #8
 801855a:	2b00      	cmp	r3, #0
 801855c:	d024      	beq.n	80185a8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801855e:	8afb      	ldrh	r3, [r7, #22]
 8018560:	4619      	mov	r1, r3
 8018562:	6878      	ldr	r0, [r7, #4]
 8018564:	f7f6 ff48 	bl	800f3f8 <pbuf_remove_header>
 8018568:	4603      	mov	r3, r0
 801856a:	2b00      	cmp	r3, #0
 801856c:	d11e      	bne.n	80185ac <ethernet_input+0xfc>
        ip4_input(p, netif);
 801856e:	6839      	ldr	r1, [r7, #0]
 8018570:	6878      	ldr	r0, [r7, #4]
 8018572:	f7fe ff27 	bl	80173c4 <ip4_input>
      break;
 8018576:	e013      	b.n	80185a0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018578:	683b      	ldr	r3, [r7, #0]
 801857a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801857e:	f003 0308 	and.w	r3, r3, #8
 8018582:	2b00      	cmp	r3, #0
 8018584:	d014      	beq.n	80185b0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018586:	8afb      	ldrh	r3, [r7, #22]
 8018588:	4619      	mov	r1, r3
 801858a:	6878      	ldr	r0, [r7, #4]
 801858c:	f7f6 ff34 	bl	800f3f8 <pbuf_remove_header>
 8018590:	4603      	mov	r3, r0
 8018592:	2b00      	cmp	r3, #0
 8018594:	d10e      	bne.n	80185b4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018596:	6839      	ldr	r1, [r7, #0]
 8018598:	6878      	ldr	r0, [r7, #4]
 801859a:	f7fe f8c7 	bl	801672c <etharp_input>
      break;
 801859e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80185a0:	2300      	movs	r3, #0
 80185a2:	e00c      	b.n	80185be <ethernet_input+0x10e>
    goto free_and_return;
 80185a4:	bf00      	nop
 80185a6:	e006      	b.n	80185b6 <ethernet_input+0x106>
        goto free_and_return;
 80185a8:	bf00      	nop
 80185aa:	e004      	b.n	80185b6 <ethernet_input+0x106>
        goto free_and_return;
 80185ac:	bf00      	nop
 80185ae:	e002      	b.n	80185b6 <ethernet_input+0x106>
        goto free_and_return;
 80185b0:	bf00      	nop
 80185b2:	e000      	b.n	80185b6 <ethernet_input+0x106>
        goto free_and_return;
 80185b4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80185b6:	6878      	ldr	r0, [r7, #4]
 80185b8:	f7f6 ffa4 	bl	800f504 <pbuf_free>
  return ERR_OK;
 80185bc:	2300      	movs	r3, #0
}
 80185be:	4618      	mov	r0, r3
 80185c0:	3718      	adds	r7, #24
 80185c2:	46bd      	mov	sp, r7
 80185c4:	bd80      	pop	{r7, pc}
 80185c6:	bf00      	nop
 80185c8:	0801d208 	.word	0x0801d208

080185cc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b086      	sub	sp, #24
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	60f8      	str	r0, [r7, #12]
 80185d4:	60b9      	str	r1, [r7, #8]
 80185d6:	607a      	str	r2, [r7, #4]
 80185d8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80185da:	8c3b      	ldrh	r3, [r7, #32]
 80185dc:	4618      	mov	r0, r3
 80185de:	f7f5 fcce 	bl	800df7e <lwip_htons>
 80185e2:	4603      	mov	r3, r0
 80185e4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80185e6:	210e      	movs	r1, #14
 80185e8:	68b8      	ldr	r0, [r7, #8]
 80185ea:	f7f6 fef5 	bl	800f3d8 <pbuf_add_header>
 80185ee:	4603      	mov	r3, r0
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d125      	bne.n	8018640 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80185f4:	68bb      	ldr	r3, [r7, #8]
 80185f6:	685b      	ldr	r3, [r3, #4]
 80185f8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80185fa:	693b      	ldr	r3, [r7, #16]
 80185fc:	8afa      	ldrh	r2, [r7, #22]
 80185fe:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018600:	693b      	ldr	r3, [r7, #16]
 8018602:	2206      	movs	r2, #6
 8018604:	6839      	ldr	r1, [r7, #0]
 8018606:	4618      	mov	r0, r3
 8018608:	f000 fbb4 	bl	8018d74 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801860c:	693b      	ldr	r3, [r7, #16]
 801860e:	3306      	adds	r3, #6
 8018610:	2206      	movs	r2, #6
 8018612:	6879      	ldr	r1, [r7, #4]
 8018614:	4618      	mov	r0, r3
 8018616:	f000 fbad 	bl	8018d74 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018620:	2b06      	cmp	r3, #6
 8018622:	d006      	beq.n	8018632 <ethernet_output+0x66>
 8018624:	4b0a      	ldr	r3, [pc, #40]	; (8018650 <ethernet_output+0x84>)
 8018626:	f44f 7299 	mov.w	r2, #306	; 0x132
 801862a:	490a      	ldr	r1, [pc, #40]	; (8018654 <ethernet_output+0x88>)
 801862c:	480a      	ldr	r0, [pc, #40]	; (8018658 <ethernet_output+0x8c>)
 801862e:	f000 fc61 	bl	8018ef4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	699b      	ldr	r3, [r3, #24]
 8018636:	68b9      	ldr	r1, [r7, #8]
 8018638:	68f8      	ldr	r0, [r7, #12]
 801863a:	4798      	blx	r3
 801863c:	4603      	mov	r3, r0
 801863e:	e002      	b.n	8018646 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018640:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018642:	f06f 0301 	mvn.w	r3, #1
}
 8018646:	4618      	mov	r0, r3
 8018648:	3718      	adds	r7, #24
 801864a:	46bd      	mov	sp, r7
 801864c:	bd80      	pop	{r7, pc}
 801864e:	bf00      	nop
 8018650:	0801cef8 	.word	0x0801cef8
 8018654:	0801cf30 	.word	0x0801cf30
 8018658:	0801cf64 	.word	0x0801cf64

0801865c <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 801865c:	b580      	push	{r7, lr}
 801865e:	b082      	sub	sp, #8
 8018660:	af00      	add	r7, sp, #0
 8018662:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8018664:	1d39      	adds	r1, r7, #4
 8018666:	f04f 33ff 	mov.w	r3, #4294967295
 801866a:	2201      	movs	r2, #1
 801866c:	4803      	ldr	r0, [pc, #12]	; (801867c <__io_putchar+0x20>)
 801866e:	f7ef fc68 	bl	8007f42 <HAL_UART_Transmit>
  return ch;
 8018672:	687b      	ldr	r3, [r7, #4]
}
 8018674:	4618      	mov	r0, r3
 8018676:	3708      	adds	r7, #8
 8018678:	46bd      	mov	sp, r7
 801867a:	bd80      	pop	{r7, pc}
 801867c:	20002950 	.word	0x20002950

08018680 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8018680:	b580      	push	{r7, lr}
 8018682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8018684:	2201      	movs	r2, #1
 8018686:	490e      	ldr	r1, [pc, #56]	; (80186c0 <MX_USB_HOST_Init+0x40>)
 8018688:	480e      	ldr	r0, [pc, #56]	; (80186c4 <MX_USB_HOST_Init+0x44>)
 801868a:	f7f3 fefb 	bl	800c484 <USBH_Init>
 801868e:	4603      	mov	r3, r0
 8018690:	2b00      	cmp	r3, #0
 8018692:	d001      	beq.n	8018698 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8018694:	f7e8 fa6e 	bl	8000b74 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8018698:	490b      	ldr	r1, [pc, #44]	; (80186c8 <MX_USB_HOST_Init+0x48>)
 801869a:	480a      	ldr	r0, [pc, #40]	; (80186c4 <MX_USB_HOST_Init+0x44>)
 801869c:	f7f3 ff8e 	bl	800c5bc <USBH_RegisterClass>
 80186a0:	4603      	mov	r3, r0
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d001      	beq.n	80186aa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80186a6:	f7e8 fa65 	bl	8000b74 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80186aa:	4806      	ldr	r0, [pc, #24]	; (80186c4 <MX_USB_HOST_Init+0x44>)
 80186ac:	f7f4 f874 	bl	800c798 <USBH_Start>
 80186b0:	4603      	mov	r3, r0
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d001      	beq.n	80186ba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80186b6:	f7e8 fa5d 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80186ba:	bf00      	nop
 80186bc:	bd80      	pop	{r7, pc}
 80186be:	bf00      	nop
 80186c0:	080186e1 	.word	0x080186e1
 80186c4:	200187b8 	.word	0x200187b8
 80186c8:	2000058c 	.word	0x2000058c

080186cc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80186d0:	4802      	ldr	r0, [pc, #8]	; (80186dc <MX_USB_HOST_Process+0x10>)
 80186d2:	f7f4 f871 	bl	800c7b8 <USBH_Process>
}
 80186d6:	bf00      	nop
 80186d8:	bd80      	pop	{r7, pc}
 80186da:	bf00      	nop
 80186dc:	200187b8 	.word	0x200187b8

080186e0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80186e0:	b480      	push	{r7}
 80186e2:	b083      	sub	sp, #12
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	6078      	str	r0, [r7, #4]
 80186e8:	460b      	mov	r3, r1
 80186ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80186ec:	78fb      	ldrb	r3, [r7, #3]
 80186ee:	3b01      	subs	r3, #1
 80186f0:	2b04      	cmp	r3, #4
 80186f2:	d819      	bhi.n	8018728 <USBH_UserProcess+0x48>
 80186f4:	a201      	add	r2, pc, #4	; (adr r2, 80186fc <USBH_UserProcess+0x1c>)
 80186f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186fa:	bf00      	nop
 80186fc:	08018729 	.word	0x08018729
 8018700:	08018719 	.word	0x08018719
 8018704:	08018729 	.word	0x08018729
 8018708:	08018721 	.word	0x08018721
 801870c:	08018711 	.word	0x08018711
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8018710:	4b09      	ldr	r3, [pc, #36]	; (8018738 <USBH_UserProcess+0x58>)
 8018712:	2203      	movs	r2, #3
 8018714:	701a      	strb	r2, [r3, #0]
  break;
 8018716:	e008      	b.n	801872a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8018718:	4b07      	ldr	r3, [pc, #28]	; (8018738 <USBH_UserProcess+0x58>)
 801871a:	2202      	movs	r2, #2
 801871c:	701a      	strb	r2, [r3, #0]
//  {
//    printf("USB Device Process Error\n");
//    /* Error : Hang Here */
//    while(1);
//  }
  break;
 801871e:	e004      	b.n	801872a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8018720:	4b05      	ldr	r3, [pc, #20]	; (8018738 <USBH_UserProcess+0x58>)
 8018722:	2201      	movs	r2, #1
 8018724:	701a      	strb	r2, [r3, #0]
  break;
 8018726:	e000      	b.n	801872a <USBH_UserProcess+0x4a>

  default:
  break;
 8018728:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801872a:	bf00      	nop
 801872c:	370c      	adds	r7, #12
 801872e:	46bd      	mov	sp, r7
 8018730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018734:	4770      	bx	lr
 8018736:	bf00      	nop
 8018738:	200007e2 	.word	0x200007e2

0801873c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801873c:	b580      	push	{r7, lr}
 801873e:	b08a      	sub	sp, #40	; 0x28
 8018740:	af00      	add	r7, sp, #0
 8018742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018744:	f107 0314 	add.w	r3, r7, #20
 8018748:	2200      	movs	r2, #0
 801874a:	601a      	str	r2, [r3, #0]
 801874c:	605a      	str	r2, [r3, #4]
 801874e:	609a      	str	r2, [r3, #8]
 8018750:	60da      	str	r2, [r3, #12]
 8018752:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801875c:	d147      	bne.n	80187ee <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801875e:	2300      	movs	r3, #0
 8018760:	613b      	str	r3, [r7, #16]
 8018762:	4b25      	ldr	r3, [pc, #148]	; (80187f8 <HAL_HCD_MspInit+0xbc>)
 8018764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018766:	4a24      	ldr	r2, [pc, #144]	; (80187f8 <HAL_HCD_MspInit+0xbc>)
 8018768:	f043 0301 	orr.w	r3, r3, #1
 801876c:	6313      	str	r3, [r2, #48]	; 0x30
 801876e:	4b22      	ldr	r3, [pc, #136]	; (80187f8 <HAL_HCD_MspInit+0xbc>)
 8018770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018772:	f003 0301 	and.w	r3, r3, #1
 8018776:	613b      	str	r3, [r7, #16]
 8018778:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801877a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801877e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018780:	2300      	movs	r3, #0
 8018782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018784:	2300      	movs	r3, #0
 8018786:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018788:	f107 0314 	add.w	r3, r7, #20
 801878c:	4619      	mov	r1, r3
 801878e:	481b      	ldr	r0, [pc, #108]	; (80187fc <HAL_HCD_MspInit+0xc0>)
 8018790:	f7ec ff2c 	bl	80055ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018794:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801879a:	2302      	movs	r3, #2
 801879c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801879e:	2300      	movs	r3, #0
 80187a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80187a2:	2303      	movs	r3, #3
 80187a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80187a6:	230a      	movs	r3, #10
 80187a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80187aa:	f107 0314 	add.w	r3, r7, #20
 80187ae:	4619      	mov	r1, r3
 80187b0:	4812      	ldr	r0, [pc, #72]	; (80187fc <HAL_HCD_MspInit+0xc0>)
 80187b2:	f7ec ff1b 	bl	80055ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80187b6:	4b10      	ldr	r3, [pc, #64]	; (80187f8 <HAL_HCD_MspInit+0xbc>)
 80187b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80187ba:	4a0f      	ldr	r2, [pc, #60]	; (80187f8 <HAL_HCD_MspInit+0xbc>)
 80187bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80187c0:	6353      	str	r3, [r2, #52]	; 0x34
 80187c2:	2300      	movs	r3, #0
 80187c4:	60fb      	str	r3, [r7, #12]
 80187c6:	4b0c      	ldr	r3, [pc, #48]	; (80187f8 <HAL_HCD_MspInit+0xbc>)
 80187c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187ca:	4a0b      	ldr	r2, [pc, #44]	; (80187f8 <HAL_HCD_MspInit+0xbc>)
 80187cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80187d0:	6453      	str	r3, [r2, #68]	; 0x44
 80187d2:	4b09      	ldr	r3, [pc, #36]	; (80187f8 <HAL_HCD_MspInit+0xbc>)
 80187d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80187da:	60fb      	str	r3, [r7, #12]
 80187dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80187de:	2200      	movs	r2, #0
 80187e0:	2100      	movs	r1, #0
 80187e2:	2043      	movs	r0, #67	; 0x43
 80187e4:	f7e9 fc5d 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80187e8:	2043      	movs	r0, #67	; 0x43
 80187ea:	f7e9 fc76 	bl	80020da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80187ee:	bf00      	nop
 80187f0:	3728      	adds	r7, #40	; 0x28
 80187f2:	46bd      	mov	sp, r7
 80187f4:	bd80      	pop	{r7, pc}
 80187f6:	bf00      	nop
 80187f8:	40023800 	.word	0x40023800
 80187fc:	40020000 	.word	0x40020000

08018800 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8018800:	b580      	push	{r7, lr}
 8018802:	b082      	sub	sp, #8
 8018804:	af00      	add	r7, sp, #0
 8018806:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801880e:	4618      	mov	r0, r3
 8018810:	f7f4 fcf1 	bl	800d1f6 <USBH_LL_IncTimer>
}
 8018814:	bf00      	nop
 8018816:	3708      	adds	r7, #8
 8018818:	46bd      	mov	sp, r7
 801881a:	bd80      	pop	{r7, pc}

0801881c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801881c:	b580      	push	{r7, lr}
 801881e:	b082      	sub	sp, #8
 8018820:	af00      	add	r7, sp, #0
 8018822:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801882a:	4618      	mov	r0, r3
 801882c:	f7f4 fd29 	bl	800d282 <USBH_LL_Connect>
}
 8018830:	bf00      	nop
 8018832:	3708      	adds	r7, #8
 8018834:	46bd      	mov	sp, r7
 8018836:	bd80      	pop	{r7, pc}

08018838 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018838:	b580      	push	{r7, lr}
 801883a:	b082      	sub	sp, #8
 801883c:	af00      	add	r7, sp, #0
 801883e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018846:	4618      	mov	r0, r3
 8018848:	f7f4 fd32 	bl	800d2b0 <USBH_LL_Disconnect>
}
 801884c:	bf00      	nop
 801884e:	3708      	adds	r7, #8
 8018850:	46bd      	mov	sp, r7
 8018852:	bd80      	pop	{r7, pc}

08018854 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8018854:	b480      	push	{r7}
 8018856:	b083      	sub	sp, #12
 8018858:	af00      	add	r7, sp, #0
 801885a:	6078      	str	r0, [r7, #4]
 801885c:	460b      	mov	r3, r1
 801885e:	70fb      	strb	r3, [r7, #3]
 8018860:	4613      	mov	r3, r2
 8018862:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8018864:	bf00      	nop
 8018866:	370c      	adds	r7, #12
 8018868:	46bd      	mov	sp, r7
 801886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801886e:	4770      	bx	lr

08018870 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8018870:	b580      	push	{r7, lr}
 8018872:	b082      	sub	sp, #8
 8018874:	af00      	add	r7, sp, #0
 8018876:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801887e:	4618      	mov	r0, r3
 8018880:	f7f4 fce3 	bl	800d24a <USBH_LL_PortEnabled>
}
 8018884:	bf00      	nop
 8018886:	3708      	adds	r7, #8
 8018888:	46bd      	mov	sp, r7
 801888a:	bd80      	pop	{r7, pc}

0801888c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801888c:	b580      	push	{r7, lr}
 801888e:	b082      	sub	sp, #8
 8018890:	af00      	add	r7, sp, #0
 8018892:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801889a:	4618      	mov	r0, r3
 801889c:	f7f4 fce3 	bl	800d266 <USBH_LL_PortDisabled>
}
 80188a0:	bf00      	nop
 80188a2:	3708      	adds	r7, #8
 80188a4:	46bd      	mov	sp, r7
 80188a6:	bd80      	pop	{r7, pc}

080188a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b082      	sub	sp, #8
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80188b6:	2b01      	cmp	r3, #1
 80188b8:	d12a      	bne.n	8018910 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80188ba:	4a18      	ldr	r2, [pc, #96]	; (801891c <USBH_LL_Init+0x74>)
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	4a15      	ldr	r2, [pc, #84]	; (801891c <USBH_LL_Init+0x74>)
 80188c6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80188ca:	4b14      	ldr	r3, [pc, #80]	; (801891c <USBH_LL_Init+0x74>)
 80188cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80188d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80188d2:	4b12      	ldr	r3, [pc, #72]	; (801891c <USBH_LL_Init+0x74>)
 80188d4:	2208      	movs	r2, #8
 80188d6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80188d8:	4b10      	ldr	r3, [pc, #64]	; (801891c <USBH_LL_Init+0x74>)
 80188da:	2201      	movs	r2, #1
 80188dc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80188de:	4b0f      	ldr	r3, [pc, #60]	; (801891c <USBH_LL_Init+0x74>)
 80188e0:	2200      	movs	r2, #0
 80188e2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80188e4:	4b0d      	ldr	r3, [pc, #52]	; (801891c <USBH_LL_Init+0x74>)
 80188e6:	2202      	movs	r2, #2
 80188e8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80188ea:	4b0c      	ldr	r3, [pc, #48]	; (801891c <USBH_LL_Init+0x74>)
 80188ec:	2200      	movs	r2, #0
 80188ee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80188f0:	480a      	ldr	r0, [pc, #40]	; (801891c <USBH_LL_Init+0x74>)
 80188f2:	f7ed f848 	bl	8005986 <HAL_HCD_Init>
 80188f6:	4603      	mov	r3, r0
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d001      	beq.n	8018900 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80188fc:	f7e8 f93a 	bl	8000b74 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8018900:	4806      	ldr	r0, [pc, #24]	; (801891c <USBH_LL_Init+0x74>)
 8018902:	f7ed fc2c 	bl	800615e <HAL_HCD_GetCurrentFrame>
 8018906:	4603      	mov	r3, r0
 8018908:	4619      	mov	r1, r3
 801890a:	6878      	ldr	r0, [r7, #4]
 801890c:	f7f4 fc64 	bl	800d1d8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8018910:	2300      	movs	r3, #0
}
 8018912:	4618      	mov	r0, r3
 8018914:	3708      	adds	r7, #8
 8018916:	46bd      	mov	sp, r7
 8018918:	bd80      	pop	{r7, pc}
 801891a:	bf00      	nop
 801891c:	20018b90 	.word	0x20018b90

08018920 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8018920:	b580      	push	{r7, lr}
 8018922:	b084      	sub	sp, #16
 8018924:	af00      	add	r7, sp, #0
 8018926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018928:	2300      	movs	r3, #0
 801892a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801892c:	2300      	movs	r3, #0
 801892e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018936:	4618      	mov	r0, r3
 8018938:	f7ed fb9b 	bl	8006072 <HAL_HCD_Start>
 801893c:	4603      	mov	r3, r0
 801893e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018940:	7bfb      	ldrb	r3, [r7, #15]
 8018942:	4618      	mov	r0, r3
 8018944:	f000 f98c 	bl	8018c60 <USBH_Get_USB_Status>
 8018948:	4603      	mov	r3, r0
 801894a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801894c:	7bbb      	ldrb	r3, [r7, #14]
}
 801894e:	4618      	mov	r0, r3
 8018950:	3710      	adds	r7, #16
 8018952:	46bd      	mov	sp, r7
 8018954:	bd80      	pop	{r7, pc}

08018956 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8018956:	b580      	push	{r7, lr}
 8018958:	b084      	sub	sp, #16
 801895a:	af00      	add	r7, sp, #0
 801895c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801895e:	2300      	movs	r3, #0
 8018960:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018962:	2300      	movs	r3, #0
 8018964:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801896c:	4618      	mov	r0, r3
 801896e:	f7ed fba3 	bl	80060b8 <HAL_HCD_Stop>
 8018972:	4603      	mov	r3, r0
 8018974:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018976:	7bfb      	ldrb	r3, [r7, #15]
 8018978:	4618      	mov	r0, r3
 801897a:	f000 f971 	bl	8018c60 <USBH_Get_USB_Status>
 801897e:	4603      	mov	r3, r0
 8018980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018982:	7bbb      	ldrb	r3, [r7, #14]
}
 8018984:	4618      	mov	r0, r3
 8018986:	3710      	adds	r7, #16
 8018988:	46bd      	mov	sp, r7
 801898a:	bd80      	pop	{r7, pc}

0801898c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801898c:	b580      	push	{r7, lr}
 801898e:	b084      	sub	sp, #16
 8018990:	af00      	add	r7, sp, #0
 8018992:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8018994:	2301      	movs	r3, #1
 8018996:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801899e:	4618      	mov	r0, r3
 80189a0:	f7ed fbeb 	bl	800617a <HAL_HCD_GetCurrentSpeed>
 80189a4:	4603      	mov	r3, r0
 80189a6:	2b02      	cmp	r3, #2
 80189a8:	d00c      	beq.n	80189c4 <USBH_LL_GetSpeed+0x38>
 80189aa:	2b02      	cmp	r3, #2
 80189ac:	d80d      	bhi.n	80189ca <USBH_LL_GetSpeed+0x3e>
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d002      	beq.n	80189b8 <USBH_LL_GetSpeed+0x2c>
 80189b2:	2b01      	cmp	r3, #1
 80189b4:	d003      	beq.n	80189be <USBH_LL_GetSpeed+0x32>
 80189b6:	e008      	b.n	80189ca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80189b8:	2300      	movs	r3, #0
 80189ba:	73fb      	strb	r3, [r7, #15]
    break;
 80189bc:	e008      	b.n	80189d0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80189be:	2301      	movs	r3, #1
 80189c0:	73fb      	strb	r3, [r7, #15]
    break;
 80189c2:	e005      	b.n	80189d0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80189c4:	2302      	movs	r3, #2
 80189c6:	73fb      	strb	r3, [r7, #15]
    break;
 80189c8:	e002      	b.n	80189d0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80189ca:	2301      	movs	r3, #1
 80189cc:	73fb      	strb	r3, [r7, #15]
    break;
 80189ce:	bf00      	nop
  }
  return  speed;
 80189d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80189d2:	4618      	mov	r0, r3
 80189d4:	3710      	adds	r7, #16
 80189d6:	46bd      	mov	sp, r7
 80189d8:	bd80      	pop	{r7, pc}

080189da <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80189da:	b580      	push	{r7, lr}
 80189dc:	b084      	sub	sp, #16
 80189de:	af00      	add	r7, sp, #0
 80189e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80189e2:	2300      	movs	r3, #0
 80189e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80189e6:	2300      	movs	r3, #0
 80189e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80189f0:	4618      	mov	r0, r3
 80189f2:	f7ed fb7e 	bl	80060f2 <HAL_HCD_ResetPort>
 80189f6:	4603      	mov	r3, r0
 80189f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80189fa:	7bfb      	ldrb	r3, [r7, #15]
 80189fc:	4618      	mov	r0, r3
 80189fe:	f000 f92f 	bl	8018c60 <USBH_Get_USB_Status>
 8018a02:	4603      	mov	r3, r0
 8018a04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018a06:	7bbb      	ldrb	r3, [r7, #14]
}
 8018a08:	4618      	mov	r0, r3
 8018a0a:	3710      	adds	r7, #16
 8018a0c:	46bd      	mov	sp, r7
 8018a0e:	bd80      	pop	{r7, pc}

08018a10 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b082      	sub	sp, #8
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
 8018a18:	460b      	mov	r3, r1
 8018a1a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018a22:	78fa      	ldrb	r2, [r7, #3]
 8018a24:	4611      	mov	r1, r2
 8018a26:	4618      	mov	r0, r3
 8018a28:	f7ed fb85 	bl	8006136 <HAL_HCD_HC_GetXferCount>
 8018a2c:	4603      	mov	r3, r0
}
 8018a2e:	4618      	mov	r0, r3
 8018a30:	3708      	adds	r7, #8
 8018a32:	46bd      	mov	sp, r7
 8018a34:	bd80      	pop	{r7, pc}

08018a36 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8018a36:	b590      	push	{r4, r7, lr}
 8018a38:	b089      	sub	sp, #36	; 0x24
 8018a3a:	af04      	add	r7, sp, #16
 8018a3c:	6078      	str	r0, [r7, #4]
 8018a3e:	4608      	mov	r0, r1
 8018a40:	4611      	mov	r1, r2
 8018a42:	461a      	mov	r2, r3
 8018a44:	4603      	mov	r3, r0
 8018a46:	70fb      	strb	r3, [r7, #3]
 8018a48:	460b      	mov	r3, r1
 8018a4a:	70bb      	strb	r3, [r7, #2]
 8018a4c:	4613      	mov	r3, r2
 8018a4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a50:	2300      	movs	r3, #0
 8018a52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018a54:	2300      	movs	r3, #0
 8018a56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8018a5e:	787c      	ldrb	r4, [r7, #1]
 8018a60:	78ba      	ldrb	r2, [r7, #2]
 8018a62:	78f9      	ldrb	r1, [r7, #3]
 8018a64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018a66:	9302      	str	r3, [sp, #8]
 8018a68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018a6c:	9301      	str	r3, [sp, #4]
 8018a6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018a72:	9300      	str	r3, [sp, #0]
 8018a74:	4623      	mov	r3, r4
 8018a76:	f7ec ffe8 	bl	8005a4a <HAL_HCD_HC_Init>
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8018a7e:	7bfb      	ldrb	r3, [r7, #15]
 8018a80:	4618      	mov	r0, r3
 8018a82:	f000 f8ed 	bl	8018c60 <USBH_Get_USB_Status>
 8018a86:	4603      	mov	r3, r0
 8018a88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018a8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8018a8c:	4618      	mov	r0, r3
 8018a8e:	3714      	adds	r7, #20
 8018a90:	46bd      	mov	sp, r7
 8018a92:	bd90      	pop	{r4, r7, pc}

08018a94 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b084      	sub	sp, #16
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
 8018a9c:	460b      	mov	r3, r1
 8018a9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018aa4:	2300      	movs	r3, #0
 8018aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018aae:	78fa      	ldrb	r2, [r7, #3]
 8018ab0:	4611      	mov	r1, r2
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	f7ed f858 	bl	8005b68 <HAL_HCD_HC_Halt>
 8018ab8:	4603      	mov	r3, r0
 8018aba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018abc:	7bfb      	ldrb	r3, [r7, #15]
 8018abe:	4618      	mov	r0, r3
 8018ac0:	f000 f8ce 	bl	8018c60 <USBH_Get_USB_Status>
 8018ac4:	4603      	mov	r3, r0
 8018ac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ac8:	7bbb      	ldrb	r3, [r7, #14]
}
 8018aca:	4618      	mov	r0, r3
 8018acc:	3710      	adds	r7, #16
 8018ace:	46bd      	mov	sp, r7
 8018ad0:	bd80      	pop	{r7, pc}

08018ad2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8018ad2:	b590      	push	{r4, r7, lr}
 8018ad4:	b089      	sub	sp, #36	; 0x24
 8018ad6:	af04      	add	r7, sp, #16
 8018ad8:	6078      	str	r0, [r7, #4]
 8018ada:	4608      	mov	r0, r1
 8018adc:	4611      	mov	r1, r2
 8018ade:	461a      	mov	r2, r3
 8018ae0:	4603      	mov	r3, r0
 8018ae2:	70fb      	strb	r3, [r7, #3]
 8018ae4:	460b      	mov	r3, r1
 8018ae6:	70bb      	strb	r3, [r7, #2]
 8018ae8:	4613      	mov	r3, r2
 8018aea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018aec:	2300      	movs	r3, #0
 8018aee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018af0:	2300      	movs	r3, #0
 8018af2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8018afa:	787c      	ldrb	r4, [r7, #1]
 8018afc:	78ba      	ldrb	r2, [r7, #2]
 8018afe:	78f9      	ldrb	r1, [r7, #3]
 8018b00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018b04:	9303      	str	r3, [sp, #12]
 8018b06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018b08:	9302      	str	r3, [sp, #8]
 8018b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b0c:	9301      	str	r3, [sp, #4]
 8018b0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018b12:	9300      	str	r3, [sp, #0]
 8018b14:	4623      	mov	r3, r4
 8018b16:	f7ed f84b 	bl	8005bb0 <HAL_HCD_HC_SubmitRequest>
 8018b1a:	4603      	mov	r3, r0
 8018b1c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8018b1e:	7bfb      	ldrb	r3, [r7, #15]
 8018b20:	4618      	mov	r0, r3
 8018b22:	f000 f89d 	bl	8018c60 <USBH_Get_USB_Status>
 8018b26:	4603      	mov	r3, r0
 8018b28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018b2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	3714      	adds	r7, #20
 8018b30:	46bd      	mov	sp, r7
 8018b32:	bd90      	pop	{r4, r7, pc}

08018b34 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b082      	sub	sp, #8
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
 8018b3c:	460b      	mov	r3, r1
 8018b3e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018b46:	78fa      	ldrb	r2, [r7, #3]
 8018b48:	4611      	mov	r1, r2
 8018b4a:	4618      	mov	r0, r3
 8018b4c:	f7ed fadf 	bl	800610e <HAL_HCD_HC_GetURBState>
 8018b50:	4603      	mov	r3, r0
}
 8018b52:	4618      	mov	r0, r3
 8018b54:	3708      	adds	r7, #8
 8018b56:	46bd      	mov	sp, r7
 8018b58:	bd80      	pop	{r7, pc}

08018b5a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8018b5a:	b580      	push	{r7, lr}
 8018b5c:	b082      	sub	sp, #8
 8018b5e:	af00      	add	r7, sp, #0
 8018b60:	6078      	str	r0, [r7, #4]
 8018b62:	460b      	mov	r3, r1
 8018b64:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8018b6c:	2b01      	cmp	r3, #1
 8018b6e:	d103      	bne.n	8018b78 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8018b70:	78fb      	ldrb	r3, [r7, #3]
 8018b72:	4618      	mov	r0, r3
 8018b74:	f000 f8a0 	bl	8018cb8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8018b78:	20c8      	movs	r0, #200	; 0xc8
 8018b7a:	f7e9 f993 	bl	8001ea4 <HAL_Delay>
  return USBH_OK;
 8018b7e:	2300      	movs	r3, #0
}
 8018b80:	4618      	mov	r0, r3
 8018b82:	3708      	adds	r7, #8
 8018b84:	46bd      	mov	sp, r7
 8018b86:	bd80      	pop	{r7, pc}

08018b88 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8018b88:	b480      	push	{r7}
 8018b8a:	b085      	sub	sp, #20
 8018b8c:	af00      	add	r7, sp, #0
 8018b8e:	6078      	str	r0, [r7, #4]
 8018b90:	460b      	mov	r3, r1
 8018b92:	70fb      	strb	r3, [r7, #3]
 8018b94:	4613      	mov	r3, r2
 8018b96:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018b9e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8018ba0:	78fb      	ldrb	r3, [r7, #3]
 8018ba2:	68fa      	ldr	r2, [r7, #12]
 8018ba4:	212c      	movs	r1, #44	; 0x2c
 8018ba6:	fb01 f303 	mul.w	r3, r1, r3
 8018baa:	4413      	add	r3, r2
 8018bac:	333b      	adds	r3, #59	; 0x3b
 8018bae:	781b      	ldrb	r3, [r3, #0]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d009      	beq.n	8018bc8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8018bb4:	78fb      	ldrb	r3, [r7, #3]
 8018bb6:	68fa      	ldr	r2, [r7, #12]
 8018bb8:	212c      	movs	r1, #44	; 0x2c
 8018bba:	fb01 f303 	mul.w	r3, r1, r3
 8018bbe:	4413      	add	r3, r2
 8018bc0:	3354      	adds	r3, #84	; 0x54
 8018bc2:	78ba      	ldrb	r2, [r7, #2]
 8018bc4:	701a      	strb	r2, [r3, #0]
 8018bc6:	e008      	b.n	8018bda <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8018bc8:	78fb      	ldrb	r3, [r7, #3]
 8018bca:	68fa      	ldr	r2, [r7, #12]
 8018bcc:	212c      	movs	r1, #44	; 0x2c
 8018bce:	fb01 f303 	mul.w	r3, r1, r3
 8018bd2:	4413      	add	r3, r2
 8018bd4:	3355      	adds	r3, #85	; 0x55
 8018bd6:	78ba      	ldrb	r2, [r7, #2]
 8018bd8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8018bda:	2300      	movs	r3, #0
}
 8018bdc:	4618      	mov	r0, r3
 8018bde:	3714      	adds	r7, #20
 8018be0:	46bd      	mov	sp, r7
 8018be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018be6:	4770      	bx	lr

08018be8 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018be8:	b480      	push	{r7}
 8018bea:	b085      	sub	sp, #20
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	6078      	str	r0, [r7, #4]
 8018bf0:	460b      	mov	r3, r1
 8018bf2:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8018bf4:	2300      	movs	r3, #0
 8018bf6:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018bfe:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8018c00:	78fb      	ldrb	r3, [r7, #3]
 8018c02:	68ba      	ldr	r2, [r7, #8]
 8018c04:	212c      	movs	r1, #44	; 0x2c
 8018c06:	fb01 f303 	mul.w	r3, r1, r3
 8018c0a:	4413      	add	r3, r2
 8018c0c:	333b      	adds	r3, #59	; 0x3b
 8018c0e:	781b      	ldrb	r3, [r3, #0]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d009      	beq.n	8018c28 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8018c14:	78fb      	ldrb	r3, [r7, #3]
 8018c16:	68ba      	ldr	r2, [r7, #8]
 8018c18:	212c      	movs	r1, #44	; 0x2c
 8018c1a:	fb01 f303 	mul.w	r3, r1, r3
 8018c1e:	4413      	add	r3, r2
 8018c20:	3354      	adds	r3, #84	; 0x54
 8018c22:	781b      	ldrb	r3, [r3, #0]
 8018c24:	73fb      	strb	r3, [r7, #15]
 8018c26:	e008      	b.n	8018c3a <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8018c28:	78fb      	ldrb	r3, [r7, #3]
 8018c2a:	68ba      	ldr	r2, [r7, #8]
 8018c2c:	212c      	movs	r1, #44	; 0x2c
 8018c2e:	fb01 f303 	mul.w	r3, r1, r3
 8018c32:	4413      	add	r3, r2
 8018c34:	3355      	adds	r3, #85	; 0x55
 8018c36:	781b      	ldrb	r3, [r3, #0]
 8018c38:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8018c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	3714      	adds	r7, #20
 8018c40:	46bd      	mov	sp, r7
 8018c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c46:	4770      	bx	lr

08018c48 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b082      	sub	sp, #8
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8018c50:	6878      	ldr	r0, [r7, #4]
 8018c52:	f7e9 f927 	bl	8001ea4 <HAL_Delay>
}
 8018c56:	bf00      	nop
 8018c58:	3708      	adds	r7, #8
 8018c5a:	46bd      	mov	sp, r7
 8018c5c:	bd80      	pop	{r7, pc}
	...

08018c60 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018c60:	b480      	push	{r7}
 8018c62:	b085      	sub	sp, #20
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	4603      	mov	r3, r0
 8018c68:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018c6e:	79fb      	ldrb	r3, [r7, #7]
 8018c70:	2b03      	cmp	r3, #3
 8018c72:	d817      	bhi.n	8018ca4 <USBH_Get_USB_Status+0x44>
 8018c74:	a201      	add	r2, pc, #4	; (adr r2, 8018c7c <USBH_Get_USB_Status+0x1c>)
 8018c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c7a:	bf00      	nop
 8018c7c:	08018c8d 	.word	0x08018c8d
 8018c80:	08018c93 	.word	0x08018c93
 8018c84:	08018c99 	.word	0x08018c99
 8018c88:	08018c9f 	.word	0x08018c9f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8018c8c:	2300      	movs	r3, #0
 8018c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8018c90:	e00b      	b.n	8018caa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8018c92:	2302      	movs	r3, #2
 8018c94:	73fb      	strb	r3, [r7, #15]
    break;
 8018c96:	e008      	b.n	8018caa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8018c98:	2301      	movs	r3, #1
 8018c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8018c9c:	e005      	b.n	8018caa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8018c9e:	2302      	movs	r3, #2
 8018ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8018ca2:	e002      	b.n	8018caa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8018ca4:	2302      	movs	r3, #2
 8018ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8018ca8:	bf00      	nop
  }
  return usb_status;
 8018caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8018cac:	4618      	mov	r0, r3
 8018cae:	3714      	adds	r7, #20
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cb6:	4770      	bx	lr

08018cb8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	b084      	sub	sp, #16
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8018cc2:	79fb      	ldrb	r3, [r7, #7]
 8018cc4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8018cc6:	79fb      	ldrb	r3, [r7, #7]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d102      	bne.n	8018cd2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8018ccc:	2300      	movs	r3, #0
 8018cce:	73fb      	strb	r3, [r7, #15]
 8018cd0:	e001      	b.n	8018cd6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8018cd2:	2301      	movs	r3, #1
 8018cd4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,(GPIO_PinState)data);
 8018cd6:	7bfb      	ldrb	r3, [r7, #15]
 8018cd8:	461a      	mov	r2, r3
 8018cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8018cde:	4803      	ldr	r0, [pc, #12]	; (8018cec <MX_DriverVbusFS+0x34>)
 8018ce0:	f7ec fe38 	bl	8005954 <HAL_GPIO_WritePin>
}
 8018ce4:	bf00      	nop
 8018ce6:	3710      	adds	r7, #16
 8018ce8:	46bd      	mov	sp, r7
 8018cea:	bd80      	pop	{r7, pc}
 8018cec:	40020400 	.word	0x40020400

08018cf0 <__libc_init_array>:
 8018cf0:	b570      	push	{r4, r5, r6, lr}
 8018cf2:	4d0d      	ldr	r5, [pc, #52]	; (8018d28 <__libc_init_array+0x38>)
 8018cf4:	4c0d      	ldr	r4, [pc, #52]	; (8018d2c <__libc_init_array+0x3c>)
 8018cf6:	1b64      	subs	r4, r4, r5
 8018cf8:	10a4      	asrs	r4, r4, #2
 8018cfa:	2600      	movs	r6, #0
 8018cfc:	42a6      	cmp	r6, r4
 8018cfe:	d109      	bne.n	8018d14 <__libc_init_array+0x24>
 8018d00:	4d0b      	ldr	r5, [pc, #44]	; (8018d30 <__libc_init_array+0x40>)
 8018d02:	4c0c      	ldr	r4, [pc, #48]	; (8018d34 <__libc_init_array+0x44>)
 8018d04:	f001 f8bc 	bl	8019e80 <_init>
 8018d08:	1b64      	subs	r4, r4, r5
 8018d0a:	10a4      	asrs	r4, r4, #2
 8018d0c:	2600      	movs	r6, #0
 8018d0e:	42a6      	cmp	r6, r4
 8018d10:	d105      	bne.n	8018d1e <__libc_init_array+0x2e>
 8018d12:	bd70      	pop	{r4, r5, r6, pc}
 8018d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8018d18:	4798      	blx	r3
 8018d1a:	3601      	adds	r6, #1
 8018d1c:	e7ee      	b.n	8018cfc <__libc_init_array+0xc>
 8018d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018d22:	4798      	blx	r3
 8018d24:	3601      	adds	r6, #1
 8018d26:	e7f2      	b.n	8018d0e <__libc_init_array+0x1e>
 8018d28:	0801d36c 	.word	0x0801d36c
 8018d2c:	0801d36c 	.word	0x0801d36c
 8018d30:	0801d36c 	.word	0x0801d36c
 8018d34:	0801d370 	.word	0x0801d370

08018d38 <malloc>:
 8018d38:	4b02      	ldr	r3, [pc, #8]	; (8018d44 <malloc+0xc>)
 8018d3a:	4601      	mov	r1, r0
 8018d3c:	6818      	ldr	r0, [r3, #0]
 8018d3e:	f000 b87f 	b.w	8018e40 <_malloc_r>
 8018d42:	bf00      	nop
 8018d44:	200005b8 	.word	0x200005b8

08018d48 <free>:
 8018d48:	4b02      	ldr	r3, [pc, #8]	; (8018d54 <free+0xc>)
 8018d4a:	4601      	mov	r1, r0
 8018d4c:	6818      	ldr	r0, [r3, #0]
 8018d4e:	f000 b827 	b.w	8018da0 <_free_r>
 8018d52:	bf00      	nop
 8018d54:	200005b8 	.word	0x200005b8

08018d58 <memcmp>:
 8018d58:	b530      	push	{r4, r5, lr}
 8018d5a:	3901      	subs	r1, #1
 8018d5c:	2400      	movs	r4, #0
 8018d5e:	42a2      	cmp	r2, r4
 8018d60:	d101      	bne.n	8018d66 <memcmp+0xe>
 8018d62:	2000      	movs	r0, #0
 8018d64:	e005      	b.n	8018d72 <memcmp+0x1a>
 8018d66:	5d03      	ldrb	r3, [r0, r4]
 8018d68:	3401      	adds	r4, #1
 8018d6a:	5d0d      	ldrb	r5, [r1, r4]
 8018d6c:	42ab      	cmp	r3, r5
 8018d6e:	d0f6      	beq.n	8018d5e <memcmp+0x6>
 8018d70:	1b58      	subs	r0, r3, r5
 8018d72:	bd30      	pop	{r4, r5, pc}

08018d74 <memcpy>:
 8018d74:	440a      	add	r2, r1
 8018d76:	4291      	cmp	r1, r2
 8018d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8018d7c:	d100      	bne.n	8018d80 <memcpy+0xc>
 8018d7e:	4770      	bx	lr
 8018d80:	b510      	push	{r4, lr}
 8018d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018d86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018d8a:	4291      	cmp	r1, r2
 8018d8c:	d1f9      	bne.n	8018d82 <memcpy+0xe>
 8018d8e:	bd10      	pop	{r4, pc}

08018d90 <memset>:
 8018d90:	4402      	add	r2, r0
 8018d92:	4603      	mov	r3, r0
 8018d94:	4293      	cmp	r3, r2
 8018d96:	d100      	bne.n	8018d9a <memset+0xa>
 8018d98:	4770      	bx	lr
 8018d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8018d9e:	e7f9      	b.n	8018d94 <memset+0x4>

08018da0 <_free_r>:
 8018da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018da2:	2900      	cmp	r1, #0
 8018da4:	d048      	beq.n	8018e38 <_free_r+0x98>
 8018da6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018daa:	9001      	str	r0, [sp, #4]
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	f1a1 0404 	sub.w	r4, r1, #4
 8018db2:	bfb8      	it	lt
 8018db4:	18e4      	addlt	r4, r4, r3
 8018db6:	f000 fc29 	bl	801960c <__malloc_lock>
 8018dba:	4a20      	ldr	r2, [pc, #128]	; (8018e3c <_free_r+0x9c>)
 8018dbc:	9801      	ldr	r0, [sp, #4]
 8018dbe:	6813      	ldr	r3, [r2, #0]
 8018dc0:	4615      	mov	r5, r2
 8018dc2:	b933      	cbnz	r3, 8018dd2 <_free_r+0x32>
 8018dc4:	6063      	str	r3, [r4, #4]
 8018dc6:	6014      	str	r4, [r2, #0]
 8018dc8:	b003      	add	sp, #12
 8018dca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018dce:	f000 bc23 	b.w	8019618 <__malloc_unlock>
 8018dd2:	42a3      	cmp	r3, r4
 8018dd4:	d90b      	bls.n	8018dee <_free_r+0x4e>
 8018dd6:	6821      	ldr	r1, [r4, #0]
 8018dd8:	1862      	adds	r2, r4, r1
 8018dda:	4293      	cmp	r3, r2
 8018ddc:	bf04      	itt	eq
 8018dde:	681a      	ldreq	r2, [r3, #0]
 8018de0:	685b      	ldreq	r3, [r3, #4]
 8018de2:	6063      	str	r3, [r4, #4]
 8018de4:	bf04      	itt	eq
 8018de6:	1852      	addeq	r2, r2, r1
 8018de8:	6022      	streq	r2, [r4, #0]
 8018dea:	602c      	str	r4, [r5, #0]
 8018dec:	e7ec      	b.n	8018dc8 <_free_r+0x28>
 8018dee:	461a      	mov	r2, r3
 8018df0:	685b      	ldr	r3, [r3, #4]
 8018df2:	b10b      	cbz	r3, 8018df8 <_free_r+0x58>
 8018df4:	42a3      	cmp	r3, r4
 8018df6:	d9fa      	bls.n	8018dee <_free_r+0x4e>
 8018df8:	6811      	ldr	r1, [r2, #0]
 8018dfa:	1855      	adds	r5, r2, r1
 8018dfc:	42a5      	cmp	r5, r4
 8018dfe:	d10b      	bne.n	8018e18 <_free_r+0x78>
 8018e00:	6824      	ldr	r4, [r4, #0]
 8018e02:	4421      	add	r1, r4
 8018e04:	1854      	adds	r4, r2, r1
 8018e06:	42a3      	cmp	r3, r4
 8018e08:	6011      	str	r1, [r2, #0]
 8018e0a:	d1dd      	bne.n	8018dc8 <_free_r+0x28>
 8018e0c:	681c      	ldr	r4, [r3, #0]
 8018e0e:	685b      	ldr	r3, [r3, #4]
 8018e10:	6053      	str	r3, [r2, #4]
 8018e12:	4421      	add	r1, r4
 8018e14:	6011      	str	r1, [r2, #0]
 8018e16:	e7d7      	b.n	8018dc8 <_free_r+0x28>
 8018e18:	d902      	bls.n	8018e20 <_free_r+0x80>
 8018e1a:	230c      	movs	r3, #12
 8018e1c:	6003      	str	r3, [r0, #0]
 8018e1e:	e7d3      	b.n	8018dc8 <_free_r+0x28>
 8018e20:	6825      	ldr	r5, [r4, #0]
 8018e22:	1961      	adds	r1, r4, r5
 8018e24:	428b      	cmp	r3, r1
 8018e26:	bf04      	itt	eq
 8018e28:	6819      	ldreq	r1, [r3, #0]
 8018e2a:	685b      	ldreq	r3, [r3, #4]
 8018e2c:	6063      	str	r3, [r4, #4]
 8018e2e:	bf04      	itt	eq
 8018e30:	1949      	addeq	r1, r1, r5
 8018e32:	6021      	streq	r1, [r4, #0]
 8018e34:	6054      	str	r4, [r2, #4]
 8018e36:	e7c7      	b.n	8018dc8 <_free_r+0x28>
 8018e38:	b003      	add	sp, #12
 8018e3a:	bd30      	pop	{r4, r5, pc}
 8018e3c:	200007e4 	.word	0x200007e4

08018e40 <_malloc_r>:
 8018e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e42:	1ccd      	adds	r5, r1, #3
 8018e44:	f025 0503 	bic.w	r5, r5, #3
 8018e48:	3508      	adds	r5, #8
 8018e4a:	2d0c      	cmp	r5, #12
 8018e4c:	bf38      	it	cc
 8018e4e:	250c      	movcc	r5, #12
 8018e50:	2d00      	cmp	r5, #0
 8018e52:	4606      	mov	r6, r0
 8018e54:	db01      	blt.n	8018e5a <_malloc_r+0x1a>
 8018e56:	42a9      	cmp	r1, r5
 8018e58:	d903      	bls.n	8018e62 <_malloc_r+0x22>
 8018e5a:	230c      	movs	r3, #12
 8018e5c:	6033      	str	r3, [r6, #0]
 8018e5e:	2000      	movs	r0, #0
 8018e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e62:	f000 fbd3 	bl	801960c <__malloc_lock>
 8018e66:	4921      	ldr	r1, [pc, #132]	; (8018eec <_malloc_r+0xac>)
 8018e68:	680a      	ldr	r2, [r1, #0]
 8018e6a:	4614      	mov	r4, r2
 8018e6c:	b99c      	cbnz	r4, 8018e96 <_malloc_r+0x56>
 8018e6e:	4f20      	ldr	r7, [pc, #128]	; (8018ef0 <_malloc_r+0xb0>)
 8018e70:	683b      	ldr	r3, [r7, #0]
 8018e72:	b923      	cbnz	r3, 8018e7e <_malloc_r+0x3e>
 8018e74:	4621      	mov	r1, r4
 8018e76:	4630      	mov	r0, r6
 8018e78:	f000 f8aa 	bl	8018fd0 <_sbrk_r>
 8018e7c:	6038      	str	r0, [r7, #0]
 8018e7e:	4629      	mov	r1, r5
 8018e80:	4630      	mov	r0, r6
 8018e82:	f000 f8a5 	bl	8018fd0 <_sbrk_r>
 8018e86:	1c43      	adds	r3, r0, #1
 8018e88:	d123      	bne.n	8018ed2 <_malloc_r+0x92>
 8018e8a:	230c      	movs	r3, #12
 8018e8c:	6033      	str	r3, [r6, #0]
 8018e8e:	4630      	mov	r0, r6
 8018e90:	f000 fbc2 	bl	8019618 <__malloc_unlock>
 8018e94:	e7e3      	b.n	8018e5e <_malloc_r+0x1e>
 8018e96:	6823      	ldr	r3, [r4, #0]
 8018e98:	1b5b      	subs	r3, r3, r5
 8018e9a:	d417      	bmi.n	8018ecc <_malloc_r+0x8c>
 8018e9c:	2b0b      	cmp	r3, #11
 8018e9e:	d903      	bls.n	8018ea8 <_malloc_r+0x68>
 8018ea0:	6023      	str	r3, [r4, #0]
 8018ea2:	441c      	add	r4, r3
 8018ea4:	6025      	str	r5, [r4, #0]
 8018ea6:	e004      	b.n	8018eb2 <_malloc_r+0x72>
 8018ea8:	6863      	ldr	r3, [r4, #4]
 8018eaa:	42a2      	cmp	r2, r4
 8018eac:	bf0c      	ite	eq
 8018eae:	600b      	streq	r3, [r1, #0]
 8018eb0:	6053      	strne	r3, [r2, #4]
 8018eb2:	4630      	mov	r0, r6
 8018eb4:	f000 fbb0 	bl	8019618 <__malloc_unlock>
 8018eb8:	f104 000b 	add.w	r0, r4, #11
 8018ebc:	1d23      	adds	r3, r4, #4
 8018ebe:	f020 0007 	bic.w	r0, r0, #7
 8018ec2:	1ac2      	subs	r2, r0, r3
 8018ec4:	d0cc      	beq.n	8018e60 <_malloc_r+0x20>
 8018ec6:	1a1b      	subs	r3, r3, r0
 8018ec8:	50a3      	str	r3, [r4, r2]
 8018eca:	e7c9      	b.n	8018e60 <_malloc_r+0x20>
 8018ecc:	4622      	mov	r2, r4
 8018ece:	6864      	ldr	r4, [r4, #4]
 8018ed0:	e7cc      	b.n	8018e6c <_malloc_r+0x2c>
 8018ed2:	1cc4      	adds	r4, r0, #3
 8018ed4:	f024 0403 	bic.w	r4, r4, #3
 8018ed8:	42a0      	cmp	r0, r4
 8018eda:	d0e3      	beq.n	8018ea4 <_malloc_r+0x64>
 8018edc:	1a21      	subs	r1, r4, r0
 8018ede:	4630      	mov	r0, r6
 8018ee0:	f000 f876 	bl	8018fd0 <_sbrk_r>
 8018ee4:	3001      	adds	r0, #1
 8018ee6:	d1dd      	bne.n	8018ea4 <_malloc_r+0x64>
 8018ee8:	e7cf      	b.n	8018e8a <_malloc_r+0x4a>
 8018eea:	bf00      	nop
 8018eec:	200007e4 	.word	0x200007e4
 8018ef0:	200007e8 	.word	0x200007e8

08018ef4 <iprintf>:
 8018ef4:	b40f      	push	{r0, r1, r2, r3}
 8018ef6:	4b0a      	ldr	r3, [pc, #40]	; (8018f20 <iprintf+0x2c>)
 8018ef8:	b513      	push	{r0, r1, r4, lr}
 8018efa:	681c      	ldr	r4, [r3, #0]
 8018efc:	b124      	cbz	r4, 8018f08 <iprintf+0x14>
 8018efe:	69a3      	ldr	r3, [r4, #24]
 8018f00:	b913      	cbnz	r3, 8018f08 <iprintf+0x14>
 8018f02:	4620      	mov	r0, r4
 8018f04:	f000 fa6c 	bl	80193e0 <__sinit>
 8018f08:	ab05      	add	r3, sp, #20
 8018f0a:	9a04      	ldr	r2, [sp, #16]
 8018f0c:	68a1      	ldr	r1, [r4, #8]
 8018f0e:	9301      	str	r3, [sp, #4]
 8018f10:	4620      	mov	r0, r4
 8018f12:	f000 fbb1 	bl	8019678 <_vfiprintf_r>
 8018f16:	b002      	add	sp, #8
 8018f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f1c:	b004      	add	sp, #16
 8018f1e:	4770      	bx	lr
 8018f20:	200005b8 	.word	0x200005b8

08018f24 <putchar>:
 8018f24:	4b09      	ldr	r3, [pc, #36]	; (8018f4c <putchar+0x28>)
 8018f26:	b513      	push	{r0, r1, r4, lr}
 8018f28:	681c      	ldr	r4, [r3, #0]
 8018f2a:	4601      	mov	r1, r0
 8018f2c:	b134      	cbz	r4, 8018f3c <putchar+0x18>
 8018f2e:	69a3      	ldr	r3, [r4, #24]
 8018f30:	b923      	cbnz	r3, 8018f3c <putchar+0x18>
 8018f32:	9001      	str	r0, [sp, #4]
 8018f34:	4620      	mov	r0, r4
 8018f36:	f000 fa53 	bl	80193e0 <__sinit>
 8018f3a:	9901      	ldr	r1, [sp, #4]
 8018f3c:	68a2      	ldr	r2, [r4, #8]
 8018f3e:	4620      	mov	r0, r4
 8018f40:	b002      	add	sp, #8
 8018f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f46:	f000 be5b 	b.w	8019c00 <_putc_r>
 8018f4a:	bf00      	nop
 8018f4c:	200005b8 	.word	0x200005b8

08018f50 <rand>:
 8018f50:	4b17      	ldr	r3, [pc, #92]	; (8018fb0 <rand+0x60>)
 8018f52:	b510      	push	{r4, lr}
 8018f54:	681c      	ldr	r4, [r3, #0]
 8018f56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018f58:	b9b3      	cbnz	r3, 8018f88 <rand+0x38>
 8018f5a:	2018      	movs	r0, #24
 8018f5c:	f7ff feec 	bl	8018d38 <malloc>
 8018f60:	63a0      	str	r0, [r4, #56]	; 0x38
 8018f62:	b928      	cbnz	r0, 8018f70 <rand+0x20>
 8018f64:	4602      	mov	r2, r0
 8018f66:	4b13      	ldr	r3, [pc, #76]	; (8018fb4 <rand+0x64>)
 8018f68:	4813      	ldr	r0, [pc, #76]	; (8018fb8 <rand+0x68>)
 8018f6a:	214e      	movs	r1, #78	; 0x4e
 8018f6c:	f000 f900 	bl	8019170 <__assert_func>
 8018f70:	4a12      	ldr	r2, [pc, #72]	; (8018fbc <rand+0x6c>)
 8018f72:	4b13      	ldr	r3, [pc, #76]	; (8018fc0 <rand+0x70>)
 8018f74:	e9c0 2300 	strd	r2, r3, [r0]
 8018f78:	4b12      	ldr	r3, [pc, #72]	; (8018fc4 <rand+0x74>)
 8018f7a:	6083      	str	r3, [r0, #8]
 8018f7c:	230b      	movs	r3, #11
 8018f7e:	8183      	strh	r3, [r0, #12]
 8018f80:	2201      	movs	r2, #1
 8018f82:	2300      	movs	r3, #0
 8018f84:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018f88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018f8a:	480f      	ldr	r0, [pc, #60]	; (8018fc8 <rand+0x78>)
 8018f8c:	690a      	ldr	r2, [r1, #16]
 8018f8e:	694b      	ldr	r3, [r1, #20]
 8018f90:	4c0e      	ldr	r4, [pc, #56]	; (8018fcc <rand+0x7c>)
 8018f92:	4350      	muls	r0, r2
 8018f94:	fb04 0003 	mla	r0, r4, r3, r0
 8018f98:	fba2 3404 	umull	r3, r4, r2, r4
 8018f9c:	1c5a      	adds	r2, r3, #1
 8018f9e:	4404      	add	r4, r0
 8018fa0:	f144 0000 	adc.w	r0, r4, #0
 8018fa4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8018fa8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018fac:	bd10      	pop	{r4, pc}
 8018fae:	bf00      	nop
 8018fb0:	200005b8 	.word	0x200005b8
 8018fb4:	0801d21c 	.word	0x0801d21c
 8018fb8:	0801d233 	.word	0x0801d233
 8018fbc:	abcd330e 	.word	0xabcd330e
 8018fc0:	e66d1234 	.word	0xe66d1234
 8018fc4:	0005deec 	.word	0x0005deec
 8018fc8:	5851f42d 	.word	0x5851f42d
 8018fcc:	4c957f2d 	.word	0x4c957f2d

08018fd0 <_sbrk_r>:
 8018fd0:	b538      	push	{r3, r4, r5, lr}
 8018fd2:	4d06      	ldr	r5, [pc, #24]	; (8018fec <_sbrk_r+0x1c>)
 8018fd4:	2300      	movs	r3, #0
 8018fd6:	4604      	mov	r4, r0
 8018fd8:	4608      	mov	r0, r1
 8018fda:	602b      	str	r3, [r5, #0]
 8018fdc:	f7e8 fbde 	bl	800179c <_sbrk>
 8018fe0:	1c43      	adds	r3, r0, #1
 8018fe2:	d102      	bne.n	8018fea <_sbrk_r+0x1a>
 8018fe4:	682b      	ldr	r3, [r5, #0]
 8018fe6:	b103      	cbz	r3, 8018fea <_sbrk_r+0x1a>
 8018fe8:	6023      	str	r3, [r4, #0]
 8018fea:	bd38      	pop	{r3, r4, r5, pc}
 8018fec:	20018e94 	.word	0x20018e94

08018ff0 <__swbuf_r>:
 8018ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ff2:	460e      	mov	r6, r1
 8018ff4:	4614      	mov	r4, r2
 8018ff6:	4605      	mov	r5, r0
 8018ff8:	b118      	cbz	r0, 8019002 <__swbuf_r+0x12>
 8018ffa:	6983      	ldr	r3, [r0, #24]
 8018ffc:	b90b      	cbnz	r3, 8019002 <__swbuf_r+0x12>
 8018ffe:	f000 f9ef 	bl	80193e0 <__sinit>
 8019002:	4b21      	ldr	r3, [pc, #132]	; (8019088 <__swbuf_r+0x98>)
 8019004:	429c      	cmp	r4, r3
 8019006:	d12b      	bne.n	8019060 <__swbuf_r+0x70>
 8019008:	686c      	ldr	r4, [r5, #4]
 801900a:	69a3      	ldr	r3, [r4, #24]
 801900c:	60a3      	str	r3, [r4, #8]
 801900e:	89a3      	ldrh	r3, [r4, #12]
 8019010:	071a      	lsls	r2, r3, #28
 8019012:	d52f      	bpl.n	8019074 <__swbuf_r+0x84>
 8019014:	6923      	ldr	r3, [r4, #16]
 8019016:	b36b      	cbz	r3, 8019074 <__swbuf_r+0x84>
 8019018:	6923      	ldr	r3, [r4, #16]
 801901a:	6820      	ldr	r0, [r4, #0]
 801901c:	1ac0      	subs	r0, r0, r3
 801901e:	6963      	ldr	r3, [r4, #20]
 8019020:	b2f6      	uxtb	r6, r6
 8019022:	4283      	cmp	r3, r0
 8019024:	4637      	mov	r7, r6
 8019026:	dc04      	bgt.n	8019032 <__swbuf_r+0x42>
 8019028:	4621      	mov	r1, r4
 801902a:	4628      	mov	r0, r5
 801902c:	f000 f944 	bl	80192b8 <_fflush_r>
 8019030:	bb30      	cbnz	r0, 8019080 <__swbuf_r+0x90>
 8019032:	68a3      	ldr	r3, [r4, #8]
 8019034:	3b01      	subs	r3, #1
 8019036:	60a3      	str	r3, [r4, #8]
 8019038:	6823      	ldr	r3, [r4, #0]
 801903a:	1c5a      	adds	r2, r3, #1
 801903c:	6022      	str	r2, [r4, #0]
 801903e:	701e      	strb	r6, [r3, #0]
 8019040:	6963      	ldr	r3, [r4, #20]
 8019042:	3001      	adds	r0, #1
 8019044:	4283      	cmp	r3, r0
 8019046:	d004      	beq.n	8019052 <__swbuf_r+0x62>
 8019048:	89a3      	ldrh	r3, [r4, #12]
 801904a:	07db      	lsls	r3, r3, #31
 801904c:	d506      	bpl.n	801905c <__swbuf_r+0x6c>
 801904e:	2e0a      	cmp	r6, #10
 8019050:	d104      	bne.n	801905c <__swbuf_r+0x6c>
 8019052:	4621      	mov	r1, r4
 8019054:	4628      	mov	r0, r5
 8019056:	f000 f92f 	bl	80192b8 <_fflush_r>
 801905a:	b988      	cbnz	r0, 8019080 <__swbuf_r+0x90>
 801905c:	4638      	mov	r0, r7
 801905e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019060:	4b0a      	ldr	r3, [pc, #40]	; (801908c <__swbuf_r+0x9c>)
 8019062:	429c      	cmp	r4, r3
 8019064:	d101      	bne.n	801906a <__swbuf_r+0x7a>
 8019066:	68ac      	ldr	r4, [r5, #8]
 8019068:	e7cf      	b.n	801900a <__swbuf_r+0x1a>
 801906a:	4b09      	ldr	r3, [pc, #36]	; (8019090 <__swbuf_r+0xa0>)
 801906c:	429c      	cmp	r4, r3
 801906e:	bf08      	it	eq
 8019070:	68ec      	ldreq	r4, [r5, #12]
 8019072:	e7ca      	b.n	801900a <__swbuf_r+0x1a>
 8019074:	4621      	mov	r1, r4
 8019076:	4628      	mov	r0, r5
 8019078:	f000 f80c 	bl	8019094 <__swsetup_r>
 801907c:	2800      	cmp	r0, #0
 801907e:	d0cb      	beq.n	8019018 <__swbuf_r+0x28>
 8019080:	f04f 37ff 	mov.w	r7, #4294967295
 8019084:	e7ea      	b.n	801905c <__swbuf_r+0x6c>
 8019086:	bf00      	nop
 8019088:	0801d2f0 	.word	0x0801d2f0
 801908c:	0801d310 	.word	0x0801d310
 8019090:	0801d2d0 	.word	0x0801d2d0

08019094 <__swsetup_r>:
 8019094:	4b32      	ldr	r3, [pc, #200]	; (8019160 <__swsetup_r+0xcc>)
 8019096:	b570      	push	{r4, r5, r6, lr}
 8019098:	681d      	ldr	r5, [r3, #0]
 801909a:	4606      	mov	r6, r0
 801909c:	460c      	mov	r4, r1
 801909e:	b125      	cbz	r5, 80190aa <__swsetup_r+0x16>
 80190a0:	69ab      	ldr	r3, [r5, #24]
 80190a2:	b913      	cbnz	r3, 80190aa <__swsetup_r+0x16>
 80190a4:	4628      	mov	r0, r5
 80190a6:	f000 f99b 	bl	80193e0 <__sinit>
 80190aa:	4b2e      	ldr	r3, [pc, #184]	; (8019164 <__swsetup_r+0xd0>)
 80190ac:	429c      	cmp	r4, r3
 80190ae:	d10f      	bne.n	80190d0 <__swsetup_r+0x3c>
 80190b0:	686c      	ldr	r4, [r5, #4]
 80190b2:	89a3      	ldrh	r3, [r4, #12]
 80190b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80190b8:	0719      	lsls	r1, r3, #28
 80190ba:	d42c      	bmi.n	8019116 <__swsetup_r+0x82>
 80190bc:	06dd      	lsls	r5, r3, #27
 80190be:	d411      	bmi.n	80190e4 <__swsetup_r+0x50>
 80190c0:	2309      	movs	r3, #9
 80190c2:	6033      	str	r3, [r6, #0]
 80190c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80190c8:	81a3      	strh	r3, [r4, #12]
 80190ca:	f04f 30ff 	mov.w	r0, #4294967295
 80190ce:	e03e      	b.n	801914e <__swsetup_r+0xba>
 80190d0:	4b25      	ldr	r3, [pc, #148]	; (8019168 <__swsetup_r+0xd4>)
 80190d2:	429c      	cmp	r4, r3
 80190d4:	d101      	bne.n	80190da <__swsetup_r+0x46>
 80190d6:	68ac      	ldr	r4, [r5, #8]
 80190d8:	e7eb      	b.n	80190b2 <__swsetup_r+0x1e>
 80190da:	4b24      	ldr	r3, [pc, #144]	; (801916c <__swsetup_r+0xd8>)
 80190dc:	429c      	cmp	r4, r3
 80190de:	bf08      	it	eq
 80190e0:	68ec      	ldreq	r4, [r5, #12]
 80190e2:	e7e6      	b.n	80190b2 <__swsetup_r+0x1e>
 80190e4:	0758      	lsls	r0, r3, #29
 80190e6:	d512      	bpl.n	801910e <__swsetup_r+0x7a>
 80190e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80190ea:	b141      	cbz	r1, 80190fe <__swsetup_r+0x6a>
 80190ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80190f0:	4299      	cmp	r1, r3
 80190f2:	d002      	beq.n	80190fa <__swsetup_r+0x66>
 80190f4:	4630      	mov	r0, r6
 80190f6:	f7ff fe53 	bl	8018da0 <_free_r>
 80190fa:	2300      	movs	r3, #0
 80190fc:	6363      	str	r3, [r4, #52]	; 0x34
 80190fe:	89a3      	ldrh	r3, [r4, #12]
 8019100:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019104:	81a3      	strh	r3, [r4, #12]
 8019106:	2300      	movs	r3, #0
 8019108:	6063      	str	r3, [r4, #4]
 801910a:	6923      	ldr	r3, [r4, #16]
 801910c:	6023      	str	r3, [r4, #0]
 801910e:	89a3      	ldrh	r3, [r4, #12]
 8019110:	f043 0308 	orr.w	r3, r3, #8
 8019114:	81a3      	strh	r3, [r4, #12]
 8019116:	6923      	ldr	r3, [r4, #16]
 8019118:	b94b      	cbnz	r3, 801912e <__swsetup_r+0x9a>
 801911a:	89a3      	ldrh	r3, [r4, #12]
 801911c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019124:	d003      	beq.n	801912e <__swsetup_r+0x9a>
 8019126:	4621      	mov	r1, r4
 8019128:	4630      	mov	r0, r6
 801912a:	f000 fa2f 	bl	801958c <__smakebuf_r>
 801912e:	89a0      	ldrh	r0, [r4, #12]
 8019130:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019134:	f010 0301 	ands.w	r3, r0, #1
 8019138:	d00a      	beq.n	8019150 <__swsetup_r+0xbc>
 801913a:	2300      	movs	r3, #0
 801913c:	60a3      	str	r3, [r4, #8]
 801913e:	6963      	ldr	r3, [r4, #20]
 8019140:	425b      	negs	r3, r3
 8019142:	61a3      	str	r3, [r4, #24]
 8019144:	6923      	ldr	r3, [r4, #16]
 8019146:	b943      	cbnz	r3, 801915a <__swsetup_r+0xc6>
 8019148:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801914c:	d1ba      	bne.n	80190c4 <__swsetup_r+0x30>
 801914e:	bd70      	pop	{r4, r5, r6, pc}
 8019150:	0781      	lsls	r1, r0, #30
 8019152:	bf58      	it	pl
 8019154:	6963      	ldrpl	r3, [r4, #20]
 8019156:	60a3      	str	r3, [r4, #8]
 8019158:	e7f4      	b.n	8019144 <__swsetup_r+0xb0>
 801915a:	2000      	movs	r0, #0
 801915c:	e7f7      	b.n	801914e <__swsetup_r+0xba>
 801915e:	bf00      	nop
 8019160:	200005b8 	.word	0x200005b8
 8019164:	0801d2f0 	.word	0x0801d2f0
 8019168:	0801d310 	.word	0x0801d310
 801916c:	0801d2d0 	.word	0x0801d2d0

08019170 <__assert_func>:
 8019170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019172:	4614      	mov	r4, r2
 8019174:	461a      	mov	r2, r3
 8019176:	4b09      	ldr	r3, [pc, #36]	; (801919c <__assert_func+0x2c>)
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	4605      	mov	r5, r0
 801917c:	68d8      	ldr	r0, [r3, #12]
 801917e:	b14c      	cbz	r4, 8019194 <__assert_func+0x24>
 8019180:	4b07      	ldr	r3, [pc, #28]	; (80191a0 <__assert_func+0x30>)
 8019182:	9100      	str	r1, [sp, #0]
 8019184:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019188:	4906      	ldr	r1, [pc, #24]	; (80191a4 <__assert_func+0x34>)
 801918a:	462b      	mov	r3, r5
 801918c:	f000 f9a6 	bl	80194dc <fiprintf>
 8019190:	f000 fdd4 	bl	8019d3c <abort>
 8019194:	4b04      	ldr	r3, [pc, #16]	; (80191a8 <__assert_func+0x38>)
 8019196:	461c      	mov	r4, r3
 8019198:	e7f3      	b.n	8019182 <__assert_func+0x12>
 801919a:	bf00      	nop
 801919c:	200005b8 	.word	0x200005b8
 80191a0:	0801d292 	.word	0x0801d292
 80191a4:	0801d29f 	.word	0x0801d29f
 80191a8:	0801d2cd 	.word	0x0801d2cd

080191ac <__sflush_r>:
 80191ac:	898a      	ldrh	r2, [r1, #12]
 80191ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191b2:	4605      	mov	r5, r0
 80191b4:	0710      	lsls	r0, r2, #28
 80191b6:	460c      	mov	r4, r1
 80191b8:	d458      	bmi.n	801926c <__sflush_r+0xc0>
 80191ba:	684b      	ldr	r3, [r1, #4]
 80191bc:	2b00      	cmp	r3, #0
 80191be:	dc05      	bgt.n	80191cc <__sflush_r+0x20>
 80191c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	dc02      	bgt.n	80191cc <__sflush_r+0x20>
 80191c6:	2000      	movs	r0, #0
 80191c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80191ce:	2e00      	cmp	r6, #0
 80191d0:	d0f9      	beq.n	80191c6 <__sflush_r+0x1a>
 80191d2:	2300      	movs	r3, #0
 80191d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80191d8:	682f      	ldr	r7, [r5, #0]
 80191da:	602b      	str	r3, [r5, #0]
 80191dc:	d032      	beq.n	8019244 <__sflush_r+0x98>
 80191de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80191e0:	89a3      	ldrh	r3, [r4, #12]
 80191e2:	075a      	lsls	r2, r3, #29
 80191e4:	d505      	bpl.n	80191f2 <__sflush_r+0x46>
 80191e6:	6863      	ldr	r3, [r4, #4]
 80191e8:	1ac0      	subs	r0, r0, r3
 80191ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80191ec:	b10b      	cbz	r3, 80191f2 <__sflush_r+0x46>
 80191ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80191f0:	1ac0      	subs	r0, r0, r3
 80191f2:	2300      	movs	r3, #0
 80191f4:	4602      	mov	r2, r0
 80191f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80191f8:	6a21      	ldr	r1, [r4, #32]
 80191fa:	4628      	mov	r0, r5
 80191fc:	47b0      	blx	r6
 80191fe:	1c43      	adds	r3, r0, #1
 8019200:	89a3      	ldrh	r3, [r4, #12]
 8019202:	d106      	bne.n	8019212 <__sflush_r+0x66>
 8019204:	6829      	ldr	r1, [r5, #0]
 8019206:	291d      	cmp	r1, #29
 8019208:	d82c      	bhi.n	8019264 <__sflush_r+0xb8>
 801920a:	4a2a      	ldr	r2, [pc, #168]	; (80192b4 <__sflush_r+0x108>)
 801920c:	40ca      	lsrs	r2, r1
 801920e:	07d6      	lsls	r6, r2, #31
 8019210:	d528      	bpl.n	8019264 <__sflush_r+0xb8>
 8019212:	2200      	movs	r2, #0
 8019214:	6062      	str	r2, [r4, #4]
 8019216:	04d9      	lsls	r1, r3, #19
 8019218:	6922      	ldr	r2, [r4, #16]
 801921a:	6022      	str	r2, [r4, #0]
 801921c:	d504      	bpl.n	8019228 <__sflush_r+0x7c>
 801921e:	1c42      	adds	r2, r0, #1
 8019220:	d101      	bne.n	8019226 <__sflush_r+0x7a>
 8019222:	682b      	ldr	r3, [r5, #0]
 8019224:	b903      	cbnz	r3, 8019228 <__sflush_r+0x7c>
 8019226:	6560      	str	r0, [r4, #84]	; 0x54
 8019228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801922a:	602f      	str	r7, [r5, #0]
 801922c:	2900      	cmp	r1, #0
 801922e:	d0ca      	beq.n	80191c6 <__sflush_r+0x1a>
 8019230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019234:	4299      	cmp	r1, r3
 8019236:	d002      	beq.n	801923e <__sflush_r+0x92>
 8019238:	4628      	mov	r0, r5
 801923a:	f7ff fdb1 	bl	8018da0 <_free_r>
 801923e:	2000      	movs	r0, #0
 8019240:	6360      	str	r0, [r4, #52]	; 0x34
 8019242:	e7c1      	b.n	80191c8 <__sflush_r+0x1c>
 8019244:	6a21      	ldr	r1, [r4, #32]
 8019246:	2301      	movs	r3, #1
 8019248:	4628      	mov	r0, r5
 801924a:	47b0      	blx	r6
 801924c:	1c41      	adds	r1, r0, #1
 801924e:	d1c7      	bne.n	80191e0 <__sflush_r+0x34>
 8019250:	682b      	ldr	r3, [r5, #0]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d0c4      	beq.n	80191e0 <__sflush_r+0x34>
 8019256:	2b1d      	cmp	r3, #29
 8019258:	d001      	beq.n	801925e <__sflush_r+0xb2>
 801925a:	2b16      	cmp	r3, #22
 801925c:	d101      	bne.n	8019262 <__sflush_r+0xb6>
 801925e:	602f      	str	r7, [r5, #0]
 8019260:	e7b1      	b.n	80191c6 <__sflush_r+0x1a>
 8019262:	89a3      	ldrh	r3, [r4, #12]
 8019264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019268:	81a3      	strh	r3, [r4, #12]
 801926a:	e7ad      	b.n	80191c8 <__sflush_r+0x1c>
 801926c:	690f      	ldr	r7, [r1, #16]
 801926e:	2f00      	cmp	r7, #0
 8019270:	d0a9      	beq.n	80191c6 <__sflush_r+0x1a>
 8019272:	0793      	lsls	r3, r2, #30
 8019274:	680e      	ldr	r6, [r1, #0]
 8019276:	bf08      	it	eq
 8019278:	694b      	ldreq	r3, [r1, #20]
 801927a:	600f      	str	r7, [r1, #0]
 801927c:	bf18      	it	ne
 801927e:	2300      	movne	r3, #0
 8019280:	eba6 0807 	sub.w	r8, r6, r7
 8019284:	608b      	str	r3, [r1, #8]
 8019286:	f1b8 0f00 	cmp.w	r8, #0
 801928a:	dd9c      	ble.n	80191c6 <__sflush_r+0x1a>
 801928c:	6a21      	ldr	r1, [r4, #32]
 801928e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019290:	4643      	mov	r3, r8
 8019292:	463a      	mov	r2, r7
 8019294:	4628      	mov	r0, r5
 8019296:	47b0      	blx	r6
 8019298:	2800      	cmp	r0, #0
 801929a:	dc06      	bgt.n	80192aa <__sflush_r+0xfe>
 801929c:	89a3      	ldrh	r3, [r4, #12]
 801929e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192a2:	81a3      	strh	r3, [r4, #12]
 80192a4:	f04f 30ff 	mov.w	r0, #4294967295
 80192a8:	e78e      	b.n	80191c8 <__sflush_r+0x1c>
 80192aa:	4407      	add	r7, r0
 80192ac:	eba8 0800 	sub.w	r8, r8, r0
 80192b0:	e7e9      	b.n	8019286 <__sflush_r+0xda>
 80192b2:	bf00      	nop
 80192b4:	20400001 	.word	0x20400001

080192b8 <_fflush_r>:
 80192b8:	b538      	push	{r3, r4, r5, lr}
 80192ba:	690b      	ldr	r3, [r1, #16]
 80192bc:	4605      	mov	r5, r0
 80192be:	460c      	mov	r4, r1
 80192c0:	b913      	cbnz	r3, 80192c8 <_fflush_r+0x10>
 80192c2:	2500      	movs	r5, #0
 80192c4:	4628      	mov	r0, r5
 80192c6:	bd38      	pop	{r3, r4, r5, pc}
 80192c8:	b118      	cbz	r0, 80192d2 <_fflush_r+0x1a>
 80192ca:	6983      	ldr	r3, [r0, #24]
 80192cc:	b90b      	cbnz	r3, 80192d2 <_fflush_r+0x1a>
 80192ce:	f000 f887 	bl	80193e0 <__sinit>
 80192d2:	4b14      	ldr	r3, [pc, #80]	; (8019324 <_fflush_r+0x6c>)
 80192d4:	429c      	cmp	r4, r3
 80192d6:	d11b      	bne.n	8019310 <_fflush_r+0x58>
 80192d8:	686c      	ldr	r4, [r5, #4]
 80192da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d0ef      	beq.n	80192c2 <_fflush_r+0xa>
 80192e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80192e4:	07d0      	lsls	r0, r2, #31
 80192e6:	d404      	bmi.n	80192f2 <_fflush_r+0x3a>
 80192e8:	0599      	lsls	r1, r3, #22
 80192ea:	d402      	bmi.n	80192f2 <_fflush_r+0x3a>
 80192ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80192ee:	f000 f927 	bl	8019540 <__retarget_lock_acquire_recursive>
 80192f2:	4628      	mov	r0, r5
 80192f4:	4621      	mov	r1, r4
 80192f6:	f7ff ff59 	bl	80191ac <__sflush_r>
 80192fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80192fc:	07da      	lsls	r2, r3, #31
 80192fe:	4605      	mov	r5, r0
 8019300:	d4e0      	bmi.n	80192c4 <_fflush_r+0xc>
 8019302:	89a3      	ldrh	r3, [r4, #12]
 8019304:	059b      	lsls	r3, r3, #22
 8019306:	d4dd      	bmi.n	80192c4 <_fflush_r+0xc>
 8019308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801930a:	f000 f91a 	bl	8019542 <__retarget_lock_release_recursive>
 801930e:	e7d9      	b.n	80192c4 <_fflush_r+0xc>
 8019310:	4b05      	ldr	r3, [pc, #20]	; (8019328 <_fflush_r+0x70>)
 8019312:	429c      	cmp	r4, r3
 8019314:	d101      	bne.n	801931a <_fflush_r+0x62>
 8019316:	68ac      	ldr	r4, [r5, #8]
 8019318:	e7df      	b.n	80192da <_fflush_r+0x22>
 801931a:	4b04      	ldr	r3, [pc, #16]	; (801932c <_fflush_r+0x74>)
 801931c:	429c      	cmp	r4, r3
 801931e:	bf08      	it	eq
 8019320:	68ec      	ldreq	r4, [r5, #12]
 8019322:	e7da      	b.n	80192da <_fflush_r+0x22>
 8019324:	0801d2f0 	.word	0x0801d2f0
 8019328:	0801d310 	.word	0x0801d310
 801932c:	0801d2d0 	.word	0x0801d2d0

08019330 <std>:
 8019330:	2300      	movs	r3, #0
 8019332:	b510      	push	{r4, lr}
 8019334:	4604      	mov	r4, r0
 8019336:	e9c0 3300 	strd	r3, r3, [r0]
 801933a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801933e:	6083      	str	r3, [r0, #8]
 8019340:	8181      	strh	r1, [r0, #12]
 8019342:	6643      	str	r3, [r0, #100]	; 0x64
 8019344:	81c2      	strh	r2, [r0, #14]
 8019346:	6183      	str	r3, [r0, #24]
 8019348:	4619      	mov	r1, r3
 801934a:	2208      	movs	r2, #8
 801934c:	305c      	adds	r0, #92	; 0x5c
 801934e:	f7ff fd1f 	bl	8018d90 <memset>
 8019352:	4b05      	ldr	r3, [pc, #20]	; (8019368 <std+0x38>)
 8019354:	6263      	str	r3, [r4, #36]	; 0x24
 8019356:	4b05      	ldr	r3, [pc, #20]	; (801936c <std+0x3c>)
 8019358:	62a3      	str	r3, [r4, #40]	; 0x28
 801935a:	4b05      	ldr	r3, [pc, #20]	; (8019370 <std+0x40>)
 801935c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801935e:	4b05      	ldr	r3, [pc, #20]	; (8019374 <std+0x44>)
 8019360:	6224      	str	r4, [r4, #32]
 8019362:	6323      	str	r3, [r4, #48]	; 0x30
 8019364:	bd10      	pop	{r4, pc}
 8019366:	bf00      	nop
 8019368:	08019c91 	.word	0x08019c91
 801936c:	08019cb3 	.word	0x08019cb3
 8019370:	08019ceb 	.word	0x08019ceb
 8019374:	08019d0f 	.word	0x08019d0f

08019378 <_cleanup_r>:
 8019378:	4901      	ldr	r1, [pc, #4]	; (8019380 <_cleanup_r+0x8>)
 801937a:	f000 b8c1 	b.w	8019500 <_fwalk_reent>
 801937e:	bf00      	nop
 8019380:	080192b9 	.word	0x080192b9

08019384 <__sfmoreglue>:
 8019384:	b570      	push	{r4, r5, r6, lr}
 8019386:	1e4a      	subs	r2, r1, #1
 8019388:	2568      	movs	r5, #104	; 0x68
 801938a:	4355      	muls	r5, r2
 801938c:	460e      	mov	r6, r1
 801938e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019392:	f7ff fd55 	bl	8018e40 <_malloc_r>
 8019396:	4604      	mov	r4, r0
 8019398:	b140      	cbz	r0, 80193ac <__sfmoreglue+0x28>
 801939a:	2100      	movs	r1, #0
 801939c:	e9c0 1600 	strd	r1, r6, [r0]
 80193a0:	300c      	adds	r0, #12
 80193a2:	60a0      	str	r0, [r4, #8]
 80193a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80193a8:	f7ff fcf2 	bl	8018d90 <memset>
 80193ac:	4620      	mov	r0, r4
 80193ae:	bd70      	pop	{r4, r5, r6, pc}

080193b0 <__sfp_lock_acquire>:
 80193b0:	4801      	ldr	r0, [pc, #4]	; (80193b8 <__sfp_lock_acquire+0x8>)
 80193b2:	f000 b8c5 	b.w	8019540 <__retarget_lock_acquire_recursive>
 80193b6:	bf00      	nop
 80193b8:	20018ea0 	.word	0x20018ea0

080193bc <__sfp_lock_release>:
 80193bc:	4801      	ldr	r0, [pc, #4]	; (80193c4 <__sfp_lock_release+0x8>)
 80193be:	f000 b8c0 	b.w	8019542 <__retarget_lock_release_recursive>
 80193c2:	bf00      	nop
 80193c4:	20018ea0 	.word	0x20018ea0

080193c8 <__sinit_lock_acquire>:
 80193c8:	4801      	ldr	r0, [pc, #4]	; (80193d0 <__sinit_lock_acquire+0x8>)
 80193ca:	f000 b8b9 	b.w	8019540 <__retarget_lock_acquire_recursive>
 80193ce:	bf00      	nop
 80193d0:	20018e9b 	.word	0x20018e9b

080193d4 <__sinit_lock_release>:
 80193d4:	4801      	ldr	r0, [pc, #4]	; (80193dc <__sinit_lock_release+0x8>)
 80193d6:	f000 b8b4 	b.w	8019542 <__retarget_lock_release_recursive>
 80193da:	bf00      	nop
 80193dc:	20018e9b 	.word	0x20018e9b

080193e0 <__sinit>:
 80193e0:	b510      	push	{r4, lr}
 80193e2:	4604      	mov	r4, r0
 80193e4:	f7ff fff0 	bl	80193c8 <__sinit_lock_acquire>
 80193e8:	69a3      	ldr	r3, [r4, #24]
 80193ea:	b11b      	cbz	r3, 80193f4 <__sinit+0x14>
 80193ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193f0:	f7ff bff0 	b.w	80193d4 <__sinit_lock_release>
 80193f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80193f8:	6523      	str	r3, [r4, #80]	; 0x50
 80193fa:	4b13      	ldr	r3, [pc, #76]	; (8019448 <__sinit+0x68>)
 80193fc:	4a13      	ldr	r2, [pc, #76]	; (801944c <__sinit+0x6c>)
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	62a2      	str	r2, [r4, #40]	; 0x28
 8019402:	42a3      	cmp	r3, r4
 8019404:	bf04      	itt	eq
 8019406:	2301      	moveq	r3, #1
 8019408:	61a3      	streq	r3, [r4, #24]
 801940a:	4620      	mov	r0, r4
 801940c:	f000 f820 	bl	8019450 <__sfp>
 8019410:	6060      	str	r0, [r4, #4]
 8019412:	4620      	mov	r0, r4
 8019414:	f000 f81c 	bl	8019450 <__sfp>
 8019418:	60a0      	str	r0, [r4, #8]
 801941a:	4620      	mov	r0, r4
 801941c:	f000 f818 	bl	8019450 <__sfp>
 8019420:	2200      	movs	r2, #0
 8019422:	60e0      	str	r0, [r4, #12]
 8019424:	2104      	movs	r1, #4
 8019426:	6860      	ldr	r0, [r4, #4]
 8019428:	f7ff ff82 	bl	8019330 <std>
 801942c:	68a0      	ldr	r0, [r4, #8]
 801942e:	2201      	movs	r2, #1
 8019430:	2109      	movs	r1, #9
 8019432:	f7ff ff7d 	bl	8019330 <std>
 8019436:	68e0      	ldr	r0, [r4, #12]
 8019438:	2202      	movs	r2, #2
 801943a:	2112      	movs	r1, #18
 801943c:	f7ff ff78 	bl	8019330 <std>
 8019440:	2301      	movs	r3, #1
 8019442:	61a3      	str	r3, [r4, #24]
 8019444:	e7d2      	b.n	80193ec <__sinit+0xc>
 8019446:	bf00      	nop
 8019448:	0801d218 	.word	0x0801d218
 801944c:	08019379 	.word	0x08019379

08019450 <__sfp>:
 8019450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019452:	4607      	mov	r7, r0
 8019454:	f7ff ffac 	bl	80193b0 <__sfp_lock_acquire>
 8019458:	4b1e      	ldr	r3, [pc, #120]	; (80194d4 <__sfp+0x84>)
 801945a:	681e      	ldr	r6, [r3, #0]
 801945c:	69b3      	ldr	r3, [r6, #24]
 801945e:	b913      	cbnz	r3, 8019466 <__sfp+0x16>
 8019460:	4630      	mov	r0, r6
 8019462:	f7ff ffbd 	bl	80193e0 <__sinit>
 8019466:	3648      	adds	r6, #72	; 0x48
 8019468:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801946c:	3b01      	subs	r3, #1
 801946e:	d503      	bpl.n	8019478 <__sfp+0x28>
 8019470:	6833      	ldr	r3, [r6, #0]
 8019472:	b30b      	cbz	r3, 80194b8 <__sfp+0x68>
 8019474:	6836      	ldr	r6, [r6, #0]
 8019476:	e7f7      	b.n	8019468 <__sfp+0x18>
 8019478:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801947c:	b9d5      	cbnz	r5, 80194b4 <__sfp+0x64>
 801947e:	4b16      	ldr	r3, [pc, #88]	; (80194d8 <__sfp+0x88>)
 8019480:	60e3      	str	r3, [r4, #12]
 8019482:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019486:	6665      	str	r5, [r4, #100]	; 0x64
 8019488:	f000 f859 	bl	801953e <__retarget_lock_init_recursive>
 801948c:	f7ff ff96 	bl	80193bc <__sfp_lock_release>
 8019490:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019494:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019498:	6025      	str	r5, [r4, #0]
 801949a:	61a5      	str	r5, [r4, #24]
 801949c:	2208      	movs	r2, #8
 801949e:	4629      	mov	r1, r5
 80194a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80194a4:	f7ff fc74 	bl	8018d90 <memset>
 80194a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80194ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80194b0:	4620      	mov	r0, r4
 80194b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194b4:	3468      	adds	r4, #104	; 0x68
 80194b6:	e7d9      	b.n	801946c <__sfp+0x1c>
 80194b8:	2104      	movs	r1, #4
 80194ba:	4638      	mov	r0, r7
 80194bc:	f7ff ff62 	bl	8019384 <__sfmoreglue>
 80194c0:	4604      	mov	r4, r0
 80194c2:	6030      	str	r0, [r6, #0]
 80194c4:	2800      	cmp	r0, #0
 80194c6:	d1d5      	bne.n	8019474 <__sfp+0x24>
 80194c8:	f7ff ff78 	bl	80193bc <__sfp_lock_release>
 80194cc:	230c      	movs	r3, #12
 80194ce:	603b      	str	r3, [r7, #0]
 80194d0:	e7ee      	b.n	80194b0 <__sfp+0x60>
 80194d2:	bf00      	nop
 80194d4:	0801d218 	.word	0x0801d218
 80194d8:	ffff0001 	.word	0xffff0001

080194dc <fiprintf>:
 80194dc:	b40e      	push	{r1, r2, r3}
 80194de:	b503      	push	{r0, r1, lr}
 80194e0:	4601      	mov	r1, r0
 80194e2:	ab03      	add	r3, sp, #12
 80194e4:	4805      	ldr	r0, [pc, #20]	; (80194fc <fiprintf+0x20>)
 80194e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80194ea:	6800      	ldr	r0, [r0, #0]
 80194ec:	9301      	str	r3, [sp, #4]
 80194ee:	f000 f8c3 	bl	8019678 <_vfiprintf_r>
 80194f2:	b002      	add	sp, #8
 80194f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80194f8:	b003      	add	sp, #12
 80194fa:	4770      	bx	lr
 80194fc:	200005b8 	.word	0x200005b8

08019500 <_fwalk_reent>:
 8019500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019504:	4606      	mov	r6, r0
 8019506:	4688      	mov	r8, r1
 8019508:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801950c:	2700      	movs	r7, #0
 801950e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019512:	f1b9 0901 	subs.w	r9, r9, #1
 8019516:	d505      	bpl.n	8019524 <_fwalk_reent+0x24>
 8019518:	6824      	ldr	r4, [r4, #0]
 801951a:	2c00      	cmp	r4, #0
 801951c:	d1f7      	bne.n	801950e <_fwalk_reent+0xe>
 801951e:	4638      	mov	r0, r7
 8019520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019524:	89ab      	ldrh	r3, [r5, #12]
 8019526:	2b01      	cmp	r3, #1
 8019528:	d907      	bls.n	801953a <_fwalk_reent+0x3a>
 801952a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801952e:	3301      	adds	r3, #1
 8019530:	d003      	beq.n	801953a <_fwalk_reent+0x3a>
 8019532:	4629      	mov	r1, r5
 8019534:	4630      	mov	r0, r6
 8019536:	47c0      	blx	r8
 8019538:	4307      	orrs	r7, r0
 801953a:	3568      	adds	r5, #104	; 0x68
 801953c:	e7e9      	b.n	8019512 <_fwalk_reent+0x12>

0801953e <__retarget_lock_init_recursive>:
 801953e:	4770      	bx	lr

08019540 <__retarget_lock_acquire_recursive>:
 8019540:	4770      	bx	lr

08019542 <__retarget_lock_release_recursive>:
 8019542:	4770      	bx	lr

08019544 <__swhatbuf_r>:
 8019544:	b570      	push	{r4, r5, r6, lr}
 8019546:	460e      	mov	r6, r1
 8019548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801954c:	2900      	cmp	r1, #0
 801954e:	b096      	sub	sp, #88	; 0x58
 8019550:	4614      	mov	r4, r2
 8019552:	461d      	mov	r5, r3
 8019554:	da07      	bge.n	8019566 <__swhatbuf_r+0x22>
 8019556:	2300      	movs	r3, #0
 8019558:	602b      	str	r3, [r5, #0]
 801955a:	89b3      	ldrh	r3, [r6, #12]
 801955c:	061a      	lsls	r2, r3, #24
 801955e:	d410      	bmi.n	8019582 <__swhatbuf_r+0x3e>
 8019560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019564:	e00e      	b.n	8019584 <__swhatbuf_r+0x40>
 8019566:	466a      	mov	r2, sp
 8019568:	f000 fc00 	bl	8019d6c <_fstat_r>
 801956c:	2800      	cmp	r0, #0
 801956e:	dbf2      	blt.n	8019556 <__swhatbuf_r+0x12>
 8019570:	9a01      	ldr	r2, [sp, #4]
 8019572:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019576:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801957a:	425a      	negs	r2, r3
 801957c:	415a      	adcs	r2, r3
 801957e:	602a      	str	r2, [r5, #0]
 8019580:	e7ee      	b.n	8019560 <__swhatbuf_r+0x1c>
 8019582:	2340      	movs	r3, #64	; 0x40
 8019584:	2000      	movs	r0, #0
 8019586:	6023      	str	r3, [r4, #0]
 8019588:	b016      	add	sp, #88	; 0x58
 801958a:	bd70      	pop	{r4, r5, r6, pc}

0801958c <__smakebuf_r>:
 801958c:	898b      	ldrh	r3, [r1, #12]
 801958e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019590:	079d      	lsls	r5, r3, #30
 8019592:	4606      	mov	r6, r0
 8019594:	460c      	mov	r4, r1
 8019596:	d507      	bpl.n	80195a8 <__smakebuf_r+0x1c>
 8019598:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801959c:	6023      	str	r3, [r4, #0]
 801959e:	6123      	str	r3, [r4, #16]
 80195a0:	2301      	movs	r3, #1
 80195a2:	6163      	str	r3, [r4, #20]
 80195a4:	b002      	add	sp, #8
 80195a6:	bd70      	pop	{r4, r5, r6, pc}
 80195a8:	ab01      	add	r3, sp, #4
 80195aa:	466a      	mov	r2, sp
 80195ac:	f7ff ffca 	bl	8019544 <__swhatbuf_r>
 80195b0:	9900      	ldr	r1, [sp, #0]
 80195b2:	4605      	mov	r5, r0
 80195b4:	4630      	mov	r0, r6
 80195b6:	f7ff fc43 	bl	8018e40 <_malloc_r>
 80195ba:	b948      	cbnz	r0, 80195d0 <__smakebuf_r+0x44>
 80195bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195c0:	059a      	lsls	r2, r3, #22
 80195c2:	d4ef      	bmi.n	80195a4 <__smakebuf_r+0x18>
 80195c4:	f023 0303 	bic.w	r3, r3, #3
 80195c8:	f043 0302 	orr.w	r3, r3, #2
 80195cc:	81a3      	strh	r3, [r4, #12]
 80195ce:	e7e3      	b.n	8019598 <__smakebuf_r+0xc>
 80195d0:	4b0d      	ldr	r3, [pc, #52]	; (8019608 <__smakebuf_r+0x7c>)
 80195d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80195d4:	89a3      	ldrh	r3, [r4, #12]
 80195d6:	6020      	str	r0, [r4, #0]
 80195d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80195dc:	81a3      	strh	r3, [r4, #12]
 80195de:	9b00      	ldr	r3, [sp, #0]
 80195e0:	6163      	str	r3, [r4, #20]
 80195e2:	9b01      	ldr	r3, [sp, #4]
 80195e4:	6120      	str	r0, [r4, #16]
 80195e6:	b15b      	cbz	r3, 8019600 <__smakebuf_r+0x74>
 80195e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80195ec:	4630      	mov	r0, r6
 80195ee:	f000 fbcf 	bl	8019d90 <_isatty_r>
 80195f2:	b128      	cbz	r0, 8019600 <__smakebuf_r+0x74>
 80195f4:	89a3      	ldrh	r3, [r4, #12]
 80195f6:	f023 0303 	bic.w	r3, r3, #3
 80195fa:	f043 0301 	orr.w	r3, r3, #1
 80195fe:	81a3      	strh	r3, [r4, #12]
 8019600:	89a0      	ldrh	r0, [r4, #12]
 8019602:	4305      	orrs	r5, r0
 8019604:	81a5      	strh	r5, [r4, #12]
 8019606:	e7cd      	b.n	80195a4 <__smakebuf_r+0x18>
 8019608:	08019379 	.word	0x08019379

0801960c <__malloc_lock>:
 801960c:	4801      	ldr	r0, [pc, #4]	; (8019614 <__malloc_lock+0x8>)
 801960e:	f7ff bf97 	b.w	8019540 <__retarget_lock_acquire_recursive>
 8019612:	bf00      	nop
 8019614:	20018e9c 	.word	0x20018e9c

08019618 <__malloc_unlock>:
 8019618:	4801      	ldr	r0, [pc, #4]	; (8019620 <__malloc_unlock+0x8>)
 801961a:	f7ff bf92 	b.w	8019542 <__retarget_lock_release_recursive>
 801961e:	bf00      	nop
 8019620:	20018e9c 	.word	0x20018e9c

08019624 <__sfputc_r>:
 8019624:	6893      	ldr	r3, [r2, #8]
 8019626:	3b01      	subs	r3, #1
 8019628:	2b00      	cmp	r3, #0
 801962a:	b410      	push	{r4}
 801962c:	6093      	str	r3, [r2, #8]
 801962e:	da08      	bge.n	8019642 <__sfputc_r+0x1e>
 8019630:	6994      	ldr	r4, [r2, #24]
 8019632:	42a3      	cmp	r3, r4
 8019634:	db01      	blt.n	801963a <__sfputc_r+0x16>
 8019636:	290a      	cmp	r1, #10
 8019638:	d103      	bne.n	8019642 <__sfputc_r+0x1e>
 801963a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801963e:	f7ff bcd7 	b.w	8018ff0 <__swbuf_r>
 8019642:	6813      	ldr	r3, [r2, #0]
 8019644:	1c58      	adds	r0, r3, #1
 8019646:	6010      	str	r0, [r2, #0]
 8019648:	7019      	strb	r1, [r3, #0]
 801964a:	4608      	mov	r0, r1
 801964c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019650:	4770      	bx	lr

08019652 <__sfputs_r>:
 8019652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019654:	4606      	mov	r6, r0
 8019656:	460f      	mov	r7, r1
 8019658:	4614      	mov	r4, r2
 801965a:	18d5      	adds	r5, r2, r3
 801965c:	42ac      	cmp	r4, r5
 801965e:	d101      	bne.n	8019664 <__sfputs_r+0x12>
 8019660:	2000      	movs	r0, #0
 8019662:	e007      	b.n	8019674 <__sfputs_r+0x22>
 8019664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019668:	463a      	mov	r2, r7
 801966a:	4630      	mov	r0, r6
 801966c:	f7ff ffda 	bl	8019624 <__sfputc_r>
 8019670:	1c43      	adds	r3, r0, #1
 8019672:	d1f3      	bne.n	801965c <__sfputs_r+0xa>
 8019674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019678 <_vfiprintf_r>:
 8019678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801967c:	460d      	mov	r5, r1
 801967e:	b09d      	sub	sp, #116	; 0x74
 8019680:	4614      	mov	r4, r2
 8019682:	4698      	mov	r8, r3
 8019684:	4606      	mov	r6, r0
 8019686:	b118      	cbz	r0, 8019690 <_vfiprintf_r+0x18>
 8019688:	6983      	ldr	r3, [r0, #24]
 801968a:	b90b      	cbnz	r3, 8019690 <_vfiprintf_r+0x18>
 801968c:	f7ff fea8 	bl	80193e0 <__sinit>
 8019690:	4b89      	ldr	r3, [pc, #548]	; (80198b8 <_vfiprintf_r+0x240>)
 8019692:	429d      	cmp	r5, r3
 8019694:	d11b      	bne.n	80196ce <_vfiprintf_r+0x56>
 8019696:	6875      	ldr	r5, [r6, #4]
 8019698:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801969a:	07d9      	lsls	r1, r3, #31
 801969c:	d405      	bmi.n	80196aa <_vfiprintf_r+0x32>
 801969e:	89ab      	ldrh	r3, [r5, #12]
 80196a0:	059a      	lsls	r2, r3, #22
 80196a2:	d402      	bmi.n	80196aa <_vfiprintf_r+0x32>
 80196a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80196a6:	f7ff ff4b 	bl	8019540 <__retarget_lock_acquire_recursive>
 80196aa:	89ab      	ldrh	r3, [r5, #12]
 80196ac:	071b      	lsls	r3, r3, #28
 80196ae:	d501      	bpl.n	80196b4 <_vfiprintf_r+0x3c>
 80196b0:	692b      	ldr	r3, [r5, #16]
 80196b2:	b9eb      	cbnz	r3, 80196f0 <_vfiprintf_r+0x78>
 80196b4:	4629      	mov	r1, r5
 80196b6:	4630      	mov	r0, r6
 80196b8:	f7ff fcec 	bl	8019094 <__swsetup_r>
 80196bc:	b1c0      	cbz	r0, 80196f0 <_vfiprintf_r+0x78>
 80196be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80196c0:	07dc      	lsls	r4, r3, #31
 80196c2:	d50e      	bpl.n	80196e2 <_vfiprintf_r+0x6a>
 80196c4:	f04f 30ff 	mov.w	r0, #4294967295
 80196c8:	b01d      	add	sp, #116	; 0x74
 80196ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196ce:	4b7b      	ldr	r3, [pc, #492]	; (80198bc <_vfiprintf_r+0x244>)
 80196d0:	429d      	cmp	r5, r3
 80196d2:	d101      	bne.n	80196d8 <_vfiprintf_r+0x60>
 80196d4:	68b5      	ldr	r5, [r6, #8]
 80196d6:	e7df      	b.n	8019698 <_vfiprintf_r+0x20>
 80196d8:	4b79      	ldr	r3, [pc, #484]	; (80198c0 <_vfiprintf_r+0x248>)
 80196da:	429d      	cmp	r5, r3
 80196dc:	bf08      	it	eq
 80196de:	68f5      	ldreq	r5, [r6, #12]
 80196e0:	e7da      	b.n	8019698 <_vfiprintf_r+0x20>
 80196e2:	89ab      	ldrh	r3, [r5, #12]
 80196e4:	0598      	lsls	r0, r3, #22
 80196e6:	d4ed      	bmi.n	80196c4 <_vfiprintf_r+0x4c>
 80196e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80196ea:	f7ff ff2a 	bl	8019542 <__retarget_lock_release_recursive>
 80196ee:	e7e9      	b.n	80196c4 <_vfiprintf_r+0x4c>
 80196f0:	2300      	movs	r3, #0
 80196f2:	9309      	str	r3, [sp, #36]	; 0x24
 80196f4:	2320      	movs	r3, #32
 80196f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80196fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80196fe:	2330      	movs	r3, #48	; 0x30
 8019700:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80198c4 <_vfiprintf_r+0x24c>
 8019704:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019708:	f04f 0901 	mov.w	r9, #1
 801970c:	4623      	mov	r3, r4
 801970e:	469a      	mov	sl, r3
 8019710:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019714:	b10a      	cbz	r2, 801971a <_vfiprintf_r+0xa2>
 8019716:	2a25      	cmp	r2, #37	; 0x25
 8019718:	d1f9      	bne.n	801970e <_vfiprintf_r+0x96>
 801971a:	ebba 0b04 	subs.w	fp, sl, r4
 801971e:	d00b      	beq.n	8019738 <_vfiprintf_r+0xc0>
 8019720:	465b      	mov	r3, fp
 8019722:	4622      	mov	r2, r4
 8019724:	4629      	mov	r1, r5
 8019726:	4630      	mov	r0, r6
 8019728:	f7ff ff93 	bl	8019652 <__sfputs_r>
 801972c:	3001      	adds	r0, #1
 801972e:	f000 80aa 	beq.w	8019886 <_vfiprintf_r+0x20e>
 8019732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019734:	445a      	add	r2, fp
 8019736:	9209      	str	r2, [sp, #36]	; 0x24
 8019738:	f89a 3000 	ldrb.w	r3, [sl]
 801973c:	2b00      	cmp	r3, #0
 801973e:	f000 80a2 	beq.w	8019886 <_vfiprintf_r+0x20e>
 8019742:	2300      	movs	r3, #0
 8019744:	f04f 32ff 	mov.w	r2, #4294967295
 8019748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801974c:	f10a 0a01 	add.w	sl, sl, #1
 8019750:	9304      	str	r3, [sp, #16]
 8019752:	9307      	str	r3, [sp, #28]
 8019754:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019758:	931a      	str	r3, [sp, #104]	; 0x68
 801975a:	4654      	mov	r4, sl
 801975c:	2205      	movs	r2, #5
 801975e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019762:	4858      	ldr	r0, [pc, #352]	; (80198c4 <_vfiprintf_r+0x24c>)
 8019764:	f7e6 fd34 	bl	80001d0 <memchr>
 8019768:	9a04      	ldr	r2, [sp, #16]
 801976a:	b9d8      	cbnz	r0, 80197a4 <_vfiprintf_r+0x12c>
 801976c:	06d1      	lsls	r1, r2, #27
 801976e:	bf44      	itt	mi
 8019770:	2320      	movmi	r3, #32
 8019772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019776:	0713      	lsls	r3, r2, #28
 8019778:	bf44      	itt	mi
 801977a:	232b      	movmi	r3, #43	; 0x2b
 801977c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019780:	f89a 3000 	ldrb.w	r3, [sl]
 8019784:	2b2a      	cmp	r3, #42	; 0x2a
 8019786:	d015      	beq.n	80197b4 <_vfiprintf_r+0x13c>
 8019788:	9a07      	ldr	r2, [sp, #28]
 801978a:	4654      	mov	r4, sl
 801978c:	2000      	movs	r0, #0
 801978e:	f04f 0c0a 	mov.w	ip, #10
 8019792:	4621      	mov	r1, r4
 8019794:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019798:	3b30      	subs	r3, #48	; 0x30
 801979a:	2b09      	cmp	r3, #9
 801979c:	d94e      	bls.n	801983c <_vfiprintf_r+0x1c4>
 801979e:	b1b0      	cbz	r0, 80197ce <_vfiprintf_r+0x156>
 80197a0:	9207      	str	r2, [sp, #28]
 80197a2:	e014      	b.n	80197ce <_vfiprintf_r+0x156>
 80197a4:	eba0 0308 	sub.w	r3, r0, r8
 80197a8:	fa09 f303 	lsl.w	r3, r9, r3
 80197ac:	4313      	orrs	r3, r2
 80197ae:	9304      	str	r3, [sp, #16]
 80197b0:	46a2      	mov	sl, r4
 80197b2:	e7d2      	b.n	801975a <_vfiprintf_r+0xe2>
 80197b4:	9b03      	ldr	r3, [sp, #12]
 80197b6:	1d19      	adds	r1, r3, #4
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	9103      	str	r1, [sp, #12]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	bfbb      	ittet	lt
 80197c0:	425b      	neglt	r3, r3
 80197c2:	f042 0202 	orrlt.w	r2, r2, #2
 80197c6:	9307      	strge	r3, [sp, #28]
 80197c8:	9307      	strlt	r3, [sp, #28]
 80197ca:	bfb8      	it	lt
 80197cc:	9204      	strlt	r2, [sp, #16]
 80197ce:	7823      	ldrb	r3, [r4, #0]
 80197d0:	2b2e      	cmp	r3, #46	; 0x2e
 80197d2:	d10c      	bne.n	80197ee <_vfiprintf_r+0x176>
 80197d4:	7863      	ldrb	r3, [r4, #1]
 80197d6:	2b2a      	cmp	r3, #42	; 0x2a
 80197d8:	d135      	bne.n	8019846 <_vfiprintf_r+0x1ce>
 80197da:	9b03      	ldr	r3, [sp, #12]
 80197dc:	1d1a      	adds	r2, r3, #4
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	9203      	str	r2, [sp, #12]
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	bfb8      	it	lt
 80197e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80197ea:	3402      	adds	r4, #2
 80197ec:	9305      	str	r3, [sp, #20]
 80197ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80198d4 <_vfiprintf_r+0x25c>
 80197f2:	7821      	ldrb	r1, [r4, #0]
 80197f4:	2203      	movs	r2, #3
 80197f6:	4650      	mov	r0, sl
 80197f8:	f7e6 fcea 	bl	80001d0 <memchr>
 80197fc:	b140      	cbz	r0, 8019810 <_vfiprintf_r+0x198>
 80197fe:	2340      	movs	r3, #64	; 0x40
 8019800:	eba0 000a 	sub.w	r0, r0, sl
 8019804:	fa03 f000 	lsl.w	r0, r3, r0
 8019808:	9b04      	ldr	r3, [sp, #16]
 801980a:	4303      	orrs	r3, r0
 801980c:	3401      	adds	r4, #1
 801980e:	9304      	str	r3, [sp, #16]
 8019810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019814:	482c      	ldr	r0, [pc, #176]	; (80198c8 <_vfiprintf_r+0x250>)
 8019816:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801981a:	2206      	movs	r2, #6
 801981c:	f7e6 fcd8 	bl	80001d0 <memchr>
 8019820:	2800      	cmp	r0, #0
 8019822:	d03f      	beq.n	80198a4 <_vfiprintf_r+0x22c>
 8019824:	4b29      	ldr	r3, [pc, #164]	; (80198cc <_vfiprintf_r+0x254>)
 8019826:	bb1b      	cbnz	r3, 8019870 <_vfiprintf_r+0x1f8>
 8019828:	9b03      	ldr	r3, [sp, #12]
 801982a:	3307      	adds	r3, #7
 801982c:	f023 0307 	bic.w	r3, r3, #7
 8019830:	3308      	adds	r3, #8
 8019832:	9303      	str	r3, [sp, #12]
 8019834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019836:	443b      	add	r3, r7
 8019838:	9309      	str	r3, [sp, #36]	; 0x24
 801983a:	e767      	b.n	801970c <_vfiprintf_r+0x94>
 801983c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019840:	460c      	mov	r4, r1
 8019842:	2001      	movs	r0, #1
 8019844:	e7a5      	b.n	8019792 <_vfiprintf_r+0x11a>
 8019846:	2300      	movs	r3, #0
 8019848:	3401      	adds	r4, #1
 801984a:	9305      	str	r3, [sp, #20]
 801984c:	4619      	mov	r1, r3
 801984e:	f04f 0c0a 	mov.w	ip, #10
 8019852:	4620      	mov	r0, r4
 8019854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019858:	3a30      	subs	r2, #48	; 0x30
 801985a:	2a09      	cmp	r2, #9
 801985c:	d903      	bls.n	8019866 <_vfiprintf_r+0x1ee>
 801985e:	2b00      	cmp	r3, #0
 8019860:	d0c5      	beq.n	80197ee <_vfiprintf_r+0x176>
 8019862:	9105      	str	r1, [sp, #20]
 8019864:	e7c3      	b.n	80197ee <_vfiprintf_r+0x176>
 8019866:	fb0c 2101 	mla	r1, ip, r1, r2
 801986a:	4604      	mov	r4, r0
 801986c:	2301      	movs	r3, #1
 801986e:	e7f0      	b.n	8019852 <_vfiprintf_r+0x1da>
 8019870:	ab03      	add	r3, sp, #12
 8019872:	9300      	str	r3, [sp, #0]
 8019874:	462a      	mov	r2, r5
 8019876:	4b16      	ldr	r3, [pc, #88]	; (80198d0 <_vfiprintf_r+0x258>)
 8019878:	a904      	add	r1, sp, #16
 801987a:	4630      	mov	r0, r6
 801987c:	f3af 8000 	nop.w
 8019880:	4607      	mov	r7, r0
 8019882:	1c78      	adds	r0, r7, #1
 8019884:	d1d6      	bne.n	8019834 <_vfiprintf_r+0x1bc>
 8019886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019888:	07d9      	lsls	r1, r3, #31
 801988a:	d405      	bmi.n	8019898 <_vfiprintf_r+0x220>
 801988c:	89ab      	ldrh	r3, [r5, #12]
 801988e:	059a      	lsls	r2, r3, #22
 8019890:	d402      	bmi.n	8019898 <_vfiprintf_r+0x220>
 8019892:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019894:	f7ff fe55 	bl	8019542 <__retarget_lock_release_recursive>
 8019898:	89ab      	ldrh	r3, [r5, #12]
 801989a:	065b      	lsls	r3, r3, #25
 801989c:	f53f af12 	bmi.w	80196c4 <_vfiprintf_r+0x4c>
 80198a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80198a2:	e711      	b.n	80196c8 <_vfiprintf_r+0x50>
 80198a4:	ab03      	add	r3, sp, #12
 80198a6:	9300      	str	r3, [sp, #0]
 80198a8:	462a      	mov	r2, r5
 80198aa:	4b09      	ldr	r3, [pc, #36]	; (80198d0 <_vfiprintf_r+0x258>)
 80198ac:	a904      	add	r1, sp, #16
 80198ae:	4630      	mov	r0, r6
 80198b0:	f000 f880 	bl	80199b4 <_printf_i>
 80198b4:	e7e4      	b.n	8019880 <_vfiprintf_r+0x208>
 80198b6:	bf00      	nop
 80198b8:	0801d2f0 	.word	0x0801d2f0
 80198bc:	0801d310 	.word	0x0801d310
 80198c0:	0801d2d0 	.word	0x0801d2d0
 80198c4:	0801d330 	.word	0x0801d330
 80198c8:	0801d33a 	.word	0x0801d33a
 80198cc:	00000000 	.word	0x00000000
 80198d0:	08019653 	.word	0x08019653
 80198d4:	0801d336 	.word	0x0801d336

080198d8 <_printf_common>:
 80198d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198dc:	4616      	mov	r6, r2
 80198de:	4699      	mov	r9, r3
 80198e0:	688a      	ldr	r2, [r1, #8]
 80198e2:	690b      	ldr	r3, [r1, #16]
 80198e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80198e8:	4293      	cmp	r3, r2
 80198ea:	bfb8      	it	lt
 80198ec:	4613      	movlt	r3, r2
 80198ee:	6033      	str	r3, [r6, #0]
 80198f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80198f4:	4607      	mov	r7, r0
 80198f6:	460c      	mov	r4, r1
 80198f8:	b10a      	cbz	r2, 80198fe <_printf_common+0x26>
 80198fa:	3301      	adds	r3, #1
 80198fc:	6033      	str	r3, [r6, #0]
 80198fe:	6823      	ldr	r3, [r4, #0]
 8019900:	0699      	lsls	r1, r3, #26
 8019902:	bf42      	ittt	mi
 8019904:	6833      	ldrmi	r3, [r6, #0]
 8019906:	3302      	addmi	r3, #2
 8019908:	6033      	strmi	r3, [r6, #0]
 801990a:	6825      	ldr	r5, [r4, #0]
 801990c:	f015 0506 	ands.w	r5, r5, #6
 8019910:	d106      	bne.n	8019920 <_printf_common+0x48>
 8019912:	f104 0a19 	add.w	sl, r4, #25
 8019916:	68e3      	ldr	r3, [r4, #12]
 8019918:	6832      	ldr	r2, [r6, #0]
 801991a:	1a9b      	subs	r3, r3, r2
 801991c:	42ab      	cmp	r3, r5
 801991e:	dc26      	bgt.n	801996e <_printf_common+0x96>
 8019920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019924:	1e13      	subs	r3, r2, #0
 8019926:	6822      	ldr	r2, [r4, #0]
 8019928:	bf18      	it	ne
 801992a:	2301      	movne	r3, #1
 801992c:	0692      	lsls	r2, r2, #26
 801992e:	d42b      	bmi.n	8019988 <_printf_common+0xb0>
 8019930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019934:	4649      	mov	r1, r9
 8019936:	4638      	mov	r0, r7
 8019938:	47c0      	blx	r8
 801993a:	3001      	adds	r0, #1
 801993c:	d01e      	beq.n	801997c <_printf_common+0xa4>
 801993e:	6823      	ldr	r3, [r4, #0]
 8019940:	68e5      	ldr	r5, [r4, #12]
 8019942:	6832      	ldr	r2, [r6, #0]
 8019944:	f003 0306 	and.w	r3, r3, #6
 8019948:	2b04      	cmp	r3, #4
 801994a:	bf08      	it	eq
 801994c:	1aad      	subeq	r5, r5, r2
 801994e:	68a3      	ldr	r3, [r4, #8]
 8019950:	6922      	ldr	r2, [r4, #16]
 8019952:	bf0c      	ite	eq
 8019954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019958:	2500      	movne	r5, #0
 801995a:	4293      	cmp	r3, r2
 801995c:	bfc4      	itt	gt
 801995e:	1a9b      	subgt	r3, r3, r2
 8019960:	18ed      	addgt	r5, r5, r3
 8019962:	2600      	movs	r6, #0
 8019964:	341a      	adds	r4, #26
 8019966:	42b5      	cmp	r5, r6
 8019968:	d11a      	bne.n	80199a0 <_printf_common+0xc8>
 801996a:	2000      	movs	r0, #0
 801996c:	e008      	b.n	8019980 <_printf_common+0xa8>
 801996e:	2301      	movs	r3, #1
 8019970:	4652      	mov	r2, sl
 8019972:	4649      	mov	r1, r9
 8019974:	4638      	mov	r0, r7
 8019976:	47c0      	blx	r8
 8019978:	3001      	adds	r0, #1
 801997a:	d103      	bne.n	8019984 <_printf_common+0xac>
 801997c:	f04f 30ff 	mov.w	r0, #4294967295
 8019980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019984:	3501      	adds	r5, #1
 8019986:	e7c6      	b.n	8019916 <_printf_common+0x3e>
 8019988:	18e1      	adds	r1, r4, r3
 801998a:	1c5a      	adds	r2, r3, #1
 801998c:	2030      	movs	r0, #48	; 0x30
 801998e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019992:	4422      	add	r2, r4
 8019994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801999c:	3302      	adds	r3, #2
 801999e:	e7c7      	b.n	8019930 <_printf_common+0x58>
 80199a0:	2301      	movs	r3, #1
 80199a2:	4622      	mov	r2, r4
 80199a4:	4649      	mov	r1, r9
 80199a6:	4638      	mov	r0, r7
 80199a8:	47c0      	blx	r8
 80199aa:	3001      	adds	r0, #1
 80199ac:	d0e6      	beq.n	801997c <_printf_common+0xa4>
 80199ae:	3601      	adds	r6, #1
 80199b0:	e7d9      	b.n	8019966 <_printf_common+0x8e>
	...

080199b4 <_printf_i>:
 80199b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80199b8:	460c      	mov	r4, r1
 80199ba:	4691      	mov	r9, r2
 80199bc:	7e27      	ldrb	r7, [r4, #24]
 80199be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80199c0:	2f78      	cmp	r7, #120	; 0x78
 80199c2:	4680      	mov	r8, r0
 80199c4:	469a      	mov	sl, r3
 80199c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80199ca:	d807      	bhi.n	80199dc <_printf_i+0x28>
 80199cc:	2f62      	cmp	r7, #98	; 0x62
 80199ce:	d80a      	bhi.n	80199e6 <_printf_i+0x32>
 80199d0:	2f00      	cmp	r7, #0
 80199d2:	f000 80d8 	beq.w	8019b86 <_printf_i+0x1d2>
 80199d6:	2f58      	cmp	r7, #88	; 0x58
 80199d8:	f000 80a3 	beq.w	8019b22 <_printf_i+0x16e>
 80199dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80199e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80199e4:	e03a      	b.n	8019a5c <_printf_i+0xa8>
 80199e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80199ea:	2b15      	cmp	r3, #21
 80199ec:	d8f6      	bhi.n	80199dc <_printf_i+0x28>
 80199ee:	a001      	add	r0, pc, #4	; (adr r0, 80199f4 <_printf_i+0x40>)
 80199f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80199f4:	08019a4d 	.word	0x08019a4d
 80199f8:	08019a61 	.word	0x08019a61
 80199fc:	080199dd 	.word	0x080199dd
 8019a00:	080199dd 	.word	0x080199dd
 8019a04:	080199dd 	.word	0x080199dd
 8019a08:	080199dd 	.word	0x080199dd
 8019a0c:	08019a61 	.word	0x08019a61
 8019a10:	080199dd 	.word	0x080199dd
 8019a14:	080199dd 	.word	0x080199dd
 8019a18:	080199dd 	.word	0x080199dd
 8019a1c:	080199dd 	.word	0x080199dd
 8019a20:	08019b6d 	.word	0x08019b6d
 8019a24:	08019a91 	.word	0x08019a91
 8019a28:	08019b4f 	.word	0x08019b4f
 8019a2c:	080199dd 	.word	0x080199dd
 8019a30:	080199dd 	.word	0x080199dd
 8019a34:	08019b8f 	.word	0x08019b8f
 8019a38:	080199dd 	.word	0x080199dd
 8019a3c:	08019a91 	.word	0x08019a91
 8019a40:	080199dd 	.word	0x080199dd
 8019a44:	080199dd 	.word	0x080199dd
 8019a48:	08019b57 	.word	0x08019b57
 8019a4c:	680b      	ldr	r3, [r1, #0]
 8019a4e:	1d1a      	adds	r2, r3, #4
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	600a      	str	r2, [r1, #0]
 8019a54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019a58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019a5c:	2301      	movs	r3, #1
 8019a5e:	e0a3      	b.n	8019ba8 <_printf_i+0x1f4>
 8019a60:	6825      	ldr	r5, [r4, #0]
 8019a62:	6808      	ldr	r0, [r1, #0]
 8019a64:	062e      	lsls	r6, r5, #24
 8019a66:	f100 0304 	add.w	r3, r0, #4
 8019a6a:	d50a      	bpl.n	8019a82 <_printf_i+0xce>
 8019a6c:	6805      	ldr	r5, [r0, #0]
 8019a6e:	600b      	str	r3, [r1, #0]
 8019a70:	2d00      	cmp	r5, #0
 8019a72:	da03      	bge.n	8019a7c <_printf_i+0xc8>
 8019a74:	232d      	movs	r3, #45	; 0x2d
 8019a76:	426d      	negs	r5, r5
 8019a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a7c:	485e      	ldr	r0, [pc, #376]	; (8019bf8 <_printf_i+0x244>)
 8019a7e:	230a      	movs	r3, #10
 8019a80:	e019      	b.n	8019ab6 <_printf_i+0x102>
 8019a82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8019a86:	6805      	ldr	r5, [r0, #0]
 8019a88:	600b      	str	r3, [r1, #0]
 8019a8a:	bf18      	it	ne
 8019a8c:	b22d      	sxthne	r5, r5
 8019a8e:	e7ef      	b.n	8019a70 <_printf_i+0xbc>
 8019a90:	680b      	ldr	r3, [r1, #0]
 8019a92:	6825      	ldr	r5, [r4, #0]
 8019a94:	1d18      	adds	r0, r3, #4
 8019a96:	6008      	str	r0, [r1, #0]
 8019a98:	0628      	lsls	r0, r5, #24
 8019a9a:	d501      	bpl.n	8019aa0 <_printf_i+0xec>
 8019a9c:	681d      	ldr	r5, [r3, #0]
 8019a9e:	e002      	b.n	8019aa6 <_printf_i+0xf2>
 8019aa0:	0669      	lsls	r1, r5, #25
 8019aa2:	d5fb      	bpl.n	8019a9c <_printf_i+0xe8>
 8019aa4:	881d      	ldrh	r5, [r3, #0]
 8019aa6:	4854      	ldr	r0, [pc, #336]	; (8019bf8 <_printf_i+0x244>)
 8019aa8:	2f6f      	cmp	r7, #111	; 0x6f
 8019aaa:	bf0c      	ite	eq
 8019aac:	2308      	moveq	r3, #8
 8019aae:	230a      	movne	r3, #10
 8019ab0:	2100      	movs	r1, #0
 8019ab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019ab6:	6866      	ldr	r6, [r4, #4]
 8019ab8:	60a6      	str	r6, [r4, #8]
 8019aba:	2e00      	cmp	r6, #0
 8019abc:	bfa2      	ittt	ge
 8019abe:	6821      	ldrge	r1, [r4, #0]
 8019ac0:	f021 0104 	bicge.w	r1, r1, #4
 8019ac4:	6021      	strge	r1, [r4, #0]
 8019ac6:	b90d      	cbnz	r5, 8019acc <_printf_i+0x118>
 8019ac8:	2e00      	cmp	r6, #0
 8019aca:	d04d      	beq.n	8019b68 <_printf_i+0x1b4>
 8019acc:	4616      	mov	r6, r2
 8019ace:	fbb5 f1f3 	udiv	r1, r5, r3
 8019ad2:	fb03 5711 	mls	r7, r3, r1, r5
 8019ad6:	5dc7      	ldrb	r7, [r0, r7]
 8019ad8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019adc:	462f      	mov	r7, r5
 8019ade:	42bb      	cmp	r3, r7
 8019ae0:	460d      	mov	r5, r1
 8019ae2:	d9f4      	bls.n	8019ace <_printf_i+0x11a>
 8019ae4:	2b08      	cmp	r3, #8
 8019ae6:	d10b      	bne.n	8019b00 <_printf_i+0x14c>
 8019ae8:	6823      	ldr	r3, [r4, #0]
 8019aea:	07df      	lsls	r7, r3, #31
 8019aec:	d508      	bpl.n	8019b00 <_printf_i+0x14c>
 8019aee:	6923      	ldr	r3, [r4, #16]
 8019af0:	6861      	ldr	r1, [r4, #4]
 8019af2:	4299      	cmp	r1, r3
 8019af4:	bfde      	ittt	le
 8019af6:	2330      	movle	r3, #48	; 0x30
 8019af8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019afc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019b00:	1b92      	subs	r2, r2, r6
 8019b02:	6122      	str	r2, [r4, #16]
 8019b04:	f8cd a000 	str.w	sl, [sp]
 8019b08:	464b      	mov	r3, r9
 8019b0a:	aa03      	add	r2, sp, #12
 8019b0c:	4621      	mov	r1, r4
 8019b0e:	4640      	mov	r0, r8
 8019b10:	f7ff fee2 	bl	80198d8 <_printf_common>
 8019b14:	3001      	adds	r0, #1
 8019b16:	d14c      	bne.n	8019bb2 <_printf_i+0x1fe>
 8019b18:	f04f 30ff 	mov.w	r0, #4294967295
 8019b1c:	b004      	add	sp, #16
 8019b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b22:	4835      	ldr	r0, [pc, #212]	; (8019bf8 <_printf_i+0x244>)
 8019b24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019b28:	6823      	ldr	r3, [r4, #0]
 8019b2a:	680e      	ldr	r6, [r1, #0]
 8019b2c:	061f      	lsls	r7, r3, #24
 8019b2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8019b32:	600e      	str	r6, [r1, #0]
 8019b34:	d514      	bpl.n	8019b60 <_printf_i+0x1ac>
 8019b36:	07d9      	lsls	r1, r3, #31
 8019b38:	bf44      	itt	mi
 8019b3a:	f043 0320 	orrmi.w	r3, r3, #32
 8019b3e:	6023      	strmi	r3, [r4, #0]
 8019b40:	b91d      	cbnz	r5, 8019b4a <_printf_i+0x196>
 8019b42:	6823      	ldr	r3, [r4, #0]
 8019b44:	f023 0320 	bic.w	r3, r3, #32
 8019b48:	6023      	str	r3, [r4, #0]
 8019b4a:	2310      	movs	r3, #16
 8019b4c:	e7b0      	b.n	8019ab0 <_printf_i+0xfc>
 8019b4e:	6823      	ldr	r3, [r4, #0]
 8019b50:	f043 0320 	orr.w	r3, r3, #32
 8019b54:	6023      	str	r3, [r4, #0]
 8019b56:	2378      	movs	r3, #120	; 0x78
 8019b58:	4828      	ldr	r0, [pc, #160]	; (8019bfc <_printf_i+0x248>)
 8019b5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019b5e:	e7e3      	b.n	8019b28 <_printf_i+0x174>
 8019b60:	065e      	lsls	r6, r3, #25
 8019b62:	bf48      	it	mi
 8019b64:	b2ad      	uxthmi	r5, r5
 8019b66:	e7e6      	b.n	8019b36 <_printf_i+0x182>
 8019b68:	4616      	mov	r6, r2
 8019b6a:	e7bb      	b.n	8019ae4 <_printf_i+0x130>
 8019b6c:	680b      	ldr	r3, [r1, #0]
 8019b6e:	6826      	ldr	r6, [r4, #0]
 8019b70:	6960      	ldr	r0, [r4, #20]
 8019b72:	1d1d      	adds	r5, r3, #4
 8019b74:	600d      	str	r5, [r1, #0]
 8019b76:	0635      	lsls	r5, r6, #24
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	d501      	bpl.n	8019b80 <_printf_i+0x1cc>
 8019b7c:	6018      	str	r0, [r3, #0]
 8019b7e:	e002      	b.n	8019b86 <_printf_i+0x1d2>
 8019b80:	0671      	lsls	r1, r6, #25
 8019b82:	d5fb      	bpl.n	8019b7c <_printf_i+0x1c8>
 8019b84:	8018      	strh	r0, [r3, #0]
 8019b86:	2300      	movs	r3, #0
 8019b88:	6123      	str	r3, [r4, #16]
 8019b8a:	4616      	mov	r6, r2
 8019b8c:	e7ba      	b.n	8019b04 <_printf_i+0x150>
 8019b8e:	680b      	ldr	r3, [r1, #0]
 8019b90:	1d1a      	adds	r2, r3, #4
 8019b92:	600a      	str	r2, [r1, #0]
 8019b94:	681e      	ldr	r6, [r3, #0]
 8019b96:	6862      	ldr	r2, [r4, #4]
 8019b98:	2100      	movs	r1, #0
 8019b9a:	4630      	mov	r0, r6
 8019b9c:	f7e6 fb18 	bl	80001d0 <memchr>
 8019ba0:	b108      	cbz	r0, 8019ba6 <_printf_i+0x1f2>
 8019ba2:	1b80      	subs	r0, r0, r6
 8019ba4:	6060      	str	r0, [r4, #4]
 8019ba6:	6863      	ldr	r3, [r4, #4]
 8019ba8:	6123      	str	r3, [r4, #16]
 8019baa:	2300      	movs	r3, #0
 8019bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019bb0:	e7a8      	b.n	8019b04 <_printf_i+0x150>
 8019bb2:	6923      	ldr	r3, [r4, #16]
 8019bb4:	4632      	mov	r2, r6
 8019bb6:	4649      	mov	r1, r9
 8019bb8:	4640      	mov	r0, r8
 8019bba:	47d0      	blx	sl
 8019bbc:	3001      	adds	r0, #1
 8019bbe:	d0ab      	beq.n	8019b18 <_printf_i+0x164>
 8019bc0:	6823      	ldr	r3, [r4, #0]
 8019bc2:	079b      	lsls	r3, r3, #30
 8019bc4:	d413      	bmi.n	8019bee <_printf_i+0x23a>
 8019bc6:	68e0      	ldr	r0, [r4, #12]
 8019bc8:	9b03      	ldr	r3, [sp, #12]
 8019bca:	4298      	cmp	r0, r3
 8019bcc:	bfb8      	it	lt
 8019bce:	4618      	movlt	r0, r3
 8019bd0:	e7a4      	b.n	8019b1c <_printf_i+0x168>
 8019bd2:	2301      	movs	r3, #1
 8019bd4:	4632      	mov	r2, r6
 8019bd6:	4649      	mov	r1, r9
 8019bd8:	4640      	mov	r0, r8
 8019bda:	47d0      	blx	sl
 8019bdc:	3001      	adds	r0, #1
 8019bde:	d09b      	beq.n	8019b18 <_printf_i+0x164>
 8019be0:	3501      	adds	r5, #1
 8019be2:	68e3      	ldr	r3, [r4, #12]
 8019be4:	9903      	ldr	r1, [sp, #12]
 8019be6:	1a5b      	subs	r3, r3, r1
 8019be8:	42ab      	cmp	r3, r5
 8019bea:	dcf2      	bgt.n	8019bd2 <_printf_i+0x21e>
 8019bec:	e7eb      	b.n	8019bc6 <_printf_i+0x212>
 8019bee:	2500      	movs	r5, #0
 8019bf0:	f104 0619 	add.w	r6, r4, #25
 8019bf4:	e7f5      	b.n	8019be2 <_printf_i+0x22e>
 8019bf6:	bf00      	nop
 8019bf8:	0801d341 	.word	0x0801d341
 8019bfc:	0801d352 	.word	0x0801d352

08019c00 <_putc_r>:
 8019c00:	b570      	push	{r4, r5, r6, lr}
 8019c02:	460d      	mov	r5, r1
 8019c04:	4614      	mov	r4, r2
 8019c06:	4606      	mov	r6, r0
 8019c08:	b118      	cbz	r0, 8019c12 <_putc_r+0x12>
 8019c0a:	6983      	ldr	r3, [r0, #24]
 8019c0c:	b90b      	cbnz	r3, 8019c12 <_putc_r+0x12>
 8019c0e:	f7ff fbe7 	bl	80193e0 <__sinit>
 8019c12:	4b1c      	ldr	r3, [pc, #112]	; (8019c84 <_putc_r+0x84>)
 8019c14:	429c      	cmp	r4, r3
 8019c16:	d124      	bne.n	8019c62 <_putc_r+0x62>
 8019c18:	6874      	ldr	r4, [r6, #4]
 8019c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019c1c:	07d8      	lsls	r0, r3, #31
 8019c1e:	d405      	bmi.n	8019c2c <_putc_r+0x2c>
 8019c20:	89a3      	ldrh	r3, [r4, #12]
 8019c22:	0599      	lsls	r1, r3, #22
 8019c24:	d402      	bmi.n	8019c2c <_putc_r+0x2c>
 8019c26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019c28:	f7ff fc8a 	bl	8019540 <__retarget_lock_acquire_recursive>
 8019c2c:	68a3      	ldr	r3, [r4, #8]
 8019c2e:	3b01      	subs	r3, #1
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	60a3      	str	r3, [r4, #8]
 8019c34:	da05      	bge.n	8019c42 <_putc_r+0x42>
 8019c36:	69a2      	ldr	r2, [r4, #24]
 8019c38:	4293      	cmp	r3, r2
 8019c3a:	db1c      	blt.n	8019c76 <_putc_r+0x76>
 8019c3c:	b2eb      	uxtb	r3, r5
 8019c3e:	2b0a      	cmp	r3, #10
 8019c40:	d019      	beq.n	8019c76 <_putc_r+0x76>
 8019c42:	6823      	ldr	r3, [r4, #0]
 8019c44:	1c5a      	adds	r2, r3, #1
 8019c46:	6022      	str	r2, [r4, #0]
 8019c48:	701d      	strb	r5, [r3, #0]
 8019c4a:	b2ed      	uxtb	r5, r5
 8019c4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019c4e:	07da      	lsls	r2, r3, #31
 8019c50:	d405      	bmi.n	8019c5e <_putc_r+0x5e>
 8019c52:	89a3      	ldrh	r3, [r4, #12]
 8019c54:	059b      	lsls	r3, r3, #22
 8019c56:	d402      	bmi.n	8019c5e <_putc_r+0x5e>
 8019c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019c5a:	f7ff fc72 	bl	8019542 <__retarget_lock_release_recursive>
 8019c5e:	4628      	mov	r0, r5
 8019c60:	bd70      	pop	{r4, r5, r6, pc}
 8019c62:	4b09      	ldr	r3, [pc, #36]	; (8019c88 <_putc_r+0x88>)
 8019c64:	429c      	cmp	r4, r3
 8019c66:	d101      	bne.n	8019c6c <_putc_r+0x6c>
 8019c68:	68b4      	ldr	r4, [r6, #8]
 8019c6a:	e7d6      	b.n	8019c1a <_putc_r+0x1a>
 8019c6c:	4b07      	ldr	r3, [pc, #28]	; (8019c8c <_putc_r+0x8c>)
 8019c6e:	429c      	cmp	r4, r3
 8019c70:	bf08      	it	eq
 8019c72:	68f4      	ldreq	r4, [r6, #12]
 8019c74:	e7d1      	b.n	8019c1a <_putc_r+0x1a>
 8019c76:	4629      	mov	r1, r5
 8019c78:	4622      	mov	r2, r4
 8019c7a:	4630      	mov	r0, r6
 8019c7c:	f7ff f9b8 	bl	8018ff0 <__swbuf_r>
 8019c80:	4605      	mov	r5, r0
 8019c82:	e7e3      	b.n	8019c4c <_putc_r+0x4c>
 8019c84:	0801d2f0 	.word	0x0801d2f0
 8019c88:	0801d310 	.word	0x0801d310
 8019c8c:	0801d2d0 	.word	0x0801d2d0

08019c90 <__sread>:
 8019c90:	b510      	push	{r4, lr}
 8019c92:	460c      	mov	r4, r1
 8019c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c98:	f000 f89c 	bl	8019dd4 <_read_r>
 8019c9c:	2800      	cmp	r0, #0
 8019c9e:	bfab      	itete	ge
 8019ca0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8019ca4:	181b      	addge	r3, r3, r0
 8019ca6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019caa:	bfac      	ite	ge
 8019cac:	6563      	strge	r3, [r4, #84]	; 0x54
 8019cae:	81a3      	strhlt	r3, [r4, #12]
 8019cb0:	bd10      	pop	{r4, pc}

08019cb2 <__swrite>:
 8019cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cb6:	461f      	mov	r7, r3
 8019cb8:	898b      	ldrh	r3, [r1, #12]
 8019cba:	05db      	lsls	r3, r3, #23
 8019cbc:	4605      	mov	r5, r0
 8019cbe:	460c      	mov	r4, r1
 8019cc0:	4616      	mov	r6, r2
 8019cc2:	d505      	bpl.n	8019cd0 <__swrite+0x1e>
 8019cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019cc8:	2302      	movs	r3, #2
 8019cca:	2200      	movs	r2, #0
 8019ccc:	f000 f870 	bl	8019db0 <_lseek_r>
 8019cd0:	89a3      	ldrh	r3, [r4, #12]
 8019cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019cd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019cda:	81a3      	strh	r3, [r4, #12]
 8019cdc:	4632      	mov	r2, r6
 8019cde:	463b      	mov	r3, r7
 8019ce0:	4628      	mov	r0, r5
 8019ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019ce6:	f000 b817 	b.w	8019d18 <_write_r>

08019cea <__sseek>:
 8019cea:	b510      	push	{r4, lr}
 8019cec:	460c      	mov	r4, r1
 8019cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019cf2:	f000 f85d 	bl	8019db0 <_lseek_r>
 8019cf6:	1c43      	adds	r3, r0, #1
 8019cf8:	89a3      	ldrh	r3, [r4, #12]
 8019cfa:	bf15      	itete	ne
 8019cfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8019cfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019d02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019d06:	81a3      	strheq	r3, [r4, #12]
 8019d08:	bf18      	it	ne
 8019d0a:	81a3      	strhne	r3, [r4, #12]
 8019d0c:	bd10      	pop	{r4, pc}

08019d0e <__sclose>:
 8019d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d12:	f000 b81b 	b.w	8019d4c <_close_r>
	...

08019d18 <_write_r>:
 8019d18:	b538      	push	{r3, r4, r5, lr}
 8019d1a:	4d07      	ldr	r5, [pc, #28]	; (8019d38 <_write_r+0x20>)
 8019d1c:	4604      	mov	r4, r0
 8019d1e:	4608      	mov	r0, r1
 8019d20:	4611      	mov	r1, r2
 8019d22:	2200      	movs	r2, #0
 8019d24:	602a      	str	r2, [r5, #0]
 8019d26:	461a      	mov	r2, r3
 8019d28:	f7e7 fce7 	bl	80016fa <_write>
 8019d2c:	1c43      	adds	r3, r0, #1
 8019d2e:	d102      	bne.n	8019d36 <_write_r+0x1e>
 8019d30:	682b      	ldr	r3, [r5, #0]
 8019d32:	b103      	cbz	r3, 8019d36 <_write_r+0x1e>
 8019d34:	6023      	str	r3, [r4, #0]
 8019d36:	bd38      	pop	{r3, r4, r5, pc}
 8019d38:	20018e94 	.word	0x20018e94

08019d3c <abort>:
 8019d3c:	b508      	push	{r3, lr}
 8019d3e:	2006      	movs	r0, #6
 8019d40:	f000 f882 	bl	8019e48 <raise>
 8019d44:	2001      	movs	r0, #1
 8019d46:	f7e7 fcb1 	bl	80016ac <_exit>
	...

08019d4c <_close_r>:
 8019d4c:	b538      	push	{r3, r4, r5, lr}
 8019d4e:	4d06      	ldr	r5, [pc, #24]	; (8019d68 <_close_r+0x1c>)
 8019d50:	2300      	movs	r3, #0
 8019d52:	4604      	mov	r4, r0
 8019d54:	4608      	mov	r0, r1
 8019d56:	602b      	str	r3, [r5, #0]
 8019d58:	f7e7 fceb 	bl	8001732 <_close>
 8019d5c:	1c43      	adds	r3, r0, #1
 8019d5e:	d102      	bne.n	8019d66 <_close_r+0x1a>
 8019d60:	682b      	ldr	r3, [r5, #0]
 8019d62:	b103      	cbz	r3, 8019d66 <_close_r+0x1a>
 8019d64:	6023      	str	r3, [r4, #0]
 8019d66:	bd38      	pop	{r3, r4, r5, pc}
 8019d68:	20018e94 	.word	0x20018e94

08019d6c <_fstat_r>:
 8019d6c:	b538      	push	{r3, r4, r5, lr}
 8019d6e:	4d07      	ldr	r5, [pc, #28]	; (8019d8c <_fstat_r+0x20>)
 8019d70:	2300      	movs	r3, #0
 8019d72:	4604      	mov	r4, r0
 8019d74:	4608      	mov	r0, r1
 8019d76:	4611      	mov	r1, r2
 8019d78:	602b      	str	r3, [r5, #0]
 8019d7a:	f7e7 fce6 	bl	800174a <_fstat>
 8019d7e:	1c43      	adds	r3, r0, #1
 8019d80:	d102      	bne.n	8019d88 <_fstat_r+0x1c>
 8019d82:	682b      	ldr	r3, [r5, #0]
 8019d84:	b103      	cbz	r3, 8019d88 <_fstat_r+0x1c>
 8019d86:	6023      	str	r3, [r4, #0]
 8019d88:	bd38      	pop	{r3, r4, r5, pc}
 8019d8a:	bf00      	nop
 8019d8c:	20018e94 	.word	0x20018e94

08019d90 <_isatty_r>:
 8019d90:	b538      	push	{r3, r4, r5, lr}
 8019d92:	4d06      	ldr	r5, [pc, #24]	; (8019dac <_isatty_r+0x1c>)
 8019d94:	2300      	movs	r3, #0
 8019d96:	4604      	mov	r4, r0
 8019d98:	4608      	mov	r0, r1
 8019d9a:	602b      	str	r3, [r5, #0]
 8019d9c:	f7e7 fce5 	bl	800176a <_isatty>
 8019da0:	1c43      	adds	r3, r0, #1
 8019da2:	d102      	bne.n	8019daa <_isatty_r+0x1a>
 8019da4:	682b      	ldr	r3, [r5, #0]
 8019da6:	b103      	cbz	r3, 8019daa <_isatty_r+0x1a>
 8019da8:	6023      	str	r3, [r4, #0]
 8019daa:	bd38      	pop	{r3, r4, r5, pc}
 8019dac:	20018e94 	.word	0x20018e94

08019db0 <_lseek_r>:
 8019db0:	b538      	push	{r3, r4, r5, lr}
 8019db2:	4d07      	ldr	r5, [pc, #28]	; (8019dd0 <_lseek_r+0x20>)
 8019db4:	4604      	mov	r4, r0
 8019db6:	4608      	mov	r0, r1
 8019db8:	4611      	mov	r1, r2
 8019dba:	2200      	movs	r2, #0
 8019dbc:	602a      	str	r2, [r5, #0]
 8019dbe:	461a      	mov	r2, r3
 8019dc0:	f7e7 fcde 	bl	8001780 <_lseek>
 8019dc4:	1c43      	adds	r3, r0, #1
 8019dc6:	d102      	bne.n	8019dce <_lseek_r+0x1e>
 8019dc8:	682b      	ldr	r3, [r5, #0]
 8019dca:	b103      	cbz	r3, 8019dce <_lseek_r+0x1e>
 8019dcc:	6023      	str	r3, [r4, #0]
 8019dce:	bd38      	pop	{r3, r4, r5, pc}
 8019dd0:	20018e94 	.word	0x20018e94

08019dd4 <_read_r>:
 8019dd4:	b538      	push	{r3, r4, r5, lr}
 8019dd6:	4d07      	ldr	r5, [pc, #28]	; (8019df4 <_read_r+0x20>)
 8019dd8:	4604      	mov	r4, r0
 8019dda:	4608      	mov	r0, r1
 8019ddc:	4611      	mov	r1, r2
 8019dde:	2200      	movs	r2, #0
 8019de0:	602a      	str	r2, [r5, #0]
 8019de2:	461a      	mov	r2, r3
 8019de4:	f7e7 fc6c 	bl	80016c0 <_read>
 8019de8:	1c43      	adds	r3, r0, #1
 8019dea:	d102      	bne.n	8019df2 <_read_r+0x1e>
 8019dec:	682b      	ldr	r3, [r5, #0]
 8019dee:	b103      	cbz	r3, 8019df2 <_read_r+0x1e>
 8019df0:	6023      	str	r3, [r4, #0]
 8019df2:	bd38      	pop	{r3, r4, r5, pc}
 8019df4:	20018e94 	.word	0x20018e94

08019df8 <_raise_r>:
 8019df8:	291f      	cmp	r1, #31
 8019dfa:	b538      	push	{r3, r4, r5, lr}
 8019dfc:	4604      	mov	r4, r0
 8019dfe:	460d      	mov	r5, r1
 8019e00:	d904      	bls.n	8019e0c <_raise_r+0x14>
 8019e02:	2316      	movs	r3, #22
 8019e04:	6003      	str	r3, [r0, #0]
 8019e06:	f04f 30ff 	mov.w	r0, #4294967295
 8019e0a:	bd38      	pop	{r3, r4, r5, pc}
 8019e0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019e0e:	b112      	cbz	r2, 8019e16 <_raise_r+0x1e>
 8019e10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019e14:	b94b      	cbnz	r3, 8019e2a <_raise_r+0x32>
 8019e16:	4620      	mov	r0, r4
 8019e18:	f000 f830 	bl	8019e7c <_getpid_r>
 8019e1c:	462a      	mov	r2, r5
 8019e1e:	4601      	mov	r1, r0
 8019e20:	4620      	mov	r0, r4
 8019e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019e26:	f000 b817 	b.w	8019e58 <_kill_r>
 8019e2a:	2b01      	cmp	r3, #1
 8019e2c:	d00a      	beq.n	8019e44 <_raise_r+0x4c>
 8019e2e:	1c59      	adds	r1, r3, #1
 8019e30:	d103      	bne.n	8019e3a <_raise_r+0x42>
 8019e32:	2316      	movs	r3, #22
 8019e34:	6003      	str	r3, [r0, #0]
 8019e36:	2001      	movs	r0, #1
 8019e38:	e7e7      	b.n	8019e0a <_raise_r+0x12>
 8019e3a:	2400      	movs	r4, #0
 8019e3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019e40:	4628      	mov	r0, r5
 8019e42:	4798      	blx	r3
 8019e44:	2000      	movs	r0, #0
 8019e46:	e7e0      	b.n	8019e0a <_raise_r+0x12>

08019e48 <raise>:
 8019e48:	4b02      	ldr	r3, [pc, #8]	; (8019e54 <raise+0xc>)
 8019e4a:	4601      	mov	r1, r0
 8019e4c:	6818      	ldr	r0, [r3, #0]
 8019e4e:	f7ff bfd3 	b.w	8019df8 <_raise_r>
 8019e52:	bf00      	nop
 8019e54:	200005b8 	.word	0x200005b8

08019e58 <_kill_r>:
 8019e58:	b538      	push	{r3, r4, r5, lr}
 8019e5a:	4d07      	ldr	r5, [pc, #28]	; (8019e78 <_kill_r+0x20>)
 8019e5c:	2300      	movs	r3, #0
 8019e5e:	4604      	mov	r4, r0
 8019e60:	4608      	mov	r0, r1
 8019e62:	4611      	mov	r1, r2
 8019e64:	602b      	str	r3, [r5, #0]
 8019e66:	f7e7 fc0f 	bl	8001688 <_kill>
 8019e6a:	1c43      	adds	r3, r0, #1
 8019e6c:	d102      	bne.n	8019e74 <_kill_r+0x1c>
 8019e6e:	682b      	ldr	r3, [r5, #0]
 8019e70:	b103      	cbz	r3, 8019e74 <_kill_r+0x1c>
 8019e72:	6023      	str	r3, [r4, #0]
 8019e74:	bd38      	pop	{r3, r4, r5, pc}
 8019e76:	bf00      	nop
 8019e78:	20018e94 	.word	0x20018e94

08019e7c <_getpid_r>:
 8019e7c:	f7e7 bbfc 	b.w	8001678 <_getpid>

08019e80 <_init>:
 8019e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e82:	bf00      	nop
 8019e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e86:	bc08      	pop	{r3}
 8019e88:	469e      	mov	lr, r3
 8019e8a:	4770      	bx	lr

08019e8c <_fini>:
 8019e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e8e:	bf00      	nop
 8019e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e92:	bc08      	pop	{r3}
 8019e94:	469e      	mov	lr, r3
 8019e96:	4770      	bx	lr
