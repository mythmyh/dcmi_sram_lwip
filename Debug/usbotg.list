
usbotg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010098  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000998  08010228  08010228  00020228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010bc0  08010bc0  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08010bc0  08010bc0  00020bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010bc8  08010bc8  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010bc8  08010bc8  00020bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010bcc  08010bcc  00020bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08010bd0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030094  2**0
                  CONTENTS
 10 .bss          000049dc  20000094  20000094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004a70  20004a70  00030094  2**0
                  ALLOC
 12 .sram         0009c400  68000000  08010c64  00040000  2**2
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002bffc  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000059cc  00000000  00000000  0005c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001510  00000000  00000000  00061a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001308  00000000  00000000  00062fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027e6c  00000000  00000000  000642a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000204c0  00000000  00000000  0008c114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf897  00000000  00000000  000ac5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0017be6b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005f14  00000000  00000000  0017bec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010210 	.word	0x08010210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08010210 	.word	0x08010210

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <Rgb565ConvertBmp>:
	BYTE rgbRed;//红色的亮度（值范围为0-255)
	BYTE rgbReserved;//保留，必须为0
} RgbQuad2;	//RGBQUAD;

int Rgb565ConvertBmp(uint8_t* buf,int width,int height,FIL * fp)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b098      	sub	sp, #96	; 0x60
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
 8000574:	603b      	str	r3, [r7, #0]

	BitMapFileHeader bmfHdr; //定义文件�???????????????????????????
	BitMapInfoHeader bmiHdr; //定义信息�???????????????????????????
	RgbQuad2 bmiClr[3]; //定义调色�???????????????????????????

	bmiHdr.biSize = sizeof(BitMapInfoHeader);
 8000576:	2328      	movs	r3, #40	; 0x28
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
	bmiHdr.biWidth = width;//指定图像的宽度，单位是像�???????????????????????????
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	62bb      	str	r3, [r7, #40]	; 0x28
	bmiHdr.biHeight = height;//指定图像的高度，单位是像�???????????????????????????
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	62fb      	str	r3, [r7, #44]	; 0x2c
	bmiHdr.biPlanes = 1;//目标设备的级别，必须�???????????????????????????1
 8000582:	2301      	movs	r3, #1
 8000584:	863b      	strh	r3, [r7, #48]	; 0x30
	bmiHdr.biBitCount = 16;//表示用到颜色时用到的位数 16位表示高彩色�???????????????????????????
 8000586:	2310      	movs	r3, #16
 8000588:	867b      	strh	r3, [r7, #50]	; 0x32
	bmiHdr.biCompression = 3L;//BI_RGB仅有RGB555格式
 800058a:	2303      	movs	r3, #3
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
	bmiHdr.biSizeImage = (width * height * 2);//指定实际位图�???????????????????????????占字节数
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	fb02 f303 	mul.w	r3, r2, r3
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
	bmiHdr.biXPelsPerMeter = 0;//水平分辨率，单位长度内的像素�???????????????????????????
 800059a:	2300      	movs	r3, #0
 800059c:	63fb      	str	r3, [r7, #60]	; 0x3c
	bmiHdr.biYPelsPerMeter = 0;//垂直分辨率，单位长度内的像素�???????????????????????????
 800059e:	2300      	movs	r3, #0
 80005a0:	643b      	str	r3, [r7, #64]	; 0x40
	bmiHdr.biClrUsed = 0;//位图实际使用的彩色表中的颜色索引数（设为0的话，则说明使用�???????????????????????????有调色板项）
 80005a2:	2300      	movs	r3, #0
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
	bmiHdr.biClrImportant = 0;//说明对图象显示有重要影响的颜色索引的数目�???????????????????????????0表示�???????????????????????????有颜色都重要
 80005a6:	2300      	movs	r3, #0
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48

	//RGB565格式掩码
	bmiClr[0].rgbBlue = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	763b      	strb	r3, [r7, #24]
	bmiClr[0].rgbGreen = 0xF8;
 80005ae:	23f8      	movs	r3, #248	; 0xf8
 80005b0:	767b      	strb	r3, [r7, #25]
	bmiClr[0].rgbRed = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	76bb      	strb	r3, [r7, #26]
	bmiClr[0].rgbReserved = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	76fb      	strb	r3, [r7, #27]

	bmiClr[1].rgbBlue = 0xE0;
 80005ba:	23e0      	movs	r3, #224	; 0xe0
 80005bc:	773b      	strb	r3, [r7, #28]
	bmiClr[1].rgbGreen = 0x07;
 80005be:	2307      	movs	r3, #7
 80005c0:	777b      	strb	r3, [r7, #29]
	bmiClr[1].rgbRed = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	77bb      	strb	r3, [r7, #30]
	bmiClr[1].rgbReserved = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	77fb      	strb	r3, [r7, #31]

	bmiClr[2].rgbBlue = 0x1F;
 80005ca:	231f      	movs	r3, #31
 80005cc:	f887 3020 	strb.w	r3, [r7, #32]
	bmiClr[2].rgbGreen = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	bmiClr[2].rgbRed = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	bmiClr[2].rgbReserved = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23


	bmfHdr.bfType = (WORD)0x4D42;//文件类型�???????????????????????????0x4D42也就是字�???????????????????????????'BM'
 80005e2:	f644 5342 	movw	r3, #19778	; 0x4d42
 80005e6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	bmfHdr.bfSize = (DWORD)(sizeof(BitMapFileHeader) + sizeof(BitMapInfoHeader) + sizeof(RgbQuad2) * 3 + bmiHdr.biSizeImage);//文件大小
 80005ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005ec:	3342      	adds	r3, #66	; 0x42
 80005ee:	f8c7 304e 	str.w	r3, [r7, #78]	; 0x4e
	bmfHdr.bfReserved1 = 0;//保留，必须为0
 80005f2:	2300      	movs	r3, #0
 80005f4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	bmfHdr.bfReserved2 = 0;//保留，必须为0
 80005f8:	2300      	movs	r3, #0
 80005fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	bmfHdr.bfOffBits = (DWORD)(sizeof(BitMapFileHeader) + sizeof(BitMapInfoHeader)+ sizeof(RgbQuad2) * 3);//实际图像数据偏移�???????????????????????????
 80005fe:	2300      	movs	r3, #0
 8000600:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8000604:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000608:	2300      	movs	r3, #0
 800060a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	uint32_t byteswritten;



	f_write(fp,&bmfHdr,  sizeof(BitMapFileHeader),(void *)&byteswritten);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000616:	220e      	movs	r2, #14
 8000618:	6838      	ldr	r0, [r7, #0]
 800061a:	f00d fcdd 	bl	800dfd8 <f_write>
	f_write(fp,&bmiHdr, sizeof(BitMapInfoHeader),(void *)&byteswritten);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000626:	2228      	movs	r2, #40	; 0x28
 8000628:	6838      	ldr	r0, [r7, #0]
 800062a:	f00d fcd5 	bl	800dfd8 <f_write>
	f_write(fp,&bmiClr, 3*sizeof(RgbQuad2),(void *)&byteswritten);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	f107 0118 	add.w	r1, r7, #24
 8000636:	220c      	movs	r2, #12
 8000638:	6838      	ldr	r0, [r7, #0]
 800063a:	f00d fccd 	bl	800dfd8 <f_write>
	for(int i=0; i<height; i++){
 800063e:	2300      	movs	r3, #0
 8000640:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000642:	e015      	b.n	8000670 <Rgb565ConvertBmp+0x108>
		f_write(fp,buf+(width*(height-i-1)*2), 2*width,(void *)&byteswritten);
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	3b01      	subs	r3, #1
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	fb02 f303 	mul.w	r3, r2, r3
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	461a      	mov	r2, r3
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	1899      	adds	r1, r3, r2
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	461a      	mov	r2, r3
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	6838      	ldr	r0, [r7, #0]
 8000666:	f00d fcb7 	bl	800dfd8 <f_write>
	for(int i=0; i<height; i++){
 800066a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800066c:	3301      	adds	r3, #1
 800066e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000670:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	429a      	cmp	r2, r3
 8000676:	dbe5      	blt.n	8000644 <Rgb565ConvertBmp+0xdc>
	}

    f_close( fp );
 8000678:	6838      	ldr	r0, [r7, #0]
 800067a:	f00d febf 	bl	800e3fc <f_close>

	 return 0;
 800067e:	2300      	movs	r3, #0
}
 8000680:	4618      	mov	r0, r3
 8000682:	3760      	adds	r7, #96	; 0x60
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <ETX_MSC_ProcessUsbDevice>:
	 printf("%d\n",data_len*4);//得到剩余数据长度

}

static FRESULT ETX_MSC_ProcessUsbDevice(char * filename,uint8_t * data)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800068e:	af00      	add	r7, sp, #0
 8000690:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000694:	3b3c      	subs	r3, #60	; 0x3c
 8000696:	6018      	str	r0, [r3, #0]
 8000698:	463b      	mov	r3, r7
 800069a:	6019      	str	r1, [r3, #0]
  FATFS     UsbDiskFatFs;                                 /* File system object for USB disk logical drive */
  char      UsbDiskPath[4] = {0};                         /* USB Host logical drive path */
 800069c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80006a0:	3b1c      	subs	r3, #28
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
  DWORD     fre_clust;                                    /* Freee Cluster */

  do
  {
    /* Register the file system object to the FatFs module */
    res = f_mount( &UsbDiskFatFs, (TCHAR const*)UsbDiskPath, 0 );
 80006a6:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80006aa:	391c      	subs	r1, #28
 80006ac:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80006b0:	3b18      	subs	r3, #24
 80006b2:	2200      	movs	r2, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f00d fa7d 	bl	800dbb4 <f_mount>
 80006ba:	4603      	mov	r3, r0
 80006bc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80006c0:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 80006c4:	7013      	strb	r3, [r2, #0]
    if( res != FR_OK )
 80006c6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80006ca:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d142      	bne.n	800075a <ETX_MSC_ProcessUsbDevice+0xd2>
      /* FatFs Init Error */
      break;
    }

    /* Check the Free Space */
    FATFS *fatFs = &UsbDiskFatFs;
 80006d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006d8:	3b34      	subs	r3, #52	; 0x34
 80006da:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80006de:	3a18      	subs	r2, #24
 80006e0:	601a      	str	r2, [r3, #0]
    f_getfree("", &fre_clust, &fatFs);
 80006e2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80006e6:	3a34      	subs	r2, #52	; 0x34
 80006e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006ec:	3b30      	subs	r3, #48	; 0x30
 80006ee:	4619      	mov	r1, r3
 80006f0:	4827      	ldr	r0, [pc, #156]	; (8000790 <ETX_MSC_ProcessUsbDevice+0x108>)
 80006f2:	f00d fead 	bl	800e450 <f_getfree>


    /* Create a new text file with write access */
    res = f_open( &file, filename, ( FA_CREATE_ALWAYS | FA_WRITE ) );
 80006f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006fa:	3b3c      	subs	r3, #60	; 0x3c
 80006fc:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000700:	382c      	subs	r0, #44	; 0x2c
 8000702:	220a      	movs	r2, #10
 8000704:	6819      	ldr	r1, [r3, #0]
 8000706:	f00d fa9b 	bl	800dc40 <f_open>
 800070a:	4603      	mov	r3, r0
 800070c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000710:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8000714:	7013      	strb	r3, [r2, #0]
    if( res != FR_OK )
 8000716:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800071a:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d11c      	bne.n	800075e <ETX_MSC_ProcessUsbDevice+0xd6>
      /* File Open Error */
      break;
    }

    /* Write the data to the text file */
    Rgb565ConvertBmp(data,640,480,&file);
 8000724:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000728:	3b2c      	subs	r3, #44	; 0x2c
 800072a:	4638      	mov	r0, r7
 800072c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000730:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000734:	6800      	ldr	r0, [r0, #0]
 8000736:	f7ff ff17 	bl	8000568 <Rgb565ConvertBmp>



    printf("hello world");
 800073a:	4816      	ldr	r0, [pc, #88]	; (8000794 <ETX_MSC_ProcessUsbDevice+0x10c>)
 800073c:	f00e fc24 	bl	800ef88 <iprintf>
    /* Close the file */
    f_close(&file);
 8000740:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000744:	3b2c      	subs	r3, #44	; 0x2c
 8000746:	4618      	mov	r0, r3
 8000748:	f00d fe58 	bl	800e3fc <f_close>

    if(res != FR_OK)
 800074c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000750:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	e002      	b.n	8000760 <ETX_MSC_ProcessUsbDevice+0xd8>
      break;
 800075a:	bf00      	nop
 800075c:	e000      	b.n	8000760 <ETX_MSC_ProcessUsbDevice+0xd8>
      break;
 800075e:	bf00      	nop
    /* Print the data */

  } while ( 0 );

  /* Unmount the device */
  f_mount(NULL, UsbDiskPath, 0);
 8000760:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000764:	3b1c      	subs	r3, #28
 8000766:	2200      	movs	r2, #0
 8000768:	4619      	mov	r1, r3
 800076a:	2000      	movs	r0, #0
 800076c:	f00d fa22 	bl	800dbb4 <f_mount>

  /* Unlink the USB disk driver */
  FATFS_UnLinkDriver(UsbDiskPath);
 8000770:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000774:	3b1c      	subs	r3, #28
 8000776:	4618      	mov	r0, r3
 8000778:	f00d ffb4 	bl	800e6e4 <FATFS_UnLinkDriver>

  return res;
 800077c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000780:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000784:	781b      	ldrb	r3, [r3, #0]
}
 8000786:	4618      	mov	r0, r3
 8000788:	f507 5702 	add.w	r7, r7, #8320	; 0x2080
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	0801022c 	.word	0x0801022c
 8000794:	08010230 	.word	0x08010230

08000798 <HAL_DCMI_FrameEventCallback>:
}



void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi2)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
//
//    __HAL_DCMI_ENABLE_IT(&hdcmi,DCMI_IT_FRAME);



}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b2:	f001 f9e7 	bl	8001b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f8b9 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 f9bf 	bl	8000b3c <MX_GPIO_Init>
  MX_FATFS_Init();
 80007be:	f008 f8a9 	bl	8008914 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 80007c2:	f00d ffaf 	bl	800e724 <MX_USB_HOST_Init>
  MX_UART4_Init();
 80007c6:	f000 f959 	bl	8000a7c <MX_UART4_Init>
  MX_DMA_Init();
 80007ca:	f000 f981 	bl	8000ad0 <MX_DMA_Init>
  MX_DCMI_Init();
 80007ce:	f000 f91d 	bl	8000a0c <MX_DCMI_Init>
  MX_FSMC_Init();
 80007d2:	f000 fa9d 	bl	8000d10 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  while(APPLICATION_READY!=Appli_state)
 80007d6:	e001      	b.n	80007dc <main+0x30>
	  MX_USB_HOST_Process();
 80007d8:	f00d ffca 	bl	800e770 <MX_USB_HOST_Process>
  while(APPLICATION_READY!=Appli_state)
 80007dc:	4b43      	ldr	r3, [pc, #268]	; (80008ec <main+0x140>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d1f9      	bne.n	80007d8 <main+0x2c>
  printf("state %d\r\n",Appli_state);
 80007e4:	4b41      	ldr	r3, [pc, #260]	; (80008ec <main+0x140>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	4841      	ldr	r0, [pc, #260]	; (80008f0 <main+0x144>)
 80007ec:	f00e fbcc 	bl	800ef88 <iprintf>
	printf("hello world");
 80007f0:	4840      	ldr	r0, [pc, #256]	; (80008f4 <main+0x148>)
 80007f2:	f00e fbc9 	bl	800ef88 <iprintf>
memset(testsram,0,10000);
 80007f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80007fa:	2100      	movs	r1, #0
 80007fc:	483e      	ldr	r0, [pc, #248]	; (80008f8 <main+0x14c>)
 80007fe:	f00e fb11 	bl	800ee24 <memset>
  PY_OV2640_RGB565_CONFIG();
 8000802:	f000 fafb 	bl	8000dfc <PY_OV2640_RGB565_CONFIG>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		HAL_Delay(1);
 8000806:	2001      	movs	r0, #1
 8000808:	f001 fa2e 	bl	8001c68 <HAL_Delay>
		printf("hello world\n");
 800080c:	4839      	ldr	r0, [pc, #228]	; (80008f4 <main+0x148>)
 800080e:	f00e fc57 	bl	800f0c0 <puts>


					DCMI_DMA_MemInc_En();
 8000812:	f000 fadd 	bl	8000dd0 <DCMI_DMA_MemInc_En>
		    	 for (uint8_t i=0; i<1;i++)
 8000816:	2300      	movs	r3, #0
 8000818:	71fb      	strb	r3, [r7, #7]
 800081a:	e05d      	b.n	80008d8 <main+0x12c>
		    	  {

		    			__HAL_DMA_SET_COUNTER(&hdma_dcmi,10000);
 800081c:	4b37      	ldr	r3, [pc, #220]	; (80008fc <main+0x150>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f242 7210 	movw	r2, #10000	; 0x2710
 8000824:	605a      	str	r2, [r3, #4]
			 		     HAL_DCMI_DisableCrop (&hdcmi);
 8000826:	4836      	ldr	r0, [pc, #216]	; (8000900 <main+0x154>)
 8000828:	f001 fcc3 	bl	80021b2 <HAL_DCMI_DisableCrop>
			 	    	 DCMI_RN = HEIGHT;
 800082c:	4b35      	ldr	r3, [pc, #212]	; (8000904 <main+0x158>)
 800082e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000832:	601a      	str	r2, [r3, #0]
			 	    	 DCMI_CN = 1280;
 8000834:	4b34      	ldr	r3, [pc, #208]	; (8000908 <main+0x15c>)
 8000836:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800083a:	601a      	str	r2, [r3, #0]
			 	    	 DCMI_RS =0;
 800083c:	4b33      	ldr	r3, [pc, #204]	; (800090c <main+0x160>)
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
			 	    	 DCMI_CS = 0;
 8000842:	4b33      	ldr	r3, [pc, #204]	; (8000910 <main+0x164>)
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
			 	    	 HAL_DCMI_ConfigCrop (&hdcmi, DCMI_CS, DCMI_RS, DCMI_CN , DCMI_RN);
 8000848:	4b31      	ldr	r3, [pc, #196]	; (8000910 <main+0x164>)
 800084a:	6819      	ldr	r1, [r3, #0]
 800084c:	4b2f      	ldr	r3, [pc, #188]	; (800090c <main+0x160>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <main+0x15c>)
 8000852:	6818      	ldr	r0, [r3, #0]
 8000854:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <main+0x158>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	4603      	mov	r3, r0
 800085c:	4828      	ldr	r0, [pc, #160]	; (8000900 <main+0x154>)
 800085e:	f001 fc75 	bl	800214c <HAL_DCMI_ConfigCrop>
			 	    	 HAL_Delay(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f001 fa00 	bl	8001c68 <HAL_Delay>
			 	    	 HAL_DCMI_EnableCrop (&hdcmi);
 8000868:	4825      	ldr	r0, [pc, #148]	; (8000900 <main+0x154>)
 800086a:	f001 fccc 	bl	8002206 <HAL_DCMI_EnableCrop>
			 	    	 HAL_Delay(1);
 800086e:	2001      	movs	r0, #1
 8000870:	f001 f9fa 	bl	8001c68 <HAL_Delay>
			 	    	 dcmi_dma_status = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT,(uint32_t) &testsram,DCMI_RN*DCMI_CN/4);
 8000874:	4920      	ldr	r1, [pc, #128]	; (80008f8 <main+0x14c>)
 8000876:	4b23      	ldr	r3, [pc, #140]	; (8000904 <main+0x158>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a23      	ldr	r2, [pc, #140]	; (8000908 <main+0x15c>)
 800087c:	6812      	ldr	r2, [r2, #0]
 800087e:	fb02 f303 	mul.w	r3, r2, r3
 8000882:	089b      	lsrs	r3, r3, #2
 8000884:	460a      	mov	r2, r1
 8000886:	2102      	movs	r1, #2
 8000888:	481d      	ldr	r0, [pc, #116]	; (8000900 <main+0x154>)
 800088a:	f001 fb23 	bl	8001ed4 <HAL_DCMI_Start_DMA>
 800088e:	4603      	mov	r3, r0
 8000890:	461a      	mov	r2, r3
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <main+0x168>)
 8000894:	701a      	strb	r2, [r3, #0]
			             printf("start dcmi dma %d \r\n",HAL_DMA_GetState(&hdma_dcmi));
 8000896:	4819      	ldr	r0, [pc, #100]	; (80008fc <main+0x150>)
 8000898:	f002 f978 	bl	8002b8c <HAL_DMA_GetState>
 800089c:	4603      	mov	r3, r0
 800089e:	4619      	mov	r1, r3
 80008a0:	481d      	ldr	r0, [pc, #116]	; (8000918 <main+0x16c>)
 80008a2:	f00e fb71 	bl	800ef88 <iprintf>

			 	    	//while(HAL_DMA_GetState(&hdma_dcmi)==HAL_DMA_STATE_BUSY){} ;
		 	 	    	 //HAL_DCMI_Stop(&hdcmi);
			             sprintf(filename,"%d.bmp",i);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	461a      	mov	r2, r3
 80008aa:	491c      	ldr	r1, [pc, #112]	; (800091c <main+0x170>)
 80008ac:	481c      	ldr	r0, [pc, #112]	; (8000920 <main+0x174>)
 80008ae:	f00e fc1f 	bl	800f0f0 <siprintf>
			             printf("filename: %s\r\n",filename);
 80008b2:	491b      	ldr	r1, [pc, #108]	; (8000920 <main+0x174>)
 80008b4:	481b      	ldr	r0, [pc, #108]	; (8000924 <main+0x178>)
 80008b6:	f00e fb67 	bl	800ef88 <iprintf>
			             HAL_Delay(5999);
 80008ba:	f241 706f 	movw	r0, #5999	; 0x176f
 80008be:	f001 f9d3 	bl	8001c68 <HAL_Delay>
//			         				else
//			         				UART4->DR=testsram[i];
//			         			}


		    	 	 	 ETX_MSC_ProcessUsbDevice(filename,(uint8_t*)testsram);
 80008c2:	490d      	ldr	r1, [pc, #52]	; (80008f8 <main+0x14c>)
 80008c4:	4816      	ldr	r0, [pc, #88]	; (8000920 <main+0x174>)
 80008c6:	f7ff fedf 	bl	8000688 <ETX_MSC_ProcessUsbDevice>
		   	    	 HAL_Delay(1000);
 80008ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ce:	f001 f9cb 	bl	8001c68 <HAL_Delay>
		    	 for (uint8_t i=0; i<1;i++)
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	3301      	adds	r3, #1
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d09e      	beq.n	800081c <main+0x70>

		    	 }
		    	 HAL_Delay(5000000);
 80008de:	4812      	ldr	r0, [pc, #72]	; (8000928 <main+0x17c>)
 80008e0:	f001 f9c2 	bl	8001c68 <HAL_Delay>


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80008e4:	f00d ff44 	bl	800e770 <MX_USB_HOST_Process>
		HAL_Delay(1);
 80008e8:	e78d      	b.n	8000806 <main+0x5a>
 80008ea:	bf00      	nop
 80008ec:	20000100 	.word	0x20000100
 80008f0:	08010248 	.word	0x08010248
 80008f4:	08010230 	.word	0x08010230
 80008f8:	68000000 	.word	0x68000000
 80008fc:	2000118c 	.word	0x2000118c
 8000900:	20002228 	.word	0x20002228
 8000904:	200000b0 	.word	0x200000b0
 8000908:	200000b4 	.word	0x200000b4
 800090c:	200000b8 	.word	0x200000b8
 8000910:	200000bc 	.word	0x200000bc
 8000914:	200000c0 	.word	0x200000c0
 8000918:	08010254 	.word	0x08010254
 800091c:	0801026c 	.word	0x0801026c
 8000920:	20002220 	.word	0x20002220
 8000924:	08010274 	.word	0x08010274
 8000928:	004c4b40 	.word	0x004c4b40

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	; 0x50
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	2230      	movs	r2, #48	; 0x30
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f00e fa72 	bl	800ee24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <SystemClock_Config+0xd8>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a2a      	ldr	r2, [pc, #168]	; (8000a04 <SystemClock_Config+0xd8>)
 800095a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
 8000960:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <SystemClock_Config+0xd8>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <SystemClock_Config+0xdc>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a24      	ldr	r2, [pc, #144]	; (8000a08 <SystemClock_Config+0xdc>)
 8000976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <SystemClock_Config+0xdc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000988:	2301      	movs	r3, #1
 800098a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000996:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800099c:	2304      	movs	r3, #4
 800099e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009a0:	2360      	movs	r3, #96	; 0x60
 80009a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009a8:	2304      	movs	r3, #4
 80009aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0320 	add.w	r3, r7, #32
 80009b0:	4618      	mov	r0, r3
 80009b2:	f005 fa9f 	bl	8005ef4 <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009bc:	f000 fa6e 	bl	8000e9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2302      	movs	r3, #2
 80009c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2103      	movs	r1, #3
 80009de:	4618      	mov	r0, r3
 80009e0:	f005 fd00 	bl	80063e4 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009ea:	f000 fa57 	bl	8000e9c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 80009ee:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80009f2:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 80009f6:	2000      	movs	r0, #0
 80009f8:	f005 fdda 	bl	80065b0 <HAL_RCC_MCOConfig>
}
 80009fc:	bf00      	nop
 80009fe:	3750      	adds	r7, #80	; 0x50
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40007000 	.word	0x40007000

08000a0c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_DCMI_Init+0x68>)
 8000a12:	4a19      	ldr	r2, [pc, #100]	; (8000a78 <MX_DCMI_Init+0x6c>)
 8000a14:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_DCMI_Init+0x68>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_DCMI_Init+0x68>)
 8000a1e:	2220      	movs	r2, #32
 8000a20:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_DCMI_Init+0x68>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_DCMI_Init+0x68>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_DCMI_Init+0x68>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_DCMI_Init+0x68>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_DCMI_Init+0x68>)
 8000a3c:	2208      	movs	r2, #8
 8000a3e:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <MX_DCMI_Init+0x68>)
 8000a42:	f001 fcb6 	bl	80023b2 <HAL_DCMI_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8000a4c:	f000 fa26 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

	__HAL_DCMI_ENABLE_IT(&hdcmi,DCMI_IT_FRAME);
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_DCMI_Init+0x68>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	68da      	ldr	r2, [r3, #12]
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_DCMI_Init+0x68>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f042 0201 	orr.w	r2, r2, #1
 8000a5e:	60da      	str	r2, [r3, #12]
	__HAL_DCMI_ENABLE(&hdcmi);
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <MX_DCMI_Init+0x68>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <MX_DCMI_Init+0x68>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a6e:	601a      	str	r2, [r3, #0]

  /* USER CODE END DCMI_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20002228 	.word	0x20002228
 8000a78:	50050000 	.word	0x50050000

08000a7c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_UART4_Init+0x4c>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <MX_UART4_Init+0x50>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_UART4_Init+0x4c>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_UART4_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_UART4_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_UART4_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_UART4_Init+0x4c>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_UART4_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_UART4_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_UART4_Init+0x4c>)
 8000ab4:	f005 ff3e 	bl	8006934 <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000abe:	f000 f9ed 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20002270 	.word	0x20002270
 8000acc:	40004c00 	.word	0x40004c00

08000ad0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_DMA_Init+0x68>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a16      	ldr	r2, [pc, #88]	; (8000b38 <MX_DMA_Init+0x68>)
 8000ae0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_DMA_Init+0x68>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_DMA_Init+0x68>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <MX_DMA_Init+0x68>)
 8000afc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <MX_DMA_Init+0x68>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	200f      	movs	r0, #15
 8000b14:	f001 f9a7 	bl	8001e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b18:	200f      	movs	r0, #15
 8000b1a:	f001 f9c0 	bl	8001e9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 2, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2102      	movs	r1, #2
 8000b22:	2039      	movs	r0, #57	; 0x39
 8000b24:	f001 f99f 	bl	8001e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b28:	2039      	movs	r0, #57	; 0x39
 8000b2a:	f001 f9b8 	bl	8001e9e <HAL_NVIC_EnableIRQ>

}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800

08000b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
 8000b56:	4b69      	ldr	r3, [pc, #420]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a68      	ldr	r2, [pc, #416]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000b5c:	f043 0310 	orr.w	r3, r3, #16
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b66      	ldr	r3, [pc, #408]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	623b      	str	r3, [r7, #32]
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
 8000b72:	4b62      	ldr	r3, [pc, #392]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a61      	ldr	r2, [pc, #388]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000b78:	f043 0320 	orr.w	r3, r3, #32
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b5f      	ldr	r3, [pc, #380]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0320 	and.w	r3, r3, #32
 8000b86:	61fb      	str	r3, [r7, #28]
 8000b88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
 8000b8e:	4b5b      	ldr	r3, [pc, #364]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a5a      	ldr	r2, [pc, #360]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b58      	ldr	r3, [pc, #352]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba2:	61bb      	str	r3, [r7, #24]
 8000ba4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	4b54      	ldr	r3, [pc, #336]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a53      	ldr	r2, [pc, #332]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b51      	ldr	r3, [pc, #324]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b4d      	ldr	r3, [pc, #308]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a4c      	ldr	r2, [pc, #304]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b4a      	ldr	r3, [pc, #296]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b46      	ldr	r3, [pc, #280]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a45      	ldr	r2, [pc, #276]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b43      	ldr	r3, [pc, #268]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a3e      	ldr	r2, [pc, #248]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b3c      	ldr	r3, [pc, #240]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a37      	ldr	r2, [pc, #220]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c38:	4831      	ldr	r0, [pc, #196]	; (8000d00 <MX_GPIO_Init+0x1c4>)
 8000c3a:	f003 fbd1 	bl	80043e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2108      	movs	r1, #8
 8000c42:	4830      	ldr	r0, [pc, #192]	; (8000d04 <MX_GPIO_Init+0x1c8>)
 8000c44:	f003 fbcc 	bl	80043e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	21c0      	movs	r1, #192	; 0xc0
 8000c4c:	482d      	ldr	r0, [pc, #180]	; (8000d04 <MX_GPIO_Init+0x1c8>)
 8000c4e:	f003 fbc7 	bl	80043e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c58:	482b      	ldr	r0, [pc, #172]	; (8000d08 <MX_GPIO_Init+0x1cc>)
 8000c5a:	f003 fbc1 	bl	80043e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	4822      	ldr	r0, [pc, #136]	; (8000d00 <MX_GPIO_Init+0x1c4>)
 8000c78:	f003 f9fe 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	481c      	ldr	r0, [pc, #112]	; (8000d0c <MX_GPIO_Init+0x1d0>)
 8000c9a:	f003 f9ed 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4813      	ldr	r0, [pc, #76]	; (8000d04 <MX_GPIO_Init+0x1c8>)
 8000cb6:	f003 f9df 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cba:	23c0      	movs	r3, #192	; 0xc0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480c      	ldr	r0, [pc, #48]	; (8000d04 <MX_GPIO_Init+0x1c8>)
 8000cd2:	f003 f9d1 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <MX_GPIO_Init+0x1cc>)
 8000cf0:	f003 f9c2 	bl	8004078 <HAL_GPIO_Init>

}
 8000cf4:	bf00      	nop
 8000cf6:	3738      	adds	r7, #56	; 0x38
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020400 	.word	0x40020400
 8000d04:	40020c00 	.word	0x40020c00
 8000d08:	40021800 	.word	0x40021800
 8000d0c:	40020000 	.word	0x40020000

08000d10 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
 8000d24:	615a      	str	r2, [r3, #20]
 8000d26:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 8000d28:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <MX_FSMC_Init+0xb8>)
 8000d2a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000d2e:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000d30:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <MX_FSMC_Init+0xb8>)
 8000d32:	4a26      	ldr	r2, [pc, #152]	; (8000dcc <MX_FSMC_Init+0xbc>)
 8000d34:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000d36:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <MX_FSMC_Init+0xb8>)
 8000d38:	2204      	movs	r2, #4
 8000d3a:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <MX_FSMC_Init+0xb8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <MX_FSMC_Init+0xb8>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <MX_FSMC_Init+0xb8>)
 8000d4a:	2210      	movs	r2, #16
 8000d4c:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <MX_FSMC_Init+0xb8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <MX_FSMC_Init+0xb8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <MX_FSMC_Init+0xb8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <MX_FSMC_Init+0xb8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <MX_FSMC_Init+0xb8>)
 8000d68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d6c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <MX_FSMC_Init+0xb8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_FSMC_Init+0xb8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	631a      	str	r2, [r3, #48]	; 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MX_FSMC_Init+0xb8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_FSMC_Init+0xb8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	639a      	str	r2, [r3, #56]	; 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_FSMC_Init+0xb8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000d90:	230f      	movs	r3, #15
 8000d92:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 8000d94:	2304      	movs	r3, #4
 8000d96:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000d9c:	2310      	movs	r3, #16
 8000d9e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000da0:	2311      	movs	r3, #17
 8000da2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2200      	movs	r2, #0
 8000dac:	4619      	mov	r1, r3
 8000dae:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <MX_FSMC_Init+0xb8>)
 8000db0:	f005 fd7c 	bl	80068ac <HAL_SRAM_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000dba:	f000 f86f 	bl	8000e9c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000dbe:	bf00      	nop
 8000dc0:	3720      	adds	r7, #32
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000113c 	.word	0x2000113c
 8000dcc:	a0000104 	.word	0xa0000104

08000dd0 <DCMI_DMA_MemInc_En>:

/* USER CODE BEGIN 4 */


void DCMI_DMA_MemInc_En(void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	HAL_DMA_DeInit(&hdma_dcmi);
 8000dd4:	4808      	ldr	r0, [pc, #32]	; (8000df8 <DCMI_DMA_MemInc_En+0x28>)
 8000dd6:	f001 fc07 	bl	80025e8 <HAL_DMA_DeInit>

	hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <DCMI_DMA_MemInc_En+0x28>)
 8000ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de0:	611a      	str	r2, [r3, #16]
	if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK) {
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <DCMI_DMA_MemInc_En+0x28>)
 8000de4:	f001 fb52 	bl	800248c <HAL_DMA_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <DCMI_DMA_MemInc_En+0x22>
		Error_Handler();
 8000dee:	f000 f855 	bl	8000e9c <Error_Handler>
	}
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000118c 	.word	0x2000118c

08000dfc <PY_OV2640_RGB565_CONFIG>:
	if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK) {
		Error_Handler();
	}
}

void PY_OV2640_RGB565_CONFIG(void) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	/*Camera Interface*/
	SCCB_Rst();     //hard reset
 8000e00:	f000 fab4 	bl	800136c <SCCB_Rst>
	HAL_Delay(100);
 8000e04:	2064      	movs	r0, #100	; 0x64
 8000e06:	f000 ff2f 	bl	8001c68 <HAL_Delay>

	//SCCB_WR_Reg(0xff, 0x01);   //soft reset
	//SCCB_WR_Reg(0x12, 0x80);
	//HAL_Delay(100);

	ov2640_verh = SCCB_RD_Reg(0x1c);
 8000e0a:	201c      	movs	r0, #28
 8000e0c:	f000 fa02 	bl	8001214 <SCCB_RD_Reg>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <PY_OV2640_RGB565_CONFIG+0x98>)
 8000e16:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8000e18:	2032      	movs	r0, #50	; 0x32
 8000e1a:	f000 ff25 	bl	8001c68 <HAL_Delay>
	ov2640_verl = SCCB_RD_Reg(0x1d);
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f000 f9f8 	bl	8001214 <SCCB_RD_Reg>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <PY_OV2640_RGB565_CONFIG+0x9c>)
 8000e2a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8000e2c:	2032      	movs	r0, #50	; 0x32
 8000e2e:	f000 ff1b 	bl	8001c68 <HAL_Delay>

	while ((ov2640_verh == 0xff) || (ov2640_verl == 0xff)) {
 8000e32:	e007      	b.n	8000e44 <PY_OV2640_RGB565_CONFIG+0x48>
		//HAL_UART_Transmit(&huart1, &ov2640_verh, 1, 0xFFFFFF);
		HAL_Delay(500);
 8000e34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e38:	f000 ff16 	bl	8001c68 <HAL_Delay>
		//HAL_UART_Transmit(&huart1, &ov2640_verl, 1, 0xFFFFFF);
		HAL_Delay(500);
 8000e3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e40:	f000 ff12 	bl	8001c68 <HAL_Delay>
	while ((ov2640_verh == 0xff) || (ov2640_verl == 0xff)) {
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <PY_OV2640_RGB565_CONFIG+0x98>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d0f3      	beq.n	8000e34 <PY_OV2640_RGB565_CONFIG+0x38>
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <PY_OV2640_RGB565_CONFIG+0x9c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2bff      	cmp	r3, #255	; 0xff
 8000e52:	d0ef      	beq.n	8000e34 <PY_OV2640_RGB565_CONFIG+0x38>
	}

	OV2640_UXGA_Init();
 8000e54:	f000 faaa 	bl	80013ac <OV2640_UXGA_Init>

	//pix speed adjustment
	SCCB_WR_Reg(0xff, 0x00);
 8000e58:	2100      	movs	r1, #0
 8000e5a:	20ff      	movs	r0, #255	; 0xff
 8000e5c:	f000 f994 	bl	8001188 <SCCB_WR_Reg>
	SCCB_WR_Reg(0xd3, 0x00);
 8000e60:	2100      	movs	r1, #0
 8000e62:	20d3      	movs	r0, #211	; 0xd3
 8000e64:	f000 f990 	bl	8001188 <SCCB_WR_Reg>
	SCCB_WR_Reg(0XFF, 0X01);
 8000e68:	2101      	movs	r1, #1
 8000e6a:	20ff      	movs	r0, #255	; 0xff
 8000e6c:	f000 f98c 	bl	8001188 <SCCB_WR_Reg>
	SCCB_WR_Reg(0X11, 0x01);
 8000e70:	2101      	movs	r1, #1
 8000e72:	2011      	movs	r0, #17
 8000e74:	f000 f988 	bl	8001188 <SCCB_WR_Reg>

	OV2640_RGB565_Mode();
 8000e78:	f000 fabe 	bl	80013f8 <OV2640_RGB565_Mode>
	//OV2640_JPEG_Mode();


	OV2640_OutSize_Set(640, 480);
 8000e7c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000e80:	f44f 7020 	mov.w	r0, #640	; 0x280
 8000e84:	f000 fada 	bl	800143c <OV2640_OutSize_Set>
	HAL_Delay(200);
 8000e88:	20c8      	movs	r0, #200	; 0xc8
 8000e8a:	f000 feed 	bl	8001c68 <HAL_Delay>

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000001 	.word	0x20000001

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <Error_Handler+0x8>
	...

08000ea8 <SCCB_Start>:
#include <ov2640.h>

//for not open-drain bus

void SCCB_Start(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
    SCCB_SDA_H;
 8000eac:	2201      	movs	r2, #1
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	4814      	ldr	r0, [pc, #80]	; (8000f04 <SCCB_Start+0x5c>)
 8000eb2:	f003 fa95 	bl	80043e0 <HAL_GPIO_WritePin>
    SCCB_SCL_H;
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2140      	movs	r1, #64	; 0x40
 8000eba:	4812      	ldr	r0, [pc, #72]	; (8000f04 <SCCB_Start+0x5c>)
 8000ebc:	f003 fa90 	bl	80043e0 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <SCCB_Start+0x60>)
 8000ec2:	2278      	movs	r2, #120	; 0x78
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	bf00      	nop
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <SCCB_Start+0x60>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	1e5a      	subs	r2, r3, #1
 8000ece:	490e      	ldr	r1, [pc, #56]	; (8000f08 <SCCB_Start+0x60>)
 8000ed0:	600a      	str	r2, [r1, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f8      	bne.n	8000ec8 <SCCB_Start+0x20>
    SCCB_SDA_L;
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2180      	movs	r1, #128	; 0x80
 8000eda:	480a      	ldr	r0, [pc, #40]	; (8000f04 <SCCB_Start+0x5c>)
 8000edc:	f003 fa80 	bl	80043e0 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <SCCB_Start+0x60>)
 8000ee2:	2278      	movs	r2, #120	; 0x78
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	bf00      	nop
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <SCCB_Start+0x60>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	1e5a      	subs	r2, r3, #1
 8000eee:	4906      	ldr	r1, [pc, #24]	; (8000f08 <SCCB_Start+0x60>)
 8000ef0:	600a      	str	r2, [r1, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f8      	bne.n	8000ee8 <SCCB_Start+0x40>
    SCCB_SCL_L;
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2140      	movs	r1, #64	; 0x40
 8000efa:	4802      	ldr	r0, [pc, #8]	; (8000f04 <SCCB_Start+0x5c>)
 8000efc:	f003 fa70 	bl	80043e0 <HAL_GPIO_WritePin>
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40020c00 	.word	0x40020c00
 8000f08:	2000226c 	.word	0x2000226c

08000f0c <SCCB_Stop>:


void SCCB_Stop(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
    SCCB_SDA_L;
 8000f10:	2200      	movs	r2, #0
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	4818      	ldr	r0, [pc, #96]	; (8000f78 <SCCB_Stop+0x6c>)
 8000f16:	f003 fa63 	bl	80043e0 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <SCCB_Stop+0x70>)
 8000f1c:	2278      	movs	r2, #120	; 0x78
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	bf00      	nop
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <SCCB_Stop+0x70>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	1e5a      	subs	r2, r3, #1
 8000f28:	4914      	ldr	r1, [pc, #80]	; (8000f7c <SCCB_Stop+0x70>)
 8000f2a:	600a      	str	r2, [r1, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1f8      	bne.n	8000f22 <SCCB_Stop+0x16>
    SCCB_SCL_H;
 8000f30:	2201      	movs	r2, #1
 8000f32:	2140      	movs	r1, #64	; 0x40
 8000f34:	4810      	ldr	r0, [pc, #64]	; (8000f78 <SCCB_Stop+0x6c>)
 8000f36:	f003 fa53 	bl	80043e0 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <SCCB_Stop+0x70>)
 8000f3c:	2278      	movs	r2, #120	; 0x78
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	bf00      	nop
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <SCCB_Stop+0x70>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	1e5a      	subs	r2, r3, #1
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <SCCB_Stop+0x70>)
 8000f4a:	600a      	str	r2, [r1, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1f8      	bne.n	8000f42 <SCCB_Stop+0x36>
    SCCB_SDA_H;
 8000f50:	2201      	movs	r2, #1
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	4808      	ldr	r0, [pc, #32]	; (8000f78 <SCCB_Stop+0x6c>)
 8000f56:	f003 fa43 	bl	80043e0 <HAL_GPIO_WritePin>

    tickdelay = ticknumber;while(tickdelay--);
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <SCCB_Stop+0x70>)
 8000f5c:	2278      	movs	r2, #120	; 0x78
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	bf00      	nop
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <SCCB_Stop+0x70>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	1e5a      	subs	r2, r3, #1
 8000f68:	4904      	ldr	r1, [pc, #16]	; (8000f7c <SCCB_Stop+0x70>)
 8000f6a:	600a      	str	r2, [r1, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f8      	bne.n	8000f62 <SCCB_Stop+0x56>
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40020c00 	.word	0x40020c00
 8000f7c:	2000226c 	.word	0x2000226c

08000f80 <SCCB_No_Ack>:

void SCCB_No_Ack(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f000 fe6f 	bl	8001c68 <HAL_Delay>
	SCCB_SDA_H;
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	481b      	ldr	r0, [pc, #108]	; (8000ffc <SCCB_No_Ack+0x7c>)
 8000f90:	f003 fa26 	bl	80043e0 <HAL_GPIO_WritePin>
	SCCB_SCL_H;
 8000f94:	2201      	movs	r2, #1
 8000f96:	2140      	movs	r1, #64	; 0x40
 8000f98:	4818      	ldr	r0, [pc, #96]	; (8000ffc <SCCB_No_Ack+0x7c>)
 8000f9a:	f003 fa21 	bl	80043e0 <HAL_GPIO_WritePin>

	tickdelay = ticknumber;while(tickdelay--);
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <SCCB_No_Ack+0x80>)
 8000fa0:	2278      	movs	r2, #120	; 0x78
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	bf00      	nop
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <SCCB_No_Ack+0x80>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	1e5a      	subs	r2, r3, #1
 8000fac:	4914      	ldr	r1, [pc, #80]	; (8001000 <SCCB_No_Ack+0x80>)
 8000fae:	600a      	str	r2, [r1, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f8      	bne.n	8000fa6 <SCCB_No_Ack+0x26>
	SCCB_SCL_L;
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2140      	movs	r1, #64	; 0x40
 8000fb8:	4810      	ldr	r0, [pc, #64]	; (8000ffc <SCCB_No_Ack+0x7c>)
 8000fba:	f003 fa11 	bl	80043e0 <HAL_GPIO_WritePin>

	tickdelay = ticknumber;while(tickdelay--);
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <SCCB_No_Ack+0x80>)
 8000fc0:	2278      	movs	r2, #120	; 0x78
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	bf00      	nop
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <SCCB_No_Ack+0x80>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	1e5a      	subs	r2, r3, #1
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <SCCB_No_Ack+0x80>)
 8000fce:	600a      	str	r2, [r1, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f8      	bne.n	8000fc6 <SCCB_No_Ack+0x46>
	SCCB_SDA_L;
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	4808      	ldr	r0, [pc, #32]	; (8000ffc <SCCB_No_Ack+0x7c>)
 8000fda:	f003 fa01 	bl	80043e0 <HAL_GPIO_WritePin>

	tickdelay = ticknumber;while(tickdelay--);
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <SCCB_No_Ack+0x80>)
 8000fe0:	2278      	movs	r2, #120	; 0x78
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	bf00      	nop
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <SCCB_No_Ack+0x80>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	1e5a      	subs	r2, r3, #1
 8000fec:	4904      	ldr	r1, [pc, #16]	; (8001000 <SCCB_No_Ack+0x80>)
 8000fee:	600a      	str	r2, [r1, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f8      	bne.n	8000fe6 <SCCB_No_Ack+0x66>
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40020c00 	.word	0x40020c00
 8001000:	2000226c 	.word	0x2000226c

08001004 <SCCB_WR_Byte>:

uint8_t SCCB_WR_Byte(uint8_t dat)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
	uint8_t j,res;
	for(j=0;j<8;j++)
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e034      	b.n	800107e <SCCB_WR_Byte+0x7a>
	{
		if(dat&0x80)SCCB_SDA_H;
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	da05      	bge.n	8001028 <SCCB_WR_Byte+0x24>
 800101c:	2201      	movs	r2, #1
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	4833      	ldr	r0, [pc, #204]	; (80010f0 <SCCB_WR_Byte+0xec>)
 8001022:	f003 f9dd 	bl	80043e0 <HAL_GPIO_WritePin>
 8001026:	e004      	b.n	8001032 <SCCB_WR_Byte+0x2e>
		else SCCB_SDA_L;
 8001028:	2200      	movs	r2, #0
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	4830      	ldr	r0, [pc, #192]	; (80010f0 <SCCB_WR_Byte+0xec>)
 800102e:	f003 f9d7 	bl	80043e0 <HAL_GPIO_WritePin>
		dat<<=1;
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	71fb      	strb	r3, [r7, #7]

		tickdelay = ticknumber;while(tickdelay--);
 8001038:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <SCCB_WR_Byte+0xf0>)
 800103a:	2278      	movs	r2, #120	; 0x78
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	bf00      	nop
 8001040:	4b2c      	ldr	r3, [pc, #176]	; (80010f4 <SCCB_WR_Byte+0xf0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	1e5a      	subs	r2, r3, #1
 8001046:	492b      	ldr	r1, [pc, #172]	; (80010f4 <SCCB_WR_Byte+0xf0>)
 8001048:	600a      	str	r2, [r1, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f8      	bne.n	8001040 <SCCB_WR_Byte+0x3c>
		SCCB_SCL_H;
 800104e:	2201      	movs	r2, #1
 8001050:	2140      	movs	r1, #64	; 0x40
 8001052:	4827      	ldr	r0, [pc, #156]	; (80010f0 <SCCB_WR_Byte+0xec>)
 8001054:	f003 f9c4 	bl	80043e0 <HAL_GPIO_WritePin>

		tickdelay = ticknumber;while(tickdelay--);
 8001058:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <SCCB_WR_Byte+0xf0>)
 800105a:	2278      	movs	r2, #120	; 0x78
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	bf00      	nop
 8001060:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <SCCB_WR_Byte+0xf0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	1e5a      	subs	r2, r3, #1
 8001066:	4923      	ldr	r1, [pc, #140]	; (80010f4 <SCCB_WR_Byte+0xf0>)
 8001068:	600a      	str	r2, [r1, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f8      	bne.n	8001060 <SCCB_WR_Byte+0x5c>
		SCCB_SCL_L;
 800106e:	2200      	movs	r2, #0
 8001070:	2140      	movs	r1, #64	; 0x40
 8001072:	481f      	ldr	r0, [pc, #124]	; (80010f0 <SCCB_WR_Byte+0xec>)
 8001074:	f003 f9b4 	bl	80043e0 <HAL_GPIO_WritePin>
	for(j=0;j<8;j++)
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	3301      	adds	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	2b07      	cmp	r3, #7
 8001082:	d9c7      	bls.n	8001014 <SCCB_WR_Byte+0x10>
	}
	SCCB_SDA_IN();
 8001084:	f000 f918 	bl	80012b8 <SCCB_SDA_IN>

	tickdelay = ticknumber;while(tickdelay--);
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <SCCB_WR_Byte+0xf0>)
 800108a:	2278      	movs	r2, #120	; 0x78
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	bf00      	nop
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <SCCB_WR_Byte+0xf0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	1e5a      	subs	r2, r3, #1
 8001096:	4917      	ldr	r1, [pc, #92]	; (80010f4 <SCCB_WR_Byte+0xf0>)
 8001098:	600a      	str	r2, [r1, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f8      	bne.n	8001090 <SCCB_WR_Byte+0x8c>
	SCCB_SCL_H;
 800109e:	2201      	movs	r2, #1
 80010a0:	2140      	movs	r1, #64	; 0x40
 80010a2:	4813      	ldr	r0, [pc, #76]	; (80010f0 <SCCB_WR_Byte+0xec>)
 80010a4:	f003 f99c 	bl	80043e0 <HAL_GPIO_WritePin>

	tickdelay = ticknumber;while(tickdelay--);
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <SCCB_WR_Byte+0xf0>)
 80010aa:	2278      	movs	r2, #120	; 0x78
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	bf00      	nop
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <SCCB_WR_Byte+0xf0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	1e5a      	subs	r2, r3, #1
 80010b6:	490f      	ldr	r1, [pc, #60]	; (80010f4 <SCCB_WR_Byte+0xf0>)
 80010b8:	600a      	str	r2, [r1, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f8      	bne.n	80010b0 <SCCB_WR_Byte+0xac>
	if(SCCB_READ_SDA)res=1;
 80010be:	2180      	movs	r1, #128	; 0x80
 80010c0:	480b      	ldr	r0, [pc, #44]	; (80010f0 <SCCB_WR_Byte+0xec>)
 80010c2:	f003 f975 	bl	80043b0 <HAL_GPIO_ReadPin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <SCCB_WR_Byte+0xce>
 80010cc:	2301      	movs	r3, #1
 80010ce:	73bb      	strb	r3, [r7, #14]
 80010d0:	e001      	b.n	80010d6 <SCCB_WR_Byte+0xd2>
	else res=0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73bb      	strb	r3, [r7, #14]
	SCCB_SCL_L;
 80010d6:	2200      	movs	r2, #0
 80010d8:	2140      	movs	r1, #64	; 0x40
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <SCCB_WR_Byte+0xec>)
 80010dc:	f003 f980 	bl	80043e0 <HAL_GPIO_WritePin>
	SCCB_SDA_OUT();
 80010e0:	f000 f918 	bl	8001314 <SCCB_SDA_OUT>
	return res;
 80010e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	2000226c 	.word	0x2000226c

080010f8 <SCCB_RD_Byte>:

uint8_t SCCB_RD_Byte(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
	uint8_t temp=0,j;
 80010fe:	2300      	movs	r3, #0
 8001100:	71fb      	strb	r3, [r7, #7]
	SCCB_SDA_IN();
 8001102:	f000 f8d9 	bl	80012b8 <SCCB_SDA_IN>
	for(j=8;j>0;j--)
 8001106:	2308      	movs	r3, #8
 8001108:	71bb      	strb	r3, [r7, #6]
 800110a:	e02f      	b.n	800116c <SCCB_RD_Byte+0x74>
	{

		tickdelay = ticknumber;while(tickdelay--);
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <SCCB_RD_Byte+0x88>)
 800110e:	2278      	movs	r2, #120	; 0x78
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	bf00      	nop
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <SCCB_RD_Byte+0x88>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	1e5a      	subs	r2, r3, #1
 800111a:	4919      	ldr	r1, [pc, #100]	; (8001180 <SCCB_RD_Byte+0x88>)
 800111c:	600a      	str	r2, [r1, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f8      	bne.n	8001114 <SCCB_RD_Byte+0x1c>
	    SCCB_SCL_H;
 8001122:	2201      	movs	r2, #1
 8001124:	2140      	movs	r1, #64	; 0x40
 8001126:	4817      	ldr	r0, [pc, #92]	; (8001184 <SCCB_RD_Byte+0x8c>)
 8001128:	f003 f95a 	bl	80043e0 <HAL_GPIO_WritePin>
		temp=temp<<1;
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	71fb      	strb	r3, [r7, #7]
		if(SCCB_READ_SDA)temp++;
 8001132:	2180      	movs	r1, #128	; 0x80
 8001134:	4813      	ldr	r0, [pc, #76]	; (8001184 <SCCB_RD_Byte+0x8c>)
 8001136:	f003 f93b 	bl	80043b0 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <SCCB_RD_Byte+0x4e>
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	3301      	adds	r3, #1
 8001144:	71fb      	strb	r3, [r7, #7]

		tickdelay = ticknumber;while(tickdelay--);
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <SCCB_RD_Byte+0x88>)
 8001148:	2278      	movs	r2, #120	; 0x78
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	bf00      	nop
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <SCCB_RD_Byte+0x88>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	1e5a      	subs	r2, r3, #1
 8001154:	490a      	ldr	r1, [pc, #40]	; (8001180 <SCCB_RD_Byte+0x88>)
 8001156:	600a      	str	r2, [r1, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f8      	bne.n	800114e <SCCB_RD_Byte+0x56>
		SCCB_SCL_L;
 800115c:	2200      	movs	r2, #0
 800115e:	2140      	movs	r1, #64	; 0x40
 8001160:	4808      	ldr	r0, [pc, #32]	; (8001184 <SCCB_RD_Byte+0x8c>)
 8001162:	f003 f93d 	bl	80043e0 <HAL_GPIO_WritePin>
	for(j=8;j>0;j--)
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	3b01      	subs	r3, #1
 800116a:	71bb      	strb	r3, [r7, #6]
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1cc      	bne.n	800110c <SCCB_RD_Byte+0x14>
	}
	SCCB_SDA_OUT();
 8001172:	f000 f8cf 	bl	8001314 <SCCB_SDA_OUT>
	return temp;
 8001176:	79fb      	ldrb	r3, [r7, #7]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2000226c 	.word	0x2000226c
 8001184:	40020c00 	.word	0x40020c00

08001188 <SCCB_WR_Reg>:

uint8_t SCCB_WR_Reg(uint8_t reg,uint8_t data)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	460a      	mov	r2, r1
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	4613      	mov	r3, r2
 8001196:	71bb      	strb	r3, [r7, #6]
	uint8_t res=0;
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]
	SCCB_Start();
 800119c:	f7ff fe84 	bl	8000ea8 <SCCB_Start>
	if(SCCB_WR_Byte(SCCB_ID_W))res=1;
 80011a0:	2060      	movs	r0, #96	; 0x60
 80011a2:	f7ff ff2f 	bl	8001004 <SCCB_WR_Byte>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SCCB_WR_Reg+0x28>
 80011ac:	2301      	movs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]

	tickdelay = ticknumber;while(tickdelay--);
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <SCCB_WR_Reg+0x88>)
 80011b2:	2278      	movs	r2, #120	; 0x78
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	bf00      	nop
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <SCCB_WR_Reg+0x88>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	1e5a      	subs	r2, r3, #1
 80011be:	4914      	ldr	r1, [pc, #80]	; (8001210 <SCCB_WR_Reg+0x88>)
 80011c0:	600a      	str	r2, [r1, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f8      	bne.n	80011b8 <SCCB_WR_Reg+0x30>
	if(SCCB_WR_Byte(reg))res=1;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff1b 	bl	8001004 <SCCB_WR_Byte>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SCCB_WR_Reg+0x50>
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]

	tickdelay = ticknumber;while(tickdelay--);
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <SCCB_WR_Reg+0x88>)
 80011da:	2278      	movs	r2, #120	; 0x78
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	bf00      	nop
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <SCCB_WR_Reg+0x88>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	1e5a      	subs	r2, r3, #1
 80011e6:	490a      	ldr	r1, [pc, #40]	; (8001210 <SCCB_WR_Reg+0x88>)
 80011e8:	600a      	str	r2, [r1, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f8      	bne.n	80011e0 <SCCB_WR_Reg+0x58>
  	if(SCCB_WR_Byte(data))res=1;
 80011ee:	79bb      	ldrb	r3, [r7, #6]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff07 	bl	8001004 <SCCB_WR_Byte>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SCCB_WR_Reg+0x78>
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
  	SCCB_Stop();
 8001200:	f7ff fe84 	bl	8000f0c <SCCB_Stop>
  	return	res;
 8001204:	7bfb      	ldrb	r3, [r7, #15]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000226c 	.word	0x2000226c

08001214 <SCCB_RD_Reg>:

uint8_t SCCB_RD_Reg(uint8_t reg)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
	uint8_t val=0;
 800121e:	2300      	movs	r3, #0
 8001220:	73fb      	strb	r3, [r7, #15]
	SCCB_Start();
 8001222:	f7ff fe41 	bl	8000ea8 <SCCB_Start>
	SCCB_WR_Byte(SCCB_ID_W);
 8001226:	2060      	movs	r0, #96	; 0x60
 8001228:	f7ff feec 	bl	8001004 <SCCB_WR_Byte>

	tickdelay = ticknumber;while(tickdelay--);
 800122c:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <SCCB_RD_Reg+0xa0>)
 800122e:	2278      	movs	r2, #120	; 0x78
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	bf00      	nop
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <SCCB_RD_Reg+0xa0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	1e5a      	subs	r2, r3, #1
 800123a:	491e      	ldr	r1, [pc, #120]	; (80012b4 <SCCB_RD_Reg+0xa0>)
 800123c:	600a      	str	r2, [r1, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f8      	bne.n	8001234 <SCCB_RD_Reg+0x20>
  	SCCB_WR_Byte(reg);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fedd 	bl	8001004 <SCCB_WR_Byte>

  	tickdelay = ticknumber;while(tickdelay--);
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <SCCB_RD_Reg+0xa0>)
 800124c:	2278      	movs	r2, #120	; 0x78
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	bf00      	nop
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <SCCB_RD_Reg+0xa0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	1e5a      	subs	r2, r3, #1
 8001258:	4916      	ldr	r1, [pc, #88]	; (80012b4 <SCCB_RD_Reg+0xa0>)
 800125a:	600a      	str	r2, [r1, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f8      	bne.n	8001252 <SCCB_RD_Reg+0x3e>
	SCCB_Stop();
 8001260:	f7ff fe54 	bl	8000f0c <SCCB_Stop>

	tickdelay = ticknumber;while(tickdelay--);
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <SCCB_RD_Reg+0xa0>)
 8001266:	2278      	movs	r2, #120	; 0x78
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	bf00      	nop
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <SCCB_RD_Reg+0xa0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	1e5a      	subs	r2, r3, #1
 8001272:	4910      	ldr	r1, [pc, #64]	; (80012b4 <SCCB_RD_Reg+0xa0>)
 8001274:	600a      	str	r2, [r1, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f8      	bne.n	800126c <SCCB_RD_Reg+0x58>

	SCCB_Start();
 800127a:	f7ff fe15 	bl	8000ea8 <SCCB_Start>
	SCCB_WR_Byte(SCCB_ID_R);
 800127e:	2061      	movs	r0, #97	; 0x61
 8001280:	f7ff fec0 	bl	8001004 <SCCB_WR_Byte>

	tickdelay = ticknumber;while(tickdelay--);
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <SCCB_RD_Reg+0xa0>)
 8001286:	2278      	movs	r2, #120	; 0x78
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	bf00      	nop
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <SCCB_RD_Reg+0xa0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	1e5a      	subs	r2, r3, #1
 8001292:	4908      	ldr	r1, [pc, #32]	; (80012b4 <SCCB_RD_Reg+0xa0>)
 8001294:	600a      	str	r2, [r1, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f8      	bne.n	800128c <SCCB_RD_Reg+0x78>
  	val=SCCB_RD_Byte();
 800129a:	f7ff ff2d 	bl	80010f8 <SCCB_RD_Byte>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
  	SCCB_No_Ack();
 80012a2:	f7ff fe6d 	bl	8000f80 <SCCB_No_Ack>
  	SCCB_Stop();
 80012a6:	f7ff fe31 	bl	8000f0c <SCCB_Stop>
  	return val;
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000226c 	.word	0x2000226c

080012b8 <SCCB_SDA_IN>:


void SCCB_SDA_IN(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <SCCB_SDA_IN+0x54>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	4a0d      	ldr	r2, [pc, #52]	; (800130c <SCCB_SDA_IN+0x54>)
 80012d6:	f043 0308 	orr.w	r3, r3, #8
 80012da:	6313      	str	r3, [r2, #48]	; 0x30
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <SCCB_SDA_IN+0x54>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	683b      	ldr	r3, [r7, #0]
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f4:	2302      	movs	r3, #2
 80012f6:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <SCCB_SDA_IN+0x58>)
 80012fe:	f002 febb 	bl	8004078 <HAL_GPIO_Init>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40020c00 	.word	0x40020c00

08001314 <SCCB_SDA_OUT>:

void SCCB_SDA_OUT(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <SCCB_SDA_OUT+0x50>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	4a0c      	ldr	r2, [pc, #48]	; (8001364 <SCCB_SDA_OUT+0x50>)
 8001332:	f043 0308 	orr.w	r3, r3, #8
 8001336:	6313      	str	r3, [r2, #48]	; 0x30
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <SCCB_SDA_OUT+0x50>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800134c:	2302      	movs	r3, #2
 800134e:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <SCCB_SDA_OUT+0x54>)
 8001356:	f002 fe8f 	bl	8004078 <HAL_GPIO_Init>
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40020c00 	.word	0x40020c00

0800136c <SCCB_Rst>:

void SCCB_Rst(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,GPIO_PIN_RESET)	;
 8001370:	2200      	movs	r2, #0
 8001372:	2108      	movs	r1, #8
 8001374:	480b      	ldr	r0, [pc, #44]	; (80013a4 <SCCB_Rst+0x38>)
 8001376:	f003 f833 	bl	80043e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_15,GPIO_PIN_RESET)	;
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001380:	4809      	ldr	r0, [pc, #36]	; (80013a8 <SCCB_Rst+0x3c>)
 8001382:	f003 f82d 	bl	80043e0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001386:	2064      	movs	r0, #100	; 0x64
 8001388:	f000 fc6e 	bl	8001c68 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_15,GPIO_PIN_SET)	;
 800138c:	2201      	movs	r2, #1
 800138e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <SCCB_Rst+0x3c>)
 8001394:	f003 f824 	bl	80043e0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001398:	2064      	movs	r0, #100	; 0x64
 800139a:	f000 fc65 	bl	8001c68 <HAL_Delay>
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40020c00 	.word	0x40020c00
 80013a8:	40021800 	.word	0x40021800

080013ac <OV2640_UXGA_Init>:
	0xdd, 0x7f,
	0x05, 0x00,
};

void OV2640_UXGA_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<sizeof(ov2640_uxga_init_reg_tbl)/2 ; i++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	e015      	b.n	80013e4 <OV2640_UXGA_Init+0x38>
 {
   SCCB_WR_Reg(ov2640_uxga_init_reg_tbl[i][0],ov2640_uxga_init_reg_tbl[i][1]);
 80013b8:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <OV2640_UXGA_Init+0x48>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80013c0:	490c      	ldr	r1, [pc, #48]	; (80013f4 <OV2640_UXGA_Init+0x48>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	440b      	add	r3, r1
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	4619      	mov	r1, r3
 80013cc:	4610      	mov	r0, r2
 80013ce:	f7ff fedb 	bl	8001188 <SCCB_WR_Reg>
   if(i<10) HAL_Delay(5);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b09      	cmp	r3, #9
 80013d6:	d802      	bhi.n	80013de <OV2640_UXGA_Init+0x32>
 80013d8:	2005      	movs	r0, #5
 80013da:	f000 fc45 	bl	8001c68 <HAL_Delay>
	for(uint32_t i=0; i<sizeof(ov2640_uxga_init_reg_tbl)/2 ; i++)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3301      	adds	r3, #1
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2bb1      	cmp	r3, #177	; 0xb1
 80013e8:	d9e6      	bls.n	80013b8 <OV2640_UXGA_Init+0xc>
 }

}
 80013ea:	bf00      	nop
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	08010900 	.word	0x08010900

080013f8 <OV2640_RGB565_Mode>:
		0xe1, 0x67
};

//OV2640 mode: RGB565
void OV2640_RGB565_Mode(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	uint16_t i=0;
 80013fe:	2300      	movs	r3, #0
 8001400:	80fb      	strh	r3, [r7, #6]

	for(i=0;i<(sizeof(ov2640_rgb565_reg_tbl)/2);i++)
 8001402:	2300      	movs	r3, #0
 8001404:	80fb      	strh	r3, [r7, #6]
 8001406:	e00f      	b.n	8001428 <OV2640_RGB565_Mode+0x30>
	{
		SCCB_WR_Reg(ov2640_rgb565_reg_tbl[i][0],ov2640_rgb565_reg_tbl[i][1]);
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <OV2640_RGB565_Mode+0x40>)
 800140c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	4909      	ldr	r1, [pc, #36]	; (8001438 <OV2640_RGB565_Mode+0x40>)
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	440b      	add	r3, r1
 8001418:	785b      	ldrb	r3, [r3, #1]
 800141a:	4619      	mov	r1, r3
 800141c:	4610      	mov	r0, r2
 800141e:	f7ff feb3 	bl	8001188 <SCCB_WR_Reg>
	for(i=0;i<(sizeof(ov2640_rgb565_reg_tbl)/2);i++)
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	3301      	adds	r3, #1
 8001426:	80fb      	strh	r3, [r7, #6]
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	2b06      	cmp	r3, #6
 800142c:	d9ec      	bls.n	8001408 <OV2640_RGB565_Mode+0x10>
	}
}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	08010a64 	.word	0x08010a64

0800143c <OV2640_OutSize_Set>:
    SCCB_WR_Reg(0X17,sx>>3);
    SCCB_WR_Reg(0X18,endx>>3);
}

uint8_t OV2640_OutSize_Set(uint16_t width,uint16_t height)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	460a      	mov	r2, r1
 8001446:	80fb      	strh	r3, [r7, #6]
 8001448:	4613      	mov	r3, r2
 800144a:	80bb      	strh	r3, [r7, #4]
    uint16_t outh;
    uint16_t outw;
    uint8_t temp;
    if(width%4)return 1;
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	b29b      	uxth	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <OV2640_OutSize_Set+0x20>
 8001458:	2301      	movs	r3, #1
 800145a:	e03e      	b.n	80014da <OV2640_OutSize_Set+0x9e>
    if(height%4)return 2;
 800145c:	88bb      	ldrh	r3, [r7, #4]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	b29b      	uxth	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <OV2640_OutSize_Set+0x30>
 8001468:	2302      	movs	r3, #2
 800146a:	e036      	b.n	80014da <OV2640_OutSize_Set+0x9e>
    outw=width/4;
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	81fb      	strh	r3, [r7, #14]
    outh=height/4;
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	81bb      	strh	r3, [r7, #12]
    SCCB_WR_Reg(0XFF,0X00);
 8001478:	2100      	movs	r1, #0
 800147a:	20ff      	movs	r0, #255	; 0xff
 800147c:	f7ff fe84 	bl	8001188 <SCCB_WR_Reg>
    SCCB_WR_Reg(0XE0,0X04);
 8001480:	2104      	movs	r1, #4
 8001482:	20e0      	movs	r0, #224	; 0xe0
 8001484:	f7ff fe80 	bl	8001188 <SCCB_WR_Reg>
    SCCB_WR_Reg(0X5A,outw&0XFF);
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	4619      	mov	r1, r3
 800148e:	205a      	movs	r0, #90	; 0x5a
 8001490:	f7ff fe7a 	bl	8001188 <SCCB_WR_Reg>
    SCCB_WR_Reg(0X5B,outh&0XFF);
 8001494:	89bb      	ldrh	r3, [r7, #12]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	4619      	mov	r1, r3
 800149a:	205b      	movs	r0, #91	; 0x5b
 800149c:	f7ff fe74 	bl	8001188 <SCCB_WR_Reg>
    temp=(outw>>8)&0X03;
 80014a0:	89fb      	ldrh	r3, [r7, #14]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	72fb      	strb	r3, [r7, #11]
    temp|=(outh>>6)&0X04;
 80014ae:	89bb      	ldrh	r3, [r7, #12]
 80014b0:	099b      	lsrs	r3, r3, #6
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	b25a      	sxtb	r2, r3
 80014bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	72fb      	strb	r3, [r7, #11]
    SCCB_WR_Reg(0X5C,temp);
 80014c6:	7afb      	ldrb	r3, [r7, #11]
 80014c8:	4619      	mov	r1, r3
 80014ca:	205c      	movs	r0, #92	; 0x5c
 80014cc:	f7ff fe5c 	bl	8001188 <SCCB_WR_Reg>
    SCCB_WR_Reg(0XE0,0X00);
 80014d0:	2100      	movs	r1, #0
 80014d2:	20e0      	movs	r0, #224	; 0xe0
 80014d4:	f7ff fe58 	bl	8001188 <SCCB_WR_Reg>
    return 0;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_MspInit+0x4c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <HAL_MspInit+0x4c>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_MspInit+0x4c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_MspInit+0x4c>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_MspInit+0x4c>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_MspInit+0x4c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08c      	sub	sp, #48	; 0x30
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a68      	ldr	r2, [pc, #416]	; (80016f4 <HAL_DCMI_MspInit+0x1c0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	f040 80c9 	bne.w	80016ea <HAL_DCMI_MspInit+0x1b6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	4b66      	ldr	r3, [pc, #408]	; (80016f8 <HAL_DCMI_MspInit+0x1c4>)
 800155e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001560:	4a65      	ldr	r2, [pc, #404]	; (80016f8 <HAL_DCMI_MspInit+0x1c4>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6353      	str	r3, [r2, #52]	; 0x34
 8001568:	4b63      	ldr	r3, [pc, #396]	; (80016f8 <HAL_DCMI_MspInit+0x1c4>)
 800156a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	4b5f      	ldr	r3, [pc, #380]	; (80016f8 <HAL_DCMI_MspInit+0x1c4>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	4a5e      	ldr	r2, [pc, #376]	; (80016f8 <HAL_DCMI_MspInit+0x1c4>)
 800157e:	f043 0310 	orr.w	r3, r3, #16
 8001582:	6313      	str	r3, [r2, #48]	; 0x30
 8001584:	4b5c      	ldr	r3, [pc, #368]	; (80016f8 <HAL_DCMI_MspInit+0x1c4>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	4b58      	ldr	r3, [pc, #352]	; (80016f8 <HAL_DCMI_MspInit+0x1c4>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	4a57      	ldr	r2, [pc, #348]	; (80016f8 <HAL_DCMI_MspInit+0x1c4>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6313      	str	r3, [r2, #48]	; 0x30
 80015a0:	4b55      	ldr	r3, [pc, #340]	; (80016f8 <HAL_DCMI_MspInit+0x1c4>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	4b51      	ldr	r3, [pc, #324]	; (80016f8 <HAL_DCMI_MspInit+0x1c4>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	4a50      	ldr	r2, [pc, #320]	; (80016f8 <HAL_DCMI_MspInit+0x1c4>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6313      	str	r3, [r2, #48]	; 0x30
 80015bc:	4b4e      	ldr	r3, [pc, #312]	; (80016f8 <HAL_DCMI_MspInit+0x1c4>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	4b4a      	ldr	r3, [pc, #296]	; (80016f8 <HAL_DCMI_MspInit+0x1c4>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	4a49      	ldr	r2, [pc, #292]	; (80016f8 <HAL_DCMI_MspInit+0x1c4>)
 80015d2:	f043 0302 	orr.w	r3, r3, #2
 80015d6:	6313      	str	r3, [r2, #48]	; 0x30
 80015d8:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <HAL_DCMI_MspInit+0x1c4>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80015e4:	2370      	movs	r3, #112	; 0x70
 80015e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015f4:	230d      	movs	r3, #13
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	483f      	ldr	r0, [pc, #252]	; (80016fc <HAL_DCMI_MspInit+0x1c8>)
 8001600:	f002 fd3a 	bl	8004078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001604:	2350      	movs	r3, #80	; 0x50
 8001606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001614:	230d      	movs	r3, #13
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	4838      	ldr	r0, [pc, #224]	; (8001700 <HAL_DCMI_MspInit+0x1cc>)
 8001620:	f002 fd2a 	bl	8004078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001624:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001636:	230d      	movs	r3, #13
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	4830      	ldr	r0, [pc, #192]	; (8001704 <HAL_DCMI_MspInit+0x1d0>)
 8001642:	f002 fd19 	bl	8004078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001646:	23c0      	movs	r3, #192	; 0xc0
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001656:	230d      	movs	r3, #13
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4829      	ldr	r0, [pc, #164]	; (8001708 <HAL_DCMI_MspInit+0x1d4>)
 8001662:	f002 fd09 	bl	8004078 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <HAL_DCMI_MspInit+0x1d8>)
 8001668:	4a29      	ldr	r2, [pc, #164]	; (8001710 <HAL_DCMI_MspInit+0x1dc>)
 800166a:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_DCMI_MspInit+0x1d8>)
 800166e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001672:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <HAL_DCMI_MspInit+0x1d8>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_DCMI_MspInit+0x1d8>)
 800167c:	2200      	movs	r2, #0
 800167e:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <HAL_DCMI_MspInit+0x1d8>)
 8001682:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001686:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001688:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_DCMI_MspInit+0x1d8>)
 800168a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800168e:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001690:	4b1e      	ldr	r3, [pc, #120]	; (800170c <HAL_DCMI_MspInit+0x1d8>)
 8001692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001696:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <HAL_DCMI_MspInit+0x1d8>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_DCMI_MspInit+0x1d8>)
 80016a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016a4:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_DCMI_MspInit+0x1d8>)
 80016a8:	2204      	movs	r2, #4
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <HAL_DCMI_MspInit+0x1d8>)
 80016ae:	2203      	movs	r2, #3
 80016b0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <HAL_DCMI_MspInit+0x1d8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <HAL_DCMI_MspInit+0x1d8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80016be:	4813      	ldr	r0, [pc, #76]	; (800170c <HAL_DCMI_MspInit+0x1d8>)
 80016c0:	f000 fee4 	bl	800248c <HAL_DMA_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_DCMI_MspInit+0x19a>
    {
      Error_Handler();
 80016ca:	f7ff fbe7 	bl	8000e9c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_DCMI_MspInit+0x1d8>)
 80016d2:	639a      	str	r2, [r3, #56]	; 0x38
 80016d4:	4a0d      	ldr	r2, [pc, #52]	; (800170c <HAL_DCMI_MspInit+0x1d8>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 2, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2102      	movs	r1, #2
 80016de:	204e      	movs	r0, #78	; 0x4e
 80016e0:	f000 fbc1 	bl	8001e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80016e4:	204e      	movs	r0, #78	; 0x4e
 80016e6:	f000 fbda 	bl	8001e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80016ea:	bf00      	nop
 80016ec:	3730      	adds	r7, #48	; 0x30
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	50050000 	.word	0x50050000
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40021000 	.word	0x40021000
 8001700:	40020000 	.word	0x40020000
 8001704:	40020800 	.word	0x40020800
 8001708:	40020400 	.word	0x40020400
 800170c:	2000118c 	.word	0x2000118c
 8001710:	40026428 	.word	0x40026428

08001714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a34      	ldr	r2, [pc, #208]	; (8001804 <HAL_UART_MspInit+0xf0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d162      	bne.n	80017fc <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b33      	ldr	r3, [pc, #204]	; (8001808 <HAL_UART_MspInit+0xf4>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a32      	ldr	r2, [pc, #200]	; (8001808 <HAL_UART_MspInit+0xf4>)
 8001740:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b30      	ldr	r3, [pc, #192]	; (8001808 <HAL_UART_MspInit+0xf4>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <HAL_UART_MspInit+0xf4>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a2b      	ldr	r2, [pc, #172]	; (8001808 <HAL_UART_MspInit+0xf4>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b29      	ldr	r3, [pc, #164]	; (8001808 <HAL_UART_MspInit+0xf4>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800176e:	2303      	movs	r3, #3
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800177e:	2308      	movs	r3, #8
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4820      	ldr	r0, [pc, #128]	; (800180c <HAL_UART_MspInit+0xf8>)
 800178a:	f002 fc75 	bl	8004078 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <HAL_UART_MspInit+0xfc>)
 8001790:	4a20      	ldr	r2, [pc, #128]	; (8001814 <HAL_UART_MspInit+0x100>)
 8001792:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001794:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <HAL_UART_MspInit+0xfc>)
 8001796:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800179a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_UART_MspInit+0xfc>)
 800179e:	2240      	movs	r2, #64	; 0x40
 80017a0:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_UART_MspInit+0xfc>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_UART_MspInit+0xfc>)
 80017aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ae:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_UART_MspInit+0xfc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <HAL_UART_MspInit+0xfc>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <HAL_UART_MspInit+0xfc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <HAL_UART_MspInit+0xfc>)
 80017c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017c8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_UART_MspInit+0xfc>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80017d0:	480f      	ldr	r0, [pc, #60]	; (8001810 <HAL_UART_MspInit+0xfc>)
 80017d2:	f000 fe5b 	bl	800248c <HAL_DMA_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80017dc:	f7ff fb5e 	bl	8000e9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <HAL_UART_MspInit+0xfc>)
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <HAL_UART_MspInit+0xfc>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2100      	movs	r1, #0
 80017f0:	2034      	movs	r0, #52	; 0x34
 80017f2:	f000 fb38 	bl	8001e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80017f6:	2034      	movs	r0, #52	; 0x34
 80017f8:	f000 fb51 	bl	8001e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40004c00 	.word	0x40004c00
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000
 8001810:	200022b4 	.word	0x200022b4
 8001814:	40026070 	.word	0x40026070

08001818 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800182c:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <HAL_FSMC_MspInit+0xc8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d151      	bne.n	80018d8 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001834:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <HAL_FSMC_MspInit+0xc8>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <HAL_FSMC_MspInit+0xcc>)
 8001840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001842:	4a28      	ldr	r2, [pc, #160]	; (80018e4 <HAL_FSMC_MspInit+0xcc>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6393      	str	r3, [r2, #56]	; 0x38
 800184a:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <HAL_FSMC_MspInit+0xcc>)
 800184c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001856:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800185a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001868:	230c      	movs	r3, #12
 800186a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	4619      	mov	r1, r3
 8001870:	481d      	ldr	r0, [pc, #116]	; (80018e8 <HAL_FSMC_MspInit+0xd0>)
 8001872:	f002 fc01 	bl	8004078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001876:	f240 433f 	movw	r3, #1087	; 0x43f
 800187a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001888:	230c      	movs	r3, #12
 800188a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	4619      	mov	r1, r3
 8001890:	4816      	ldr	r0, [pc, #88]	; (80018ec <HAL_FSMC_MspInit+0xd4>)
 8001892:	f002 fbf1 	bl	8004078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001896:	f64f 7383 	movw	r3, #65411	; 0xff83
 800189a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80018a8:	230c      	movs	r3, #12
 80018aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4619      	mov	r1, r3
 80018b0:	480f      	ldr	r0, [pc, #60]	; (80018f0 <HAL_FSMC_MspInit+0xd8>)
 80018b2:	f002 fbe1 	bl	8004078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80018b6:	f64f 7333 	movw	r3, #65331	; 0xff33
 80018ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80018c8:	230c      	movs	r3, #12
 80018ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	4808      	ldr	r0, [pc, #32]	; (80018f4 <HAL_FSMC_MspInit+0xdc>)
 80018d2:	f002 fbd1 	bl	8004078 <HAL_GPIO_Init>
 80018d6:	e000      	b.n	80018da <HAL_FSMC_MspInit+0xc2>
    return;
 80018d8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200000c4 	.word	0x200000c4
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40021400 	.word	0x40021400
 80018ec:	40021800 	.word	0x40021800
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40020c00 	.word	0x40020c00

080018f8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001900:	f7ff ff8a 	bl	8001818 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <NMI_Handler+0x4>

08001912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <MemManage_Handler+0x4>

0800191e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <BusFault_Handler+0x4>

08001924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <UsageFault_Handler+0x4>

0800192a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001958:	f000 f966 	bl	8001c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <DMA1_Stream4_IRQHandler+0x10>)
 8001966:	f000 ff87 	bl	8002878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200022b4 	.word	0x200022b4

08001974 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <UART4_IRQHandler+0x10>)
 800197a:	f005 f8bb 	bl	8006af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20002270 	.word	0x20002270

08001988 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <DMA2_Stream1_IRQHandler+0x10>)
 800198e:	f000 ff73 	bl	8002878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000118c 	.word	0x2000118c

0800199c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <OTG_FS_IRQHandler+0x10>)
 80019a2:	f002 ffa1 	bl	80048e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000475c 	.word	0x2000475c

080019b0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <DCMI_IRQHandler+0x10>)
 80019b6:	f000 fb2d 	bl	8002014 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20002228 	.word	0x20002228

080019c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	e00a      	b.n	80019ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019d6:	f3af 8000 	nop.w
 80019da:	4601      	mov	r1, r0
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	60ba      	str	r2, [r7, #8]
 80019e2:	b2ca      	uxtb	r2, r1
 80019e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	3301      	adds	r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dbf0      	blt.n	80019d6 <_read+0x12>
	}

return len;
 80019f4:	687b      	ldr	r3, [r7, #4]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e009      	b.n	8001a24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	60ba      	str	r2, [r7, #8]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f00c fe71 	bl	800e700 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3301      	adds	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	dbf1      	blt.n	8001a10 <_write+0x12>
	}
	return len;
 8001a2c:	687b      	ldr	r3, [r7, #4]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_close>:

int _close(int file)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a5e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <_isatty>:

int _isatty(int file)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
	return 1;
 8001a76:	2301      	movs	r3, #1
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa8:	4a14      	ldr	r2, [pc, #80]	; (8001afc <_sbrk+0x5c>)
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <_sbrk+0x60>)
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d102      	bne.n	8001ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <_sbrk+0x64>)
 8001abe:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <_sbrk+0x68>)
 8001ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <_sbrk+0x64>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d207      	bcs.n	8001ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad0:	f00d f960 	bl	800ed94 <__errno>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
 8001ade:	e009      	b.n	8001af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <_sbrk+0x64>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <_sbrk+0x64>)
 8001af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20020000 	.word	0x20020000
 8001b00:	00000400 	.word	0x00000400
 8001b04:	200000c8 	.word	0x200000c8
 8001b08:	20004a70 	.word	0x20004a70

08001b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <SystemInit+0x20>)
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <SystemInit+0x20>)
 8001b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b34:	480d      	ldr	r0, [pc, #52]	; (8001b6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b36:	490e      	ldr	r1, [pc, #56]	; (8001b70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b38:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b3c:	e002      	b.n	8001b44 <LoopCopyDataInit>

08001b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b42:	3304      	adds	r3, #4

08001b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b48:	d3f9      	bcc.n	8001b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b4c:	4c0b      	ldr	r4, [pc, #44]	; (8001b7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b50:	e001      	b.n	8001b56 <LoopFillZerobss>

08001b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b54:	3204      	adds	r2, #4

08001b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b58:	d3fb      	bcc.n	8001b52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b5a:	f7ff ffd7 	bl	8001b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5e:	f00d f91f 	bl	800eda0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b62:	f7fe fe23 	bl	80007ac <main>
  bx  lr    
 8001b66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b70:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001b74:	08010bd0 	.word	0x08010bd0
  ldr r2, =_sbss
 8001b78:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001b7c:	20004a70 	.word	0x20004a70

08001b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC_IRQHandler>
	...

08001b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <HAL_Init+0x40>)
 8001b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <HAL_Init+0x40>)
 8001b9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_Init+0x40>)
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 f94f 	bl	8001e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb2:	200f      	movs	r0, #15
 8001bb4:	f000 f808 	bl	8001bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb8:	f7ff fc94 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023c00 	.word	0x40023c00

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_InitTick+0x54>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_InitTick+0x58>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f967 	bl	8001eba <HAL_SYSTICK_Config>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00e      	b.n	8001c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	d80a      	bhi.n	8001c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f000 f92f 	bl	8001e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c08:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <HAL_InitTick+0x5c>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000004 	.word	0x20000004
 8001c20:	2000000c 	.word	0x2000000c
 8001c24:	20000008 	.word	0x20000008

08001c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x20>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x24>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_IncTick+0x24>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	2000000c 	.word	0x2000000c
 8001c4c:	20002314 	.word	0x20002314

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20002314 	.word	0x20002314

08001c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff ffee 	bl	8001c50 <HAL_GetTick>
 8001c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d005      	beq.n	8001c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_Delay+0x44>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c8e:	bf00      	nop
 8001c90:	f7ff ffde 	bl	8001c50 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8f7      	bhi.n	8001c90 <HAL_Delay+0x28>
  {
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000000c 	.word	0x2000000c

08001cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60d3      	str	r3, [r2, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <__NVIC_GetPriorityGrouping+0x18>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	f003 0307 	and.w	r3, r3, #7
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db0b      	blt.n	8001d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	f003 021f 	and.w	r2, r3, #31
 8001d2c:	4907      	ldr	r1, [pc, #28]	; (8001d4c <__NVIC_EnableIRQ+0x38>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	2001      	movs	r0, #1
 8001d36:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000e100 	.word	0xe000e100

08001d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	6039      	str	r1, [r7, #0]
 8001d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	db0a      	blt.n	8001d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	490c      	ldr	r1, [pc, #48]	; (8001d9c <__NVIC_SetPriority+0x4c>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	0112      	lsls	r2, r2, #4
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	440b      	add	r3, r1
 8001d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d78:	e00a      	b.n	8001d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4908      	ldr	r1, [pc, #32]	; (8001da0 <__NVIC_SetPriority+0x50>)
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	3b04      	subs	r3, #4
 8001d88:	0112      	lsls	r2, r2, #4
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	761a      	strb	r2, [r3, #24]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e100 	.word	0xe000e100
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f1c3 0307 	rsb	r3, r3, #7
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	bf28      	it	cs
 8001dc2:	2304      	movcs	r3, #4
 8001dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d902      	bls.n	8001dd4 <NVIC_EncodePriority+0x30>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3b03      	subs	r3, #3
 8001dd2:	e000      	b.n	8001dd6 <NVIC_EncodePriority+0x32>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	401a      	ands	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	43d9      	mvns	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	4313      	orrs	r3, r2
         );
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3724      	adds	r7, #36	; 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e1c:	d301      	bcc.n	8001e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00f      	b.n	8001e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <SysTick_Config+0x40>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2a:	210f      	movs	r1, #15
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	f7ff ff8e 	bl	8001d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <SysTick_Config+0x40>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <SysTick_Config+0x40>)
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	e000e010 	.word	0xe000e010

08001e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ff29 	bl	8001cb0 <__NVIC_SetPriorityGrouping>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e78:	f7ff ff3e 	bl	8001cf8 <__NVIC_GetPriorityGrouping>
 8001e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	6978      	ldr	r0, [r7, #20]
 8001e84:	f7ff ff8e 	bl	8001da4 <NVIC_EncodePriority>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff5d 	bl	8001d50 <__NVIC_SetPriority>
}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff31 	bl	8001d14 <__NVIC_EnableIRQ>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffa2 	bl	8001e0c <SysTick_Config>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_DCMI_Start_DMA+0x20>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e086      	b.n	8002002 <HAL_DCMI_Start_DMA+0x12e>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f12:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0202 	bic.w	r2, r2, #2
 8001f22:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6819      	ldr	r1, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f38:	4a34      	ldr	r2, [pc, #208]	; (800200c <HAL_DCMI_Start_DMA+0x138>)
 8001f3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f40:	4a33      	ldr	r2, [pc, #204]	; (8002010 <HAL_DCMI_Start_DMA+0x13c>)
 8001f42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f48:	2200      	movs	r2, #0
 8001f4a:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5e:	d20a      	bcs.n	8001f76 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3328      	adds	r3, #40	; 0x28
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	f000 fb98 	bl	80026a4 <HAL_DMA_Start_IT>
 8001f74:	e038      	b.n	8001fe8 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	4a24      	ldr	r2, [pc, #144]	; (800200c <HAL_DCMI_Start_DMA+0x138>)
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001f90:	e009      	b.n	8001fa6 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	085a      	lsrs	r2, r3, #1
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	005a      	lsls	r2, r3, #1
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fae:	d2f0      	bcs.n	8001f92 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	1e9a      	subs	r2, r3, #2
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3328      	adds	r3, #40	; 0x28
 8001fd8:	4619      	mov	r1, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	f000 fec0 	bl	8002d68 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	0800225b 	.word	0x0800225b
 8002010:	08002385 	.word	0x08002385

08002014 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d016      	beq.n	800205c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2204      	movs	r2, #4
 8002034:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203a:	f043 0202 	orr.w	r2, r3, #2
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2204      	movs	r2, #4
 8002046:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204e:	4a2f      	ldr	r2, [pc, #188]	; (800210c <HAL_DCMI_IRQHandler+0xf8>)
 8002050:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fbec 	bl	8002834 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d016      	beq.n	8002094 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2202      	movs	r2, #2
 800206c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002072:	f043 0201 	orr.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2204      	movs	r2, #4
 800207e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002086:	4a21      	ldr	r2, [pc, #132]	; (800210c <HAL_DCMI_IRQHandler+0xf8>)
 8002088:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	4618      	mov	r0, r3
 8002090:	f000 fbd0 	bl	8002834 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b00      	cmp	r3, #0
 800209c:	d006      	beq.n	80020ac <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2210      	movs	r2, #16
 80020a4:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f83c 	bl	8002124 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2208      	movs	r2, #8
 80020bc:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f83a 	bl	8002138 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d019      	beq.n	8002102 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d107      	bne.n	80020ec <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 021e 	bic.w	r2, r2, #30
 80020ea:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7fe fb4b 	bl	8000798 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	08002385 	.word	0x08002385

08002110 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_DCMI_ConfigCrop>:
  * @param  XSize DCMI Pixel per line
  * @param  YSize DCMI Line number
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_ConfigCrop(DCMI_HandleTypeDef *hdcmi, uint32_t X0, uint32_t Y0, uint32_t XSize, uint32_t YSize)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_DCMI_ConfigCrop+0x1c>
 8002164:	2302      	movs	r3, #2
 8002166:	e01e      	b.n	80021a6 <HAL_DCMI_ConfigCrop+0x5a>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  assert_param(IS_DCMI_WINDOW_COORDINATE(YSize));
  assert_param(IS_DCMI_WINDOW_COORDINATE(XSize));
  assert_param(IS_DCMI_WINDOW_HEIGHT(Y0));

  /* Configure CROP */
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_POSITION_CWSIZE_VLINE));
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	0419      	lsls	r1, r3, #16
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_POSITION_CWSTRT_VST));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	0419      	lsls	r1, r3, #16
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	430a      	orrs	r2, r1
 8002192:	621a      	str	r2, [r3, #32]

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_DCMI_DisableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_DCMI_DisableCrop+0x16>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e018      	b.n	80021fa <HAL_DCMI_DisableCrop+0x48>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable DCMI Crop feature */
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0204 	bic.w	r2, r2, #4
 80021e6:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_DCMI_EnableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_EnableCrop(DCMI_HandleTypeDef *hdcmi)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_DCMI_EnableCrop+0x16>
 8002218:	2302      	movs	r3, #2
 800221a:	e018      	b.n	800224e <HAL_DCMI_EnableCrop+0x48>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2202      	movs	r2, #2
 8002228:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Enable DCMI Crop feature */
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0204 	orr.w	r2, r2, #4
 800223a:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226a:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	d043      	beq.n	80022fc <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002280:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d118      	bne.n	80022c0 <DCMI_DMAXferCplt+0x66>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d015      	beq.n	80022c0 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	00da      	lsls	r2, r3, #3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	2200      	movs	r2, #0
 80022ae:	4619      	mov	r1, r3
 80022b0:	f001 fea2 	bl	8003ff8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	1e5a      	subs	r2, r3, #1
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28
 80022be:	e044      	b.n	800234a <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d13c      	bne.n	800234a <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	00da      	lsls	r2, r3, #3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	2201      	movs	r2, #1
 80022ea:	4619      	mov	r1, r3
 80022ec:	f001 fe84 	bl	8003ff8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	1e5a      	subs	r2, r3, #1
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	629a      	str	r2, [r3, #40]	; 0x28
 80022fa:	e026      	b.n	800234a <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002316:	60da      	str	r2, [r3, #12]
 8002318:	e017      	b.n	800234a <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10f      	bne.n	800234a <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232e:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	0099      	lsls	r1, r3, #2
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	440a      	add	r2, r1
 8002340:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	429a      	cmp	r2, r3
 8002354:	d112      	bne.n	800237c <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0201 	orr.w	r2, r2, #1
 8002364:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b02      	cmp	r3, #2
 8002372:	d103      	bne.n	800237c <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002398:	2b02      	cmp	r3, #2
 800239a:	d003      	beq.n	80023a4 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff feb3 	bl	8002110 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e05f      	b.n	8002484 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d109      	bne.n	80023e4 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff f8ab 	bl	8001534 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff f8a8 	bl	8001534 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80023fa:	f023 0308 	bic.w	r3, r3, #8
 80023fe:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6819      	ldr	r1, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002414:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002420:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800242c:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b10      	cmp	r3, #16
 800243c:	d112      	bne.n	8002464 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	7f1b      	ldrb	r3, [r3, #28]
 8002442:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	7f5b      	ldrb	r3, [r3, #29]
 8002448:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800244a:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7f9b      	ldrb	r3, [r3, #30]
 8002450:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002452:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7fdb      	ldrb	r3, [r3, #31]
 800245a:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002460:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002462:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 021e 	orr.w	r2, r2, #30
 8002472:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002498:	f7ff fbda 	bl	8001c50 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e099      	b.n	80025dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c8:	e00f      	b.n	80024ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ca:	f7ff fbc1 	bl	8001c50 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d908      	bls.n	80024ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2203      	movs	r2, #3
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e078      	b.n	80025dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1e8      	bne.n	80024ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	4b38      	ldr	r3, [pc, #224]	; (80025e4 <HAL_DMA_Init+0x158>)
 8002504:	4013      	ands	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002516:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002522:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	2b04      	cmp	r3, #4
 8002542:	d107      	bne.n	8002554 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	4313      	orrs	r3, r2
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f023 0307 	bic.w	r3, r3, #7
 800256a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	2b04      	cmp	r3, #4
 800257c:	d117      	bne.n	80025ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00e      	beq.n	80025ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fb6d 	bl	8002c70 <DMA_CheckFifoParam>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2240      	movs	r2, #64	; 0x40
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025aa:	2301      	movs	r3, #1
 80025ac:	e016      	b.n	80025dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fb24 	bl	8002c04 <DMA_CalcBaseAndBitshift>
 80025bc:	4603      	mov	r3, r0
 80025be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c4:	223f      	movs	r2, #63	; 0x3f
 80025c6:	409a      	lsls	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	f010803f 	.word	0xf010803f

080025e8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e050      	b.n	800269c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d101      	bne.n	800260a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002606:	2302      	movs	r3, #2
 8002608:	e048      	b.n	800269c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0201 	bic.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2200      	movs	r2, #0
 8002628:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2200      	movs	r2, #0
 8002640:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2221      	movs	r2, #33	; 0x21
 8002648:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fada 	bl	8002c04 <DMA_CalcBaseAndBitshift>
 8002650:	4603      	mov	r3, r0
 8002652:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	223f      	movs	r2, #63	; 0x3f
 800267e:	409a      	lsls	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_DMA_Start_IT+0x26>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e040      	b.n	800274c <HAL_DMA_Start_IT+0xa8>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d12f      	bne.n	800273e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2202      	movs	r2, #2
 80026e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fa58 	bl	8002ba8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	223f      	movs	r2, #63	; 0x3f
 80026fe:	409a      	lsls	r2, r3
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0216 	orr.w	r2, r2, #22
 8002712:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0208 	orr.w	r2, r2, #8
 800272a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	e005      	b.n	800274a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002746:	2302      	movs	r3, #2
 8002748:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800274a:	7dfb      	ldrb	r3, [r7, #23]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002762:	f7ff fa75 	bl	8001c50 <HAL_GetTick>
 8002766:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d008      	beq.n	8002786 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e052      	b.n	800282c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0216 	bic.w	r2, r2, #22
 8002794:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d103      	bne.n	80027b6 <HAL_DMA_Abort+0x62>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0208 	bic.w	r2, r2, #8
 80027c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0201 	bic.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d6:	e013      	b.n	8002800 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027d8:	f7ff fa3a 	bl	8001c50 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b05      	cmp	r3, #5
 80027e4:	d90c      	bls.n	8002800 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2220      	movs	r2, #32
 80027ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2203      	movs	r2, #3
 80027f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e015      	b.n	800282c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1e4      	bne.n	80027d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002812:	223f      	movs	r2, #63	; 0x3f
 8002814:	409a      	lsls	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d004      	beq.n	8002852 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00c      	b.n	800286c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2205      	movs	r2, #5
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0201 	bic.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002884:	4b92      	ldr	r3, [pc, #584]	; (8002ad0 <HAL_DMA_IRQHandler+0x258>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a92      	ldr	r2, [pc, #584]	; (8002ad4 <HAL_DMA_IRQHandler+0x25c>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	0a9b      	lsrs	r3, r3, #10
 8002890:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002896:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	2208      	movs	r2, #8
 80028a4:	409a      	lsls	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d01a      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d013      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0204 	bic.w	r2, r2, #4
 80028ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	2208      	movs	r2, #8
 80028d2:	409a      	lsls	r2, r3
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	f043 0201 	orr.w	r2, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	2201      	movs	r2, #1
 80028ea:	409a      	lsls	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d012      	beq.n	800291a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00b      	beq.n	800291a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002906:	2201      	movs	r2, #1
 8002908:	409a      	lsls	r2, r3
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	f043 0202 	orr.w	r2, r3, #2
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291e:	2204      	movs	r2, #4
 8002920:	409a      	lsls	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d012      	beq.n	8002950 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00b      	beq.n	8002950 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	2204      	movs	r2, #4
 800293e:	409a      	lsls	r2, r3
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002948:	f043 0204 	orr.w	r2, r3, #4
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002954:	2210      	movs	r2, #16
 8002956:	409a      	lsls	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d043      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d03c      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002972:	2210      	movs	r2, #16
 8002974:	409a      	lsls	r2, r3
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d018      	beq.n	80029ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d108      	bne.n	80029a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	2b00      	cmp	r3, #0
 800299c:	d024      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	4798      	blx	r3
 80029a6:	e01f      	b.n	80029e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01b      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	4798      	blx	r3
 80029b8:	e016      	b.n	80029e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d107      	bne.n	80029d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0208 	bic.w	r2, r2, #8
 80029d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	2220      	movs	r2, #32
 80029ee:	409a      	lsls	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 808e 	beq.w	8002b16 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 8086 	beq.w	8002b16 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0e:	2220      	movs	r2, #32
 8002a10:	409a      	lsls	r2, r3
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b05      	cmp	r3, #5
 8002a20:	d136      	bne.n	8002a90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0216 	bic.w	r2, r2, #22
 8002a30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d103      	bne.n	8002a52 <HAL_DMA_IRQHandler+0x1da>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0208 	bic.w	r2, r2, #8
 8002a60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	223f      	movs	r2, #63	; 0x3f
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d07d      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
        }
        return;
 8002a8e:	e078      	b.n	8002b82 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01c      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d108      	bne.n	8002abe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d030      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
 8002abc:	e02b      	b.n	8002b16 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d027      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
 8002ace:	e022      	b.n	8002b16 <HAL_DMA_IRQHandler+0x29e>
 8002ad0:	20000004 	.word	0x20000004
 8002ad4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10f      	bne.n	8002b06 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0210 	bic.w	r2, r2, #16
 8002af4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d032      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d022      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2205      	movs	r2, #5
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	3301      	adds	r3, #1
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d307      	bcc.n	8002b5e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f2      	bne.n	8002b42 <HAL_DMA_IRQHandler+0x2ca>
 8002b5c:	e000      	b.n	8002b60 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b5e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4798      	blx	r3
 8002b80:	e000      	b.n	8002b84 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b82:	bf00      	nop
    }
  }
}
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop

08002b8c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b9a:	b2db      	uxtb	r3, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b40      	cmp	r3, #64	; 0x40
 8002bd4:	d108      	bne.n	8002be8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002be6:	e007      	b.n	8002bf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	60da      	str	r2, [r3, #12]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	3b10      	subs	r3, #16
 8002c14:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <DMA_CalcBaseAndBitshift+0x64>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c1e:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <DMA_CalcBaseAndBitshift+0x68>)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4413      	add	r3, r2
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d909      	bls.n	8002c46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c3a:	f023 0303 	bic.w	r3, r3, #3
 8002c3e:	1d1a      	adds	r2, r3, #4
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	659a      	str	r2, [r3, #88]	; 0x58
 8002c44:	e007      	b.n	8002c56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	aaaaaaab 	.word	0xaaaaaaab
 8002c6c:	08010a8c 	.word	0x08010a8c

08002c70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d11f      	bne.n	8002cca <DMA_CheckFifoParam+0x5a>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d856      	bhi.n	8002d3e <DMA_CheckFifoParam+0xce>
 8002c90:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <DMA_CheckFifoParam+0x28>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002ca9 	.word	0x08002ca9
 8002c9c:	08002cbb 	.word	0x08002cbb
 8002ca0:	08002ca9 	.word	0x08002ca9
 8002ca4:	08002d3f 	.word	0x08002d3f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d046      	beq.n	8002d42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb8:	e043      	b.n	8002d42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cc2:	d140      	bne.n	8002d46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc8:	e03d      	b.n	8002d46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd2:	d121      	bne.n	8002d18 <DMA_CheckFifoParam+0xa8>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d837      	bhi.n	8002d4a <DMA_CheckFifoParam+0xda>
 8002cda:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <DMA_CheckFifoParam+0x70>)
 8002cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce0:	08002cf1 	.word	0x08002cf1
 8002ce4:	08002cf7 	.word	0x08002cf7
 8002ce8:	08002cf1 	.word	0x08002cf1
 8002cec:	08002d09 	.word	0x08002d09
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf4:	e030      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d025      	beq.n	8002d4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d06:	e022      	b.n	8002d4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d10:	d11f      	bne.n	8002d52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d16:	e01c      	b.n	8002d52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d903      	bls.n	8002d26 <DMA_CheckFifoParam+0xb6>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d003      	beq.n	8002d2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d24:	e018      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
      break;
 8002d2a:	e015      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00e      	beq.n	8002d56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3c:	e00b      	b.n	8002d56 <DMA_CheckFifoParam+0xe6>
      break;
 8002d3e:	bf00      	nop
 8002d40:	e00a      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d42:	bf00      	nop
 8002d44:	e008      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d46:	bf00      	nop
 8002d48:	e006      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e004      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e002      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d52:	bf00      	nop
 8002d54:	e000      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d56:	bf00      	nop
    }
  } 
  
  return status; 
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop

08002d68 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b80      	cmp	r3, #128	; 0x80
 8002d80:	d106      	bne.n	8002d90 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f001 b913 	b.w	8003fb6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d007      	beq.n	8002da8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2240      	movs	r2, #64	; 0x40
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f001 b901 	b.w	8003fb6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d102      	bne.n	8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	f001 b8f9 	b.w	8003fb6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	f041 80e7 	bne.w	8003fa8 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002df6:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f001 f910 	bl	800402c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	461a      	mov	r2, r3
 8002e12:	4b99      	ldr	r3, [pc, #612]	; (8003078 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d960      	bls.n	8002eda <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a97      	ldr	r2, [pc, #604]	; (800307c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d057      	beq.n	8002ed2 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a96      	ldr	r2, [pc, #600]	; (8003080 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d050      	beq.n	8002ece <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a94      	ldr	r2, [pc, #592]	; (8003084 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d049      	beq.n	8002eca <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a93      	ldr	r2, [pc, #588]	; (8003088 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d042      	beq.n	8002ec6 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a91      	ldr	r2, [pc, #580]	; (800308c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d03a      	beq.n	8002ec0 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a90      	ldr	r2, [pc, #576]	; (8003090 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d032      	beq.n	8002eba <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a8e      	ldr	r2, [pc, #568]	; (8003094 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d02a      	beq.n	8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a8d      	ldr	r2, [pc, #564]	; (8003098 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d022      	beq.n	8002eae <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a8b      	ldr	r2, [pc, #556]	; (800309c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01a      	beq.n	8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a8a      	ldr	r2, [pc, #552]	; (80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d012      	beq.n	8002ea2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a88      	ldr	r2, [pc, #544]	; (80030a4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00a      	beq.n	8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a87      	ldr	r2, [pc, #540]	; (80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d102      	bne.n	8002e96 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002e90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e94:	e01e      	b.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e9a:	e01b      	b.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ea0:	e018      	b.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ea2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ea6:	e015      	b.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ea8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002eac:	e012      	b.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002eae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eb2:	e00f      	b.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002eb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eb8:	e00c      	b.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002eba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ebe:	e009      	b.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ec0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ec4:	e006      	b.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ec6:	2320      	movs	r3, #32
 8002ec8:	e004      	b.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002eca:	2320      	movs	r3, #32
 8002ecc:	e002      	b.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ece:	2320      	movs	r3, #32
 8002ed0:	e000      	b.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ed2:	2320      	movs	r3, #32
 8002ed4:	4a75      	ldr	r2, [pc, #468]	; (80030ac <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002ed6:	60d3      	str	r3, [r2, #12]
 8002ed8:	e150      	b.n	800317c <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4b73      	ldr	r3, [pc, #460]	; (80030b0 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d960      	bls.n	8002fa8 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a64      	ldr	r2, [pc, #400]	; (800307c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d057      	beq.n	8002fa0 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a62      	ldr	r2, [pc, #392]	; (8003080 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d050      	beq.n	8002f9c <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a61      	ldr	r2, [pc, #388]	; (8003084 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d049      	beq.n	8002f98 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a5f      	ldr	r2, [pc, #380]	; (8003088 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d042      	beq.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a5e      	ldr	r2, [pc, #376]	; (800308c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d03a      	beq.n	8002f8e <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a5c      	ldr	r2, [pc, #368]	; (8003090 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d032      	beq.n	8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a5b      	ldr	r2, [pc, #364]	; (8003094 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d02a      	beq.n	8002f82 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a59      	ldr	r2, [pc, #356]	; (8003098 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d022      	beq.n	8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a58      	ldr	r2, [pc, #352]	; (800309c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d01a      	beq.n	8002f76 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a56      	ldr	r2, [pc, #344]	; (80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d012      	beq.n	8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a55      	ldr	r2, [pc, #340]	; (80030a4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00a      	beq.n	8002f6a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a53      	ldr	r2, [pc, #332]	; (80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d102      	bne.n	8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002f5e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f62:	e01e      	b.n	8002fa2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002f64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f68:	e01b      	b.n	8002fa2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002f6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f6e:	e018      	b.n	8002fa2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002f70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f74:	e015      	b.n	8002fa2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002f76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f7a:	e012      	b.n	8002fa2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002f7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f80:	e00f      	b.n	8002fa2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002f82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f86:	e00c      	b.n	8002fa2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002f88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f8c:	e009      	b.n	8002fa2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002f8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f92:	e006      	b.n	8002fa2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002f94:	2320      	movs	r3, #32
 8002f96:	e004      	b.n	8002fa2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002f98:	2320      	movs	r3, #32
 8002f9a:	e002      	b.n	8002fa2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002f9c:	2320      	movs	r3, #32
 8002f9e:	e000      	b.n	8002fa2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	4a42      	ldr	r2, [pc, #264]	; (80030ac <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002fa4:	6093      	str	r3, [r2, #8]
 8002fa6:	e0e9      	b.n	800317c <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b41      	ldr	r3, [pc, #260]	; (80030b4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	f240 8083 	bls.w	80030bc <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a30      	ldr	r2, [pc, #192]	; (800307c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d057      	beq.n	8003070 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a2e      	ldr	r2, [pc, #184]	; (8003080 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d050      	beq.n	800306c <HAL_DMAEx_MultiBufferStart_IT+0x304>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a2d      	ldr	r2, [pc, #180]	; (8003084 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d049      	beq.n	8003068 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d042      	beq.n	8003064 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a2a      	ldr	r2, [pc, #168]	; (800308c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d03a      	beq.n	800305e <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a28      	ldr	r2, [pc, #160]	; (8003090 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d032      	beq.n	8003058 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a27      	ldr	r2, [pc, #156]	; (8003094 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d02a      	beq.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a25      	ldr	r2, [pc, #148]	; (8003098 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d022      	beq.n	800304c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a24      	ldr	r2, [pc, #144]	; (800309c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d01a      	beq.n	8003046 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a22      	ldr	r2, [pc, #136]	; (80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d012      	beq.n	8003040 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a21      	ldr	r2, [pc, #132]	; (80030a4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00a      	beq.n	800303a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1f      	ldr	r2, [pc, #124]	; (80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d102      	bne.n	8003034 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800302e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003032:	e01e      	b.n	8003072 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003034:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003038:	e01b      	b.n	8003072 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800303a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800303e:	e018      	b.n	8003072 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003040:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003044:	e015      	b.n	8003072 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003046:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800304a:	e012      	b.n	8003072 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800304c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003050:	e00f      	b.n	8003072 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003052:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003056:	e00c      	b.n	8003072 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003058:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800305c:	e009      	b.n	8003072 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800305e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003062:	e006      	b.n	8003072 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003064:	2320      	movs	r3, #32
 8003066:	e004      	b.n	8003072 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003068:	2320      	movs	r3, #32
 800306a:	e002      	b.n	8003072 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800306c:	2320      	movs	r3, #32
 800306e:	e000      	b.n	8003072 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8003070:	2320      	movs	r3, #32
 8003072:	4a11      	ldr	r2, [pc, #68]	; (80030b8 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8003074:	60d3      	str	r3, [r2, #12]
 8003076:	e081      	b.n	800317c <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8003078:	40026458 	.word	0x40026458
 800307c:	40026010 	.word	0x40026010
 8003080:	40026410 	.word	0x40026410
 8003084:	40026070 	.word	0x40026070
 8003088:	40026470 	.word	0x40026470
 800308c:	40026028 	.word	0x40026028
 8003090:	40026428 	.word	0x40026428
 8003094:	40026088 	.word	0x40026088
 8003098:	40026488 	.word	0x40026488
 800309c:	40026040 	.word	0x40026040
 80030a0:	40026440 	.word	0x40026440
 80030a4:	400260a0 	.word	0x400260a0
 80030a8:	400264a0 	.word	0x400264a0
 80030ac:	40026400 	.word	0x40026400
 80030b0:	400260b8 	.word	0x400260b8
 80030b4:	40026058 	.word	0x40026058
 80030b8:	40026000 	.word	0x40026000
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a96      	ldr	r2, [pc, #600]	; (800331c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d057      	beq.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a95      	ldr	r2, [pc, #596]	; (8003320 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d050      	beq.n	8003172 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a93      	ldr	r2, [pc, #588]	; (8003324 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d049      	beq.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0x406>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a92      	ldr	r2, [pc, #584]	; (8003328 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d042      	beq.n	800316a <HAL_DMAEx_MultiBufferStart_IT+0x402>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a90      	ldr	r2, [pc, #576]	; (800332c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d03a      	beq.n	8003164 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a8f      	ldr	r2, [pc, #572]	; (8003330 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d032      	beq.n	800315e <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a8d      	ldr	r2, [pc, #564]	; (8003334 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d02a      	beq.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a8c      	ldr	r2, [pc, #560]	; (8003338 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d022      	beq.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a8a      	ldr	r2, [pc, #552]	; (800333c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d01a      	beq.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a89      	ldr	r2, [pc, #548]	; (8003340 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d012      	beq.n	8003146 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a87      	ldr	r2, [pc, #540]	; (8003344 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00a      	beq.n	8003140 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a86      	ldr	r2, [pc, #536]	; (8003348 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d102      	bne.n	800313a <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8003134:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003138:	e01e      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800313a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800313e:	e01b      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003140:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003144:	e018      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003146:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800314a:	e015      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800314c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003150:	e012      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003152:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003156:	e00f      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003158:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800315c:	e00c      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800315e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003162:	e009      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003164:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003168:	e006      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800316a:	2320      	movs	r3, #32
 800316c:	e004      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800316e:	2320      	movs	r3, #32
 8003170:	e002      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003172:	2320      	movs	r3, #32
 8003174:	e000      	b.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8003176:	2320      	movs	r3, #32
 8003178:	4a74      	ldr	r2, [pc, #464]	; (800334c <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 800317a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	4b73      	ldr	r3, [pc, #460]	; (8003350 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8003184:	429a      	cmp	r2, r3
 8003186:	d960      	bls.n	800324a <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a63      	ldr	r2, [pc, #396]	; (800331c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d057      	beq.n	8003242 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a62      	ldr	r2, [pc, #392]	; (8003320 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d050      	beq.n	800323e <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a60      	ldr	r2, [pc, #384]	; (8003324 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d049      	beq.n	800323a <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a5f      	ldr	r2, [pc, #380]	; (8003328 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d042      	beq.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a5d      	ldr	r2, [pc, #372]	; (800332c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d03a      	beq.n	8003230 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a5c      	ldr	r2, [pc, #368]	; (8003330 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d032      	beq.n	800322a <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a5a      	ldr	r2, [pc, #360]	; (8003334 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d02a      	beq.n	8003224 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a59      	ldr	r2, [pc, #356]	; (8003338 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d022      	beq.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a57      	ldr	r2, [pc, #348]	; (800333c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01a      	beq.n	8003218 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a56      	ldr	r2, [pc, #344]	; (8003340 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d012      	beq.n	8003212 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a54      	ldr	r2, [pc, #336]	; (8003344 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00a      	beq.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a53      	ldr	r2, [pc, #332]	; (8003348 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d102      	bne.n	8003206 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8003200:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003204:	e01e      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003206:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800320a:	e01b      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800320c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003210:	e018      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003212:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003216:	e015      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003218:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800321c:	e012      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800321e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003222:	e00f      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003228:	e00c      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800322a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800322e:	e009      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003234:	e006      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003236:	2310      	movs	r3, #16
 8003238:	e004      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800323a:	2310      	movs	r3, #16
 800323c:	e002      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800323e:	2310      	movs	r3, #16
 8003240:	e000      	b.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003242:	2310      	movs	r3, #16
 8003244:	4a43      	ldr	r2, [pc, #268]	; (8003354 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8003246:	60d3      	str	r3, [r2, #12]
 8003248:	e14f      	b.n	80034ea <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	4b41      	ldr	r3, [pc, #260]	; (8003358 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 8003252:	429a      	cmp	r2, r3
 8003254:	f240 8082 	bls.w	800335c <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a2f      	ldr	r2, [pc, #188]	; (800331c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d057      	beq.n	8003312 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a2e      	ldr	r2, [pc, #184]	; (8003320 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d050      	beq.n	800330e <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a2c      	ldr	r2, [pc, #176]	; (8003324 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d049      	beq.n	800330a <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a2b      	ldr	r2, [pc, #172]	; (8003328 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d042      	beq.n	8003306 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a29      	ldr	r2, [pc, #164]	; (800332c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d03a      	beq.n	8003300 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a28      	ldr	r2, [pc, #160]	; (8003330 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d032      	beq.n	80032fa <HAL_DMAEx_MultiBufferStart_IT+0x592>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a26      	ldr	r2, [pc, #152]	; (8003334 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d02a      	beq.n	80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a25      	ldr	r2, [pc, #148]	; (8003338 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d022      	beq.n	80032ee <HAL_DMAEx_MultiBufferStart_IT+0x586>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a23      	ldr	r2, [pc, #140]	; (800333c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01a      	beq.n	80032e8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a22      	ldr	r2, [pc, #136]	; (8003340 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d012      	beq.n	80032e2 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a20      	ldr	r2, [pc, #128]	; (8003344 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00a      	beq.n	80032dc <HAL_DMAEx_MultiBufferStart_IT+0x574>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1f      	ldr	r2, [pc, #124]	; (8003348 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d102      	bne.n	80032d6 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 80032d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032d4:	e01e      	b.n	8003314 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80032d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80032da:	e01b      	b.n	8003314 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80032dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032e0:	e018      	b.n	8003314 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80032e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032e6:	e015      	b.n	8003314 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80032e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032ec:	e012      	b.n	8003314 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80032ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032f2:	e00f      	b.n	8003314 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80032f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032f8:	e00c      	b.n	8003314 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80032fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032fe:	e009      	b.n	8003314 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003304:	e006      	b.n	8003314 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003306:	2310      	movs	r3, #16
 8003308:	e004      	b.n	8003314 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800330a:	2310      	movs	r3, #16
 800330c:	e002      	b.n	8003314 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800330e:	2310      	movs	r3, #16
 8003310:	e000      	b.n	8003314 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003312:	2310      	movs	r3, #16
 8003314:	4a0f      	ldr	r2, [pc, #60]	; (8003354 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8003316:	6093      	str	r3, [r2, #8]
 8003318:	e0e7      	b.n	80034ea <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800331a:	bf00      	nop
 800331c:	40026010 	.word	0x40026010
 8003320:	40026410 	.word	0x40026410
 8003324:	40026070 	.word	0x40026070
 8003328:	40026470 	.word	0x40026470
 800332c:	40026028 	.word	0x40026028
 8003330:	40026428 	.word	0x40026428
 8003334:	40026088 	.word	0x40026088
 8003338:	40026488 	.word	0x40026488
 800333c:	40026040 	.word	0x40026040
 8003340:	40026440 	.word	0x40026440
 8003344:	400260a0 	.word	0x400260a0
 8003348:	400264a0 	.word	0x400264a0
 800334c:	40026000 	.word	0x40026000
 8003350:	40026458 	.word	0x40026458
 8003354:	40026400 	.word	0x40026400
 8003358:	400260b8 	.word	0x400260b8
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	4b96      	ldr	r3, [pc, #600]	; (80035bc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003364:	429a      	cmp	r2, r3
 8003366:	d960      	bls.n	800342a <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a94      	ldr	r2, [pc, #592]	; (80035c0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d057      	beq.n	8003422 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a93      	ldr	r2, [pc, #588]	; (80035c4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d050      	beq.n	800341e <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a91      	ldr	r2, [pc, #580]	; (80035c8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d049      	beq.n	800341a <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a90      	ldr	r2, [pc, #576]	; (80035cc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d042      	beq.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a8e      	ldr	r2, [pc, #568]	; (80035d0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d03a      	beq.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a8d      	ldr	r2, [pc, #564]	; (80035d4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d032      	beq.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a8b      	ldr	r2, [pc, #556]	; (80035d8 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d02a      	beq.n	8003404 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a8a      	ldr	r2, [pc, #552]	; (80035dc <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d022      	beq.n	80033fe <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a88      	ldr	r2, [pc, #544]	; (80035e0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01a      	beq.n	80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a87      	ldr	r2, [pc, #540]	; (80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d012      	beq.n	80033f2 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a85      	ldr	r2, [pc, #532]	; (80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00a      	beq.n	80033ec <HAL_DMAEx_MultiBufferStart_IT+0x684>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a84      	ldr	r2, [pc, #528]	; (80035ec <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d102      	bne.n	80033e6 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 80033e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033e4:	e01e      	b.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80033e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80033ea:	e01b      	b.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80033ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033f0:	e018      	b.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80033f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033f6:	e015      	b.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80033f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033fc:	e012      	b.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80033fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003402:	e00f      	b.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003408:	e00c      	b.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800340a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800340e:	e009      	b.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003414:	e006      	b.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003416:	2310      	movs	r3, #16
 8003418:	e004      	b.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800341a:	2310      	movs	r3, #16
 800341c:	e002      	b.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800341e:	2310      	movs	r3, #16
 8003420:	e000      	b.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003422:	2310      	movs	r3, #16
 8003424:	4a72      	ldr	r2, [pc, #456]	; (80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8003426:	60d3      	str	r3, [r2, #12]
 8003428:	e05f      	b.n	80034ea <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a64      	ldr	r2, [pc, #400]	; (80035c0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d057      	beq.n	80034e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a62      	ldr	r2, [pc, #392]	; (80035c4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d050      	beq.n	80034e0 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a61      	ldr	r2, [pc, #388]	; (80035c8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d049      	beq.n	80034dc <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a5f      	ldr	r2, [pc, #380]	; (80035cc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d042      	beq.n	80034d8 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a5e      	ldr	r2, [pc, #376]	; (80035d0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d03a      	beq.n	80034d2 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a5c      	ldr	r2, [pc, #368]	; (80035d4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d032      	beq.n	80034cc <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a5b      	ldr	r2, [pc, #364]	; (80035d8 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d02a      	beq.n	80034c6 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a59      	ldr	r2, [pc, #356]	; (80035dc <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d022      	beq.n	80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a58      	ldr	r2, [pc, #352]	; (80035e0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d01a      	beq.n	80034ba <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a56      	ldr	r2, [pc, #344]	; (80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d012      	beq.n	80034b4 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a55      	ldr	r2, [pc, #340]	; (80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00a      	beq.n	80034ae <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a53      	ldr	r2, [pc, #332]	; (80035ec <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d102      	bne.n	80034a8 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 80034a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034a6:	e01e      	b.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80034a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80034ac:	e01b      	b.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80034ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034b2:	e018      	b.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80034b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034b8:	e015      	b.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80034ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034be:	e012      	b.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80034c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c4:	e00f      	b.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80034c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ca:	e00c      	b.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80034cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d0:	e009      	b.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80034d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d6:	e006      	b.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80034d8:	2310      	movs	r3, #16
 80034da:	e004      	b.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80034dc:	2310      	movs	r3, #16
 80034de:	e002      	b.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80034e0:	2310      	movs	r3, #16
 80034e2:	e000      	b.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80034e4:	2310      	movs	r3, #16
 80034e6:	4a42      	ldr	r2, [pc, #264]	; (80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80034e8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	4b40      	ldr	r3, [pc, #256]	; (80035f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 80034f2:	429a      	cmp	r2, r3
 80034f4:	f240 8082 	bls.w	80035fc <HAL_DMAEx_MultiBufferStart_IT+0x894>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a30      	ldr	r2, [pc, #192]	; (80035c0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d057      	beq.n	80035b2 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a2f      	ldr	r2, [pc, #188]	; (80035c4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d050      	beq.n	80035ae <HAL_DMAEx_MultiBufferStart_IT+0x846>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2d      	ldr	r2, [pc, #180]	; (80035c8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d049      	beq.n	80035aa <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a2c      	ldr	r2, [pc, #176]	; (80035cc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d042      	beq.n	80035a6 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a2a      	ldr	r2, [pc, #168]	; (80035d0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d03a      	beq.n	80035a0 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a29      	ldr	r2, [pc, #164]	; (80035d4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d032      	beq.n	800359a <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a27      	ldr	r2, [pc, #156]	; (80035d8 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d02a      	beq.n	8003594 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a26      	ldr	r2, [pc, #152]	; (80035dc <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d022      	beq.n	800358e <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a24      	ldr	r2, [pc, #144]	; (80035e0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d01a      	beq.n	8003588 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a23      	ldr	r2, [pc, #140]	; (80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d012      	beq.n	8003582 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a21      	ldr	r2, [pc, #132]	; (80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00a      	beq.n	800357c <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a20      	ldr	r2, [pc, #128]	; (80035ec <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d102      	bne.n	8003576 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8003570:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003574:	e01e      	b.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800357a:	e01b      	b.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800357c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003580:	e018      	b.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003582:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003586:	e015      	b.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003588:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800358c:	e012      	b.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800358e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003592:	e00f      	b.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003598:	e00c      	b.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800359a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800359e:	e009      	b.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80035a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035a4:	e006      	b.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80035a6:	2308      	movs	r3, #8
 80035a8:	e004      	b.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80035aa:	2308      	movs	r3, #8
 80035ac:	e002      	b.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80035ae:	2308      	movs	r3, #8
 80035b0:	e000      	b.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80035b2:	2308      	movs	r3, #8
 80035b4:	4a10      	ldr	r2, [pc, #64]	; (80035f8 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 80035b6:	60d3      	str	r3, [r2, #12]
 80035b8:	e16f      	b.n	800389a <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80035ba:	bf00      	nop
 80035bc:	40026058 	.word	0x40026058
 80035c0:	40026010 	.word	0x40026010
 80035c4:	40026410 	.word	0x40026410
 80035c8:	40026070 	.word	0x40026070
 80035cc:	40026470 	.word	0x40026470
 80035d0:	40026028 	.word	0x40026028
 80035d4:	40026428 	.word	0x40026428
 80035d8:	40026088 	.word	0x40026088
 80035dc:	40026488 	.word	0x40026488
 80035e0:	40026040 	.word	0x40026040
 80035e4:	40026440 	.word	0x40026440
 80035e8:	400260a0 	.word	0x400260a0
 80035ec:	400264a0 	.word	0x400264a0
 80035f0:	40026000 	.word	0x40026000
 80035f4:	40026458 	.word	0x40026458
 80035f8:	40026400 	.word	0x40026400
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	4b94      	ldr	r3, [pc, #592]	; (8003854 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003604:	429a      	cmp	r2, r3
 8003606:	d960      	bls.n	80036ca <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a92      	ldr	r2, [pc, #584]	; (8003858 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d057      	beq.n	80036c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a91      	ldr	r2, [pc, #580]	; (800385c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d050      	beq.n	80036be <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a8f      	ldr	r2, [pc, #572]	; (8003860 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d049      	beq.n	80036ba <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a8e      	ldr	r2, [pc, #568]	; (8003864 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d042      	beq.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a8c      	ldr	r2, [pc, #560]	; (8003868 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d03a      	beq.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a8b      	ldr	r2, [pc, #556]	; (800386c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d032      	beq.n	80036aa <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a89      	ldr	r2, [pc, #548]	; (8003870 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d02a      	beq.n	80036a4 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a88      	ldr	r2, [pc, #544]	; (8003874 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d022      	beq.n	800369e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a86      	ldr	r2, [pc, #536]	; (8003878 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d01a      	beq.n	8003698 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a85      	ldr	r2, [pc, #532]	; (800387c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d012      	beq.n	8003692 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a83      	ldr	r2, [pc, #524]	; (8003880 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00a      	beq.n	800368c <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a82      	ldr	r2, [pc, #520]	; (8003884 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d102      	bne.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8003680:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003684:	e01e      	b.n	80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003686:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800368a:	e01b      	b.n	80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800368c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003690:	e018      	b.n	80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003692:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003696:	e015      	b.n	80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003698:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800369c:	e012      	b.n	80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800369e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036a2:	e00f      	b.n	80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80036a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036a8:	e00c      	b.n	80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80036aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ae:	e009      	b.n	80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80036b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036b4:	e006      	b.n	80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80036b6:	2308      	movs	r3, #8
 80036b8:	e004      	b.n	80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80036ba:	2308      	movs	r3, #8
 80036bc:	e002      	b.n	80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80036be:	2308      	movs	r3, #8
 80036c0:	e000      	b.n	80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80036c2:	2308      	movs	r3, #8
 80036c4:	4a70      	ldr	r2, [pc, #448]	; (8003888 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 80036c6:	6093      	str	r3, [r2, #8]
 80036c8:	e0e7      	b.n	800389a <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	4b6e      	ldr	r3, [pc, #440]	; (800388c <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d960      	bls.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a5f      	ldr	r2, [pc, #380]	; (8003858 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d057      	beq.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a5d      	ldr	r2, [pc, #372]	; (800385c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d050      	beq.n	800378c <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a5c      	ldr	r2, [pc, #368]	; (8003860 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d049      	beq.n	8003788 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a5a      	ldr	r2, [pc, #360]	; (8003864 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d042      	beq.n	8003784 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a59      	ldr	r2, [pc, #356]	; (8003868 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d03a      	beq.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a57      	ldr	r2, [pc, #348]	; (800386c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d032      	beq.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a56      	ldr	r2, [pc, #344]	; (8003870 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d02a      	beq.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a54      	ldr	r2, [pc, #336]	; (8003874 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d022      	beq.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a53      	ldr	r2, [pc, #332]	; (8003878 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d01a      	beq.n	8003766 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a51      	ldr	r2, [pc, #324]	; (800387c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d012      	beq.n	8003760 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a50      	ldr	r2, [pc, #320]	; (8003880 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00a      	beq.n	800375a <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a4e      	ldr	r2, [pc, #312]	; (8003884 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d102      	bne.n	8003754 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 800374e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003752:	e01e      	b.n	8003792 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003758:	e01b      	b.n	8003792 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800375a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800375e:	e018      	b.n	8003792 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003760:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003764:	e015      	b.n	8003792 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003766:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800376a:	e012      	b.n	8003792 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800376c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003770:	e00f      	b.n	8003792 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003776:	e00c      	b.n	8003792 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800377c:	e009      	b.n	8003792 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800377e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003782:	e006      	b.n	8003792 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003784:	2308      	movs	r3, #8
 8003786:	e004      	b.n	8003792 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003788:	2308      	movs	r3, #8
 800378a:	e002      	b.n	8003792 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800378c:	2308      	movs	r3, #8
 800378e:	e000      	b.n	8003792 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003790:	2308      	movs	r3, #8
 8003792:	4a3f      	ldr	r2, [pc, #252]	; (8003890 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8003794:	60d3      	str	r3, [r2, #12]
 8003796:	e080      	b.n	800389a <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a2e      	ldr	r2, [pc, #184]	; (8003858 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d078      	beq.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a2d      	ldr	r2, [pc, #180]	; (800385c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d050      	beq.n	800384e <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a2b      	ldr	r2, [pc, #172]	; (8003860 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d049      	beq.n	800384a <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2a      	ldr	r2, [pc, #168]	; (8003864 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d042      	beq.n	8003846 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a28      	ldr	r2, [pc, #160]	; (8003868 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d03a      	beq.n	8003840 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a27      	ldr	r2, [pc, #156]	; (800386c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d032      	beq.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a25      	ldr	r2, [pc, #148]	; (8003870 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d02a      	beq.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a24      	ldr	r2, [pc, #144]	; (8003874 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d022      	beq.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a22      	ldr	r2, [pc, #136]	; (8003878 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d01a      	beq.n	8003828 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a21      	ldr	r2, [pc, #132]	; (800387c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d012      	beq.n	8003822 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a1f      	ldr	r2, [pc, #124]	; (8003880 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00a      	beq.n	800381c <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1e      	ldr	r2, [pc, #120]	; (8003884 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d102      	bne.n	8003816 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8003810:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003814:	e03f      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800381a:	e03c      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800381c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003820:	e039      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003822:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003826:	e036      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003828:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800382c:	e033      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800382e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003832:	e030      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003838:	e02d      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800383a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800383e:	e02a      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003844:	e027      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003846:	2308      	movs	r3, #8
 8003848:	e025      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800384a:	2308      	movs	r3, #8
 800384c:	e023      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800384e:	2308      	movs	r3, #8
 8003850:	e021      	b.n	8003896 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003852:	bf00      	nop
 8003854:	400260b8 	.word	0x400260b8
 8003858:	40026010 	.word	0x40026010
 800385c:	40026410 	.word	0x40026410
 8003860:	40026070 	.word	0x40026070
 8003864:	40026470 	.word	0x40026470
 8003868:	40026028 	.word	0x40026028
 800386c:	40026428 	.word	0x40026428
 8003870:	40026088 	.word	0x40026088
 8003874:	40026488 	.word	0x40026488
 8003878:	40026040 	.word	0x40026040
 800387c:	40026440 	.word	0x40026440
 8003880:	400260a0 	.word	0x400260a0
 8003884:	400264a0 	.word	0x400264a0
 8003888:	40026400 	.word	0x40026400
 800388c:	40026058 	.word	0x40026058
 8003890:	40026000 	.word	0x40026000
 8003894:	2308      	movs	r3, #8
 8003896:	4a9a      	ldr	r2, [pc, #616]	; (8003b00 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003898:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	4b98      	ldr	r3, [pc, #608]	; (8003b04 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d960      	bls.n	8003968 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a97      	ldr	r2, [pc, #604]	; (8003b08 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d057      	beq.n	8003960 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a95      	ldr	r2, [pc, #596]	; (8003b0c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d050      	beq.n	800395c <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a94      	ldr	r2, [pc, #592]	; (8003b10 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d049      	beq.n	8003958 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a92      	ldr	r2, [pc, #584]	; (8003b14 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d042      	beq.n	8003954 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a91      	ldr	r2, [pc, #580]	; (8003b18 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d03a      	beq.n	800394e <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a8f      	ldr	r2, [pc, #572]	; (8003b1c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d032      	beq.n	8003948 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a8e      	ldr	r2, [pc, #568]	; (8003b20 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d02a      	beq.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a8c      	ldr	r2, [pc, #560]	; (8003b24 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d022      	beq.n	800393c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a8b      	ldr	r2, [pc, #556]	; (8003b28 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d01a      	beq.n	8003936 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a89      	ldr	r2, [pc, #548]	; (8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d012      	beq.n	8003930 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a88      	ldr	r2, [pc, #544]	; (8003b30 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00a      	beq.n	800392a <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a86      	ldr	r2, [pc, #536]	; (8003b34 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d102      	bne.n	8003924 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 800391e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003922:	e01e      	b.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003924:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003928:	e01b      	b.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800392a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800392e:	e018      	b.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003930:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003934:	e015      	b.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003936:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800393a:	e012      	b.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800393c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003940:	e00f      	b.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003942:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003946:	e00c      	b.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800394c:	e009      	b.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800394e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003952:	e006      	b.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003954:	2304      	movs	r3, #4
 8003956:	e004      	b.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003958:	2304      	movs	r3, #4
 800395a:	e002      	b.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800395c:	2304      	movs	r3, #4
 800395e:	e000      	b.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003960:	2304      	movs	r3, #4
 8003962:	4a75      	ldr	r2, [pc, #468]	; (8003b38 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8003964:	60d3      	str	r3, [r2, #12]
 8003966:	e151      	b.n	8003c0c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	4b73      	ldr	r3, [pc, #460]	; (8003b3c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8003970:	429a      	cmp	r2, r3
 8003972:	d960      	bls.n	8003a36 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a63      	ldr	r2, [pc, #396]	; (8003b08 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d057      	beq.n	8003a2e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a62      	ldr	r2, [pc, #392]	; (8003b0c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d050      	beq.n	8003a2a <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a60      	ldr	r2, [pc, #384]	; (8003b10 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d049      	beq.n	8003a26 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a5f      	ldr	r2, [pc, #380]	; (8003b14 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d042      	beq.n	8003a22 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a5d      	ldr	r2, [pc, #372]	; (8003b18 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d03a      	beq.n	8003a1c <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a5c      	ldr	r2, [pc, #368]	; (8003b1c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d032      	beq.n	8003a16 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a5a      	ldr	r2, [pc, #360]	; (8003b20 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d02a      	beq.n	8003a10 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a59      	ldr	r2, [pc, #356]	; (8003b24 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d022      	beq.n	8003a0a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a57      	ldr	r2, [pc, #348]	; (8003b28 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d01a      	beq.n	8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a56      	ldr	r2, [pc, #344]	; (8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d012      	beq.n	80039fe <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a54      	ldr	r2, [pc, #336]	; (8003b30 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00a      	beq.n	80039f8 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a53      	ldr	r2, [pc, #332]	; (8003b34 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d102      	bne.n	80039f2 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 80039ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039f0:	e01e      	b.n	8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80039f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039f6:	e01b      	b.n	8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80039f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039fc:	e018      	b.n	8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80039fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a02:	e015      	b.n	8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a08:	e012      	b.n	8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a0e:	e00f      	b.n	8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a14:	e00c      	b.n	8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a1a:	e009      	b.n	8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a20:	e006      	b.n	8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a22:	2304      	movs	r3, #4
 8003a24:	e004      	b.n	8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a26:	2304      	movs	r3, #4
 8003a28:	e002      	b.n	8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	e000      	b.n	8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003a2e:	2304      	movs	r3, #4
 8003a30:	4a41      	ldr	r2, [pc, #260]	; (8003b38 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8003a32:	6093      	str	r3, [r2, #8]
 8003a34:	e0ea      	b.n	8003c0c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4b40      	ldr	r3, [pc, #256]	; (8003b40 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	f240 8084 	bls.w	8003b4c <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a2f      	ldr	r2, [pc, #188]	; (8003b08 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d07a      	beq.n	8003b44 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a2e      	ldr	r2, [pc, #184]	; (8003b0c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d050      	beq.n	8003afa <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a2c      	ldr	r2, [pc, #176]	; (8003b10 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d049      	beq.n	8003af6 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a2b      	ldr	r2, [pc, #172]	; (8003b14 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d042      	beq.n	8003af2 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a29      	ldr	r2, [pc, #164]	; (8003b18 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d03a      	beq.n	8003aec <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a28      	ldr	r2, [pc, #160]	; (8003b1c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d032      	beq.n	8003ae6 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a26      	ldr	r2, [pc, #152]	; (8003b20 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d02a      	beq.n	8003ae0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a25      	ldr	r2, [pc, #148]	; (8003b24 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d022      	beq.n	8003ada <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a23      	ldr	r2, [pc, #140]	; (8003b28 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01a      	beq.n	8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a22      	ldr	r2, [pc, #136]	; (8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d012      	beq.n	8003ace <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a20      	ldr	r2, [pc, #128]	; (8003b30 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d102      	bne.n	8003ac2 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8003abc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ac0:	e041      	b.n	8003b46 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003ac2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ac6:	e03e      	b.n	8003b46 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003ac8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003acc:	e03b      	b.n	8003b46 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003ace:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ad2:	e038      	b.n	8003b46 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003ad4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ad8:	e035      	b.n	8003b46 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ade:	e032      	b.n	8003b46 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003ae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ae4:	e02f      	b.n	8003b46 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aea:	e02c      	b.n	8003b46 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003af0:	e029      	b.n	8003b46 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003af2:	2304      	movs	r3, #4
 8003af4:	e027      	b.n	8003b46 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003af6:	2304      	movs	r3, #4
 8003af8:	e025      	b.n	8003b46 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003afa:	2304      	movs	r3, #4
 8003afc:	e023      	b.n	8003b46 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003afe:	bf00      	nop
 8003b00:	40026000 	.word	0x40026000
 8003b04:	40026458 	.word	0x40026458
 8003b08:	40026010 	.word	0x40026010
 8003b0c:	40026410 	.word	0x40026410
 8003b10:	40026070 	.word	0x40026070
 8003b14:	40026470 	.word	0x40026470
 8003b18:	40026028 	.word	0x40026028
 8003b1c:	40026428 	.word	0x40026428
 8003b20:	40026088 	.word	0x40026088
 8003b24:	40026488 	.word	0x40026488
 8003b28:	40026040 	.word	0x40026040
 8003b2c:	40026440 	.word	0x40026440
 8003b30:	400260a0 	.word	0x400260a0
 8003b34:	400264a0 	.word	0x400264a0
 8003b38:	40026400 	.word	0x40026400
 8003b3c:	400260b8 	.word	0x400260b8
 8003b40:	40026058 	.word	0x40026058
 8003b44:	2304      	movs	r3, #4
 8003b46:	4a94      	ldr	r2, [pc, #592]	; (8003d98 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003b48:	60d3      	str	r3, [r2, #12]
 8003b4a:	e05f      	b.n	8003c0c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a92      	ldr	r2, [pc, #584]	; (8003d9c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d057      	beq.n	8003c06 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a91      	ldr	r2, [pc, #580]	; (8003da0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d050      	beq.n	8003c02 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a8f      	ldr	r2, [pc, #572]	; (8003da4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d049      	beq.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a8e      	ldr	r2, [pc, #568]	; (8003da8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d042      	beq.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a8c      	ldr	r2, [pc, #560]	; (8003dac <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d03a      	beq.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a8b      	ldr	r2, [pc, #556]	; (8003db0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d032      	beq.n	8003bee <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a89      	ldr	r2, [pc, #548]	; (8003db4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d02a      	beq.n	8003be8 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a88      	ldr	r2, [pc, #544]	; (8003db8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d022      	beq.n	8003be2 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a86      	ldr	r2, [pc, #536]	; (8003dbc <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d01a      	beq.n	8003bdc <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a85      	ldr	r2, [pc, #532]	; (8003dc0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d012      	beq.n	8003bd6 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a83      	ldr	r2, [pc, #524]	; (8003dc4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a82      	ldr	r2, [pc, #520]	; (8003dc8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d102      	bne.n	8003bca <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8003bc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bc8:	e01e      	b.n	8003c08 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003bca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bce:	e01b      	b.n	8003c08 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003bd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bd4:	e018      	b.n	8003c08 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003bd6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bda:	e015      	b.n	8003c08 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003bdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003be0:	e012      	b.n	8003c08 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003be6:	e00f      	b.n	8003c08 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bec:	e00c      	b.n	8003c08 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bf2:	e009      	b.n	8003c08 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bf8:	e006      	b.n	8003c08 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003bfa:	2304      	movs	r3, #4
 8003bfc:	e004      	b.n	8003c08 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003bfe:	2304      	movs	r3, #4
 8003c00:	e002      	b.n	8003c08 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003c02:	2304      	movs	r3, #4
 8003c04:	e000      	b.n	8003c08 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003c06:	2304      	movs	r3, #4
 8003c08:	4a63      	ldr	r2, [pc, #396]	; (8003d98 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003c0a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	4b6e      	ldr	r3, [pc, #440]	; (8003dcc <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d95c      	bls.n	8003cd2 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a5f      	ldr	r2, [pc, #380]	; (8003d9c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d053      	beq.n	8003cca <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a5e      	ldr	r2, [pc, #376]	; (8003da0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d04c      	beq.n	8003cc6 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a5c      	ldr	r2, [pc, #368]	; (8003da4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d045      	beq.n	8003cc2 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a5b      	ldr	r2, [pc, #364]	; (8003da8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d03e      	beq.n	8003cbe <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a59      	ldr	r2, [pc, #356]	; (8003dac <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d037      	beq.n	8003cba <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a58      	ldr	r2, [pc, #352]	; (8003db0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d030      	beq.n	8003cb6 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a56      	ldr	r2, [pc, #344]	; (8003db4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d029      	beq.n	8003cb2 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a55      	ldr	r2, [pc, #340]	; (8003db8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d022      	beq.n	8003cae <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a53      	ldr	r2, [pc, #332]	; (8003dbc <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01a      	beq.n	8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a52      	ldr	r2, [pc, #328]	; (8003dc0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d012      	beq.n	8003ca2 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a50      	ldr	r2, [pc, #320]	; (8003dc4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00a      	beq.n	8003c9c <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a4f      	ldr	r2, [pc, #316]	; (8003dc8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d102      	bne.n	8003c96 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8003c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c94:	e01a      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003c96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c9a:	e017      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003c9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ca0:	e014      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ca2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ca6:	e011      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ca8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cac:	e00e      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003cae:	2340      	movs	r3, #64	; 0x40
 8003cb0:	e00c      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003cb2:	2340      	movs	r3, #64	; 0x40
 8003cb4:	e00a      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003cb6:	2340      	movs	r3, #64	; 0x40
 8003cb8:	e008      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003cba:	2340      	movs	r3, #64	; 0x40
 8003cbc:	e006      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e004      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e002      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	4a40      	ldr	r2, [pc, #256]	; (8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003cce:	60d3      	str	r3, [r2, #12]
 8003cd0:	e141      	b.n	8003f56 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4b3e      	ldr	r3, [pc, #248]	; (8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d97c      	bls.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a2e      	ldr	r2, [pc, #184]	; (8003d9c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d053      	beq.n	8003d90 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a2c      	ldr	r2, [pc, #176]	; (8003da0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d04c      	beq.n	8003d8c <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a2b      	ldr	r2, [pc, #172]	; (8003da4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d045      	beq.n	8003d88 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a29      	ldr	r2, [pc, #164]	; (8003da8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d03e      	beq.n	8003d84 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a28      	ldr	r2, [pc, #160]	; (8003dac <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d037      	beq.n	8003d80 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a26      	ldr	r2, [pc, #152]	; (8003db0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d030      	beq.n	8003d7c <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a25      	ldr	r2, [pc, #148]	; (8003db4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d029      	beq.n	8003d78 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a23      	ldr	r2, [pc, #140]	; (8003db8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d022      	beq.n	8003d74 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a22      	ldr	r2, [pc, #136]	; (8003dbc <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d01a      	beq.n	8003d6e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a20      	ldr	r2, [pc, #128]	; (8003dc0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d012      	beq.n	8003d68 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00a      	beq.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d102      	bne.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8003d56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d5a:	e01a      	b.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003d5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d60:	e017      	b.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d66:	e014      	b.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d6c:	e011      	b.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003d6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d72:	e00e      	b.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003d74:	2340      	movs	r3, #64	; 0x40
 8003d76:	e00c      	b.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003d78:	2340      	movs	r3, #64	; 0x40
 8003d7a:	e00a      	b.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003d7c:	2340      	movs	r3, #64	; 0x40
 8003d7e:	e008      	b.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003d80:	2340      	movs	r3, #64	; 0x40
 8003d82:	e006      	b.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e004      	b.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e002      	b.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e000      	b.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003d90:	2301      	movs	r3, #1
 8003d92:	4a0f      	ldr	r2, [pc, #60]	; (8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003d94:	6093      	str	r3, [r2, #8]
 8003d96:	e0de      	b.n	8003f56 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003d98:	40026000 	.word	0x40026000
 8003d9c:	40026010 	.word	0x40026010
 8003da0:	40026410 	.word	0x40026410
 8003da4:	40026070 	.word	0x40026070
 8003da8:	40026470 	.word	0x40026470
 8003dac:	40026028 	.word	0x40026028
 8003db0:	40026428 	.word	0x40026428
 8003db4:	40026088 	.word	0x40026088
 8003db8:	40026488 	.word	0x40026488
 8003dbc:	40026040 	.word	0x40026040
 8003dc0:	40026440 	.word	0x40026440
 8003dc4:	400260a0 	.word	0x400260a0
 8003dc8:	400264a0 	.word	0x400264a0
 8003dcc:	40026458 	.word	0x40026458
 8003dd0:	40026400 	.word	0x40026400
 8003dd4:	400260b8 	.word	0x400260b8
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	4b78      	ldr	r3, [pc, #480]	; (8003fc0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d95c      	bls.n	8003e9e <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a76      	ldr	r2, [pc, #472]	; (8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d053      	beq.n	8003e96 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a75      	ldr	r2, [pc, #468]	; (8003fc8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d04c      	beq.n	8003e92 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a73      	ldr	r2, [pc, #460]	; (8003fcc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d045      	beq.n	8003e8e <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a72      	ldr	r2, [pc, #456]	; (8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d03e      	beq.n	8003e8a <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a70      	ldr	r2, [pc, #448]	; (8003fd4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d037      	beq.n	8003e86 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a6f      	ldr	r2, [pc, #444]	; (8003fd8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d030      	beq.n	8003e82 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a6d      	ldr	r2, [pc, #436]	; (8003fdc <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d029      	beq.n	8003e7e <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a6c      	ldr	r2, [pc, #432]	; (8003fe0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d022      	beq.n	8003e7a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a6a      	ldr	r2, [pc, #424]	; (8003fe4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d01a      	beq.n	8003e74 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a69      	ldr	r2, [pc, #420]	; (8003fe8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d012      	beq.n	8003e6e <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a67      	ldr	r2, [pc, #412]	; (8003fec <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00a      	beq.n	8003e68 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a66      	ldr	r2, [pc, #408]	; (8003ff0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d102      	bne.n	8003e62 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8003e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e60:	e01a      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003e62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e66:	e017      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e6c:	e014      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003e6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e72:	e011      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003e74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e78:	e00e      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003e7a:	2340      	movs	r3, #64	; 0x40
 8003e7c:	e00c      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003e7e:	2340      	movs	r3, #64	; 0x40
 8003e80:	e00a      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003e82:	2340      	movs	r3, #64	; 0x40
 8003e84:	e008      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003e86:	2340      	movs	r3, #64	; 0x40
 8003e88:	e006      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e004      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e002      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003e96:	2301      	movs	r3, #1
 8003e98:	4a56      	ldr	r2, [pc, #344]	; (8003ff4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003e9a:	60d3      	str	r3, [r2, #12]
 8003e9c:	e05b      	b.n	8003f56 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a48      	ldr	r2, [pc, #288]	; (8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d053      	beq.n	8003f50 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a46      	ldr	r2, [pc, #280]	; (8003fc8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d04c      	beq.n	8003f4c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a45      	ldr	r2, [pc, #276]	; (8003fcc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d045      	beq.n	8003f48 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a43      	ldr	r2, [pc, #268]	; (8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d03e      	beq.n	8003f44 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a42      	ldr	r2, [pc, #264]	; (8003fd4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d037      	beq.n	8003f40 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a40      	ldr	r2, [pc, #256]	; (8003fd8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d030      	beq.n	8003f3c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a3f      	ldr	r2, [pc, #252]	; (8003fdc <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d029      	beq.n	8003f38 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a3d      	ldr	r2, [pc, #244]	; (8003fe0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d022      	beq.n	8003f34 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a3c      	ldr	r2, [pc, #240]	; (8003fe4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d01a      	beq.n	8003f2e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a3a      	ldr	r2, [pc, #232]	; (8003fe8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d012      	beq.n	8003f28 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a39      	ldr	r2, [pc, #228]	; (8003fec <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00a      	beq.n	8003f22 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a37      	ldr	r2, [pc, #220]	; (8003ff0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d102      	bne.n	8003f1c <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8003f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f1a:	e01a      	b.n	8003f52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003f1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f20:	e017      	b.n	8003f52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f26:	e014      	b.n	8003f52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f2c:	e011      	b.n	8003f52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003f2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f32:	e00e      	b.n	8003f52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003f34:	2340      	movs	r3, #64	; 0x40
 8003f36:	e00c      	b.n	8003f52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003f38:	2340      	movs	r3, #64	; 0x40
 8003f3a:	e00a      	b.n	8003f52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003f3c:	2340      	movs	r3, #64	; 0x40
 8003f3e:	e008      	b.n	8003f52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003f40:	2340      	movs	r3, #64	; 0x40
 8003f42:	e006      	b.n	8003f52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e004      	b.n	8003f52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e002      	b.n	8003f52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003f50:	2301      	movs	r3, #1
 8003f52:	4a28      	ldr	r2, [pc, #160]	; (8003ff4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003f54:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0216 	orr.w	r2, r2, #22
 8003f64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d103      	bne.n	8003f86 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d007      	beq.n	8003f96 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0208 	orr.w	r2, r2, #8
 8003f94:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e005      	b.n	8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40026058 	.word	0x40026058
 8003fc4:	40026010 	.word	0x40026010
 8003fc8:	40026410 	.word	0x40026410
 8003fcc:	40026070 	.word	0x40026070
 8003fd0:	40026470 	.word	0x40026470
 8003fd4:	40026028 	.word	0x40026028
 8003fd8:	40026428 	.word	0x40026428
 8003fdc:	40026088 	.word	0x40026088
 8003fe0:	40026488 	.word	0x40026488
 8003fe4:	40026040 	.word	0x40026040
 8003fe8:	40026440 	.word	0x40026440
 8003fec:	400260a0 	.word	0x400260a0
 8003ff0:	400264a0 	.word	0x400264a0
 8003ff4:	40026000 	.word	0x40026000

08003ff8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	4613      	mov	r3, r2
 8004004:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d104      	bne.n	8004016 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	60da      	str	r2, [r3, #12]
 8004014:	e003      	b.n	800401e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b40      	cmp	r3, #64	; 0x40
 8004048:	d108      	bne.n	800405c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800405a:	e007      	b.n	800406c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]
}
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004078:	b480      	push	{r7}
 800407a:	b089      	sub	sp, #36	; 0x24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004086:	2300      	movs	r3, #0
 8004088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800408a:	2300      	movs	r3, #0
 800408c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	e16b      	b.n	800436c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004094:	2201      	movs	r2, #1
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4013      	ands	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	f040 815a 	bne.w	8004366 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d005      	beq.n	80040ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d130      	bne.n	800412c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	2203      	movs	r2, #3
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	43db      	mvns	r3, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4013      	ands	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004100:	2201      	movs	r2, #1
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	43db      	mvns	r3, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4013      	ands	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f003 0201 	and.w	r2, r3, #1
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4313      	orrs	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	2b03      	cmp	r3, #3
 8004136:	d017      	beq.n	8004168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	2203      	movs	r2, #3
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4013      	ands	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4313      	orrs	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d123      	bne.n	80041bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	08da      	lsrs	r2, r3, #3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3208      	adds	r2, #8
 800417c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	220f      	movs	r2, #15
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	08da      	lsrs	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3208      	adds	r2, #8
 80041b6:	69b9      	ldr	r1, [r7, #24]
 80041b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	2203      	movs	r2, #3
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 0203 	and.w	r2, r3, #3
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80b4 	beq.w	8004366 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	4b60      	ldr	r3, [pc, #384]	; (8004384 <HAL_GPIO_Init+0x30c>)
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	4a5f      	ldr	r2, [pc, #380]	; (8004384 <HAL_GPIO_Init+0x30c>)
 8004208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800420c:	6453      	str	r3, [r2, #68]	; 0x44
 800420e:	4b5d      	ldr	r3, [pc, #372]	; (8004384 <HAL_GPIO_Init+0x30c>)
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800421a:	4a5b      	ldr	r2, [pc, #364]	; (8004388 <HAL_GPIO_Init+0x310>)
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	089b      	lsrs	r3, r3, #2
 8004220:	3302      	adds	r3, #2
 8004222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	220f      	movs	r2, #15
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43db      	mvns	r3, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4013      	ands	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a52      	ldr	r2, [pc, #328]	; (800438c <HAL_GPIO_Init+0x314>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02b      	beq.n	800429e <HAL_GPIO_Init+0x226>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a51      	ldr	r2, [pc, #324]	; (8004390 <HAL_GPIO_Init+0x318>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d025      	beq.n	800429a <HAL_GPIO_Init+0x222>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a50      	ldr	r2, [pc, #320]	; (8004394 <HAL_GPIO_Init+0x31c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01f      	beq.n	8004296 <HAL_GPIO_Init+0x21e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a4f      	ldr	r2, [pc, #316]	; (8004398 <HAL_GPIO_Init+0x320>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d019      	beq.n	8004292 <HAL_GPIO_Init+0x21a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a4e      	ldr	r2, [pc, #312]	; (800439c <HAL_GPIO_Init+0x324>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d013      	beq.n	800428e <HAL_GPIO_Init+0x216>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a4d      	ldr	r2, [pc, #308]	; (80043a0 <HAL_GPIO_Init+0x328>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00d      	beq.n	800428a <HAL_GPIO_Init+0x212>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a4c      	ldr	r2, [pc, #304]	; (80043a4 <HAL_GPIO_Init+0x32c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d007      	beq.n	8004286 <HAL_GPIO_Init+0x20e>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a4b      	ldr	r2, [pc, #300]	; (80043a8 <HAL_GPIO_Init+0x330>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d101      	bne.n	8004282 <HAL_GPIO_Init+0x20a>
 800427e:	2307      	movs	r3, #7
 8004280:	e00e      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 8004282:	2308      	movs	r3, #8
 8004284:	e00c      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 8004286:	2306      	movs	r3, #6
 8004288:	e00a      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 800428a:	2305      	movs	r3, #5
 800428c:	e008      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 800428e:	2304      	movs	r3, #4
 8004290:	e006      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 8004292:	2303      	movs	r3, #3
 8004294:	e004      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 8004296:	2302      	movs	r3, #2
 8004298:	e002      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 800429e:	2300      	movs	r3, #0
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	f002 0203 	and.w	r2, r2, #3
 80042a6:	0092      	lsls	r2, r2, #2
 80042a8:	4093      	lsls	r3, r2
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042b0:	4935      	ldr	r1, [pc, #212]	; (8004388 <HAL_GPIO_Init+0x310>)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	089b      	lsrs	r3, r3, #2
 80042b6:	3302      	adds	r3, #2
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042be:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <HAL_GPIO_Init+0x334>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	43db      	mvns	r3, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4313      	orrs	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042e2:	4a32      	ldr	r2, [pc, #200]	; (80043ac <HAL_GPIO_Init+0x334>)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80042e8:	4b30      	ldr	r3, [pc, #192]	; (80043ac <HAL_GPIO_Init+0x334>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800430c:	4a27      	ldr	r2, [pc, #156]	; (80043ac <HAL_GPIO_Init+0x334>)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004312:	4b26      	ldr	r3, [pc, #152]	; (80043ac <HAL_GPIO_Init+0x334>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004336:	4a1d      	ldr	r2, [pc, #116]	; (80043ac <HAL_GPIO_Init+0x334>)
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800433c:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <HAL_GPIO_Init+0x334>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004360:	4a12      	ldr	r2, [pc, #72]	; (80043ac <HAL_GPIO_Init+0x334>)
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	3301      	adds	r3, #1
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	2b0f      	cmp	r3, #15
 8004370:	f67f ae90 	bls.w	8004094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop
 8004378:	3724      	adds	r7, #36	; 0x24
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40023800 	.word	0x40023800
 8004388:	40013800 	.word	0x40013800
 800438c:	40020000 	.word	0x40020000
 8004390:	40020400 	.word	0x40020400
 8004394:	40020800 	.word	0x40020800
 8004398:	40020c00 	.word	0x40020c00
 800439c:	40021000 	.word	0x40021000
 80043a0:	40021400 	.word	0x40021400
 80043a4:	40021800 	.word	0x40021800
 80043a8:	40021c00 	.word	0x40021c00
 80043ac:	40013c00 	.word	0x40013c00

080043b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	887b      	ldrh	r3, [r7, #2]
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043c8:	2301      	movs	r3, #1
 80043ca:	73fb      	strb	r3, [r7, #15]
 80043cc:	e001      	b.n	80043d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	807b      	strh	r3, [r7, #2]
 80043ec:	4613      	mov	r3, r2
 80043ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043f0:	787b      	ldrb	r3, [r7, #1]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043f6:	887a      	ldrh	r2, [r7, #2]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043fc:	e003      	b.n	8004406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043fe:	887b      	ldrh	r3, [r7, #2]
 8004400:	041a      	lsls	r2, r3, #16
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	619a      	str	r2, [r3, #24]
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004414:	b08f      	sub	sp, #60	; 0x3c
 8004416:	af0a      	add	r7, sp, #40	; 0x28
 8004418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e054      	b.n	80044ce <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f00a f9ce 	bl	800e7e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2203      	movs	r2, #3
 8004448:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004454:	2b00      	cmp	r3, #0
 8004456:	d102      	bne.n	800445e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f003 fb10 	bl	8007a88 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	603b      	str	r3, [r7, #0]
 800446e:	687e      	ldr	r6, [r7, #4]
 8004470:	466d      	mov	r5, sp
 8004472:	f106 0410 	add.w	r4, r6, #16
 8004476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800447a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800447c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800447e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004482:	e885 0003 	stmia.w	r5, {r0, r1}
 8004486:	1d33      	adds	r3, r6, #4
 8004488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800448a:	6838      	ldr	r0, [r7, #0]
 800448c:	f003 fa8a 	bl	80079a4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2101      	movs	r1, #1
 8004496:	4618      	mov	r0, r3
 8004498:	f003 fb07 	bl	8007aaa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	687e      	ldr	r6, [r7, #4]
 80044a4:	466d      	mov	r5, sp
 80044a6:	f106 0410 	add.w	r4, r6, #16
 80044aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80044ba:	1d33      	adds	r3, r6, #4
 80044bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044be:	6838      	ldr	r0, [r7, #0]
 80044c0:	f003 fc6e 	bl	8007da0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044d6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80044d6:	b590      	push	{r4, r7, lr}
 80044d8:	b089      	sub	sp, #36	; 0x24
 80044da:	af04      	add	r7, sp, #16
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	4608      	mov	r0, r1
 80044e0:	4611      	mov	r1, r2
 80044e2:	461a      	mov	r2, r3
 80044e4:	4603      	mov	r3, r0
 80044e6:	70fb      	strb	r3, [r7, #3]
 80044e8:	460b      	mov	r3, r1
 80044ea:	70bb      	strb	r3, [r7, #2]
 80044ec:	4613      	mov	r3, r2
 80044ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_HCD_HC_Init+0x28>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e076      	b.n	80045ec <HAL_HCD_HC_Init+0x116>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004506:	78fb      	ldrb	r3, [r7, #3]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	212c      	movs	r1, #44	; 0x2c
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	4413      	add	r3, r2
 8004512:	333d      	adds	r3, #61	; 0x3d
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	212c      	movs	r1, #44	; 0x2c
 800451e:	fb01 f303 	mul.w	r3, r1, r3
 8004522:	4413      	add	r3, r2
 8004524:	3338      	adds	r3, #56	; 0x38
 8004526:	787a      	ldrb	r2, [r7, #1]
 8004528:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	212c      	movs	r1, #44	; 0x2c
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	4413      	add	r3, r2
 8004536:	3340      	adds	r3, #64	; 0x40
 8004538:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800453a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	212c      	movs	r1, #44	; 0x2c
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	4413      	add	r3, r2
 8004548:	3339      	adds	r3, #57	; 0x39
 800454a:	78fa      	ldrb	r2, [r7, #3]
 800454c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	212c      	movs	r1, #44	; 0x2c
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	4413      	add	r3, r2
 800455a:	333f      	adds	r3, #63	; 0x3f
 800455c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004560:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004562:	78fb      	ldrb	r3, [r7, #3]
 8004564:	78ba      	ldrb	r2, [r7, #2]
 8004566:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800456a:	b2d0      	uxtb	r0, r2
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	212c      	movs	r1, #44	; 0x2c
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	4413      	add	r3, r2
 8004576:	333a      	adds	r3, #58	; 0x3a
 8004578:	4602      	mov	r2, r0
 800457a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800457c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004580:	2b00      	cmp	r3, #0
 8004582:	da09      	bge.n	8004598 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	212c      	movs	r1, #44	; 0x2c
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	4413      	add	r3, r2
 8004590:	333b      	adds	r3, #59	; 0x3b
 8004592:	2201      	movs	r2, #1
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	e008      	b.n	80045aa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	212c      	movs	r1, #44	; 0x2c
 800459e:	fb01 f303 	mul.w	r3, r1, r3
 80045a2:	4413      	add	r3, r2
 80045a4:	333b      	adds	r3, #59	; 0x3b
 80045a6:	2200      	movs	r2, #0
 80045a8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80045aa:	78fb      	ldrb	r3, [r7, #3]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	212c      	movs	r1, #44	; 0x2c
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	4413      	add	r3, r2
 80045b6:	333c      	adds	r3, #60	; 0x3c
 80045b8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80045bc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	787c      	ldrb	r4, [r7, #1]
 80045c4:	78ba      	ldrb	r2, [r7, #2]
 80045c6:	78f9      	ldrb	r1, [r7, #3]
 80045c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80045ca:	9302      	str	r3, [sp, #8]
 80045cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	4623      	mov	r3, r4
 80045da:	f003 fd5b 	bl	8008094 <USB_HC_Init>
 80045de:	4603      	mov	r3, r0
 80045e0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd90      	pop	{r4, r7, pc}

080045f4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_HCD_HC_Halt+0x1e>
 800460e:	2302      	movs	r3, #2
 8004610:	e00f      	b.n	8004632 <HAL_HCD_HC_Halt+0x3e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	4611      	mov	r1, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f003 ff97 	bl	8008556 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004630:	7bfb      	ldrb	r3, [r7, #15]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	4608      	mov	r0, r1
 8004646:	4611      	mov	r1, r2
 8004648:	461a      	mov	r2, r3
 800464a:	4603      	mov	r3, r0
 800464c:	70fb      	strb	r3, [r7, #3]
 800464e:	460b      	mov	r3, r1
 8004650:	70bb      	strb	r3, [r7, #2]
 8004652:	4613      	mov	r3, r2
 8004654:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004656:	78fb      	ldrb	r3, [r7, #3]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	212c      	movs	r1, #44	; 0x2c
 800465c:	fb01 f303 	mul.w	r3, r1, r3
 8004660:	4413      	add	r3, r2
 8004662:	333b      	adds	r3, #59	; 0x3b
 8004664:	78ba      	ldrb	r2, [r7, #2]
 8004666:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	212c      	movs	r1, #44	; 0x2c
 800466e:	fb01 f303 	mul.w	r3, r1, r3
 8004672:	4413      	add	r3, r2
 8004674:	333f      	adds	r3, #63	; 0x3f
 8004676:	787a      	ldrb	r2, [r7, #1]
 8004678:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800467a:	7c3b      	ldrb	r3, [r7, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d112      	bne.n	80046a6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	212c      	movs	r1, #44	; 0x2c
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	4413      	add	r3, r2
 800468c:	3342      	adds	r3, #66	; 0x42
 800468e:	2203      	movs	r2, #3
 8004690:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	212c      	movs	r1, #44	; 0x2c
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	4413      	add	r3, r2
 800469e:	333d      	adds	r3, #61	; 0x3d
 80046a0:	7f3a      	ldrb	r2, [r7, #28]
 80046a2:	701a      	strb	r2, [r3, #0]
 80046a4:	e008      	b.n	80046b8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046a6:	78fb      	ldrb	r3, [r7, #3]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	212c      	movs	r1, #44	; 0x2c
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	4413      	add	r3, r2
 80046b2:	3342      	adds	r3, #66	; 0x42
 80046b4:	2202      	movs	r2, #2
 80046b6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80046b8:	787b      	ldrb	r3, [r7, #1]
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	f200 80c6 	bhi.w	800484c <HAL_HCD_HC_SubmitRequest+0x210>
 80046c0:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80046c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c6:	bf00      	nop
 80046c8:	080046d9 	.word	0x080046d9
 80046cc:	08004839 	.word	0x08004839
 80046d0:	0800473d 	.word	0x0800473d
 80046d4:	080047bb 	.word	0x080047bb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80046d8:	7c3b      	ldrb	r3, [r7, #16]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	f040 80b8 	bne.w	8004850 <HAL_HCD_HC_SubmitRequest+0x214>
 80046e0:	78bb      	ldrb	r3, [r7, #2]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f040 80b4 	bne.w	8004850 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80046e8:	8b3b      	ldrh	r3, [r7, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d108      	bne.n	8004700 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80046ee:	78fb      	ldrb	r3, [r7, #3]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	212c      	movs	r1, #44	; 0x2c
 80046f4:	fb01 f303 	mul.w	r3, r1, r3
 80046f8:	4413      	add	r3, r2
 80046fa:	3355      	adds	r3, #85	; 0x55
 80046fc:	2201      	movs	r2, #1
 80046fe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	212c      	movs	r1, #44	; 0x2c
 8004706:	fb01 f303 	mul.w	r3, r1, r3
 800470a:	4413      	add	r3, r2
 800470c:	3355      	adds	r3, #85	; 0x55
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d109      	bne.n	8004728 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	212c      	movs	r1, #44	; 0x2c
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	4413      	add	r3, r2
 8004720:	3342      	adds	r3, #66	; 0x42
 8004722:	2200      	movs	r2, #0
 8004724:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004726:	e093      	b.n	8004850 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	212c      	movs	r1, #44	; 0x2c
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	4413      	add	r3, r2
 8004734:	3342      	adds	r3, #66	; 0x42
 8004736:	2202      	movs	r2, #2
 8004738:	701a      	strb	r2, [r3, #0]
      break;
 800473a:	e089      	b.n	8004850 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800473c:	78bb      	ldrb	r3, [r7, #2]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d11d      	bne.n	800477e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004742:	78fb      	ldrb	r3, [r7, #3]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	212c      	movs	r1, #44	; 0x2c
 8004748:	fb01 f303 	mul.w	r3, r1, r3
 800474c:	4413      	add	r3, r2
 800474e:	3355      	adds	r3, #85	; 0x55
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004756:	78fb      	ldrb	r3, [r7, #3]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	212c      	movs	r1, #44	; 0x2c
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	4413      	add	r3, r2
 8004762:	3342      	adds	r3, #66	; 0x42
 8004764:	2200      	movs	r2, #0
 8004766:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004768:	e073      	b.n	8004852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	212c      	movs	r1, #44	; 0x2c
 8004770:	fb01 f303 	mul.w	r3, r1, r3
 8004774:	4413      	add	r3, r2
 8004776:	3342      	adds	r3, #66	; 0x42
 8004778:	2202      	movs	r2, #2
 800477a:	701a      	strb	r2, [r3, #0]
      break;
 800477c:	e069      	b.n	8004852 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800477e:	78fb      	ldrb	r3, [r7, #3]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	212c      	movs	r1, #44	; 0x2c
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	4413      	add	r3, r2
 800478a:	3354      	adds	r3, #84	; 0x54
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004792:	78fb      	ldrb	r3, [r7, #3]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	212c      	movs	r1, #44	; 0x2c
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	4413      	add	r3, r2
 800479e:	3342      	adds	r3, #66	; 0x42
 80047a0:	2200      	movs	r2, #0
 80047a2:	701a      	strb	r2, [r3, #0]
      break;
 80047a4:	e055      	b.n	8004852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047a6:	78fb      	ldrb	r3, [r7, #3]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	212c      	movs	r1, #44	; 0x2c
 80047ac:	fb01 f303 	mul.w	r3, r1, r3
 80047b0:	4413      	add	r3, r2
 80047b2:	3342      	adds	r3, #66	; 0x42
 80047b4:	2202      	movs	r2, #2
 80047b6:	701a      	strb	r2, [r3, #0]
      break;
 80047b8:	e04b      	b.n	8004852 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80047ba:	78bb      	ldrb	r3, [r7, #2]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d11d      	bne.n	80047fc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	212c      	movs	r1, #44	; 0x2c
 80047c6:	fb01 f303 	mul.w	r3, r1, r3
 80047ca:	4413      	add	r3, r2
 80047cc:	3355      	adds	r3, #85	; 0x55
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d109      	bne.n	80047e8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	212c      	movs	r1, #44	; 0x2c
 80047da:	fb01 f303 	mul.w	r3, r1, r3
 80047de:	4413      	add	r3, r2
 80047e0:	3342      	adds	r3, #66	; 0x42
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80047e6:	e034      	b.n	8004852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	212c      	movs	r1, #44	; 0x2c
 80047ee:	fb01 f303 	mul.w	r3, r1, r3
 80047f2:	4413      	add	r3, r2
 80047f4:	3342      	adds	r3, #66	; 0x42
 80047f6:	2202      	movs	r2, #2
 80047f8:	701a      	strb	r2, [r3, #0]
      break;
 80047fa:	e02a      	b.n	8004852 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	212c      	movs	r1, #44	; 0x2c
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	4413      	add	r3, r2
 8004808:	3354      	adds	r3, #84	; 0x54
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d109      	bne.n	8004824 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	212c      	movs	r1, #44	; 0x2c
 8004816:	fb01 f303 	mul.w	r3, r1, r3
 800481a:	4413      	add	r3, r2
 800481c:	3342      	adds	r3, #66	; 0x42
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]
      break;
 8004822:	e016      	b.n	8004852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	212c      	movs	r1, #44	; 0x2c
 800482a:	fb01 f303 	mul.w	r3, r1, r3
 800482e:	4413      	add	r3, r2
 8004830:	3342      	adds	r3, #66	; 0x42
 8004832:	2202      	movs	r2, #2
 8004834:	701a      	strb	r2, [r3, #0]
      break;
 8004836:	e00c      	b.n	8004852 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	212c      	movs	r1, #44	; 0x2c
 800483e:	fb01 f303 	mul.w	r3, r1, r3
 8004842:	4413      	add	r3, r2
 8004844:	3342      	adds	r3, #66	; 0x42
 8004846:	2200      	movs	r2, #0
 8004848:	701a      	strb	r2, [r3, #0]
      break;
 800484a:	e002      	b.n	8004852 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800484c:	bf00      	nop
 800484e:	e000      	b.n	8004852 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004850:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	212c      	movs	r1, #44	; 0x2c
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	4413      	add	r3, r2
 800485e:	3344      	adds	r3, #68	; 0x44
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	8b3a      	ldrh	r2, [r7, #24]
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	202c      	movs	r0, #44	; 0x2c
 800486c:	fb00 f303 	mul.w	r3, r0, r3
 8004870:	440b      	add	r3, r1
 8004872:	334c      	adds	r3, #76	; 0x4c
 8004874:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004876:	78fb      	ldrb	r3, [r7, #3]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	212c      	movs	r1, #44	; 0x2c
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	4413      	add	r3, r2
 8004882:	3360      	adds	r3, #96	; 0x60
 8004884:	2200      	movs	r2, #0
 8004886:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	212c      	movs	r1, #44	; 0x2c
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	3350      	adds	r3, #80	; 0x50
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	212c      	movs	r1, #44	; 0x2c
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	4413      	add	r3, r2
 80048a6:	3339      	adds	r3, #57	; 0x39
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	212c      	movs	r1, #44	; 0x2c
 80048b2:	fb01 f303 	mul.w	r3, r1, r3
 80048b6:	4413      	add	r3, r2
 80048b8:	3361      	adds	r3, #97	; 0x61
 80048ba:	2200      	movs	r2, #0
 80048bc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	222c      	movs	r2, #44	; 0x2c
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	3338      	adds	r3, #56	; 0x38
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	18d1      	adds	r1, r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	461a      	mov	r2, r3
 80048d8:	f003 fcea 	bl	80082b0 <USB_HC_StartXfer>
 80048dc:	4603      	mov	r3, r0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop

080048e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f003 fa0d 	bl	8007d1e <USB_GetMode>
 8004904:	4603      	mov	r3, r0
 8004906:	2b01      	cmp	r3, #1
 8004908:	f040 80f6 	bne.w	8004af8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f003 f9f1 	bl	8007cf8 <USB_ReadInterrupts>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 80ec 	beq.w	8004af6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f003 f9e8 	bl	8007cf8 <USB_ReadInterrupts>
 8004928:	4603      	mov	r3, r0
 800492a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800492e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004932:	d104      	bne.n	800493e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800493c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f003 f9d8 	bl	8007cf8 <USB_ReadInterrupts>
 8004948:	4603      	mov	r3, r0
 800494a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800494e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004952:	d104      	bne.n	800495e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800495c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f003 f9c8 	bl	8007cf8 <USB_ReadInterrupts>
 8004968:	4603      	mov	r3, r0
 800496a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800496e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004972:	d104      	bne.n	800497e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800497c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f003 f9b8 	bl	8007cf8 <USB_ReadInterrupts>
 8004988:	4603      	mov	r3, r0
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b02      	cmp	r3, #2
 8004990:	d103      	bne.n	800499a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2202      	movs	r2, #2
 8004998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f003 f9aa 	bl	8007cf8 <USB_ReadInterrupts>
 80049a4:	4603      	mov	r3, r0
 80049a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049ae:	d11c      	bne.n	80049ea <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80049b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10f      	bne.n	80049ea <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80049ca:	2110      	movs	r1, #16
 80049cc:	6938      	ldr	r0, [r7, #16]
 80049ce:	f003 f8b9 	bl	8007b44 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80049d2:	6938      	ldr	r0, [r7, #16]
 80049d4:	f003 f8da 	bl	8007b8c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2101      	movs	r1, #1
 80049de:	4618      	mov	r0, r3
 80049e0:	f003 fa92 	bl	8007f08 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f009 ff79 	bl	800e8dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f003 f982 	bl	8007cf8 <USB_ReadInterrupts>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049fe:	d102      	bne.n	8004a06 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f001 fa03 	bl	8005e0c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f003 f974 	bl	8007cf8 <USB_ReadInterrupts>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d106      	bne.n	8004a28 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f009 ff42 	bl	800e8a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2208      	movs	r2, #8
 8004a26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f003 f963 	bl	8007cf8 <USB_ReadInterrupts>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d101      	bne.n	8004a40 <HAL_HCD_IRQHandler+0x158>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <HAL_HCD_IRQHandler+0x15a>
 8004a40:	2300      	movs	r3, #0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d012      	beq.n	8004a6c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699a      	ldr	r2, [r3, #24]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0210 	bic.w	r2, r2, #16
 8004a54:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f001 f906 	bl	8005c68 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0210 	orr.w	r2, r2, #16
 8004a6a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f003 f941 	bl	8007cf8 <USB_ReadInterrupts>
 8004a76:	4603      	mov	r3, r0
 8004a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a80:	d13a      	bne.n	8004af8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f003 fd54 	bl	8008534 <USB_HC_ReadInterrupt>
 8004a8c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	e025      	b.n	8004ae0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d018      	beq.n	8004ada <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004abe:	d106      	bne.n	8004ace <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f8ab 	bl	8004c22 <HCD_HC_IN_IRQHandler>
 8004acc:	e005      	b.n	8004ada <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fcc6 	bl	8005466 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	3301      	adds	r3, #1
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d3d4      	bcc.n	8004a94 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004af2:	615a      	str	r2, [r3, #20]
 8004af4:	e000      	b.n	8004af8 <HAL_HCD_IRQHandler+0x210>
      return;
 8004af6:	bf00      	nop
    }
  }
}
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_HCD_Start+0x16>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e013      	b.n	8004b3c <HAL_HCD_Start+0x3e>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2101      	movs	r1, #1
 8004b22:	4618      	mov	r0, r3
 8004b24:	f003 fa54 	bl	8007fd0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f002 ff9a 	bl	8007a66 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_HCD_Stop+0x16>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e00d      	b.n	8004b76 <HAL_HCD_Stop+0x32>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f003 fe4e 	bl	8008808 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f003 f9f6 	bl	8007f7c <USB_ResetPort>
 8004b90:	4603      	mov	r3, r0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004ba6:	78fb      	ldrb	r3, [r7, #3]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	212c      	movs	r1, #44	; 0x2c
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3360      	adds	r3, #96	; 0x60
 8004bb4:	781b      	ldrb	r3, [r3, #0]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004bce:	78fb      	ldrb	r3, [r7, #3]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	212c      	movs	r1, #44	; 0x2c
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	3350      	adds	r3, #80	; 0x50
 8004bdc:	681b      	ldr	r3, [r3, #0]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b082      	sub	sp, #8
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f003 fa3a 	bl	8008070 <USB_GetCurrentFrame>
 8004bfc:	4603      	mov	r3, r0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f003 fa15 	bl	8008042 <USB_GetHostSpeed>
 8004c18:	4603      	mov	r3, r0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b086      	sub	sp, #24
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d119      	bne.n	8004c86 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5e:	461a      	mov	r2, r3
 8004c60:	2304      	movs	r3, #4
 8004c62:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	0151      	lsls	r1, r2, #5
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	440a      	add	r2, r1
 8004c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c7e:	f043 0302 	orr.w	r3, r3, #2
 8004c82:	60d3      	str	r3, [r2, #12]
 8004c84:	e101      	b.n	8004e8a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c9c:	d12b      	bne.n	8004cf6 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004caa:	461a      	mov	r2, r3
 8004cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	212c      	movs	r1, #44	; 0x2c
 8004cb8:	fb01 f303 	mul.w	r3, r1, r3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	3361      	adds	r3, #97	; 0x61
 8004cc0:	2207      	movs	r2, #7
 8004cc2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	0151      	lsls	r1, r2, #5
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	440a      	add	r2, r1
 8004cda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cde:	f043 0302 	orr.w	r3, r3, #2
 8004ce2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	4611      	mov	r1, r2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f003 fc31 	bl	8008556 <USB_HC_Halt>
 8004cf4:	e0c9      	b.n	8004e8a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d109      	bne.n	8004d20 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d18:	461a      	mov	r2, r3
 8004d1a:	2320      	movs	r3, #32
 8004d1c:	6093      	str	r3, [r2, #8]
 8004d1e:	e0b4      	b.n	8004e8a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d133      	bne.n	8004d9e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d50:	f043 0302 	orr.w	r3, r3, #2
 8004d54:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	212c      	movs	r1, #44	; 0x2c
 8004d5c:	fb01 f303 	mul.w	r3, r1, r3
 8004d60:	4413      	add	r3, r2
 8004d62:	3361      	adds	r3, #97	; 0x61
 8004d64:	2205      	movs	r2, #5
 8004d66:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d74:	461a      	mov	r2, r3
 8004d76:	2310      	movs	r3, #16
 8004d78:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d86:	461a      	mov	r2, r3
 8004d88:	2308      	movs	r3, #8
 8004d8a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	4611      	mov	r1, r2
 8004d96:	4618      	mov	r0, r3
 8004d98:	f003 fbdd 	bl	8008556 <USB_HC_Halt>
 8004d9c:	e075      	b.n	8004e8a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db4:	d134      	bne.n	8004e20 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	0151      	lsls	r1, r2, #5
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	440a      	add	r2, r1
 8004dcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dd0:	f043 0302 	orr.w	r3, r3, #2
 8004dd4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	212c      	movs	r1, #44	; 0x2c
 8004ddc:	fb01 f303 	mul.w	r3, r1, r3
 8004de0:	4413      	add	r3, r2
 8004de2:	3361      	adds	r3, #97	; 0x61
 8004de4:	2208      	movs	r2, #8
 8004de6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df4:	461a      	mov	r2, r3
 8004df6:	2310      	movs	r3, #16
 8004df8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e06:	461a      	mov	r2, r3
 8004e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e0c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	4611      	mov	r1, r2
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f003 fb9c 	bl	8008556 <USB_HC_Halt>
 8004e1e:	e034      	b.n	8004e8a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e32:	2b80      	cmp	r3, #128	; 0x80
 8004e34:	d129      	bne.n	8004e8a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	0151      	lsls	r1, r2, #5
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	440a      	add	r2, r1
 8004e4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e50:	f043 0302 	orr.w	r3, r3, #2
 8004e54:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	212c      	movs	r1, #44	; 0x2c
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	4413      	add	r3, r2
 8004e62:	3361      	adds	r3, #97	; 0x61
 8004e64:	2206      	movs	r2, #6
 8004e66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f003 fb6f 	bl	8008556 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e84:	461a      	mov	r2, r3
 8004e86:	2380      	movs	r3, #128	; 0x80
 8004e88:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea0:	d122      	bne.n	8004ee8 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	0151      	lsls	r1, r2, #5
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	440a      	add	r2, r1
 8004eb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ebc:	f043 0302 	orr.w	r3, r3, #2
 8004ec0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	4611      	mov	r1, r2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f003 fb42 	bl	8008556 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ee4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004ee6:	e2ba      	b.n	800545e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	f040 811b 	bne.w	8005136 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d019      	beq.n	8004f3c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	212c      	movs	r1, #44	; 0x2c
 8004f0e:	fb01 f303 	mul.w	r3, r1, r3
 8004f12:	4413      	add	r3, r2
 8004f14:	3348      	adds	r3, #72	; 0x48
 8004f16:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	0159      	lsls	r1, r3, #5
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	440b      	add	r3, r1
 8004f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004f2a:	1ad2      	subs	r2, r2, r3
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	202c      	movs	r0, #44	; 0x2c
 8004f32:	fb00 f303 	mul.w	r3, r0, r3
 8004f36:	440b      	add	r3, r1
 8004f38:	3350      	adds	r3, #80	; 0x50
 8004f3a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	212c      	movs	r1, #44	; 0x2c
 8004f42:	fb01 f303 	mul.w	r3, r1, r3
 8004f46:	4413      	add	r3, r2
 8004f48:	3361      	adds	r3, #97	; 0x61
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	212c      	movs	r1, #44	; 0x2c
 8004f54:	fb01 f303 	mul.w	r3, r1, r3
 8004f58:	4413      	add	r3, r2
 8004f5a:	335c      	adds	r3, #92	; 0x5c
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	2301      	movs	r3, #1
 8004f70:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	212c      	movs	r1, #44	; 0x2c
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	333f      	adds	r3, #63	; 0x3f
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d009      	beq.n	8004f9a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	212c      	movs	r1, #44	; 0x2c
 8004f8c:	fb01 f303 	mul.w	r3, r1, r3
 8004f90:	4413      	add	r3, r2
 8004f92:	333f      	adds	r3, #63	; 0x3f
 8004f94:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d121      	bne.n	8004fde <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	0151      	lsls	r1, r2, #5
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	440a      	add	r2, r1
 8004fb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fb4:	f043 0302 	orr.w	r3, r3, #2
 8004fb8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f003 fac6 	bl	8008556 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	2310      	movs	r3, #16
 8004fda:	6093      	str	r3, [r2, #8]
 8004fdc:	e066      	b.n	80050ac <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	212c      	movs	r1, #44	; 0x2c
 8004fe4:	fb01 f303 	mul.w	r3, r1, r3
 8004fe8:	4413      	add	r3, r2
 8004fea:	333f      	adds	r3, #63	; 0x3f
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d127      	bne.n	8005042 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	0151      	lsls	r1, r2, #5
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	440a      	add	r2, r1
 8005008:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800500c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005010:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	212c      	movs	r1, #44	; 0x2c
 8005018:	fb01 f303 	mul.w	r3, r1, r3
 800501c:	4413      	add	r3, r2
 800501e:	3360      	adds	r3, #96	; 0x60
 8005020:	2201      	movs	r2, #1
 8005022:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	b2d9      	uxtb	r1, r3
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	202c      	movs	r0, #44	; 0x2c
 800502e:	fb00 f303 	mul.w	r3, r0, r3
 8005032:	4413      	add	r3, r2
 8005034:	3360      	adds	r3, #96	; 0x60
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f009 fc5c 	bl	800e8f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005040:	e034      	b.n	80050ac <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	212c      	movs	r1, #44	; 0x2c
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	4413      	add	r3, r2
 800504e:	333f      	adds	r3, #63	; 0x3f
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d12a      	bne.n	80050ac <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	212c      	movs	r1, #44	; 0x2c
 800505c:	fb01 f303 	mul.w	r3, r1, r3
 8005060:	4413      	add	r3, r2
 8005062:	3360      	adds	r3, #96	; 0x60
 8005064:	2201      	movs	r2, #1
 8005066:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	212c      	movs	r1, #44	; 0x2c
 800506e:	fb01 f303 	mul.w	r3, r1, r3
 8005072:	4413      	add	r3, r2
 8005074:	3354      	adds	r3, #84	; 0x54
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	f083 0301 	eor.w	r3, r3, #1
 800507c:	b2d8      	uxtb	r0, r3
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	212c      	movs	r1, #44	; 0x2c
 8005084:	fb01 f303 	mul.w	r3, r1, r3
 8005088:	4413      	add	r3, r2
 800508a:	3354      	adds	r3, #84	; 0x54
 800508c:	4602      	mov	r2, r0
 800508e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	b2d9      	uxtb	r1, r3
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	202c      	movs	r0, #44	; 0x2c
 800509a:	fb00 f303 	mul.w	r3, r0, r3
 800509e:	4413      	add	r3, r2
 80050a0:	3360      	adds	r3, #96	; 0x60
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	461a      	mov	r2, r3
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f009 fc26 	bl	800e8f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d12b      	bne.n	800510c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	212c      	movs	r1, #44	; 0x2c
 80050ba:	fb01 f303 	mul.w	r3, r1, r3
 80050be:	4413      	add	r3, r2
 80050c0:	3348      	adds	r3, #72	; 0x48
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	202c      	movs	r0, #44	; 0x2c
 80050ca:	fb00 f202 	mul.w	r2, r0, r2
 80050ce:	440a      	add	r2, r1
 80050d0:	3240      	adds	r2, #64	; 0x40
 80050d2:	8812      	ldrh	r2, [r2, #0]
 80050d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 81be 	beq.w	800545e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	212c      	movs	r1, #44	; 0x2c
 80050e8:	fb01 f303 	mul.w	r3, r1, r3
 80050ec:	4413      	add	r3, r2
 80050ee:	3354      	adds	r3, #84	; 0x54
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	f083 0301 	eor.w	r3, r3, #1
 80050f6:	b2d8      	uxtb	r0, r3
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	212c      	movs	r1, #44	; 0x2c
 80050fe:	fb01 f303 	mul.w	r3, r1, r3
 8005102:	4413      	add	r3, r2
 8005104:	3354      	adds	r3, #84	; 0x54
 8005106:	4602      	mov	r2, r0
 8005108:	701a      	strb	r2, [r3, #0]
}
 800510a:	e1a8      	b.n	800545e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	212c      	movs	r1, #44	; 0x2c
 8005112:	fb01 f303 	mul.w	r3, r1, r3
 8005116:	4413      	add	r3, r2
 8005118:	3354      	adds	r3, #84	; 0x54
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	f083 0301 	eor.w	r3, r3, #1
 8005120:	b2d8      	uxtb	r0, r3
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	212c      	movs	r1, #44	; 0x2c
 8005128:	fb01 f303 	mul.w	r3, r1, r3
 800512c:	4413      	add	r3, r2
 800512e:	3354      	adds	r3, #84	; 0x54
 8005130:	4602      	mov	r2, r0
 8005132:	701a      	strb	r2, [r3, #0]
}
 8005134:	e193      	b.n	800545e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	4413      	add	r3, r2
 800513e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b02      	cmp	r3, #2
 800514a:	f040 8106 	bne.w	800535a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	4413      	add	r3, r2
 8005156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	0151      	lsls	r1, r2, #5
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	440a      	add	r2, r1
 8005164:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005168:	f023 0302 	bic.w	r3, r3, #2
 800516c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	212c      	movs	r1, #44	; 0x2c
 8005174:	fb01 f303 	mul.w	r3, r1, r3
 8005178:	4413      	add	r3, r2
 800517a:	3361      	adds	r3, #97	; 0x61
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d109      	bne.n	8005196 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	212c      	movs	r1, #44	; 0x2c
 8005188:	fb01 f303 	mul.w	r3, r1, r3
 800518c:	4413      	add	r3, r2
 800518e:	3360      	adds	r3, #96	; 0x60
 8005190:	2201      	movs	r2, #1
 8005192:	701a      	strb	r2, [r3, #0]
 8005194:	e0c9      	b.n	800532a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	212c      	movs	r1, #44	; 0x2c
 800519c:	fb01 f303 	mul.w	r3, r1, r3
 80051a0:	4413      	add	r3, r2
 80051a2:	3361      	adds	r3, #97	; 0x61
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b05      	cmp	r3, #5
 80051a8:	d109      	bne.n	80051be <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	212c      	movs	r1, #44	; 0x2c
 80051b0:	fb01 f303 	mul.w	r3, r1, r3
 80051b4:	4413      	add	r3, r2
 80051b6:	3360      	adds	r3, #96	; 0x60
 80051b8:	2205      	movs	r2, #5
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	e0b5      	b.n	800532a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	212c      	movs	r1, #44	; 0x2c
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	4413      	add	r3, r2
 80051ca:	3361      	adds	r3, #97	; 0x61
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b06      	cmp	r3, #6
 80051d0:	d009      	beq.n	80051e6 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	212c      	movs	r1, #44	; 0x2c
 80051d8:	fb01 f303 	mul.w	r3, r1, r3
 80051dc:	4413      	add	r3, r2
 80051de:	3361      	adds	r3, #97	; 0x61
 80051e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	d150      	bne.n	8005288 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	212c      	movs	r1, #44	; 0x2c
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	4413      	add	r3, r2
 80051f2:	335c      	adds	r3, #92	; 0x5c
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	202c      	movs	r0, #44	; 0x2c
 80051fe:	fb00 f303 	mul.w	r3, r0, r3
 8005202:	440b      	add	r3, r1
 8005204:	335c      	adds	r3, #92	; 0x5c
 8005206:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	212c      	movs	r1, #44	; 0x2c
 800520e:	fb01 f303 	mul.w	r3, r1, r3
 8005212:	4413      	add	r3, r2
 8005214:	335c      	adds	r3, #92	; 0x5c
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d912      	bls.n	8005242 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	212c      	movs	r1, #44	; 0x2c
 8005222:	fb01 f303 	mul.w	r3, r1, r3
 8005226:	4413      	add	r3, r2
 8005228:	335c      	adds	r3, #92	; 0x5c
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	212c      	movs	r1, #44	; 0x2c
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	4413      	add	r3, r2
 800523a:	3360      	adds	r3, #96	; 0x60
 800523c:	2204      	movs	r2, #4
 800523e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005240:	e073      	b.n	800532a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	212c      	movs	r1, #44	; 0x2c
 8005248:	fb01 f303 	mul.w	r3, r1, r3
 800524c:	4413      	add	r3, r2
 800524e:	3360      	adds	r3, #96	; 0x60
 8005250:	2202      	movs	r2, #2
 8005252:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4413      	add	r3, r2
 800525c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800526a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005272:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	4413      	add	r3, r2
 800527c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005280:	461a      	mov	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005286:	e050      	b.n	800532a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	212c      	movs	r1, #44	; 0x2c
 800528e:	fb01 f303 	mul.w	r3, r1, r3
 8005292:	4413      	add	r3, r2
 8005294:	3361      	adds	r3, #97	; 0x61
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b03      	cmp	r3, #3
 800529a:	d122      	bne.n	80052e2 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	212c      	movs	r1, #44	; 0x2c
 80052a2:	fb01 f303 	mul.w	r3, r1, r3
 80052a6:	4413      	add	r3, r2
 80052a8:	3360      	adds	r3, #96	; 0x60
 80052aa:	2202      	movs	r2, #2
 80052ac:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052c4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052cc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052da:	461a      	mov	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	6013      	str	r3, [r2, #0]
 80052e0:	e023      	b.n	800532a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	212c      	movs	r1, #44	; 0x2c
 80052e8:	fb01 f303 	mul.w	r3, r1, r3
 80052ec:	4413      	add	r3, r2
 80052ee:	3361      	adds	r3, #97	; 0x61
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b07      	cmp	r3, #7
 80052f4:	d119      	bne.n	800532a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	212c      	movs	r1, #44	; 0x2c
 80052fc:	fb01 f303 	mul.w	r3, r1, r3
 8005300:	4413      	add	r3, r2
 8005302:	335c      	adds	r3, #92	; 0x5c
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	202c      	movs	r0, #44	; 0x2c
 800530e:	fb00 f303 	mul.w	r3, r0, r3
 8005312:	440b      	add	r3, r1
 8005314:	335c      	adds	r3, #92	; 0x5c
 8005316:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	212c      	movs	r1, #44	; 0x2c
 800531e:	fb01 f303 	mul.w	r3, r1, r3
 8005322:	4413      	add	r3, r2
 8005324:	3360      	adds	r3, #96	; 0x60
 8005326:	2204      	movs	r2, #4
 8005328:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	4413      	add	r3, r2
 8005332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005336:	461a      	mov	r2, r3
 8005338:	2302      	movs	r3, #2
 800533a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	b2d9      	uxtb	r1, r3
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	202c      	movs	r0, #44	; 0x2c
 8005346:	fb00 f303 	mul.w	r3, r0, r3
 800534a:	4413      	add	r3, r2
 800534c:	3360      	adds	r3, #96	; 0x60
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f009 fad0 	bl	800e8f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005358:	e081      	b.n	800545e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	4413      	add	r3, r2
 8005362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	2b10      	cmp	r3, #16
 800536e:	d176      	bne.n	800545e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	212c      	movs	r1, #44	; 0x2c
 8005376:	fb01 f303 	mul.w	r3, r1, r3
 800537a:	4413      	add	r3, r2
 800537c:	333f      	adds	r3, #63	; 0x3f
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b03      	cmp	r3, #3
 8005382:	d121      	bne.n	80053c8 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	212c      	movs	r1, #44	; 0x2c
 800538a:	fb01 f303 	mul.w	r3, r1, r3
 800538e:	4413      	add	r3, r2
 8005390:	335c      	adds	r3, #92	; 0x5c
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	4413      	add	r3, r2
 800539e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	0151      	lsls	r1, r2, #5
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	440a      	add	r2, r1
 80053ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053b0:	f043 0302 	orr.w	r3, r3, #2
 80053b4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	4611      	mov	r1, r2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f003 f8c8 	bl	8008556 <USB_HC_Halt>
 80053c6:	e041      	b.n	800544c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	212c      	movs	r1, #44	; 0x2c
 80053ce:	fb01 f303 	mul.w	r3, r1, r3
 80053d2:	4413      	add	r3, r2
 80053d4:	333f      	adds	r3, #63	; 0x3f
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d009      	beq.n	80053f0 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	212c      	movs	r1, #44	; 0x2c
 80053e2:	fb01 f303 	mul.w	r3, r1, r3
 80053e6:	4413      	add	r3, r2
 80053e8:	333f      	adds	r3, #63	; 0x3f
 80053ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d12d      	bne.n	800544c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	212c      	movs	r1, #44	; 0x2c
 80053f6:	fb01 f303 	mul.w	r3, r1, r3
 80053fa:	4413      	add	r3, r2
 80053fc:	335c      	adds	r3, #92	; 0x5c
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d120      	bne.n	800544c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	212c      	movs	r1, #44	; 0x2c
 8005410:	fb01 f303 	mul.w	r3, r1, r3
 8005414:	4413      	add	r3, r2
 8005416:	3361      	adds	r3, #97	; 0x61
 8005418:	2203      	movs	r2, #3
 800541a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	4413      	add	r3, r2
 8005424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	0151      	lsls	r1, r2, #5
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	440a      	add	r2, r1
 8005432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005436:	f043 0302 	orr.w	r3, r3, #2
 800543a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	4611      	mov	r1, r2
 8005446:	4618      	mov	r0, r3
 8005448:	f003 f885 	bl	8008556 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4413      	add	r3, r2
 8005454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005458:	461a      	mov	r2, r3
 800545a:	2310      	movs	r3, #16
 800545c:	6093      	str	r3, [r2, #8]
}
 800545e:	bf00      	nop
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b088      	sub	sp, #32
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	460b      	mov	r3, r1
 8005470:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	4413      	add	r3, r2
 8005488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b04      	cmp	r3, #4
 8005494:	d119      	bne.n	80054ca <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	4413      	add	r3, r2
 800549e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a2:	461a      	mov	r2, r3
 80054a4:	2304      	movs	r3, #4
 80054a6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	0151      	lsls	r1, r2, #5
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	440a      	add	r2, r1
 80054be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054c2:	f043 0302 	orr.w	r3, r3, #2
 80054c6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80054c8:	e3ca      	b.n	8005c60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d13e      	bne.n	800555e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ec:	461a      	mov	r2, r3
 80054ee:	2320      	movs	r3, #32
 80054f0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	212c      	movs	r1, #44	; 0x2c
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	4413      	add	r3, r2
 80054fe:	333d      	adds	r3, #61	; 0x3d
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b01      	cmp	r3, #1
 8005504:	f040 83ac 	bne.w	8005c60 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	212c      	movs	r1, #44	; 0x2c
 800550e:	fb01 f303 	mul.w	r3, r1, r3
 8005512:	4413      	add	r3, r2
 8005514:	333d      	adds	r3, #61	; 0x3d
 8005516:	2200      	movs	r2, #0
 8005518:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	212c      	movs	r1, #44	; 0x2c
 8005520:	fb01 f303 	mul.w	r3, r1, r3
 8005524:	4413      	add	r3, r2
 8005526:	3360      	adds	r3, #96	; 0x60
 8005528:	2202      	movs	r2, #2
 800552a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	4413      	add	r3, r2
 8005534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	440a      	add	r2, r1
 8005542:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005546:	f043 0302 	orr.w	r3, r3, #2
 800554a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	4611      	mov	r1, r2
 8005556:	4618      	mov	r0, r3
 8005558:	f002 fffd 	bl	8008556 <USB_HC_Halt>
}
 800555c:	e380      	b.n	8005c60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	4413      	add	r3, r2
 8005566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005574:	d122      	bne.n	80055bc <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	4413      	add	r3, r2
 800557e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	0151      	lsls	r1, r2, #5
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	440a      	add	r2, r1
 800558c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005590:	f043 0302 	orr.w	r3, r3, #2
 8005594:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	4611      	mov	r1, r2
 80055a0:	4618      	mov	r0, r3
 80055a2:	f002 ffd8 	bl	8008556 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b2:	461a      	mov	r2, r3
 80055b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055b8:	6093      	str	r3, [r2, #8]
}
 80055ba:	e351      	b.n	8005c60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d150      	bne.n	8005674 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	212c      	movs	r1, #44	; 0x2c
 80055d8:	fb01 f303 	mul.w	r3, r1, r3
 80055dc:	4413      	add	r3, r2
 80055de:	335c      	adds	r3, #92	; 0x5c
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f6:	2b40      	cmp	r3, #64	; 0x40
 80055f8:	d111      	bne.n	800561e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	212c      	movs	r1, #44	; 0x2c
 8005600:	fb01 f303 	mul.w	r3, r1, r3
 8005604:	4413      	add	r3, r2
 8005606:	333d      	adds	r3, #61	; 0x3d
 8005608:	2201      	movs	r2, #1
 800560a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	4413      	add	r3, r2
 8005614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005618:	461a      	mov	r2, r3
 800561a:	2340      	movs	r3, #64	; 0x40
 800561c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	4413      	add	r3, r2
 8005626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	0151      	lsls	r1, r2, #5
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	440a      	add	r2, r1
 8005634:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005638:	f043 0302 	orr.w	r3, r3, #2
 800563c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	4611      	mov	r1, r2
 8005648:	4618      	mov	r0, r3
 800564a:	f002 ff84 	bl	8008556 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	4413      	add	r3, r2
 8005656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565a:	461a      	mov	r2, r3
 800565c:	2301      	movs	r3, #1
 800565e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	212c      	movs	r1, #44	; 0x2c
 8005666:	fb01 f303 	mul.w	r3, r1, r3
 800566a:	4413      	add	r3, r2
 800566c:	3361      	adds	r3, #97	; 0x61
 800566e:	2201      	movs	r2, #1
 8005670:	701a      	strb	r2, [r3, #0]
}
 8005672:	e2f5      	b.n	8005c60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	4413      	add	r3, r2
 800567c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005686:	2b40      	cmp	r3, #64	; 0x40
 8005688:	d13c      	bne.n	8005704 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	212c      	movs	r1, #44	; 0x2c
 8005690:	fb01 f303 	mul.w	r3, r1, r3
 8005694:	4413      	add	r3, r2
 8005696:	3361      	adds	r3, #97	; 0x61
 8005698:	2204      	movs	r2, #4
 800569a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	212c      	movs	r1, #44	; 0x2c
 80056a2:	fb01 f303 	mul.w	r3, r1, r3
 80056a6:	4413      	add	r3, r2
 80056a8:	333d      	adds	r3, #61	; 0x3d
 80056aa:	2201      	movs	r2, #1
 80056ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	212c      	movs	r1, #44	; 0x2c
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	4413      	add	r3, r2
 80056ba:	335c      	adds	r3, #92	; 0x5c
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056da:	f043 0302 	orr.w	r3, r3, #2
 80056de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	4611      	mov	r1, r2
 80056ea:	4618      	mov	r0, r3
 80056ec:	f002 ff33 	bl	8008556 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fc:	461a      	mov	r2, r3
 80056fe:	2340      	movs	r3, #64	; 0x40
 8005700:	6093      	str	r3, [r2, #8]
}
 8005702:	e2ad      	b.n	8005c60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	4413      	add	r3, r2
 800570c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b08      	cmp	r3, #8
 8005718:	d12a      	bne.n	8005770 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	4413      	add	r3, r2
 8005722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005726:	461a      	mov	r2, r3
 8005728:	2308      	movs	r3, #8
 800572a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	4413      	add	r3, r2
 8005734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	0151      	lsls	r1, r2, #5
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	440a      	add	r2, r1
 8005742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005746:	f043 0302 	orr.w	r3, r3, #2
 800574a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	4611      	mov	r1, r2
 8005756:	4618      	mov	r0, r3
 8005758:	f002 fefd 	bl	8008556 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	212c      	movs	r1, #44	; 0x2c
 8005762:	fb01 f303 	mul.w	r3, r1, r3
 8005766:	4413      	add	r3, r2
 8005768:	3361      	adds	r3, #97	; 0x61
 800576a:	2205      	movs	r2, #5
 800576c:	701a      	strb	r2, [r3, #0]
}
 800576e:	e277      	b.n	8005c60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	4413      	add	r3, r2
 8005778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 0310 	and.w	r3, r3, #16
 8005782:	2b10      	cmp	r3, #16
 8005784:	d150      	bne.n	8005828 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	212c      	movs	r1, #44	; 0x2c
 800578c:	fb01 f303 	mul.w	r3, r1, r3
 8005790:	4413      	add	r3, r2
 8005792:	335c      	adds	r3, #92	; 0x5c
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	212c      	movs	r1, #44	; 0x2c
 800579e:	fb01 f303 	mul.w	r3, r1, r3
 80057a2:	4413      	add	r3, r2
 80057a4:	3361      	adds	r3, #97	; 0x61
 80057a6:	2203      	movs	r2, #3
 80057a8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	212c      	movs	r1, #44	; 0x2c
 80057b0:	fb01 f303 	mul.w	r3, r1, r3
 80057b4:	4413      	add	r3, r2
 80057b6:	333d      	adds	r3, #61	; 0x3d
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d112      	bne.n	80057e4 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	212c      	movs	r1, #44	; 0x2c
 80057c4:	fb01 f303 	mul.w	r3, r1, r3
 80057c8:	4413      	add	r3, r2
 80057ca:	333c      	adds	r3, #60	; 0x3c
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d108      	bne.n	80057e4 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	212c      	movs	r1, #44	; 0x2c
 80057d8:	fb01 f303 	mul.w	r3, r1, r3
 80057dc:	4413      	add	r3, r2
 80057de:	333d      	adds	r3, #61	; 0x3d
 80057e0:	2201      	movs	r2, #1
 80057e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	0151      	lsls	r1, r2, #5
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	440a      	add	r2, r1
 80057fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057fe:	f043 0302 	orr.w	r3, r3, #2
 8005802:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	4611      	mov	r1, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f002 fea1 	bl	8008556 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	4413      	add	r3, r2
 800581c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005820:	461a      	mov	r2, r3
 8005822:	2310      	movs	r3, #16
 8005824:	6093      	str	r3, [r2, #8]
}
 8005826:	e21b      	b.n	8005c60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	4413      	add	r3, r2
 8005830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583a:	2b80      	cmp	r3, #128	; 0x80
 800583c:	d174      	bne.n	8005928 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d121      	bne.n	800588a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	212c      	movs	r1, #44	; 0x2c
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	4413      	add	r3, r2
 8005852:	3361      	adds	r3, #97	; 0x61
 8005854:	2206      	movs	r2, #6
 8005856:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	4413      	add	r3, r2
 8005860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	440a      	add	r2, r1
 800586e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005872:	f043 0302 	orr.w	r3, r3, #2
 8005876:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	4611      	mov	r1, r2
 8005882:	4618      	mov	r0, r3
 8005884:	f002 fe67 	bl	8008556 <USB_HC_Halt>
 8005888:	e044      	b.n	8005914 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	212c      	movs	r1, #44	; 0x2c
 8005890:	fb01 f303 	mul.w	r3, r1, r3
 8005894:	4413      	add	r3, r2
 8005896:	335c      	adds	r3, #92	; 0x5c
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	202c      	movs	r0, #44	; 0x2c
 80058a2:	fb00 f303 	mul.w	r3, r0, r3
 80058a6:	440b      	add	r3, r1
 80058a8:	335c      	adds	r3, #92	; 0x5c
 80058aa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	212c      	movs	r1, #44	; 0x2c
 80058b2:	fb01 f303 	mul.w	r3, r1, r3
 80058b6:	4413      	add	r3, r2
 80058b8:	335c      	adds	r3, #92	; 0x5c
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d920      	bls.n	8005902 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	212c      	movs	r1, #44	; 0x2c
 80058c6:	fb01 f303 	mul.w	r3, r1, r3
 80058ca:	4413      	add	r3, r2
 80058cc:	335c      	adds	r3, #92	; 0x5c
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	212c      	movs	r1, #44	; 0x2c
 80058d8:	fb01 f303 	mul.w	r3, r1, r3
 80058dc:	4413      	add	r3, r2
 80058de:	3360      	adds	r3, #96	; 0x60
 80058e0:	2204      	movs	r2, #4
 80058e2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	b2d9      	uxtb	r1, r3
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	202c      	movs	r0, #44	; 0x2c
 80058ee:	fb00 f303 	mul.w	r3, r0, r3
 80058f2:	4413      	add	r3, r2
 80058f4:	3360      	adds	r3, #96	; 0x60
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	461a      	mov	r2, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f008 fffc 	bl	800e8f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005900:	e008      	b.n	8005914 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	212c      	movs	r1, #44	; 0x2c
 8005908:	fb01 f303 	mul.w	r3, r1, r3
 800590c:	4413      	add	r3, r2
 800590e:	3360      	adds	r3, #96	; 0x60
 8005910:	2202      	movs	r2, #2
 8005912:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	4413      	add	r3, r2
 800591c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005920:	461a      	mov	r2, r3
 8005922:	2380      	movs	r3, #128	; 0x80
 8005924:	6093      	str	r3, [r2, #8]
}
 8005926:	e19b      	b.n	8005c60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	4413      	add	r3, r2
 8005930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800593a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800593e:	d134      	bne.n	80059aa <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	4413      	add	r3, r2
 8005948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	0151      	lsls	r1, r2, #5
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	440a      	add	r2, r1
 8005956:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800595a:	f043 0302 	orr.w	r3, r3, #2
 800595e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	4611      	mov	r1, r2
 800596a:	4618      	mov	r0, r3
 800596c:	f002 fdf3 	bl	8008556 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	4413      	add	r3, r2
 8005978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597c:	461a      	mov	r2, r3
 800597e:	2310      	movs	r3, #16
 8005980:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	4413      	add	r3, r2
 800598a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598e:	461a      	mov	r2, r3
 8005990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005994:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	212c      	movs	r1, #44	; 0x2c
 800599c:	fb01 f303 	mul.w	r3, r1, r3
 80059a0:	4413      	add	r3, r2
 80059a2:	3361      	adds	r3, #97	; 0x61
 80059a4:	2208      	movs	r2, #8
 80059a6:	701a      	strb	r2, [r3, #0]
}
 80059a8:	e15a      	b.n	8005c60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b02      	cmp	r3, #2
 80059be:	f040 814f 	bne.w	8005c60 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059dc:	f023 0302 	bic.w	r3, r3, #2
 80059e0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	212c      	movs	r1, #44	; 0x2c
 80059e8:	fb01 f303 	mul.w	r3, r1, r3
 80059ec:	4413      	add	r3, r2
 80059ee:	3361      	adds	r3, #97	; 0x61
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d17d      	bne.n	8005af2 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	212c      	movs	r1, #44	; 0x2c
 80059fc:	fb01 f303 	mul.w	r3, r1, r3
 8005a00:	4413      	add	r3, r2
 8005a02:	3360      	adds	r3, #96	; 0x60
 8005a04:	2201      	movs	r2, #1
 8005a06:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	212c      	movs	r1, #44	; 0x2c
 8005a0e:	fb01 f303 	mul.w	r3, r1, r3
 8005a12:	4413      	add	r3, r2
 8005a14:	333f      	adds	r3, #63	; 0x3f
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d00a      	beq.n	8005a32 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	212c      	movs	r1, #44	; 0x2c
 8005a22:	fb01 f303 	mul.w	r3, r1, r3
 8005a26:	4413      	add	r3, r2
 8005a28:	333f      	adds	r3, #63	; 0x3f
 8005a2a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	f040 8100 	bne.w	8005c32 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d113      	bne.n	8005a62 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	212c      	movs	r1, #44	; 0x2c
 8005a40:	fb01 f303 	mul.w	r3, r1, r3
 8005a44:	4413      	add	r3, r2
 8005a46:	3355      	adds	r3, #85	; 0x55
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	f083 0301 	eor.w	r3, r3, #1
 8005a4e:	b2d8      	uxtb	r0, r3
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	212c      	movs	r1, #44	; 0x2c
 8005a56:	fb01 f303 	mul.w	r3, r1, r3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	3355      	adds	r3, #85	; 0x55
 8005a5e:	4602      	mov	r2, r0
 8005a60:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	f040 80e3 	bne.w	8005c32 <HCD_HC_OUT_IRQHandler+0x7cc>
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	212c      	movs	r1, #44	; 0x2c
 8005a72:	fb01 f303 	mul.w	r3, r1, r3
 8005a76:	4413      	add	r3, r2
 8005a78:	334c      	adds	r3, #76	; 0x4c
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 80d8 	beq.w	8005c32 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	212c      	movs	r1, #44	; 0x2c
 8005a88:	fb01 f303 	mul.w	r3, r1, r3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	334c      	adds	r3, #76	; 0x4c
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	202c      	movs	r0, #44	; 0x2c
 8005a98:	fb00 f202 	mul.w	r2, r0, r2
 8005a9c:	440a      	add	r2, r1
 8005a9e:	3240      	adds	r2, #64	; 0x40
 8005aa0:	8812      	ldrh	r2, [r2, #0]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	202c      	movs	r0, #44	; 0x2c
 8005aac:	fb00 f202 	mul.w	r2, r0, r2
 8005ab0:	440a      	add	r2, r1
 8005ab2:	3240      	adds	r2, #64	; 0x40
 8005ab4:	8812      	ldrh	r2, [r2, #0]
 8005ab6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 80b5 	beq.w	8005c32 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	212c      	movs	r1, #44	; 0x2c
 8005ace:	fb01 f303 	mul.w	r3, r1, r3
 8005ad2:	4413      	add	r3, r2
 8005ad4:	3355      	adds	r3, #85	; 0x55
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	f083 0301 	eor.w	r3, r3, #1
 8005adc:	b2d8      	uxtb	r0, r3
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	212c      	movs	r1, #44	; 0x2c
 8005ae4:	fb01 f303 	mul.w	r3, r1, r3
 8005ae8:	4413      	add	r3, r2
 8005aea:	3355      	adds	r3, #85	; 0x55
 8005aec:	4602      	mov	r2, r0
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	e09f      	b.n	8005c32 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	212c      	movs	r1, #44	; 0x2c
 8005af8:	fb01 f303 	mul.w	r3, r1, r3
 8005afc:	4413      	add	r3, r2
 8005afe:	3361      	adds	r3, #97	; 0x61
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d109      	bne.n	8005b1a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	212c      	movs	r1, #44	; 0x2c
 8005b0c:	fb01 f303 	mul.w	r3, r1, r3
 8005b10:	4413      	add	r3, r2
 8005b12:	3360      	adds	r3, #96	; 0x60
 8005b14:	2202      	movs	r2, #2
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	e08b      	b.n	8005c32 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	212c      	movs	r1, #44	; 0x2c
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	4413      	add	r3, r2
 8005b26:	3361      	adds	r3, #97	; 0x61
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d109      	bne.n	8005b42 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	212c      	movs	r1, #44	; 0x2c
 8005b34:	fb01 f303 	mul.w	r3, r1, r3
 8005b38:	4413      	add	r3, r2
 8005b3a:	3360      	adds	r3, #96	; 0x60
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	e077      	b.n	8005c32 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	212c      	movs	r1, #44	; 0x2c
 8005b48:	fb01 f303 	mul.w	r3, r1, r3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	3361      	adds	r3, #97	; 0x61
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b05      	cmp	r3, #5
 8005b54:	d109      	bne.n	8005b6a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	212c      	movs	r1, #44	; 0x2c
 8005b5c:	fb01 f303 	mul.w	r3, r1, r3
 8005b60:	4413      	add	r3, r2
 8005b62:	3360      	adds	r3, #96	; 0x60
 8005b64:	2205      	movs	r2, #5
 8005b66:	701a      	strb	r2, [r3, #0]
 8005b68:	e063      	b.n	8005c32 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	212c      	movs	r1, #44	; 0x2c
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	4413      	add	r3, r2
 8005b76:	3361      	adds	r3, #97	; 0x61
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b06      	cmp	r3, #6
 8005b7c:	d009      	beq.n	8005b92 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	212c      	movs	r1, #44	; 0x2c
 8005b84:	fb01 f303 	mul.w	r3, r1, r3
 8005b88:	4413      	add	r3, r2
 8005b8a:	3361      	adds	r3, #97	; 0x61
 8005b8c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b8e:	2b08      	cmp	r3, #8
 8005b90:	d14f      	bne.n	8005c32 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	212c      	movs	r1, #44	; 0x2c
 8005b98:	fb01 f303 	mul.w	r3, r1, r3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	335c      	adds	r3, #92	; 0x5c
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	202c      	movs	r0, #44	; 0x2c
 8005baa:	fb00 f303 	mul.w	r3, r0, r3
 8005bae:	440b      	add	r3, r1
 8005bb0:	335c      	adds	r3, #92	; 0x5c
 8005bb2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	212c      	movs	r1, #44	; 0x2c
 8005bba:	fb01 f303 	mul.w	r3, r1, r3
 8005bbe:	4413      	add	r3, r2
 8005bc0:	335c      	adds	r3, #92	; 0x5c
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d912      	bls.n	8005bee <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	212c      	movs	r1, #44	; 0x2c
 8005bce:	fb01 f303 	mul.w	r3, r1, r3
 8005bd2:	4413      	add	r3, r2
 8005bd4:	335c      	adds	r3, #92	; 0x5c
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	212c      	movs	r1, #44	; 0x2c
 8005be0:	fb01 f303 	mul.w	r3, r1, r3
 8005be4:	4413      	add	r3, r2
 8005be6:	3360      	adds	r3, #96	; 0x60
 8005be8:	2204      	movs	r2, #4
 8005bea:	701a      	strb	r2, [r3, #0]
 8005bec:	e021      	b.n	8005c32 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	212c      	movs	r1, #44	; 0x2c
 8005bf4:	fb01 f303 	mul.w	r3, r1, r3
 8005bf8:	4413      	add	r3, r2
 8005bfa:	3360      	adds	r3, #96	; 0x60
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c16:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c1e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3e:	461a      	mov	r2, r3
 8005c40:	2302      	movs	r3, #2
 8005c42:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	b2d9      	uxtb	r1, r3
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	202c      	movs	r0, #44	; 0x2c
 8005c4e:	fb00 f303 	mul.w	r3, r0, r3
 8005c52:	4413      	add	r3, r2
 8005c54:	3360      	adds	r3, #96	; 0x60
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f008 fe4c 	bl	800e8f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005c60:	bf00      	nop
 8005c62:	3720      	adds	r7, #32
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	f003 030f 	and.w	r3, r3, #15
 8005c88:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	0c5b      	lsrs	r3, r3, #17
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	091b      	lsrs	r3, r3, #4
 8005c98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c9c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d004      	beq.n	8005cae <HCD_RXQLVL_IRQHandler+0x46>
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2b05      	cmp	r3, #5
 8005ca8:	f000 80a9 	beq.w	8005dfe <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005cac:	e0aa      	b.n	8005e04 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80a6 	beq.w	8005e02 <HCD_RXQLVL_IRQHandler+0x19a>
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	212c      	movs	r1, #44	; 0x2c
 8005cbc:	fb01 f303 	mul.w	r3, r1, r3
 8005cc0:	4413      	add	r3, r2
 8005cc2:	3344      	adds	r3, #68	; 0x44
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 809b 	beq.w	8005e02 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	212c      	movs	r1, #44	; 0x2c
 8005cd2:	fb01 f303 	mul.w	r3, r1, r3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3350      	adds	r3, #80	; 0x50
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	441a      	add	r2, r3
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	202c      	movs	r0, #44	; 0x2c
 8005ce6:	fb00 f303 	mul.w	r3, r0, r3
 8005cea:	440b      	add	r3, r1
 8005cec:	334c      	adds	r3, #76	; 0x4c
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d87a      	bhi.n	8005dea <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	212c      	movs	r1, #44	; 0x2c
 8005cfe:	fb01 f303 	mul.w	r3, r1, r3
 8005d02:	4413      	add	r3, r2
 8005d04:	3344      	adds	r3, #68	; 0x44
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	b292      	uxth	r2, r2
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	f001 ff9b 	bl	8007c48 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	212c      	movs	r1, #44	; 0x2c
 8005d18:	fb01 f303 	mul.w	r3, r1, r3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	3344      	adds	r3, #68	; 0x44
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	441a      	add	r2, r3
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	202c      	movs	r0, #44	; 0x2c
 8005d2c:	fb00 f303 	mul.w	r3, r0, r3
 8005d30:	440b      	add	r3, r1
 8005d32:	3344      	adds	r3, #68	; 0x44
 8005d34:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	212c      	movs	r1, #44	; 0x2c
 8005d3c:	fb01 f303 	mul.w	r3, r1, r3
 8005d40:	4413      	add	r3, r2
 8005d42:	3350      	adds	r3, #80	; 0x50
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	441a      	add	r2, r3
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	202c      	movs	r0, #44	; 0x2c
 8005d50:	fb00 f303 	mul.w	r3, r0, r3
 8005d54:	440b      	add	r3, r1
 8005d56:	3350      	adds	r3, #80	; 0x50
 8005d58:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	0cdb      	lsrs	r3, r3, #19
 8005d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d6e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	212c      	movs	r1, #44	; 0x2c
 8005d76:	fb01 f303 	mul.w	r3, r1, r3
 8005d7a:	4413      	add	r3, r2
 8005d7c:	3340      	adds	r3, #64	; 0x40
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d13c      	bne.n	8005e02 <HCD_RXQLVL_IRQHandler+0x19a>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d039      	beq.n	8005e02 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005da4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dac:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dba:	461a      	mov	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	212c      	movs	r1, #44	; 0x2c
 8005dc6:	fb01 f303 	mul.w	r3, r1, r3
 8005dca:	4413      	add	r3, r2
 8005dcc:	3354      	adds	r3, #84	; 0x54
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	f083 0301 	eor.w	r3, r3, #1
 8005dd4:	b2d8      	uxtb	r0, r3
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	212c      	movs	r1, #44	; 0x2c
 8005ddc:	fb01 f303 	mul.w	r3, r1, r3
 8005de0:	4413      	add	r3, r2
 8005de2:	3354      	adds	r3, #84	; 0x54
 8005de4:	4602      	mov	r2, r0
 8005de6:	701a      	strb	r2, [r3, #0]
      break;
 8005de8:	e00b      	b.n	8005e02 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	212c      	movs	r1, #44	; 0x2c
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	4413      	add	r3, r2
 8005df6:	3360      	adds	r3, #96	; 0x60
 8005df8:	2204      	movs	r2, #4
 8005dfa:	701a      	strb	r2, [r3, #0]
      break;
 8005dfc:	e001      	b.n	8005e02 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005dfe:	bf00      	nop
 8005e00:	e000      	b.n	8005e04 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005e02:	bf00      	nop
  }
}
 8005e04:	bf00      	nop
 8005e06:	3728      	adds	r7, #40	; 0x28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e38:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d10b      	bne.n	8005e5c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d102      	bne.n	8005e54 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f008 fd36 	bl	800e8c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f043 0302 	orr.w	r3, r3, #2
 8005e5a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f003 0308 	and.w	r3, r3, #8
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d132      	bne.n	8005ecc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f043 0308 	orr.w	r3, r3, #8
 8005e6c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d126      	bne.n	8005ec6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d113      	bne.n	8005ea8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005e86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e8a:	d106      	bne.n	8005e9a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2102      	movs	r1, #2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f002 f838 	bl	8007f08 <USB_InitFSLSPClkSel>
 8005e98:	e011      	b.n	8005ebe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f002 f831 	bl	8007f08 <USB_InitFSLSPClkSel>
 8005ea6:	e00a      	b.n	8005ebe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d106      	bne.n	8005ebe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005ebc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f008 fd28 	bl	800e914 <HAL_HCD_PortEnabled_Callback>
 8005ec4:	e002      	b.n	8005ecc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f008 fd32 	bl	800e930 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	d103      	bne.n	8005ede <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f043 0320 	orr.w	r3, r3, #32
 8005edc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	6013      	str	r3, [r2, #0]
}
 8005eea:	bf00      	nop
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e264      	b.n	80063d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d075      	beq.n	8005ffe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f12:	4ba3      	ldr	r3, [pc, #652]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 030c 	and.w	r3, r3, #12
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d00c      	beq.n	8005f38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f1e:	4ba0      	ldr	r3, [pc, #640]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f26:	2b08      	cmp	r3, #8
 8005f28:	d112      	bne.n	8005f50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f2a:	4b9d      	ldr	r3, [pc, #628]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f36:	d10b      	bne.n	8005f50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f38:	4b99      	ldr	r3, [pc, #612]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d05b      	beq.n	8005ffc <HAL_RCC_OscConfig+0x108>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d157      	bne.n	8005ffc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e23f      	b.n	80063d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f58:	d106      	bne.n	8005f68 <HAL_RCC_OscConfig+0x74>
 8005f5a:	4b91      	ldr	r3, [pc, #580]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a90      	ldr	r2, [pc, #576]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8005f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	e01d      	b.n	8005fa4 <HAL_RCC_OscConfig+0xb0>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f70:	d10c      	bne.n	8005f8c <HAL_RCC_OscConfig+0x98>
 8005f72:	4b8b      	ldr	r3, [pc, #556]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a8a      	ldr	r2, [pc, #552]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8005f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	4b88      	ldr	r3, [pc, #544]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a87      	ldr	r2, [pc, #540]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8005f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	e00b      	b.n	8005fa4 <HAL_RCC_OscConfig+0xb0>
 8005f8c:	4b84      	ldr	r3, [pc, #528]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a83      	ldr	r2, [pc, #524]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8005f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	4b81      	ldr	r3, [pc, #516]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a80      	ldr	r2, [pc, #512]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8005f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d013      	beq.n	8005fd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fac:	f7fb fe50 	bl	8001c50 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fb4:	f7fb fe4c 	bl	8001c50 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b64      	cmp	r3, #100	; 0x64
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e204      	b.n	80063d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fc6:	4b76      	ldr	r3, [pc, #472]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0f0      	beq.n	8005fb4 <HAL_RCC_OscConfig+0xc0>
 8005fd2:	e014      	b.n	8005ffe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd4:	f7fb fe3c 	bl	8001c50 <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fda:	e008      	b.n	8005fee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fdc:	f7fb fe38 	bl	8001c50 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b64      	cmp	r3, #100	; 0x64
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e1f0      	b.n	80063d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fee:	4b6c      	ldr	r3, [pc, #432]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1f0      	bne.n	8005fdc <HAL_RCC_OscConfig+0xe8>
 8005ffa:	e000      	b.n	8005ffe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d063      	beq.n	80060d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800600a:	4b65      	ldr	r3, [pc, #404]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 030c 	and.w	r3, r3, #12
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00b      	beq.n	800602e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006016:	4b62      	ldr	r3, [pc, #392]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800601e:	2b08      	cmp	r3, #8
 8006020:	d11c      	bne.n	800605c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006022:	4b5f      	ldr	r3, [pc, #380]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d116      	bne.n	800605c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800602e:	4b5c      	ldr	r3, [pc, #368]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d005      	beq.n	8006046 <HAL_RCC_OscConfig+0x152>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d001      	beq.n	8006046 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e1c4      	b.n	80063d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006046:	4b56      	ldr	r3, [pc, #344]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	4952      	ldr	r1, [pc, #328]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8006056:	4313      	orrs	r3, r2
 8006058:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800605a:	e03a      	b.n	80060d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d020      	beq.n	80060a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006064:	4b4f      	ldr	r3, [pc, #316]	; (80061a4 <HAL_RCC_OscConfig+0x2b0>)
 8006066:	2201      	movs	r2, #1
 8006068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606a:	f7fb fdf1 	bl	8001c50 <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006070:	e008      	b.n	8006084 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006072:	f7fb fded 	bl	8001c50 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d901      	bls.n	8006084 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e1a5      	b.n	80063d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006084:	4b46      	ldr	r3, [pc, #280]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0f0      	beq.n	8006072 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006090:	4b43      	ldr	r3, [pc, #268]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	4940      	ldr	r1, [pc, #256]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	600b      	str	r3, [r1, #0]
 80060a4:	e015      	b.n	80060d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060a6:	4b3f      	ldr	r3, [pc, #252]	; (80061a4 <HAL_RCC_OscConfig+0x2b0>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ac:	f7fb fdd0 	bl	8001c50 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060b4:	f7fb fdcc 	bl	8001c50 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e184      	b.n	80063d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060c6:	4b36      	ldr	r3, [pc, #216]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1f0      	bne.n	80060b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d030      	beq.n	8006140 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d016      	beq.n	8006114 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060e6:	4b30      	ldr	r3, [pc, #192]	; (80061a8 <HAL_RCC_OscConfig+0x2b4>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ec:	f7fb fdb0 	bl	8001c50 <HAL_GetTick>
 80060f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060f4:	f7fb fdac 	bl	8001c50 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e164      	b.n	80063d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006106:	4b26      	ldr	r3, [pc, #152]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8006108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0f0      	beq.n	80060f4 <HAL_RCC_OscConfig+0x200>
 8006112:	e015      	b.n	8006140 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006114:	4b24      	ldr	r3, [pc, #144]	; (80061a8 <HAL_RCC_OscConfig+0x2b4>)
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800611a:	f7fb fd99 	bl	8001c50 <HAL_GetTick>
 800611e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006120:	e008      	b.n	8006134 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006122:	f7fb fd95 	bl	8001c50 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e14d      	b.n	80063d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006134:	4b1a      	ldr	r3, [pc, #104]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8006136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1f0      	bne.n	8006122 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 80a0 	beq.w	800628e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800614e:	2300      	movs	r3, #0
 8006150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006152:	4b13      	ldr	r3, [pc, #76]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10f      	bne.n	800617e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800615e:	2300      	movs	r3, #0
 8006160:	60bb      	str	r3, [r7, #8]
 8006162:	4b0f      	ldr	r3, [pc, #60]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	4a0e      	ldr	r2, [pc, #56]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8006168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800616c:	6413      	str	r3, [r2, #64]	; 0x40
 800616e:	4b0c      	ldr	r3, [pc, #48]	; (80061a0 <HAL_RCC_OscConfig+0x2ac>)
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006176:	60bb      	str	r3, [r7, #8]
 8006178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800617a:	2301      	movs	r3, #1
 800617c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800617e:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <HAL_RCC_OscConfig+0x2b8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006186:	2b00      	cmp	r3, #0
 8006188:	d121      	bne.n	80061ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800618a:	4b08      	ldr	r3, [pc, #32]	; (80061ac <HAL_RCC_OscConfig+0x2b8>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a07      	ldr	r2, [pc, #28]	; (80061ac <HAL_RCC_OscConfig+0x2b8>)
 8006190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006196:	f7fb fd5b 	bl	8001c50 <HAL_GetTick>
 800619a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800619c:	e011      	b.n	80061c2 <HAL_RCC_OscConfig+0x2ce>
 800619e:	bf00      	nop
 80061a0:	40023800 	.word	0x40023800
 80061a4:	42470000 	.word	0x42470000
 80061a8:	42470e80 	.word	0x42470e80
 80061ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b0:	f7fb fd4e 	bl	8001c50 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e106      	b.n	80063d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061c2:	4b85      	ldr	r3, [pc, #532]	; (80063d8 <HAL_RCC_OscConfig+0x4e4>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0f0      	beq.n	80061b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d106      	bne.n	80061e4 <HAL_RCC_OscConfig+0x2f0>
 80061d6:	4b81      	ldr	r3, [pc, #516]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 80061d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061da:	4a80      	ldr	r2, [pc, #512]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 80061dc:	f043 0301 	orr.w	r3, r3, #1
 80061e0:	6713      	str	r3, [r2, #112]	; 0x70
 80061e2:	e01c      	b.n	800621e <HAL_RCC_OscConfig+0x32a>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2b05      	cmp	r3, #5
 80061ea:	d10c      	bne.n	8006206 <HAL_RCC_OscConfig+0x312>
 80061ec:	4b7b      	ldr	r3, [pc, #492]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 80061ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f0:	4a7a      	ldr	r2, [pc, #488]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 80061f2:	f043 0304 	orr.w	r3, r3, #4
 80061f6:	6713      	str	r3, [r2, #112]	; 0x70
 80061f8:	4b78      	ldr	r3, [pc, #480]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 80061fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fc:	4a77      	ldr	r2, [pc, #476]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 80061fe:	f043 0301 	orr.w	r3, r3, #1
 8006202:	6713      	str	r3, [r2, #112]	; 0x70
 8006204:	e00b      	b.n	800621e <HAL_RCC_OscConfig+0x32a>
 8006206:	4b75      	ldr	r3, [pc, #468]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 8006208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620a:	4a74      	ldr	r2, [pc, #464]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 800620c:	f023 0301 	bic.w	r3, r3, #1
 8006210:	6713      	str	r3, [r2, #112]	; 0x70
 8006212:	4b72      	ldr	r3, [pc, #456]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 8006214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006216:	4a71      	ldr	r2, [pc, #452]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 8006218:	f023 0304 	bic.w	r3, r3, #4
 800621c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d015      	beq.n	8006252 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006226:	f7fb fd13 	bl	8001c50 <HAL_GetTick>
 800622a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800622c:	e00a      	b.n	8006244 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800622e:	f7fb fd0f 	bl	8001c50 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	f241 3288 	movw	r2, #5000	; 0x1388
 800623c:	4293      	cmp	r3, r2
 800623e:	d901      	bls.n	8006244 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e0c5      	b.n	80063d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006244:	4b65      	ldr	r3, [pc, #404]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 8006246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d0ee      	beq.n	800622e <HAL_RCC_OscConfig+0x33a>
 8006250:	e014      	b.n	800627c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006252:	f7fb fcfd 	bl	8001c50 <HAL_GetTick>
 8006256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006258:	e00a      	b.n	8006270 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800625a:	f7fb fcf9 	bl	8001c50 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	f241 3288 	movw	r2, #5000	; 0x1388
 8006268:	4293      	cmp	r3, r2
 800626a:	d901      	bls.n	8006270 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e0af      	b.n	80063d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006270:	4b5a      	ldr	r3, [pc, #360]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 8006272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1ee      	bne.n	800625a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800627c:	7dfb      	ldrb	r3, [r7, #23]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d105      	bne.n	800628e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006282:	4b56      	ldr	r3, [pc, #344]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	4a55      	ldr	r2, [pc, #340]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 8006288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800628c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 809b 	beq.w	80063ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006298:	4b50      	ldr	r3, [pc, #320]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f003 030c 	and.w	r3, r3, #12
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d05c      	beq.n	800635e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d141      	bne.n	8006330 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ac:	4b4c      	ldr	r3, [pc, #304]	; (80063e0 <HAL_RCC_OscConfig+0x4ec>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b2:	f7fb fccd 	bl	8001c50 <HAL_GetTick>
 80062b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062b8:	e008      	b.n	80062cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062ba:	f7fb fcc9 	bl	8001c50 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d901      	bls.n	80062cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e081      	b.n	80063d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062cc:	4b43      	ldr	r3, [pc, #268]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1f0      	bne.n	80062ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	69da      	ldr	r2, [r3, #28]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	019b      	lsls	r3, r3, #6
 80062e8:	431a      	orrs	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ee:	085b      	lsrs	r3, r3, #1
 80062f0:	3b01      	subs	r3, #1
 80062f2:	041b      	lsls	r3, r3, #16
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	061b      	lsls	r3, r3, #24
 80062fc:	4937      	ldr	r1, [pc, #220]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006302:	4b37      	ldr	r3, [pc, #220]	; (80063e0 <HAL_RCC_OscConfig+0x4ec>)
 8006304:	2201      	movs	r2, #1
 8006306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006308:	f7fb fca2 	bl	8001c50 <HAL_GetTick>
 800630c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006310:	f7fb fc9e 	bl	8001c50 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e056      	b.n	80063d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006322:	4b2e      	ldr	r3, [pc, #184]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0f0      	beq.n	8006310 <HAL_RCC_OscConfig+0x41c>
 800632e:	e04e      	b.n	80063ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006330:	4b2b      	ldr	r3, [pc, #172]	; (80063e0 <HAL_RCC_OscConfig+0x4ec>)
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006336:	f7fb fc8b 	bl	8001c50 <HAL_GetTick>
 800633a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800633c:	e008      	b.n	8006350 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800633e:	f7fb fc87 	bl	8001c50 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e03f      	b.n	80063d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006350:	4b22      	ldr	r3, [pc, #136]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1f0      	bne.n	800633e <HAL_RCC_OscConfig+0x44a>
 800635c:	e037      	b.n	80063ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d101      	bne.n	800636a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e032      	b.n	80063d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800636a:	4b1c      	ldr	r3, [pc, #112]	; (80063dc <HAL_RCC_OscConfig+0x4e8>)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d028      	beq.n	80063ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006382:	429a      	cmp	r2, r3
 8006384:	d121      	bne.n	80063ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006390:	429a      	cmp	r2, r3
 8006392:	d11a      	bne.n	80063ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800639a:	4013      	ands	r3, r2
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d111      	bne.n	80063ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	085b      	lsrs	r3, r3, #1
 80063b2:	3b01      	subs	r3, #1
 80063b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d107      	bne.n	80063ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d001      	beq.n	80063ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e000      	b.n	80063d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40007000 	.word	0x40007000
 80063dc:	40023800 	.word	0x40023800
 80063e0:	42470060 	.word	0x42470060

080063e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0cc      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063f8:	4b68      	ldr	r3, [pc, #416]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d90c      	bls.n	8006420 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006406:	4b65      	ldr	r3, [pc, #404]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800640e:	4b63      	ldr	r3, [pc, #396]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d001      	beq.n	8006420 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e0b8      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b00      	cmp	r3, #0
 800642a:	d020      	beq.n	800646e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006438:	4b59      	ldr	r3, [pc, #356]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	4a58      	ldr	r2, [pc, #352]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 800643e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006442:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0308 	and.w	r3, r3, #8
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006450:	4b53      	ldr	r3, [pc, #332]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	4a52      	ldr	r2, [pc, #328]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006456:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800645a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800645c:	4b50      	ldr	r3, [pc, #320]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	494d      	ldr	r1, [pc, #308]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 800646a:	4313      	orrs	r3, r2
 800646c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d044      	beq.n	8006504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d107      	bne.n	8006492 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006482:	4b47      	ldr	r3, [pc, #284]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d119      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e07f      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2b02      	cmp	r3, #2
 8006498:	d003      	beq.n	80064a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d107      	bne.n	80064b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064a2:	4b3f      	ldr	r3, [pc, #252]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e06f      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064b2:	4b3b      	ldr	r3, [pc, #236]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e067      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064c2:	4b37      	ldr	r3, [pc, #220]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f023 0203 	bic.w	r2, r3, #3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4934      	ldr	r1, [pc, #208]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064d4:	f7fb fbbc 	bl	8001c50 <HAL_GetTick>
 80064d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064da:	e00a      	b.n	80064f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064dc:	f7fb fbb8 	bl	8001c50 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e04f      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f2:	4b2b      	ldr	r3, [pc, #172]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 020c 	and.w	r2, r3, #12
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	429a      	cmp	r2, r3
 8006502:	d1eb      	bne.n	80064dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006504:	4b25      	ldr	r3, [pc, #148]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d20c      	bcs.n	800652c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006512:	4b22      	ldr	r3, [pc, #136]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800651a:	4b20      	ldr	r3, [pc, #128]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d001      	beq.n	800652c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e032      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d008      	beq.n	800654a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006538:	4b19      	ldr	r3, [pc, #100]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	4916      	ldr	r1, [pc, #88]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	4313      	orrs	r3, r2
 8006548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0308 	and.w	r3, r3, #8
 8006552:	2b00      	cmp	r3, #0
 8006554:	d009      	beq.n	800656a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006556:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	490e      	ldr	r1, [pc, #56]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006566:	4313      	orrs	r3, r2
 8006568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800656a:	f000 f889 	bl	8006680 <HAL_RCC_GetSysClockFreq>
 800656e:	4602      	mov	r2, r0
 8006570:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	091b      	lsrs	r3, r3, #4
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	490a      	ldr	r1, [pc, #40]	; (80065a4 <HAL_RCC_ClockConfig+0x1c0>)
 800657c:	5ccb      	ldrb	r3, [r1, r3]
 800657e:	fa22 f303 	lsr.w	r3, r2, r3
 8006582:	4a09      	ldr	r2, [pc, #36]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006586:	4b09      	ldr	r3, [pc, #36]	; (80065ac <HAL_RCC_ClockConfig+0x1c8>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4618      	mov	r0, r3
 800658c:	f7fb fb1c 	bl	8001bc8 <HAL_InitTick>

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	40023c00 	.word	0x40023c00
 80065a0:	40023800 	.word	0x40023800
 80065a4:	08010a74 	.word	0x08010a74
 80065a8:	20000004 	.word	0x20000004
 80065ac:	20000008 	.word	0x20000008

080065b0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08c      	sub	sp, #48	; 0x30
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d129      	bne.n	8006616 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80065c2:	2300      	movs	r3, #0
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	4b2b      	ldr	r3, [pc, #172]	; (8006674 <HAL_RCC_MCOConfig+0xc4>)
 80065c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ca:	4a2a      	ldr	r2, [pc, #168]	; (8006674 <HAL_RCC_MCOConfig+0xc4>)
 80065cc:	f043 0301 	orr.w	r3, r3, #1
 80065d0:	6313      	str	r3, [r2, #48]	; 0x30
 80065d2:	4b28      	ldr	r3, [pc, #160]	; (8006674 <HAL_RCC_MCOConfig+0xc4>)
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	61bb      	str	r3, [r7, #24]
 80065dc:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80065de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e4:	2302      	movs	r3, #2
 80065e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065e8:	2303      	movs	r3, #3
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ec:	2300      	movs	r3, #0
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80065f0:	2300      	movs	r3, #0
 80065f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80065f4:	f107 031c 	add.w	r3, r7, #28
 80065f8:	4619      	mov	r1, r3
 80065fa:	481f      	ldr	r0, [pc, #124]	; (8006678 <HAL_RCC_MCOConfig+0xc8>)
 80065fc:	f7fd fd3c 	bl	8004078 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006600:	4b1c      	ldr	r3, [pc, #112]	; (8006674 <HAL_RCC_MCOConfig+0xc4>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8006608:	68b9      	ldr	r1, [r7, #8]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	430b      	orrs	r3, r1
 800660e:	4919      	ldr	r1, [pc, #100]	; (8006674 <HAL_RCC_MCOConfig+0xc4>)
 8006610:	4313      	orrs	r3, r2
 8006612:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8006614:	e029      	b.n	800666a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8006616:	2300      	movs	r3, #0
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	4b16      	ldr	r3, [pc, #88]	; (8006674 <HAL_RCC_MCOConfig+0xc4>)
 800661c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661e:	4a15      	ldr	r2, [pc, #84]	; (8006674 <HAL_RCC_MCOConfig+0xc4>)
 8006620:	f043 0304 	orr.w	r3, r3, #4
 8006624:	6313      	str	r3, [r2, #48]	; 0x30
 8006626:	4b13      	ldr	r3, [pc, #76]	; (8006674 <HAL_RCC_MCOConfig+0xc4>)
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	f003 0304 	and.w	r3, r3, #4
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006632:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006638:	2302      	movs	r3, #2
 800663a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800663c:	2303      	movs	r3, #3
 800663e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006640:	2300      	movs	r3, #0
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006644:	2300      	movs	r3, #0
 8006646:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006648:	f107 031c 	add.w	r3, r7, #28
 800664c:	4619      	mov	r1, r3
 800664e:	480b      	ldr	r0, [pc, #44]	; (800667c <HAL_RCC_MCOConfig+0xcc>)
 8006650:	f7fd fd12 	bl	8004078 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8006654:	4b07      	ldr	r3, [pc, #28]	; (8006674 <HAL_RCC_MCOConfig+0xc4>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	00d9      	lsls	r1, r3, #3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	430b      	orrs	r3, r1
 8006664:	4903      	ldr	r1, [pc, #12]	; (8006674 <HAL_RCC_MCOConfig+0xc4>)
 8006666:	4313      	orrs	r3, r2
 8006668:	608b      	str	r3, [r1, #8]
}
 800666a:	bf00      	nop
 800666c:	3730      	adds	r7, #48	; 0x30
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	40023800 	.word	0x40023800
 8006678:	40020000 	.word	0x40020000
 800667c:	40020800 	.word	0x40020800

08006680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006680:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006684:	b084      	sub	sp, #16
 8006686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006688:	2300      	movs	r3, #0
 800668a:	607b      	str	r3, [r7, #4]
 800668c:	2300      	movs	r3, #0
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	2300      	movs	r3, #0
 8006692:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006698:	4b67      	ldr	r3, [pc, #412]	; (8006838 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f003 030c 	and.w	r3, r3, #12
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d00d      	beq.n	80066c0 <HAL_RCC_GetSysClockFreq+0x40>
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	f200 80bd 	bhi.w	8006824 <HAL_RCC_GetSysClockFreq+0x1a4>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <HAL_RCC_GetSysClockFreq+0x34>
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d003      	beq.n	80066ba <HAL_RCC_GetSysClockFreq+0x3a>
 80066b2:	e0b7      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066b4:	4b61      	ldr	r3, [pc, #388]	; (800683c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80066b6:	60bb      	str	r3, [r7, #8]
       break;
 80066b8:	e0b7      	b.n	800682a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066ba:	4b61      	ldr	r3, [pc, #388]	; (8006840 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80066bc:	60bb      	str	r3, [r7, #8]
      break;
 80066be:	e0b4      	b.n	800682a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066c0:	4b5d      	ldr	r3, [pc, #372]	; (8006838 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066ca:	4b5b      	ldr	r3, [pc, #364]	; (8006838 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d04d      	beq.n	8006772 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066d6:	4b58      	ldr	r3, [pc, #352]	; (8006838 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	099b      	lsrs	r3, r3, #6
 80066dc:	461a      	mov	r2, r3
 80066de:	f04f 0300 	mov.w	r3, #0
 80066e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80066e6:	f04f 0100 	mov.w	r1, #0
 80066ea:	ea02 0800 	and.w	r8, r2, r0
 80066ee:	ea03 0901 	and.w	r9, r3, r1
 80066f2:	4640      	mov	r0, r8
 80066f4:	4649      	mov	r1, r9
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	014b      	lsls	r3, r1, #5
 8006700:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006704:	0142      	lsls	r2, r0, #5
 8006706:	4610      	mov	r0, r2
 8006708:	4619      	mov	r1, r3
 800670a:	ebb0 0008 	subs.w	r0, r0, r8
 800670e:	eb61 0109 	sbc.w	r1, r1, r9
 8006712:	f04f 0200 	mov.w	r2, #0
 8006716:	f04f 0300 	mov.w	r3, #0
 800671a:	018b      	lsls	r3, r1, #6
 800671c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006720:	0182      	lsls	r2, r0, #6
 8006722:	1a12      	subs	r2, r2, r0
 8006724:	eb63 0301 	sbc.w	r3, r3, r1
 8006728:	f04f 0000 	mov.w	r0, #0
 800672c:	f04f 0100 	mov.w	r1, #0
 8006730:	00d9      	lsls	r1, r3, #3
 8006732:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006736:	00d0      	lsls	r0, r2, #3
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	eb12 0208 	adds.w	r2, r2, r8
 8006740:	eb43 0309 	adc.w	r3, r3, r9
 8006744:	f04f 0000 	mov.w	r0, #0
 8006748:	f04f 0100 	mov.w	r1, #0
 800674c:	0259      	lsls	r1, r3, #9
 800674e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006752:	0250      	lsls	r0, r2, #9
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4610      	mov	r0, r2
 800675a:	4619      	mov	r1, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	461a      	mov	r2, r3
 8006760:	f04f 0300 	mov.w	r3, #0
 8006764:	f7f9 fd84 	bl	8000270 <__aeabi_uldivmod>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4613      	mov	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	e04a      	b.n	8006808 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006772:	4b31      	ldr	r3, [pc, #196]	; (8006838 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	099b      	lsrs	r3, r3, #6
 8006778:	461a      	mov	r2, r3
 800677a:	f04f 0300 	mov.w	r3, #0
 800677e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006782:	f04f 0100 	mov.w	r1, #0
 8006786:	ea02 0400 	and.w	r4, r2, r0
 800678a:	ea03 0501 	and.w	r5, r3, r1
 800678e:	4620      	mov	r0, r4
 8006790:	4629      	mov	r1, r5
 8006792:	f04f 0200 	mov.w	r2, #0
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	014b      	lsls	r3, r1, #5
 800679c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80067a0:	0142      	lsls	r2, r0, #5
 80067a2:	4610      	mov	r0, r2
 80067a4:	4619      	mov	r1, r3
 80067a6:	1b00      	subs	r0, r0, r4
 80067a8:	eb61 0105 	sbc.w	r1, r1, r5
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	f04f 0300 	mov.w	r3, #0
 80067b4:	018b      	lsls	r3, r1, #6
 80067b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80067ba:	0182      	lsls	r2, r0, #6
 80067bc:	1a12      	subs	r2, r2, r0
 80067be:	eb63 0301 	sbc.w	r3, r3, r1
 80067c2:	f04f 0000 	mov.w	r0, #0
 80067c6:	f04f 0100 	mov.w	r1, #0
 80067ca:	00d9      	lsls	r1, r3, #3
 80067cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067d0:	00d0      	lsls	r0, r2, #3
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	1912      	adds	r2, r2, r4
 80067d8:	eb45 0303 	adc.w	r3, r5, r3
 80067dc:	f04f 0000 	mov.w	r0, #0
 80067e0:	f04f 0100 	mov.w	r1, #0
 80067e4:	0299      	lsls	r1, r3, #10
 80067e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80067ea:	0290      	lsls	r0, r2, #10
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4610      	mov	r0, r2
 80067f2:	4619      	mov	r1, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	461a      	mov	r2, r3
 80067f8:	f04f 0300 	mov.w	r3, #0
 80067fc:	f7f9 fd38 	bl	8000270 <__aeabi_uldivmod>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	4613      	mov	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006808:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	0c1b      	lsrs	r3, r3, #16
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	3301      	adds	r3, #1
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006820:	60bb      	str	r3, [r7, #8]
      break;
 8006822:	e002      	b.n	800682a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006824:	4b05      	ldr	r3, [pc, #20]	; (800683c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006826:	60bb      	str	r3, [r7, #8]
      break;
 8006828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800682a:	68bb      	ldr	r3, [r7, #8]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006836:	bf00      	nop
 8006838:	40023800 	.word	0x40023800
 800683c:	00f42400 	.word	0x00f42400
 8006840:	007a1200 	.word	0x007a1200

08006844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006848:	4b03      	ldr	r3, [pc, #12]	; (8006858 <HAL_RCC_GetHCLKFreq+0x14>)
 800684a:	681b      	ldr	r3, [r3, #0]
}
 800684c:	4618      	mov	r0, r3
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	20000004 	.word	0x20000004

0800685c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006860:	f7ff fff0 	bl	8006844 <HAL_RCC_GetHCLKFreq>
 8006864:	4602      	mov	r2, r0
 8006866:	4b05      	ldr	r3, [pc, #20]	; (800687c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	0a9b      	lsrs	r3, r3, #10
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	4903      	ldr	r1, [pc, #12]	; (8006880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006872:	5ccb      	ldrb	r3, [r1, r3]
 8006874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006878:	4618      	mov	r0, r3
 800687a:	bd80      	pop	{r7, pc}
 800687c:	40023800 	.word	0x40023800
 8006880:	08010a84 	.word	0x08010a84

08006884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006888:	f7ff ffdc 	bl	8006844 <HAL_RCC_GetHCLKFreq>
 800688c:	4602      	mov	r2, r0
 800688e:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	0b5b      	lsrs	r3, r3, #13
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	4903      	ldr	r1, [pc, #12]	; (80068a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800689a:	5ccb      	ldrb	r3, [r1, r3]
 800689c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	40023800 	.word	0x40023800
 80068a8:	08010a84 	.word	0x08010a84

080068ac <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e034      	b.n	800692c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f7fb f80e 	bl	80018f8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3308      	adds	r3, #8
 80068e4:	4619      	mov	r1, r3
 80068e6:	4610      	mov	r0, r2
 80068e8:	f000 ff8c 	bl	8007804 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	461a      	mov	r2, r3
 80068f6:	68b9      	ldr	r1, [r7, #8]
 80068f8:	f000 ffd6 	bl	80078a8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6858      	ldr	r0, [r3, #4]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	f001 f80b 	bl	8007924 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	6892      	ldr	r2, [r2, #8]
 8006916:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	6892      	ldr	r2, [r2, #8]
 8006922:	f041 0101 	orr.w	r1, r1, #1
 8006926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e03f      	b.n	80069c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d106      	bne.n	8006960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7fa feda 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2224      	movs	r2, #36	; 0x24
 8006964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68da      	ldr	r2, [r3, #12]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fd7b 	bl	8007474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691a      	ldr	r2, [r3, #16]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800698c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	695a      	ldr	r2, [r3, #20]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800699c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b08a      	sub	sp, #40	; 0x28
 80069d2:	af02      	add	r7, sp, #8
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	603b      	str	r3, [r7, #0]
 80069da:	4613      	mov	r3, r2
 80069dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	d17c      	bne.n	8006ae8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <HAL_UART_Transmit+0x2c>
 80069f4:	88fb      	ldrh	r3, [r7, #6]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e075      	b.n	8006aea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d101      	bne.n	8006a0c <HAL_UART_Transmit+0x3e>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e06e      	b.n	8006aea <HAL_UART_Transmit+0x11c>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2221      	movs	r2, #33	; 0x21
 8006a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a22:	f7fb f915 	bl	8001c50 <HAL_GetTick>
 8006a26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	88fa      	ldrh	r2, [r7, #6]
 8006a2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	88fa      	ldrh	r2, [r7, #6]
 8006a32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a3c:	d108      	bne.n	8006a50 <HAL_UART_Transmit+0x82>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d104      	bne.n	8006a50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	e003      	b.n	8006a58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a54:	2300      	movs	r3, #0
 8006a56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006a60:	e02a      	b.n	8006ab8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2180      	movs	r1, #128	; 0x80
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 faf9 	bl	8007064 <UART_WaitOnFlagUntilTimeout>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e036      	b.n	8006aea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10b      	bne.n	8006a9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	3302      	adds	r3, #2
 8006a96:	61bb      	str	r3, [r7, #24]
 8006a98:	e007      	b.n	8006aaa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	781a      	ldrb	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1cf      	bne.n	8006a62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2140      	movs	r1, #64	; 0x40
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 fac9 	bl	8007064 <UART_WaitOnFlagUntilTimeout>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e006      	b.n	8006aea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	e000      	b.n	8006aea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ae8:	2302      	movs	r3, #2
  }
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3720      	adds	r7, #32
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b0ba      	sub	sp, #232	; 0xe8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b2a:	f003 030f 	and.w	r3, r3, #15
 8006b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006b32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10f      	bne.n	8006b5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d009      	beq.n	8006b5a <HAL_UART_IRQHandler+0x66>
 8006b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fbd3 	bl	80072fe <UART_Receive_IT>
      return;
 8006b58:	e256      	b.n	8007008 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 80de 	beq.w	8006d20 <HAL_UART_IRQHandler+0x22c>
 8006b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d106      	bne.n	8006b7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80d1 	beq.w	8006d20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00b      	beq.n	8006ba2 <HAL_UART_IRQHandler+0xae>
 8006b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	f043 0201 	orr.w	r2, r3, #1
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba6:	f003 0304 	and.w	r3, r3, #4
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00b      	beq.n	8006bc6 <HAL_UART_IRQHandler+0xd2>
 8006bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d005      	beq.n	8006bc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	f043 0202 	orr.w	r2, r3, #2
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00b      	beq.n	8006bea <HAL_UART_IRQHandler+0xf6>
 8006bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d005      	beq.n	8006bea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	f043 0204 	orr.w	r2, r3, #4
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bee:	f003 0308 	and.w	r3, r3, #8
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d011      	beq.n	8006c1a <HAL_UART_IRQHandler+0x126>
 8006bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d105      	bne.n	8006c0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	f043 0208 	orr.w	r2, r3, #8
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 81ed 	beq.w	8006ffe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d008      	beq.n	8006c42 <HAL_UART_IRQHandler+0x14e>
 8006c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c34:	f003 0320 	and.w	r3, r3, #32
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fb5e 	bl	80072fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4c:	2b40      	cmp	r3, #64	; 0x40
 8006c4e:	bf0c      	ite	eq
 8006c50:	2301      	moveq	r3, #1
 8006c52:	2300      	movne	r3, #0
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5e:	f003 0308 	and.w	r3, r3, #8
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d103      	bne.n	8006c6e <HAL_UART_IRQHandler+0x17a>
 8006c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d04f      	beq.n	8006d0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fa66 	bl	8007140 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7e:	2b40      	cmp	r3, #64	; 0x40
 8006c80:	d141      	bne.n	8006d06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3314      	adds	r3, #20
 8006c88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3314      	adds	r3, #20
 8006caa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006cba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cbe:	e841 2300 	strex	r3, r2, [r1]
 8006cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1d9      	bne.n	8006c82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d013      	beq.n	8006cfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cda:	4a7d      	ldr	r2, [pc, #500]	; (8006ed0 <HAL_UART_IRQHandler+0x3dc>)
 8006cdc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fb fda6 	bl	8002834 <HAL_DMA_Abort_IT>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d016      	beq.n	8006d1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cfc:	e00e      	b.n	8006d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f99a 	bl	8007038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d04:	e00a      	b.n	8006d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f996 	bl	8007038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d0c:	e006      	b.n	8006d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f992 	bl	8007038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006d1a:	e170      	b.n	8006ffe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d1c:	bf00      	nop
    return;
 8006d1e:	e16e      	b.n	8006ffe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	f040 814a 	bne.w	8006fbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d2e:	f003 0310 	and.w	r3, r3, #16
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 8143 	beq.w	8006fbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d3c:	f003 0310 	and.w	r3, r3, #16
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 813c 	beq.w	8006fbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d46:	2300      	movs	r3, #0
 8006d48:	60bb      	str	r3, [r7, #8]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	60bb      	str	r3, [r7, #8]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	60bb      	str	r3, [r7, #8]
 8006d5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d66:	2b40      	cmp	r3, #64	; 0x40
 8006d68:	f040 80b4 	bne.w	8006ed4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 8140 	beq.w	8007002 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	f080 8139 	bcs.w	8007002 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006da2:	f000 8088 	beq.w	8006eb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	330c      	adds	r3, #12
 8006dac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006dbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	330c      	adds	r3, #12
 8006dce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006dd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006dd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006dde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1d9      	bne.n	8006da6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3314      	adds	r3, #20
 8006df8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e04:	f023 0301 	bic.w	r3, r3, #1
 8006e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3314      	adds	r3, #20
 8006e12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e22:	e841 2300 	strex	r3, r2, [r1]
 8006e26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1e1      	bne.n	8006df2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3314      	adds	r3, #20
 8006e34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3314      	adds	r3, #20
 8006e4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e5a:	e841 2300 	strex	r3, r2, [r1]
 8006e5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e3      	bne.n	8006e2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	330c      	adds	r3, #12
 8006e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e7e:	e853 3f00 	ldrex	r3, [r3]
 8006e82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e86:	f023 0310 	bic.w	r3, r3, #16
 8006e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	330c      	adds	r3, #12
 8006e94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e98:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e3      	bne.n	8006e74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7fb fc4f 	bl	8002754 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f8c0 	bl	800704c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ecc:	e099      	b.n	8007002 <HAL_UART_IRQHandler+0x50e>
 8006ece:	bf00      	nop
 8006ed0:	08007207 	.word	0x08007207
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 808b 	beq.w	8007006 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006ef0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 8086 	beq.w	8007006 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	330c      	adds	r3, #12
 8006f00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f04:	e853 3f00 	ldrex	r3, [r3]
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	330c      	adds	r3, #12
 8006f1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006f1e:	647a      	str	r2, [r7, #68]	; 0x44
 8006f20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f26:	e841 2300 	strex	r3, r2, [r1]
 8006f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1e3      	bne.n	8006efa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3314      	adds	r3, #20
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	e853 3f00 	ldrex	r3, [r3]
 8006f40:	623b      	str	r3, [r7, #32]
   return(result);
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	f023 0301 	bic.w	r3, r3, #1
 8006f48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3314      	adds	r3, #20
 8006f52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f56:	633a      	str	r2, [r7, #48]	; 0x30
 8006f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1e3      	bne.n	8006f32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	e853 3f00 	ldrex	r3, [r3]
 8006f86:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0310 	bic.w	r3, r3, #16
 8006f8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	330c      	adds	r3, #12
 8006f98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f9c:	61fa      	str	r2, [r7, #28]
 8006f9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	69b9      	ldr	r1, [r7, #24]
 8006fa2:	69fa      	ldr	r2, [r7, #28]
 8006fa4:	e841 2300 	strex	r3, r2, [r1]
 8006fa8:	617b      	str	r3, [r7, #20]
   return(result);
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e3      	bne.n	8006f78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f848 	bl	800704c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fbc:	e023      	b.n	8007006 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d009      	beq.n	8006fde <HAL_UART_IRQHandler+0x4ea>
 8006fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f929 	bl	800722e <UART_Transmit_IT>
    return;
 8006fdc:	e014      	b.n	8007008 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00e      	beq.n	8007008 <HAL_UART_IRQHandler+0x514>
 8006fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d008      	beq.n	8007008 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f969 	bl	80072ce <UART_EndTransmit_IT>
    return;
 8006ffc:	e004      	b.n	8007008 <HAL_UART_IRQHandler+0x514>
    return;
 8006ffe:	bf00      	nop
 8007000:	e002      	b.n	8007008 <HAL_UART_IRQHandler+0x514>
      return;
 8007002:	bf00      	nop
 8007004:	e000      	b.n	8007008 <HAL_UART_IRQHandler+0x514>
      return;
 8007006:	bf00      	nop
  }
}
 8007008:	37e8      	adds	r7, #232	; 0xe8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop

08007010 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	460b      	mov	r3, r1
 8007056:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b090      	sub	sp, #64	; 0x40
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	603b      	str	r3, [r7, #0]
 8007070:	4613      	mov	r3, r2
 8007072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007074:	e050      	b.n	8007118 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707c:	d04c      	beq.n	8007118 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800707e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007080:	2b00      	cmp	r3, #0
 8007082:	d007      	beq.n	8007094 <UART_WaitOnFlagUntilTimeout+0x30>
 8007084:	f7fa fde4 	bl	8001c50 <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007090:	429a      	cmp	r2, r3
 8007092:	d241      	bcs.n	8007118 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	330c      	adds	r3, #12
 800709a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	330c      	adds	r3, #12
 80070b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070b4:	637a      	str	r2, [r7, #52]	; 0x34
 80070b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e5      	bne.n	8007094 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3314      	adds	r3, #20
 80070ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	613b      	str	r3, [r7, #16]
   return(result);
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f023 0301 	bic.w	r3, r3, #1
 80070de:	63bb      	str	r3, [r7, #56]	; 0x38
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3314      	adds	r3, #20
 80070e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070e8:	623a      	str	r2, [r7, #32]
 80070ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	69f9      	ldr	r1, [r7, #28]
 80070ee:	6a3a      	ldr	r2, [r7, #32]
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e5      	bne.n	80070c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e00f      	b.n	8007138 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	4013      	ands	r3, r2
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	429a      	cmp	r2, r3
 8007126:	bf0c      	ite	eq
 8007128:	2301      	moveq	r3, #1
 800712a:	2300      	movne	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	461a      	mov	r2, r3
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	429a      	cmp	r2, r3
 8007134:	d09f      	beq.n	8007076 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3740      	adds	r7, #64	; 0x40
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007140:	b480      	push	{r7}
 8007142:	b095      	sub	sp, #84	; 0x54
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	330c      	adds	r3, #12
 800714e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800715e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	330c      	adds	r3, #12
 8007166:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007168:	643a      	str	r2, [r7, #64]	; 0x40
 800716a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800716e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e5      	bne.n	8007148 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3314      	adds	r3, #20
 8007182:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	61fb      	str	r3, [r7, #28]
   return(result);
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	f023 0301 	bic.w	r3, r3, #1
 8007192:	64bb      	str	r3, [r7, #72]	; 0x48
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3314      	adds	r3, #20
 800719a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800719c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800719e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e5      	bne.n	800717c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d119      	bne.n	80071ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	330c      	adds	r3, #12
 80071be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	e853 3f00 	ldrex	r3, [r3]
 80071c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f023 0310 	bic.w	r3, r3, #16
 80071ce:	647b      	str	r3, [r7, #68]	; 0x44
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	330c      	adds	r3, #12
 80071d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071d8:	61ba      	str	r2, [r7, #24]
 80071da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071dc:	6979      	ldr	r1, [r7, #20]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	e841 2300 	strex	r3, r2, [r1]
 80071e4:	613b      	str	r3, [r7, #16]
   return(result);
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e5      	bne.n	80071b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80071fa:	bf00      	nop
 80071fc:	3754      	adds	r7, #84	; 0x54
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007212:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f7ff ff09 	bl	8007038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007226:	bf00      	nop
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b21      	cmp	r3, #33	; 0x21
 8007240:	d13e      	bne.n	80072c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800724a:	d114      	bne.n	8007276 <UART_Transmit_IT+0x48>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d110      	bne.n	8007276 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007268:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	1c9a      	adds	r2, r3, #2
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	621a      	str	r2, [r3, #32]
 8007274:	e008      	b.n	8007288 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	1c59      	adds	r1, r3, #1
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	6211      	str	r1, [r2, #32]
 8007280:	781a      	ldrb	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800728c:	b29b      	uxth	r3, r3
 800728e:	3b01      	subs	r3, #1
 8007290:	b29b      	uxth	r3, r3
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	4619      	mov	r1, r3
 8007296:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10f      	bne.n	80072bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072bc:	2300      	movs	r3, #0
 80072be:	e000      	b.n	80072c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072c0:	2302      	movs	r3, #2
  }
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68da      	ldr	r2, [r3, #12]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff fe8e 	bl	8007010 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b08c      	sub	sp, #48	; 0x30
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b22      	cmp	r3, #34	; 0x22
 8007310:	f040 80ab 	bne.w	800746a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800731c:	d117      	bne.n	800734e <UART_Receive_IT+0x50>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d113      	bne.n	800734e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007326:	2300      	movs	r3, #0
 8007328:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	b29b      	uxth	r3, r3
 8007338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733c:	b29a      	uxth	r2, r3
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007346:	1c9a      	adds	r2, r3, #2
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	629a      	str	r2, [r3, #40]	; 0x28
 800734c:	e026      	b.n	800739c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007352:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007354:	2300      	movs	r3, #0
 8007356:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007360:	d007      	beq.n	8007372 <UART_Receive_IT+0x74>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10a      	bne.n	8007380 <UART_Receive_IT+0x82>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d106      	bne.n	8007380 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	b2da      	uxtb	r2, r3
 800737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	e008      	b.n	8007392 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	b2db      	uxtb	r3, r3
 8007388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800738c:	b2da      	uxtb	r2, r3
 800738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007390:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	4619      	mov	r1, r3
 80073aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d15a      	bne.n	8007466 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68da      	ldr	r2, [r3, #12]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 0220 	bic.w	r2, r2, #32
 80073be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695a      	ldr	r2, [r3, #20]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0201 	bic.w	r2, r2, #1
 80073de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d135      	bne.n	800745c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	330c      	adds	r3, #12
 80073fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	613b      	str	r3, [r7, #16]
   return(result);
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f023 0310 	bic.w	r3, r3, #16
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	330c      	adds	r3, #12
 8007414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007416:	623a      	str	r2, [r7, #32]
 8007418:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	69f9      	ldr	r1, [r7, #28]
 800741c:	6a3a      	ldr	r2, [r7, #32]
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	61bb      	str	r3, [r7, #24]
   return(result);
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1e5      	bne.n	80073f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0310 	and.w	r3, r3, #16
 8007434:	2b10      	cmp	r3, #16
 8007436:	d10a      	bne.n	800744e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007438:	2300      	movs	r3, #0
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff fdf9 	bl	800704c <HAL_UARTEx_RxEventCallback>
 800745a:	e002      	b.n	8007462 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7ff fde1 	bl	8007024 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	e002      	b.n	800746c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	e000      	b.n	800746c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800746a:	2302      	movs	r3, #2
  }
}
 800746c:	4618      	mov	r0, r3
 800746e:	3730      	adds	r7, #48	; 0x30
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007478:	b09f      	sub	sp, #124	; 0x7c
 800747a:	af00      	add	r7, sp, #0
 800747c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800747e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800748a:	68d9      	ldr	r1, [r3, #12]
 800748c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	ea40 0301 	orr.w	r3, r0, r1
 8007494:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007498:	689a      	ldr	r2, [r3, #8]
 800749a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	431a      	orrs	r2, r3
 80074a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	431a      	orrs	r2, r3
 80074a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80074ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80074b8:	f021 010c 	bic.w	r1, r1, #12
 80074bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074c2:	430b      	orrs	r3, r1
 80074c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80074d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d2:	6999      	ldr	r1, [r3, #24]
 80074d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	ea40 0301 	orr.w	r3, r0, r1
 80074dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	4bc5      	ldr	r3, [pc, #788]	; (80077f8 <UART_SetConfig+0x384>)
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d004      	beq.n	80074f2 <UART_SetConfig+0x7e>
 80074e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	4bc3      	ldr	r3, [pc, #780]	; (80077fc <UART_SetConfig+0x388>)
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d103      	bne.n	80074fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074f2:	f7ff f9c7 	bl	8006884 <HAL_RCC_GetPCLK2Freq>
 80074f6:	6778      	str	r0, [r7, #116]	; 0x74
 80074f8:	e002      	b.n	8007500 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074fa:	f7ff f9af 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 80074fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007508:	f040 80b6 	bne.w	8007678 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800750c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800750e:	461c      	mov	r4, r3
 8007510:	f04f 0500 	mov.w	r5, #0
 8007514:	4622      	mov	r2, r4
 8007516:	462b      	mov	r3, r5
 8007518:	1891      	adds	r1, r2, r2
 800751a:	6439      	str	r1, [r7, #64]	; 0x40
 800751c:	415b      	adcs	r3, r3
 800751e:	647b      	str	r3, [r7, #68]	; 0x44
 8007520:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007524:	1912      	adds	r2, r2, r4
 8007526:	eb45 0303 	adc.w	r3, r5, r3
 800752a:	f04f 0000 	mov.w	r0, #0
 800752e:	f04f 0100 	mov.w	r1, #0
 8007532:	00d9      	lsls	r1, r3, #3
 8007534:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007538:	00d0      	lsls	r0, r2, #3
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	1911      	adds	r1, r2, r4
 8007540:	6639      	str	r1, [r7, #96]	; 0x60
 8007542:	416b      	adcs	r3, r5
 8007544:	667b      	str	r3, [r7, #100]	; 0x64
 8007546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	461a      	mov	r2, r3
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	1891      	adds	r1, r2, r2
 8007552:	63b9      	str	r1, [r7, #56]	; 0x38
 8007554:	415b      	adcs	r3, r3
 8007556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800755c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007560:	f7f8 fe86 	bl	8000270 <__aeabi_uldivmod>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4ba5      	ldr	r3, [pc, #660]	; (8007800 <UART_SetConfig+0x38c>)
 800756a:	fba3 2302 	umull	r2, r3, r3, r2
 800756e:	095b      	lsrs	r3, r3, #5
 8007570:	011e      	lsls	r6, r3, #4
 8007572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007574:	461c      	mov	r4, r3
 8007576:	f04f 0500 	mov.w	r5, #0
 800757a:	4622      	mov	r2, r4
 800757c:	462b      	mov	r3, r5
 800757e:	1891      	adds	r1, r2, r2
 8007580:	6339      	str	r1, [r7, #48]	; 0x30
 8007582:	415b      	adcs	r3, r3
 8007584:	637b      	str	r3, [r7, #52]	; 0x34
 8007586:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800758a:	1912      	adds	r2, r2, r4
 800758c:	eb45 0303 	adc.w	r3, r5, r3
 8007590:	f04f 0000 	mov.w	r0, #0
 8007594:	f04f 0100 	mov.w	r1, #0
 8007598:	00d9      	lsls	r1, r3, #3
 800759a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800759e:	00d0      	lsls	r0, r2, #3
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	1911      	adds	r1, r2, r4
 80075a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80075a8:	416b      	adcs	r3, r5
 80075aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	461a      	mov	r2, r3
 80075b2:	f04f 0300 	mov.w	r3, #0
 80075b6:	1891      	adds	r1, r2, r2
 80075b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80075ba:	415b      	adcs	r3, r3
 80075bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80075c6:	f7f8 fe53 	bl	8000270 <__aeabi_uldivmod>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	4b8c      	ldr	r3, [pc, #560]	; (8007800 <UART_SetConfig+0x38c>)
 80075d0:	fba3 1302 	umull	r1, r3, r3, r2
 80075d4:	095b      	lsrs	r3, r3, #5
 80075d6:	2164      	movs	r1, #100	; 0x64
 80075d8:	fb01 f303 	mul.w	r3, r1, r3
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	3332      	adds	r3, #50	; 0x32
 80075e2:	4a87      	ldr	r2, [pc, #540]	; (8007800 <UART_SetConfig+0x38c>)
 80075e4:	fba2 2303 	umull	r2, r3, r2, r3
 80075e8:	095b      	lsrs	r3, r3, #5
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075f0:	441e      	add	r6, r3
 80075f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075f4:	4618      	mov	r0, r3
 80075f6:	f04f 0100 	mov.w	r1, #0
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	1894      	adds	r4, r2, r2
 8007600:	623c      	str	r4, [r7, #32]
 8007602:	415b      	adcs	r3, r3
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
 8007606:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800760a:	1812      	adds	r2, r2, r0
 800760c:	eb41 0303 	adc.w	r3, r1, r3
 8007610:	f04f 0400 	mov.w	r4, #0
 8007614:	f04f 0500 	mov.w	r5, #0
 8007618:	00dd      	lsls	r5, r3, #3
 800761a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800761e:	00d4      	lsls	r4, r2, #3
 8007620:	4622      	mov	r2, r4
 8007622:	462b      	mov	r3, r5
 8007624:	1814      	adds	r4, r2, r0
 8007626:	653c      	str	r4, [r7, #80]	; 0x50
 8007628:	414b      	adcs	r3, r1
 800762a:	657b      	str	r3, [r7, #84]	; 0x54
 800762c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	461a      	mov	r2, r3
 8007632:	f04f 0300 	mov.w	r3, #0
 8007636:	1891      	adds	r1, r2, r2
 8007638:	61b9      	str	r1, [r7, #24]
 800763a:	415b      	adcs	r3, r3
 800763c:	61fb      	str	r3, [r7, #28]
 800763e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007642:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007646:	f7f8 fe13 	bl	8000270 <__aeabi_uldivmod>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	4b6c      	ldr	r3, [pc, #432]	; (8007800 <UART_SetConfig+0x38c>)
 8007650:	fba3 1302 	umull	r1, r3, r3, r2
 8007654:	095b      	lsrs	r3, r3, #5
 8007656:	2164      	movs	r1, #100	; 0x64
 8007658:	fb01 f303 	mul.w	r3, r1, r3
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	3332      	adds	r3, #50	; 0x32
 8007662:	4a67      	ldr	r2, [pc, #412]	; (8007800 <UART_SetConfig+0x38c>)
 8007664:	fba2 2303 	umull	r2, r3, r2, r3
 8007668:	095b      	lsrs	r3, r3, #5
 800766a:	f003 0207 	and.w	r2, r3, #7
 800766e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4432      	add	r2, r6
 8007674:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007676:	e0b9      	b.n	80077ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800767a:	461c      	mov	r4, r3
 800767c:	f04f 0500 	mov.w	r5, #0
 8007680:	4622      	mov	r2, r4
 8007682:	462b      	mov	r3, r5
 8007684:	1891      	adds	r1, r2, r2
 8007686:	6139      	str	r1, [r7, #16]
 8007688:	415b      	adcs	r3, r3
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007690:	1912      	adds	r2, r2, r4
 8007692:	eb45 0303 	adc.w	r3, r5, r3
 8007696:	f04f 0000 	mov.w	r0, #0
 800769a:	f04f 0100 	mov.w	r1, #0
 800769e:	00d9      	lsls	r1, r3, #3
 80076a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80076a4:	00d0      	lsls	r0, r2, #3
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	eb12 0804 	adds.w	r8, r2, r4
 80076ae:	eb43 0905 	adc.w	r9, r3, r5
 80076b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f04f 0100 	mov.w	r1, #0
 80076bc:	f04f 0200 	mov.w	r2, #0
 80076c0:	f04f 0300 	mov.w	r3, #0
 80076c4:	008b      	lsls	r3, r1, #2
 80076c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80076ca:	0082      	lsls	r2, r0, #2
 80076cc:	4640      	mov	r0, r8
 80076ce:	4649      	mov	r1, r9
 80076d0:	f7f8 fdce 	bl	8000270 <__aeabi_uldivmod>
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	4b49      	ldr	r3, [pc, #292]	; (8007800 <UART_SetConfig+0x38c>)
 80076da:	fba3 2302 	umull	r2, r3, r3, r2
 80076de:	095b      	lsrs	r3, r3, #5
 80076e0:	011e      	lsls	r6, r3, #4
 80076e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076e4:	4618      	mov	r0, r3
 80076e6:	f04f 0100 	mov.w	r1, #0
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	1894      	adds	r4, r2, r2
 80076f0:	60bc      	str	r4, [r7, #8]
 80076f2:	415b      	adcs	r3, r3
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076fa:	1812      	adds	r2, r2, r0
 80076fc:	eb41 0303 	adc.w	r3, r1, r3
 8007700:	f04f 0400 	mov.w	r4, #0
 8007704:	f04f 0500 	mov.w	r5, #0
 8007708:	00dd      	lsls	r5, r3, #3
 800770a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800770e:	00d4      	lsls	r4, r2, #3
 8007710:	4622      	mov	r2, r4
 8007712:	462b      	mov	r3, r5
 8007714:	1814      	adds	r4, r2, r0
 8007716:	64bc      	str	r4, [r7, #72]	; 0x48
 8007718:	414b      	adcs	r3, r1
 800771a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800771c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	4618      	mov	r0, r3
 8007722:	f04f 0100 	mov.w	r1, #0
 8007726:	f04f 0200 	mov.w	r2, #0
 800772a:	f04f 0300 	mov.w	r3, #0
 800772e:	008b      	lsls	r3, r1, #2
 8007730:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007734:	0082      	lsls	r2, r0, #2
 8007736:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800773a:	f7f8 fd99 	bl	8000270 <__aeabi_uldivmod>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	4b2f      	ldr	r3, [pc, #188]	; (8007800 <UART_SetConfig+0x38c>)
 8007744:	fba3 1302 	umull	r1, r3, r3, r2
 8007748:	095b      	lsrs	r3, r3, #5
 800774a:	2164      	movs	r1, #100	; 0x64
 800774c:	fb01 f303 	mul.w	r3, r1, r3
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	011b      	lsls	r3, r3, #4
 8007754:	3332      	adds	r3, #50	; 0x32
 8007756:	4a2a      	ldr	r2, [pc, #168]	; (8007800 <UART_SetConfig+0x38c>)
 8007758:	fba2 2303 	umull	r2, r3, r2, r3
 800775c:	095b      	lsrs	r3, r3, #5
 800775e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007762:	441e      	add	r6, r3
 8007764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007766:	4618      	mov	r0, r3
 8007768:	f04f 0100 	mov.w	r1, #0
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	1894      	adds	r4, r2, r2
 8007772:	603c      	str	r4, [r7, #0]
 8007774:	415b      	adcs	r3, r3
 8007776:	607b      	str	r3, [r7, #4]
 8007778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800777c:	1812      	adds	r2, r2, r0
 800777e:	eb41 0303 	adc.w	r3, r1, r3
 8007782:	f04f 0400 	mov.w	r4, #0
 8007786:	f04f 0500 	mov.w	r5, #0
 800778a:	00dd      	lsls	r5, r3, #3
 800778c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007790:	00d4      	lsls	r4, r2, #3
 8007792:	4622      	mov	r2, r4
 8007794:	462b      	mov	r3, r5
 8007796:	eb12 0a00 	adds.w	sl, r2, r0
 800779a:	eb43 0b01 	adc.w	fp, r3, r1
 800779e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f04f 0100 	mov.w	r1, #0
 80077a8:	f04f 0200 	mov.w	r2, #0
 80077ac:	f04f 0300 	mov.w	r3, #0
 80077b0:	008b      	lsls	r3, r1, #2
 80077b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077b6:	0082      	lsls	r2, r0, #2
 80077b8:	4650      	mov	r0, sl
 80077ba:	4659      	mov	r1, fp
 80077bc:	f7f8 fd58 	bl	8000270 <__aeabi_uldivmod>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4b0e      	ldr	r3, [pc, #56]	; (8007800 <UART_SetConfig+0x38c>)
 80077c6:	fba3 1302 	umull	r1, r3, r3, r2
 80077ca:	095b      	lsrs	r3, r3, #5
 80077cc:	2164      	movs	r1, #100	; 0x64
 80077ce:	fb01 f303 	mul.w	r3, r1, r3
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	3332      	adds	r3, #50	; 0x32
 80077d8:	4a09      	ldr	r2, [pc, #36]	; (8007800 <UART_SetConfig+0x38c>)
 80077da:	fba2 2303 	umull	r2, r3, r2, r3
 80077de:	095b      	lsrs	r3, r3, #5
 80077e0:	f003 020f 	and.w	r2, r3, #15
 80077e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4432      	add	r2, r6
 80077ea:	609a      	str	r2, [r3, #8]
}
 80077ec:	bf00      	nop
 80077ee:	377c      	adds	r7, #124	; 0x7c
 80077f0:	46bd      	mov	sp, r7
 80077f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f6:	bf00      	nop
 80077f8:	40011000 	.word	0x40011000
 80077fc:	40011400 	.word	0x40011400
 8007800:	51eb851f 	.word	0x51eb851f

08007804 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4b20      	ldr	r3, [pc, #128]	; (80078a4 <FSMC_NORSRAM_Init+0xa0>)
 8007822:	4013      	ands	r3, r2
 8007824:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800782e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007834:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800783a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007840:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007846:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800784c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007852:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007858:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800785e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007864:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800786a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007870:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	4313      	orrs	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	2b08      	cmp	r3, #8
 800787e:	d103      	bne.n	8007888 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007886:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68f9      	ldr	r1, [r7, #12]
 8007890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	fff00080 	.word	0xfff00080

080078a8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80078ca:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80078d6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80078de:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80078e6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80078f0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	3b02      	subs	r3, #2
 80078f8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80078fa:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007900:	4313      	orrs	r3, r2
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	4313      	orrs	r3, r2
 8007906:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6979      	ldr	r1, [r7, #20]
 8007910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	371c      	adds	r7, #28
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
	...

08007924 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
 8007930:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007932:	2300      	movs	r3, #0
 8007934:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800793c:	d122      	bne.n	8007984 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007946:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	4b15      	ldr	r3, [pc, #84]	; (80079a0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800794c:	4013      	ands	r3, r2
 800794e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800795a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007962:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800796a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007970:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	4313      	orrs	r3, r2
 8007976:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	6979      	ldr	r1, [r7, #20]
 800797e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007982:	e005      	b.n	8007990 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800798c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	371c      	adds	r7, #28
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	cff00000 	.word	0xcff00000

080079a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079a4:	b084      	sub	sp, #16
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	f107 001c 	add.w	r0, r7, #28
 80079b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d122      	bne.n	8007a02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80079d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80079e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d105      	bne.n	80079f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f9a0 	bl	8007d3c <USB_CoreReset>
 80079fc:	4603      	mov	r3, r0
 80079fe:	73fb      	strb	r3, [r7, #15]
 8007a00:	e01a      	b.n	8007a38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f994 	bl	8007d3c <USB_CoreReset>
 8007a14:	4603      	mov	r3, r0
 8007a16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d106      	bne.n	8007a2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	639a      	str	r2, [r3, #56]	; 0x38
 8007a2a:	e005      	b.n	8007a38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d10b      	bne.n	8007a56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f043 0206 	orr.w	r2, r3, #6
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f043 0220 	orr.w	r2, r3, #32
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a62:	b004      	add	sp, #16
 8007a64:	4770      	bx	lr

08007a66 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f043 0201 	orr.w	r2, r3, #1
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f023 0201 	bic.w	r2, r3, #1
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ac6:	78fb      	ldrb	r3, [r7, #3]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d115      	bne.n	8007af8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ad8:	2001      	movs	r0, #1
 8007ada:	f7fa f8c5 	bl	8001c68 <HAL_Delay>
      ms++;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f91a 	bl	8007d1e <USB_GetMode>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d01e      	beq.n	8007b2e <USB_SetCurrentMode+0x84>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b31      	cmp	r3, #49	; 0x31
 8007af4:	d9f0      	bls.n	8007ad8 <USB_SetCurrentMode+0x2e>
 8007af6:	e01a      	b.n	8007b2e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007af8:	78fb      	ldrb	r3, [r7, #3]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d115      	bne.n	8007b2a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	f7fa f8ac 	bl	8001c68 <HAL_Delay>
      ms++;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	3301      	adds	r3, #1
 8007b14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f901 	bl	8007d1e <USB_GetMode>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d005      	beq.n	8007b2e <USB_SetCurrentMode+0x84>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b31      	cmp	r3, #49	; 0x31
 8007b26:	d9f0      	bls.n	8007b0a <USB_SetCurrentMode+0x60>
 8007b28:	e001      	b.n	8007b2e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e005      	b.n	8007b3a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2b32      	cmp	r3, #50	; 0x32
 8007b32:	d101      	bne.n	8007b38 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e000      	b.n	8007b3a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
	...

08007b44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	019b      	lsls	r3, r3, #6
 8007b56:	f043 0220 	orr.w	r2, r3, #32
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3301      	adds	r3, #1
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	4a08      	ldr	r2, [pc, #32]	; (8007b88 <USB_FlushTxFifo+0x44>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d901      	bls.n	8007b6e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e006      	b.n	8007b7c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	f003 0320 	and.w	r3, r3, #32
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	d0f1      	beq.n	8007b5e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	00030d40 	.word	0x00030d40

08007b8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2210      	movs	r2, #16
 8007b9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	4a08      	ldr	r2, [pc, #32]	; (8007bc8 <USB_FlushRxFifo+0x3c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d901      	bls.n	8007bae <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e006      	b.n	8007bbc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	f003 0310 	and.w	r3, r3, #16
 8007bb6:	2b10      	cmp	r3, #16
 8007bb8:	d0f1      	beq.n	8007b9e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	00030d40 	.word	0x00030d40

08007bcc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b089      	sub	sp, #36	; 0x24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	461a      	mov	r2, r3
 8007bda:	460b      	mov	r3, r1
 8007bdc:	71fb      	strb	r3, [r7, #7]
 8007bde:	4613      	mov	r3, r2
 8007be0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007bea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d123      	bne.n	8007c3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007bf2:	88bb      	ldrh	r3, [r7, #4]
 8007bf4:	3303      	adds	r3, #3
 8007bf6:	089b      	lsrs	r3, r3, #2
 8007bf8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	e018      	b.n	8007c32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	031a      	lsls	r2, r3, #12
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	3301      	adds	r3, #1
 8007c18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	3301      	adds	r3, #1
 8007c24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	61bb      	str	r3, [r7, #24]
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d3e2      	bcc.n	8007c00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3724      	adds	r7, #36	; 0x24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b08b      	sub	sp, #44	; 0x2c
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	4613      	mov	r3, r2
 8007c54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007c5e:	88fb      	ldrh	r3, [r7, #6]
 8007c60:	089b      	lsrs	r3, r3, #2
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007c66:	88fb      	ldrh	r3, [r7, #6]
 8007c68:	f003 0303 	and.w	r3, r3, #3
 8007c6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007c6e:	2300      	movs	r3, #0
 8007c70:	623b      	str	r3, [r7, #32]
 8007c72:	e014      	b.n	8007c9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	3301      	adds	r3, #1
 8007c84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	3301      	adds	r3, #1
 8007c8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	3301      	adds	r3, #1
 8007c90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c94:	3301      	adds	r3, #1
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	623b      	str	r3, [r7, #32]
 8007c9e:	6a3a      	ldr	r2, [r7, #32]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d3e6      	bcc.n	8007c74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007ca6:	8bfb      	ldrh	r3, [r7, #30]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d01e      	beq.n	8007cea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f107 0310 	add.w	r3, r7, #16
 8007cbc:	6812      	ldr	r2, [r2, #0]
 8007cbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	6a3b      	ldr	r3, [r7, #32]
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	701a      	strb	r2, [r3, #0]
      i++;
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	623b      	str	r3, [r7, #32]
      pDest++;
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	3301      	adds	r3, #1
 8007cdc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007cde:	8bfb      	ldrh	r3, [r7, #30]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ce4:	8bfb      	ldrh	r3, [r7, #30]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1ea      	bne.n	8007cc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	372c      	adds	r7, #44	; 0x2c
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d10:	68fb      	ldr	r3, [r7, #12]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
	...

08007d3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	60fb      	str	r3, [r7, #12]
 8007d4e:	4a13      	ldr	r2, [pc, #76]	; (8007d9c <USB_CoreReset+0x60>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d901      	bls.n	8007d58 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e01a      	b.n	8007d8e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	daf3      	bge.n	8007d48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	f043 0201 	orr.w	r2, r3, #1
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3301      	adds	r3, #1
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	4a09      	ldr	r2, [pc, #36]	; (8007d9c <USB_CoreReset+0x60>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d901      	bls.n	8007d80 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e006      	b.n	8007d8e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d0f1      	beq.n	8007d70 <USB_CoreReset+0x34>

  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	00030d40 	.word	0x00030d40

08007da0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007da0:	b084      	sub	sp, #16
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	f107 001c 	add.w	r0, r7, #28
 8007dae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dde:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d018      	beq.n	8007e24 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d10a      	bne.n	8007e0e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e06:	f043 0304 	orr.w	r3, r3, #4
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	e014      	b.n	8007e38 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e1c:	f023 0304 	bic.w	r3, r3, #4
 8007e20:	6013      	str	r3, [r2, #0]
 8007e22:	e009      	b.n	8007e38 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e32:	f023 0304 	bic.w	r3, r3, #4
 8007e36:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007e38:	2110      	movs	r1, #16
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7ff fe82 	bl	8007b44 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7ff fea3 	bl	8007b8c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	e015      	b.n	8007e78 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e58:	461a      	mov	r2, r3
 8007e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	015a      	lsls	r2, r3, #5
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3301      	adds	r3, #1
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d3e5      	bcc.n	8007e4c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00b      	beq.n	8007eb2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ea0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a13      	ldr	r2, [pc, #76]	; (8007ef4 <USB_HostInit+0x154>)
 8007ea6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a13      	ldr	r2, [pc, #76]	; (8007ef8 <USB_HostInit+0x158>)
 8007eac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007eb0:	e009      	b.n	8007ec6 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2280      	movs	r2, #128	; 0x80
 8007eb6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a10      	ldr	r2, [pc, #64]	; (8007efc <USB_HostInit+0x15c>)
 8007ebc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a0f      	ldr	r2, [pc, #60]	; (8007f00 <USB_HostInit+0x160>)
 8007ec2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d105      	bne.n	8007ed8 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	f043 0210 	orr.w	r2, r3, #16
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	699a      	ldr	r2, [r3, #24]
 8007edc:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <USB_HostInit+0x164>)
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ef0:	b004      	add	sp, #16
 8007ef2:	4770      	bx	lr
 8007ef4:	01000200 	.word	0x01000200
 8007ef8:	00e00300 	.word	0x00e00300
 8007efc:	00600080 	.word	0x00600080
 8007f00:	004000e0 	.word	0x004000e0
 8007f04:	a3200008 	.word	0xa3200008

08007f08 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f26:	f023 0303 	bic.w	r3, r3, #3
 8007f2a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	f003 0303 	and.w	r3, r3, #3
 8007f3a:	68f9      	ldr	r1, [r7, #12]
 8007f3c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007f40:	4313      	orrs	r3, r2
 8007f42:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007f44:	78fb      	ldrb	r3, [r7, #3]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d107      	bne.n	8007f5a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f50:	461a      	mov	r2, r3
 8007f52:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007f56:	6053      	str	r3, [r2, #4]
 8007f58:	e009      	b.n	8007f6e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007f5a:	78fb      	ldrb	r3, [r7, #3]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d106      	bne.n	8007f6e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f66:	461a      	mov	r2, r3
 8007f68:	f241 7370 	movw	r3, #6000	; 0x1770
 8007f6c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007f9c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007faa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007fac:	2064      	movs	r0, #100	; 0x64
 8007fae:	f7f9 fe5b 	bl	8001c68 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007fba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fbe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007fc0:	200a      	movs	r0, #10
 8007fc2:	f7f9 fe51 	bl	8001c68 <HAL_Delay>

  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007ff4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d109      	bne.n	8008014 <USB_DriveVbus+0x44>
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d106      	bne.n	8008014 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800800e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008012:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800801a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800801e:	d109      	bne.n	8008034 <USB_DriveVbus+0x64>
 8008020:	78fb      	ldrb	r3, [r7, #3]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d106      	bne.n	8008034 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800802e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008032:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008042:	b480      	push	{r7}
 8008044:	b085      	sub	sp, #20
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800804e:	2300      	movs	r3, #0
 8008050:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	0c5b      	lsrs	r3, r3, #17
 8008060:	f003 0303 	and.w	r3, r3, #3
}
 8008064:	4618      	mov	r0, r3
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	b29b      	uxth	r3, r3
}
 8008086:	4618      	mov	r0, r3
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
	...

08008094 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b088      	sub	sp, #32
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	4608      	mov	r0, r1
 800809e:	4611      	mov	r1, r2
 80080a0:	461a      	mov	r2, r3
 80080a2:	4603      	mov	r3, r0
 80080a4:	70fb      	strb	r3, [r7, #3]
 80080a6:	460b      	mov	r3, r1
 80080a8:	70bb      	strb	r3, [r7, #2]
 80080aa:	4613      	mov	r3, r2
 80080ac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80080b6:	78fb      	ldrb	r3, [r7, #3]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080c2:	461a      	mov	r2, r3
 80080c4:	f04f 33ff 	mov.w	r3, #4294967295
 80080c8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80080ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d87e      	bhi.n	80081d0 <USB_HC_Init+0x13c>
 80080d2:	a201      	add	r2, pc, #4	; (adr r2, 80080d8 <USB_HC_Init+0x44>)
 80080d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d8:	080080e9 	.word	0x080080e9
 80080dc:	08008193 	.word	0x08008193
 80080e0:	080080e9 	.word	0x080080e9
 80080e4:	08008155 	.word	0x08008155
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080e8:	78fb      	ldrb	r3, [r7, #3]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f4:	461a      	mov	r2, r3
 80080f6:	f240 439d 	movw	r3, #1181	; 0x49d
 80080fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80080fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008100:	2b00      	cmp	r3, #0
 8008102:	da10      	bge.n	8008126 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008104:	78fb      	ldrb	r3, [r7, #3]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	4413      	add	r3, r2
 800810c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	78fa      	ldrb	r2, [r7, #3]
 8008114:	0151      	lsls	r1, r2, #5
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	440a      	add	r2, r1
 800811a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800811e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008122:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008124:	e057      	b.n	80081d6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800812a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812e:	2b00      	cmp	r3, #0
 8008130:	d051      	beq.n	80081d6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008132:	78fb      	ldrb	r3, [r7, #3]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	4413      	add	r3, r2
 800813a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	78fa      	ldrb	r2, [r7, #3]
 8008142:	0151      	lsls	r1, r2, #5
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	440a      	add	r2, r1
 8008148:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800814c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008150:	60d3      	str	r3, [r2, #12]
      break;
 8008152:	e040      	b.n	80081d6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008154:	78fb      	ldrb	r3, [r7, #3]
 8008156:	015a      	lsls	r2, r3, #5
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	4413      	add	r3, r2
 800815c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008160:	461a      	mov	r2, r3
 8008162:	f240 639d 	movw	r3, #1693	; 0x69d
 8008166:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008168:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800816c:	2b00      	cmp	r3, #0
 800816e:	da34      	bge.n	80081da <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	4413      	add	r3, r2
 8008178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	78fa      	ldrb	r2, [r7, #3]
 8008180:	0151      	lsls	r1, r2, #5
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	440a      	add	r2, r1
 8008186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800818a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800818e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008190:	e023      	b.n	80081da <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008192:	78fb      	ldrb	r3, [r7, #3]
 8008194:	015a      	lsls	r2, r3, #5
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	4413      	add	r3, r2
 800819a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800819e:	461a      	mov	r2, r3
 80081a0:	f240 2325 	movw	r3, #549	; 0x225
 80081a4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80081a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	da17      	bge.n	80081de <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80081ae:	78fb      	ldrb	r3, [r7, #3]
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	78fa      	ldrb	r2, [r7, #3]
 80081be:	0151      	lsls	r1, r2, #5
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	440a      	add	r2, r1
 80081c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081c8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80081cc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80081ce:	e006      	b.n	80081de <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	77fb      	strb	r3, [r7, #31]
      break;
 80081d4:	e004      	b.n	80081e0 <USB_HC_Init+0x14c>
      break;
 80081d6:	bf00      	nop
 80081d8:	e002      	b.n	80081e0 <USB_HC_Init+0x14c>
      break;
 80081da:	bf00      	nop
 80081dc:	e000      	b.n	80081e0 <USB_HC_Init+0x14c>
      break;
 80081de:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081e6:	699a      	ldr	r2, [r3, #24]
 80081e8:	78fb      	ldrb	r3, [r7, #3]
 80081ea:	f003 030f 	and.w	r3, r3, #15
 80081ee:	2101      	movs	r1, #1
 80081f0:	fa01 f303 	lsl.w	r3, r1, r3
 80081f4:	6939      	ldr	r1, [r7, #16]
 80081f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80081fa:	4313      	orrs	r3, r2
 80081fc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800820a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800820e:	2b00      	cmp	r3, #0
 8008210:	da03      	bge.n	800821a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008216:	61bb      	str	r3, [r7, #24]
 8008218:	e001      	b.n	800821e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7ff ff0f 	bl	8008042 <USB_GetHostSpeed>
 8008224:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008226:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800822a:	2b02      	cmp	r3, #2
 800822c:	d106      	bne.n	800823c <USB_HC_Init+0x1a8>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2b02      	cmp	r3, #2
 8008232:	d003      	beq.n	800823c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008238:	617b      	str	r3, [r7, #20]
 800823a:	e001      	b.n	8008240 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800823c:	2300      	movs	r3, #0
 800823e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008240:	787b      	ldrb	r3, [r7, #1]
 8008242:	059b      	lsls	r3, r3, #22
 8008244:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008248:	78bb      	ldrb	r3, [r7, #2]
 800824a:	02db      	lsls	r3, r3, #11
 800824c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008250:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008252:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008256:	049b      	lsls	r3, r3, #18
 8008258:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800825c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800825e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008260:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008264:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	0159      	lsls	r1, r3, #5
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	440b      	add	r3, r1
 8008272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008276:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800827c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800827e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008282:	2b03      	cmp	r3, #3
 8008284:	d10f      	bne.n	80082a6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008286:	78fb      	ldrb	r3, [r7, #3]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	4413      	add	r3, r2
 800828e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	78fa      	ldrb	r2, [r7, #3]
 8008296:	0151      	lsls	r1, r2, #5
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	440a      	add	r2, r1
 800829c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082a4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80082a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3720      	adds	r7, #32
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b08c      	sub	sp, #48	; 0x30
 80082b4:	af02      	add	r7, sp, #8
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	4613      	mov	r3, r2
 80082bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80082c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082cc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d02d      	beq.n	8008336 <USB_HC_StartXfer+0x86>
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	791b      	ldrb	r3, [r3, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d129      	bne.n	8008336 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80082e2:	79fb      	ldrb	r3, [r7, #7]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d117      	bne.n	8008318 <USB_HC_StartXfer+0x68>
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	79db      	ldrb	r3, [r3, #7]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d003      	beq.n	80082f8 <USB_HC_StartXfer+0x48>
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	79db      	ldrb	r3, [r3, #7]
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d10f      	bne.n	8008318 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	69fa      	ldr	r2, [r7, #28]
 8008308:	0151      	lsls	r1, r2, #5
 800830a:	6a3a      	ldr	r2, [r7, #32]
 800830c:	440a      	add	r2, r1
 800830e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008316:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008318:	79fb      	ldrb	r3, [r7, #7]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10b      	bne.n	8008336 <USB_HC_StartXfer+0x86>
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	795b      	ldrb	r3, [r3, #5]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d107      	bne.n	8008336 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	785b      	ldrb	r3, [r3, #1]
 800832a:	4619      	mov	r1, r3
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 fa2f 	bl	8008790 <USB_DoPing>
      return HAL_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	e0f8      	b.n	8008528 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d018      	beq.n	8008370 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	8912      	ldrh	r2, [r2, #8]
 8008346:	4413      	add	r3, r2
 8008348:	3b01      	subs	r3, #1
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	8912      	ldrh	r2, [r2, #8]
 800834e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008352:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008354:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008356:	8b7b      	ldrh	r3, [r7, #26]
 8008358:	429a      	cmp	r2, r3
 800835a:	d90b      	bls.n	8008374 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800835c:	8b7b      	ldrh	r3, [r7, #26]
 800835e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008360:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	8912      	ldrh	r2, [r2, #8]
 8008366:	fb02 f203 	mul.w	r2, r2, r3
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	611a      	str	r2, [r3, #16]
 800836e:	e001      	b.n	8008374 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008370:	2301      	movs	r3, #1
 8008372:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	78db      	ldrb	r3, [r3, #3]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d007      	beq.n	800838c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800837c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	8912      	ldrh	r2, [r2, #8]
 8008382:	fb02 f203 	mul.w	r2, r2, r3
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	611a      	str	r2, [r3, #16]
 800838a:	e003      	b.n	8008394 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	695a      	ldr	r2, [r3, #20]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800839c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800839e:	04d9      	lsls	r1, r3, #19
 80083a0:	4b63      	ldr	r3, [pc, #396]	; (8008530 <USB_HC_StartXfer+0x280>)
 80083a2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80083a4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	7a9b      	ldrb	r3, [r3, #10]
 80083aa:	075b      	lsls	r3, r3, #29
 80083ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80083b0:	69f9      	ldr	r1, [r7, #28]
 80083b2:	0148      	lsls	r0, r1, #5
 80083b4:	6a39      	ldr	r1, [r7, #32]
 80083b6:	4401      	add	r1, r0
 80083b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80083bc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80083be:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d009      	beq.n	80083da <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	68d9      	ldr	r1, [r3, #12]
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	015a      	lsls	r2, r3, #5
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	4413      	add	r3, r2
 80083d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083d6:	460a      	mov	r2, r1
 80083d8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	bf0c      	ite	eq
 80083ea:	2301      	moveq	r3, #1
 80083ec:	2300      	movne	r3, #0
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	015a      	lsls	r2, r3, #5
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	69fa      	ldr	r2, [r7, #28]
 8008402:	0151      	lsls	r1, r2, #5
 8008404:	6a3a      	ldr	r2, [r7, #32]
 8008406:	440a      	add	r2, r1
 8008408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800840c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008410:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	4413      	add	r3, r2
 800841a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	7e7b      	ldrb	r3, [r7, #25]
 8008422:	075b      	lsls	r3, r3, #29
 8008424:	69f9      	ldr	r1, [r7, #28]
 8008426:	0148      	lsls	r0, r1, #5
 8008428:	6a39      	ldr	r1, [r7, #32]
 800842a:	4401      	add	r1, r0
 800842c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008430:	4313      	orrs	r3, r2
 8008432:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	4413      	add	r3, r2
 800843c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800844a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	78db      	ldrb	r3, [r3, #3]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d004      	beq.n	800845e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800845a:	613b      	str	r3, [r7, #16]
 800845c:	e003      	b.n	8008466 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008464:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800846c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	4413      	add	r3, r2
 8008476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800847a:	461a      	mov	r2, r3
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008480:	79fb      	ldrb	r3, [r7, #7]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	e04e      	b.n	8008528 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	78db      	ldrb	r3, [r3, #3]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d149      	bne.n	8008526 <USB_HC_StartXfer+0x276>
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d045      	beq.n	8008526 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	79db      	ldrb	r3, [r3, #7]
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d830      	bhi.n	8008504 <USB_HC_StartXfer+0x254>
 80084a2:	a201      	add	r2, pc, #4	; (adr r2, 80084a8 <USB_HC_StartXfer+0x1f8>)
 80084a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a8:	080084b9 	.word	0x080084b9
 80084ac:	080084dd 	.word	0x080084dd
 80084b0:	080084b9 	.word	0x080084b9
 80084b4:	080084dd 	.word	0x080084dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	3303      	adds	r3, #3
 80084be:	089b      	lsrs	r3, r3, #2
 80084c0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80084c2:	8afa      	ldrh	r2, [r7, #22]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d91c      	bls.n	8008508 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	f043 0220 	orr.w	r2, r3, #32
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80084da:	e015      	b.n	8008508 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	3303      	adds	r3, #3
 80084e2:	089b      	lsrs	r3, r3, #2
 80084e4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80084e6:	8afa      	ldrh	r2, [r7, #22]
 80084e8:	6a3b      	ldr	r3, [r7, #32]
 80084ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d90a      	bls.n	800850c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	619a      	str	r2, [r3, #24]
        }
        break;
 8008502:	e003      	b.n	800850c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008504:	bf00      	nop
 8008506:	e002      	b.n	800850e <USB_HC_StartXfer+0x25e>
        break;
 8008508:	bf00      	nop
 800850a:	e000      	b.n	800850e <USB_HC_StartXfer+0x25e>
        break;
 800850c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	68d9      	ldr	r1, [r3, #12]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	785a      	ldrb	r2, [r3, #1]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	b29b      	uxth	r3, r3
 800851c:	2000      	movs	r0, #0
 800851e:	9000      	str	r0, [sp, #0]
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f7ff fb53 	bl	8007bcc <USB_WritePacket>
  }

  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3728      	adds	r7, #40	; 0x28
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	1ff80000 	.word	0x1ff80000

08008534 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	b29b      	uxth	r3, r3
}
 800854a:	4618      	mov	r0, r3
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008556:	b480      	push	{r7}
 8008558:	b089      	sub	sp, #36	; 0x24
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	460b      	mov	r3, r1
 8008560:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008566:	78fb      	ldrb	r3, [r7, #3]
 8008568:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800856a:	2300      	movs	r3, #0
 800856c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	4413      	add	r3, r2
 8008576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	0c9b      	lsrs	r3, r3, #18
 800857e:	f003 0303 	and.w	r3, r3, #3
 8008582:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	4413      	add	r3, r2
 800858c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	0fdb      	lsrs	r3, r3, #31
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f003 0320 	and.w	r3, r3, #32
 80085a2:	2b20      	cmp	r3, #32
 80085a4:	d104      	bne.n	80085b0 <USB_HC_Halt+0x5a>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	e0e8      	b.n	8008782 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <USB_HC_Halt+0x66>
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d173      	bne.n	80086a4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	0151      	lsls	r1, r2, #5
 80085ce:	69ba      	ldr	r2, [r7, #24]
 80085d0:	440a      	add	r2, r1
 80085d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085da:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	f003 0320 	and.w	r3, r3, #32
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f040 80cb 	bne.w	8008780 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d143      	bne.n	800867e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	0151      	lsls	r1, r2, #5
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	440a      	add	r2, r1
 800860c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008610:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008614:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	4413      	add	r3, r2
 800861e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	0151      	lsls	r1, r2, #5
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	440a      	add	r2, r1
 800862c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008634:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	4413      	add	r3, r2
 800863e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	0151      	lsls	r1, r2, #5
 8008648:	69ba      	ldr	r2, [r7, #24]
 800864a:	440a      	add	r2, r1
 800864c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008650:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008654:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	3301      	adds	r3, #1
 800865a:	61fb      	str	r3, [r7, #28]
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008662:	d81d      	bhi.n	80086a0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	4413      	add	r3, r2
 800866c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800867a:	d0ec      	beq.n	8008656 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800867c:	e080      	b.n	8008780 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	015a      	lsls	r2, r3, #5
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	4413      	add	r3, r2
 8008686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	0151      	lsls	r1, r2, #5
 8008690:	69ba      	ldr	r2, [r7, #24]
 8008692:	440a      	add	r2, r1
 8008694:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008698:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800869c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800869e:	e06f      	b.n	8008780 <USB_HC_Halt+0x22a>
            break;
 80086a0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80086a2:	e06d      	b.n	8008780 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	4413      	add	r3, r2
 80086ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	0151      	lsls	r1, r2, #5
 80086b6:	69ba      	ldr	r2, [r7, #24]
 80086b8:	440a      	add	r2, r1
 80086ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086c2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d143      	bne.n	800875c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	0151      	lsls	r1, r2, #5
 80086e6:	69ba      	ldr	r2, [r7, #24]
 80086e8:	440a      	add	r2, r1
 80086ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	0151      	lsls	r1, r2, #5
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	440a      	add	r2, r1
 800870a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800870e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008712:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	4413      	add	r3, r2
 800871c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	0151      	lsls	r1, r2, #5
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	440a      	add	r2, r1
 800872a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800872e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008732:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	3301      	adds	r3, #1
 8008738:	61fb      	str	r3, [r7, #28]
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008740:	d81d      	bhi.n	800877e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	4413      	add	r3, r2
 800874a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008758:	d0ec      	beq.n	8008734 <USB_HC_Halt+0x1de>
 800875a:	e011      	b.n	8008780 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	4413      	add	r3, r2
 8008764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	0151      	lsls	r1, r2, #5
 800876e:	69ba      	ldr	r2, [r7, #24]
 8008770:	440a      	add	r2, r1
 8008772:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008776:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	e000      	b.n	8008780 <USB_HC_Halt+0x22a>
          break;
 800877e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3724      	adds	r7, #36	; 0x24
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
	...

08008790 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80087a0:	78fb      	ldrb	r3, [r7, #3]
 80087a2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80087a4:	2301      	movs	r3, #1
 80087a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	04da      	lsls	r2, r3, #19
 80087ac:	4b15      	ldr	r3, [pc, #84]	; (8008804 <USB_DoPing+0x74>)
 80087ae:	4013      	ands	r3, r2
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	0151      	lsls	r1, r2, #5
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	440a      	add	r2, r1
 80087b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087c0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	015a      	lsls	r2, r3, #5
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80087d8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087e0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ee:	461a      	mov	r2, r3
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	371c      	adds	r7, #28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	1ff80000 	.word	0x1ff80000

08008808 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008814:	2300      	movs	r3, #0
 8008816:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7ff f935 	bl	8007a88 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800881e:	2110      	movs	r1, #16
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff f98f 	bl	8007b44 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff f9b0 	bl	8007b8c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800882c:	2300      	movs	r3, #0
 800882e:	613b      	str	r3, [r7, #16]
 8008830:	e01f      	b.n	8008872 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	015a      	lsls	r2, r3, #5
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	4413      	add	r3, r2
 800883a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008848:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008850:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008858:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	4413      	add	r3, r2
 8008862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008866:	461a      	mov	r2, r3
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	3301      	adds	r3, #1
 8008870:	613b      	str	r3, [r7, #16]
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b0f      	cmp	r3, #15
 8008876:	d9dc      	bls.n	8008832 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008878:	2300      	movs	r3, #0
 800887a:	613b      	str	r3, [r7, #16]
 800887c:	e034      	b.n	80088e8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	4413      	add	r3, r2
 8008886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008894:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800889c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088a4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	015a      	lsls	r2, r3, #5
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	4413      	add	r3, r2
 80088ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088b2:	461a      	mov	r2, r3
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	3301      	adds	r3, #1
 80088bc:	617b      	str	r3, [r7, #20]
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088c4:	d80c      	bhi.n	80088e0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088dc:	d0ec      	beq.n	80088b8 <USB_StopHost+0xb0>
 80088de:	e000      	b.n	80088e2 <USB_StopHost+0xda>
        break;
 80088e0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	3301      	adds	r3, #1
 80088e6:	613b      	str	r3, [r7, #16]
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	2b0f      	cmp	r3, #15
 80088ec:	d9c7      	bls.n	800887e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088f4:	461a      	mov	r2, r3
 80088f6:	f04f 33ff 	mov.w	r3, #4294967295
 80088fa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008902:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7ff f8ae 	bl	8007a66 <USB_EnableGlobalInt>

  return HAL_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008918:	4904      	ldr	r1, [pc, #16]	; (800892c <MX_FATFS_Init+0x18>)
 800891a:	4805      	ldr	r0, [pc, #20]	; (8008930 <MX_FATFS_Init+0x1c>)
 800891c:	f005 fe9a 	bl	800e654 <FATFS_LinkDriver>
 8008920:	4603      	mov	r3, r0
 8008922:	461a      	mov	r2, r3
 8008924:	4b03      	ldr	r3, [pc, #12]	; (8008934 <MX_FATFS_Init+0x20>)
 8008926:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008928:	bf00      	nop
 800892a:	bd80      	pop	{r7, pc}
 800892c:	20002318 	.word	0x20002318
 8008930:	08010a94 	.word	0x08010a94
 8008934:	20004380 	.word	0x20004380

08008938 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008938:	b480      	push	{r7}
 800893a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800893c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800893e:	4618      	mov	r0, r3
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	4603      	mov	r3, r0
 8008950:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	4619      	mov	r1, r3
 8008972:	4808      	ldr	r0, [pc, #32]	; (8008994 <USBH_status+0x34>)
 8008974:	f000 ff98 	bl	80098a8 <USBH_MSC_UnitIsReady>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d002      	beq.n	8008984 <USBH_status+0x24>
  {
    res = RES_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	73fb      	strb	r3, [r7, #15]
 8008982:	e001      	b.n	8008988 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	20004384 	.word	0x20004384

08008998 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b094      	sub	sp, #80	; 0x50
 800899c:	af02      	add	r7, sp, #8
 800899e:	60b9      	str	r1, [r7, #8]
 80089a0:	607a      	str	r2, [r7, #4]
 80089a2:	603b      	str	r3, [r7, #0]
 80089a4:	4603      	mov	r3, r0
 80089a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80089ae:	7bf9      	ldrb	r1, [r7, #15]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	4818      	ldr	r0, [pc, #96]	; (8008a1c <USBH_read+0x84>)
 80089ba:	f000 ffbf 	bl	800993c <USBH_MSC_Read>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d103      	bne.n	80089cc <USBH_read+0x34>
  {
    res = RES_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80089ca:	e020      	b.n	8008a0e <USBH_read+0x76>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80089cc:	f107 0210 	add.w	r2, r7, #16
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	4619      	mov	r1, r3
 80089d4:	4811      	ldr	r0, [pc, #68]	; (8008a1c <USBH_read+0x84>)
 80089d6:	f000 ff8d 	bl	80098f4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80089da:	7f7b      	ldrb	r3, [r7, #29]
 80089dc:	2b3a      	cmp	r3, #58	; 0x3a
 80089de:	d005      	beq.n	80089ec <USBH_read+0x54>
 80089e0:	2b3a      	cmp	r3, #58	; 0x3a
 80089e2:	dc10      	bgt.n	8008a06 <USBH_read+0x6e>
 80089e4:	2b04      	cmp	r3, #4
 80089e6:	d001      	beq.n	80089ec <USBH_read+0x54>
 80089e8:	2b28      	cmp	r3, #40	; 0x28
 80089ea:	d10c      	bne.n	8008a06 <USBH_read+0x6e>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 80089ec:	480c      	ldr	r0, [pc, #48]	; (8008a20 <USBH_read+0x88>)
 80089ee:	f006 facb 	bl	800ef88 <iprintf>
 80089f2:	480c      	ldr	r0, [pc, #48]	; (8008a24 <USBH_read+0x8c>)
 80089f4:	f006 fac8 	bl	800ef88 <iprintf>
 80089f8:	200a      	movs	r0, #10
 80089fa:	f006 fadd 	bl	800efb8 <putchar>
      res = RES_NOTRDY;
 80089fe:	2303      	movs	r3, #3
 8008a00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008a04:	e003      	b.n	8008a0e <USBH_read+0x76>

    default:
      res = RES_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008a0c:	bf00      	nop
    }
  }

  return res;
 8008a0e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3748      	adds	r7, #72	; 0x48
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	20004384 	.word	0x20004384
 8008a20:	08010284 	.word	0x08010284
 8008a24:	0801028c 	.word	0x0801028c

08008a28 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b094      	sub	sp, #80	; 0x50
 8008a2c:	af02      	add	r7, sp, #8
 8008a2e:	60b9      	str	r1, [r7, #8]
 8008a30:	607a      	str	r2, [r7, #4]
 8008a32:	603b      	str	r3, [r7, #0]
 8008a34:	4603      	mov	r3, r0
 8008a36:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008a3e:	7bf9      	ldrb	r1, [r7, #15]
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	4820      	ldr	r0, [pc, #128]	; (8008acc <USBH_write+0xa4>)
 8008a4a:	f000 ffe0 	bl	8009a0e <USBH_MSC_Write>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d103      	bne.n	8008a5c <USBH_write+0x34>
  {
    res = RES_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008a5a:	e031      	b.n	8008ac0 <USBH_write+0x98>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008a5c:	f107 0210 	add.w	r2, r7, #16
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	4619      	mov	r1, r3
 8008a64:	4819      	ldr	r0, [pc, #100]	; (8008acc <USBH_write+0xa4>)
 8008a66:	f000 ff45 	bl	80098f4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008a6a:	7f7b      	ldrb	r3, [r7, #29]
 8008a6c:	2b3a      	cmp	r3, #58	; 0x3a
 8008a6e:	d016      	beq.n	8008a9e <USBH_write+0x76>
 8008a70:	2b3a      	cmp	r3, #58	; 0x3a
 8008a72:	dc21      	bgt.n	8008ab8 <USBH_write+0x90>
 8008a74:	2b28      	cmp	r3, #40	; 0x28
 8008a76:	d012      	beq.n	8008a9e <USBH_write+0x76>
 8008a78:	2b28      	cmp	r3, #40	; 0x28
 8008a7a:	dc1d      	bgt.n	8008ab8 <USBH_write+0x90>
 8008a7c:	2b04      	cmp	r3, #4
 8008a7e:	d00e      	beq.n	8008a9e <USBH_write+0x76>
 8008a80:	2b27      	cmp	r3, #39	; 0x27
 8008a82:	d119      	bne.n	8008ab8 <USBH_write+0x90>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 8008a84:	4812      	ldr	r0, [pc, #72]	; (8008ad0 <USBH_write+0xa8>)
 8008a86:	f006 fa7f 	bl	800ef88 <iprintf>
 8008a8a:	4812      	ldr	r0, [pc, #72]	; (8008ad4 <USBH_write+0xac>)
 8008a8c:	f006 fa7c 	bl	800ef88 <iprintf>
 8008a90:	200a      	movs	r0, #10
 8008a92:	f006 fa91 	bl	800efb8 <putchar>
      res = RES_WRPRT;
 8008a96:	2302      	movs	r3, #2
 8008a98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008a9c:	e010      	b.n	8008ac0 <USBH_write+0x98>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 8008a9e:	480c      	ldr	r0, [pc, #48]	; (8008ad0 <USBH_write+0xa8>)
 8008aa0:	f006 fa72 	bl	800ef88 <iprintf>
 8008aa4:	480c      	ldr	r0, [pc, #48]	; (8008ad8 <USBH_write+0xb0>)
 8008aa6:	f006 fa6f 	bl	800ef88 <iprintf>
 8008aaa:	200a      	movs	r0, #10
 8008aac:	f006 fa84 	bl	800efb8 <putchar>
      res = RES_NOTRDY;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008ab6:	e003      	b.n	8008ac0 <USBH_write+0x98>

    default:
      res = RES_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008abe:	bf00      	nop
    }
  }

  return res;
 8008ac0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3748      	adds	r7, #72	; 0x48
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20004384 	.word	0x20004384
 8008ad0:	08010284 	.word	0x08010284
 8008ad4:	080102a4 	.word	0x080102a4
 8008ad8:	0801028c 	.word	0x0801028c

08008adc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b090      	sub	sp, #64	; 0x40
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	603a      	str	r2, [r7, #0]
 8008ae6:	71fb      	strb	r3, [r7, #7]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008af2:	79bb      	ldrb	r3, [r7, #6]
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	d852      	bhi.n	8008b9e <USBH_ioctl+0xc2>
 8008af8:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <USBH_ioctl+0x24>)
 8008afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afe:	bf00      	nop
 8008b00:	08008b11 	.word	0x08008b11
 8008b04:	08008b19 	.word	0x08008b19
 8008b08:	08008b43 	.word	0x08008b43
 8008b0c:	08008b6f 	.word	0x08008b6f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008b16:	e045      	b.n	8008ba4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008b18:	f107 0208 	add.w	r2, r7, #8
 8008b1c:	79fb      	ldrb	r3, [r7, #7]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	4823      	ldr	r0, [pc, #140]	; (8008bb0 <USBH_ioctl+0xd4>)
 8008b22:	f000 fee7 	bl	80098f4 <USBH_MSC_GetLUNInfo>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d106      	bne.n	8008b3a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008b38:	e034      	b.n	8008ba4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008b40:	e030      	b.n	8008ba4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008b42:	f107 0208 	add.w	r2, r7, #8
 8008b46:	79fb      	ldrb	r3, [r7, #7]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4819      	ldr	r0, [pc, #100]	; (8008bb0 <USBH_ioctl+0xd4>)
 8008b4c:	f000 fed2 	bl	80098f4 <USBH_MSC_GetLUNInfo>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d107      	bne.n	8008b66 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008b56:	8a3b      	ldrh	r3, [r7, #16]
 8008b58:	461a      	mov	r2, r3
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008b64:	e01e      	b.n	8008ba4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008b6c:	e01a      	b.n	8008ba4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008b6e:	f107 0208 	add.w	r2, r7, #8
 8008b72:	79fb      	ldrb	r3, [r7, #7]
 8008b74:	4619      	mov	r1, r3
 8008b76:	480e      	ldr	r0, [pc, #56]	; (8008bb0 <USBH_ioctl+0xd4>)
 8008b78:	f000 febc 	bl	80098f4 <USBH_MSC_GetLUNInfo>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d109      	bne.n	8008b96 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008b82:	8a3b      	ldrh	r3, [r7, #16]
 8008b84:	0a5b      	lsrs	r3, r3, #9
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	461a      	mov	r2, r3
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008b94:	e006      	b.n	8008ba4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008b9c:	e002      	b.n	8008ba4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008b9e:	2304      	movs	r3, #4
 8008ba0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008ba4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3740      	adds	r7, #64	; 0x40
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	20004384 	.word	0x20004384

08008bb4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008bb4:	b590      	push	{r4, r7, lr}
 8008bb6:	b089      	sub	sp, #36	; 0x24
 8008bb8:	af04      	add	r7, sp, #16
 8008bba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bc2:	7919      	ldrb	r1, [r3, #4]
 8008bc4:	2350      	movs	r3, #80	; 0x50
 8008bc6:	2206      	movs	r2, #6
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f001 fe1b 	bl	800a804 <USBH_FindInterface>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	2bff      	cmp	r3, #255	; 0xff
 8008bd6:	d002      	beq.n	8008bde <USBH_MSC_InterfaceInit+0x2a>
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d90f      	bls.n	8008bfe <USBH_MSC_InterfaceInit+0x4a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8008bde:	4886      	ldr	r0, [pc, #536]	; (8008df8 <USBH_MSC_InterfaceInit+0x244>)
 8008be0:	f006 f9d2 	bl	800ef88 <iprintf>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4619      	mov	r1, r3
 8008bee:	4883      	ldr	r0, [pc, #524]	; (8008dfc <USBH_MSC_InterfaceInit+0x248>)
 8008bf0:	f006 f9ca 	bl	800ef88 <iprintf>
 8008bf4:	200a      	movs	r0, #10
 8008bf6:	f006 f9df 	bl	800efb8 <putchar>
    return USBH_FAIL;
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	e0f8      	b.n	8008df0 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
 8008c00:	4619      	mov	r1, r3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f001 fd96 	bl	800a734 <USBH_SelectInterface>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <USBH_MSC_InterfaceInit+0x62>
  {
    return USBH_FAIL;
 8008c12:	2302      	movs	r3, #2
 8008c14:	e0ec      	b.n	8008df0 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008c1c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008c20:	f006 f8e2 	bl	800ede8 <malloc>
 8008c24:	4603      	mov	r3, r0
 8008c26:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c2e:	69db      	ldr	r3, [r3, #28]
 8008c30:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <USBH_MSC_InterfaceInit+0x9a>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 8008c38:	486f      	ldr	r0, [pc, #444]	; (8008df8 <USBH_MSC_InterfaceInit+0x244>)
 8008c3a:	f006 f9a5 	bl	800ef88 <iprintf>
 8008c3e:	4870      	ldr	r0, [pc, #448]	; (8008e00 <USBH_MSC_InterfaceInit+0x24c>)
 8008c40:	f006 f9a2 	bl	800ef88 <iprintf>
 8008c44:	200a      	movs	r0, #10
 8008c46:	f006 f9b7 	bl	800efb8 <putchar>
    return USBH_FAIL;
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	e0d0      	b.n	8008df0 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c52:	2100      	movs	r1, #0
 8008c54:	68b8      	ldr	r0, [r7, #8]
 8008c56:	f006 f8e5 	bl	800ee24 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	211a      	movs	r1, #26
 8008c60:	fb01 f303 	mul.w	r3, r1, r3
 8008c64:	4413      	add	r3, r2
 8008c66:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	b25b      	sxtb	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	da16      	bge.n	8008ca0 <USBH_MSC_InterfaceInit+0xec>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	211a      	movs	r1, #26
 8008c78:	fb01 f303 	mul.w	r3, r1, r3
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008c82:	781a      	ldrb	r2, [r3, #0]
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	211a      	movs	r1, #26
 8008c8e:	fb01 f303 	mul.w	r3, r1, r3
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008c98:	881a      	ldrh	r2, [r3, #0]
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	815a      	strh	r2, [r3, #10]
 8008c9e:	e015      	b.n	8008ccc <USBH_MSC_InterfaceInit+0x118>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	211a      	movs	r1, #26
 8008ca6:	fb01 f303 	mul.w	r3, r1, r3
 8008caa:	4413      	add	r3, r2
 8008cac:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008cb0:	781a      	ldrb	r2, [r3, #0]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008cb6:	7bfb      	ldrb	r3, [r7, #15]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	211a      	movs	r1, #26
 8008cbc:	fb01 f303 	mul.w	r3, r1, r3
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008cc6:	881a      	ldrh	r2, [r3, #0]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	211a      	movs	r1, #26
 8008cd2:	fb01 f303 	mul.w	r3, r1, r3
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	b25b      	sxtb	r3, r3
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	da16      	bge.n	8008d12 <USBH_MSC_InterfaceInit+0x15e>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	211a      	movs	r1, #26
 8008cea:	fb01 f303 	mul.w	r3, r1, r3
 8008cee:	4413      	add	r3, r2
 8008cf0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008cf4:	781a      	ldrb	r2, [r3, #0]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	211a      	movs	r1, #26
 8008d00:	fb01 f303 	mul.w	r3, r1, r3
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008d0a:	881a      	ldrh	r2, [r3, #0]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	815a      	strh	r2, [r3, #10]
 8008d10:	e015      	b.n	8008d3e <USBH_MSC_InterfaceInit+0x18a>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	211a      	movs	r1, #26
 8008d18:	fb01 f303 	mul.w	r3, r1, r3
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008d22:	781a      	ldrb	r2, [r3, #0]
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	211a      	movs	r1, #26
 8008d2e:	fb01 f303 	mul.w	r3, r1, r3
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008d38:	881a      	ldrh	r2, [r3, #0]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	2200      	movs	r2, #0
 8008d42:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	2200      	movs	r2, #0
 8008d48:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	799b      	ldrb	r3, [r3, #6]
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f003 f8cf 	bl	800befa <USBH_AllocPipe>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	461a      	mov	r2, r3
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	79db      	ldrb	r3, [r3, #7]
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f003 f8c5 	bl	800befa <USBH_AllocPipe>
 8008d70:	4603      	mov	r3, r0
 8008d72:	461a      	mov	r2, r3
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 feed 	bl	8009b58 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	7959      	ldrb	r1, [r3, #5]
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	7998      	ldrb	r0, [r3, #6]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	8912      	ldrh	r2, [r2, #8]
 8008d96:	9202      	str	r2, [sp, #8]
 8008d98:	2202      	movs	r2, #2
 8008d9a:	9201      	str	r2, [sp, #4]
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	4623      	mov	r3, r4
 8008da0:	4602      	mov	r2, r0
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f003 f87a 	bl	800be9c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	7919      	ldrb	r1, [r3, #4]
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	79d8      	ldrb	r0, [r3, #7]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	8952      	ldrh	r2, [r2, #10]
 8008dc0:	9202      	str	r2, [sp, #8]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	9201      	str	r2, [sp, #4]
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	4623      	mov	r3, r4
 8008dca:	4602      	mov	r2, r0
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f003 f865 	bl	800be9c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	791b      	ldrb	r3, [r3, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f005 ff26 	bl	800ec2c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	795b      	ldrb	r3, [r3, #5]
 8008de4:	2200      	movs	r2, #0
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f005 ff1f 	bl	800ec2c <USBH_LL_SetToggle>

  return USBH_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd90      	pop	{r4, r7, pc}
 8008df8:	080102c8 	.word	0x080102c8
 8008dfc:	080102d4 	.word	0x080102d4
 8008e00:	080102fc 	.word	0x080102fc

08008e04 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	795b      	ldrb	r3, [r3, #5]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00e      	beq.n	8008e3c <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	795b      	ldrb	r3, [r3, #5]
 8008e22:	4619      	mov	r1, r3
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f003 f858 	bl	800beda <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	795b      	ldrb	r3, [r3, #5]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f003 f883 	bl	800bf3c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	791b      	ldrb	r3, [r3, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00e      	beq.n	8008e62 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	791b      	ldrb	r3, [r3, #4]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f003 f845 	bl	800beda <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	791b      	ldrb	r3, [r3, #4]
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f003 f870 	bl	800bf3c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e68:	69db      	ldr	r3, [r3, #28]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00b      	beq.n	8008e86 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f005 ffbe 	bl	800edf8 <free>
    phost->pActiveClass->pData = 0U;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e82:	2200      	movs	r2, #0
 8008e84:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e9e:	69db      	ldr	r3, [r3, #28]
 8008ea0:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	7b9b      	ldrb	r3, [r3, #14]
 8008eaa:	2b03      	cmp	r3, #3
 8008eac:	d04a      	beq.n	8008f44 <USBH_MSC_ClassRequest+0xb4>
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	dc54      	bgt.n	8008f5c <USBH_MSC_ClassRequest+0xcc>
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <USBH_MSC_ClassRequest+0x2a>
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d150      	bne.n	8008f5c <USBH_MSC_ClassRequest+0xcc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fe2b 	bl	8009b1a <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	d104      	bne.n	8008ed8 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d140      	bne.n	8008f60 <USBH_MSC_ClassRequest+0xd0>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d804      	bhi.n	8008ef0 <USBH_MSC_ClassRequest+0x60>
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	3301      	adds	r3, #1
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	e000      	b.n	8008ef2 <USBH_MSC_ClassRequest+0x62>
 8008ef0:	2202      	movs	r2, #2
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	4619      	mov	r1, r3
 8008efc:	481c      	ldr	r0, [pc, #112]	; (8008f70 <USBH_MSC_ClassRequest+0xe0>)
 8008efe:	f006 f843 	bl	800ef88 <iprintf>
 8008f02:	200a      	movs	r0, #10
 8008f04:	f006 f858 	bl	800efb8 <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73bb      	strb	r3, [r7, #14]
 8008f0c:	e014      	b.n	8008f38 <USBH_MSC_ClassRequest+0xa8>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008f0e:	7bbb      	ldrb	r3, [r7, #14]
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	2134      	movs	r1, #52	; 0x34
 8008f14:	fb01 f303 	mul.w	r3, r1, r3
 8008f18:	4413      	add	r3, r2
 8008f1a:	3392      	adds	r3, #146	; 0x92
 8008f1c:	2202      	movs	r2, #2
 8008f1e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008f20:	7bbb      	ldrb	r3, [r7, #14]
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	2134      	movs	r1, #52	; 0x34
 8008f26:	fb01 f303 	mul.w	r3, r1, r3
 8008f2a:	4413      	add	r3, r2
 8008f2c:	33c1      	adds	r3, #193	; 0xc1
 8008f2e:	2200      	movs	r2, #0
 8008f30:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008f32:	7bbb      	ldrb	r3, [r7, #14]
 8008f34:	3301      	adds	r3, #1
 8008f36:	73bb      	strb	r3, [r7, #14]
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	7bba      	ldrb	r2, [r7, #14]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d3e5      	bcc.n	8008f0e <USBH_MSC_ClassRequest+0x7e>
        }
      }
      break;
 8008f42:	e00d      	b.n	8008f60 <USBH_MSC_ClassRequest+0xd0>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008f44:	2100      	movs	r1, #0
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f002 fb69 	bl	800b61e <USBH_ClrFeature>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d108      	bne.n	8008f64 <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	7bda      	ldrb	r2, [r3, #15]
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008f5a:	e003      	b.n	8008f64 <USBH_MSC_ClassRequest+0xd4>

    default:
      break;
 8008f5c:	bf00      	nop
 8008f5e:	e002      	b.n	8008f66 <USBH_MSC_ClassRequest+0xd6>
      break;
 8008f60:	bf00      	nop
 8008f62:	e000      	b.n	8008f66 <USBH_MSC_ClassRequest+0xd6>
      break;
 8008f64:	bf00      	nop
  }

  return status;
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	08010324 	.word	0x08010324

08008f74 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008f86:	2301      	movs	r3, #1
 8008f88:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	7b1b      	ldrb	r3, [r3, #12]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <USBH_MSC_Process+0x2e>
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	f000 8355 	beq.w	800964a <USBH_MSC_Process+0x6d6>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008fa0:	e356      	b.n	8009650 <USBH_MSC_Process+0x6dc>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	f080 8333 	bcs.w	800961a <USBH_MSC_Process+0x6a6>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fba:	4619      	mov	r1, r3
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	2334      	movs	r3, #52	; 0x34
 8008fc0:	fb03 f301 	mul.w	r3, r3, r1
 8008fc4:	4413      	add	r3, r2
 8008fc6:	3391      	adds	r3, #145	; 0x91
 8008fc8:	2201      	movs	r2, #1
 8008fca:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	2334      	movs	r3, #52	; 0x34
 8008fd8:	fb03 f301 	mul.w	r3, r3, r1
 8008fdc:	4413      	add	r3, r2
 8008fde:	3390      	adds	r3, #144	; 0x90
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	2b08      	cmp	r3, #8
 8008fe4:	f200 8327 	bhi.w	8009636 <USBH_MSC_Process+0x6c2>
 8008fe8:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <USBH_MSC_Process+0x7c>)
 8008fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fee:	bf00      	nop
 8008ff0:	08009015 	.word	0x08009015
 8008ff4:	08009637 	.word	0x08009637
 8008ff8:	0800915d 	.word	0x0800915d
 8008ffc:	08009311 	.word	0x08009311
 8009000:	0800904f 	.word	0x0800904f
 8009004:	0800947d 	.word	0x0800947d
 8009008:	08009637 	.word	0x08009637
 800900c:	08009637 	.word	0x08009637
 8009010:	08009609 	.word	0x08009609
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800901a:	4619      	mov	r1, r3
 800901c:	48b6      	ldr	r0, [pc, #728]	; (80092f8 <USBH_MSC_Process+0x384>)
 800901e:	f005 ffb3 	bl	800ef88 <iprintf>
 8009022:	200a      	movs	r0, #10
 8009024:	f005 ffc8 	bl	800efb8 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800902e:	4619      	mov	r1, r3
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	2334      	movs	r3, #52	; 0x34
 8009034:	fb03 f301 	mul.w	r3, r3, r1
 8009038:	4413      	add	r3, r2
 800903a:	3390      	adds	r3, #144	; 0x90
 800903c:	2204      	movs	r2, #4
 800903e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800904c:	e2fc      	b.n	8009648 <USBH_MSC_Process+0x6d4>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009054:	b2d9      	uxtb	r1, r3
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800905c:	461a      	mov	r2, r3
 800905e:	2334      	movs	r3, #52	; 0x34
 8009060:	fb03 f302 	mul.w	r3, r3, r2
 8009064:	3398      	adds	r3, #152	; 0x98
 8009066:	693a      	ldr	r2, [r7, #16]
 8009068:	4413      	add	r3, r2
 800906a:	3307      	adds	r3, #7
 800906c:	461a      	mov	r2, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f001 f890 	bl	800a194 <USBH_MSC_SCSI_Inquiry>
 8009074:	4603      	mov	r3, r0
 8009076:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009078:	7bfb      	ldrb	r3, [r7, #15]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d141      	bne.n	8009102 <USBH_MSC_Process+0x18e>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009084:	461a      	mov	r2, r3
 8009086:	2334      	movs	r3, #52	; 0x34
 8009088:	fb03 f302 	mul.w	r3, r3, r2
 800908c:	3398      	adds	r3, #152	; 0x98
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	4413      	add	r3, r2
 8009092:	330a      	adds	r3, #10
 8009094:	4619      	mov	r1, r3
 8009096:	4899      	ldr	r0, [pc, #612]	; (80092fc <USBH_MSC_Process+0x388>)
 8009098:	f005 ff76 	bl	800ef88 <iprintf>
 800909c:	200a      	movs	r0, #10
 800909e:	f005 ff8b 	bl	800efb8 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090a8:	461a      	mov	r2, r3
 80090aa:	2334      	movs	r3, #52	; 0x34
 80090ac:	fb03 f302 	mul.w	r3, r3, r2
 80090b0:	33a0      	adds	r3, #160	; 0xa0
 80090b2:	693a      	ldr	r2, [r7, #16]
 80090b4:	4413      	add	r3, r2
 80090b6:	330b      	adds	r3, #11
 80090b8:	4619      	mov	r1, r3
 80090ba:	4891      	ldr	r0, [pc, #580]	; (8009300 <USBH_MSC_Process+0x38c>)
 80090bc:	f005 ff64 	bl	800ef88 <iprintf>
 80090c0:	200a      	movs	r0, #10
 80090c2:	f005 ff79 	bl	800efb8 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090cc:	461a      	mov	r2, r3
 80090ce:	2334      	movs	r3, #52	; 0x34
 80090d0:	fb03 f302 	mul.w	r3, r3, r2
 80090d4:	33b0      	adds	r3, #176	; 0xb0
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	4413      	add	r3, r2
 80090da:	330c      	adds	r3, #12
 80090dc:	4619      	mov	r1, r3
 80090de:	4889      	ldr	r0, [pc, #548]	; (8009304 <USBH_MSC_Process+0x390>)
 80090e0:	f005 ff52 	bl	800ef88 <iprintf>
 80090e4:	200a      	movs	r0, #10
 80090e6:	f005 ff67 	bl	800efb8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090f0:	4619      	mov	r1, r3
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	2334      	movs	r3, #52	; 0x34
 80090f6:	fb03 f301 	mul.w	r3, r3, r1
 80090fa:	4413      	add	r3, r2
 80090fc:	3390      	adds	r3, #144	; 0x90
 80090fe:	2202      	movs	r2, #2
 8009100:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009102:	7bfb      	ldrb	r3, [r7, #15]
 8009104:	2b02      	cmp	r3, #2
 8009106:	d10c      	bne.n	8009122 <USBH_MSC_Process+0x1ae>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800910e:	4619      	mov	r1, r3
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	2334      	movs	r3, #52	; 0x34
 8009114:	fb03 f301 	mul.w	r3, r3, r1
 8009118:	4413      	add	r3, r2
 800911a:	3390      	adds	r3, #144	; 0x90
 800911c:	2205      	movs	r2, #5
 800911e:	701a      	strb	r2, [r3, #0]
            break;
 8009120:	e28b      	b.n	800963a <USBH_MSC_Process+0x6c6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009122:	7bfb      	ldrb	r3, [r7, #15]
 8009124:	2b04      	cmp	r3, #4
 8009126:	f040 8288 	bne.w	800963a <USBH_MSC_Process+0x6c6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009130:	4619      	mov	r1, r3
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	2334      	movs	r3, #52	; 0x34
 8009136:	fb03 f301 	mul.w	r3, r3, r1
 800913a:	4413      	add	r3, r2
 800913c:	3390      	adds	r3, #144	; 0x90
 800913e:	2201      	movs	r2, #1
 8009140:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009148:	4619      	mov	r1, r3
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	2334      	movs	r3, #52	; 0x34
 800914e:	fb03 f301 	mul.w	r3, r3, r1
 8009152:	4413      	add	r3, r2
 8009154:	3391      	adds	r3, #145	; 0x91
 8009156:	2202      	movs	r2, #2
 8009158:	701a      	strb	r2, [r3, #0]
            break;
 800915a:	e26e      	b.n	800963a <USBH_MSC_Process+0x6c6>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009162:	b2db      	uxtb	r3, r3
 8009164:	4619      	mov	r1, r3
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 ff56 	bl	800a018 <USBH_MSC_SCSI_TestUnitReady>
 800916c:	4603      	mov	r3, r0
 800916e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009170:	7bbb      	ldrb	r3, [r7, #14]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d14f      	bne.n	8009216 <USBH_MSC_Process+0x2a2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800917c:	4619      	mov	r1, r3
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	2334      	movs	r3, #52	; 0x34
 8009182:	fb03 f301 	mul.w	r3, r3, r1
 8009186:	4413      	add	r3, r2
 8009188:	3392      	adds	r3, #146	; 0x92
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d012      	beq.n	80091b6 <USBH_MSC_Process+0x242>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009196:	4619      	mov	r1, r3
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	2334      	movs	r3, #52	; 0x34
 800919c:	fb03 f301 	mul.w	r3, r3, r1
 80091a0:	4413      	add	r3, r2
 80091a2:	33c1      	adds	r3, #193	; 0xc1
 80091a4:	2201      	movs	r2, #1
 80091a6:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 80091a8:	4857      	ldr	r0, [pc, #348]	; (8009308 <USBH_MSC_Process+0x394>)
 80091aa:	f005 feed 	bl	800ef88 <iprintf>
 80091ae:	200a      	movs	r0, #10
 80091b0:	f005 ff02 	bl	800efb8 <putchar>
 80091b4:	e00b      	b.n	80091ce <USBH_MSC_Process+0x25a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091bc:	4619      	mov	r1, r3
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	2334      	movs	r3, #52	; 0x34
 80091c2:	fb03 f301 	mul.w	r3, r3, r1
 80091c6:	4413      	add	r3, r2
 80091c8:	33c1      	adds	r3, #193	; 0xc1
 80091ca:	2200      	movs	r2, #0
 80091cc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091d4:	4619      	mov	r1, r3
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	2334      	movs	r3, #52	; 0x34
 80091da:	fb03 f301 	mul.w	r3, r3, r1
 80091de:	4413      	add	r3, r2
 80091e0:	3390      	adds	r3, #144	; 0x90
 80091e2:	2203      	movs	r2, #3
 80091e4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091ec:	4619      	mov	r1, r3
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	2334      	movs	r3, #52	; 0x34
 80091f2:	fb03 f301 	mul.w	r3, r3, r1
 80091f6:	4413      	add	r3, r2
 80091f8:	3391      	adds	r3, #145	; 0x91
 80091fa:	2200      	movs	r2, #0
 80091fc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009204:	4619      	mov	r1, r3
 8009206:	693a      	ldr	r2, [r7, #16]
 8009208:	2334      	movs	r3, #52	; 0x34
 800920a:	fb03 f301 	mul.w	r3, r3, r1
 800920e:	4413      	add	r3, r2
 8009210:	3392      	adds	r3, #146	; 0x92
 8009212:	2200      	movs	r2, #0
 8009214:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009216:	7bbb      	ldrb	r3, [r7, #14]
 8009218:	2b02      	cmp	r3, #2
 800921a:	d150      	bne.n	80092be <USBH_MSC_Process+0x34a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009222:	4619      	mov	r1, r3
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	2334      	movs	r3, #52	; 0x34
 8009228:	fb03 f301 	mul.w	r3, r3, r1
 800922c:	4413      	add	r3, r2
 800922e:	3392      	adds	r3, #146	; 0x92
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	2b02      	cmp	r3, #2
 8009234:	d012      	beq.n	800925c <USBH_MSC_Process+0x2e8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800923c:	4619      	mov	r1, r3
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	2334      	movs	r3, #52	; 0x34
 8009242:	fb03 f301 	mul.w	r3, r3, r1
 8009246:	4413      	add	r3, r2
 8009248:	33c1      	adds	r3, #193	; 0xc1
 800924a:	2201      	movs	r2, #1
 800924c:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 800924e:	482f      	ldr	r0, [pc, #188]	; (800930c <USBH_MSC_Process+0x398>)
 8009250:	f005 fe9a 	bl	800ef88 <iprintf>
 8009254:	200a      	movs	r0, #10
 8009256:	f005 feaf 	bl	800efb8 <putchar>
 800925a:	e00b      	b.n	8009274 <USBH_MSC_Process+0x300>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009262:	4619      	mov	r1, r3
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	2334      	movs	r3, #52	; 0x34
 8009268:	fb03 f301 	mul.w	r3, r3, r1
 800926c:	4413      	add	r3, r2
 800926e:	33c1      	adds	r3, #193	; 0xc1
 8009270:	2200      	movs	r2, #0
 8009272:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800927a:	4619      	mov	r1, r3
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	2334      	movs	r3, #52	; 0x34
 8009280:	fb03 f301 	mul.w	r3, r3, r1
 8009284:	4413      	add	r3, r2
 8009286:	3390      	adds	r3, #144	; 0x90
 8009288:	2205      	movs	r2, #5
 800928a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009292:	4619      	mov	r1, r3
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	2334      	movs	r3, #52	; 0x34
 8009298:	fb03 f301 	mul.w	r3, r3, r1
 800929c:	4413      	add	r3, r2
 800929e:	3391      	adds	r3, #145	; 0x91
 80092a0:	2201      	movs	r2, #1
 80092a2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092aa:	4619      	mov	r1, r3
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	2334      	movs	r3, #52	; 0x34
 80092b0:	fb03 f301 	mul.w	r3, r3, r1
 80092b4:	4413      	add	r3, r2
 80092b6:	3392      	adds	r3, #146	; 0x92
 80092b8:	2202      	movs	r2, #2
 80092ba:	701a      	strb	r2, [r3, #0]
            break;
 80092bc:	e1bf      	b.n	800963e <USBH_MSC_Process+0x6ca>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80092be:	7bbb      	ldrb	r3, [r7, #14]
 80092c0:	2b04      	cmp	r3, #4
 80092c2:	f040 81bc 	bne.w	800963e <USBH_MSC_Process+0x6ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092cc:	4619      	mov	r1, r3
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	2334      	movs	r3, #52	; 0x34
 80092d2:	fb03 f301 	mul.w	r3, r3, r1
 80092d6:	4413      	add	r3, r2
 80092d8:	3390      	adds	r3, #144	; 0x90
 80092da:	2201      	movs	r2, #1
 80092dc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092e4:	4619      	mov	r1, r3
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	2334      	movs	r3, #52	; 0x34
 80092ea:	fb03 f301 	mul.w	r3, r3, r1
 80092ee:	4413      	add	r3, r2
 80092f0:	3391      	adds	r3, #145	; 0x91
 80092f2:	2202      	movs	r2, #2
 80092f4:	701a      	strb	r2, [r3, #0]
            break;
 80092f6:	e1a2      	b.n	800963e <USBH_MSC_Process+0x6ca>
 80092f8:	08010340 	.word	0x08010340
 80092fc:	0801034c 	.word	0x0801034c
 8009300:	08010364 	.word	0x08010364
 8009304:	0801037c 	.word	0x0801037c
 8009308:	08010394 	.word	0x08010394
 800930c:	080103a8 	.word	0x080103a8
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009316:	b2d9      	uxtb	r1, r3
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800931e:	461a      	mov	r2, r3
 8009320:	2334      	movs	r3, #52	; 0x34
 8009322:	fb03 f302 	mul.w	r3, r3, r2
 8009326:	3390      	adds	r3, #144	; 0x90
 8009328:	693a      	ldr	r2, [r7, #16]
 800932a:	4413      	add	r3, r2
 800932c:	3304      	adds	r3, #4
 800932e:	461a      	mov	r2, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 feb4 	bl	800a09e <USBH_MSC_SCSI_ReadCapacity>
 8009336:	4603      	mov	r3, r0
 8009338:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d170      	bne.n	8009422 <USBH_MSC_Process+0x4ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009346:	4619      	mov	r1, r3
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	2334      	movs	r3, #52	; 0x34
 800934c:	fb03 f301 	mul.w	r3, r3, r1
 8009350:	4413      	add	r3, r2
 8009352:	33c1      	adds	r3, #193	; 0xc1
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d142      	bne.n	80093e0 <USBH_MSC_Process+0x46c>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009360:	4619      	mov	r1, r3
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	2334      	movs	r3, #52	; 0x34
 8009366:	fb03 f301 	mul.w	r3, r3, r1
 800936a:	4413      	add	r3, r2
 800936c:	3394      	adds	r3, #148	; 0x94
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	693a      	ldr	r2, [r7, #16]
 8009372:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 8009376:	4610      	mov	r0, r2
 8009378:	6939      	ldr	r1, [r7, #16]
 800937a:	2234      	movs	r2, #52	; 0x34
 800937c:	fb02 f200 	mul.w	r2, r2, r0
 8009380:	440a      	add	r2, r1
 8009382:	3298      	adds	r2, #152	; 0x98
 8009384:	8812      	ldrh	r2, [r2, #0]
 8009386:	fb02 f303 	mul.w	r3, r2, r3
 800938a:	4619      	mov	r1, r3
 800938c:	48b3      	ldr	r0, [pc, #716]	; (800965c <USBH_MSC_Process+0x6e8>)
 800938e:	f005 fdfb 	bl	800ef88 <iprintf>
 8009392:	200a      	movs	r0, #10
 8009394:	f005 fe10 	bl	800efb8 <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800939e:	4619      	mov	r1, r3
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	2334      	movs	r3, #52	; 0x34
 80093a4:	fb03 f301 	mul.w	r3, r3, r1
 80093a8:	4413      	add	r3, r2
 80093aa:	3394      	adds	r3, #148	; 0x94
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4619      	mov	r1, r3
 80093b0:	48ab      	ldr	r0, [pc, #684]	; (8009660 <USBH_MSC_Process+0x6ec>)
 80093b2:	f005 fde9 	bl	800ef88 <iprintf>
 80093b6:	200a      	movs	r0, #10
 80093b8:	f005 fdfe 	bl	800efb8 <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093c2:	4619      	mov	r1, r3
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	2334      	movs	r3, #52	; 0x34
 80093c8:	fb03 f301 	mul.w	r3, r3, r1
 80093cc:	4413      	add	r3, r2
 80093ce:	3398      	adds	r3, #152	; 0x98
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	4619      	mov	r1, r3
 80093d4:	48a3      	ldr	r0, [pc, #652]	; (8009664 <USBH_MSC_Process+0x6f0>)
 80093d6:	f005 fdd7 	bl	800ef88 <iprintf>
 80093da:	200a      	movs	r0, #10
 80093dc:	f005 fdec 	bl	800efb8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093e6:	4619      	mov	r1, r3
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	2334      	movs	r3, #52	; 0x34
 80093ec:	fb03 f301 	mul.w	r3, r3, r1
 80093f0:	4413      	add	r3, r2
 80093f2:	3390      	adds	r3, #144	; 0x90
 80093f4:	2201      	movs	r2, #1
 80093f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093fe:	4619      	mov	r1, r3
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	2334      	movs	r3, #52	; 0x34
 8009404:	fb03 f301 	mul.w	r3, r3, r1
 8009408:	4413      	add	r3, r2
 800940a:	3391      	adds	r3, #145	; 0x91
 800940c:	2200      	movs	r2, #0
 800940e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009416:	3301      	adds	r3, #1
 8009418:	b29a      	uxth	r2, r3
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009420:	e10f      	b.n	8009642 <USBH_MSC_Process+0x6ce>
            else if (scsi_status == USBH_FAIL)
 8009422:	7bfb      	ldrb	r3, [r7, #15]
 8009424:	2b02      	cmp	r3, #2
 8009426:	d10c      	bne.n	8009442 <USBH_MSC_Process+0x4ce>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800942e:	4619      	mov	r1, r3
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	2334      	movs	r3, #52	; 0x34
 8009434:	fb03 f301 	mul.w	r3, r3, r1
 8009438:	4413      	add	r3, r2
 800943a:	3390      	adds	r3, #144	; 0x90
 800943c:	2205      	movs	r2, #5
 800943e:	701a      	strb	r2, [r3, #0]
            break;
 8009440:	e0ff      	b.n	8009642 <USBH_MSC_Process+0x6ce>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009442:	7bfb      	ldrb	r3, [r7, #15]
 8009444:	2b04      	cmp	r3, #4
 8009446:	f040 80fc 	bne.w	8009642 <USBH_MSC_Process+0x6ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009450:	4619      	mov	r1, r3
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	2334      	movs	r3, #52	; 0x34
 8009456:	fb03 f301 	mul.w	r3, r3, r1
 800945a:	4413      	add	r3, r2
 800945c:	3390      	adds	r3, #144	; 0x90
 800945e:	2201      	movs	r2, #1
 8009460:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009468:	4619      	mov	r1, r3
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	2334      	movs	r3, #52	; 0x34
 800946e:	fb03 f301 	mul.w	r3, r3, r1
 8009472:	4413      	add	r3, r2
 8009474:	3391      	adds	r3, #145	; 0x91
 8009476:	2202      	movs	r2, #2
 8009478:	701a      	strb	r2, [r3, #0]
            break;
 800947a:	e0e2      	b.n	8009642 <USBH_MSC_Process+0x6ce>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009482:	b2d9      	uxtb	r1, r3
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800948a:	461a      	mov	r2, r3
 800948c:	2334      	movs	r3, #52	; 0x34
 800948e:	fb03 f302 	mul.w	r3, r3, r2
 8009492:	3398      	adds	r3, #152	; 0x98
 8009494:	693a      	ldr	r2, [r7, #16]
 8009496:	4413      	add	r3, r2
 8009498:	3304      	adds	r3, #4
 800949a:	461a      	mov	r2, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 ff1e 	bl	800a2de <USBH_MSC_SCSI_RequestSense>
 80094a2:	4603      	mov	r3, r0
 80094a4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d17b      	bne.n	80095a4 <USBH_MSC_Process+0x630>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094b2:	4619      	mov	r1, r3
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	2334      	movs	r3, #52	; 0x34
 80094b8:	fb03 f301 	mul.w	r3, r3, r1
 80094bc:	4413      	add	r3, r2
 80094be:	339c      	adds	r3, #156	; 0x9c
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	2b06      	cmp	r3, #6
 80094c4:	d00c      	beq.n	80094e0 <USBH_MSC_Process+0x56c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094cc:	4619      	mov	r1, r3
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	2334      	movs	r3, #52	; 0x34
 80094d2:	fb03 f301 	mul.w	r3, r3, r1
 80094d6:	4413      	add	r3, r2
 80094d8:	339c      	adds	r3, #156	; 0x9c
 80094da:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d117      	bne.n	8009510 <USBH_MSC_Process+0x59c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d80c      	bhi.n	8009510 <USBH_MSC_Process+0x59c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094fc:	4619      	mov	r1, r3
 80094fe:	693a      	ldr	r2, [r7, #16]
 8009500:	2334      	movs	r3, #52	; 0x34
 8009502:	fb03 f301 	mul.w	r3, r3, r1
 8009506:	4413      	add	r3, r2
 8009508:	3390      	adds	r3, #144	; 0x90
 800950a:	2202      	movs	r2, #2
 800950c:	701a      	strb	r2, [r3, #0]
                  break;
 800950e:	e09b      	b.n	8009648 <USBH_MSC_Process+0x6d4>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009516:	4619      	mov	r1, r3
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	2334      	movs	r3, #52	; 0x34
 800951c:	fb03 f301 	mul.w	r3, r3, r1
 8009520:	4413      	add	r3, r2
 8009522:	339c      	adds	r3, #156	; 0x9c
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	4619      	mov	r1, r3
 8009528:	484f      	ldr	r0, [pc, #316]	; (8009668 <USBH_MSC_Process+0x6f4>)
 800952a:	f005 fd2d 	bl	800ef88 <iprintf>
 800952e:	200a      	movs	r0, #10
 8009530:	f005 fd42 	bl	800efb8 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800953a:	4619      	mov	r1, r3
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	2334      	movs	r3, #52	; 0x34
 8009540:	fb03 f301 	mul.w	r3, r3, r1
 8009544:	4413      	add	r3, r2
 8009546:	339d      	adds	r3, #157	; 0x9d
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	4619      	mov	r1, r3
 800954c:	4847      	ldr	r0, [pc, #284]	; (800966c <USBH_MSC_Process+0x6f8>)
 800954e:	f005 fd1b 	bl	800ef88 <iprintf>
 8009552:	200a      	movs	r0, #10
 8009554:	f005 fd30 	bl	800efb8 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800955e:	4619      	mov	r1, r3
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	2334      	movs	r3, #52	; 0x34
 8009564:	fb03 f301 	mul.w	r3, r3, r1
 8009568:	4413      	add	r3, r2
 800956a:	339e      	adds	r3, #158	; 0x9e
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	4619      	mov	r1, r3
 8009570:	483f      	ldr	r0, [pc, #252]	; (8009670 <USBH_MSC_Process+0x6fc>)
 8009572:	f005 fd09 	bl	800ef88 <iprintf>
 8009576:	200a      	movs	r0, #10
 8009578:	f005 fd1e 	bl	800efb8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009582:	4619      	mov	r1, r3
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	2334      	movs	r3, #52	; 0x34
 8009588:	fb03 f301 	mul.w	r3, r3, r1
 800958c:	4413      	add	r3, r2
 800958e:	3390      	adds	r3, #144	; 0x90
 8009590:	2201      	movs	r2, #1
 8009592:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800959a:	3301      	adds	r3, #1
 800959c:	b29a      	uxth	r2, r3
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d112      	bne.n	80095d0 <USBH_MSC_Process+0x65c>
              USBH_UsrLog("MSC Device NOT ready");
 80095aa:	4832      	ldr	r0, [pc, #200]	; (8009674 <USBH_MSC_Process+0x700>)
 80095ac:	f005 fcec 	bl	800ef88 <iprintf>
 80095b0:	200a      	movs	r0, #10
 80095b2:	f005 fd01 	bl	800efb8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095bc:	4619      	mov	r1, r3
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	2334      	movs	r3, #52	; 0x34
 80095c2:	fb03 f301 	mul.w	r3, r3, r1
 80095c6:	4413      	add	r3, r2
 80095c8:	3390      	adds	r3, #144	; 0x90
 80095ca:	2208      	movs	r2, #8
 80095cc:	701a      	strb	r2, [r3, #0]
            break;
 80095ce:	e03a      	b.n	8009646 <USBH_MSC_Process+0x6d2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80095d0:	7bfb      	ldrb	r3, [r7, #15]
 80095d2:	2b04      	cmp	r3, #4
 80095d4:	d137      	bne.n	8009646 <USBH_MSC_Process+0x6d2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095dc:	4619      	mov	r1, r3
 80095de:	693a      	ldr	r2, [r7, #16]
 80095e0:	2334      	movs	r3, #52	; 0x34
 80095e2:	fb03 f301 	mul.w	r3, r3, r1
 80095e6:	4413      	add	r3, r2
 80095e8:	3390      	adds	r3, #144	; 0x90
 80095ea:	2201      	movs	r2, #1
 80095ec:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095f4:	4619      	mov	r1, r3
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	2334      	movs	r3, #52	; 0x34
 80095fa:	fb03 f301 	mul.w	r3, r3, r1
 80095fe:	4413      	add	r3, r2
 8009600:	3391      	adds	r3, #145	; 0x91
 8009602:	2202      	movs	r2, #2
 8009604:	701a      	strb	r2, [r3, #0]
            break;
 8009606:	e01e      	b.n	8009646 <USBH_MSC_Process+0x6d2>
            MSC_Handle->current_lun++;
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800960e:	3301      	adds	r3, #1
 8009610:	b29a      	uxth	r2, r3
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009618:	e016      	b.n	8009648 <USBH_MSC_Process+0x6d4>
        MSC_Handle->current_lun = 0U;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	2200      	movs	r2, #0
 800961e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	2201      	movs	r2, #1
 8009626:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800962e:	2102      	movs	r1, #2
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	4798      	blx	r3
      break;
 8009634:	e00c      	b.n	8009650 <USBH_MSC_Process+0x6dc>
            break;
 8009636:	bf00      	nop
 8009638:	e00a      	b.n	8009650 <USBH_MSC_Process+0x6dc>
            break;
 800963a:	bf00      	nop
 800963c:	e008      	b.n	8009650 <USBH_MSC_Process+0x6dc>
            break;
 800963e:	bf00      	nop
 8009640:	e006      	b.n	8009650 <USBH_MSC_Process+0x6dc>
            break;
 8009642:	bf00      	nop
 8009644:	e004      	b.n	8009650 <USBH_MSC_Process+0x6dc>
            break;
 8009646:	bf00      	nop
      break;
 8009648:	e002      	b.n	8009650 <USBH_MSC_Process+0x6dc>
      error = USBH_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	75fb      	strb	r3, [r7, #23]
      break;
 800964e:	bf00      	nop
  }
  return error;
 8009650:	7dfb      	ldrb	r3, [r7, #23]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3718      	adds	r7, #24
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	080103c0 	.word	0x080103c0
 8009660:	080103e0 	.word	0x080103e0
 8009664:	080103f4 	.word	0x080103f4
 8009668:	08010408 	.word	0x08010408
 800966c:	08010418 	.word	0x08010418
 8009670:	08010434 	.word	0x08010434
 8009674:	080103a8 	.word	0x080103a8

08009678 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
	...

08009690 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af02      	add	r7, sp, #8
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	460b      	mov	r3, r1
 800969a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096a2:	69db      	ldr	r3, [r3, #28]
 80096a4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80096a6:	2301      	movs	r3, #1
 80096a8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80096aa:	2301      	movs	r3, #1
 80096ac:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80096ae:	78fb      	ldrb	r3, [r7, #3]
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	2134      	movs	r1, #52	; 0x34
 80096b4:	fb01 f303 	mul.w	r3, r1, r3
 80096b8:	4413      	add	r3, r2
 80096ba:	3390      	adds	r3, #144	; 0x90
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	2b07      	cmp	r3, #7
 80096c0:	d03d      	beq.n	800973e <USBH_MSC_RdWrProcess+0xae>
 80096c2:	2b07      	cmp	r3, #7
 80096c4:	f300 80dc 	bgt.w	8009880 <USBH_MSC_RdWrProcess+0x1f0>
 80096c8:	2b05      	cmp	r3, #5
 80096ca:	d06d      	beq.n	80097a8 <USBH_MSC_RdWrProcess+0x118>
 80096cc:	2b06      	cmp	r3, #6
 80096ce:	f040 80d7 	bne.w	8009880 <USBH_MSC_RdWrProcess+0x1f0>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80096d2:	78f9      	ldrb	r1, [r7, #3]
 80096d4:	2300      	movs	r3, #0
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	2300      	movs	r3, #0
 80096da:	2200      	movs	r2, #0
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fee2 	bl	800a4a6 <USBH_MSC_SCSI_Read>
 80096e2:	4603      	mov	r3, r0
 80096e4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10b      	bne.n	8009704 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80096ec:	78fb      	ldrb	r3, [r7, #3]
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	2134      	movs	r1, #52	; 0x34
 80096f2:	fb01 f303 	mul.w	r3, r1, r3
 80096f6:	4413      	add	r3, r2
 80096f8:	3390      	adds	r3, #144	; 0x90
 80096fa:	2201      	movs	r2, #1
 80096fc:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009702:	e0bf      	b.n	8009884 <USBH_MSC_RdWrProcess+0x1f4>
      else if (scsi_status == USBH_FAIL)
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	2b02      	cmp	r3, #2
 8009708:	d109      	bne.n	800971e <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800970a:	78fb      	ldrb	r3, [r7, #3]
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	2134      	movs	r1, #52	; 0x34
 8009710:	fb01 f303 	mul.w	r3, r1, r3
 8009714:	4413      	add	r3, r2
 8009716:	3390      	adds	r3, #144	; 0x90
 8009718:	2205      	movs	r2, #5
 800971a:	701a      	strb	r2, [r3, #0]
      break;
 800971c:	e0b2      	b.n	8009884 <USBH_MSC_RdWrProcess+0x1f4>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800971e:	7bfb      	ldrb	r3, [r7, #15]
 8009720:	2b04      	cmp	r3, #4
 8009722:	f040 80af 	bne.w	8009884 <USBH_MSC_RdWrProcess+0x1f4>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009726:	78fb      	ldrb	r3, [r7, #3]
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	2134      	movs	r1, #52	; 0x34
 800972c:	fb01 f303 	mul.w	r3, r1, r3
 8009730:	4413      	add	r3, r2
 8009732:	3390      	adds	r3, #144	; 0x90
 8009734:	2208      	movs	r2, #8
 8009736:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009738:	2302      	movs	r3, #2
 800973a:	75fb      	strb	r3, [r7, #23]
      break;
 800973c:	e0a2      	b.n	8009884 <USBH_MSC_RdWrProcess+0x1f4>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800973e:	78f9      	ldrb	r1, [r7, #3]
 8009740:	2300      	movs	r3, #0
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	2300      	movs	r3, #0
 8009746:	2200      	movs	r2, #0
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fe41 	bl	800a3d0 <USBH_MSC_SCSI_Write>
 800974e:	4603      	mov	r3, r0
 8009750:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009752:	7bfb      	ldrb	r3, [r7, #15]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10b      	bne.n	8009770 <USBH_MSC_RdWrProcess+0xe0>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009758:	78fb      	ldrb	r3, [r7, #3]
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	2134      	movs	r1, #52	; 0x34
 800975e:	fb01 f303 	mul.w	r3, r1, r3
 8009762:	4413      	add	r3, r2
 8009764:	3390      	adds	r3, #144	; 0x90
 8009766:	2201      	movs	r2, #1
 8009768:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800976a:	2300      	movs	r3, #0
 800976c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800976e:	e08b      	b.n	8009888 <USBH_MSC_RdWrProcess+0x1f8>
      else if (scsi_status == USBH_FAIL)
 8009770:	7bfb      	ldrb	r3, [r7, #15]
 8009772:	2b02      	cmp	r3, #2
 8009774:	d109      	bne.n	800978a <USBH_MSC_RdWrProcess+0xfa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009776:	78fb      	ldrb	r3, [r7, #3]
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	2134      	movs	r1, #52	; 0x34
 800977c:	fb01 f303 	mul.w	r3, r1, r3
 8009780:	4413      	add	r3, r2
 8009782:	3390      	adds	r3, #144	; 0x90
 8009784:	2205      	movs	r2, #5
 8009786:	701a      	strb	r2, [r3, #0]
      break;
 8009788:	e07e      	b.n	8009888 <USBH_MSC_RdWrProcess+0x1f8>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	2b04      	cmp	r3, #4
 800978e:	d17b      	bne.n	8009888 <USBH_MSC_RdWrProcess+0x1f8>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009790:	78fb      	ldrb	r3, [r7, #3]
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	2134      	movs	r1, #52	; 0x34
 8009796:	fb01 f303 	mul.w	r3, r1, r3
 800979a:	4413      	add	r3, r2
 800979c:	3390      	adds	r3, #144	; 0x90
 800979e:	2208      	movs	r2, #8
 80097a0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80097a2:	2302      	movs	r3, #2
 80097a4:	75fb      	strb	r3, [r7, #23]
      break;
 80097a6:	e06f      	b.n	8009888 <USBH_MSC_RdWrProcess+0x1f8>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	2234      	movs	r2, #52	; 0x34
 80097ac:	fb02 f303 	mul.w	r3, r2, r3
 80097b0:	3398      	adds	r3, #152	; 0x98
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	4413      	add	r3, r2
 80097b6:	1d1a      	adds	r2, r3, #4
 80097b8:	78fb      	ldrb	r3, [r7, #3]
 80097ba:	4619      	mov	r1, r3
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fd8e 	bl	800a2de <USBH_MSC_SCSI_RequestSense>
 80097c2:	4603      	mov	r3, r0
 80097c4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d140      	bne.n	800984e <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 80097cc:	78fb      	ldrb	r3, [r7, #3]
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	2134      	movs	r1, #52	; 0x34
 80097d2:	fb01 f303 	mul.w	r3, r1, r3
 80097d6:	4413      	add	r3, r2
 80097d8:	339c      	adds	r3, #156	; 0x9c
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	4619      	mov	r1, r3
 80097de:	482e      	ldr	r0, [pc, #184]	; (8009898 <USBH_MSC_RdWrProcess+0x208>)
 80097e0:	f005 fbd2 	bl	800ef88 <iprintf>
 80097e4:	200a      	movs	r0, #10
 80097e6:	f005 fbe7 	bl	800efb8 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	2134      	movs	r1, #52	; 0x34
 80097f0:	fb01 f303 	mul.w	r3, r1, r3
 80097f4:	4413      	add	r3, r2
 80097f6:	339d      	adds	r3, #157	; 0x9d
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	4619      	mov	r1, r3
 80097fc:	4827      	ldr	r0, [pc, #156]	; (800989c <USBH_MSC_RdWrProcess+0x20c>)
 80097fe:	f005 fbc3 	bl	800ef88 <iprintf>
 8009802:	200a      	movs	r0, #10
 8009804:	f005 fbd8 	bl	800efb8 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	2134      	movs	r1, #52	; 0x34
 800980e:	fb01 f303 	mul.w	r3, r1, r3
 8009812:	4413      	add	r3, r2
 8009814:	339e      	adds	r3, #158	; 0x9e
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	4619      	mov	r1, r3
 800981a:	4821      	ldr	r0, [pc, #132]	; (80098a0 <USBH_MSC_RdWrProcess+0x210>)
 800981c:	f005 fbb4 	bl	800ef88 <iprintf>
 8009820:	200a      	movs	r0, #10
 8009822:	f005 fbc9 	bl	800efb8 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009826:	78fb      	ldrb	r3, [r7, #3]
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	2134      	movs	r1, #52	; 0x34
 800982c:	fb01 f303 	mul.w	r3, r1, r3
 8009830:	4413      	add	r3, r2
 8009832:	3390      	adds	r3, #144	; 0x90
 8009834:	2201      	movs	r2, #1
 8009836:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009838:	78fb      	ldrb	r3, [r7, #3]
 800983a:	693a      	ldr	r2, [r7, #16]
 800983c:	2134      	movs	r1, #52	; 0x34
 800983e:	fb01 f303 	mul.w	r3, r1, r3
 8009842:	4413      	add	r3, r2
 8009844:	3391      	adds	r3, #145	; 0x91
 8009846:	2202      	movs	r2, #2
 8009848:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800984a:	2302      	movs	r3, #2
 800984c:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800984e:	7bfb      	ldrb	r3, [r7, #15]
 8009850:	2b02      	cmp	r3, #2
 8009852:	d106      	bne.n	8009862 <USBH_MSC_RdWrProcess+0x1d2>
      {
        USBH_UsrLog("MSC Device NOT ready");
 8009854:	4813      	ldr	r0, [pc, #76]	; (80098a4 <USBH_MSC_RdWrProcess+0x214>)
 8009856:	f005 fb97 	bl	800ef88 <iprintf>
 800985a:	200a      	movs	r0, #10
 800985c:	f005 fbac 	bl	800efb8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009860:	e014      	b.n	800988c <USBH_MSC_RdWrProcess+0x1fc>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	2b04      	cmp	r3, #4
 8009866:	d111      	bne.n	800988c <USBH_MSC_RdWrProcess+0x1fc>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009868:	78fb      	ldrb	r3, [r7, #3]
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	2134      	movs	r1, #52	; 0x34
 800986e:	fb01 f303 	mul.w	r3, r1, r3
 8009872:	4413      	add	r3, r2
 8009874:	3390      	adds	r3, #144	; 0x90
 8009876:	2208      	movs	r2, #8
 8009878:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800987a:	2302      	movs	r3, #2
 800987c:	75fb      	strb	r3, [r7, #23]
      break;
 800987e:	e005      	b.n	800988c <USBH_MSC_RdWrProcess+0x1fc>

    default:
      break;
 8009880:	bf00      	nop
 8009882:	e004      	b.n	800988e <USBH_MSC_RdWrProcess+0x1fe>
      break;
 8009884:	bf00      	nop
 8009886:	e002      	b.n	800988e <USBH_MSC_RdWrProcess+0x1fe>
      break;
 8009888:	bf00      	nop
 800988a:	e000      	b.n	800988e <USBH_MSC_RdWrProcess+0x1fe>
      break;
 800988c:	bf00      	nop

  }
  return error;
 800988e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3718      	adds	r7, #24
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	08010408 	.word	0x08010408
 800989c:	08010418 	.word	0x08010418
 80098a0:	08010434 	.word	0x08010434
 80098a4:	080103a8 	.word	0x080103a8

080098a8 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	460b      	mov	r3, r1
 80098b2:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b0b      	cmp	r3, #11
 80098c6:	d10c      	bne.n	80098e2 <USBH_MSC_UnitIsReady+0x3a>
 80098c8:	78fb      	ldrb	r3, [r7, #3]
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	2134      	movs	r1, #52	; 0x34
 80098ce:	fb01 f303 	mul.w	r3, r1, r3
 80098d2:	4413      	add	r3, r2
 80098d4:	3391      	adds	r3, #145	; 0x91
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d102      	bne.n	80098e2 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80098dc:	2301      	movs	r3, #1
 80098de:	73fb      	strb	r3, [r7, #15]
 80098e0:	e001      	b.n	80098e6 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3714      	adds	r7, #20
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	460b      	mov	r3, r1
 80098fe:	607a      	str	r2, [r7, #4]
 8009900:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009908:	69db      	ldr	r3, [r3, #28]
 800990a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b0b      	cmp	r3, #11
 8009914:	d10d      	bne.n	8009932 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009916:	7afb      	ldrb	r3, [r7, #11]
 8009918:	2234      	movs	r2, #52	; 0x34
 800991a:	fb02 f303 	mul.w	r3, r2, r3
 800991e:	3390      	adds	r3, #144	; 0x90
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	4413      	add	r3, r2
 8009924:	2234      	movs	r2, #52	; 0x34
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f005 fa6d 	bl	800ee08 <memcpy>
    return USBH_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	e000      	b.n	8009934 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009932:	2302      	movs	r3, #2
  }
}
 8009934:	4618      	mov	r0, r3
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af02      	add	r7, sp, #8
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	607a      	str	r2, [r7, #4]
 8009946:	603b      	str	r3, [r7, #0]
 8009948:	460b      	mov	r3, r1
 800994a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009952:	69db      	ldr	r3, [r3, #28]
 8009954:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800995c:	b2db      	uxtb	r3, r3
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00e      	beq.n	8009980 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009968:	2b0b      	cmp	r3, #11
 800996a:	d109      	bne.n	8009980 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800996c:	7afb      	ldrb	r3, [r7, #11]
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	2134      	movs	r1, #52	; 0x34
 8009972:	fb01 f303 	mul.w	r3, r1, r3
 8009976:	4413      	add	r3, r2
 8009978:	3390      	adds	r3, #144	; 0x90
 800997a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800997c:	2b01      	cmp	r3, #1
 800997e:	d001      	beq.n	8009984 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009980:	2302      	movs	r3, #2
 8009982:	e040      	b.n	8009a06 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	2206      	movs	r2, #6
 8009988:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800998a:	7afb      	ldrb	r3, [r7, #11]
 800998c:	697a      	ldr	r2, [r7, #20]
 800998e:	2134      	movs	r1, #52	; 0x34
 8009990:	fb01 f303 	mul.w	r3, r1, r3
 8009994:	4413      	add	r3, r2
 8009996:	3390      	adds	r3, #144	; 0x90
 8009998:	2206      	movs	r2, #6
 800999a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800999c:	7afb      	ldrb	r3, [r7, #11]
 800999e:	b29a      	uxth	r2, r3
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80099a6:	7af9      	ldrb	r1, [r7, #11]
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 fd78 	bl	800a4a6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80099bc:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80099be:	e016      	b.n	80099ee <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	1ad2      	subs	r2, r2, r3
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	f242 7110 	movw	r1, #10000	; 0x2710
 80099d0:	fb01 f303 	mul.w	r3, r1, r3
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d805      	bhi.n	80099e4 <USBH_MSC_Read+0xa8>
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d104      	bne.n	80099ee <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	2201      	movs	r2, #1
 80099e8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80099ea:	2302      	movs	r3, #2
 80099ec:	e00b      	b.n	8009a06 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80099ee:	7afb      	ldrb	r3, [r7, #11]
 80099f0:	4619      	mov	r1, r3
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f7ff fe4c 	bl	8009690 <USBH_MSC_RdWrProcess>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d0e0      	beq.n	80099c0 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	2201      	movs	r2, #1
 8009a02:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3718      	adds	r7, #24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b088      	sub	sp, #32
 8009a12:	af02      	add	r7, sp, #8
 8009a14:	60f8      	str	r0, [r7, #12]
 8009a16:	607a      	str	r2, [r7, #4]
 8009a18:	603b      	str	r3, [r7, #0]
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a24:	69db      	ldr	r3, [r3, #28]
 8009a26:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00e      	beq.n	8009a52 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009a3a:	2b0b      	cmp	r3, #11
 8009a3c:	d109      	bne.n	8009a52 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009a3e:	7afb      	ldrb	r3, [r7, #11]
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	2134      	movs	r1, #52	; 0x34
 8009a44:	fb01 f303 	mul.w	r3, r1, r3
 8009a48:	4413      	add	r3, r2
 8009a4a:	3390      	adds	r3, #144	; 0x90
 8009a4c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d001      	beq.n	8009a56 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009a52:	2302      	movs	r3, #2
 8009a54:	e040      	b.n	8009ad8 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2207      	movs	r2, #7
 8009a5a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009a5c:	7afb      	ldrb	r3, [r7, #11]
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	2134      	movs	r1, #52	; 0x34
 8009a62:	fb01 f303 	mul.w	r3, r1, r3
 8009a66:	4413      	add	r3, r2
 8009a68:	3390      	adds	r3, #144	; 0x90
 8009a6a:	2207      	movs	r2, #7
 8009a6c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009a6e:	7afb      	ldrb	r3, [r7, #11]
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009a78:	7af9      	ldrb	r1, [r7, #11]
 8009a7a:	6a3b      	ldr	r3, [r7, #32]
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 fca4 	bl	800a3d0 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a8e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009a90:	e016      	b.n	8009ac0 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	1ad2      	subs	r2, r2, r3
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
 8009a9e:	f242 7110 	movw	r1, #10000	; 0x2710
 8009aa2:	fb01 f303 	mul.w	r3, r1, r3
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d805      	bhi.n	8009ab6 <USBH_MSC_Write+0xa8>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d104      	bne.n	8009ac0 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009abc:	2302      	movs	r3, #2
 8009abe:	e00b      	b.n	8009ad8 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009ac0:	7afb      	ldrb	r3, [r7, #11]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f7ff fde3 	bl	8009690 <USBH_MSC_RdWrProcess>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d0e0      	beq.n	8009a92 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2221      	movs	r2, #33	; 0x21
 8009aec:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	22ff      	movs	r2, #255	; 0xff
 8009af2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009b06:	2200      	movs	r2, #0
 8009b08:	2100      	movs	r1, #0
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f001 ff67 	bl	800b9de <USBH_CtlReq>
 8009b10:	4603      	mov	r3, r0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	22a1      	movs	r2, #161	; 0xa1
 8009b28:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	22fe      	movs	r2, #254	; 0xfe
 8009b2e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009b42:	2201      	movs	r2, #1
 8009b44:	6839      	ldr	r1, [r7, #0]
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f001 ff49 	bl	800b9de <USBH_CtlReq>
 8009b4c:	4603      	mov	r3, r0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
	...

08009b58 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	4a09      	ldr	r2, [pc, #36]	; (8009b94 <USBH_MSC_BOT_Init+0x3c>)
 8009b6e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	4a09      	ldr	r2, [pc, #36]	; (8009b98 <USBH_MSC_BOT_Init+0x40>)
 8009b74:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009b86:	2300      	movs	r3, #0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	43425355 	.word	0x43425355
 8009b98:	20304050 	.word	0x20304050

08009b9c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b088      	sub	sp, #32
 8009ba0:	af02      	add	r7, sp, #8
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009bac:	2301      	movs	r3, #1
 8009bae:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bbe:	69db      	ldr	r3, [r3, #28]
 8009bc0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	2b0a      	cmp	r3, #10
 8009bd0:	f200 819e 	bhi.w	8009f10 <USBH_MSC_BOT_Process+0x374>
 8009bd4:	a201      	add	r2, pc, #4	; (adr r2, 8009bdc <USBH_MSC_BOT_Process+0x40>)
 8009bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bda:	bf00      	nop
 8009bdc:	08009c09 	.word	0x08009c09
 8009be0:	08009c31 	.word	0x08009c31
 8009be4:	08009c9b 	.word	0x08009c9b
 8009be8:	08009cb9 	.word	0x08009cb9
 8009bec:	08009d3d 	.word	0x08009d3d
 8009bf0:	08009d5f 	.word	0x08009d5f
 8009bf4:	08009df7 	.word	0x08009df7
 8009bf8:	08009e13 	.word	0x08009e13
 8009bfc:	08009e65 	.word	0x08009e65
 8009c00:	08009e95 	.word	0x08009e95
 8009c04:	08009ef7 	.word	0x08009ef7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	78fa      	ldrb	r2, [r7, #3]
 8009c0c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	2202      	movs	r2, #2
 8009c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	795b      	ldrb	r3, [r3, #5]
 8009c22:	2201      	movs	r2, #1
 8009c24:	9200      	str	r2, [sp, #0]
 8009c26:	221f      	movs	r2, #31
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f002 f8f4 	bl	800be16 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009c2e:	e17e      	b.n	8009f2e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	795b      	ldrb	r3, [r3, #5]
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f004 ffce 	bl	800ebd8 <USBH_LL_GetURBState>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009c40:	7d3b      	ldrb	r3, [r7, #20]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d118      	bne.n	8009c78 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00f      	beq.n	8009c6e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009c54:	b25b      	sxtb	r3, r3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	da04      	bge.n	8009c64 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	2203      	movs	r2, #3
 8009c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009c62:	e157      	b.n	8009f14 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	2205      	movs	r2, #5
 8009c68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c6c:	e152      	b.n	8009f14 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	2207      	movs	r2, #7
 8009c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c76:	e14d      	b.n	8009f14 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009c78:	7d3b      	ldrb	r3, [r7, #20]
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d104      	bne.n	8009c88 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c86:	e145      	b.n	8009f14 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009c88:	7d3b      	ldrb	r3, [r7, #20]
 8009c8a:	2b05      	cmp	r3, #5
 8009c8c:	f040 8142 	bne.w	8009f14 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	220a      	movs	r2, #10
 8009c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c98:	e13c      	b.n	8009f14 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	895a      	ldrh	r2, [r3, #10]
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	791b      	ldrb	r3, [r3, #4]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f002 f8d9 	bl	800be60 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	2204      	movs	r2, #4
 8009cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009cb6:	e13a      	b.n	8009f2e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	791b      	ldrb	r3, [r3, #4]
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f004 ff8a 	bl	800ebd8 <USBH_LL_GetURBState>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009cc8:	7d3b      	ldrb	r3, [r7, #20]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d12d      	bne.n	8009d2a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	8952      	ldrh	r2, [r2, #10]
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d910      	bls.n	8009cfc <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	8952      	ldrh	r2, [r2, #10]
 8009ce4:	441a      	add	r2, r3
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	8952      	ldrh	r2, [r2, #10]
 8009cf4:	1a9a      	subs	r2, r3, r2
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	65da      	str	r2, [r3, #92]	; 0x5c
 8009cfa:	e002      	b.n	8009d02 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00a      	beq.n	8009d20 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	895a      	ldrh	r2, [r3, #10]
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	791b      	ldrb	r3, [r3, #4]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f002 f8a1 	bl	800be60 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009d1e:	e0fb      	b.n	8009f18 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	2207      	movs	r2, #7
 8009d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d28:	e0f6      	b.n	8009f18 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8009d2a:	7d3b      	ldrb	r3, [r7, #20]
 8009d2c:	2b05      	cmp	r3, #5
 8009d2e:	f040 80f3 	bne.w	8009f18 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	2209      	movs	r2, #9
 8009d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d3a:	e0ed      	b.n	8009f18 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	891a      	ldrh	r2, [r3, #8]
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	795b      	ldrb	r3, [r3, #5]
 8009d4a:	2001      	movs	r0, #1
 8009d4c:	9000      	str	r0, [sp, #0]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f002 f861 	bl	800be16 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	2206      	movs	r2, #6
 8009d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d5c:	e0e7      	b.n	8009f2e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	795b      	ldrb	r3, [r3, #5]
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f004 ff37 	bl	800ebd8 <USBH_LL_GetURBState>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009d6e:	7d3b      	ldrb	r3, [r7, #20]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d12f      	bne.n	8009dd4 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	8912      	ldrh	r2, [r2, #8]
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d910      	bls.n	8009da2 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	8912      	ldrh	r2, [r2, #8]
 8009d8a:	441a      	add	r2, r3
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	8912      	ldrh	r2, [r2, #8]
 8009d9a:	1a9a      	subs	r2, r3, r2
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009da0:	e002      	b.n	8009da8 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	2200      	movs	r2, #0
 8009da6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00c      	beq.n	8009dca <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	891a      	ldrh	r2, [r3, #8]
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	795b      	ldrb	r3, [r3, #5]
 8009dbe:	2001      	movs	r0, #1
 8009dc0:	9000      	str	r0, [sp, #0]
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f002 f827 	bl	800be16 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009dc8:	e0a8      	b.n	8009f1c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	2207      	movs	r2, #7
 8009dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009dd2:	e0a3      	b.n	8009f1c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009dd4:	7d3b      	ldrb	r3, [r7, #20]
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d104      	bne.n	8009de4 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	2205      	movs	r2, #5
 8009dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009de2:	e09b      	b.n	8009f1c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009de4:	7d3b      	ldrb	r3, [r7, #20]
 8009de6:	2b05      	cmp	r3, #5
 8009de8:	f040 8098 	bne.w	8009f1c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	220a      	movs	r2, #10
 8009df0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009df4:	e092      	b.n	8009f1c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	791b      	ldrb	r3, [r3, #4]
 8009e00:	220d      	movs	r2, #13
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f002 f82c 	bl	800be60 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	2208      	movs	r2, #8
 8009e0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e10:	e08d      	b.n	8009f2e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	791b      	ldrb	r3, [r3, #4]
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f004 fedd 	bl	800ebd8 <USBH_LL_GetURBState>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009e22:	7d3b      	ldrb	r3, [r7, #20]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d115      	bne.n	8009e54 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 f8a9 	bl	8009f90 <USBH_MSC_DecodeCSW>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009e42:	7d7b      	ldrb	r3, [r7, #21]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d102      	bne.n	8009e4e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009e4c:	e068      	b.n	8009f20 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009e4e:	2302      	movs	r3, #2
 8009e50:	75fb      	strb	r3, [r7, #23]
      break;
 8009e52:	e065      	b.n	8009f20 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009e54:	7d3b      	ldrb	r3, [r7, #20]
 8009e56:	2b05      	cmp	r3, #5
 8009e58:	d162      	bne.n	8009f20 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	2209      	movs	r2, #9
 8009e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e62:	e05d      	b.n	8009f20 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009e64:	78fb      	ldrb	r3, [r7, #3]
 8009e66:	2200      	movs	r2, #0
 8009e68:	4619      	mov	r1, r3
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f864 	bl	8009f38 <USBH_MSC_BOT_Abort>
 8009e70:	4603      	mov	r3, r0
 8009e72:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009e74:	7dbb      	ldrb	r3, [r7, #22]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d104      	bne.n	8009e84 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	2207      	movs	r2, #7
 8009e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009e82:	e04f      	b.n	8009f24 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009e84:	7dbb      	ldrb	r3, [r7, #22]
 8009e86:	2b04      	cmp	r3, #4
 8009e88:	d14c      	bne.n	8009f24 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	220b      	movs	r2, #11
 8009e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e92:	e047      	b.n	8009f24 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009e94:	78fb      	ldrb	r3, [r7, #3]
 8009e96:	2201      	movs	r2, #1
 8009e98:	4619      	mov	r1, r3
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f84c 	bl	8009f38 <USBH_MSC_BOT_Abort>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009ea4:	7dbb      	ldrb	r3, [r7, #22]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d11d      	bne.n	8009ee6 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	795b      	ldrb	r3, [r3, #5]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f004 feeb 	bl	800ec8c <USBH_LL_GetToggle>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	7959      	ldrb	r1, [r3, #5]
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
 8009ec0:	f1c3 0301 	rsb	r3, r3, #1
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f004 feaf 	bl	800ec2c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	791b      	ldrb	r3, [r3, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f004 fea8 	bl	800ec2c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	2209      	movs	r2, #9
 8009ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009ee4:	e020      	b.n	8009f28 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009ee6:	7dbb      	ldrb	r3, [r7, #22]
 8009ee8:	2b04      	cmp	r3, #4
 8009eea:	d11d      	bne.n	8009f28 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	220b      	movs	r2, #11
 8009ef0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ef4:	e018      	b.n	8009f28 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7ff fdf2 	bl	8009ae0 <USBH_MSC_BOT_REQ_Reset>
 8009efc:	4603      	mov	r3, r0
 8009efe:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009f00:	7dfb      	ldrb	r3, [r7, #23]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d112      	bne.n	8009f2c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009f0e:	e00d      	b.n	8009f2c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009f10:	bf00      	nop
 8009f12:	e00c      	b.n	8009f2e <USBH_MSC_BOT_Process+0x392>
      break;
 8009f14:	bf00      	nop
 8009f16:	e00a      	b.n	8009f2e <USBH_MSC_BOT_Process+0x392>
      break;
 8009f18:	bf00      	nop
 8009f1a:	e008      	b.n	8009f2e <USBH_MSC_BOT_Process+0x392>
      break;
 8009f1c:	bf00      	nop
 8009f1e:	e006      	b.n	8009f2e <USBH_MSC_BOT_Process+0x392>
      break;
 8009f20:	bf00      	nop
 8009f22:	e004      	b.n	8009f2e <USBH_MSC_BOT_Process+0x392>
      break;
 8009f24:	bf00      	nop
 8009f26:	e002      	b.n	8009f2e <USBH_MSC_BOT_Process+0x392>
      break;
 8009f28:	bf00      	nop
 8009f2a:	e000      	b.n	8009f2e <USBH_MSC_BOT_Process+0x392>
      break;
 8009f2c:	bf00      	nop
  }
  return status;
 8009f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3718      	adds	r7, #24
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
 8009f44:	4613      	mov	r3, r2
 8009f46:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009f48:	2302      	movs	r3, #2
 8009f4a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f52:	69db      	ldr	r3, [r3, #28]
 8009f54:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009f56:	78bb      	ldrb	r3, [r7, #2]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <USBH_MSC_BOT_Abort+0x2a>
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d009      	beq.n	8009f74 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009f60:	e011      	b.n	8009f86 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	79db      	ldrb	r3, [r3, #7]
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 fb58 	bl	800b61e <USBH_ClrFeature>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	73fb      	strb	r3, [r7, #15]
      break;
 8009f72:	e008      	b.n	8009f86 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	799b      	ldrb	r3, [r3, #6]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f001 fb4f 	bl	800b61e <USBH_ClrFeature>
 8009f80:	4603      	mov	r3, r0
 8009f82:	73fb      	strb	r3, [r7, #15]
      break;
 8009f84:	bf00      	nop
  }
  return status;
 8009f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f9e:	69db      	ldr	r3, [r3, #28]
 8009fa0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	791b      	ldrb	r3, [r3, #4]
 8009faa:	4619      	mov	r1, r3
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f004 fd81 	bl	800eab4 <USBH_LL_GetLastXferSize>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b0d      	cmp	r3, #13
 8009fb6:	d002      	beq.n	8009fbe <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009fb8:	2302      	movs	r3, #2
 8009fba:	73fb      	strb	r3, [r7, #15]
 8009fbc:	e024      	b.n	800a008 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fc2:	4a14      	ldr	r2, [pc, #80]	; (800a014 <USBH_MSC_DecodeCSW+0x84>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d11d      	bne.n	800a004 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d119      	bne.n	800a008 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d102      	bne.n	8009fe4 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	73fb      	strb	r3, [r7, #15]
 8009fe2:	e011      	b.n	800a008 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d102      	bne.n	8009ff4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	73fb      	strb	r3, [r7, #15]
 8009ff2:	e009      	b.n	800a008 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d104      	bne.n	800a008 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009ffe:	2302      	movs	r3, #2
 800a000:	73fb      	strb	r3, [r7, #15]
 800a002:	e001      	b.n	800a008 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a004:	2302      	movs	r3, #2
 800a006:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a008:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	53425355 	.word	0x53425355

0800a018 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a024:	2302      	movs	r3, #2
 800a026:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a02e:	69db      	ldr	r3, [r3, #28]
 800a030:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d002      	beq.n	800a042 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d021      	beq.n	800a084 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a040:	e028      	b.n	800a094 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	2200      	movs	r2, #0
 800a046:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	220a      	movs	r2, #10
 800a054:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	3363      	adds	r3, #99	; 0x63
 800a05c:	2210      	movs	r2, #16
 800a05e:	2100      	movs	r1, #0
 800a060:	4618      	mov	r0, r3
 800a062:	f004 fedf 	bl	800ee24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2201      	movs	r2, #1
 800a072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	2202      	movs	r2, #2
 800a07a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800a07e:	2301      	movs	r3, #1
 800a080:	73fb      	strb	r3, [r7, #15]
      break;
 800a082:	e007      	b.n	800a094 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a084:	78fb      	ldrb	r3, [r7, #3]
 800a086:	4619      	mov	r1, r3
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7ff fd87 	bl	8009b9c <USBH_MSC_BOT_Process>
 800a08e:	4603      	mov	r3, r0
 800a090:	73fb      	strb	r3, [r7, #15]
      break;
 800a092:	bf00      	nop
  }

  return error;
 800a094:	7bfb      	ldrb	r3, [r7, #15]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b086      	sub	sp, #24
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	60f8      	str	r0, [r7, #12]
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	607a      	str	r2, [r7, #4]
 800a0aa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0b6:	69db      	ldr	r3, [r3, #28]
 800a0b8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d002      	beq.n	800a0ca <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d027      	beq.n	800a118 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a0c8:	e05f      	b.n	800a18a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	2208      	movs	r2, #8
 800a0ce:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	2280      	movs	r2, #128	; 0x80
 800a0d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	220a      	movs	r2, #10
 800a0dc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	3363      	adds	r3, #99	; 0x63
 800a0e4:	2210      	movs	r2, #16
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f004 fe9b 	bl	800ee24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	2225      	movs	r2, #37	; 0x25
 800a0f2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	2202      	movs	r2, #2
 800a102:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	f103 0210 	add.w	r2, r3, #16
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a112:	2301      	movs	r3, #1
 800a114:	75fb      	strb	r3, [r7, #23]
      break;
 800a116:	e038      	b.n	800a18a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a118:	7afb      	ldrb	r3, [r7, #11]
 800a11a:	4619      	mov	r1, r3
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f7ff fd3d 	bl	8009b9c <USBH_MSC_BOT_Process>
 800a122:	4603      	mov	r3, r0
 800a124:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a126:	7dfb      	ldrb	r3, [r7, #23]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d12d      	bne.n	800a188 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a132:	3303      	adds	r3, #3
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	461a      	mov	r2, r3
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a13e:	3302      	adds	r3, #2
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	021b      	lsls	r3, r3, #8
 800a144:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a14c:	3301      	adds	r3, #1
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a152:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	061b      	lsls	r3, r3, #24
 800a15e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a16a:	3307      	adds	r3, #7
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	b29a      	uxth	r2, r3
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a176:	3306      	adds	r3, #6
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	021b      	lsls	r3, r3, #8
 800a17e:	b29b      	uxth	r3, r3
 800a180:	4313      	orrs	r3, r2
 800a182:	b29a      	uxth	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	809a      	strh	r2, [r3, #4]
      break;
 800a188:	bf00      	nop
  }

  return error;
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3718      	adds	r7, #24
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	460b      	mov	r3, r1
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1ac:	69db      	ldr	r3, [r3, #28]
 800a1ae:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d002      	beq.n	800a1c0 <USBH_MSC_SCSI_Inquiry+0x2c>
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d03d      	beq.n	800a23a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a1be:	e089      	b.n	800a2d4 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	2224      	movs	r2, #36	; 0x24
 800a1c4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	2280      	movs	r2, #128	; 0x80
 800a1ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	220a      	movs	r2, #10
 800a1d2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	3363      	adds	r3, #99	; 0x63
 800a1da:	220a      	movs	r2, #10
 800a1dc:	2100      	movs	r1, #0
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f004 fe20 	bl	800ee24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	2212      	movs	r2, #18
 800a1e8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a1ec:	7afb      	ldrb	r3, [r7, #11]
 800a1ee:	015b      	lsls	r3, r3, #5
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	2224      	movs	r2, #36	; 0x24
 800a20c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	2200      	movs	r2, #0
 800a214:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	2202      	movs	r2, #2
 800a224:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	f103 0210 	add.w	r2, r3, #16
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a234:	2301      	movs	r3, #1
 800a236:	75fb      	strb	r3, [r7, #23]
      break;
 800a238:	e04c      	b.n	800a2d4 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a23a:	7afb      	ldrb	r3, [r7, #11]
 800a23c:	4619      	mov	r1, r3
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f7ff fcac 	bl	8009b9c <USBH_MSC_BOT_Process>
 800a244:	4603      	mov	r3, r0
 800a246:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a248:	7dfb      	ldrb	r3, [r7, #23]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d141      	bne.n	800a2d2 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a24e:	2222      	movs	r2, #34	; 0x22
 800a250:	2100      	movs	r1, #0
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f004 fde6 	bl	800ee24 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	f003 031f 	and.w	r3, r3, #31
 800a264:	b2da      	uxtb	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	095b      	lsrs	r3, r3, #5
 800a274:	b2da      	uxtb	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a280:	3301      	adds	r3, #1
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	b25b      	sxtb	r3, r3
 800a286:	2b00      	cmp	r3, #0
 800a288:	da03      	bge.n	800a292 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2201      	movs	r2, #1
 800a28e:	709a      	strb	r2, [r3, #2]
 800a290:	e002      	b.n	800a298 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	1cd8      	adds	r0, r3, #3
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2a2:	3308      	adds	r3, #8
 800a2a4:	2208      	movs	r2, #8
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	f004 fdae 	bl	800ee08 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f103 000c 	add.w	r0, r3, #12
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2b8:	3310      	adds	r3, #16
 800a2ba:	2210      	movs	r2, #16
 800a2bc:	4619      	mov	r1, r3
 800a2be:	f004 fda3 	bl	800ee08 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	331d      	adds	r3, #29
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a2cc:	3220      	adds	r2, #32
 800a2ce:	6812      	ldr	r2, [r2, #0]
 800a2d0:	601a      	str	r2, [r3, #0]
      break;
 800a2d2:	bf00      	nop
  }

  return error;
 800a2d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3718      	adds	r7, #24
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b086      	sub	sp, #24
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	60f8      	str	r0, [r7, #12]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	607a      	str	r2, [r7, #4]
 800a2ea:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2f6:	69db      	ldr	r3, [r3, #28]
 800a2f8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a300:	2b01      	cmp	r3, #1
 800a302:	d002      	beq.n	800a30a <USBH_MSC_SCSI_RequestSense+0x2c>
 800a304:	2b02      	cmp	r3, #2
 800a306:	d03d      	beq.n	800a384 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a308:	e05d      	b.n	800a3c6 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	220e      	movs	r2, #14
 800a30e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	2280      	movs	r2, #128	; 0x80
 800a314:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	220a      	movs	r2, #10
 800a31c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	3363      	adds	r3, #99	; 0x63
 800a324:	2210      	movs	r2, #16
 800a326:	2100      	movs	r1, #0
 800a328:	4618      	mov	r0, r3
 800a32a:	f004 fd7b 	bl	800ee24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	2203      	movs	r2, #3
 800a332:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a336:	7afb      	ldrb	r3, [r7, #11]
 800a338:	015b      	lsls	r3, r3, #5
 800a33a:	b2da      	uxtb	r2, r3
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	220e      	movs	r2, #14
 800a356:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	2201      	movs	r2, #1
 800a366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	2202      	movs	r2, #2
 800a36e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	f103 0210 	add.w	r2, r3, #16
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a37e:	2301      	movs	r3, #1
 800a380:	75fb      	strb	r3, [r7, #23]
      break;
 800a382:	e020      	b.n	800a3c6 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a384:	7afb      	ldrb	r3, [r7, #11]
 800a386:	4619      	mov	r1, r3
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f7ff fc07 	bl	8009b9c <USBH_MSC_BOT_Process>
 800a38e:	4603      	mov	r3, r0
 800a390:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a392:	7dfb      	ldrb	r3, [r7, #23]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d115      	bne.n	800a3c4 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a39e:	3302      	adds	r3, #2
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	f003 030f 	and.w	r3, r3, #15
 800a3a6:	b2da      	uxtb	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3b2:	7b1a      	ldrb	r2, [r3, #12]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3be:	7b5a      	ldrb	r2, [r3, #13]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	709a      	strb	r2, [r3, #2]
      break;
 800a3c4:	bf00      	nop
  }

  return error;
 800a3c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3718      	adds	r7, #24
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	607a      	str	r2, [r7, #4]
 800a3da:	603b      	str	r3, [r7, #0]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3ea:	69db      	ldr	r3, [r3, #28]
 800a3ec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d002      	beq.n	800a3fe <USBH_MSC_SCSI_Write+0x2e>
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	d047      	beq.n	800a48c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a3fc:	e04e      	b.n	800a49c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a404:	461a      	mov	r2, r3
 800a406:	6a3b      	ldr	r3, [r7, #32]
 800a408:	fb03 f202 	mul.w	r2, r3, r2
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	220a      	movs	r2, #10
 800a41c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	3363      	adds	r3, #99	; 0x63
 800a424:	2210      	movs	r2, #16
 800a426:	2100      	movs	r1, #0
 800a428:	4618      	mov	r0, r3
 800a42a:	f004 fcfb 	bl	800ee24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	222a      	movs	r2, #42	; 0x2a
 800a432:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a436:	79fa      	ldrb	r2, [r7, #7]
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a43e:	79ba      	ldrb	r2, [r7, #6]
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a446:	797a      	ldrb	r2, [r7, #5]
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a44e:	1d3b      	adds	r3, r7, #4
 800a450:	781a      	ldrb	r2, [r3, #0]
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a458:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a462:	f107 0320 	add.w	r3, r7, #32
 800a466:	781a      	ldrb	r2, [r3, #0]
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	2201      	movs	r2, #1
 800a472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	2202      	movs	r2, #2
 800a47a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	683a      	ldr	r2, [r7, #0]
 800a482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a486:	2301      	movs	r3, #1
 800a488:	75fb      	strb	r3, [r7, #23]
      break;
 800a48a:	e007      	b.n	800a49c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a48c:	7afb      	ldrb	r3, [r7, #11]
 800a48e:	4619      	mov	r1, r3
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f7ff fb83 	bl	8009b9c <USBH_MSC_BOT_Process>
 800a496:	4603      	mov	r3, r0
 800a498:	75fb      	strb	r3, [r7, #23]
      break;
 800a49a:	bf00      	nop
  }

  return error;
 800a49c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3718      	adds	r7, #24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b086      	sub	sp, #24
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	60f8      	str	r0, [r7, #12]
 800a4ae:	607a      	str	r2, [r7, #4]
 800a4b0:	603b      	str	r3, [r7, #0]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4c0:	69db      	ldr	r3, [r3, #28]
 800a4c2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d002      	beq.n	800a4d4 <USBH_MSC_SCSI_Read+0x2e>
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	d047      	beq.n	800a562 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a4d2:	e04e      	b.n	800a572 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a4da:	461a      	mov	r2, r3
 800a4dc:	6a3b      	ldr	r3, [r7, #32]
 800a4de:	fb03 f202 	mul.w	r2, r3, r2
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	2280      	movs	r2, #128	; 0x80
 800a4ea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	220a      	movs	r2, #10
 800a4f2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	3363      	adds	r3, #99	; 0x63
 800a4fa:	2210      	movs	r2, #16
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	4618      	mov	r0, r3
 800a500:	f004 fc90 	bl	800ee24 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	2228      	movs	r2, #40	; 0x28
 800a508:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a50c:	79fa      	ldrb	r2, [r7, #7]
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a514:	79ba      	ldrb	r2, [r7, #6]
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a51c:	797a      	ldrb	r2, [r7, #5]
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a524:	1d3b      	adds	r3, r7, #4
 800a526:	781a      	ldrb	r2, [r3, #0]
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a52e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a538:	f107 0320 	add.w	r3, r7, #32
 800a53c:	781a      	ldrb	r2, [r3, #0]
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	2202      	movs	r2, #2
 800a550:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a55c:	2301      	movs	r3, #1
 800a55e:	75fb      	strb	r3, [r7, #23]
      break;
 800a560:	e007      	b.n	800a572 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a562:	7afb      	ldrb	r3, [r7, #11]
 800a564:	4619      	mov	r1, r3
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f7ff fb18 	bl	8009b9c <USBH_MSC_BOT_Process>
 800a56c:	4603      	mov	r3, r0
 800a56e:	75fb      	strb	r3, [r7, #23]
      break;
 800a570:	bf00      	nop
  }

  return error;
 800a572:	7dfb      	ldrb	r3, [r7, #23]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3718      	adds	r7, #24
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	4613      	mov	r3, r2
 800a588:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10a      	bne.n	800a5a6 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800a590:	481c      	ldr	r0, [pc, #112]	; (800a604 <USBH_Init+0x88>)
 800a592:	f004 fcf9 	bl	800ef88 <iprintf>
 800a596:	481c      	ldr	r0, [pc, #112]	; (800a608 <USBH_Init+0x8c>)
 800a598:	f004 fcf6 	bl	800ef88 <iprintf>
 800a59c:	200a      	movs	r0, #10
 800a59e:	f004 fd0b 	bl	800efb8 <putchar>
    return USBH_FAIL;
 800a5a2:	2302      	movs	r3, #2
 800a5a4:	e029      	b.n	800a5fa <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	79fa      	ldrb	r2, [r7, #7]
 800a5aa:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f000 f824 	bl	800a60c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d003      	beq.n	800a5f2 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f004 f9aa 	bl	800e94c <USBH_LL_Init>

  return USBH_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	08010458 	.word	0x08010458
 800a608:	08010460 	.word	0x08010460

0800a60c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a614:	2300      	movs	r3, #0
 800a616:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a618:	2300      	movs	r3, #0
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	e009      	b.n	800a632 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	33e0      	adds	r3, #224	; 0xe0
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4413      	add	r3, r2
 800a628:	2200      	movs	r2, #0
 800a62a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	3301      	adds	r3, #1
 800a630:	60fb      	str	r3, [r7, #12]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2b0e      	cmp	r3, #14
 800a636:	d9f2      	bls.n	800a61e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a638:	2300      	movs	r3, #0
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	e009      	b.n	800a652 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4413      	add	r3, r2
 800a644:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a648:	2200      	movs	r2, #0
 800a64a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	3301      	adds	r3, #1
 800a650:	60fb      	str	r3, [r7, #12]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a658:	d3f1      	bcc.n	800a63e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2240      	movs	r2, #64	; 0x40
 800a67e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2201      	movs	r2, #1
 800a692:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3714      	adds	r7, #20
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d01f      	beq.n	800a708 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d10e      	bne.n	800a6f0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a6d8:	1c59      	adds	r1, r3, #1
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	33de      	adds	r3, #222	; 0xde
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	73fb      	strb	r3, [r7, #15]
 800a6ee:	e016      	b.n	800a71e <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800a6f0:	480d      	ldr	r0, [pc, #52]	; (800a728 <USBH_RegisterClass+0x74>)
 800a6f2:	f004 fc49 	bl	800ef88 <iprintf>
 800a6f6:	480d      	ldr	r0, [pc, #52]	; (800a72c <USBH_RegisterClass+0x78>)
 800a6f8:	f004 fc46 	bl	800ef88 <iprintf>
 800a6fc:	200a      	movs	r0, #10
 800a6fe:	f004 fc5b 	bl	800efb8 <putchar>
      status = USBH_FAIL;
 800a702:	2302      	movs	r3, #2
 800a704:	73fb      	strb	r3, [r7, #15]
 800a706:	e00a      	b.n	800a71e <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800a708:	4807      	ldr	r0, [pc, #28]	; (800a728 <USBH_RegisterClass+0x74>)
 800a70a:	f004 fc3d 	bl	800ef88 <iprintf>
 800a70e:	4808      	ldr	r0, [pc, #32]	; (800a730 <USBH_RegisterClass+0x7c>)
 800a710:	f004 fc3a 	bl	800ef88 <iprintf>
 800a714:	200a      	movs	r0, #10
 800a716:	f004 fc4f 	bl	800efb8 <putchar>
    status = USBH_FAIL;
 800a71a:	2302      	movs	r3, #2
 800a71c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	08010458 	.word	0x08010458
 800a72c:	08010474 	.word	0x08010474
 800a730:	08010490 	.word	0x08010490

0800a734 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a74a:	78fa      	ldrb	r2, [r7, #3]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d23c      	bcs.n	800a7ca <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	78fa      	ldrb	r2, [r7, #3]
 800a754:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800a758:	78fb      	ldrb	r3, [r7, #3]
 800a75a:	4619      	mov	r1, r3
 800a75c:	4823      	ldr	r0, [pc, #140]	; (800a7ec <USBH_SelectInterface+0xb8>)
 800a75e:	f004 fc13 	bl	800ef88 <iprintf>
 800a762:	200a      	movs	r0, #10
 800a764:	f004 fc28 	bl	800efb8 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800a768:	78fb      	ldrb	r3, [r7, #3]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	211a      	movs	r1, #26
 800a76e:	fb01 f303 	mul.w	r3, r1, r3
 800a772:	4413      	add	r3, r2
 800a774:	f203 3347 	addw	r3, r3, #839	; 0x347
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	4619      	mov	r1, r3
 800a77c:	481c      	ldr	r0, [pc, #112]	; (800a7f0 <USBH_SelectInterface+0xbc>)
 800a77e:	f004 fc03 	bl	800ef88 <iprintf>
 800a782:	200a      	movs	r0, #10
 800a784:	f004 fc18 	bl	800efb8 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800a788:	78fb      	ldrb	r3, [r7, #3]
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	211a      	movs	r1, #26
 800a78e:	fb01 f303 	mul.w	r3, r1, r3
 800a792:	4413      	add	r3, r2
 800a794:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	4619      	mov	r1, r3
 800a79c:	4815      	ldr	r0, [pc, #84]	; (800a7f4 <USBH_SelectInterface+0xc0>)
 800a79e:	f004 fbf3 	bl	800ef88 <iprintf>
 800a7a2:	200a      	movs	r0, #10
 800a7a4:	f004 fc08 	bl	800efb8 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800a7a8:	78fb      	ldrb	r3, [r7, #3]
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	211a      	movs	r1, #26
 800a7ae:	fb01 f303 	mul.w	r3, r1, r3
 800a7b2:	4413      	add	r3, r2
 800a7b4:	f203 3349 	addw	r3, r3, #841	; 0x349
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	480e      	ldr	r0, [pc, #56]	; (800a7f8 <USBH_SelectInterface+0xc4>)
 800a7be:	f004 fbe3 	bl	800ef88 <iprintf>
 800a7c2:	200a      	movs	r0, #10
 800a7c4:	f004 fbf8 	bl	800efb8 <putchar>
 800a7c8:	e00a      	b.n	800a7e0 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800a7ca:	480c      	ldr	r0, [pc, #48]	; (800a7fc <USBH_SelectInterface+0xc8>)
 800a7cc:	f004 fbdc 	bl	800ef88 <iprintf>
 800a7d0:	480b      	ldr	r0, [pc, #44]	; (800a800 <USBH_SelectInterface+0xcc>)
 800a7d2:	f004 fbd9 	bl	800ef88 <iprintf>
 800a7d6:	200a      	movs	r0, #10
 800a7d8:	f004 fbee 	bl	800efb8 <putchar>
    status = USBH_FAIL;
 800a7dc:	2302      	movs	r3, #2
 800a7de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	080104a8 	.word	0x080104a8
 800a7f0:	080104c8 	.word	0x080104c8
 800a7f4:	080104d8 	.word	0x080104d8
 800a7f8:	080104e8 	.word	0x080104e8
 800a7fc:	08010458 	.word	0x08010458
 800a800:	080104f8 	.word	0x080104f8

0800a804 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a804:	b480      	push	{r7}
 800a806:	b087      	sub	sp, #28
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	4608      	mov	r0, r1
 800a80e:	4611      	mov	r1, r2
 800a810:	461a      	mov	r2, r3
 800a812:	4603      	mov	r3, r0
 800a814:	70fb      	strb	r3, [r7, #3]
 800a816:	460b      	mov	r3, r1
 800a818:	70bb      	strb	r3, [r7, #2]
 800a81a:	4613      	mov	r3, r2
 800a81c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a81e:	2300      	movs	r3, #0
 800a820:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a822:	2300      	movs	r3, #0
 800a824:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a82c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a82e:	e025      	b.n	800a87c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a830:	7dfb      	ldrb	r3, [r7, #23]
 800a832:	221a      	movs	r2, #26
 800a834:	fb02 f303 	mul.w	r3, r2, r3
 800a838:	3308      	adds	r3, #8
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	4413      	add	r3, r2
 800a83e:	3302      	adds	r3, #2
 800a840:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	795b      	ldrb	r3, [r3, #5]
 800a846:	78fa      	ldrb	r2, [r7, #3]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d002      	beq.n	800a852 <USBH_FindInterface+0x4e>
 800a84c:	78fb      	ldrb	r3, [r7, #3]
 800a84e:	2bff      	cmp	r3, #255	; 0xff
 800a850:	d111      	bne.n	800a876 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a856:	78ba      	ldrb	r2, [r7, #2]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d002      	beq.n	800a862 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a85c:	78bb      	ldrb	r3, [r7, #2]
 800a85e:	2bff      	cmp	r3, #255	; 0xff
 800a860:	d109      	bne.n	800a876 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a866:	787a      	ldrb	r2, [r7, #1]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d002      	beq.n	800a872 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a86c:	787b      	ldrb	r3, [r7, #1]
 800a86e:	2bff      	cmp	r3, #255	; 0xff
 800a870:	d101      	bne.n	800a876 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a872:	7dfb      	ldrb	r3, [r7, #23]
 800a874:	e006      	b.n	800a884 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a876:	7dfb      	ldrb	r3, [r7, #23]
 800a878:	3301      	adds	r3, #1
 800a87a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a87c:	7dfb      	ldrb	r3, [r7, #23]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d9d6      	bls.n	800a830 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a882:	23ff      	movs	r3, #255	; 0xff
}
 800a884:	4618      	mov	r0, r3
 800a886:	371c      	adds	r7, #28
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f004 f893 	bl	800e9c4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a89e:	2101      	movs	r1, #1
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f004 f9ac 	bl	800ebfe <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b088      	sub	sp, #32
 800a8b4:	af04      	add	r7, sp, #16
 800a8b6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d102      	bne.n	800a8d2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2203      	movs	r2, #3
 800a8d0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	2b0b      	cmp	r3, #11
 800a8da:	f200 822b 	bhi.w	800ad34 <USBH_Process+0x484>
 800a8de:	a201      	add	r2, pc, #4	; (adr r2, 800a8e4 <USBH_Process+0x34>)
 800a8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e4:	0800a915 	.word	0x0800a915
 800a8e8:	0800a953 	.word	0x0800a953
 800a8ec:	0800a9d3 	.word	0x0800a9d3
 800a8f0:	0800acc3 	.word	0x0800acc3
 800a8f4:	0800ad35 	.word	0x0800ad35
 800a8f8:	0800aa77 	.word	0x0800aa77
 800a8fc:	0800ac45 	.word	0x0800ac45
 800a900:	0800aac5 	.word	0x0800aac5
 800a904:	0800aae5 	.word	0x0800aae5
 800a908:	0800ab11 	.word	0x0800ab11
 800a90c:	0800ab4b 	.word	0x0800ab4b
 800a910:	0800acab 	.word	0x0800acab
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f000 820b 	beq.w	800ad38 <USBH_Process+0x488>
      {
        USBH_UsrLog("USB Device Connected");
 800a922:	48b9      	ldr	r0, [pc, #740]	; (800ac08 <USBH_Process+0x358>)
 800a924:	f004 fb30 	bl	800ef88 <iprintf>
 800a928:	200a      	movs	r0, #10
 800a92a:	f004 fb45 	bl	800efb8 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a934:	20c8      	movs	r0, #200	; 0xc8
 800a936:	f004 f9d9 	bl	800ecec <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f004 f89f 	bl	800ea7e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a950:	e1f2      	b.n	800ad38 <USBH_Process+0x488>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d10d      	bne.n	800a978 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800a95c:	48ab      	ldr	r0, [pc, #684]	; (800ac0c <USBH_Process+0x35c>)
 800a95e:	f004 fb13 	bl	800ef88 <iprintf>
 800a962:	200a      	movs	r0, #10
 800a964:	f004 fb28 	bl	800efb8 <putchar>
        phost->device.RstCnt = 0U;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2202      	movs	r2, #2
 800a974:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a976:	e1ec      	b.n	800ad52 <USBH_Process+0x4a2>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a97e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a982:	d91a      	bls.n	800a9ba <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a98a:	3301      	adds	r3, #1
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a99a:	2b03      	cmp	r3, #3
 800a99c:	d909      	bls.n	800a9b2 <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800a99e:	489c      	ldr	r0, [pc, #624]	; (800ac10 <USBH_Process+0x360>)
 800a9a0:	f004 faf2 	bl	800ef88 <iprintf>
 800a9a4:	200a      	movs	r0, #10
 800a9a6:	f004 fb07 	bl	800efb8 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	220d      	movs	r2, #13
 800a9ae:	701a      	strb	r2, [r3, #0]
      break;
 800a9b0:	e1cf      	b.n	800ad52 <USBH_Process+0x4a2>
            phost->gState = HOST_IDLE;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	701a      	strb	r2, [r3, #0]
      break;
 800a9b8:	e1cb      	b.n	800ad52 <USBH_Process+0x4a2>
          phost->Timeout += 10U;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a9c0:	f103 020a 	add.w	r2, r3, #10
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a9ca:	200a      	movs	r0, #10
 800a9cc:	f004 f98e 	bl	800ecec <USBH_Delay>
      break;
 800a9d0:	e1bf      	b.n	800ad52 <USBH_Process+0x4a2>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d005      	beq.n	800a9e8 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a9e2:	2104      	movs	r1, #4
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a9e8:	2064      	movs	r0, #100	; 0x64
 800a9ea:	f004 f97f 	bl	800ecec <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f004 f81e 	bl	800ea30 <USBH_LL_GetSpeed>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2205      	movs	r2, #5
 800aa02:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800aa04:	2100      	movs	r1, #0
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f001 fa77 	bl	800befa <USBH_AllocPipe>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	461a      	mov	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800aa14:	2180      	movs	r1, #128	; 0x80
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f001 fa6f 	bl	800befa <USBH_AllocPipe>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	461a      	mov	r2, r3
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	7919      	ldrb	r1, [r3, #4]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800aa38:	b292      	uxth	r2, r2
 800aa3a:	9202      	str	r2, [sp, #8]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	9201      	str	r2, [sp, #4]
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	4603      	mov	r3, r0
 800aa44:	2280      	movs	r2, #128	; 0x80
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f001 fa28 	bl	800be9c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	7959      	ldrb	r1, [r3, #5]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800aa60:	b292      	uxth	r2, r2
 800aa62:	9202      	str	r2, [sp, #8]
 800aa64:	2200      	movs	r2, #0
 800aa66:	9201      	str	r2, [sp, #4]
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f001 fa14 	bl	800be9c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa74:	e16d      	b.n	800ad52 <USBH_Process+0x4a2>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f97a 	bl	800ad70 <USBH_HandleEnum>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f040 8159 	bne.w	800ad3c <USBH_Process+0x48c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800aa8a:	4862      	ldr	r0, [pc, #392]	; (800ac14 <USBH_Process+0x364>)
 800aa8c:	f004 fa7c 	bl	800ef88 <iprintf>
 800aa90:	200a      	movs	r0, #10
 800aa92:	f004 fa91 	bl	800efb8 <putchar>

        phost->device.current_interface = 0U;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d109      	bne.n	800aabc <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800aaa8:	485b      	ldr	r0, [pc, #364]	; (800ac18 <USBH_Process+0x368>)
 800aaaa:	f004 fa6d 	bl	800ef88 <iprintf>
 800aaae:	200a      	movs	r0, #10
 800aab0:	f004 fa82 	bl	800efb8 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2208      	movs	r2, #8
 800aab8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aaba:	e13f      	b.n	800ad3c <USBH_Process+0x48c>
          phost->gState = HOST_INPUT;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2207      	movs	r2, #7
 800aac0:	701a      	strb	r2, [r3, #0]
      break;
 800aac2:	e13b      	b.n	800ad3c <USBH_Process+0x48c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f000 8138 	beq.w	800ad40 <USBH_Process+0x490>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aad6:	2101      	movs	r1, #1
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2208      	movs	r2, #8
 800aae0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800aae2:	e12d      	b.n	800ad40 <USBH_Process+0x490>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	4619      	mov	r1, r3
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fd4e 	bl	800b590 <USBH_SetCfg>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f040 8124 	bne.w	800ad44 <USBH_Process+0x494>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2209      	movs	r2, #9
 800ab00:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800ab02:	4846      	ldr	r0, [pc, #280]	; (800ac1c <USBH_Process+0x36c>)
 800ab04:	f004 fa40 	bl	800ef88 <iprintf>
 800ab08:	200a      	movs	r0, #10
 800ab0a:	f004 fa55 	bl	800efb8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab0e:	e119      	b.n	800ad44 <USBH_Process+0x494>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ab16:	f003 0320 	and.w	r3, r3, #32
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d011      	beq.n	800ab42 <USBH_Process+0x292>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ab1e:	2101      	movs	r1, #1
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fd58 	bl	800b5d6 <USBH_SetFeature>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f040 810d 	bne.w	800ad48 <USBH_Process+0x498>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800ab2e:	483c      	ldr	r0, [pc, #240]	; (800ac20 <USBH_Process+0x370>)
 800ab30:	f004 fa2a 	bl	800ef88 <iprintf>
 800ab34:	200a      	movs	r0, #10
 800ab36:	f004 fa3f 	bl	800efb8 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	220a      	movs	r2, #10
 800ab3e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab40:	e102      	b.n	800ad48 <USBH_Process+0x498>
        phost->gState = HOST_CHECK_CLASS;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	220a      	movs	r2, #10
 800ab46:	701a      	strb	r2, [r3, #0]
      break;
 800ab48:	e0fe      	b.n	800ad48 <USBH_Process+0x498>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d106      	bne.n	800ab62 <USBH_Process+0x2b2>
      {
        USBH_UsrLog("No Class has been registered.");
 800ab54:	4833      	ldr	r0, [pc, #204]	; (800ac24 <USBH_Process+0x374>)
 800ab56:	f004 fa17 	bl	800ef88 <iprintf>
 800ab5a:	200a      	movs	r0, #10
 800ab5c:	f004 fa2c 	bl	800efb8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab60:	e0f7      	b.n	800ad52 <USBH_Process+0x4a2>
        phost->pActiveClass = NULL;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	73fb      	strb	r3, [r7, #15]
 800ab6e:	e016      	b.n	800ab9e <USBH_Process+0x2ee>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ab70:	7bfa      	ldrb	r2, [r7, #15]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	32de      	adds	r2, #222	; 0xde
 800ab76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab7a:	791a      	ldrb	r2, [r3, #4]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d108      	bne.n	800ab98 <USBH_Process+0x2e8>
            phost->pActiveClass = phost->pClass[idx];
 800ab86:	7bfa      	ldrb	r2, [r7, #15]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	32de      	adds	r2, #222	; 0xde
 800ab8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ab96:	e005      	b.n	800aba4 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	73fb      	strb	r3, [r7, #15]
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d0e5      	beq.n	800ab70 <USBH_Process+0x2c0>
        if (phost->pActiveClass != NULL)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d040      	beq.n	800ac30 <USBH_Process+0x380>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	4798      	blx	r3
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d114      	bne.n	800abea <USBH_Process+0x33a>
            phost->gState = HOST_CLASS_REQUEST;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2206      	movs	r2, #6
 800abc4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4619      	mov	r1, r3
 800abd0:	4815      	ldr	r0, [pc, #84]	; (800ac28 <USBH_Process+0x378>)
 800abd2:	f004 f9d9 	bl	800ef88 <iprintf>
 800abd6:	200a      	movs	r0, #10
 800abd8:	f004 f9ee 	bl	800efb8 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abe2:	2103      	movs	r1, #3
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	4798      	blx	r3
      break;
 800abe8:	e0b3      	b.n	800ad52 <USBH_Process+0x4a2>
            phost->gState = HOST_ABORT_STATE;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	220d      	movs	r2, #13
 800abee:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4619      	mov	r1, r3
 800abfa:	480c      	ldr	r0, [pc, #48]	; (800ac2c <USBH_Process+0x37c>)
 800abfc:	f004 f9c4 	bl	800ef88 <iprintf>
 800ac00:	200a      	movs	r0, #10
 800ac02:	f004 f9d9 	bl	800efb8 <putchar>
      break;
 800ac06:	e0a4      	b.n	800ad52 <USBH_Process+0x4a2>
 800ac08:	08010518 	.word	0x08010518
 800ac0c:	08010530 	.word	0x08010530
 800ac10:	0801054c 	.word	0x0801054c
 800ac14:	08010578 	.word	0x08010578
 800ac18:	0801058c 	.word	0x0801058c
 800ac1c:	080105b4 	.word	0x080105b4
 800ac20:	080105d0 	.word	0x080105d0
 800ac24:	080105f0 	.word	0x080105f0
 800ac28:	08010610 	.word	0x08010610
 800ac2c:	08010624 	.word	0x08010624
          phost->gState = HOST_ABORT_STATE;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	220d      	movs	r2, #13
 800ac34:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800ac36:	4849      	ldr	r0, [pc, #292]	; (800ad5c <USBH_Process+0x4ac>)
 800ac38:	f004 f9a6 	bl	800ef88 <iprintf>
 800ac3c:	200a      	movs	r0, #10
 800ac3e:	f004 f9bb 	bl	800efb8 <putchar>
      break;
 800ac42:	e086      	b.n	800ad52 <USBH_Process+0x4a2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d020      	beq.n	800ac90 <USBH_Process+0x3e0>
      {
        status = phost->pActiveClass->Requests(phost);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	4798      	blx	r3
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ac5e:	7bbb      	ldrb	r3, [r7, #14]
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d103      	bne.n	800ac6e <USBH_Process+0x3be>
        {
          phost->gState = HOST_CLASS;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	220b      	movs	r2, #11
 800ac6a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac6c:	e06e      	b.n	800ad4c <USBH_Process+0x49c>
        else if (status == USBH_FAIL)
 800ac6e:	7bbb      	ldrb	r3, [r7, #14]
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d16a      	bne.n	800ad4c <USBH_Process+0x49c>
          phost->gState = HOST_ABORT_STATE;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	220d      	movs	r2, #13
 800ac7a:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800ac7c:	4838      	ldr	r0, [pc, #224]	; (800ad60 <USBH_Process+0x4b0>)
 800ac7e:	f004 f983 	bl	800ef88 <iprintf>
 800ac82:	4838      	ldr	r0, [pc, #224]	; (800ad64 <USBH_Process+0x4b4>)
 800ac84:	f004 f980 	bl	800ef88 <iprintf>
 800ac88:	200a      	movs	r0, #10
 800ac8a:	f004 f995 	bl	800efb8 <putchar>
      break;
 800ac8e:	e05d      	b.n	800ad4c <USBH_Process+0x49c>
        phost->gState = HOST_ABORT_STATE;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	220d      	movs	r2, #13
 800ac94:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800ac96:	4832      	ldr	r0, [pc, #200]	; (800ad60 <USBH_Process+0x4b0>)
 800ac98:	f004 f976 	bl	800ef88 <iprintf>
 800ac9c:	4832      	ldr	r0, [pc, #200]	; (800ad68 <USBH_Process+0x4b8>)
 800ac9e:	f004 f973 	bl	800ef88 <iprintf>
 800aca2:	200a      	movs	r0, #10
 800aca4:	f004 f988 	bl	800efb8 <putchar>
      break;
 800aca8:	e050      	b.n	800ad4c <USBH_Process+0x49c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d04d      	beq.n	800ad50 <USBH_Process+0x4a0>
      {
        phost->pActiveClass->BgndProcess(phost);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acba:	695b      	ldr	r3, [r3, #20]
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	4798      	blx	r3
      }
      break;
 800acc0:	e046      	b.n	800ad50 <USBH_Process+0x4a0>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7ff fc9e 	bl	800a60c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d009      	beq.n	800acee <USBH_Process+0x43e>
      {
        phost->pActiveClass->DeInit(phost);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d005      	beq.n	800ad04 <USBH_Process+0x454>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800acfe:	2105      	movs	r1, #5
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800ad04:	4819      	ldr	r0, [pc, #100]	; (800ad6c <USBH_Process+0x4bc>)
 800ad06:	f004 f93f 	bl	800ef88 <iprintf>
 800ad0a:	200a      	movs	r0, #10
 800ad0c:	f004 f954 	bl	800efb8 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d107      	bne.n	800ad2c <USBH_Process+0x47c>
      {
        phost->device.is_ReEnumerated = 0U;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7ff fdb3 	bl	800a890 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ad2a:	e012      	b.n	800ad52 <USBH_Process+0x4a2>
        USBH_LL_Start(phost);
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f003 fe49 	bl	800e9c4 <USBH_LL_Start>
      break;
 800ad32:	e00e      	b.n	800ad52 <USBH_Process+0x4a2>

    case HOST_ABORT_STATE:
    default :
      break;
 800ad34:	bf00      	nop
 800ad36:	e00c      	b.n	800ad52 <USBH_Process+0x4a2>
      break;
 800ad38:	bf00      	nop
 800ad3a:	e00a      	b.n	800ad52 <USBH_Process+0x4a2>
      break;
 800ad3c:	bf00      	nop
 800ad3e:	e008      	b.n	800ad52 <USBH_Process+0x4a2>
    break;
 800ad40:	bf00      	nop
 800ad42:	e006      	b.n	800ad52 <USBH_Process+0x4a2>
      break;
 800ad44:	bf00      	nop
 800ad46:	e004      	b.n	800ad52 <USBH_Process+0x4a2>
      break;
 800ad48:	bf00      	nop
 800ad4a:	e002      	b.n	800ad52 <USBH_Process+0x4a2>
      break;
 800ad4c:	bf00      	nop
 800ad4e:	e000      	b.n	800ad52 <USBH_Process+0x4a2>
      break;
 800ad50:	bf00      	nop
  }
  return USBH_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	08010644 	.word	0x08010644
 800ad60:	08010458 	.word	0x08010458
 800ad64:	0801066c 	.word	0x0801066c
 800ad68:	08010694 	.word	0x08010694
 800ad6c:	080106ac 	.word	0x080106ac

0800ad70 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b088      	sub	sp, #32
 800ad74:	af04      	add	r7, sp, #16
 800ad76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	785b      	ldrb	r3, [r3, #1]
 800ad84:	2b07      	cmp	r3, #7
 800ad86:	f200 8280 	bhi.w	800b28a <USBH_HandleEnum+0x51a>
 800ad8a:	a201      	add	r2, pc, #4	; (adr r2, 800ad90 <USBH_HandleEnum+0x20>)
 800ad8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad90:	0800adb1 	.word	0x0800adb1
 800ad94:	0800ae8d 	.word	0x0800ae8d
 800ad98:	0800af3d 	.word	0x0800af3d
 800ad9c:	0800affd 	.word	0x0800affd
 800ada0:	0800b085 	.word	0x0800b085
 800ada4:	0800b139 	.word	0x0800b139
 800ada8:	0800b1ad 	.word	0x0800b1ad
 800adac:	0800b21f 	.word	0x0800b21f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800adb0:	2108      	movs	r1, #8
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fb1c 	bl	800b3f0 <USBH_Get_DevDesc>
 800adb8:	4603      	mov	r3, r0
 800adba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800adbc:	7bbb      	ldrb	r3, [r7, #14]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d130      	bne.n	800ae24 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	7919      	ldrb	r1, [r3, #4]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ade6:	b292      	uxth	r2, r2
 800ade8:	9202      	str	r2, [sp, #8]
 800adea:	2200      	movs	r2, #0
 800adec:	9201      	str	r2, [sp, #4]
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	4603      	mov	r3, r0
 800adf2:	2280      	movs	r2, #128	; 0x80
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f001 f851 	bl	800be9c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	7959      	ldrb	r1, [r3, #5]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ae0e:	b292      	uxth	r2, r2
 800ae10:	9202      	str	r2, [sp, #8]
 800ae12:	2200      	movs	r2, #0
 800ae14:	9201      	str	r2, [sp, #4]
 800ae16:	9300      	str	r3, [sp, #0]
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f001 f83d 	bl	800be9c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ae22:	e234      	b.n	800b28e <USBH_HandleEnum+0x51e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
 800ae26:	2b03      	cmp	r3, #3
 800ae28:	f040 8231 	bne.w	800b28e <USBH_HandleEnum+0x51e>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800ae2c:	48b9      	ldr	r0, [pc, #740]	; (800b114 <USBH_HandleEnum+0x3a4>)
 800ae2e:	f004 f8ab 	bl	800ef88 <iprintf>
 800ae32:	48b9      	ldr	r0, [pc, #740]	; (800b118 <USBH_HandleEnum+0x3a8>)
 800ae34:	f004 f8a8 	bl	800ef88 <iprintf>
 800ae38:	200a      	movs	r0, #10
 800ae3a:	f004 f8bd 	bl	800efb8 <putchar>
        phost->device.EnumCnt++;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae44:	3301      	adds	r3, #1
 800ae46:	b2da      	uxtb	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae54:	2b03      	cmp	r3, #3
 800ae56:	d909      	bls.n	800ae6c <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ae58:	48b0      	ldr	r0, [pc, #704]	; (800b11c <USBH_HandleEnum+0x3ac>)
 800ae5a:	f004 f895 	bl	800ef88 <iprintf>
 800ae5e:	200a      	movs	r0, #10
 800ae60:	f004 f8aa 	bl	800efb8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	220d      	movs	r2, #13
 800ae68:	701a      	strb	r2, [r3, #0]
      break;
 800ae6a:	e210      	b.n	800b28e <USBH_HandleEnum+0x51e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	795b      	ldrb	r3, [r3, #5]
 800ae70:	4619      	mov	r1, r3
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f001 f862 	bl	800bf3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	791b      	ldrb	r3, [r3, #4]
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f001 f85c 	bl	800bf3c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	701a      	strb	r2, [r3, #0]
      break;
 800ae8a:	e200      	b.n	800b28e <USBH_HandleEnum+0x51e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ae8c:	2112      	movs	r1, #18
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 faae 	bl	800b3f0 <USBH_Get_DevDesc>
 800ae94:	4603      	mov	r3, r0
 800ae96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae98:	7bbb      	ldrb	r3, [r7, #14]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d117      	bne.n	800aece <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 800aea4:	4619      	mov	r1, r3
 800aea6:	489e      	ldr	r0, [pc, #632]	; (800b120 <USBH_HandleEnum+0x3b0>)
 800aea8:	f004 f86e 	bl	800ef88 <iprintf>
 800aeac:	200a      	movs	r0, #10
 800aeae:	f004 f883 	bl	800efb8 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 800aeb8:	4619      	mov	r1, r3
 800aeba:	489a      	ldr	r0, [pc, #616]	; (800b124 <USBH_HandleEnum+0x3b4>)
 800aebc:	f004 f864 	bl	800ef88 <iprintf>
 800aec0:	200a      	movs	r0, #10
 800aec2:	f004 f879 	bl	800efb8 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2202      	movs	r2, #2
 800aeca:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aecc:	e1e1      	b.n	800b292 <USBH_HandleEnum+0x522>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aece:	7bbb      	ldrb	r3, [r7, #14]
 800aed0:	2b03      	cmp	r3, #3
 800aed2:	f040 81de 	bne.w	800b292 <USBH_HandleEnum+0x522>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800aed6:	488f      	ldr	r0, [pc, #572]	; (800b114 <USBH_HandleEnum+0x3a4>)
 800aed8:	f004 f856 	bl	800ef88 <iprintf>
 800aedc:	4892      	ldr	r0, [pc, #584]	; (800b128 <USBH_HandleEnum+0x3b8>)
 800aede:	f004 f853 	bl	800ef88 <iprintf>
 800aee2:	200a      	movs	r0, #10
 800aee4:	f004 f868 	bl	800efb8 <putchar>
        phost->device.EnumCnt++;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aeee:	3301      	adds	r3, #1
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aefe:	2b03      	cmp	r3, #3
 800af00:	d909      	bls.n	800af16 <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800af02:	4886      	ldr	r0, [pc, #536]	; (800b11c <USBH_HandleEnum+0x3ac>)
 800af04:	f004 f840 	bl	800ef88 <iprintf>
 800af08:	200a      	movs	r0, #10
 800af0a:	f004 f855 	bl	800efb8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	220d      	movs	r2, #13
 800af12:	701a      	strb	r2, [r3, #0]
      break;
 800af14:	e1bd      	b.n	800b292 <USBH_HandleEnum+0x522>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	795b      	ldrb	r3, [r3, #5]
 800af1a:	4619      	mov	r1, r3
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f001 f80d 	bl	800bf3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	791b      	ldrb	r3, [r3, #4]
 800af26:	4619      	mov	r1, r3
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f001 f807 	bl	800bf3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	701a      	strb	r2, [r3, #0]
      break;
 800af3a:	e1aa      	b.n	800b292 <USBH_HandleEnum+0x522>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800af3c:	2101      	movs	r1, #1
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 fb02 	bl	800b548 <USBH_SetAddress>
 800af44:	4603      	mov	r3, r0
 800af46:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af48:	7bbb      	ldrb	r3, [r7, #14]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d13c      	bne.n	800afc8 <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 800af4e:	2002      	movs	r0, #2
 800af50:	f003 fecc 	bl	800ecec <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 800af62:	4619      	mov	r1, r3
 800af64:	4871      	ldr	r0, [pc, #452]	; (800b12c <USBH_HandleEnum+0x3bc>)
 800af66:	f004 f80f 	bl	800ef88 <iprintf>
 800af6a:	200a      	movs	r0, #10
 800af6c:	f004 f824 	bl	800efb8 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2203      	movs	r2, #3
 800af74:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	7919      	ldrb	r1, [r3, #4]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800af8a:	b292      	uxth	r2, r2
 800af8c:	9202      	str	r2, [sp, #8]
 800af8e:	2200      	movs	r2, #0
 800af90:	9201      	str	r2, [sp, #4]
 800af92:	9300      	str	r3, [sp, #0]
 800af94:	4603      	mov	r3, r0
 800af96:	2280      	movs	r2, #128	; 0x80
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 ff7f 	bl	800be9c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	7959      	ldrb	r1, [r3, #5]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800afb2:	b292      	uxth	r2, r2
 800afb4:	9202      	str	r2, [sp, #8]
 800afb6:	2200      	movs	r2, #0
 800afb8:	9201      	str	r2, [sp, #4]
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	4603      	mov	r3, r0
 800afbe:	2200      	movs	r2, #0
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 ff6b 	bl	800be9c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800afc6:	e166      	b.n	800b296 <USBH_HandleEnum+0x526>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800afc8:	7bbb      	ldrb	r3, [r7, #14]
 800afca:	2b03      	cmp	r3, #3
 800afcc:	f040 8163 	bne.w	800b296 <USBH_HandleEnum+0x526>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800afd0:	4850      	ldr	r0, [pc, #320]	; (800b114 <USBH_HandleEnum+0x3a4>)
 800afd2:	f003 ffd9 	bl	800ef88 <iprintf>
 800afd6:	4856      	ldr	r0, [pc, #344]	; (800b130 <USBH_HandleEnum+0x3c0>)
 800afd8:	f003 ffd6 	bl	800ef88 <iprintf>
 800afdc:	200a      	movs	r0, #10
 800afde:	f003 ffeb 	bl	800efb8 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800afe2:	484e      	ldr	r0, [pc, #312]	; (800b11c <USBH_HandleEnum+0x3ac>)
 800afe4:	f003 ffd0 	bl	800ef88 <iprintf>
 800afe8:	200a      	movs	r0, #10
 800afea:	f003 ffe5 	bl	800efb8 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	220d      	movs	r2, #13
 800aff2:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	705a      	strb	r2, [r3, #1]
      break;
 800affa:	e14c      	b.n	800b296 <USBH_HandleEnum+0x526>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800affc:	2109      	movs	r1, #9
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fa1e 	bl	800b440 <USBH_Get_CfgDesc>
 800b004:	4603      	mov	r3, r0
 800b006:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b008:	7bbb      	ldrb	r3, [r7, #14]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d103      	bne.n	800b016 <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2204      	movs	r2, #4
 800b012:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b014:	e141      	b.n	800b29a <USBH_HandleEnum+0x52a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b016:	7bbb      	ldrb	r3, [r7, #14]
 800b018:	2b03      	cmp	r3, #3
 800b01a:	f040 813e 	bne.w	800b29a <USBH_HandleEnum+0x52a>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800b01e:	483d      	ldr	r0, [pc, #244]	; (800b114 <USBH_HandleEnum+0x3a4>)
 800b020:	f003 ffb2 	bl	800ef88 <iprintf>
 800b024:	4843      	ldr	r0, [pc, #268]	; (800b134 <USBH_HandleEnum+0x3c4>)
 800b026:	f003 ffaf 	bl	800ef88 <iprintf>
 800b02a:	200a      	movs	r0, #10
 800b02c:	f003 ffc4 	bl	800efb8 <putchar>
        phost->device.EnumCnt++;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b036:	3301      	adds	r3, #1
 800b038:	b2da      	uxtb	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b046:	2b03      	cmp	r3, #3
 800b048:	d909      	bls.n	800b05e <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800b04a:	4834      	ldr	r0, [pc, #208]	; (800b11c <USBH_HandleEnum+0x3ac>)
 800b04c:	f003 ff9c 	bl	800ef88 <iprintf>
 800b050:	200a      	movs	r0, #10
 800b052:	f003 ffb1 	bl	800efb8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	220d      	movs	r2, #13
 800b05a:	701a      	strb	r2, [r3, #0]
      break;
 800b05c:	e11d      	b.n	800b29a <USBH_HandleEnum+0x52a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	795b      	ldrb	r3, [r3, #5]
 800b062:	4619      	mov	r1, r3
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 ff69 	bl	800bf3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	791b      	ldrb	r3, [r3, #4]
 800b06e:	4619      	mov	r1, r3
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 ff63 	bl	800bf3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	701a      	strb	r2, [r3, #0]
      break;
 800b082:	e10a      	b.n	800b29a <USBH_HandleEnum+0x52a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f9d7 	bl	800b440 <USBH_Get_CfgDesc>
 800b092:	4603      	mov	r3, r0
 800b094:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b096:	7bbb      	ldrb	r3, [r7, #14]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d103      	bne.n	800b0a4 <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2205      	movs	r2, #5
 800b0a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b0a2:	e0fc      	b.n	800b29e <USBH_HandleEnum+0x52e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
 800b0a6:	2b03      	cmp	r3, #3
 800b0a8:	f040 80f9 	bne.w	800b29e <USBH_HandleEnum+0x52e>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800b0ac:	4819      	ldr	r0, [pc, #100]	; (800b114 <USBH_HandleEnum+0x3a4>)
 800b0ae:	f003 ff6b 	bl	800ef88 <iprintf>
 800b0b2:	4820      	ldr	r0, [pc, #128]	; (800b134 <USBH_HandleEnum+0x3c4>)
 800b0b4:	f003 ff68 	bl	800ef88 <iprintf>
 800b0b8:	200a      	movs	r0, #10
 800b0ba:	f003 ff7d 	bl	800efb8 <putchar>
        phost->device.EnumCnt++;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	b2da      	uxtb	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0d4:	2b03      	cmp	r3, #3
 800b0d6:	d909      	bls.n	800b0ec <USBH_HandleEnum+0x37c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800b0d8:	4810      	ldr	r0, [pc, #64]	; (800b11c <USBH_HandleEnum+0x3ac>)
 800b0da:	f003 ff55 	bl	800ef88 <iprintf>
 800b0de:	200a      	movs	r0, #10
 800b0e0:	f003 ff6a 	bl	800efb8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	220d      	movs	r2, #13
 800b0e8:	701a      	strb	r2, [r3, #0]
      break;
 800b0ea:	e0d8      	b.n	800b29e <USBH_HandleEnum+0x52e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	795b      	ldrb	r3, [r3, #5]
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 ff22 	bl	800bf3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	791b      	ldrb	r3, [r3, #4]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 ff1c 	bl	800bf3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	701a      	strb	r2, [r3, #0]
      break;
 800b110:	e0c5      	b.n	800b29e <USBH_HandleEnum+0x52e>
 800b112:	bf00      	nop
 800b114:	08010458 	.word	0x08010458
 800b118:	080106c4 	.word	0x080106c4
 800b11c:	080106f8 	.word	0x080106f8
 800b120:	08010738 	.word	0x08010738
 800b124:	08010744 	.word	0x08010744
 800b128:	08010750 	.word	0x08010750
 800b12c:	0801078c 	.word	0x0801078c
 800b130:	080107a4 	.word	0x080107a4
 800b134:	080107d8 	.word	0x080107d8

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d02a      	beq.n	800b198 <USBH_HandleEnum+0x428>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b14e:	23ff      	movs	r3, #255	; 0xff
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f999 	bl	800b488 <USBH_Get_StringDesc>
 800b156:	4603      	mov	r3, r0
 800b158:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b15a:	7bbb      	ldrb	r3, [r7, #14]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10d      	bne.n	800b17c <USBH_HandleEnum+0x40c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b166:	4619      	mov	r1, r3
 800b168:	4853      	ldr	r0, [pc, #332]	; (800b2b8 <USBH_HandleEnum+0x548>)
 800b16a:	f003 ff0d 	bl	800ef88 <iprintf>
 800b16e:	200a      	movs	r0, #10
 800b170:	f003 ff22 	bl	800efb8 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2206      	movs	r2, #6
 800b178:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b17a:	e092      	b.n	800b2a2 <USBH_HandleEnum+0x532>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b17c:	7bbb      	ldrb	r3, [r7, #14]
 800b17e:	2b03      	cmp	r3, #3
 800b180:	f040 808f 	bne.w	800b2a2 <USBH_HandleEnum+0x532>
          USBH_UsrLog("Manufacturer : N/A");
 800b184:	484d      	ldr	r0, [pc, #308]	; (800b2bc <USBH_HandleEnum+0x54c>)
 800b186:	f003 feff 	bl	800ef88 <iprintf>
 800b18a:	200a      	movs	r0, #10
 800b18c:	f003 ff14 	bl	800efb8 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2206      	movs	r2, #6
 800b194:	705a      	strb	r2, [r3, #1]
      break;
 800b196:	e084      	b.n	800b2a2 <USBH_HandleEnum+0x532>
        USBH_UsrLog("Manufacturer : N/A");
 800b198:	4848      	ldr	r0, [pc, #288]	; (800b2bc <USBH_HandleEnum+0x54c>)
 800b19a:	f003 fef5 	bl	800ef88 <iprintf>
 800b19e:	200a      	movs	r0, #10
 800b1a0:	f003 ff0a 	bl	800efb8 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2206      	movs	r2, #6
 800b1a8:	705a      	strb	r2, [r3, #1]
      break;
 800b1aa:	e07a      	b.n	800b2a2 <USBH_HandleEnum+0x532>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d029      	beq.n	800b20a <USBH_HandleEnum+0x49a>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b1c2:	23ff      	movs	r3, #255	; 0xff
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f95f 	bl	800b488 <USBH_Get_StringDesc>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b1ce:	7bbb      	ldrb	r3, [r7, #14]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10d      	bne.n	800b1f0 <USBH_HandleEnum+0x480>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b1da:	4619      	mov	r1, r3
 800b1dc:	4838      	ldr	r0, [pc, #224]	; (800b2c0 <USBH_HandleEnum+0x550>)
 800b1de:	f003 fed3 	bl	800ef88 <iprintf>
 800b1e2:	200a      	movs	r0, #10
 800b1e4:	f003 fee8 	bl	800efb8 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2207      	movs	r2, #7
 800b1ec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b1ee:	e05a      	b.n	800b2a6 <USBH_HandleEnum+0x536>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1f0:	7bbb      	ldrb	r3, [r7, #14]
 800b1f2:	2b03      	cmp	r3, #3
 800b1f4:	d157      	bne.n	800b2a6 <USBH_HandleEnum+0x536>
          USBH_UsrLog("Product : N/A");
 800b1f6:	4833      	ldr	r0, [pc, #204]	; (800b2c4 <USBH_HandleEnum+0x554>)
 800b1f8:	f003 fec6 	bl	800ef88 <iprintf>
 800b1fc:	200a      	movs	r0, #10
 800b1fe:	f003 fedb 	bl	800efb8 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2207      	movs	r2, #7
 800b206:	705a      	strb	r2, [r3, #1]
      break;
 800b208:	e04d      	b.n	800b2a6 <USBH_HandleEnum+0x536>
        USBH_UsrLog("Product : N/A");
 800b20a:	482e      	ldr	r0, [pc, #184]	; (800b2c4 <USBH_HandleEnum+0x554>)
 800b20c:	f003 febc 	bl	800ef88 <iprintf>
 800b210:	200a      	movs	r0, #10
 800b212:	f003 fed1 	bl	800efb8 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2207      	movs	r2, #7
 800b21a:	705a      	strb	r2, [r3, #1]
      break;
 800b21c:	e043      	b.n	800b2a6 <USBH_HandleEnum+0x536>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b224:	2b00      	cmp	r3, #0
 800b226:	d027      	beq.n	800b278 <USBH_HandleEnum+0x508>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b234:	23ff      	movs	r3, #255	; 0xff
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f926 	bl	800b488 <USBH_Get_StringDesc>
 800b23c:	4603      	mov	r3, r0
 800b23e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b240:	7bbb      	ldrb	r3, [r7, #14]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d10c      	bne.n	800b260 <USBH_HandleEnum+0x4f0>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b24c:	4619      	mov	r1, r3
 800b24e:	481e      	ldr	r0, [pc, #120]	; (800b2c8 <USBH_HandleEnum+0x558>)
 800b250:	f003 fe9a 	bl	800ef88 <iprintf>
 800b254:	200a      	movs	r0, #10
 800b256:	f003 feaf 	bl	800efb8 <putchar>
          Status = USBH_OK;
 800b25a:	2300      	movs	r3, #0
 800b25c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b25e:	e024      	b.n	800b2aa <USBH_HandleEnum+0x53a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b260:	7bbb      	ldrb	r3, [r7, #14]
 800b262:	2b03      	cmp	r3, #3
 800b264:	d121      	bne.n	800b2aa <USBH_HandleEnum+0x53a>
          USBH_UsrLog("Serial Number : N/A");
 800b266:	4819      	ldr	r0, [pc, #100]	; (800b2cc <USBH_HandleEnum+0x55c>)
 800b268:	f003 fe8e 	bl	800ef88 <iprintf>
 800b26c:	200a      	movs	r0, #10
 800b26e:	f003 fea3 	bl	800efb8 <putchar>
          Status = USBH_OK;
 800b272:	2300      	movs	r3, #0
 800b274:	73fb      	strb	r3, [r7, #15]
      break;
 800b276:	e018      	b.n	800b2aa <USBH_HandleEnum+0x53a>
        USBH_UsrLog("Serial Number : N/A");
 800b278:	4814      	ldr	r0, [pc, #80]	; (800b2cc <USBH_HandleEnum+0x55c>)
 800b27a:	f003 fe85 	bl	800ef88 <iprintf>
 800b27e:	200a      	movs	r0, #10
 800b280:	f003 fe9a 	bl	800efb8 <putchar>
        Status = USBH_OK;
 800b284:	2300      	movs	r3, #0
 800b286:	73fb      	strb	r3, [r7, #15]
      break;
 800b288:	e00f      	b.n	800b2aa <USBH_HandleEnum+0x53a>

    default:
      break;
 800b28a:	bf00      	nop
 800b28c:	e00e      	b.n	800b2ac <USBH_HandleEnum+0x53c>
      break;
 800b28e:	bf00      	nop
 800b290:	e00c      	b.n	800b2ac <USBH_HandleEnum+0x53c>
      break;
 800b292:	bf00      	nop
 800b294:	e00a      	b.n	800b2ac <USBH_HandleEnum+0x53c>
      break;
 800b296:	bf00      	nop
 800b298:	e008      	b.n	800b2ac <USBH_HandleEnum+0x53c>
      break;
 800b29a:	bf00      	nop
 800b29c:	e006      	b.n	800b2ac <USBH_HandleEnum+0x53c>
      break;
 800b29e:	bf00      	nop
 800b2a0:	e004      	b.n	800b2ac <USBH_HandleEnum+0x53c>
      break;
 800b2a2:	bf00      	nop
 800b2a4:	e002      	b.n	800b2ac <USBH_HandleEnum+0x53c>
      break;
 800b2a6:	bf00      	nop
 800b2a8:	e000      	b.n	800b2ac <USBH_HandleEnum+0x53c>
      break;
 800b2aa:	bf00      	nop
  }
  return Status;
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	0801081c 	.word	0x0801081c
 800b2bc:	08010830 	.word	0x08010830
 800b2c0:	08010844 	.word	0x08010844
 800b2c4:	08010854 	.word	0x08010854
 800b2c8:	08010864 	.word	0x08010864
 800b2cc:	08010878 	.word	0x08010878

0800b2d0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	683a      	ldr	r2, [r7, #0]
 800b2de:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b2e2:	bf00      	nop
 800b2e4:	370c      	adds	r7, #12
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr

0800b2ee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b082      	sub	sp, #8
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b2fc:	1c5a      	adds	r2, r3, #1
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 f804 	bl	800b312 <USBH_HandleSof>
}
 800b30a:	bf00      	nop
 800b30c:	3708      	adds	r7, #8
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b082      	sub	sp, #8
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	2b0b      	cmp	r3, #11
 800b322:	d10a      	bne.n	800b33a <USBH_HandleSof+0x28>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d005      	beq.n	800b33a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	4798      	blx	r3
  }
}
 800b33a:	bf00      	nop
 800b33c:	3708      	adds	r7, #8
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b342:	b480      	push	{r7}
 800b344:	b083      	sub	sp, #12
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2201      	movs	r2, #1
 800b34e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b352:	bf00      	nop
}
 800b354:	370c      	adds	r7, #12
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b35e:	b480      	push	{r7}
 800b360:	b083      	sub	sp, #12
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b36e:	bf00      	nop
}
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b37a:	b480      	push	{r7}
 800b37c:	b083      	sub	sp, #12
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2201      	movs	r2, #1
 800b386:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b39a:	2300      	movs	r3, #0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f003 fb16 	bl	800e9fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	791b      	ldrb	r3, [r3, #4]
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 fdb1 	bl	800bf3c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	795b      	ldrb	r3, [r3, #5]
 800b3de:	4619      	mov	r1, r3
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 fdab 	bl	800bf3c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af02      	add	r7, sp, #8
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b402:	78fb      	ldrb	r3, [r7, #3]
 800b404:	b29b      	uxth	r3, r3
 800b406:	9300      	str	r3, [sp, #0]
 800b408:	4613      	mov	r3, r2
 800b40a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b40e:	2100      	movs	r1, #0
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f864 	bl	800b4de <USBH_GetDescriptor>
 800b416:	4603      	mov	r3, r0
 800b418:	73fb      	strb	r3, [r7, #15]
 800b41a:	7bfb      	ldrb	r3, [r7, #15]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d10a      	bne.n	800b436 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b42c:	78fa      	ldrb	r2, [r7, #3]
 800b42e:	b292      	uxth	r2, r2
 800b430:	4619      	mov	r1, r3
 800b432:	f000 f918 	bl	800b666 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b436:	7bfb      	ldrb	r3, [r7, #15]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3710      	adds	r7, #16
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af02      	add	r7, sp, #8
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	460b      	mov	r3, r1
 800b44a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	331c      	adds	r3, #28
 800b450:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b452:	887b      	ldrh	r3, [r7, #2]
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b45c:	2100      	movs	r1, #0
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 f83d 	bl	800b4de <USBH_GetDescriptor>
 800b464:	4603      	mov	r3, r0
 800b466:	72fb      	strb	r3, [r7, #11]
 800b468:	7afb      	ldrb	r3, [r7, #11]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d107      	bne.n	800b47e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b474:	887a      	ldrh	r2, [r7, #2]
 800b476:	68f9      	ldr	r1, [r7, #12]
 800b478:	4618      	mov	r0, r3
 800b47a:	f000 f964 	bl	800b746 <USBH_ParseCfgDesc>
  }

  return status;
 800b47e:	7afb      	ldrb	r3, [r7, #11]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b088      	sub	sp, #32
 800b48c:	af02      	add	r7, sp, #8
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	607a      	str	r2, [r7, #4]
 800b492:	461a      	mov	r2, r3
 800b494:	460b      	mov	r3, r1
 800b496:	72fb      	strb	r3, [r7, #11]
 800b498:	4613      	mov	r3, r2
 800b49a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b49c:	7afb      	ldrb	r3, [r7, #11]
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b4a4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b4ac:	893b      	ldrh	r3, [r7, #8]
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f000 f812 	bl	800b4de <USBH_GetDescriptor>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	75fb      	strb	r3, [r7, #23]
 800b4be:	7dfb      	ldrb	r3, [r7, #23]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d107      	bne.n	800b4d4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b4ca:	893a      	ldrh	r2, [r7, #8]
 800b4cc:	6879      	ldr	r1, [r7, #4]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f000 fa37 	bl	800b942 <USBH_ParseStringDesc>
  }

  return status;
 800b4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3718      	adds	r7, #24
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b084      	sub	sp, #16
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	60f8      	str	r0, [r7, #12]
 800b4e6:	607b      	str	r3, [r7, #4]
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	72fb      	strb	r3, [r7, #11]
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	789b      	ldrb	r3, [r3, #2]
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d11c      	bne.n	800b532 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b4f8:	7afb      	ldrb	r3, [r7, #11]
 800b4fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2206      	movs	r2, #6
 800b508:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	893a      	ldrh	r2, [r7, #8]
 800b50e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b510:	893b      	ldrh	r3, [r7, #8]
 800b512:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b51a:	d104      	bne.n	800b526 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f240 4209 	movw	r2, #1033	; 0x409
 800b522:	829a      	strh	r2, [r3, #20]
 800b524:	e002      	b.n	800b52c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2200      	movs	r2, #0
 800b52a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	8b3a      	ldrh	r2, [r7, #24]
 800b530:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b532:	8b3b      	ldrh	r3, [r7, #24]
 800b534:	461a      	mov	r2, r3
 800b536:	6879      	ldr	r1, [r7, #4]
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	f000 fa50 	bl	800b9de <USBH_CtlReq>
 800b53e:	4603      	mov	r3, r0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3710      	adds	r7, #16
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	460b      	mov	r3, r1
 800b552:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	789b      	ldrb	r3, [r3, #2]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d10f      	bne.n	800b57c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2205      	movs	r2, #5
 800b566:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b568:	78fb      	ldrb	r3, [r7, #3]
 800b56a:	b29a      	uxth	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b57c:	2200      	movs	r2, #0
 800b57e:	2100      	movs	r1, #0
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 fa2c 	bl	800b9de <USBH_CtlReq>
 800b586:	4603      	mov	r3, r0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	460b      	mov	r3, r1
 800b59a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	789b      	ldrb	r3, [r3, #2]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d10e      	bne.n	800b5c2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2209      	movs	r2, #9
 800b5ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	887a      	ldrh	r2, [r7, #2]
 800b5b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 fa09 	bl	800b9de <USBH_CtlReq>
 800b5cc:	4603      	mov	r3, r0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3708      	adds	r7, #8
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b082      	sub	sp, #8
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
 800b5de:	460b      	mov	r3, r1
 800b5e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	789b      	ldrb	r3, [r3, #2]
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d10f      	bne.n	800b60a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2203      	movs	r2, #3
 800b5f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b5f6:	78fb      	ldrb	r3, [r7, #3]
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b60a:	2200      	movs	r2, #0
 800b60c:	2100      	movs	r1, #0
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f9e5 	bl	800b9de <USBH_CtlReq>
 800b614:	4603      	mov	r3, r0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b61e:	b580      	push	{r7, lr}
 800b620:	b082      	sub	sp, #8
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
 800b626:	460b      	mov	r3, r1
 800b628:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	789b      	ldrb	r3, [r3, #2]
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d10f      	bne.n	800b652 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2202      	movs	r2, #2
 800b636:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2201      	movs	r2, #1
 800b63c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b644:	78fb      	ldrb	r3, [r7, #3]
 800b646:	b29a      	uxth	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b652:	2200      	movs	r2, #0
 800b654:	2100      	movs	r1, #0
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 f9c1 	bl	800b9de <USBH_CtlReq>
 800b65c:	4603      	mov	r3, r0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b666:	b480      	push	{r7}
 800b668:	b085      	sub	sp, #20
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	60f8      	str	r0, [r7, #12]
 800b66e:	60b9      	str	r1, [r7, #8]
 800b670:	4613      	mov	r3, r2
 800b672:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	781a      	ldrb	r2, [r3, #0]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	785a      	ldrb	r2, [r3, #1]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	3302      	adds	r3, #2
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	3303      	adds	r3, #3
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	b29b      	uxth	r3, r3
 800b694:	021b      	lsls	r3, r3, #8
 800b696:	b29b      	uxth	r3, r3
 800b698:	4313      	orrs	r3, r2
 800b69a:	b29a      	uxth	r2, r3
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	791a      	ldrb	r2, [r3, #4]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	795a      	ldrb	r2, [r3, #5]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	799a      	ldrb	r2, [r3, #6]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	79da      	ldrb	r2, [r3, #7]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b6c0:	88fb      	ldrh	r3, [r7, #6]
 800b6c2:	2b08      	cmp	r3, #8
 800b6c4:	d939      	bls.n	800b73a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	3308      	adds	r3, #8
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	b29a      	uxth	r2, r3
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	3309      	adds	r3, #9
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	021b      	lsls	r3, r3, #8
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	330a      	adds	r3, #10
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	b29a      	uxth	r2, r3
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	330b      	adds	r3, #11
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	021b      	lsls	r3, r3, #8
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	330c      	adds	r3, #12
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	b29a      	uxth	r2, r3
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	330d      	adds	r3, #13
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	021b      	lsls	r3, r3, #8
 800b710:	b29b      	uxth	r3, r3
 800b712:	4313      	orrs	r3, r2
 800b714:	b29a      	uxth	r2, r3
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	7b9a      	ldrb	r2, [r3, #14]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	7bda      	ldrb	r2, [r3, #15]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	7c1a      	ldrb	r2, [r3, #16]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	7c5a      	ldrb	r2, [r3, #17]
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	745a      	strb	r2, [r3, #17]
  }
}
 800b73a:	bf00      	nop
 800b73c:	3714      	adds	r7, #20
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b08a      	sub	sp, #40	; 0x28
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	60f8      	str	r0, [r7, #12]
 800b74e:	60b9      	str	r1, [r7, #8]
 800b750:	4613      	mov	r3, r2
 800b752:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b758:	2300      	movs	r3, #0
 800b75a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b75e:	2300      	movs	r3, #0
 800b760:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	781a      	ldrb	r2, [r3, #0]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	785a      	ldrb	r2, [r3, #1]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	3302      	adds	r3, #2
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	b29a      	uxth	r2, r3
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	3303      	adds	r3, #3
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	b29b      	uxth	r3, r3
 800b788:	021b      	lsls	r3, r3, #8
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	4313      	orrs	r3, r2
 800b78e:	b29a      	uxth	r2, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	791a      	ldrb	r2, [r3, #4]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	795a      	ldrb	r2, [r3, #5]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	799a      	ldrb	r2, [r3, #6]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	79da      	ldrb	r2, [r3, #7]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	7a1a      	ldrb	r2, [r3, #8]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b7bc:	88fb      	ldrh	r3, [r7, #6]
 800b7be:	2b09      	cmp	r3, #9
 800b7c0:	d95f      	bls.n	800b882 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b7c2:	2309      	movs	r3, #9
 800b7c4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b7ca:	e051      	b.n	800b870 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b7cc:	f107 0316 	add.w	r3, r7, #22
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7d4:	f000 f8e8 	bl	800b9a8 <USBH_GetNextDesc>
 800b7d8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7dc:	785b      	ldrb	r3, [r3, #1]
 800b7de:	2b04      	cmp	r3, #4
 800b7e0:	d146      	bne.n	800b870 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b7e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b7e6:	221a      	movs	r2, #26
 800b7e8:	fb02 f303 	mul.w	r3, r2, r3
 800b7ec:	3308      	adds	r3, #8
 800b7ee:	68fa      	ldr	r2, [r7, #12]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	3302      	adds	r3, #2
 800b7f4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b7f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7f8:	69f8      	ldr	r0, [r7, #28]
 800b7fa:	f000 f846 	bl	800b88a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b7fe:	2300      	movs	r3, #0
 800b800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b804:	2300      	movs	r3, #0
 800b806:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b808:	e022      	b.n	800b850 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b80a:	f107 0316 	add.w	r3, r7, #22
 800b80e:	4619      	mov	r1, r3
 800b810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b812:	f000 f8c9 	bl	800b9a8 <USBH_GetNextDesc>
 800b816:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81a:	785b      	ldrb	r3, [r3, #1]
 800b81c:	2b05      	cmp	r3, #5
 800b81e:	d117      	bne.n	800b850 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b820:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b824:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b828:	3201      	adds	r2, #1
 800b82a:	00d2      	lsls	r2, r2, #3
 800b82c:	211a      	movs	r1, #26
 800b82e:	fb01 f303 	mul.w	r3, r1, r3
 800b832:	4413      	add	r3, r2
 800b834:	3308      	adds	r3, #8
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	4413      	add	r3, r2
 800b83a:	3304      	adds	r3, #4
 800b83c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b83e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b840:	69b8      	ldr	r0, [r7, #24]
 800b842:	f000 f851 	bl	800b8e8 <USBH_ParseEPDesc>
            ep_ix++;
 800b846:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b84a:	3301      	adds	r3, #1
 800b84c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	791b      	ldrb	r3, [r3, #4]
 800b854:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b858:	429a      	cmp	r2, r3
 800b85a:	d204      	bcs.n	800b866 <USBH_ParseCfgDesc+0x120>
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	885a      	ldrh	r2, [r3, #2]
 800b860:	8afb      	ldrh	r3, [r7, #22]
 800b862:	429a      	cmp	r2, r3
 800b864:	d8d1      	bhi.n	800b80a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b866:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b86a:	3301      	adds	r3, #1
 800b86c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b870:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b874:	2b01      	cmp	r3, #1
 800b876:	d804      	bhi.n	800b882 <USBH_ParseCfgDesc+0x13c>
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	885a      	ldrh	r2, [r3, #2]
 800b87c:	8afb      	ldrh	r3, [r7, #22]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d8a4      	bhi.n	800b7cc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b882:	bf00      	nop
 800b884:	3728      	adds	r7, #40	; 0x28
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b88a:	b480      	push	{r7}
 800b88c:	b083      	sub	sp, #12
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
 800b892:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	781a      	ldrb	r2, [r3, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	785a      	ldrb	r2, [r3, #1]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	789a      	ldrb	r2, [r3, #2]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	78da      	ldrb	r2, [r3, #3]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	791a      	ldrb	r2, [r3, #4]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	795a      	ldrb	r2, [r3, #5]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	799a      	ldrb	r2, [r3, #6]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	79da      	ldrb	r2, [r3, #7]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	7a1a      	ldrb	r2, [r3, #8]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	721a      	strb	r2, [r3, #8]
}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	781a      	ldrb	r2, [r3, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	785a      	ldrb	r2, [r3, #1]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	789a      	ldrb	r2, [r3, #2]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	78da      	ldrb	r2, [r3, #3]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	3304      	adds	r3, #4
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	b29a      	uxth	r2, r3
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	3305      	adds	r3, #5
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	b29b      	uxth	r3, r3
 800b922:	021b      	lsls	r3, r3, #8
 800b924:	b29b      	uxth	r3, r3
 800b926:	4313      	orrs	r3, r2
 800b928:	b29a      	uxth	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	799a      	ldrb	r2, [r3, #6]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	719a      	strb	r2, [r3, #6]
}
 800b936:	bf00      	nop
 800b938:	370c      	adds	r7, #12
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr

0800b942 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b942:	b480      	push	{r7}
 800b944:	b087      	sub	sp, #28
 800b946:	af00      	add	r7, sp, #0
 800b948:	60f8      	str	r0, [r7, #12]
 800b94a:	60b9      	str	r1, [r7, #8]
 800b94c:	4613      	mov	r3, r2
 800b94e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	3301      	adds	r3, #1
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	2b03      	cmp	r3, #3
 800b958:	d120      	bne.n	800b99c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	1e9a      	subs	r2, r3, #2
 800b960:	88fb      	ldrh	r3, [r7, #6]
 800b962:	4293      	cmp	r3, r2
 800b964:	bf28      	it	cs
 800b966:	4613      	movcs	r3, r2
 800b968:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	3302      	adds	r3, #2
 800b96e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b970:	2300      	movs	r3, #0
 800b972:	82fb      	strh	r3, [r7, #22]
 800b974:	e00b      	b.n	800b98e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b976:	8afb      	ldrh	r3, [r7, #22]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	4413      	add	r3, r2
 800b97c:	781a      	ldrb	r2, [r3, #0]
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	3301      	adds	r3, #1
 800b986:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b988:	8afb      	ldrh	r3, [r7, #22]
 800b98a:	3302      	adds	r3, #2
 800b98c:	82fb      	strh	r3, [r7, #22]
 800b98e:	8afa      	ldrh	r2, [r7, #22]
 800b990:	8abb      	ldrh	r3, [r7, #20]
 800b992:	429a      	cmp	r2, r3
 800b994:	d3ef      	bcc.n	800b976 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	2200      	movs	r2, #0
 800b99a:	701a      	strb	r2, [r3, #0]
  }
}
 800b99c:	bf00      	nop
 800b99e:	371c      	adds	r7, #28
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	881a      	ldrh	r2, [r3, #0]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	4413      	add	r3, r2
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3714      	adds	r7, #20
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b086      	sub	sp, #24
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	60f8      	str	r0, [r7, #12]
 800b9e6:	60b9      	str	r1, [r7, #8]
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	789b      	ldrb	r3, [r3, #2]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d002      	beq.n	800b9fe <USBH_CtlReq+0x20>
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d00f      	beq.n	800ba1c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b9fc:	e027      	b.n	800ba4e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	88fa      	ldrh	r2, [r7, #6]
 800ba08:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2202      	movs	r2, #2
 800ba14:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ba16:	2301      	movs	r3, #1
 800ba18:	75fb      	strb	r3, [r7, #23]
      break;
 800ba1a:	e018      	b.n	800ba4e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f000 f81b 	bl	800ba58 <USBH_HandleControl>
 800ba22:	4603      	mov	r3, r0
 800ba24:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d002      	beq.n	800ba32 <USBH_CtlReq+0x54>
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
 800ba2e:	2b03      	cmp	r3, #3
 800ba30:	d106      	bne.n	800ba40 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2201      	movs	r2, #1
 800ba36:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	761a      	strb	r2, [r3, #24]
      break;
 800ba3e:	e005      	b.n	800ba4c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ba40:	7dfb      	ldrb	r3, [r7, #23]
 800ba42:	2b02      	cmp	r3, #2
 800ba44:	d102      	bne.n	800ba4c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	709a      	strb	r2, [r3, #2]
      break;
 800ba4c:	bf00      	nop
  }
  return status;
 800ba4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3718      	adds	r7, #24
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af02      	add	r7, sp, #8
 800ba5e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ba60:	2301      	movs	r3, #1
 800ba62:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ba64:	2300      	movs	r3, #0
 800ba66:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	7e1b      	ldrb	r3, [r3, #24]
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	2b0a      	cmp	r3, #10
 800ba70:	f200 815f 	bhi.w	800bd32 <USBH_HandleControl+0x2da>
 800ba74:	a201      	add	r2, pc, #4	; (adr r2, 800ba7c <USBH_HandleControl+0x24>)
 800ba76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba7a:	bf00      	nop
 800ba7c:	0800baa9 	.word	0x0800baa9
 800ba80:	0800bac3 	.word	0x0800bac3
 800ba84:	0800bb2d 	.word	0x0800bb2d
 800ba88:	0800bb53 	.word	0x0800bb53
 800ba8c:	0800bb8b 	.word	0x0800bb8b
 800ba90:	0800bbb5 	.word	0x0800bbb5
 800ba94:	0800bc07 	.word	0x0800bc07
 800ba98:	0800bc29 	.word	0x0800bc29
 800ba9c:	0800bc65 	.word	0x0800bc65
 800baa0:	0800bc8b 	.word	0x0800bc8b
 800baa4:	0800bcc9 	.word	0x0800bcc9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f103 0110 	add.w	r1, r3, #16
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	795b      	ldrb	r3, [r3, #5]
 800bab2:	461a      	mov	r2, r3
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 f951 	bl	800bd5c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2202      	movs	r2, #2
 800babe:	761a      	strb	r2, [r3, #24]
      break;
 800bac0:	e142      	b.n	800bd48 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	795b      	ldrb	r3, [r3, #5]
 800bac6:	4619      	mov	r1, r3
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f003 f885 	bl	800ebd8 <USBH_LL_GetURBState>
 800bace:	4603      	mov	r3, r0
 800bad0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bad2:	7bbb      	ldrb	r3, [r7, #14]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d11e      	bne.n	800bb16 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	7c1b      	ldrb	r3, [r3, #16]
 800badc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bae0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	8adb      	ldrh	r3, [r3, #22]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00a      	beq.n	800bb00 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800baea:	7b7b      	ldrb	r3, [r7, #13]
 800baec:	2b80      	cmp	r3, #128	; 0x80
 800baee:	d103      	bne.n	800baf8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2203      	movs	r2, #3
 800baf4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800baf6:	e11e      	b.n	800bd36 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2205      	movs	r2, #5
 800bafc:	761a      	strb	r2, [r3, #24]
      break;
 800bafe:	e11a      	b.n	800bd36 <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800bb00:	7b7b      	ldrb	r3, [r7, #13]
 800bb02:	2b80      	cmp	r3, #128	; 0x80
 800bb04:	d103      	bne.n	800bb0e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2209      	movs	r2, #9
 800bb0a:	761a      	strb	r2, [r3, #24]
      break;
 800bb0c:	e113      	b.n	800bd36 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2207      	movs	r2, #7
 800bb12:	761a      	strb	r2, [r3, #24]
      break;
 800bb14:	e10f      	b.n	800bd36 <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bb16:	7bbb      	ldrb	r3, [r7, #14]
 800bb18:	2b04      	cmp	r3, #4
 800bb1a:	d003      	beq.n	800bb24 <USBH_HandleControl+0xcc>
 800bb1c:	7bbb      	ldrb	r3, [r7, #14]
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	f040 8109 	bne.w	800bd36 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	220b      	movs	r2, #11
 800bb28:	761a      	strb	r2, [r3, #24]
      break;
 800bb2a:	e104      	b.n	800bd36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6899      	ldr	r1, [r3, #8]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	899a      	ldrh	r2, [r3, #12]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	791b      	ldrb	r3, [r3, #4]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f948 	bl	800bdda <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2204      	movs	r2, #4
 800bb4e:	761a      	strb	r2, [r3, #24]
      break;
 800bb50:	e0fa      	b.n	800bd48 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	791b      	ldrb	r3, [r3, #4]
 800bb56:	4619      	mov	r1, r3
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f003 f83d 	bl	800ebd8 <USBH_LL_GetURBState>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bb62:	7bbb      	ldrb	r3, [r7, #14]
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d102      	bne.n	800bb6e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2209      	movs	r2, #9
 800bb6c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bb6e:	7bbb      	ldrb	r3, [r7, #14]
 800bb70:	2b05      	cmp	r3, #5
 800bb72:	d102      	bne.n	800bb7a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bb74:	2303      	movs	r3, #3
 800bb76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb78:	e0df      	b.n	800bd3a <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800bb7a:	7bbb      	ldrb	r3, [r7, #14]
 800bb7c:	2b04      	cmp	r3, #4
 800bb7e:	f040 80dc 	bne.w	800bd3a <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	220b      	movs	r2, #11
 800bb86:	761a      	strb	r2, [r3, #24]
      break;
 800bb88:	e0d7      	b.n	800bd3a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6899      	ldr	r1, [r3, #8]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	899a      	ldrh	r2, [r3, #12]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	795b      	ldrb	r3, [r3, #5]
 800bb96:	2001      	movs	r0, #1
 800bb98:	9000      	str	r0, [sp, #0]
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 f8f8 	bl	800bd90 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2206      	movs	r2, #6
 800bbb0:	761a      	strb	r2, [r3, #24]
      break;
 800bbb2:	e0c9      	b.n	800bd48 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	795b      	ldrb	r3, [r3, #5]
 800bbb8:	4619      	mov	r1, r3
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f003 f80c 	bl	800ebd8 <USBH_LL_GetURBState>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bbc4:	7bbb      	ldrb	r3, [r7, #14]
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d103      	bne.n	800bbd2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2207      	movs	r2, #7
 800bbce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bbd0:	e0b5      	b.n	800bd3e <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800bbd2:	7bbb      	ldrb	r3, [r7, #14]
 800bbd4:	2b05      	cmp	r3, #5
 800bbd6:	d105      	bne.n	800bbe4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	220c      	movs	r2, #12
 800bbdc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bbde:	2303      	movs	r3, #3
 800bbe0:	73fb      	strb	r3, [r7, #15]
      break;
 800bbe2:	e0ac      	b.n	800bd3e <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bbe4:	7bbb      	ldrb	r3, [r7, #14]
 800bbe6:	2b02      	cmp	r3, #2
 800bbe8:	d103      	bne.n	800bbf2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2205      	movs	r2, #5
 800bbee:	761a      	strb	r2, [r3, #24]
      break;
 800bbf0:	e0a5      	b.n	800bd3e <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800bbf2:	7bbb      	ldrb	r3, [r7, #14]
 800bbf4:	2b04      	cmp	r3, #4
 800bbf6:	f040 80a2 	bne.w	800bd3e <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	220b      	movs	r2, #11
 800bbfe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bc00:	2302      	movs	r3, #2
 800bc02:	73fb      	strb	r3, [r7, #15]
      break;
 800bc04:	e09b      	b.n	800bd3e <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	791b      	ldrb	r3, [r3, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f8e3 	bl	800bdda <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2208      	movs	r2, #8
 800bc24:	761a      	strb	r2, [r3, #24]

      break;
 800bc26:	e08f      	b.n	800bd48 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	791b      	ldrb	r3, [r3, #4]
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f002 ffd2 	bl	800ebd8 <USBH_LL_GetURBState>
 800bc34:	4603      	mov	r3, r0
 800bc36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bc38:	7bbb      	ldrb	r3, [r7, #14]
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d105      	bne.n	800bc4a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	220d      	movs	r2, #13
 800bc42:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bc48:	e07b      	b.n	800bd42 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800bc4a:	7bbb      	ldrb	r3, [r7, #14]
 800bc4c:	2b04      	cmp	r3, #4
 800bc4e:	d103      	bne.n	800bc58 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	220b      	movs	r2, #11
 800bc54:	761a      	strb	r2, [r3, #24]
      break;
 800bc56:	e074      	b.n	800bd42 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800bc58:	7bbb      	ldrb	r3, [r7, #14]
 800bc5a:	2b05      	cmp	r3, #5
 800bc5c:	d171      	bne.n	800bd42 <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800bc5e:	2303      	movs	r3, #3
 800bc60:	73fb      	strb	r3, [r7, #15]
      break;
 800bc62:	e06e      	b.n	800bd42 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	795b      	ldrb	r3, [r3, #5]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	9200      	str	r2, [sp, #0]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	2100      	movs	r1, #0
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 f88d 	bl	800bd90 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	220a      	movs	r2, #10
 800bc86:	761a      	strb	r2, [r3, #24]
      break;
 800bc88:	e05e      	b.n	800bd48 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	795b      	ldrb	r3, [r3, #5]
 800bc8e:	4619      	mov	r1, r3
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f002 ffa1 	bl	800ebd8 <USBH_LL_GetURBState>
 800bc96:	4603      	mov	r3, r0
 800bc98:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bc9a:	7bbb      	ldrb	r3, [r7, #14]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d105      	bne.n	800bcac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bca0:	2300      	movs	r3, #0
 800bca2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	220d      	movs	r2, #13
 800bca8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bcaa:	e04c      	b.n	800bd46 <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
 800bcae:	2b02      	cmp	r3, #2
 800bcb0:	d103      	bne.n	800bcba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2209      	movs	r2, #9
 800bcb6:	761a      	strb	r2, [r3, #24]
      break;
 800bcb8:	e045      	b.n	800bd46 <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800bcba:	7bbb      	ldrb	r3, [r7, #14]
 800bcbc:	2b04      	cmp	r3, #4
 800bcbe:	d142      	bne.n	800bd46 <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	220b      	movs	r2, #11
 800bcc4:	761a      	strb	r2, [r3, #24]
      break;
 800bcc6:	e03e      	b.n	800bd46 <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	7e5b      	ldrb	r3, [r3, #25]
 800bccc:	3301      	adds	r3, #1
 800bcce:	b2da      	uxtb	r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	765a      	strb	r2, [r3, #25]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	7e5b      	ldrb	r3, [r3, #25]
 800bcd8:	2b02      	cmp	r3, #2
 800bcda:	d806      	bhi.n	800bcea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2201      	movs	r2, #1
 800bce6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bce8:	e02e      	b.n	800bd48 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bcf0:	2106      	movs	r1, #6
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800bcfc:	4815      	ldr	r0, [pc, #84]	; (800bd54 <USBH_HandleControl+0x2fc>)
 800bcfe:	f003 f943 	bl	800ef88 <iprintf>
 800bd02:	4815      	ldr	r0, [pc, #84]	; (800bd58 <USBH_HandleControl+0x300>)
 800bd04:	f003 f940 	bl	800ef88 <iprintf>
 800bd08:	200a      	movs	r0, #10
 800bd0a:	f003 f955 	bl	800efb8 <putchar>
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	795b      	ldrb	r3, [r3, #5]
 800bd12:	4619      	mov	r1, r3
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 f911 	bl	800bf3c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	791b      	ldrb	r3, [r3, #4]
 800bd1e:	4619      	mov	r1, r3
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 f90b 	bl	800bf3c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	73fb      	strb	r3, [r7, #15]
      break;
 800bd30:	e00a      	b.n	800bd48 <USBH_HandleControl+0x2f0>

    default:
      break;
 800bd32:	bf00      	nop
 800bd34:	e008      	b.n	800bd48 <USBH_HandleControl+0x2f0>
      break;
 800bd36:	bf00      	nop
 800bd38:	e006      	b.n	800bd48 <USBH_HandleControl+0x2f0>
      break;
 800bd3a:	bf00      	nop
 800bd3c:	e004      	b.n	800bd48 <USBH_HandleControl+0x2f0>
      break;
 800bd3e:	bf00      	nop
 800bd40:	e002      	b.n	800bd48 <USBH_HandleControl+0x2f0>
      break;
 800bd42:	bf00      	nop
 800bd44:	e000      	b.n	800bd48 <USBH_HandleControl+0x2f0>
      break;
 800bd46:	bf00      	nop
  }

  return status;
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	0801088c 	.word	0x0801088c
 800bd58:	08010894 	.word	0x08010894

0800bd5c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b088      	sub	sp, #32
 800bd60:	af04      	add	r7, sp, #16
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	4613      	mov	r3, r2
 800bd68:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bd6a:	79f9      	ldrb	r1, [r7, #7]
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	9303      	str	r3, [sp, #12]
 800bd70:	2308      	movs	r3, #8
 800bd72:	9302      	str	r3, [sp, #8]
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	9301      	str	r3, [sp, #4]
 800bd78:	2300      	movs	r3, #0
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	2200      	movs	r2, #0
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f002 fef8 	bl	800eb76 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bd86:	2300      	movs	r3, #0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3710      	adds	r7, #16
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b088      	sub	sp, #32
 800bd94:	af04      	add	r7, sp, #16
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	4611      	mov	r1, r2
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	460b      	mov	r3, r1
 800bda0:	80fb      	strh	r3, [r7, #6]
 800bda2:	4613      	mov	r3, r2
 800bda4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d001      	beq.n	800bdb4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bdb4:	7979      	ldrb	r1, [r7, #5]
 800bdb6:	7e3b      	ldrb	r3, [r7, #24]
 800bdb8:	9303      	str	r3, [sp, #12]
 800bdba:	88fb      	ldrh	r3, [r7, #6]
 800bdbc:	9302      	str	r3, [sp, #8]
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	9301      	str	r3, [sp, #4]
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	9300      	str	r3, [sp, #0]
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	2200      	movs	r2, #0
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f002 fed3 	bl	800eb76 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b088      	sub	sp, #32
 800bdde:	af04      	add	r7, sp, #16
 800bde0:	60f8      	str	r0, [r7, #12]
 800bde2:	60b9      	str	r1, [r7, #8]
 800bde4:	4611      	mov	r1, r2
 800bde6:	461a      	mov	r2, r3
 800bde8:	460b      	mov	r3, r1
 800bdea:	80fb      	strh	r3, [r7, #6]
 800bdec:	4613      	mov	r3, r2
 800bdee:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bdf0:	7979      	ldrb	r1, [r7, #5]
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	9303      	str	r3, [sp, #12]
 800bdf6:	88fb      	ldrh	r3, [r7, #6]
 800bdf8:	9302      	str	r3, [sp, #8]
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	9301      	str	r3, [sp, #4]
 800bdfe:	2301      	movs	r3, #1
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	2300      	movs	r3, #0
 800be04:	2201      	movs	r2, #1
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f002 feb5 	bl	800eb76 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800be0c:	2300      	movs	r3, #0

}
 800be0e:	4618      	mov	r0, r3
 800be10:	3710      	adds	r7, #16
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}

0800be16 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800be16:	b580      	push	{r7, lr}
 800be18:	b088      	sub	sp, #32
 800be1a:	af04      	add	r7, sp, #16
 800be1c:	60f8      	str	r0, [r7, #12]
 800be1e:	60b9      	str	r1, [r7, #8]
 800be20:	4611      	mov	r1, r2
 800be22:	461a      	mov	r2, r3
 800be24:	460b      	mov	r3, r1
 800be26:	80fb      	strh	r3, [r7, #6]
 800be28:	4613      	mov	r3, r2
 800be2a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800be32:	2b00      	cmp	r3, #0
 800be34:	d001      	beq.n	800be3a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800be36:	2300      	movs	r3, #0
 800be38:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800be3a:	7979      	ldrb	r1, [r7, #5]
 800be3c:	7e3b      	ldrb	r3, [r7, #24]
 800be3e:	9303      	str	r3, [sp, #12]
 800be40:	88fb      	ldrh	r3, [r7, #6]
 800be42:	9302      	str	r3, [sp, #8]
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	2301      	movs	r3, #1
 800be4a:	9300      	str	r3, [sp, #0]
 800be4c:	2302      	movs	r3, #2
 800be4e:	2200      	movs	r2, #0
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f002 fe90 	bl	800eb76 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3710      	adds	r7, #16
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b088      	sub	sp, #32
 800be64:	af04      	add	r7, sp, #16
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	4611      	mov	r1, r2
 800be6c:	461a      	mov	r2, r3
 800be6e:	460b      	mov	r3, r1
 800be70:	80fb      	strh	r3, [r7, #6]
 800be72:	4613      	mov	r3, r2
 800be74:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800be76:	7979      	ldrb	r1, [r7, #5]
 800be78:	2300      	movs	r3, #0
 800be7a:	9303      	str	r3, [sp, #12]
 800be7c:	88fb      	ldrh	r3, [r7, #6]
 800be7e:	9302      	str	r3, [sp, #8]
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	9301      	str	r3, [sp, #4]
 800be84:	2301      	movs	r3, #1
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	2302      	movs	r3, #2
 800be8a:	2201      	movs	r2, #1
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f002 fe72 	bl	800eb76 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af04      	add	r7, sp, #16
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	4608      	mov	r0, r1
 800bea6:	4611      	mov	r1, r2
 800bea8:	461a      	mov	r2, r3
 800beaa:	4603      	mov	r3, r0
 800beac:	70fb      	strb	r3, [r7, #3]
 800beae:	460b      	mov	r3, r1
 800beb0:	70bb      	strb	r3, [r7, #2]
 800beb2:	4613      	mov	r3, r2
 800beb4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800beb6:	7878      	ldrb	r0, [r7, #1]
 800beb8:	78ba      	ldrb	r2, [r7, #2]
 800beba:	78f9      	ldrb	r1, [r7, #3]
 800bebc:	8b3b      	ldrh	r3, [r7, #24]
 800bebe:	9302      	str	r3, [sp, #8]
 800bec0:	7d3b      	ldrb	r3, [r7, #20]
 800bec2:	9301      	str	r3, [sp, #4]
 800bec4:	7c3b      	ldrb	r3, [r7, #16]
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	4603      	mov	r3, r0
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f002 fe05 	bl	800eada <USBH_LL_OpenPipe>

  return USBH_OK;
 800bed0:	2300      	movs	r3, #0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b082      	sub	sp, #8
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
 800bee2:	460b      	mov	r3, r1
 800bee4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bee6:	78fb      	ldrb	r3, [r7, #3]
 800bee8:	4619      	mov	r1, r3
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f002 fe24 	bl	800eb38 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b084      	sub	sp, #16
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
 800bf02:	460b      	mov	r3, r1
 800bf04:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f836 	bl	800bf78 <USBH_GetFreePipe>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bf10:	89fb      	ldrh	r3, [r7, #14]
 800bf12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d00a      	beq.n	800bf30 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bf1a:	78fa      	ldrb	r2, [r7, #3]
 800bf1c:	89fb      	ldrh	r3, [r7, #14]
 800bf1e:	f003 030f 	and.w	r3, r3, #15
 800bf22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf26:	6879      	ldr	r1, [r7, #4]
 800bf28:	33e0      	adds	r3, #224	; 0xe0
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	440b      	add	r3, r1
 800bf2e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bf30:	89fb      	ldrh	r3, [r7, #14]
 800bf32:	b2db      	uxtb	r3, r3
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	460b      	mov	r3, r1
 800bf46:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bf48:	78fb      	ldrb	r3, [r7, #3]
 800bf4a:	2b0a      	cmp	r3, #10
 800bf4c:	d80d      	bhi.n	800bf6a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bf4e:	78fb      	ldrb	r3, [r7, #3]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	33e0      	adds	r3, #224	; 0xe0
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	4413      	add	r3, r2
 800bf58:	685a      	ldr	r2, [r3, #4]
 800bf5a:	78fb      	ldrb	r3, [r7, #3]
 800bf5c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bf60:	6879      	ldr	r1, [r7, #4]
 800bf62:	33e0      	adds	r3, #224	; 0xe0
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	440b      	add	r3, r1
 800bf68:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bf80:	2300      	movs	r3, #0
 800bf82:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bf84:	2300      	movs	r3, #0
 800bf86:	73fb      	strb	r3, [r7, #15]
 800bf88:	e00f      	b.n	800bfaa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bf8a:	7bfb      	ldrb	r3, [r7, #15]
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	33e0      	adds	r3, #224	; 0xe0
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	4413      	add	r3, r2
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d102      	bne.n	800bfa4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bf9e:	7bfb      	ldrb	r3, [r7, #15]
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	e007      	b.n	800bfb4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bfa4:	7bfb      	ldrb	r3, [r7, #15]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	73fb      	strb	r3, [r7, #15]
 800bfaa:	7bfb      	ldrb	r3, [r7, #15]
 800bfac:	2b0a      	cmp	r3, #10
 800bfae:	d9ec      	bls.n	800bf8a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bfb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3714      	adds	r7, #20
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bfca:	79fb      	ldrb	r3, [r7, #7]
 800bfcc:	4a08      	ldr	r2, [pc, #32]	; (800bff0 <disk_status+0x30>)
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	4413      	add	r3, r2
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	79fa      	ldrb	r2, [r7, #7]
 800bfd8:	4905      	ldr	r1, [pc, #20]	; (800bff0 <disk_status+0x30>)
 800bfda:	440a      	add	r2, r1
 800bfdc:	7a12      	ldrb	r2, [r2, #8]
 800bfde:	4610      	mov	r0, r2
 800bfe0:	4798      	blx	r3
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bfe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3710      	adds	r7, #16
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	200000f4 	.word	0x200000f4

0800bff4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	4603      	mov	r3, r0
 800bffc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bffe:	2300      	movs	r3, #0
 800c000:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c002:	79fb      	ldrb	r3, [r7, #7]
 800c004:	4a0d      	ldr	r2, [pc, #52]	; (800c03c <disk_initialize+0x48>)
 800c006:	5cd3      	ldrb	r3, [r2, r3]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d111      	bne.n	800c030 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c00c:	79fb      	ldrb	r3, [r7, #7]
 800c00e:	4a0b      	ldr	r2, [pc, #44]	; (800c03c <disk_initialize+0x48>)
 800c010:	2101      	movs	r1, #1
 800c012:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c014:	79fb      	ldrb	r3, [r7, #7]
 800c016:	4a09      	ldr	r2, [pc, #36]	; (800c03c <disk_initialize+0x48>)
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	4413      	add	r3, r2
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	79fa      	ldrb	r2, [r7, #7]
 800c022:	4906      	ldr	r1, [pc, #24]	; (800c03c <disk_initialize+0x48>)
 800c024:	440a      	add	r2, r1
 800c026:	7a12      	ldrb	r2, [r2, #8]
 800c028:	4610      	mov	r0, r2
 800c02a:	4798      	blx	r3
 800c02c:	4603      	mov	r3, r0
 800c02e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c030:	7bfb      	ldrb	r3, [r7, #15]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	200000f4 	.word	0x200000f4

0800c040 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c040:	b590      	push	{r4, r7, lr}
 800c042:	b087      	sub	sp, #28
 800c044:	af00      	add	r7, sp, #0
 800c046:	60b9      	str	r1, [r7, #8]
 800c048:	607a      	str	r2, [r7, #4]
 800c04a:	603b      	str	r3, [r7, #0]
 800c04c:	4603      	mov	r3, r0
 800c04e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c050:	7bfb      	ldrb	r3, [r7, #15]
 800c052:	4a0a      	ldr	r2, [pc, #40]	; (800c07c <disk_read+0x3c>)
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	4413      	add	r3, r2
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	689c      	ldr	r4, [r3, #8]
 800c05c:	7bfb      	ldrb	r3, [r7, #15]
 800c05e:	4a07      	ldr	r2, [pc, #28]	; (800c07c <disk_read+0x3c>)
 800c060:	4413      	add	r3, r2
 800c062:	7a18      	ldrb	r0, [r3, #8]
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	68b9      	ldr	r1, [r7, #8]
 800c06a:	47a0      	blx	r4
 800c06c:	4603      	mov	r3, r0
 800c06e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c070:	7dfb      	ldrb	r3, [r7, #23]
}
 800c072:	4618      	mov	r0, r3
 800c074:	371c      	adds	r7, #28
 800c076:	46bd      	mov	sp, r7
 800c078:	bd90      	pop	{r4, r7, pc}
 800c07a:	bf00      	nop
 800c07c:	200000f4 	.word	0x200000f4

0800c080 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c080:	b590      	push	{r4, r7, lr}
 800c082:	b087      	sub	sp, #28
 800c084:	af00      	add	r7, sp, #0
 800c086:	60b9      	str	r1, [r7, #8]
 800c088:	607a      	str	r2, [r7, #4]
 800c08a:	603b      	str	r3, [r7, #0]
 800c08c:	4603      	mov	r3, r0
 800c08e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c090:	7bfb      	ldrb	r3, [r7, #15]
 800c092:	4a0a      	ldr	r2, [pc, #40]	; (800c0bc <disk_write+0x3c>)
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	4413      	add	r3, r2
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	68dc      	ldr	r4, [r3, #12]
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
 800c09e:	4a07      	ldr	r2, [pc, #28]	; (800c0bc <disk_write+0x3c>)
 800c0a0:	4413      	add	r3, r2
 800c0a2:	7a18      	ldrb	r0, [r3, #8]
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	68b9      	ldr	r1, [r7, #8]
 800c0aa:	47a0      	blx	r4
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	75fb      	strb	r3, [r7, #23]
  return res;
 800c0b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	371c      	adds	r7, #28
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd90      	pop	{r4, r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	200000f4 	.word	0x200000f4

0800c0c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	603a      	str	r2, [r7, #0]
 800c0ca:	71fb      	strb	r3, [r7, #7]
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c0d0:	79fb      	ldrb	r3, [r7, #7]
 800c0d2:	4a09      	ldr	r2, [pc, #36]	; (800c0f8 <disk_ioctl+0x38>)
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	4413      	add	r3, r2
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	79fa      	ldrb	r2, [r7, #7]
 800c0de:	4906      	ldr	r1, [pc, #24]	; (800c0f8 <disk_ioctl+0x38>)
 800c0e0:	440a      	add	r2, r1
 800c0e2:	7a10      	ldrb	r0, [r2, #8]
 800c0e4:	79b9      	ldrb	r1, [r7, #6]
 800c0e6:	683a      	ldr	r2, [r7, #0]
 800c0e8:	4798      	blx	r3
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	73fb      	strb	r3, [r7, #15]
  return res;
 800c0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	200000f4 	.word	0x200000f4

0800c0fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	3301      	adds	r3, #1
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c10c:	89fb      	ldrh	r3, [r7, #14]
 800c10e:	021b      	lsls	r3, r3, #8
 800c110:	b21a      	sxth	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	b21b      	sxth	r3, r3
 800c118:	4313      	orrs	r3, r2
 800c11a:	b21b      	sxth	r3, r3
 800c11c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c11e:	89fb      	ldrh	r3, [r7, #14]
}
 800c120:	4618      	mov	r0, r3
 800c122:	3714      	adds	r7, #20
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr

0800c12c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c12c:	b480      	push	{r7}
 800c12e:	b085      	sub	sp, #20
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	3303      	adds	r3, #3
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	021b      	lsls	r3, r3, #8
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	3202      	adds	r2, #2
 800c144:	7812      	ldrb	r2, [r2, #0]
 800c146:	4313      	orrs	r3, r2
 800c148:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	021b      	lsls	r3, r3, #8
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	3201      	adds	r2, #1
 800c152:	7812      	ldrb	r2, [r2, #0]
 800c154:	4313      	orrs	r3, r2
 800c156:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	021b      	lsls	r3, r3, #8
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	7812      	ldrb	r2, [r2, #0]
 800c160:	4313      	orrs	r3, r2
 800c162:	60fb      	str	r3, [r7, #12]
	return rv;
 800c164:	68fb      	ldr	r3, [r7, #12]
}
 800c166:	4618      	mov	r0, r3
 800c168:	3714      	adds	r7, #20
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr

0800c172 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c172:	b480      	push	{r7}
 800c174:	b083      	sub	sp, #12
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
 800c17a:	460b      	mov	r3, r1
 800c17c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	1c5a      	adds	r2, r3, #1
 800c182:	607a      	str	r2, [r7, #4]
 800c184:	887a      	ldrh	r2, [r7, #2]
 800c186:	b2d2      	uxtb	r2, r2
 800c188:	701a      	strb	r2, [r3, #0]
 800c18a:	887b      	ldrh	r3, [r7, #2]
 800c18c:	0a1b      	lsrs	r3, r3, #8
 800c18e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	1c5a      	adds	r2, r3, #1
 800c194:	607a      	str	r2, [r7, #4]
 800c196:	887a      	ldrh	r2, [r7, #2]
 800c198:	b2d2      	uxtb	r2, r2
 800c19a:	701a      	strb	r2, [r3, #0]
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	1c5a      	adds	r2, r3, #1
 800c1b6:	607a      	str	r2, [r7, #4]
 800c1b8:	683a      	ldr	r2, [r7, #0]
 800c1ba:	b2d2      	uxtb	r2, r2
 800c1bc:	701a      	strb	r2, [r3, #0]
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	0a1b      	lsrs	r3, r3, #8
 800c1c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	1c5a      	adds	r2, r3, #1
 800c1c8:	607a      	str	r2, [r7, #4]
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	b2d2      	uxtb	r2, r2
 800c1ce:	701a      	strb	r2, [r3, #0]
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	0a1b      	lsrs	r3, r3, #8
 800c1d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	1c5a      	adds	r2, r3, #1
 800c1da:	607a      	str	r2, [r7, #4]
 800c1dc:	683a      	ldr	r2, [r7, #0]
 800c1de:	b2d2      	uxtb	r2, r2
 800c1e0:	701a      	strb	r2, [r3, #0]
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	0a1b      	lsrs	r3, r3, #8
 800c1e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	1c5a      	adds	r2, r3, #1
 800c1ec:	607a      	str	r2, [r7, #4]
 800c1ee:	683a      	ldr	r2, [r7, #0]
 800c1f0:	b2d2      	uxtb	r2, r2
 800c1f2:	701a      	strb	r2, [r3, #0]
}
 800c1f4:	bf00      	nop
 800c1f6:	370c      	adds	r7, #12
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c200:	b480      	push	{r7}
 800c202:	b087      	sub	sp, #28
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d00d      	beq.n	800c236 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c21a:	693a      	ldr	r2, [r7, #16]
 800c21c:	1c53      	adds	r3, r2, #1
 800c21e:	613b      	str	r3, [r7, #16]
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	1c59      	adds	r1, r3, #1
 800c224:	6179      	str	r1, [r7, #20]
 800c226:	7812      	ldrb	r2, [r2, #0]
 800c228:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	3b01      	subs	r3, #1
 800c22e:	607b      	str	r3, [r7, #4]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d1f1      	bne.n	800c21a <mem_cpy+0x1a>
	}
}
 800c236:	bf00      	nop
 800c238:	371c      	adds	r7, #28
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr

0800c242 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c242:	b480      	push	{r7}
 800c244:	b087      	sub	sp, #28
 800c246:	af00      	add	r7, sp, #0
 800c248:	60f8      	str	r0, [r7, #12]
 800c24a:	60b9      	str	r1, [r7, #8]
 800c24c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	1c5a      	adds	r2, r3, #1
 800c256:	617a      	str	r2, [r7, #20]
 800c258:	68ba      	ldr	r2, [r7, #8]
 800c25a:	b2d2      	uxtb	r2, r2
 800c25c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	3b01      	subs	r3, #1
 800c262:	607b      	str	r3, [r7, #4]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1f3      	bne.n	800c252 <mem_set+0x10>
}
 800c26a:	bf00      	nop
 800c26c:	bf00      	nop
 800c26e:	371c      	adds	r7, #28
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c278:	b480      	push	{r7}
 800c27a:	b089      	sub	sp, #36	; 0x24
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	61fb      	str	r3, [r7, #28]
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	1c5a      	adds	r2, r3, #1
 800c294:	61fa      	str	r2, [r7, #28]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	4619      	mov	r1, r3
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	1c5a      	adds	r2, r3, #1
 800c29e:	61ba      	str	r2, [r7, #24]
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	1acb      	subs	r3, r1, r3
 800c2a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	607b      	str	r3, [r7, #4]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d002      	beq.n	800c2b8 <mem_cmp+0x40>
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d0eb      	beq.n	800c290 <mem_cmp+0x18>

	return r;
 800c2b8:	697b      	ldr	r3, [r7, #20]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3724      	adds	r7, #36	; 0x24
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr

0800c2c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c2c6:	b480      	push	{r7}
 800c2c8:	b083      	sub	sp, #12
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
 800c2ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c2d0:	e002      	b.n	800c2d8 <chk_chr+0x12>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	607b      	str	r3, [r7, #4]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d005      	beq.n	800c2ec <chk_chr+0x26>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d1f2      	bne.n	800c2d2 <chk_chr+0xc>
	return *str;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	781b      	ldrb	r3, [r3, #0]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c306:	2300      	movs	r3, #0
 800c308:	60bb      	str	r3, [r7, #8]
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	60fb      	str	r3, [r7, #12]
 800c30e:	e029      	b.n	800c364 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c310:	4a27      	ldr	r2, [pc, #156]	; (800c3b0 <chk_lock+0xb4>)
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	011b      	lsls	r3, r3, #4
 800c316:	4413      	add	r3, r2
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d01d      	beq.n	800c35a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c31e:	4a24      	ldr	r2, [pc, #144]	; (800c3b0 <chk_lock+0xb4>)
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	011b      	lsls	r3, r3, #4
 800c324:	4413      	add	r3, r2
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d116      	bne.n	800c35e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c330:	4a1f      	ldr	r2, [pc, #124]	; (800c3b0 <chk_lock+0xb4>)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	011b      	lsls	r3, r3, #4
 800c336:	4413      	add	r3, r2
 800c338:	3304      	adds	r3, #4
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c340:	429a      	cmp	r2, r3
 800c342:	d10c      	bne.n	800c35e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c344:	4a1a      	ldr	r2, [pc, #104]	; (800c3b0 <chk_lock+0xb4>)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	011b      	lsls	r3, r3, #4
 800c34a:	4413      	add	r3, r2
 800c34c:	3308      	adds	r3, #8
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c354:	429a      	cmp	r2, r3
 800c356:	d102      	bne.n	800c35e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c358:	e007      	b.n	800c36a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c35a:	2301      	movs	r3, #1
 800c35c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	3301      	adds	r3, #1
 800c362:	60fb      	str	r3, [r7, #12]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2b01      	cmp	r3, #1
 800c368:	d9d2      	bls.n	800c310 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2b02      	cmp	r3, #2
 800c36e:	d109      	bne.n	800c384 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d102      	bne.n	800c37c <chk_lock+0x80>
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	2b02      	cmp	r3, #2
 800c37a:	d101      	bne.n	800c380 <chk_lock+0x84>
 800c37c:	2300      	movs	r3, #0
 800c37e:	e010      	b.n	800c3a2 <chk_lock+0xa6>
 800c380:	2312      	movs	r3, #18
 800c382:	e00e      	b.n	800c3a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d108      	bne.n	800c39c <chk_lock+0xa0>
 800c38a:	4a09      	ldr	r2, [pc, #36]	; (800c3b0 <chk_lock+0xb4>)
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	011b      	lsls	r3, r3, #4
 800c390:	4413      	add	r3, r2
 800c392:	330c      	adds	r3, #12
 800c394:	881b      	ldrh	r3, [r3, #0]
 800c396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c39a:	d101      	bne.n	800c3a0 <chk_lock+0xa4>
 800c39c:	2310      	movs	r3, #16
 800c39e:	e000      	b.n	800c3a2 <chk_lock+0xa6>
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3714      	adds	r7, #20
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr
 800c3ae:	bf00      	nop
 800c3b0:	200000d4 	.word	0x200000d4

0800c3b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	607b      	str	r3, [r7, #4]
 800c3be:	e002      	b.n	800c3c6 <enq_lock+0x12>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	607b      	str	r3, [r7, #4]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d806      	bhi.n	800c3da <enq_lock+0x26>
 800c3cc:	4a09      	ldr	r2, [pc, #36]	; (800c3f4 <enq_lock+0x40>)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	011b      	lsls	r3, r3, #4
 800c3d2:	4413      	add	r3, r2
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1f2      	bne.n	800c3c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2b02      	cmp	r3, #2
 800c3de:	bf14      	ite	ne
 800c3e0:	2301      	movne	r3, #1
 800c3e2:	2300      	moveq	r3, #0
 800c3e4:	b2db      	uxtb	r3, r3
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	370c      	adds	r7, #12
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	200000d4 	.word	0x200000d4

0800c3f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b085      	sub	sp, #20
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c402:	2300      	movs	r3, #0
 800c404:	60fb      	str	r3, [r7, #12]
 800c406:	e01f      	b.n	800c448 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c408:	4a41      	ldr	r2, [pc, #260]	; (800c510 <inc_lock+0x118>)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	011b      	lsls	r3, r3, #4
 800c40e:	4413      	add	r3, r2
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	429a      	cmp	r2, r3
 800c418:	d113      	bne.n	800c442 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c41a:	4a3d      	ldr	r2, [pc, #244]	; (800c510 <inc_lock+0x118>)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	011b      	lsls	r3, r3, #4
 800c420:	4413      	add	r3, r2
 800c422:	3304      	adds	r3, #4
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d109      	bne.n	800c442 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c42e:	4a38      	ldr	r2, [pc, #224]	; (800c510 <inc_lock+0x118>)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	011b      	lsls	r3, r3, #4
 800c434:	4413      	add	r3, r2
 800c436:	3308      	adds	r3, #8
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c43e:	429a      	cmp	r2, r3
 800c440:	d006      	beq.n	800c450 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	3301      	adds	r3, #1
 800c446:	60fb      	str	r3, [r7, #12]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d9dc      	bls.n	800c408 <inc_lock+0x10>
 800c44e:	e000      	b.n	800c452 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c450:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2b02      	cmp	r3, #2
 800c456:	d132      	bne.n	800c4be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c458:	2300      	movs	r3, #0
 800c45a:	60fb      	str	r3, [r7, #12]
 800c45c:	e002      	b.n	800c464 <inc_lock+0x6c>
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	3301      	adds	r3, #1
 800c462:	60fb      	str	r3, [r7, #12]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2b01      	cmp	r3, #1
 800c468:	d806      	bhi.n	800c478 <inc_lock+0x80>
 800c46a:	4a29      	ldr	r2, [pc, #164]	; (800c510 <inc_lock+0x118>)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	011b      	lsls	r3, r3, #4
 800c470:	4413      	add	r3, r2
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d1f2      	bne.n	800c45e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2b02      	cmp	r3, #2
 800c47c:	d101      	bne.n	800c482 <inc_lock+0x8a>
 800c47e:	2300      	movs	r3, #0
 800c480:	e040      	b.n	800c504 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	4922      	ldr	r1, [pc, #136]	; (800c510 <inc_lock+0x118>)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	011b      	lsls	r3, r3, #4
 800c48c:	440b      	add	r3, r1
 800c48e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	689a      	ldr	r2, [r3, #8]
 800c494:	491e      	ldr	r1, [pc, #120]	; (800c510 <inc_lock+0x118>)
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	011b      	lsls	r3, r3, #4
 800c49a:	440b      	add	r3, r1
 800c49c:	3304      	adds	r3, #4
 800c49e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	695a      	ldr	r2, [r3, #20]
 800c4a4:	491a      	ldr	r1, [pc, #104]	; (800c510 <inc_lock+0x118>)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	011b      	lsls	r3, r3, #4
 800c4aa:	440b      	add	r3, r1
 800c4ac:	3308      	adds	r3, #8
 800c4ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c4b0:	4a17      	ldr	r2, [pc, #92]	; (800c510 <inc_lock+0x118>)
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	011b      	lsls	r3, r3, #4
 800c4b6:	4413      	add	r3, r2
 800c4b8:	330c      	adds	r3, #12
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d009      	beq.n	800c4d8 <inc_lock+0xe0>
 800c4c4:	4a12      	ldr	r2, [pc, #72]	; (800c510 <inc_lock+0x118>)
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	011b      	lsls	r3, r3, #4
 800c4ca:	4413      	add	r3, r2
 800c4cc:	330c      	adds	r3, #12
 800c4ce:	881b      	ldrh	r3, [r3, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d001      	beq.n	800c4d8 <inc_lock+0xe0>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	e015      	b.n	800c504 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d108      	bne.n	800c4f0 <inc_lock+0xf8>
 800c4de:	4a0c      	ldr	r2, [pc, #48]	; (800c510 <inc_lock+0x118>)
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	011b      	lsls	r3, r3, #4
 800c4e4:	4413      	add	r3, r2
 800c4e6:	330c      	adds	r3, #12
 800c4e8:	881b      	ldrh	r3, [r3, #0]
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	b29a      	uxth	r2, r3
 800c4ee:	e001      	b.n	800c4f4 <inc_lock+0xfc>
 800c4f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4f4:	4906      	ldr	r1, [pc, #24]	; (800c510 <inc_lock+0x118>)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	011b      	lsls	r3, r3, #4
 800c4fa:	440b      	add	r3, r1
 800c4fc:	330c      	adds	r3, #12
 800c4fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	3301      	adds	r3, #1
}
 800c504:	4618      	mov	r0, r3
 800c506:	3714      	adds	r7, #20
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr
 800c510:	200000d4 	.word	0x200000d4

0800c514 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c514:	b480      	push	{r7}
 800c516:	b085      	sub	sp, #20
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	3b01      	subs	r3, #1
 800c520:	607b      	str	r3, [r7, #4]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d825      	bhi.n	800c574 <dec_lock+0x60>
		n = Files[i].ctr;
 800c528:	4a17      	ldr	r2, [pc, #92]	; (800c588 <dec_lock+0x74>)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	011b      	lsls	r3, r3, #4
 800c52e:	4413      	add	r3, r2
 800c530:	330c      	adds	r3, #12
 800c532:	881b      	ldrh	r3, [r3, #0]
 800c534:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c536:	89fb      	ldrh	r3, [r7, #14]
 800c538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c53c:	d101      	bne.n	800c542 <dec_lock+0x2e>
 800c53e:	2300      	movs	r3, #0
 800c540:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c542:	89fb      	ldrh	r3, [r7, #14]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d002      	beq.n	800c54e <dec_lock+0x3a>
 800c548:	89fb      	ldrh	r3, [r7, #14]
 800c54a:	3b01      	subs	r3, #1
 800c54c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c54e:	4a0e      	ldr	r2, [pc, #56]	; (800c588 <dec_lock+0x74>)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	011b      	lsls	r3, r3, #4
 800c554:	4413      	add	r3, r2
 800c556:	330c      	adds	r3, #12
 800c558:	89fa      	ldrh	r2, [r7, #14]
 800c55a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c55c:	89fb      	ldrh	r3, [r7, #14]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d105      	bne.n	800c56e <dec_lock+0x5a>
 800c562:	4a09      	ldr	r2, [pc, #36]	; (800c588 <dec_lock+0x74>)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	011b      	lsls	r3, r3, #4
 800c568:	4413      	add	r3, r2
 800c56a:	2200      	movs	r2, #0
 800c56c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c56e:	2300      	movs	r3, #0
 800c570:	737b      	strb	r3, [r7, #13]
 800c572:	e001      	b.n	800c578 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c574:	2302      	movs	r3, #2
 800c576:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c578:	7b7b      	ldrb	r3, [r7, #13]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3714      	adds	r7, #20
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop
 800c588:	200000d4 	.word	0x200000d4

0800c58c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b085      	sub	sp, #20
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c594:	2300      	movs	r3, #0
 800c596:	60fb      	str	r3, [r7, #12]
 800c598:	e010      	b.n	800c5bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c59a:	4a0d      	ldr	r2, [pc, #52]	; (800c5d0 <clear_lock+0x44>)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	011b      	lsls	r3, r3, #4
 800c5a0:	4413      	add	r3, r2
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d105      	bne.n	800c5b6 <clear_lock+0x2a>
 800c5aa:	4a09      	ldr	r2, [pc, #36]	; (800c5d0 <clear_lock+0x44>)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	011b      	lsls	r3, r3, #4
 800c5b0:	4413      	add	r3, r2
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	60fb      	str	r3, [r7, #12]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d9eb      	bls.n	800c59a <clear_lock+0xe>
	}
}
 800c5c2:	bf00      	nop
 800c5c4:	bf00      	nop
 800c5c6:	3714      	adds	r7, #20
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr
 800c5d0:	200000d4 	.word	0x200000d4

0800c5d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b086      	sub	sp, #24
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	78db      	ldrb	r3, [r3, #3]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d034      	beq.n	800c652 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	7858      	ldrb	r0, [r3, #1]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	697a      	ldr	r2, [r7, #20]
 800c5fc:	f7ff fd40 	bl	800c080 <disk_write>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d002      	beq.n	800c60c <sync_window+0x38>
			res = FR_DISK_ERR;
 800c606:	2301      	movs	r3, #1
 800c608:	73fb      	strb	r3, [r7, #15]
 800c60a:	e022      	b.n	800c652 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2200      	movs	r2, #0
 800c610:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c616:	697a      	ldr	r2, [r7, #20]
 800c618:	1ad2      	subs	r2, r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	69db      	ldr	r3, [r3, #28]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d217      	bcs.n	800c652 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	789b      	ldrb	r3, [r3, #2]
 800c626:	613b      	str	r3, [r7, #16]
 800c628:	e010      	b.n	800c64c <sync_window+0x78>
					wsect += fs->fsize;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	69db      	ldr	r3, [r3, #28]
 800c62e:	697a      	ldr	r2, [r7, #20]
 800c630:	4413      	add	r3, r2
 800c632:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	7858      	ldrb	r0, [r3, #1]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c63e:	2301      	movs	r3, #1
 800c640:	697a      	ldr	r2, [r7, #20]
 800c642:	f7ff fd1d 	bl	800c080 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	3b01      	subs	r3, #1
 800c64a:	613b      	str	r3, [r7, #16]
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d8eb      	bhi.n	800c62a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c652:	7bfb      	ldrb	r3, [r7, #15]
}
 800c654:	4618      	mov	r0, r3
 800c656:	3718      	adds	r7, #24
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c666:	2300      	movs	r3, #0
 800c668:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c66e:	683a      	ldr	r2, [r7, #0]
 800c670:	429a      	cmp	r2, r3
 800c672:	d01b      	beq.n	800c6ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7ff ffad 	bl	800c5d4 <sync_window>
 800c67a:	4603      	mov	r3, r0
 800c67c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c67e:	7bfb      	ldrb	r3, [r7, #15]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d113      	bne.n	800c6ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	7858      	ldrb	r0, [r3, #1]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c68e:	2301      	movs	r3, #1
 800c690:	683a      	ldr	r2, [r7, #0]
 800c692:	f7ff fcd5 	bl	800c040 <disk_read>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d004      	beq.n	800c6a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c69c:	f04f 33ff 	mov.w	r3, #4294967295
 800c6a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	683a      	ldr	r2, [r7, #0]
 800c6aa:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
	...

0800c6b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f7ff ff87 	bl	800c5d4 <sync_window>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c6ca:	7bfb      	ldrb	r3, [r7, #15]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d159      	bne.n	800c784 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	2b03      	cmp	r3, #3
 800c6d6:	d149      	bne.n	800c76c <sync_fs+0xb4>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	791b      	ldrb	r3, [r3, #4]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d145      	bne.n	800c76c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	899b      	ldrh	r3, [r3, #12]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	2100      	movs	r1, #0
 800c6ee:	f7ff fda8 	bl	800c242 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	3334      	adds	r3, #52	; 0x34
 800c6f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c6fa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7ff fd37 	bl	800c172 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	3334      	adds	r3, #52	; 0x34
 800c708:	4921      	ldr	r1, [pc, #132]	; (800c790 <sync_fs+0xd8>)
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7ff fd4c 	bl	800c1a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	3334      	adds	r3, #52	; 0x34
 800c714:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c718:	491e      	ldr	r1, [pc, #120]	; (800c794 <sync_fs+0xdc>)
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7ff fd44 	bl	800c1a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	3334      	adds	r3, #52	; 0x34
 800c724:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	695b      	ldr	r3, [r3, #20]
 800c72c:	4619      	mov	r1, r3
 800c72e:	4610      	mov	r0, r2
 800c730:	f7ff fd3a 	bl	800c1a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	3334      	adds	r3, #52	; 0x34
 800c738:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	691b      	ldr	r3, [r3, #16]
 800c740:	4619      	mov	r1, r3
 800c742:	4610      	mov	r0, r2
 800c744:	f7ff fd30 	bl	800c1a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6a1b      	ldr	r3, [r3, #32]
 800c74c:	1c5a      	adds	r2, r3, #1
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	7858      	ldrb	r0, [r3, #1]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c760:	2301      	movs	r3, #1
 800c762:	f7ff fc8d 	bl	800c080 <disk_write>
			fs->fsi_flag = 0;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	785b      	ldrb	r3, [r3, #1]
 800c770:	2200      	movs	r2, #0
 800c772:	2100      	movs	r1, #0
 800c774:	4618      	mov	r0, r3
 800c776:	f7ff fca3 	bl	800c0c0 <disk_ioctl>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d001      	beq.n	800c784 <sync_fs+0xcc>
 800c780:	2301      	movs	r3, #1
 800c782:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c784:	7bfb      	ldrb	r3, [r7, #15]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	41615252 	.word	0x41615252
 800c794:	61417272 	.word	0x61417272

0800c798 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	3b02      	subs	r3, #2
 800c7a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	699b      	ldr	r3, [r3, #24]
 800c7ac:	3b02      	subs	r3, #2
 800c7ae:	683a      	ldr	r2, [r7, #0]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d301      	bcc.n	800c7b8 <clust2sect+0x20>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	e008      	b.n	800c7ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	895b      	ldrh	r3, [r3, #10]
 800c7bc:	461a      	mov	r2, r3
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	fb03 f202 	mul.w	r2, r3, r2
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c8:	4413      	add	r3, r2
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	370c      	adds	r7, #12
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr

0800c7d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b086      	sub	sp, #24
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
 800c7de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d904      	bls.n	800c7f6 <get_fat+0x20>
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	699b      	ldr	r3, [r3, #24]
 800c7f0:	683a      	ldr	r2, [r7, #0]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d302      	bcc.n	800c7fc <get_fat+0x26>
		val = 1;	/* Internal error */
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	617b      	str	r3, [r7, #20]
 800c7fa:	e0bb      	b.n	800c974 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c7fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c800:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	2b03      	cmp	r3, #3
 800c808:	f000 8083 	beq.w	800c912 <get_fat+0x13c>
 800c80c:	2b03      	cmp	r3, #3
 800c80e:	f300 80a7 	bgt.w	800c960 <get_fat+0x18a>
 800c812:	2b01      	cmp	r3, #1
 800c814:	d002      	beq.n	800c81c <get_fat+0x46>
 800c816:	2b02      	cmp	r3, #2
 800c818:	d056      	beq.n	800c8c8 <get_fat+0xf2>
 800c81a:	e0a1      	b.n	800c960 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	60fb      	str	r3, [r7, #12]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	085b      	lsrs	r3, r3, #1
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	4413      	add	r3, r2
 800c828:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	899b      	ldrh	r3, [r3, #12]
 800c832:	4619      	mov	r1, r3
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	fbb3 f3f1 	udiv	r3, r3, r1
 800c83a:	4413      	add	r3, r2
 800c83c:	4619      	mov	r1, r3
 800c83e:	6938      	ldr	r0, [r7, #16]
 800c840:	f7ff ff0c 	bl	800c65c <move_window>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	f040 808d 	bne.w	800c966 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	1c5a      	adds	r2, r3, #1
 800c850:	60fa      	str	r2, [r7, #12]
 800c852:	693a      	ldr	r2, [r7, #16]
 800c854:	8992      	ldrh	r2, [r2, #12]
 800c856:	fbb3 f1f2 	udiv	r1, r3, r2
 800c85a:	fb02 f201 	mul.w	r2, r2, r1
 800c85e:	1a9b      	subs	r3, r3, r2
 800c860:	693a      	ldr	r2, [r7, #16]
 800c862:	4413      	add	r3, r2
 800c864:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c868:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	899b      	ldrh	r3, [r3, #12]
 800c872:	4619      	mov	r1, r3
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	fbb3 f3f1 	udiv	r3, r3, r1
 800c87a:	4413      	add	r3, r2
 800c87c:	4619      	mov	r1, r3
 800c87e:	6938      	ldr	r0, [r7, #16]
 800c880:	f7ff feec 	bl	800c65c <move_window>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d16f      	bne.n	800c96a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	899b      	ldrh	r3, [r3, #12]
 800c88e:	461a      	mov	r2, r3
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	fbb3 f1f2 	udiv	r1, r3, r2
 800c896:	fb02 f201 	mul.w	r2, r2, r1
 800c89a:	1a9b      	subs	r3, r3, r2
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	4413      	add	r3, r2
 800c8a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c8a4:	021b      	lsls	r3, r3, #8
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	f003 0301 	and.w	r3, r3, #1
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d002      	beq.n	800c8be <get_fat+0xe8>
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	091b      	lsrs	r3, r3, #4
 800c8bc:	e002      	b.n	800c8c4 <get_fat+0xee>
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c8c4:	617b      	str	r3, [r7, #20]
			break;
 800c8c6:	e055      	b.n	800c974 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	899b      	ldrh	r3, [r3, #12]
 800c8d0:	085b      	lsrs	r3, r3, #1
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	fbb3 f3f1 	udiv	r3, r3, r1
 800c8dc:	4413      	add	r3, r2
 800c8de:	4619      	mov	r1, r3
 800c8e0:	6938      	ldr	r0, [r7, #16]
 800c8e2:	f7ff febb 	bl	800c65c <move_window>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d140      	bne.n	800c96e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	005b      	lsls	r3, r3, #1
 800c8f6:	693a      	ldr	r2, [r7, #16]
 800c8f8:	8992      	ldrh	r2, [r2, #12]
 800c8fa:	fbb3 f0f2 	udiv	r0, r3, r2
 800c8fe:	fb02 f200 	mul.w	r2, r2, r0
 800c902:	1a9b      	subs	r3, r3, r2
 800c904:	440b      	add	r3, r1
 800c906:	4618      	mov	r0, r3
 800c908:	f7ff fbf8 	bl	800c0fc <ld_word>
 800c90c:	4603      	mov	r3, r0
 800c90e:	617b      	str	r3, [r7, #20]
			break;
 800c910:	e030      	b.n	800c974 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	899b      	ldrh	r3, [r3, #12]
 800c91a:	089b      	lsrs	r3, r3, #2
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	4619      	mov	r1, r3
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	fbb3 f3f1 	udiv	r3, r3, r1
 800c926:	4413      	add	r3, r2
 800c928:	4619      	mov	r1, r3
 800c92a:	6938      	ldr	r0, [r7, #16]
 800c92c:	f7ff fe96 	bl	800c65c <move_window>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d11d      	bne.n	800c972 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	009b      	lsls	r3, r3, #2
 800c940:	693a      	ldr	r2, [r7, #16]
 800c942:	8992      	ldrh	r2, [r2, #12]
 800c944:	fbb3 f0f2 	udiv	r0, r3, r2
 800c948:	fb02 f200 	mul.w	r2, r2, r0
 800c94c:	1a9b      	subs	r3, r3, r2
 800c94e:	440b      	add	r3, r1
 800c950:	4618      	mov	r0, r3
 800c952:	f7ff fbeb 	bl	800c12c <ld_dword>
 800c956:	4603      	mov	r3, r0
 800c958:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c95c:	617b      	str	r3, [r7, #20]
			break;
 800c95e:	e009      	b.n	800c974 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c960:	2301      	movs	r3, #1
 800c962:	617b      	str	r3, [r7, #20]
 800c964:	e006      	b.n	800c974 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c966:	bf00      	nop
 800c968:	e004      	b.n	800c974 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c96a:	bf00      	nop
 800c96c:	e002      	b.n	800c974 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c96e:	bf00      	nop
 800c970:	e000      	b.n	800c974 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c972:	bf00      	nop
		}
	}

	return val;
 800c974:	697b      	ldr	r3, [r7, #20]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3718      	adds	r7, #24
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c97e:	b590      	push	{r4, r7, lr}
 800c980:	b089      	sub	sp, #36	; 0x24
 800c982:	af00      	add	r7, sp, #0
 800c984:	60f8      	str	r0, [r7, #12]
 800c986:	60b9      	str	r1, [r7, #8]
 800c988:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c98a:	2302      	movs	r3, #2
 800c98c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	2b01      	cmp	r3, #1
 800c992:	f240 8102 	bls.w	800cb9a <put_fat+0x21c>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	699b      	ldr	r3, [r3, #24]
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	f080 80fc 	bcs.w	800cb9a <put_fat+0x21c>
		switch (fs->fs_type) {
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	2b03      	cmp	r3, #3
 800c9a8:	f000 80b6 	beq.w	800cb18 <put_fat+0x19a>
 800c9ac:	2b03      	cmp	r3, #3
 800c9ae:	f300 80fd 	bgt.w	800cbac <put_fat+0x22e>
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d003      	beq.n	800c9be <put_fat+0x40>
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	f000 8083 	beq.w	800cac2 <put_fat+0x144>
 800c9bc:	e0f6      	b.n	800cbac <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	61bb      	str	r3, [r7, #24]
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	085b      	lsrs	r3, r3, #1
 800c9c6:	69ba      	ldr	r2, [r7, #24]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	899b      	ldrh	r3, [r3, #12]
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	69bb      	ldr	r3, [r7, #24]
 800c9d8:	fbb3 f3f1 	udiv	r3, r3, r1
 800c9dc:	4413      	add	r3, r2
 800c9de:	4619      	mov	r1, r3
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	f7ff fe3b 	bl	800c65c <move_window>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c9ea:	7ffb      	ldrb	r3, [r7, #31]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f040 80d6 	bne.w	800cb9e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c9f8:	69bb      	ldr	r3, [r7, #24]
 800c9fa:	1c5a      	adds	r2, r3, #1
 800c9fc:	61ba      	str	r2, [r7, #24]
 800c9fe:	68fa      	ldr	r2, [r7, #12]
 800ca00:	8992      	ldrh	r2, [r2, #12]
 800ca02:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca06:	fb02 f200 	mul.w	r2, r2, r0
 800ca0a:	1a9b      	subs	r3, r3, r2
 800ca0c:	440b      	add	r3, r1
 800ca0e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	f003 0301 	and.w	r3, r3, #1
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00d      	beq.n	800ca36 <put_fat+0xb8>
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	b25b      	sxtb	r3, r3
 800ca20:	f003 030f 	and.w	r3, r3, #15
 800ca24:	b25a      	sxtb	r2, r3
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	011b      	lsls	r3, r3, #4
 800ca2c:	b25b      	sxtb	r3, r3
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	b25b      	sxtb	r3, r3
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	e001      	b.n	800ca3a <put_fat+0xbc>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	697a      	ldr	r2, [r7, #20]
 800ca3c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2201      	movs	r2, #1
 800ca42:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	899b      	ldrh	r3, [r3, #12]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	69bb      	ldr	r3, [r7, #24]
 800ca50:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca54:	4413      	add	r3, r2
 800ca56:	4619      	mov	r1, r3
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	f7ff fdff 	bl	800c65c <move_window>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ca62:	7ffb      	ldrb	r3, [r7, #31]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	f040 809c 	bne.w	800cba2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	899b      	ldrh	r3, [r3, #12]
 800ca74:	461a      	mov	r2, r3
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca7c:	fb02 f200 	mul.w	r2, r2, r0
 800ca80:	1a9b      	subs	r3, r3, r2
 800ca82:	440b      	add	r3, r1
 800ca84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	f003 0301 	and.w	r3, r3, #1
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d003      	beq.n	800ca98 <put_fat+0x11a>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	091b      	lsrs	r3, r3, #4
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	e00e      	b.n	800cab6 <put_fat+0x138>
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	b25b      	sxtb	r3, r3
 800ca9e:	f023 030f 	bic.w	r3, r3, #15
 800caa2:	b25a      	sxtb	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	0a1b      	lsrs	r3, r3, #8
 800caa8:	b25b      	sxtb	r3, r3
 800caaa:	f003 030f 	and.w	r3, r3, #15
 800caae:	b25b      	sxtb	r3, r3
 800cab0:	4313      	orrs	r3, r2
 800cab2:	b25b      	sxtb	r3, r3
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	697a      	ldr	r2, [r7, #20]
 800cab8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2201      	movs	r2, #1
 800cabe:	70da      	strb	r2, [r3, #3]
			break;
 800cac0:	e074      	b.n	800cbac <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	899b      	ldrh	r3, [r3, #12]
 800caca:	085b      	lsrs	r3, r3, #1
 800cacc:	b29b      	uxth	r3, r3
 800cace:	4619      	mov	r1, r3
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	fbb3 f3f1 	udiv	r3, r3, r1
 800cad6:	4413      	add	r3, r2
 800cad8:	4619      	mov	r1, r3
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	f7ff fdbe 	bl	800c65c <move_window>
 800cae0:	4603      	mov	r3, r0
 800cae2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cae4:	7ffb      	ldrb	r3, [r7, #31]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d15d      	bne.n	800cba6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	005b      	lsls	r3, r3, #1
 800caf4:	68fa      	ldr	r2, [r7, #12]
 800caf6:	8992      	ldrh	r2, [r2, #12]
 800caf8:	fbb3 f0f2 	udiv	r0, r3, r2
 800cafc:	fb02 f200 	mul.w	r2, r2, r0
 800cb00:	1a9b      	subs	r3, r3, r2
 800cb02:	440b      	add	r3, r1
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	b292      	uxth	r2, r2
 800cb08:	4611      	mov	r1, r2
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7ff fb31 	bl	800c172 <st_word>
			fs->wflag = 1;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2201      	movs	r2, #1
 800cb14:	70da      	strb	r2, [r3, #3]
			break;
 800cb16:	e049      	b.n	800cbac <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	899b      	ldrh	r3, [r3, #12]
 800cb20:	089b      	lsrs	r3, r3, #2
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	4619      	mov	r1, r3
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb2c:	4413      	add	r3, r2
 800cb2e:	4619      	mov	r1, r3
 800cb30:	68f8      	ldr	r0, [r7, #12]
 800cb32:	f7ff fd93 	bl	800c65c <move_window>
 800cb36:	4603      	mov	r3, r0
 800cb38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb3a:	7ffb      	ldrb	r3, [r7, #31]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d134      	bne.n	800cbaa <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	68fa      	ldr	r2, [r7, #12]
 800cb52:	8992      	ldrh	r2, [r2, #12]
 800cb54:	fbb3 f0f2 	udiv	r0, r3, r2
 800cb58:	fb02 f200 	mul.w	r2, r2, r0
 800cb5c:	1a9b      	subs	r3, r3, r2
 800cb5e:	440b      	add	r3, r1
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7ff fae3 	bl	800c12c <ld_dword>
 800cb66:	4603      	mov	r3, r0
 800cb68:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cb6c:	4323      	orrs	r3, r4
 800cb6e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	68fa      	ldr	r2, [r7, #12]
 800cb7c:	8992      	ldrh	r2, [r2, #12]
 800cb7e:	fbb3 f0f2 	udiv	r0, r3, r2
 800cb82:	fb02 f200 	mul.w	r2, r2, r0
 800cb86:	1a9b      	subs	r3, r3, r2
 800cb88:	440b      	add	r3, r1
 800cb8a:	6879      	ldr	r1, [r7, #4]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7ff fb0b 	bl	800c1a8 <st_dword>
			fs->wflag = 1;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2201      	movs	r2, #1
 800cb96:	70da      	strb	r2, [r3, #3]
			break;
 800cb98:	e008      	b.n	800cbac <put_fat+0x22e>
		}
	}
 800cb9a:	bf00      	nop
 800cb9c:	e006      	b.n	800cbac <put_fat+0x22e>
			if (res != FR_OK) break;
 800cb9e:	bf00      	nop
 800cba0:	e004      	b.n	800cbac <put_fat+0x22e>
			if (res != FR_OK) break;
 800cba2:	bf00      	nop
 800cba4:	e002      	b.n	800cbac <put_fat+0x22e>
			if (res != FR_OK) break;
 800cba6:	bf00      	nop
 800cba8:	e000      	b.n	800cbac <put_fat+0x22e>
			if (res != FR_OK) break;
 800cbaa:	bf00      	nop
	return res;
 800cbac:	7ffb      	ldrb	r3, [r7, #31]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3724      	adds	r7, #36	; 0x24
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd90      	pop	{r4, r7, pc}

0800cbb6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b088      	sub	sp, #32
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	60f8      	str	r0, [r7, #12]
 800cbbe:	60b9      	str	r1, [r7, #8]
 800cbc0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d904      	bls.n	800cbdc <remove_chain+0x26>
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	699b      	ldr	r3, [r3, #24]
 800cbd6:	68ba      	ldr	r2, [r7, #8]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d301      	bcc.n	800cbe0 <remove_chain+0x2a>
 800cbdc:	2302      	movs	r3, #2
 800cbde:	e04b      	b.n	800cc78 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d00c      	beq.n	800cc00 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cbe6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbea:	6879      	ldr	r1, [r7, #4]
 800cbec:	69b8      	ldr	r0, [r7, #24]
 800cbee:	f7ff fec6 	bl	800c97e <put_fat>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cbf6:	7ffb      	ldrb	r3, [r7, #31]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d001      	beq.n	800cc00 <remove_chain+0x4a>
 800cbfc:	7ffb      	ldrb	r3, [r7, #31]
 800cbfe:	e03b      	b.n	800cc78 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cc00:	68b9      	ldr	r1, [r7, #8]
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	f7ff fde7 	bl	800c7d6 <get_fat>
 800cc08:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d031      	beq.n	800cc74 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d101      	bne.n	800cc1a <remove_chain+0x64>
 800cc16:	2302      	movs	r3, #2
 800cc18:	e02e      	b.n	800cc78 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc20:	d101      	bne.n	800cc26 <remove_chain+0x70>
 800cc22:	2301      	movs	r3, #1
 800cc24:	e028      	b.n	800cc78 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cc26:	2200      	movs	r2, #0
 800cc28:	68b9      	ldr	r1, [r7, #8]
 800cc2a:	69b8      	ldr	r0, [r7, #24]
 800cc2c:	f7ff fea7 	bl	800c97e <put_fat>
 800cc30:	4603      	mov	r3, r0
 800cc32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cc34:	7ffb      	ldrb	r3, [r7, #31]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d001      	beq.n	800cc3e <remove_chain+0x88>
 800cc3a:	7ffb      	ldrb	r3, [r7, #31]
 800cc3c:	e01c      	b.n	800cc78 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	695a      	ldr	r2, [r3, #20]
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	699b      	ldr	r3, [r3, #24]
 800cc46:	3b02      	subs	r3, #2
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d20b      	bcs.n	800cc64 <remove_chain+0xae>
			fs->free_clst++;
 800cc4c:	69bb      	ldr	r3, [r7, #24]
 800cc4e:	695b      	ldr	r3, [r3, #20]
 800cc50:	1c5a      	adds	r2, r3, #1
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800cc56:	69bb      	ldr	r3, [r7, #24]
 800cc58:	791b      	ldrb	r3, [r3, #4]
 800cc5a:	f043 0301 	orr.w	r3, r3, #1
 800cc5e:	b2da      	uxtb	r2, r3
 800cc60:	69bb      	ldr	r3, [r7, #24]
 800cc62:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cc68:	69bb      	ldr	r3, [r7, #24]
 800cc6a:	699b      	ldr	r3, [r3, #24]
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d3c6      	bcc.n	800cc00 <remove_chain+0x4a>
 800cc72:	e000      	b.n	800cc76 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cc74:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cc76:	2300      	movs	r3, #0
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3720      	adds	r7, #32
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b088      	sub	sp, #32
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d10d      	bne.n	800ccb2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	691b      	ldr	r3, [r3, #16]
 800cc9a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d004      	beq.n	800ccac <create_chain+0x2c>
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	699b      	ldr	r3, [r3, #24]
 800cca6:	69ba      	ldr	r2, [r7, #24]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d31b      	bcc.n	800cce4 <create_chain+0x64>
 800ccac:	2301      	movs	r3, #1
 800ccae:	61bb      	str	r3, [r7, #24]
 800ccb0:	e018      	b.n	800cce4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ccb2:	6839      	ldr	r1, [r7, #0]
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f7ff fd8e 	bl	800c7d6 <get_fat>
 800ccba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d801      	bhi.n	800ccc6 <create_chain+0x46>
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e070      	b.n	800cda8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cccc:	d101      	bne.n	800ccd2 <create_chain+0x52>
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	e06a      	b.n	800cda8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	699b      	ldr	r3, [r3, #24]
 800ccd6:	68fa      	ldr	r2, [r7, #12]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d201      	bcs.n	800cce0 <create_chain+0x60>
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	e063      	b.n	800cda8 <create_chain+0x128>
		scl = clst;
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	3301      	adds	r3, #1
 800ccec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	699b      	ldr	r3, [r3, #24]
 800ccf2:	69fa      	ldr	r2, [r7, #28]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d307      	bcc.n	800cd08 <create_chain+0x88>
				ncl = 2;
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ccfc:	69fa      	ldr	r2, [r7, #28]
 800ccfe:	69bb      	ldr	r3, [r7, #24]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d901      	bls.n	800cd08 <create_chain+0x88>
 800cd04:	2300      	movs	r3, #0
 800cd06:	e04f      	b.n	800cda8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cd08:	69f9      	ldr	r1, [r7, #28]
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7ff fd63 	bl	800c7d6 <get_fat>
 800cd10:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00e      	beq.n	800cd36 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d003      	beq.n	800cd26 <create_chain+0xa6>
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd24:	d101      	bne.n	800cd2a <create_chain+0xaa>
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	e03e      	b.n	800cda8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cd2a:	69fa      	ldr	r2, [r7, #28]
 800cd2c:	69bb      	ldr	r3, [r7, #24]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d1da      	bne.n	800cce8 <create_chain+0x68>
 800cd32:	2300      	movs	r3, #0
 800cd34:	e038      	b.n	800cda8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cd36:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cd38:	f04f 32ff 	mov.w	r2, #4294967295
 800cd3c:	69f9      	ldr	r1, [r7, #28]
 800cd3e:	6938      	ldr	r0, [r7, #16]
 800cd40:	f7ff fe1d 	bl	800c97e <put_fat>
 800cd44:	4603      	mov	r3, r0
 800cd46:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cd48:	7dfb      	ldrb	r3, [r7, #23]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d109      	bne.n	800cd62 <create_chain+0xe2>
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d006      	beq.n	800cd62 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cd54:	69fa      	ldr	r2, [r7, #28]
 800cd56:	6839      	ldr	r1, [r7, #0]
 800cd58:	6938      	ldr	r0, [r7, #16]
 800cd5a:	f7ff fe10 	bl	800c97e <put_fat>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cd62:	7dfb      	ldrb	r3, [r7, #23]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d116      	bne.n	800cd96 <create_chain+0x116>
		fs->last_clst = ncl;
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	69fa      	ldr	r2, [r7, #28]
 800cd6c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	695a      	ldr	r2, [r3, #20]
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	699b      	ldr	r3, [r3, #24]
 800cd76:	3b02      	subs	r3, #2
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d804      	bhi.n	800cd86 <create_chain+0x106>
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	695b      	ldr	r3, [r3, #20]
 800cd80:	1e5a      	subs	r2, r3, #1
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	791b      	ldrb	r3, [r3, #4]
 800cd8a:	f043 0301 	orr.w	r3, r3, #1
 800cd8e:	b2da      	uxtb	r2, r3
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	711a      	strb	r2, [r3, #4]
 800cd94:	e007      	b.n	800cda6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cd96:	7dfb      	ldrb	r3, [r7, #23]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d102      	bne.n	800cda2 <create_chain+0x122>
 800cd9c:	f04f 33ff 	mov.w	r3, #4294967295
 800cda0:	e000      	b.n	800cda4 <create_chain+0x124>
 800cda2:	2301      	movs	r3, #1
 800cda4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cda6:	69fb      	ldr	r3, [r7, #28]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3720      	adds	r7, #32
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b087      	sub	sp, #28
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc4:	3304      	adds	r3, #4
 800cdc6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	899b      	ldrh	r3, [r3, #12]
 800cdcc:	461a      	mov	r2, r3
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	8952      	ldrh	r2, [r2, #10]
 800cdd8:	fbb3 f3f2 	udiv	r3, r3, r2
 800cddc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	1d1a      	adds	r2, r3, #4
 800cde2:	613a      	str	r2, [r7, #16]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d101      	bne.n	800cdf2 <clmt_clust+0x42>
 800cdee:	2300      	movs	r3, #0
 800cdf0:	e010      	b.n	800ce14 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800cdf2:	697a      	ldr	r2, [r7, #20]
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d307      	bcc.n	800ce0a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800cdfa:	697a      	ldr	r2, [r7, #20]
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	1ad3      	subs	r3, r2, r3
 800ce00:	617b      	str	r3, [r7, #20]
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	3304      	adds	r3, #4
 800ce06:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ce08:	e7e9      	b.n	800cdde <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ce0a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	4413      	add	r3, r2
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	371c      	adds	r7, #28
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b086      	sub	sp, #24
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce36:	d204      	bcs.n	800ce42 <dir_sdi+0x22>
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	f003 031f 	and.w	r3, r3, #31
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d001      	beq.n	800ce46 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ce42:	2302      	movs	r3, #2
 800ce44:	e071      	b.n	800cf2a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	683a      	ldr	r2, [r7, #0]
 800ce4a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d106      	bne.n	800ce66 <dir_sdi+0x46>
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	2b02      	cmp	r3, #2
 800ce5e:	d902      	bls.n	800ce66 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce64:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10c      	bne.n	800ce86 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	095b      	lsrs	r3, r3, #5
 800ce70:	693a      	ldr	r2, [r7, #16]
 800ce72:	8912      	ldrh	r2, [r2, #8]
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d301      	bcc.n	800ce7c <dir_sdi+0x5c>
 800ce78:	2302      	movs	r3, #2
 800ce7a:	e056      	b.n	800cf2a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	61da      	str	r2, [r3, #28]
 800ce84:	e02d      	b.n	800cee2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	895b      	ldrh	r3, [r3, #10]
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	899b      	ldrh	r3, [r3, #12]
 800ce90:	fb03 f302 	mul.w	r3, r3, r2
 800ce94:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ce96:	e019      	b.n	800cecc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6979      	ldr	r1, [r7, #20]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7ff fc9a 	bl	800c7d6 <get_fat>
 800cea2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceaa:	d101      	bne.n	800ceb0 <dir_sdi+0x90>
 800ceac:	2301      	movs	r3, #1
 800ceae:	e03c      	b.n	800cf2a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d904      	bls.n	800cec0 <dir_sdi+0xa0>
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	699b      	ldr	r3, [r3, #24]
 800ceba:	697a      	ldr	r2, [r7, #20]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d301      	bcc.n	800cec4 <dir_sdi+0xa4>
 800cec0:	2302      	movs	r3, #2
 800cec2:	e032      	b.n	800cf2a <dir_sdi+0x10a>
			ofs -= csz;
 800cec4:	683a      	ldr	r2, [r7, #0]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cecc:	683a      	ldr	r2, [r7, #0]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d2e1      	bcs.n	800ce98 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ced4:	6979      	ldr	r1, [r7, #20]
 800ced6:	6938      	ldr	r0, [r7, #16]
 800ced8:	f7ff fc5e 	bl	800c798 <clust2sect>
 800cedc:	4602      	mov	r2, r0
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	697a      	ldr	r2, [r7, #20]
 800cee6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	69db      	ldr	r3, [r3, #28]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d101      	bne.n	800cef4 <dir_sdi+0xd4>
 800cef0:	2302      	movs	r3, #2
 800cef2:	e01a      	b.n	800cf2a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	69da      	ldr	r2, [r3, #28]
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	899b      	ldrh	r3, [r3, #12]
 800cefc:	4619      	mov	r1, r3
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf04:	441a      	add	r2, r3
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	899b      	ldrh	r3, [r3, #12]
 800cf14:	461a      	mov	r2, r3
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	fbb3 f0f2 	udiv	r0, r3, r2
 800cf1c:	fb02 f200 	mul.w	r2, r2, r0
 800cf20:	1a9b      	subs	r3, r3, r2
 800cf22:	18ca      	adds	r2, r1, r3
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3718      	adds	r7, #24
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}

0800cf32 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b086      	sub	sp, #24
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
 800cf3a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	695b      	ldr	r3, [r3, #20]
 800cf46:	3320      	adds	r3, #32
 800cf48:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	69db      	ldr	r3, [r3, #28]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d003      	beq.n	800cf5a <dir_next+0x28>
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cf58:	d301      	bcc.n	800cf5e <dir_next+0x2c>
 800cf5a:	2304      	movs	r3, #4
 800cf5c:	e0bb      	b.n	800d0d6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	899b      	ldrh	r3, [r3, #12]
 800cf62:	461a      	mov	r2, r3
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf6a:	fb02 f201 	mul.w	r2, r2, r1
 800cf6e:	1a9b      	subs	r3, r3, r2
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	f040 809d 	bne.w	800d0b0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	69db      	ldr	r3, [r3, #28]
 800cf7a:	1c5a      	adds	r2, r3, #1
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	699b      	ldr	r3, [r3, #24]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10b      	bne.n	800cfa0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	095b      	lsrs	r3, r3, #5
 800cf8c:	68fa      	ldr	r2, [r7, #12]
 800cf8e:	8912      	ldrh	r2, [r2, #8]
 800cf90:	4293      	cmp	r3, r2
 800cf92:	f0c0 808d 	bcc.w	800d0b0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	61da      	str	r2, [r3, #28]
 800cf9c:	2304      	movs	r3, #4
 800cf9e:	e09a      	b.n	800d0d6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	899b      	ldrh	r3, [r3, #12]
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	8952      	ldrh	r2, [r2, #10]
 800cfb0:	3a01      	subs	r2, #1
 800cfb2:	4013      	ands	r3, r2
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d17b      	bne.n	800d0b0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	699b      	ldr	r3, [r3, #24]
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	4610      	mov	r0, r2
 800cfc2:	f7ff fc08 	bl	800c7d6 <get_fat>
 800cfc6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	2b01      	cmp	r3, #1
 800cfcc:	d801      	bhi.n	800cfd2 <dir_next+0xa0>
 800cfce:	2302      	movs	r3, #2
 800cfd0:	e081      	b.n	800d0d6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd8:	d101      	bne.n	800cfde <dir_next+0xac>
 800cfda:	2301      	movs	r3, #1
 800cfdc:	e07b      	b.n	800d0d6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	699b      	ldr	r3, [r3, #24]
 800cfe2:	697a      	ldr	r2, [r7, #20]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d359      	bcc.n	800d09c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d104      	bne.n	800cff8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2200      	movs	r2, #0
 800cff2:	61da      	str	r2, [r3, #28]
 800cff4:	2304      	movs	r3, #4
 800cff6:	e06e      	b.n	800d0d6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	699b      	ldr	r3, [r3, #24]
 800cffe:	4619      	mov	r1, r3
 800d000:	4610      	mov	r0, r2
 800d002:	f7ff fe3d 	bl	800cc80 <create_chain>
 800d006:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d101      	bne.n	800d012 <dir_next+0xe0>
 800d00e:	2307      	movs	r3, #7
 800d010:	e061      	b.n	800d0d6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	2b01      	cmp	r3, #1
 800d016:	d101      	bne.n	800d01c <dir_next+0xea>
 800d018:	2302      	movs	r3, #2
 800d01a:	e05c      	b.n	800d0d6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d022:	d101      	bne.n	800d028 <dir_next+0xf6>
 800d024:	2301      	movs	r3, #1
 800d026:	e056      	b.n	800d0d6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d028:	68f8      	ldr	r0, [r7, #12]
 800d02a:	f7ff fad3 	bl	800c5d4 <sync_window>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	d001      	beq.n	800d038 <dir_next+0x106>
 800d034:	2301      	movs	r3, #1
 800d036:	e04e      	b.n	800d0d6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	899b      	ldrh	r3, [r3, #12]
 800d042:	461a      	mov	r2, r3
 800d044:	2100      	movs	r1, #0
 800d046:	f7ff f8fc 	bl	800c242 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d04a:	2300      	movs	r3, #0
 800d04c:	613b      	str	r3, [r7, #16]
 800d04e:	6979      	ldr	r1, [r7, #20]
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f7ff fba1 	bl	800c798 <clust2sect>
 800d056:	4602      	mov	r2, r0
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	631a      	str	r2, [r3, #48]	; 0x30
 800d05c:	e012      	b.n	800d084 <dir_next+0x152>
						fs->wflag = 1;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2201      	movs	r2, #1
 800d062:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d064:	68f8      	ldr	r0, [r7, #12]
 800d066:	f7ff fab5 	bl	800c5d4 <sync_window>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d001      	beq.n	800d074 <dir_next+0x142>
 800d070:	2301      	movs	r3, #1
 800d072:	e030      	b.n	800d0d6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	3301      	adds	r3, #1
 800d078:	613b      	str	r3, [r7, #16]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d07e:	1c5a      	adds	r2, r3, #1
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	631a      	str	r2, [r3, #48]	; 0x30
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	895b      	ldrh	r3, [r3, #10]
 800d088:	461a      	mov	r2, r3
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d3e6      	bcc.n	800d05e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	1ad2      	subs	r2, r2, r3
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	697a      	ldr	r2, [r7, #20]
 800d0a0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d0a2:	6979      	ldr	r1, [r7, #20]
 800d0a4:	68f8      	ldr	r0, [r7, #12]
 800d0a6:	f7ff fb77 	bl	800c798 <clust2sect>
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	68ba      	ldr	r2, [r7, #8]
 800d0b4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	899b      	ldrh	r3, [r3, #12]
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d0c8:	fb02 f200 	mul.w	r2, r2, r0
 800d0cc:	1a9b      	subs	r3, r3, r2
 800d0ce:	18ca      	adds	r2, r1, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3718      	adds	r7, #24
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b086      	sub	sp, #24
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
 800d0e6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f7ff fe95 	bl	800ce20 <dir_sdi>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d0fa:	7dfb      	ldrb	r3, [r7, #23]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d12b      	bne.n	800d158 <dir_alloc+0x7a>
		n = 0;
 800d100:	2300      	movs	r3, #0
 800d102:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	69db      	ldr	r3, [r3, #28]
 800d108:	4619      	mov	r1, r3
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	f7ff faa6 	bl	800c65c <move_window>
 800d110:	4603      	mov	r3, r0
 800d112:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d114:	7dfb      	ldrb	r3, [r7, #23]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d11d      	bne.n	800d156 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6a1b      	ldr	r3, [r3, #32]
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	2be5      	cmp	r3, #229	; 0xe5
 800d122:	d004      	beq.n	800d12e <dir_alloc+0x50>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6a1b      	ldr	r3, [r3, #32]
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d107      	bne.n	800d13e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	3301      	adds	r3, #1
 800d132:	613b      	str	r3, [r7, #16]
 800d134:	693a      	ldr	r2, [r7, #16]
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d102      	bne.n	800d142 <dir_alloc+0x64>
 800d13c:	e00c      	b.n	800d158 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d13e:	2300      	movs	r3, #0
 800d140:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d142:	2101      	movs	r1, #1
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f7ff fef4 	bl	800cf32 <dir_next>
 800d14a:	4603      	mov	r3, r0
 800d14c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d14e:	7dfb      	ldrb	r3, [r7, #23]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d0d7      	beq.n	800d104 <dir_alloc+0x26>
 800d154:	e000      	b.n	800d158 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d156:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d158:	7dfb      	ldrb	r3, [r7, #23]
 800d15a:	2b04      	cmp	r3, #4
 800d15c:	d101      	bne.n	800d162 <dir_alloc+0x84>
 800d15e:	2307      	movs	r3, #7
 800d160:	75fb      	strb	r3, [r7, #23]
	return res;
 800d162:	7dfb      	ldrb	r3, [r7, #23]
}
 800d164:	4618      	mov	r0, r3
 800d166:	3718      	adds	r7, #24
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	331a      	adds	r3, #26
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7fe ffbe 	bl	800c0fc <ld_word>
 800d180:	4603      	mov	r3, r0
 800d182:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	2b03      	cmp	r3, #3
 800d18a:	d109      	bne.n	800d1a0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	3314      	adds	r3, #20
 800d190:	4618      	mov	r0, r3
 800d192:	f7fe ffb3 	bl	800c0fc <ld_word>
 800d196:	4603      	mov	r3, r0
 800d198:	041b      	lsls	r3, r3, #16
 800d19a:	68fa      	ldr	r2, [r7, #12]
 800d19c:	4313      	orrs	r3, r2
 800d19e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3710      	adds	r7, #16
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}

0800d1aa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d1aa:	b580      	push	{r7, lr}
 800d1ac:	b084      	sub	sp, #16
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	60f8      	str	r0, [r7, #12]
 800d1b2:	60b9      	str	r1, [r7, #8]
 800d1b4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	331a      	adds	r3, #26
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	b292      	uxth	r2, r2
 800d1be:	4611      	mov	r1, r2
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7fe ffd6 	bl	800c172 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	2b03      	cmp	r3, #3
 800d1cc:	d109      	bne.n	800d1e2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	f103 0214 	add.w	r2, r3, #20
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	0c1b      	lsrs	r3, r3, #16
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	4619      	mov	r1, r3
 800d1dc:	4610      	mov	r0, r2
 800d1de:	f7fe ffc8 	bl	800c172 <st_word>
	}
}
 800d1e2:	bf00      	nop
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b086      	sub	sp, #24
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d1f8:	2100      	movs	r1, #0
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7ff fe10 	bl	800ce20 <dir_sdi>
 800d200:	4603      	mov	r3, r0
 800d202:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d204:	7dfb      	ldrb	r3, [r7, #23]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d001      	beq.n	800d20e <dir_find+0x24>
 800d20a:	7dfb      	ldrb	r3, [r7, #23]
 800d20c:	e03e      	b.n	800d28c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	69db      	ldr	r3, [r3, #28]
 800d212:	4619      	mov	r1, r3
 800d214:	6938      	ldr	r0, [r7, #16]
 800d216:	f7ff fa21 	bl	800c65c <move_window>
 800d21a:	4603      	mov	r3, r0
 800d21c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d21e:	7dfb      	ldrb	r3, [r7, #23]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d12f      	bne.n	800d284 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6a1b      	ldr	r3, [r3, #32]
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d102      	bne.n	800d238 <dir_find+0x4e>
 800d232:	2304      	movs	r3, #4
 800d234:	75fb      	strb	r3, [r7, #23]
 800d236:	e028      	b.n	800d28a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6a1b      	ldr	r3, [r3, #32]
 800d23c:	330b      	adds	r3, #11
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d244:	b2da      	uxtb	r2, r3
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a1b      	ldr	r3, [r3, #32]
 800d24e:	330b      	adds	r3, #11
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	f003 0308 	and.w	r3, r3, #8
 800d256:	2b00      	cmp	r3, #0
 800d258:	d10a      	bne.n	800d270 <dir_find+0x86>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6a18      	ldr	r0, [r3, #32]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	3324      	adds	r3, #36	; 0x24
 800d262:	220b      	movs	r2, #11
 800d264:	4619      	mov	r1, r3
 800d266:	f7ff f807 	bl	800c278 <mem_cmp>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d00b      	beq.n	800d288 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d270:	2100      	movs	r1, #0
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f7ff fe5d 	bl	800cf32 <dir_next>
 800d278:	4603      	mov	r3, r0
 800d27a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d27c:	7dfb      	ldrb	r3, [r7, #23]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d0c5      	beq.n	800d20e <dir_find+0x24>
 800d282:	e002      	b.n	800d28a <dir_find+0xa0>
		if (res != FR_OK) break;
 800d284:	bf00      	nop
 800d286:	e000      	b.n	800d28a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d288:	bf00      	nop

	return res;
 800d28a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3718      	adds	r7, #24
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d2a2:	2101      	movs	r1, #1
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f7ff ff1a 	bl	800d0de <dir_alloc>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d2ae:	7bfb      	ldrb	r3, [r7, #15]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d11c      	bne.n	800d2ee <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	69db      	ldr	r3, [r3, #28]
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	68b8      	ldr	r0, [r7, #8]
 800d2bc:	f7ff f9ce 	bl	800c65c <move_window>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d2c4:	7bfb      	ldrb	r3, [r7, #15]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d111      	bne.n	800d2ee <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a1b      	ldr	r3, [r3, #32]
 800d2ce:	2220      	movs	r2, #32
 800d2d0:	2100      	movs	r1, #0
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7fe ffb5 	bl	800c242 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6a18      	ldr	r0, [r3, #32]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	3324      	adds	r3, #36	; 0x24
 800d2e0:	220b      	movs	r2, #11
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	f7fe ff8c 	bl	800c200 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3710      	adds	r7, #16
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b088      	sub	sp, #32
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	60fb      	str	r3, [r7, #12]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	3324      	adds	r3, #36	; 0x24
 800d30c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d30e:	220b      	movs	r2, #11
 800d310:	2120      	movs	r1, #32
 800d312:	68b8      	ldr	r0, [r7, #8]
 800d314:	f7fe ff95 	bl	800c242 <mem_set>
	si = i = 0; ni = 8;
 800d318:	2300      	movs	r3, #0
 800d31a:	613b      	str	r3, [r7, #16]
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	61fb      	str	r3, [r7, #28]
 800d320:	2308      	movs	r3, #8
 800d322:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	1c5a      	adds	r2, r3, #1
 800d328:	61fa      	str	r2, [r7, #28]
 800d32a:	68fa      	ldr	r2, [r7, #12]
 800d32c:	4413      	add	r3, r2
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d332:	7efb      	ldrb	r3, [r7, #27]
 800d334:	2b20      	cmp	r3, #32
 800d336:	d94e      	bls.n	800d3d6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d338:	7efb      	ldrb	r3, [r7, #27]
 800d33a:	2b2f      	cmp	r3, #47	; 0x2f
 800d33c:	d006      	beq.n	800d34c <create_name+0x54>
 800d33e:	7efb      	ldrb	r3, [r7, #27]
 800d340:	2b5c      	cmp	r3, #92	; 0x5c
 800d342:	d110      	bne.n	800d366 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d344:	e002      	b.n	800d34c <create_name+0x54>
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	3301      	adds	r3, #1
 800d34a:	61fb      	str	r3, [r7, #28]
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	4413      	add	r3, r2
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	2b2f      	cmp	r3, #47	; 0x2f
 800d356:	d0f6      	beq.n	800d346 <create_name+0x4e>
 800d358:	68fa      	ldr	r2, [r7, #12]
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	4413      	add	r3, r2
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	2b5c      	cmp	r3, #92	; 0x5c
 800d362:	d0f0      	beq.n	800d346 <create_name+0x4e>
			break;
 800d364:	e038      	b.n	800d3d8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d366:	7efb      	ldrb	r3, [r7, #27]
 800d368:	2b2e      	cmp	r3, #46	; 0x2e
 800d36a:	d003      	beq.n	800d374 <create_name+0x7c>
 800d36c:	693a      	ldr	r2, [r7, #16]
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	429a      	cmp	r2, r3
 800d372:	d30c      	bcc.n	800d38e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	2b0b      	cmp	r3, #11
 800d378:	d002      	beq.n	800d380 <create_name+0x88>
 800d37a:	7efb      	ldrb	r3, [r7, #27]
 800d37c:	2b2e      	cmp	r3, #46	; 0x2e
 800d37e:	d001      	beq.n	800d384 <create_name+0x8c>
 800d380:	2306      	movs	r3, #6
 800d382:	e044      	b.n	800d40e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d384:	2308      	movs	r3, #8
 800d386:	613b      	str	r3, [r7, #16]
 800d388:	230b      	movs	r3, #11
 800d38a:	617b      	str	r3, [r7, #20]
			continue;
 800d38c:	e022      	b.n	800d3d4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d38e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d392:	2b00      	cmp	r3, #0
 800d394:	da04      	bge.n	800d3a0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d396:	7efb      	ldrb	r3, [r7, #27]
 800d398:	3b80      	subs	r3, #128	; 0x80
 800d39a:	4a1f      	ldr	r2, [pc, #124]	; (800d418 <create_name+0x120>)
 800d39c:	5cd3      	ldrb	r3, [r2, r3]
 800d39e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d3a0:	7efb      	ldrb	r3, [r7, #27]
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	481d      	ldr	r0, [pc, #116]	; (800d41c <create_name+0x124>)
 800d3a6:	f7fe ff8e 	bl	800c2c6 <chk_chr>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d001      	beq.n	800d3b4 <create_name+0xbc>
 800d3b0:	2306      	movs	r3, #6
 800d3b2:	e02c      	b.n	800d40e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d3b4:	7efb      	ldrb	r3, [r7, #27]
 800d3b6:	2b60      	cmp	r3, #96	; 0x60
 800d3b8:	d905      	bls.n	800d3c6 <create_name+0xce>
 800d3ba:	7efb      	ldrb	r3, [r7, #27]
 800d3bc:	2b7a      	cmp	r3, #122	; 0x7a
 800d3be:	d802      	bhi.n	800d3c6 <create_name+0xce>
 800d3c0:	7efb      	ldrb	r3, [r7, #27]
 800d3c2:	3b20      	subs	r3, #32
 800d3c4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	1c5a      	adds	r2, r3, #1
 800d3ca:	613a      	str	r2, [r7, #16]
 800d3cc:	68ba      	ldr	r2, [r7, #8]
 800d3ce:	4413      	add	r3, r2
 800d3d0:	7efa      	ldrb	r2, [r7, #27]
 800d3d2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d3d4:	e7a6      	b.n	800d324 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d3d6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d3d8:	68fa      	ldr	r2, [r7, #12]
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	441a      	add	r2, r3
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d101      	bne.n	800d3ec <create_name+0xf4>
 800d3e8:	2306      	movs	r3, #6
 800d3ea:	e010      	b.n	800d40e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	2be5      	cmp	r3, #229	; 0xe5
 800d3f2:	d102      	bne.n	800d3fa <create_name+0x102>
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	2205      	movs	r2, #5
 800d3f8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d3fa:	7efb      	ldrb	r3, [r7, #27]
 800d3fc:	2b20      	cmp	r3, #32
 800d3fe:	d801      	bhi.n	800d404 <create_name+0x10c>
 800d400:	2204      	movs	r2, #4
 800d402:	e000      	b.n	800d406 <create_name+0x10e>
 800d404:	2200      	movs	r2, #0
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	330b      	adds	r3, #11
 800d40a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d40c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3720      	adds	r7, #32
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	08010aa8 	.word	0x08010aa8
 800d41c:	080108bc 	.word	0x080108bc

0800d420 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b086      	sub	sp, #24
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d434:	e002      	b.n	800d43c <follow_path+0x1c>
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	3301      	adds	r3, #1
 800d43a:	603b      	str	r3, [r7, #0]
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b2f      	cmp	r3, #47	; 0x2f
 800d442:	d0f8      	beq.n	800d436 <follow_path+0x16>
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	2b5c      	cmp	r3, #92	; 0x5c
 800d44a:	d0f4      	beq.n	800d436 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	2200      	movs	r2, #0
 800d450:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	2b1f      	cmp	r3, #31
 800d458:	d80a      	bhi.n	800d470 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2280      	movs	r2, #128	; 0x80
 800d45e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d462:	2100      	movs	r1, #0
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f7ff fcdb 	bl	800ce20 <dir_sdi>
 800d46a:	4603      	mov	r3, r0
 800d46c:	75fb      	strb	r3, [r7, #23]
 800d46e:	e048      	b.n	800d502 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d470:	463b      	mov	r3, r7
 800d472:	4619      	mov	r1, r3
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7ff ff3f 	bl	800d2f8 <create_name>
 800d47a:	4603      	mov	r3, r0
 800d47c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d47e:	7dfb      	ldrb	r3, [r7, #23]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d139      	bne.n	800d4f8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f7ff feb0 	bl	800d1ea <dir_find>
 800d48a:	4603      	mov	r3, r0
 800d48c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d494:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d496:	7dfb      	ldrb	r3, [r7, #23]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d00a      	beq.n	800d4b2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d49c:	7dfb      	ldrb	r3, [r7, #23]
 800d49e:	2b04      	cmp	r3, #4
 800d4a0:	d12c      	bne.n	800d4fc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d4a2:	7afb      	ldrb	r3, [r7, #11]
 800d4a4:	f003 0304 	and.w	r3, r3, #4
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d127      	bne.n	800d4fc <follow_path+0xdc>
 800d4ac:	2305      	movs	r3, #5
 800d4ae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d4b0:	e024      	b.n	800d4fc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d4b2:	7afb      	ldrb	r3, [r7, #11]
 800d4b4:	f003 0304 	and.w	r3, r3, #4
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d121      	bne.n	800d500 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	799b      	ldrb	r3, [r3, #6]
 800d4c0:	f003 0310 	and.w	r3, r3, #16
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d102      	bne.n	800d4ce <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d4c8:	2305      	movs	r3, #5
 800d4ca:	75fb      	strb	r3, [r7, #23]
 800d4cc:	e019      	b.n	800d502 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	695b      	ldr	r3, [r3, #20]
 800d4d8:	68fa      	ldr	r2, [r7, #12]
 800d4da:	8992      	ldrh	r2, [r2, #12]
 800d4dc:	fbb3 f0f2 	udiv	r0, r3, r2
 800d4e0:	fb02 f200 	mul.w	r2, r2, r0
 800d4e4:	1a9b      	subs	r3, r3, r2
 800d4e6:	440b      	add	r3, r1
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	68f8      	ldr	r0, [r7, #12]
 800d4ec:	f7ff fe3e 	bl	800d16c <ld_clust>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d4f6:	e7bb      	b.n	800d470 <follow_path+0x50>
			if (res != FR_OK) break;
 800d4f8:	bf00      	nop
 800d4fa:	e002      	b.n	800d502 <follow_path+0xe2>
				break;
 800d4fc:	bf00      	nop
 800d4fe:	e000      	b.n	800d502 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d500:	bf00      	nop
			}
		}
	}

	return res;
 800d502:	7dfb      	ldrb	r3, [r7, #23]
}
 800d504:	4618      	mov	r0, r3
 800d506:	3718      	adds	r7, #24
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b087      	sub	sp, #28
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d514:	f04f 33ff 	mov.w	r3, #4294967295
 800d518:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d031      	beq.n	800d586 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	617b      	str	r3, [r7, #20]
 800d528:	e002      	b.n	800d530 <get_ldnumber+0x24>
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	3301      	adds	r3, #1
 800d52e:	617b      	str	r3, [r7, #20]
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	2b20      	cmp	r3, #32
 800d536:	d903      	bls.n	800d540 <get_ldnumber+0x34>
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	2b3a      	cmp	r3, #58	; 0x3a
 800d53e:	d1f4      	bne.n	800d52a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	2b3a      	cmp	r3, #58	; 0x3a
 800d546:	d11c      	bne.n	800d582 <get_ldnumber+0x76>
			tp = *path;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	1c5a      	adds	r2, r3, #1
 800d552:	60fa      	str	r2, [r7, #12]
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	3b30      	subs	r3, #48	; 0x30
 800d558:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	2b09      	cmp	r3, #9
 800d55e:	d80e      	bhi.n	800d57e <get_ldnumber+0x72>
 800d560:	68fa      	ldr	r2, [r7, #12]
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	429a      	cmp	r2, r3
 800d566:	d10a      	bne.n	800d57e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d107      	bne.n	800d57e <get_ldnumber+0x72>
					vol = (int)i;
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	3301      	adds	r3, #1
 800d576:	617b      	str	r3, [r7, #20]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	697a      	ldr	r2, [r7, #20]
 800d57c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	e002      	b.n	800d588 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d582:	2300      	movs	r3, #0
 800d584:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d586:	693b      	ldr	r3, [r7, #16]
}
 800d588:	4618      	mov	r0, r3
 800d58a:	371c      	adds	r7, #28
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	70da      	strb	r2, [r3, #3]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d5aa:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d5ac:	6839      	ldr	r1, [r7, #0]
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f7ff f854 	bl	800c65c <move_window>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d001      	beq.n	800d5be <check_fs+0x2a>
 800d5ba:	2304      	movs	r3, #4
 800d5bc:	e038      	b.n	800d630 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	3334      	adds	r3, #52	; 0x34
 800d5c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fe fd98 	bl	800c0fc <ld_word>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d001      	beq.n	800d5dc <check_fs+0x48>
 800d5d8:	2303      	movs	r3, #3
 800d5da:	e029      	b.n	800d630 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d5e2:	2be9      	cmp	r3, #233	; 0xe9
 800d5e4:	d009      	beq.n	800d5fa <check_fs+0x66>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d5ec:	2beb      	cmp	r3, #235	; 0xeb
 800d5ee:	d11e      	bne.n	800d62e <check_fs+0x9a>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d5f6:	2b90      	cmp	r3, #144	; 0x90
 800d5f8:	d119      	bne.n	800d62e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	3334      	adds	r3, #52	; 0x34
 800d5fe:	3336      	adds	r3, #54	; 0x36
 800d600:	4618      	mov	r0, r3
 800d602:	f7fe fd93 	bl	800c12c <ld_dword>
 800d606:	4603      	mov	r3, r0
 800d608:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d60c:	4a0a      	ldr	r2, [pc, #40]	; (800d638 <check_fs+0xa4>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d101      	bne.n	800d616 <check_fs+0x82>
 800d612:	2300      	movs	r3, #0
 800d614:	e00c      	b.n	800d630 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	3334      	adds	r3, #52	; 0x34
 800d61a:	3352      	adds	r3, #82	; 0x52
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7fe fd85 	bl	800c12c <ld_dword>
 800d622:	4603      	mov	r3, r0
 800d624:	4a05      	ldr	r2, [pc, #20]	; (800d63c <check_fs+0xa8>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d101      	bne.n	800d62e <check_fs+0x9a>
 800d62a:	2300      	movs	r3, #0
 800d62c:	e000      	b.n	800d630 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d62e:	2302      	movs	r3, #2
}
 800d630:	4618      	mov	r0, r3
 800d632:	3708      	adds	r7, #8
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	00544146 	.word	0x00544146
 800d63c:	33544146 	.word	0x33544146

0800d640 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b096      	sub	sp, #88	; 0x58
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	4613      	mov	r3, r2
 800d64c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	2200      	movs	r2, #0
 800d652:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f7ff ff59 	bl	800d50c <get_ldnumber>
 800d65a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d65e:	2b00      	cmp	r3, #0
 800d660:	da01      	bge.n	800d666 <find_volume+0x26>
 800d662:	230b      	movs	r3, #11
 800d664:	e265      	b.n	800db32 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d666:	4ab0      	ldr	r2, [pc, #704]	; (800d928 <find_volume+0x2e8>)
 800d668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d66a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d66e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d672:	2b00      	cmp	r3, #0
 800d674:	d101      	bne.n	800d67a <find_volume+0x3a>
 800d676:	230c      	movs	r3, #12
 800d678:	e25b      	b.n	800db32 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d67e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d680:	79fb      	ldrb	r3, [r7, #7]
 800d682:	f023 0301 	bic.w	r3, r3, #1
 800d686:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d01a      	beq.n	800d6c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d692:	785b      	ldrb	r3, [r3, #1]
 800d694:	4618      	mov	r0, r3
 800d696:	f7fe fc93 	bl	800bfc0 <disk_status>
 800d69a:	4603      	mov	r3, r0
 800d69c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d6a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d6a4:	f003 0301 	and.w	r3, r3, #1
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d10c      	bne.n	800d6c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d6ac:	79fb      	ldrb	r3, [r7, #7]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d007      	beq.n	800d6c2 <find_volume+0x82>
 800d6b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d6b6:	f003 0304 	and.w	r3, r3, #4
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d001      	beq.n	800d6c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d6be:	230a      	movs	r3, #10
 800d6c0:	e237      	b.n	800db32 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	e235      	b.n	800db32 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ce:	b2da      	uxtb	r2, r3
 800d6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d6:	785b      	ldrb	r3, [r3, #1]
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7fe fc8b 	bl	800bff4 <disk_initialize>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d6e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d6e8:	f003 0301 	and.w	r3, r3, #1
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d001      	beq.n	800d6f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	e21e      	b.n	800db32 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d6f4:	79fb      	ldrb	r3, [r7, #7]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d007      	beq.n	800d70a <find_volume+0xca>
 800d6fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d6fe:	f003 0304 	and.w	r3, r3, #4
 800d702:	2b00      	cmp	r3, #0
 800d704:	d001      	beq.n	800d70a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d706:	230a      	movs	r3, #10
 800d708:	e213      	b.n	800db32 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d70c:	7858      	ldrb	r0, [r3, #1]
 800d70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d710:	330c      	adds	r3, #12
 800d712:	461a      	mov	r2, r3
 800d714:	2102      	movs	r1, #2
 800d716:	f7fe fcd3 	bl	800c0c0 <disk_ioctl>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d001      	beq.n	800d724 <find_volume+0xe4>
 800d720:	2301      	movs	r3, #1
 800d722:	e206      	b.n	800db32 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d726:	899b      	ldrh	r3, [r3, #12]
 800d728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d72c:	d80d      	bhi.n	800d74a <find_volume+0x10a>
 800d72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d730:	899b      	ldrh	r3, [r3, #12]
 800d732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d736:	d308      	bcc.n	800d74a <find_volume+0x10a>
 800d738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73a:	899b      	ldrh	r3, [r3, #12]
 800d73c:	461a      	mov	r2, r3
 800d73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d740:	899b      	ldrh	r3, [r3, #12]
 800d742:	3b01      	subs	r3, #1
 800d744:	4013      	ands	r3, r2
 800d746:	2b00      	cmp	r3, #0
 800d748:	d001      	beq.n	800d74e <find_volume+0x10e>
 800d74a:	2301      	movs	r3, #1
 800d74c:	e1f1      	b.n	800db32 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d74e:	2300      	movs	r3, #0
 800d750:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d752:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d754:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d756:	f7ff ff1d 	bl	800d594 <check_fs>
 800d75a:	4603      	mov	r3, r0
 800d75c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d760:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d764:	2b02      	cmp	r3, #2
 800d766:	d14b      	bne.n	800d800 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d768:	2300      	movs	r3, #0
 800d76a:	643b      	str	r3, [r7, #64]	; 0x40
 800d76c:	e01f      	b.n	800d7ae <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d770:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d776:	011b      	lsls	r3, r3, #4
 800d778:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d77c:	4413      	add	r3, r2
 800d77e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d782:	3304      	adds	r3, #4
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d006      	beq.n	800d798 <find_volume+0x158>
 800d78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78c:	3308      	adds	r3, #8
 800d78e:	4618      	mov	r0, r3
 800d790:	f7fe fccc 	bl	800c12c <ld_dword>
 800d794:	4602      	mov	r2, r0
 800d796:	e000      	b.n	800d79a <find_volume+0x15a>
 800d798:	2200      	movs	r2, #0
 800d79a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d79c:	009b      	lsls	r3, r3, #2
 800d79e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d7a2:	440b      	add	r3, r1
 800d7a4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d7a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	643b      	str	r3, [r7, #64]	; 0x40
 800d7ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7b0:	2b03      	cmp	r3, #3
 800d7b2:	d9dc      	bls.n	800d76e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d002      	beq.n	800d7c4 <find_volume+0x184>
 800d7be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7c0:	3b01      	subs	r3, #1
 800d7c2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d7c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7c6:	009b      	lsls	r3, r3, #2
 800d7c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d7cc:	4413      	add	r3, r2
 800d7ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d7d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d7d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d005      	beq.n	800d7e6 <find_volume+0x1a6>
 800d7da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d7dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d7de:	f7ff fed9 	bl	800d594 <check_fs>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	e000      	b.n	800d7e8 <find_volume+0x1a8>
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d7ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d905      	bls.n	800d800 <find_volume+0x1c0>
 800d7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	643b      	str	r3, [r7, #64]	; 0x40
 800d7fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7fc:	2b03      	cmp	r3, #3
 800d7fe:	d9e1      	bls.n	800d7c4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d804:	2b04      	cmp	r3, #4
 800d806:	d101      	bne.n	800d80c <find_volume+0x1cc>
 800d808:	2301      	movs	r3, #1
 800d80a:	e192      	b.n	800db32 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d80c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d810:	2b01      	cmp	r3, #1
 800d812:	d901      	bls.n	800d818 <find_volume+0x1d8>
 800d814:	230d      	movs	r3, #13
 800d816:	e18c      	b.n	800db32 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d81a:	3334      	adds	r3, #52	; 0x34
 800d81c:	330b      	adds	r3, #11
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fe fc6c 	bl	800c0fc <ld_word>
 800d824:	4603      	mov	r3, r0
 800d826:	461a      	mov	r2, r3
 800d828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d82a:	899b      	ldrh	r3, [r3, #12]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d001      	beq.n	800d834 <find_volume+0x1f4>
 800d830:	230d      	movs	r3, #13
 800d832:	e17e      	b.n	800db32 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d836:	3334      	adds	r3, #52	; 0x34
 800d838:	3316      	adds	r3, #22
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7fe fc5e 	bl	800c0fc <ld_word>
 800d840:	4603      	mov	r3, r0
 800d842:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d846:	2b00      	cmp	r3, #0
 800d848:	d106      	bne.n	800d858 <find_volume+0x218>
 800d84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84c:	3334      	adds	r3, #52	; 0x34
 800d84e:	3324      	adds	r3, #36	; 0x24
 800d850:	4618      	mov	r0, r3
 800d852:	f7fe fc6b 	bl	800c12c <ld_dword>
 800d856:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d85c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d860:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d866:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86a:	789b      	ldrb	r3, [r3, #2]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d005      	beq.n	800d87c <find_volume+0x23c>
 800d870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d872:	789b      	ldrb	r3, [r3, #2]
 800d874:	2b02      	cmp	r3, #2
 800d876:	d001      	beq.n	800d87c <find_volume+0x23c>
 800d878:	230d      	movs	r3, #13
 800d87a:	e15a      	b.n	800db32 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87e:	789b      	ldrb	r3, [r3, #2]
 800d880:	461a      	mov	r2, r3
 800d882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d884:	fb02 f303 	mul.w	r3, r2, r3
 800d888:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d88c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d890:	b29a      	uxth	r2, r3
 800d892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d894:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d898:	895b      	ldrh	r3, [r3, #10]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d008      	beq.n	800d8b0 <find_volume+0x270>
 800d89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a0:	895b      	ldrh	r3, [r3, #10]
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a6:	895b      	ldrh	r3, [r3, #10]
 800d8a8:	3b01      	subs	r3, #1
 800d8aa:	4013      	ands	r3, r2
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d001      	beq.n	800d8b4 <find_volume+0x274>
 800d8b0:	230d      	movs	r3, #13
 800d8b2:	e13e      	b.n	800db32 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b6:	3334      	adds	r3, #52	; 0x34
 800d8b8:	3311      	adds	r3, #17
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f7fe fc1e 	bl	800c0fc <ld_word>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ca:	891b      	ldrh	r3, [r3, #8]
 800d8cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8ce:	8992      	ldrh	r2, [r2, #12]
 800d8d0:	0952      	lsrs	r2, r2, #5
 800d8d2:	b292      	uxth	r2, r2
 800d8d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8d8:	fb02 f201 	mul.w	r2, r2, r1
 800d8dc:	1a9b      	subs	r3, r3, r2
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d001      	beq.n	800d8e8 <find_volume+0x2a8>
 800d8e4:	230d      	movs	r3, #13
 800d8e6:	e124      	b.n	800db32 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ea:	3334      	adds	r3, #52	; 0x34
 800d8ec:	3313      	adds	r3, #19
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7fe fc04 	bl	800c0fc <ld_word>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d8f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d106      	bne.n	800d90c <find_volume+0x2cc>
 800d8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d900:	3334      	adds	r3, #52	; 0x34
 800d902:	3320      	adds	r3, #32
 800d904:	4618      	mov	r0, r3
 800d906:	f7fe fc11 	bl	800c12c <ld_dword>
 800d90a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90e:	3334      	adds	r3, #52	; 0x34
 800d910:	330e      	adds	r3, #14
 800d912:	4618      	mov	r0, r3
 800d914:	f7fe fbf2 	bl	800c0fc <ld_word>
 800d918:	4603      	mov	r3, r0
 800d91a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d91c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d104      	bne.n	800d92c <find_volume+0x2ec>
 800d922:	230d      	movs	r3, #13
 800d924:	e105      	b.n	800db32 <find_volume+0x4f2>
 800d926:	bf00      	nop
 800d928:	200000cc 	.word	0x200000cc

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d92c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d92e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d930:	4413      	add	r3, r2
 800d932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d934:	8911      	ldrh	r1, [r2, #8]
 800d936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d938:	8992      	ldrh	r2, [r2, #12]
 800d93a:	0952      	lsrs	r2, r2, #5
 800d93c:	b292      	uxth	r2, r2
 800d93e:	fbb1 f2f2 	udiv	r2, r1, r2
 800d942:	b292      	uxth	r2, r2
 800d944:	4413      	add	r3, r2
 800d946:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d201      	bcs.n	800d954 <find_volume+0x314>
 800d950:	230d      	movs	r3, #13
 800d952:	e0ee      	b.n	800db32 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d954:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d958:	1ad3      	subs	r3, r2, r3
 800d95a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d95c:	8952      	ldrh	r2, [r2, #10]
 800d95e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d962:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d966:	2b00      	cmp	r3, #0
 800d968:	d101      	bne.n	800d96e <find_volume+0x32e>
 800d96a:	230d      	movs	r3, #13
 800d96c:	e0e1      	b.n	800db32 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800d96e:	2303      	movs	r3, #3
 800d970:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d976:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d802      	bhi.n	800d984 <find_volume+0x344>
 800d97e:	2302      	movs	r3, #2
 800d980:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d986:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d802      	bhi.n	800d994 <find_volume+0x354>
 800d98e:	2301      	movs	r3, #1
 800d990:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d996:	1c9a      	adds	r2, r3, #2
 800d998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d99a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d99e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d9a0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d9a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d9a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9a6:	441a      	add	r2, r3
 800d9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9aa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d9ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b0:	441a      	add	r2, r3
 800d9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800d9b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9ba:	2b03      	cmp	r3, #3
 800d9bc:	d11e      	bne.n	800d9fc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c0:	3334      	adds	r3, #52	; 0x34
 800d9c2:	332a      	adds	r3, #42	; 0x2a
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7fe fb99 	bl	800c0fc <ld_word>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d001      	beq.n	800d9d4 <find_volume+0x394>
 800d9d0:	230d      	movs	r3, #13
 800d9d2:	e0ae      	b.n	800db32 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d6:	891b      	ldrh	r3, [r3, #8]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d001      	beq.n	800d9e0 <find_volume+0x3a0>
 800d9dc:	230d      	movs	r3, #13
 800d9de:	e0a8      	b.n	800db32 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e2:	3334      	adds	r3, #52	; 0x34
 800d9e4:	332c      	adds	r3, #44	; 0x2c
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7fe fba0 	bl	800c12c <ld_dword>
 800d9ec:	4602      	mov	r2, r0
 800d9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f4:	699b      	ldr	r3, [r3, #24]
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	647b      	str	r3, [r7, #68]	; 0x44
 800d9fa:	e01f      	b.n	800da3c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9fe:	891b      	ldrh	r3, [r3, #8]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d101      	bne.n	800da08 <find_volume+0x3c8>
 800da04:	230d      	movs	r3, #13
 800da06:	e094      	b.n	800db32 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800da08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da0e:	441a      	add	r2, r3
 800da10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da12:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800da14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da18:	2b02      	cmp	r3, #2
 800da1a:	d103      	bne.n	800da24 <find_volume+0x3e4>
 800da1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da1e:	699b      	ldr	r3, [r3, #24]
 800da20:	005b      	lsls	r3, r3, #1
 800da22:	e00a      	b.n	800da3a <find_volume+0x3fa>
 800da24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da26:	699a      	ldr	r2, [r3, #24]
 800da28:	4613      	mov	r3, r2
 800da2a:	005b      	lsls	r3, r3, #1
 800da2c:	4413      	add	r3, r2
 800da2e:	085a      	lsrs	r2, r3, #1
 800da30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da32:	699b      	ldr	r3, [r3, #24]
 800da34:	f003 0301 	and.w	r3, r3, #1
 800da38:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800da3a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800da3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da3e:	69da      	ldr	r2, [r3, #28]
 800da40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da42:	899b      	ldrh	r3, [r3, #12]
 800da44:	4619      	mov	r1, r3
 800da46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da48:	440b      	add	r3, r1
 800da4a:	3b01      	subs	r3, #1
 800da4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da4e:	8989      	ldrh	r1, [r1, #12]
 800da50:	fbb3 f3f1 	udiv	r3, r3, r1
 800da54:	429a      	cmp	r2, r3
 800da56:	d201      	bcs.n	800da5c <find_volume+0x41c>
 800da58:	230d      	movs	r3, #13
 800da5a:	e06a      	b.n	800db32 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800da5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5e:	f04f 32ff 	mov.w	r2, #4294967295
 800da62:	615a      	str	r2, [r3, #20]
 800da64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da66:	695a      	ldr	r2, [r3, #20]
 800da68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800da6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6e:	2280      	movs	r2, #128	; 0x80
 800da70:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800da72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da76:	2b03      	cmp	r3, #3
 800da78:	d149      	bne.n	800db0e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800da7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7c:	3334      	adds	r3, #52	; 0x34
 800da7e:	3330      	adds	r3, #48	; 0x30
 800da80:	4618      	mov	r0, r3
 800da82:	f7fe fb3b 	bl	800c0fc <ld_word>
 800da86:	4603      	mov	r3, r0
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d140      	bne.n	800db0e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800da8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da8e:	3301      	adds	r3, #1
 800da90:	4619      	mov	r1, r3
 800da92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da94:	f7fe fde2 	bl	800c65c <move_window>
 800da98:	4603      	mov	r3, r0
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d137      	bne.n	800db0e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800da9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa0:	2200      	movs	r2, #0
 800daa2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800daa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa6:	3334      	adds	r3, #52	; 0x34
 800daa8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800daac:	4618      	mov	r0, r3
 800daae:	f7fe fb25 	bl	800c0fc <ld_word>
 800dab2:	4603      	mov	r3, r0
 800dab4:	461a      	mov	r2, r3
 800dab6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800daba:	429a      	cmp	r2, r3
 800dabc:	d127      	bne.n	800db0e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac0:	3334      	adds	r3, #52	; 0x34
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7fe fb32 	bl	800c12c <ld_dword>
 800dac8:	4603      	mov	r3, r0
 800daca:	4a1c      	ldr	r2, [pc, #112]	; (800db3c <find_volume+0x4fc>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d11e      	bne.n	800db0e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad2:	3334      	adds	r3, #52	; 0x34
 800dad4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dad8:	4618      	mov	r0, r3
 800dada:	f7fe fb27 	bl	800c12c <ld_dword>
 800dade:	4603      	mov	r3, r0
 800dae0:	4a17      	ldr	r2, [pc, #92]	; (800db40 <find_volume+0x500>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d113      	bne.n	800db0e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae8:	3334      	adds	r3, #52	; 0x34
 800daea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800daee:	4618      	mov	r0, r3
 800daf0:	f7fe fb1c 	bl	800c12c <ld_dword>
 800daf4:	4602      	mov	r2, r0
 800daf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafc:	3334      	adds	r3, #52	; 0x34
 800dafe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800db02:	4618      	mov	r0, r3
 800db04:	f7fe fb12 	bl	800c12c <ld_dword>
 800db08:	4602      	mov	r2, r0
 800db0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800db0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db10:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800db14:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800db16:	4b0b      	ldr	r3, [pc, #44]	; (800db44 <find_volume+0x504>)
 800db18:	881b      	ldrh	r3, [r3, #0]
 800db1a:	3301      	adds	r3, #1
 800db1c:	b29a      	uxth	r2, r3
 800db1e:	4b09      	ldr	r3, [pc, #36]	; (800db44 <find_volume+0x504>)
 800db20:	801a      	strh	r2, [r3, #0]
 800db22:	4b08      	ldr	r3, [pc, #32]	; (800db44 <find_volume+0x504>)
 800db24:	881a      	ldrh	r2, [r3, #0]
 800db26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db28:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800db2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db2c:	f7fe fd2e 	bl	800c58c <clear_lock>
#endif
	return FR_OK;
 800db30:	2300      	movs	r3, #0
}
 800db32:	4618      	mov	r0, r3
 800db34:	3758      	adds	r7, #88	; 0x58
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	41615252 	.word	0x41615252
 800db40:	61417272 	.word	0x61417272
 800db44:	200000d0 	.word	0x200000d0

0800db48 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800db52:	2309      	movs	r3, #9
 800db54:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d01c      	beq.n	800db96 <validate+0x4e>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d018      	beq.n	800db96 <validate+0x4e>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d013      	beq.n	800db96 <validate+0x4e>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	889a      	ldrh	r2, [r3, #4]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	88db      	ldrh	r3, [r3, #6]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d10c      	bne.n	800db96 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	785b      	ldrb	r3, [r3, #1]
 800db82:	4618      	mov	r0, r3
 800db84:	f7fe fa1c 	bl	800bfc0 <disk_status>
 800db88:	4603      	mov	r3, r0
 800db8a:	f003 0301 	and.w	r3, r3, #1
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d101      	bne.n	800db96 <validate+0x4e>
			res = FR_OK;
 800db92:	2300      	movs	r3, #0
 800db94:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800db96:	7bfb      	ldrb	r3, [r7, #15]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d102      	bne.n	800dba2 <validate+0x5a>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	e000      	b.n	800dba4 <validate+0x5c>
 800dba2:	2300      	movs	r3, #0
 800dba4:	683a      	ldr	r2, [r7, #0]
 800dba6:	6013      	str	r3, [r2, #0]
	return res;
 800dba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3710      	adds	r7, #16
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
	...

0800dbb4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b088      	sub	sp, #32
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dbc6:	f107 0310 	add.w	r3, r7, #16
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7ff fc9e 	bl	800d50c <get_ldnumber>
 800dbd0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dbd2:	69fb      	ldr	r3, [r7, #28]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	da01      	bge.n	800dbdc <f_mount+0x28>
 800dbd8:	230b      	movs	r3, #11
 800dbda:	e02b      	b.n	800dc34 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dbdc:	4a17      	ldr	r2, [pc, #92]	; (800dc3c <f_mount+0x88>)
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbe4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800dbe6:	69bb      	ldr	r3, [r7, #24]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d005      	beq.n	800dbf8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dbec:	69b8      	ldr	r0, [r7, #24]
 800dbee:	f7fe fccd 	bl	800c58c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dbf2:	69bb      	ldr	r3, [r7, #24]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d002      	beq.n	800dc04 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2200      	movs	r2, #0
 800dc02:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dc04:	68fa      	ldr	r2, [r7, #12]
 800dc06:	490d      	ldr	r1, [pc, #52]	; (800dc3c <f_mount+0x88>)
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d002      	beq.n	800dc1a <f_mount+0x66>
 800dc14:	79fb      	ldrb	r3, [r7, #7]
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d001      	beq.n	800dc1e <f_mount+0x6a>
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	e00a      	b.n	800dc34 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dc1e:	f107 010c 	add.w	r1, r7, #12
 800dc22:	f107 0308 	add.w	r3, r7, #8
 800dc26:	2200      	movs	r2, #0
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7ff fd09 	bl	800d640 <find_volume>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dc32:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3720      	adds	r7, #32
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	200000cc 	.word	0x200000cc

0800dc40 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b098      	sub	sp, #96	; 0x60
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	4613      	mov	r3, r2
 800dc4c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d101      	bne.n	800dc58 <f_open+0x18>
 800dc54:	2309      	movs	r3, #9
 800dc56:	e1bb      	b.n	800dfd0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dc58:	79fb      	ldrb	r3, [r7, #7]
 800dc5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc5e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800dc60:	79fa      	ldrb	r2, [r7, #7]
 800dc62:	f107 0110 	add.w	r1, r7, #16
 800dc66:	f107 0308 	add.w	r3, r7, #8
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7ff fce8 	bl	800d640 <find_volume>
 800dc70:	4603      	mov	r3, r0
 800dc72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800dc76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	f040 819f 	bne.w	800dfbe <f_open+0x37e>
		dj.obj.fs = fs;
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dc84:	68ba      	ldr	r2, [r7, #8]
 800dc86:	f107 0314 	add.w	r3, r7, #20
 800dc8a:	4611      	mov	r1, r2
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7ff fbc7 	bl	800d420 <follow_path>
 800dc92:	4603      	mov	r3, r0
 800dc94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dc98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d11a      	bne.n	800dcd6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dca0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dca4:	b25b      	sxtb	r3, r3
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	da03      	bge.n	800dcb2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800dcaa:	2306      	movs	r3, #6
 800dcac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dcb0:	e011      	b.n	800dcd6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dcb2:	79fb      	ldrb	r3, [r7, #7]
 800dcb4:	f023 0301 	bic.w	r3, r3, #1
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	bf14      	ite	ne
 800dcbc:	2301      	movne	r3, #1
 800dcbe:	2300      	moveq	r3, #0
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	f107 0314 	add.w	r3, r7, #20
 800dcc8:	4611      	mov	r1, r2
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7fe fb16 	bl	800c2fc <chk_lock>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dcd6:	79fb      	ldrb	r3, [r7, #7]
 800dcd8:	f003 031c 	and.w	r3, r3, #28
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d07f      	beq.n	800dde0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dce0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d017      	beq.n	800dd18 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dce8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcec:	2b04      	cmp	r3, #4
 800dcee:	d10e      	bne.n	800dd0e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dcf0:	f7fe fb60 	bl	800c3b4 <enq_lock>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d006      	beq.n	800dd08 <f_open+0xc8>
 800dcfa:	f107 0314 	add.w	r3, r7, #20
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7ff fac8 	bl	800d294 <dir_register>
 800dd04:	4603      	mov	r3, r0
 800dd06:	e000      	b.n	800dd0a <f_open+0xca>
 800dd08:	2312      	movs	r3, #18
 800dd0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dd0e:	79fb      	ldrb	r3, [r7, #7]
 800dd10:	f043 0308 	orr.w	r3, r3, #8
 800dd14:	71fb      	strb	r3, [r7, #7]
 800dd16:	e010      	b.n	800dd3a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dd18:	7ebb      	ldrb	r3, [r7, #26]
 800dd1a:	f003 0311 	and.w	r3, r3, #17
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d003      	beq.n	800dd2a <f_open+0xea>
					res = FR_DENIED;
 800dd22:	2307      	movs	r3, #7
 800dd24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dd28:	e007      	b.n	800dd3a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dd2a:	79fb      	ldrb	r3, [r7, #7]
 800dd2c:	f003 0304 	and.w	r3, r3, #4
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d002      	beq.n	800dd3a <f_open+0xfa>
 800dd34:	2308      	movs	r3, #8
 800dd36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dd3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d168      	bne.n	800de14 <f_open+0x1d4>
 800dd42:	79fb      	ldrb	r3, [r7, #7]
 800dd44:	f003 0308 	and.w	r3, r3, #8
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d063      	beq.n	800de14 <f_open+0x1d4>
				dw = GET_FATTIME();
 800dd4c:	f7fa fdf4 	bl	8008938 <get_fattime>
 800dd50:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dd52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd54:	330e      	adds	r3, #14
 800dd56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7fe fa25 	bl	800c1a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dd5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd60:	3316      	adds	r3, #22
 800dd62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7fe fa1f 	bl	800c1a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd6c:	330b      	adds	r3, #11
 800dd6e:	2220      	movs	r2, #32
 800dd70:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd76:	4611      	mov	r1, r2
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7ff f9f7 	bl	800d16c <ld_clust>
 800dd7e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dd84:	2200      	movs	r2, #0
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7ff fa0f 	bl	800d1aa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dd8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd8e:	331c      	adds	r3, #28
 800dd90:	2100      	movs	r1, #0
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7fe fa08 	bl	800c1a8 <st_dword>
					fs->wflag = 1;
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dd9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d037      	beq.n	800de14 <f_open+0x1d4>
						dw = fs->winsect;
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dda8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ddaa:	f107 0314 	add.w	r3, r7, #20
 800ddae:	2200      	movs	r2, #0
 800ddb0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7fe feff 	bl	800cbb6 <remove_chain>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ddbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d126      	bne.n	800de14 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7fe fc46 	bl	800c65c <move_window>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ddda:	3a01      	subs	r2, #1
 800dddc:	611a      	str	r2, [r3, #16]
 800ddde:	e019      	b.n	800de14 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dde0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d115      	bne.n	800de14 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dde8:	7ebb      	ldrb	r3, [r7, #26]
 800ddea:	f003 0310 	and.w	r3, r3, #16
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d003      	beq.n	800ddfa <f_open+0x1ba>
					res = FR_NO_FILE;
 800ddf2:	2304      	movs	r3, #4
 800ddf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ddf8:	e00c      	b.n	800de14 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ddfa:	79fb      	ldrb	r3, [r7, #7]
 800ddfc:	f003 0302 	and.w	r3, r3, #2
 800de00:	2b00      	cmp	r3, #0
 800de02:	d007      	beq.n	800de14 <f_open+0x1d4>
 800de04:	7ebb      	ldrb	r3, [r7, #26]
 800de06:	f003 0301 	and.w	r3, r3, #1
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d002      	beq.n	800de14 <f_open+0x1d4>
						res = FR_DENIED;
 800de0e:	2307      	movs	r3, #7
 800de10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800de14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d128      	bne.n	800de6e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800de1c:	79fb      	ldrb	r3, [r7, #7]
 800de1e:	f003 0308 	and.w	r3, r3, #8
 800de22:	2b00      	cmp	r3, #0
 800de24:	d003      	beq.n	800de2e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800de26:	79fb      	ldrb	r3, [r7, #7]
 800de28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de2c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800de36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800de3c:	79fb      	ldrb	r3, [r7, #7]
 800de3e:	f023 0301 	bic.w	r3, r3, #1
 800de42:	2b00      	cmp	r3, #0
 800de44:	bf14      	ite	ne
 800de46:	2301      	movne	r3, #1
 800de48:	2300      	moveq	r3, #0
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	461a      	mov	r2, r3
 800de4e:	f107 0314 	add.w	r3, r7, #20
 800de52:	4611      	mov	r1, r2
 800de54:	4618      	mov	r0, r3
 800de56:	f7fe facf 	bl	800c3f8 <inc_lock>
 800de5a:	4602      	mov	r2, r0
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	691b      	ldr	r3, [r3, #16]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d102      	bne.n	800de6e <f_open+0x22e>
 800de68:	2302      	movs	r3, #2
 800de6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800de6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de72:	2b00      	cmp	r3, #0
 800de74:	f040 80a3 	bne.w	800dfbe <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de7c:	4611      	mov	r1, r2
 800de7e:	4618      	mov	r0, r3
 800de80:	f7ff f974 	bl	800d16c <ld_clust>
 800de84:	4602      	mov	r2, r0
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800de8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de8c:	331c      	adds	r3, #28
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fe f94c 	bl	800c12c <ld_dword>
 800de94:	4602      	mov	r2, r0
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2200      	movs	r2, #0
 800de9e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dea0:	693a      	ldr	r2, [r7, #16]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	88da      	ldrh	r2, [r3, #6]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	79fa      	ldrb	r2, [r7, #7]
 800deb2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2200      	movs	r2, #0
 800deb8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2200      	movs	r2, #0
 800debe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2200      	movs	r2, #0
 800dec4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	3330      	adds	r3, #48	; 0x30
 800deca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dece:	2100      	movs	r1, #0
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fe f9b6 	bl	800c242 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ded6:	79fb      	ldrb	r3, [r7, #7]
 800ded8:	f003 0320 	and.w	r3, r3, #32
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d06e      	beq.n	800dfbe <f_open+0x37e>
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	68db      	ldr	r3, [r3, #12]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d06a      	beq.n	800dfbe <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	68da      	ldr	r2, [r3, #12]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	895b      	ldrh	r3, [r3, #10]
 800def4:	461a      	mov	r2, r3
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	899b      	ldrh	r3, [r3, #12]
 800defa:	fb03 f302 	mul.w	r3, r3, r2
 800defe:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	689b      	ldr	r3, [r3, #8]
 800df04:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	657b      	str	r3, [r7, #84]	; 0x54
 800df0c:	e016      	b.n	800df3c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df12:	4618      	mov	r0, r3
 800df14:	f7fe fc5f 	bl	800c7d6 <get_fat>
 800df18:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800df1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d802      	bhi.n	800df26 <f_open+0x2e6>
 800df20:	2302      	movs	r3, #2
 800df22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800df26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df2c:	d102      	bne.n	800df34 <f_open+0x2f4>
 800df2e:	2301      	movs	r3, #1
 800df30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800df34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800df36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df38:	1ad3      	subs	r3, r2, r3
 800df3a:	657b      	str	r3, [r7, #84]	; 0x54
 800df3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df40:	2b00      	cmp	r3, #0
 800df42:	d103      	bne.n	800df4c <f_open+0x30c>
 800df44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800df46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df48:	429a      	cmp	r2, r3
 800df4a:	d8e0      	bhi.n	800df0e <f_open+0x2ce>
				}
				fp->clust = clst;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df50:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800df52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df56:	2b00      	cmp	r3, #0
 800df58:	d131      	bne.n	800dfbe <f_open+0x37e>
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	899b      	ldrh	r3, [r3, #12]
 800df5e:	461a      	mov	r2, r3
 800df60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df62:	fbb3 f1f2 	udiv	r1, r3, r2
 800df66:	fb02 f201 	mul.w	r2, r2, r1
 800df6a:	1a9b      	subs	r3, r3, r2
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d026      	beq.n	800dfbe <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df74:	4618      	mov	r0, r3
 800df76:	f7fe fc0f 	bl	800c798 <clust2sect>
 800df7a:	6478      	str	r0, [r7, #68]	; 0x44
 800df7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d103      	bne.n	800df8a <f_open+0x34a>
						res = FR_INT_ERR;
 800df82:	2302      	movs	r3, #2
 800df84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800df88:	e019      	b.n	800dfbe <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	899b      	ldrh	r3, [r3, #12]
 800df8e:	461a      	mov	r2, r3
 800df90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df92:	fbb3 f2f2 	udiv	r2, r3, r2
 800df96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df98:	441a      	add	r2, r3
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	7858      	ldrb	r0, [r3, #1]
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	6a1a      	ldr	r2, [r3, #32]
 800dfac:	2301      	movs	r3, #1
 800dfae:	f7fe f847 	bl	800c040 <disk_read>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <f_open+0x37e>
 800dfb8:	2301      	movs	r3, #1
 800dfba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dfbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d002      	beq.n	800dfcc <f_open+0x38c>
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dfcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3760      	adds	r7, #96	; 0x60
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b08c      	sub	sp, #48	; 0x30
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	60f8      	str	r0, [r7, #12]
 800dfe0:	60b9      	str	r1, [r7, #8]
 800dfe2:	607a      	str	r2, [r7, #4]
 800dfe4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	2200      	movs	r2, #0
 800dfee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f107 0210 	add.w	r2, r7, #16
 800dff6:	4611      	mov	r1, r2
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7ff fda5 	bl	800db48 <validate>
 800dffe:	4603      	mov	r3, r0
 800e000:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d107      	bne.n	800e01c <f_write+0x44>
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	7d5b      	ldrb	r3, [r3, #21]
 800e010:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e014:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d002      	beq.n	800e022 <f_write+0x4a>
 800e01c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e020:	e16a      	b.n	800e2f8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	7d1b      	ldrb	r3, [r3, #20]
 800e026:	f003 0302 	and.w	r3, r3, #2
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d101      	bne.n	800e032 <f_write+0x5a>
 800e02e:	2307      	movs	r3, #7
 800e030:	e162      	b.n	800e2f8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	699a      	ldr	r2, [r3, #24]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	441a      	add	r2, r3
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	699b      	ldr	r3, [r3, #24]
 800e03e:	429a      	cmp	r2, r3
 800e040:	f080 814c 	bcs.w	800e2dc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	699b      	ldr	r3, [r3, #24]
 800e048:	43db      	mvns	r3, r3
 800e04a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e04c:	e146      	b.n	800e2dc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	699b      	ldr	r3, [r3, #24]
 800e052:	693a      	ldr	r2, [r7, #16]
 800e054:	8992      	ldrh	r2, [r2, #12]
 800e056:	fbb3 f1f2 	udiv	r1, r3, r2
 800e05a:	fb02 f201 	mul.w	r2, r2, r1
 800e05e:	1a9b      	subs	r3, r3, r2
 800e060:	2b00      	cmp	r3, #0
 800e062:	f040 80f1 	bne.w	800e248 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	699b      	ldr	r3, [r3, #24]
 800e06a:	693a      	ldr	r2, [r7, #16]
 800e06c:	8992      	ldrh	r2, [r2, #12]
 800e06e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e072:	693a      	ldr	r2, [r7, #16]
 800e074:	8952      	ldrh	r2, [r2, #10]
 800e076:	3a01      	subs	r2, #1
 800e078:	4013      	ands	r3, r2
 800e07a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d143      	bne.n	800e10a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	699b      	ldr	r3, [r3, #24]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d10c      	bne.n	800e0a4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	689b      	ldr	r3, [r3, #8]
 800e08e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e092:	2b00      	cmp	r3, #0
 800e094:	d11a      	bne.n	800e0cc <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2100      	movs	r1, #0
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7fe fdf0 	bl	800cc80 <create_chain>
 800e0a0:	62b8      	str	r0, [r7, #40]	; 0x28
 800e0a2:	e013      	b.n	800e0cc <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d007      	beq.n	800e0bc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	699b      	ldr	r3, [r3, #24]
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	68f8      	ldr	r0, [r7, #12]
 800e0b4:	f7fe fe7c 	bl	800cdb0 <clmt_clust>
 800e0b8:	62b8      	str	r0, [r7, #40]	; 0x28
 800e0ba:	e007      	b.n	800e0cc <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e0bc:	68fa      	ldr	r2, [r7, #12]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	69db      	ldr	r3, [r3, #28]
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	4610      	mov	r0, r2
 800e0c6:	f7fe fddb 	bl	800cc80 <create_chain>
 800e0ca:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	f000 8109 	beq.w	800e2e6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d6:	2b01      	cmp	r3, #1
 800e0d8:	d104      	bne.n	800e0e4 <f_write+0x10c>
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2202      	movs	r2, #2
 800e0de:	755a      	strb	r2, [r3, #21]
 800e0e0:	2302      	movs	r3, #2
 800e0e2:	e109      	b.n	800e2f8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ea:	d104      	bne.n	800e0f6 <f_write+0x11e>
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	755a      	strb	r2, [r3, #21]
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	e100      	b.n	800e2f8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0fa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	689b      	ldr	r3, [r3, #8]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d102      	bne.n	800e10a <f_write+0x132>
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e108:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	7d1b      	ldrb	r3, [r3, #20]
 800e10e:	b25b      	sxtb	r3, r3
 800e110:	2b00      	cmp	r3, #0
 800e112:	da18      	bge.n	800e146 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	7858      	ldrb	r0, [r3, #1]
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	6a1a      	ldr	r2, [r3, #32]
 800e122:	2301      	movs	r3, #1
 800e124:	f7fd ffac 	bl	800c080 <disk_write>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d004      	beq.n	800e138 <f_write+0x160>
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2201      	movs	r2, #1
 800e132:	755a      	strb	r2, [r3, #21]
 800e134:	2301      	movs	r3, #1
 800e136:	e0df      	b.n	800e2f8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	7d1b      	ldrb	r3, [r3, #20]
 800e13c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e140:	b2da      	uxtb	r2, r3
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e146:	693a      	ldr	r2, [r7, #16]
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	69db      	ldr	r3, [r3, #28]
 800e14c:	4619      	mov	r1, r3
 800e14e:	4610      	mov	r0, r2
 800e150:	f7fe fb22 	bl	800c798 <clust2sect>
 800e154:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d104      	bne.n	800e166 <f_write+0x18e>
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2202      	movs	r2, #2
 800e160:	755a      	strb	r2, [r3, #21]
 800e162:	2302      	movs	r3, #2
 800e164:	e0c8      	b.n	800e2f8 <f_write+0x320>
			sect += csect;
 800e166:	697a      	ldr	r2, [r7, #20]
 800e168:	69bb      	ldr	r3, [r7, #24]
 800e16a:	4413      	add	r3, r2
 800e16c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	899b      	ldrh	r3, [r3, #12]
 800e172:	461a      	mov	r2, r3
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	fbb3 f3f2 	udiv	r3, r3, r2
 800e17a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e17c:	6a3b      	ldr	r3, [r7, #32]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d043      	beq.n	800e20a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e182:	69ba      	ldr	r2, [r7, #24]
 800e184:	6a3b      	ldr	r3, [r7, #32]
 800e186:	4413      	add	r3, r2
 800e188:	693a      	ldr	r2, [r7, #16]
 800e18a:	8952      	ldrh	r2, [r2, #10]
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d905      	bls.n	800e19c <f_write+0x1c4>
					cc = fs->csize - csect;
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	895b      	ldrh	r3, [r3, #10]
 800e194:	461a      	mov	r2, r3
 800e196:	69bb      	ldr	r3, [r7, #24]
 800e198:	1ad3      	subs	r3, r2, r3
 800e19a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	7858      	ldrb	r0, [r3, #1]
 800e1a0:	6a3b      	ldr	r3, [r7, #32]
 800e1a2:	697a      	ldr	r2, [r7, #20]
 800e1a4:	69f9      	ldr	r1, [r7, #28]
 800e1a6:	f7fd ff6b 	bl	800c080 <disk_write>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d004      	beq.n	800e1ba <f_write+0x1e2>
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	755a      	strb	r2, [r3, #21]
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	e09e      	b.n	800e2f8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	6a1a      	ldr	r2, [r3, #32]
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	1ad3      	subs	r3, r2, r3
 800e1c2:	6a3a      	ldr	r2, [r7, #32]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d918      	bls.n	800e1fa <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	6a1a      	ldr	r2, [r3, #32]
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	1ad3      	subs	r3, r2, r3
 800e1d6:	693a      	ldr	r2, [r7, #16]
 800e1d8:	8992      	ldrh	r2, [r2, #12]
 800e1da:	fb02 f303 	mul.w	r3, r2, r3
 800e1de:	69fa      	ldr	r2, [r7, #28]
 800e1e0:	18d1      	adds	r1, r2, r3
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	899b      	ldrh	r3, [r3, #12]
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	f7fe f80a 	bl	800c200 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	7d1b      	ldrb	r3, [r3, #20]
 800e1f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1f4:	b2da      	uxtb	r2, r3
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	899b      	ldrh	r3, [r3, #12]
 800e1fe:	461a      	mov	r2, r3
 800e200:	6a3b      	ldr	r3, [r7, #32]
 800e202:	fb02 f303 	mul.w	r3, r2, r3
 800e206:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e208:	e04b      	b.n	800e2a2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	6a1b      	ldr	r3, [r3, #32]
 800e20e:	697a      	ldr	r2, [r7, #20]
 800e210:	429a      	cmp	r2, r3
 800e212:	d016      	beq.n	800e242 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	699a      	ldr	r2, [r3, #24]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d210      	bcs.n	800e242 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	7858      	ldrb	r0, [r3, #1]
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e22a:	2301      	movs	r3, #1
 800e22c:	697a      	ldr	r2, [r7, #20]
 800e22e:	f7fd ff07 	bl	800c040 <disk_read>
 800e232:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e234:	2b00      	cmp	r3, #0
 800e236:	d004      	beq.n	800e242 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2201      	movs	r2, #1
 800e23c:	755a      	strb	r2, [r3, #21]
 800e23e:	2301      	movs	r3, #1
 800e240:	e05a      	b.n	800e2f8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	697a      	ldr	r2, [r7, #20]
 800e246:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	899b      	ldrh	r3, [r3, #12]
 800e24c:	4618      	mov	r0, r3
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	699b      	ldr	r3, [r3, #24]
 800e252:	693a      	ldr	r2, [r7, #16]
 800e254:	8992      	ldrh	r2, [r2, #12]
 800e256:	fbb3 f1f2 	udiv	r1, r3, r2
 800e25a:	fb02 f201 	mul.w	r2, r2, r1
 800e25e:	1a9b      	subs	r3, r3, r2
 800e260:	1ac3      	subs	r3, r0, r3
 800e262:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	429a      	cmp	r2, r3
 800e26a:	d901      	bls.n	800e270 <f_write+0x298>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	699b      	ldr	r3, [r3, #24]
 800e27a:	693a      	ldr	r2, [r7, #16]
 800e27c:	8992      	ldrh	r2, [r2, #12]
 800e27e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e282:	fb02 f200 	mul.w	r2, r2, r0
 800e286:	1a9b      	subs	r3, r3, r2
 800e288:	440b      	add	r3, r1
 800e28a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e28c:	69f9      	ldr	r1, [r7, #28]
 800e28e:	4618      	mov	r0, r3
 800e290:	f7fd ffb6 	bl	800c200 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	7d1b      	ldrb	r3, [r3, #20]
 800e298:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e29c:	b2da      	uxtb	r2, r3
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e2a2:	69fa      	ldr	r2, [r7, #28]
 800e2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a6:	4413      	add	r3, r2
 800e2a8:	61fb      	str	r3, [r7, #28]
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	699a      	ldr	r2, [r3, #24]
 800e2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b0:	441a      	add	r2, r3
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	619a      	str	r2, [r3, #24]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	68da      	ldr	r2, [r3, #12]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	699b      	ldr	r3, [r3, #24]
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	bf38      	it	cc
 800e2c2:	461a      	movcc	r2, r3
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	60da      	str	r2, [r3, #12]
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ce:	441a      	add	r2, r3
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	601a      	str	r2, [r3, #0]
 800e2d4:	687a      	ldr	r2, [r7, #4]
 800e2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d8:	1ad3      	subs	r3, r2, r3
 800e2da:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	f47f aeb5 	bne.w	800e04e <f_write+0x76>
 800e2e4:	e000      	b.n	800e2e8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e2e6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	7d1b      	ldrb	r3, [r3, #20]
 800e2ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2f0:	b2da      	uxtb	r2, r3
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e2f6:	2300      	movs	r3, #0
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3730      	adds	r7, #48	; 0x30
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b086      	sub	sp, #24
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f107 0208 	add.w	r2, r7, #8
 800e30e:	4611      	mov	r1, r2
 800e310:	4618      	mov	r0, r3
 800e312:	f7ff fc19 	bl	800db48 <validate>
 800e316:	4603      	mov	r3, r0
 800e318:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e31a:	7dfb      	ldrb	r3, [r7, #23]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d168      	bne.n	800e3f2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	7d1b      	ldrb	r3, [r3, #20]
 800e324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d062      	beq.n	800e3f2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	7d1b      	ldrb	r3, [r3, #20]
 800e330:	b25b      	sxtb	r3, r3
 800e332:	2b00      	cmp	r3, #0
 800e334:	da15      	bge.n	800e362 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	7858      	ldrb	r0, [r3, #1]
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6a1a      	ldr	r2, [r3, #32]
 800e344:	2301      	movs	r3, #1
 800e346:	f7fd fe9b 	bl	800c080 <disk_write>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d001      	beq.n	800e354 <f_sync+0x54>
 800e350:	2301      	movs	r3, #1
 800e352:	e04f      	b.n	800e3f4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	7d1b      	ldrb	r3, [r3, #20]
 800e358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e35c:	b2da      	uxtb	r2, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e362:	f7fa fae9 	bl	8008938 <get_fattime>
 800e366:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e368:	68ba      	ldr	r2, [r7, #8]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e36e:	4619      	mov	r1, r3
 800e370:	4610      	mov	r0, r2
 800e372:	f7fe f973 	bl	800c65c <move_window>
 800e376:	4603      	mov	r3, r0
 800e378:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e37a:	7dfb      	ldrb	r3, [r7, #23]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d138      	bne.n	800e3f2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e384:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	330b      	adds	r3, #11
 800e38a:	781a      	ldrb	r2, [r3, #0]
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	330b      	adds	r3, #11
 800e390:	f042 0220 	orr.w	r2, r2, #32
 800e394:	b2d2      	uxtb	r2, r2
 800e396:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6818      	ldr	r0, [r3, #0]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	689b      	ldr	r3, [r3, #8]
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	68f9      	ldr	r1, [r7, #12]
 800e3a4:	f7fe ff01 	bl	800d1aa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f103 021c 	add.w	r2, r3, #28
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	4610      	mov	r0, r2
 800e3b6:	f7fd fef7 	bl	800c1a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	3316      	adds	r3, #22
 800e3be:	6939      	ldr	r1, [r7, #16]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7fd fef1 	bl	800c1a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	3312      	adds	r3, #18
 800e3ca:	2100      	movs	r1, #0
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7fd fed0 	bl	800c172 <st_word>
					fs->wflag = 1;
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7fe f96c 	bl	800c6b8 <sync_fs>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	7d1b      	ldrb	r3, [r3, #20]
 800e3e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3ec:	b2da      	uxtb	r2, r3
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e3f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3718      	adds	r7, #24
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f7ff ff7b 	bl	800e300 <f_sync>
 800e40a:	4603      	mov	r3, r0
 800e40c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e40e:	7bfb      	ldrb	r3, [r7, #15]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d118      	bne.n	800e446 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f107 0208 	add.w	r2, r7, #8
 800e41a:	4611      	mov	r1, r2
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7ff fb93 	bl	800db48 <validate>
 800e422:	4603      	mov	r3, r0
 800e424:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e426:	7bfb      	ldrb	r3, [r7, #15]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d10c      	bne.n	800e446 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	691b      	ldr	r3, [r3, #16]
 800e430:	4618      	mov	r0, r3
 800e432:	f7fe f86f 	bl	800c514 <dec_lock>
 800e436:	4603      	mov	r3, r0
 800e438:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e43a:	7bfb      	ldrb	r3, [r7, #15]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d102      	bne.n	800e446 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2200      	movs	r2, #0
 800e444:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e446:	7bfb      	ldrb	r3, [r7, #15]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b092      	sub	sp, #72	; 0x48
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800e45c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e460:	f107 030c 	add.w	r3, r7, #12
 800e464:	2200      	movs	r2, #0
 800e466:	4618      	mov	r0, r3
 800e468:	f7ff f8ea 	bl	800d640 <find_volume>
 800e46c:	4603      	mov	r3, r0
 800e46e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800e472:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e476:	2b00      	cmp	r3, #0
 800e478:	f040 8099 	bne.w	800e5ae <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800e47c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800e482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e484:	695a      	ldr	r2, [r3, #20]
 800e486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e488:	699b      	ldr	r3, [r3, #24]
 800e48a:	3b02      	subs	r3, #2
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d804      	bhi.n	800e49a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	695a      	ldr	r2, [r3, #20]
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	601a      	str	r2, [r3, #0]
 800e498:	e089      	b.n	800e5ae <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800e49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a0:	781b      	ldrb	r3, [r3, #0]
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d128      	bne.n	800e4f8 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800e4a6:	2302      	movs	r3, #2
 800e4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ac:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800e4ae:	f107 0314 	add.w	r3, r7, #20
 800e4b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7fe f98e 	bl	800c7d6 <get_fat>
 800e4ba:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800e4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4c2:	d103      	bne.n	800e4cc <f_getfree+0x7c>
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e4ca:	e063      	b.n	800e594 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800e4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d103      	bne.n	800e4da <f_getfree+0x8a>
 800e4d2:	2302      	movs	r3, #2
 800e4d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e4d8:	e05c      	b.n	800e594 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800e4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d102      	bne.n	800e4e6 <f_getfree+0x96>
 800e4e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800e4e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ee:	699b      	ldr	r3, [r3, #24]
 800e4f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d3db      	bcc.n	800e4ae <f_getfree+0x5e>
 800e4f6:	e04d      	b.n	800e594 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800e4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fa:	699b      	ldr	r3, [r3, #24]
 800e4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e502:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800e504:	2300      	movs	r3, #0
 800e506:	637b      	str	r3, [r7, #52]	; 0x34
 800e508:	2300      	movs	r3, #0
 800e50a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800e50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d113      	bne.n	800e53a <f_getfree+0xea>
							res = move_window(fs, sect++);
 800e512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e516:	1c5a      	adds	r2, r3, #1
 800e518:	63ba      	str	r2, [r7, #56]	; 0x38
 800e51a:	4619      	mov	r1, r3
 800e51c:	f7fe f89e 	bl	800c65c <move_window>
 800e520:	4603      	mov	r3, r0
 800e522:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800e526:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d131      	bne.n	800e592 <f_getfree+0x142>
							p = fs->win;
 800e52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e530:	3334      	adds	r3, #52	; 0x34
 800e532:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800e534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e536:	899b      	ldrh	r3, [r3, #12]
 800e538:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800e53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	2b02      	cmp	r3, #2
 800e540:	d10f      	bne.n	800e562 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800e542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e544:	f7fd fdda 	bl	800c0fc <ld_word>
 800e548:	4603      	mov	r3, r0
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d102      	bne.n	800e554 <f_getfree+0x104>
 800e54e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e550:	3301      	adds	r3, #1
 800e552:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800e554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e556:	3302      	adds	r3, #2
 800e558:	633b      	str	r3, [r7, #48]	; 0x30
 800e55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e55c:	3b02      	subs	r3, #2
 800e55e:	637b      	str	r3, [r7, #52]	; 0x34
 800e560:	e010      	b.n	800e584 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800e562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e564:	f7fd fde2 	bl	800c12c <ld_dword>
 800e568:	4603      	mov	r3, r0
 800e56a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d102      	bne.n	800e578 <f_getfree+0x128>
 800e572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e574:	3301      	adds	r3, #1
 800e576:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800e578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57a:	3304      	adds	r3, #4
 800e57c:	633b      	str	r3, [r7, #48]	; 0x30
 800e57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e580:	3b04      	subs	r3, #4
 800e582:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800e584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e586:	3b01      	subs	r3, #1
 800e588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d1bd      	bne.n	800e50c <f_getfree+0xbc>
 800e590:	e000      	b.n	800e594 <f_getfree+0x144>
							if (res != FR_OK) break;
 800e592:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e598:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800e59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e59e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800e5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a2:	791a      	ldrb	r2, [r3, #4]
 800e5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a6:	f042 0201 	orr.w	r2, r2, #1
 800e5aa:	b2d2      	uxtb	r2, r2
 800e5ac:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800e5ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3748      	adds	r7, #72	; 0x48
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
	...

0800e5bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b087      	sub	sp, #28
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	60b9      	str	r1, [r7, #8]
 800e5c6:	4613      	mov	r3, r2
 800e5c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e5d2:	4b1f      	ldr	r3, [pc, #124]	; (800e650 <FATFS_LinkDriverEx+0x94>)
 800e5d4:	7a5b      	ldrb	r3, [r3, #9]
 800e5d6:	b2db      	uxtb	r3, r3
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d131      	bne.n	800e640 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e5dc:	4b1c      	ldr	r3, [pc, #112]	; (800e650 <FATFS_LinkDriverEx+0x94>)
 800e5de:	7a5b      	ldrb	r3, [r3, #9]
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	4b1a      	ldr	r3, [pc, #104]	; (800e650 <FATFS_LinkDriverEx+0x94>)
 800e5e6:	2100      	movs	r1, #0
 800e5e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e5ea:	4b19      	ldr	r3, [pc, #100]	; (800e650 <FATFS_LinkDriverEx+0x94>)
 800e5ec:	7a5b      	ldrb	r3, [r3, #9]
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	4a17      	ldr	r2, [pc, #92]	; (800e650 <FATFS_LinkDriverEx+0x94>)
 800e5f2:	009b      	lsls	r3, r3, #2
 800e5f4:	4413      	add	r3, r2
 800e5f6:	68fa      	ldr	r2, [r7, #12]
 800e5f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e5fa:	4b15      	ldr	r3, [pc, #84]	; (800e650 <FATFS_LinkDriverEx+0x94>)
 800e5fc:	7a5b      	ldrb	r3, [r3, #9]
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	461a      	mov	r2, r3
 800e602:	4b13      	ldr	r3, [pc, #76]	; (800e650 <FATFS_LinkDriverEx+0x94>)
 800e604:	4413      	add	r3, r2
 800e606:	79fa      	ldrb	r2, [r7, #7]
 800e608:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e60a:	4b11      	ldr	r3, [pc, #68]	; (800e650 <FATFS_LinkDriverEx+0x94>)
 800e60c:	7a5b      	ldrb	r3, [r3, #9]
 800e60e:	b2db      	uxtb	r3, r3
 800e610:	1c5a      	adds	r2, r3, #1
 800e612:	b2d1      	uxtb	r1, r2
 800e614:	4a0e      	ldr	r2, [pc, #56]	; (800e650 <FATFS_LinkDriverEx+0x94>)
 800e616:	7251      	strb	r1, [r2, #9]
 800e618:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e61a:	7dbb      	ldrb	r3, [r7, #22]
 800e61c:	3330      	adds	r3, #48	; 0x30
 800e61e:	b2da      	uxtb	r2, r3
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	3301      	adds	r3, #1
 800e628:	223a      	movs	r2, #58	; 0x3a
 800e62a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	3302      	adds	r3, #2
 800e630:	222f      	movs	r2, #47	; 0x2f
 800e632:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	3303      	adds	r3, #3
 800e638:	2200      	movs	r2, #0
 800e63a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e63c:	2300      	movs	r3, #0
 800e63e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e640:	7dfb      	ldrb	r3, [r7, #23]
}
 800e642:	4618      	mov	r0, r3
 800e644:	371c      	adds	r7, #28
 800e646:	46bd      	mov	sp, r7
 800e648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64c:	4770      	bx	lr
 800e64e:	bf00      	nop
 800e650:	200000f4 	.word	0x200000f4

0800e654 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b082      	sub	sp, #8
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e65e:	2200      	movs	r2, #0
 800e660:	6839      	ldr	r1, [r7, #0]
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f7ff ffaa 	bl	800e5bc <FATFS_LinkDriverEx>
 800e668:	4603      	mov	r3, r0
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3708      	adds	r7, #8
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
	...

0800e674 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800e674:	b480      	push	{r7}
 800e676:	b085      	sub	sp, #20
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	460b      	mov	r3, r1
 800e67e:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800e680:	2300      	movs	r3, #0
 800e682:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800e684:	2301      	movs	r3, #1
 800e686:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800e688:	4b15      	ldr	r3, [pc, #84]	; (800e6e0 <FATFS_UnLinkDriverEx+0x6c>)
 800e68a:	7a5b      	ldrb	r3, [r3, #9]
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d01e      	beq.n	800e6d0 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	3b30      	subs	r3, #48	; 0x30
 800e698:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800e69a:	7bbb      	ldrb	r3, [r7, #14]
 800e69c:	4a10      	ldr	r2, [pc, #64]	; (800e6e0 <FATFS_UnLinkDriverEx+0x6c>)
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	4413      	add	r3, r2
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d013      	beq.n	800e6d0 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800e6a8:	7bbb      	ldrb	r3, [r7, #14]
 800e6aa:	4a0d      	ldr	r2, [pc, #52]	; (800e6e0 <FATFS_UnLinkDriverEx+0x6c>)
 800e6ac:	009b      	lsls	r3, r3, #2
 800e6ae:	4413      	add	r3, r2
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800e6b4:	7bbb      	ldrb	r3, [r7, #14]
 800e6b6:	4a0a      	ldr	r2, [pc, #40]	; (800e6e0 <FATFS_UnLinkDriverEx+0x6c>)
 800e6b8:	4413      	add	r3, r2
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800e6be:	4b08      	ldr	r3, [pc, #32]	; (800e6e0 <FATFS_UnLinkDriverEx+0x6c>)
 800e6c0:	7a5b      	ldrb	r3, [r3, #9]
 800e6c2:	b2db      	uxtb	r3, r3
 800e6c4:	3b01      	subs	r3, #1
 800e6c6:	b2da      	uxtb	r2, r3
 800e6c8:	4b05      	ldr	r3, [pc, #20]	; (800e6e0 <FATFS_UnLinkDriverEx+0x6c>)
 800e6ca:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800e6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3714      	adds	r7, #20
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6dc:	4770      	bx	lr
 800e6de:	bf00      	nop
 800e6e0:	200000f4 	.word	0x200000f4

0800e6e4 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800e6ec:	2100      	movs	r1, #0
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f7ff ffc0 	bl	800e674 <FATFS_UnLinkDriverEx>
 800e6f4:	4603      	mov	r3, r0
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
	...

0800e700 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800e708:	1d39      	adds	r1, r7, #4
 800e70a:	f04f 33ff 	mov.w	r3, #4294967295
 800e70e:	2201      	movs	r2, #1
 800e710:	4803      	ldr	r0, [pc, #12]	; (800e720 <__io_putchar+0x20>)
 800e712:	f7f8 f95c 	bl	80069ce <HAL_UART_Transmit>
  return ch;
 800e716:	687b      	ldr	r3, [r7, #4]
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3708      	adds	r7, #8
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	20002270 	.word	0x20002270

0800e724 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e728:	2201      	movs	r2, #1
 800e72a:	490e      	ldr	r1, [pc, #56]	; (800e764 <MX_USB_HOST_Init+0x40>)
 800e72c:	480e      	ldr	r0, [pc, #56]	; (800e768 <MX_USB_HOST_Init+0x44>)
 800e72e:	f7fb ff25 	bl	800a57c <USBH_Init>
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	d001      	beq.n	800e73c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e738:	f7f2 fbb0 	bl	8000e9c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800e73c:	490b      	ldr	r1, [pc, #44]	; (800e76c <MX_USB_HOST_Init+0x48>)
 800e73e:	480a      	ldr	r0, [pc, #40]	; (800e768 <MX_USB_HOST_Init+0x44>)
 800e740:	f7fb ffb8 	bl	800a6b4 <USBH_RegisterClass>
 800e744:	4603      	mov	r3, r0
 800e746:	2b00      	cmp	r3, #0
 800e748:	d001      	beq.n	800e74e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e74a:	f7f2 fba7 	bl	8000e9c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e74e:	4806      	ldr	r0, [pc, #24]	; (800e768 <MX_USB_HOST_Init+0x44>)
 800e750:	f7fc f89e 	bl	800a890 <USBH_Start>
 800e754:	4603      	mov	r3, r0
 800e756:	2b00      	cmp	r3, #0
 800e758:	d001      	beq.n	800e75e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e75a:	f7f2 fb9f 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e75e:	bf00      	nop
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	0800e785 	.word	0x0800e785
 800e768:	20004384 	.word	0x20004384
 800e76c:	20000010 	.word	0x20000010

0800e770 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e774:	4802      	ldr	r0, [pc, #8]	; (800e780 <MX_USB_HOST_Process+0x10>)
 800e776:	f7fc f89b 	bl	800a8b0 <USBH_Process>
}
 800e77a:	bf00      	nop
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	20004384 	.word	0x20004384

0800e784 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	460b      	mov	r3, r1
 800e78e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e790:	78fb      	ldrb	r3, [r7, #3]
 800e792:	3b01      	subs	r3, #1
 800e794:	2b04      	cmp	r3, #4
 800e796:	d819      	bhi.n	800e7cc <USBH_UserProcess+0x48>
 800e798:	a201      	add	r2, pc, #4	; (adr r2, 800e7a0 <USBH_UserProcess+0x1c>)
 800e79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e79e:	bf00      	nop
 800e7a0:	0800e7cd 	.word	0x0800e7cd
 800e7a4:	0800e7bd 	.word	0x0800e7bd
 800e7a8:	0800e7cd 	.word	0x0800e7cd
 800e7ac:	0800e7c5 	.word	0x0800e7c5
 800e7b0:	0800e7b5 	.word	0x0800e7b5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e7b4:	4b09      	ldr	r3, [pc, #36]	; (800e7dc <USBH_UserProcess+0x58>)
 800e7b6:	2203      	movs	r2, #3
 800e7b8:	701a      	strb	r2, [r3, #0]
  break;
 800e7ba:	e008      	b.n	800e7ce <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e7bc:	4b07      	ldr	r3, [pc, #28]	; (800e7dc <USBH_UserProcess+0x58>)
 800e7be:	2202      	movs	r2, #2
 800e7c0:	701a      	strb	r2, [r3, #0]
//  {
//    printf("USB Device Process Error\n");
//    /* Error : Hang Here */
//    while(1);
//  }
  break;
 800e7c2:	e004      	b.n	800e7ce <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e7c4:	4b05      	ldr	r3, [pc, #20]	; (800e7dc <USBH_UserProcess+0x58>)
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	701a      	strb	r2, [r3, #0]
  break;
 800e7ca:	e000      	b.n	800e7ce <USBH_UserProcess+0x4a>

  default:
  break;
 800e7cc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e7ce:	bf00      	nop
 800e7d0:	370c      	adds	r7, #12
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d8:	4770      	bx	lr
 800e7da:	bf00      	nop
 800e7dc:	20000100 	.word	0x20000100

0800e7e0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b08a      	sub	sp, #40	; 0x28
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e7e8:	f107 0314 	add.w	r3, r7, #20
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	601a      	str	r2, [r3, #0]
 800e7f0:	605a      	str	r2, [r3, #4]
 800e7f2:	609a      	str	r2, [r3, #8]
 800e7f4:	60da      	str	r2, [r3, #12]
 800e7f6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e800:	d147      	bne.n	800e892 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e802:	2300      	movs	r3, #0
 800e804:	613b      	str	r3, [r7, #16]
 800e806:	4b25      	ldr	r3, [pc, #148]	; (800e89c <HAL_HCD_MspInit+0xbc>)
 800e808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e80a:	4a24      	ldr	r2, [pc, #144]	; (800e89c <HAL_HCD_MspInit+0xbc>)
 800e80c:	f043 0301 	orr.w	r3, r3, #1
 800e810:	6313      	str	r3, [r2, #48]	; 0x30
 800e812:	4b22      	ldr	r3, [pc, #136]	; (800e89c <HAL_HCD_MspInit+0xbc>)
 800e814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e816:	f003 0301 	and.w	r3, r3, #1
 800e81a:	613b      	str	r3, [r7, #16]
 800e81c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e81e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e824:	2300      	movs	r3, #0
 800e826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e828:	2300      	movs	r3, #0
 800e82a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e82c:	f107 0314 	add.w	r3, r7, #20
 800e830:	4619      	mov	r1, r3
 800e832:	481b      	ldr	r0, [pc, #108]	; (800e8a0 <HAL_HCD_MspInit+0xc0>)
 800e834:	f7f5 fc20 	bl	8004078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e838:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e83c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e83e:	2302      	movs	r3, #2
 800e840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e842:	2300      	movs	r3, #0
 800e844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e846:	2303      	movs	r3, #3
 800e848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e84a:	230a      	movs	r3, #10
 800e84c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e84e:	f107 0314 	add.w	r3, r7, #20
 800e852:	4619      	mov	r1, r3
 800e854:	4812      	ldr	r0, [pc, #72]	; (800e8a0 <HAL_HCD_MspInit+0xc0>)
 800e856:	f7f5 fc0f 	bl	8004078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e85a:	4b10      	ldr	r3, [pc, #64]	; (800e89c <HAL_HCD_MspInit+0xbc>)
 800e85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e85e:	4a0f      	ldr	r2, [pc, #60]	; (800e89c <HAL_HCD_MspInit+0xbc>)
 800e860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e864:	6353      	str	r3, [r2, #52]	; 0x34
 800e866:	2300      	movs	r3, #0
 800e868:	60fb      	str	r3, [r7, #12]
 800e86a:	4b0c      	ldr	r3, [pc, #48]	; (800e89c <HAL_HCD_MspInit+0xbc>)
 800e86c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e86e:	4a0b      	ldr	r2, [pc, #44]	; (800e89c <HAL_HCD_MspInit+0xbc>)
 800e870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e874:	6453      	str	r3, [r2, #68]	; 0x44
 800e876:	4b09      	ldr	r3, [pc, #36]	; (800e89c <HAL_HCD_MspInit+0xbc>)
 800e878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e87a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e87e:	60fb      	str	r3, [r7, #12]
 800e880:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e882:	2200      	movs	r2, #0
 800e884:	2100      	movs	r1, #0
 800e886:	2043      	movs	r0, #67	; 0x43
 800e888:	f7f3 faed 	bl	8001e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e88c:	2043      	movs	r0, #67	; 0x43
 800e88e:	f7f3 fb06 	bl	8001e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e892:	bf00      	nop
 800e894:	3728      	adds	r7, #40	; 0x28
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
 800e89a:	bf00      	nop
 800e89c:	40023800 	.word	0x40023800
 800e8a0:	40020000 	.word	0x40020000

0800e8a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7fc fd1b 	bl	800b2ee <USBH_LL_IncTimer>
}
 800e8b8:	bf00      	nop
 800e8ba:	3708      	adds	r7, #8
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7fc fd53 	bl	800b37a <USBH_LL_Connect>
}
 800e8d4:	bf00      	nop
 800e8d6:	3708      	adds	r7, #8
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fc fd5c 	bl	800b3a8 <USBH_LL_Disconnect>
}
 800e8f0:	bf00      	nop
 800e8f2:	3708      	adds	r7, #8
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b083      	sub	sp, #12
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	460b      	mov	r3, r1
 800e902:	70fb      	strb	r3, [r7, #3]
 800e904:	4613      	mov	r3, r2
 800e906:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e908:	bf00      	nop
 800e90a:	370c      	adds	r7, #12
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr

0800e914 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b082      	sub	sp, #8
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e922:	4618      	mov	r0, r3
 800e924:	f7fc fd0d 	bl	800b342 <USBH_LL_PortEnabled>
}
 800e928:	bf00      	nop
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e93e:	4618      	mov	r0, r3
 800e940:	f7fc fd0d 	bl	800b35e <USBH_LL_PortDisabled>
}
 800e944:	bf00      	nop
 800e946:	3708      	adds	r7, #8
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d12a      	bne.n	800e9b4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e95e:	4a18      	ldr	r2, [pc, #96]	; (800e9c0 <USBH_LL_Init+0x74>)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4a15      	ldr	r2, [pc, #84]	; (800e9c0 <USBH_LL_Init+0x74>)
 800e96a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e96e:	4b14      	ldr	r3, [pc, #80]	; (800e9c0 <USBH_LL_Init+0x74>)
 800e970:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e974:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e976:	4b12      	ldr	r3, [pc, #72]	; (800e9c0 <USBH_LL_Init+0x74>)
 800e978:	2208      	movs	r2, #8
 800e97a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e97c:	4b10      	ldr	r3, [pc, #64]	; (800e9c0 <USBH_LL_Init+0x74>)
 800e97e:	2201      	movs	r2, #1
 800e980:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e982:	4b0f      	ldr	r3, [pc, #60]	; (800e9c0 <USBH_LL_Init+0x74>)
 800e984:	2200      	movs	r2, #0
 800e986:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e988:	4b0d      	ldr	r3, [pc, #52]	; (800e9c0 <USBH_LL_Init+0x74>)
 800e98a:	2202      	movs	r2, #2
 800e98c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e98e:	4b0c      	ldr	r3, [pc, #48]	; (800e9c0 <USBH_LL_Init+0x74>)
 800e990:	2200      	movs	r2, #0
 800e992:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e994:	480a      	ldr	r0, [pc, #40]	; (800e9c0 <USBH_LL_Init+0x74>)
 800e996:	f7f5 fd3c 	bl	8004412 <HAL_HCD_Init>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d001      	beq.n	800e9a4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e9a0:	f7f2 fa7c 	bl	8000e9c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e9a4:	4806      	ldr	r0, [pc, #24]	; (800e9c0 <USBH_LL_Init+0x74>)
 800e9a6:	f7f6 f920 	bl	8004bea <HAL_HCD_GetCurrentFrame>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	4619      	mov	r1, r3
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f7fc fc8e 	bl	800b2d0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e9b4:	2300      	movs	r3, #0
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3708      	adds	r7, #8
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	2000475c 	.word	0x2000475c

0800e9c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b084      	sub	sp, #16
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7f6 f88f 	bl	8004afe <HAL_HCD_Start>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e9e4:	7bfb      	ldrb	r3, [r7, #15]
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f000 f98c 	bl	800ed04 <USBH_Get_USB_Status>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b084      	sub	sp, #16
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea02:	2300      	movs	r3, #0
 800ea04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea06:	2300      	movs	r3, #0
 800ea08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7f6 f897 	bl	8004b44 <HAL_HCD_Stop>
 800ea16:	4603      	mov	r3, r0
 800ea18:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ea1a:	7bfb      	ldrb	r3, [r7, #15]
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f000 f971 	bl	800ed04 <USBH_Get_USB_Status>
 800ea22:	4603      	mov	r3, r0
 800ea24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea26:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3710      	adds	r7, #16
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ea38:	2301      	movs	r3, #1
 800ea3a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7f6 f8df 	bl	8004c06 <HAL_HCD_GetCurrentSpeed>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b02      	cmp	r3, #2
 800ea4c:	d00c      	beq.n	800ea68 <USBH_LL_GetSpeed+0x38>
 800ea4e:	2b02      	cmp	r3, #2
 800ea50:	d80d      	bhi.n	800ea6e <USBH_LL_GetSpeed+0x3e>
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d002      	beq.n	800ea5c <USBH_LL_GetSpeed+0x2c>
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	d003      	beq.n	800ea62 <USBH_LL_GetSpeed+0x32>
 800ea5a:	e008      	b.n	800ea6e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ea60:	e008      	b.n	800ea74 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ea62:	2301      	movs	r3, #1
 800ea64:	73fb      	strb	r3, [r7, #15]
    break;
 800ea66:	e005      	b.n	800ea74 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ea68:	2302      	movs	r3, #2
 800ea6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea6c:	e002      	b.n	800ea74 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ea6e:	2301      	movs	r3, #1
 800ea70:	73fb      	strb	r3, [r7, #15]
    break;
 800ea72:	bf00      	nop
  }
  return  speed;
 800ea74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3710      	adds	r7, #16
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b084      	sub	sp, #16
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea86:	2300      	movs	r3, #0
 800ea88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7f6 f872 	bl	8004b7e <HAL_HCD_ResetPort>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ea9e:	7bfb      	ldrb	r3, [r7, #15]
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f000 f92f 	bl	800ed04 <USBH_Get_USB_Status>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eaaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3710      	adds	r7, #16
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	460b      	mov	r3, r1
 800eabe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eac6:	78fa      	ldrb	r2, [r7, #3]
 800eac8:	4611      	mov	r1, r2
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7f6 f879 	bl	8004bc2 <HAL_HCD_HC_GetXferCount>
 800ead0:	4603      	mov	r3, r0
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3708      	adds	r7, #8
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}

0800eada <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800eada:	b590      	push	{r4, r7, lr}
 800eadc:	b089      	sub	sp, #36	; 0x24
 800eade:	af04      	add	r7, sp, #16
 800eae0:	6078      	str	r0, [r7, #4]
 800eae2:	4608      	mov	r0, r1
 800eae4:	4611      	mov	r1, r2
 800eae6:	461a      	mov	r2, r3
 800eae8:	4603      	mov	r3, r0
 800eaea:	70fb      	strb	r3, [r7, #3]
 800eaec:	460b      	mov	r3, r1
 800eaee:	70bb      	strb	r3, [r7, #2]
 800eaf0:	4613      	mov	r3, r2
 800eaf2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800eb02:	787c      	ldrb	r4, [r7, #1]
 800eb04:	78ba      	ldrb	r2, [r7, #2]
 800eb06:	78f9      	ldrb	r1, [r7, #3]
 800eb08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb0a:	9302      	str	r3, [sp, #8]
 800eb0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eb10:	9301      	str	r3, [sp, #4]
 800eb12:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb16:	9300      	str	r3, [sp, #0]
 800eb18:	4623      	mov	r3, r4
 800eb1a:	f7f5 fcdc 	bl	80044d6 <HAL_HCD_HC_Init>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800eb22:	7bfb      	ldrb	r3, [r7, #15]
 800eb24:	4618      	mov	r0, r3
 800eb26:	f000 f8ed 	bl	800ed04 <USBH_Get_USB_Status>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3714      	adds	r7, #20
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd90      	pop	{r4, r7, pc}

0800eb38 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	460b      	mov	r3, r1
 800eb42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb44:	2300      	movs	r3, #0
 800eb46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb52:	78fa      	ldrb	r2, [r7, #3]
 800eb54:	4611      	mov	r1, r2
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7f5 fd4c 	bl	80045f4 <HAL_HCD_HC_Halt>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eb60:	7bfb      	ldrb	r3, [r7, #15]
 800eb62:	4618      	mov	r0, r3
 800eb64:	f000 f8ce 	bl	800ed04 <USBH_Get_USB_Status>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3710      	adds	r7, #16
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}

0800eb76 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800eb76:	b590      	push	{r4, r7, lr}
 800eb78:	b089      	sub	sp, #36	; 0x24
 800eb7a:	af04      	add	r7, sp, #16
 800eb7c:	6078      	str	r0, [r7, #4]
 800eb7e:	4608      	mov	r0, r1
 800eb80:	4611      	mov	r1, r2
 800eb82:	461a      	mov	r2, r3
 800eb84:	4603      	mov	r3, r0
 800eb86:	70fb      	strb	r3, [r7, #3]
 800eb88:	460b      	mov	r3, r1
 800eb8a:	70bb      	strb	r3, [r7, #2]
 800eb8c:	4613      	mov	r3, r2
 800eb8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb90:	2300      	movs	r3, #0
 800eb92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb94:	2300      	movs	r3, #0
 800eb96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800eb9e:	787c      	ldrb	r4, [r7, #1]
 800eba0:	78ba      	ldrb	r2, [r7, #2]
 800eba2:	78f9      	ldrb	r1, [r7, #3]
 800eba4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800eba8:	9303      	str	r3, [sp, #12]
 800ebaa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ebac:	9302      	str	r3, [sp, #8]
 800ebae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb0:	9301      	str	r3, [sp, #4]
 800ebb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	4623      	mov	r3, r4
 800ebba:	f7f5 fd3f 	bl	800463c <HAL_HCD_HC_SubmitRequest>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ebc2:	7bfb      	ldrb	r3, [r7, #15]
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f000 f89d 	bl	800ed04 <USBH_Get_USB_Status>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebce:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3714      	adds	r7, #20
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd90      	pop	{r4, r7, pc}

0800ebd8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ebea:	78fa      	ldrb	r2, [r7, #3]
 800ebec:	4611      	mov	r1, r2
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7f5 ffd3 	bl	8004b9a <HAL_HCD_HC_GetURBState>
 800ebf4:	4603      	mov	r3, r0
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3708      	adds	r7, #8
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}

0800ebfe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ebfe:	b580      	push	{r7, lr}
 800ec00:	b082      	sub	sp, #8
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
 800ec06:	460b      	mov	r3, r1
 800ec08:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d103      	bne.n	800ec1c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ec14:	78fb      	ldrb	r3, [r7, #3]
 800ec16:	4618      	mov	r0, r3
 800ec18:	f000 f8a0 	bl	800ed5c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ec1c:	20c8      	movs	r0, #200	; 0xc8
 800ec1e:	f7f3 f823 	bl	8001c68 <HAL_Delay>
  return USBH_OK;
 800ec22:	2300      	movs	r3, #0
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3708      	adds	r7, #8
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b085      	sub	sp, #20
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	460b      	mov	r3, r1
 800ec36:	70fb      	strb	r3, [r7, #3]
 800ec38:	4613      	mov	r3, r2
 800ec3a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ec42:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ec44:	78fb      	ldrb	r3, [r7, #3]
 800ec46:	68fa      	ldr	r2, [r7, #12]
 800ec48:	212c      	movs	r1, #44	; 0x2c
 800ec4a:	fb01 f303 	mul.w	r3, r1, r3
 800ec4e:	4413      	add	r3, r2
 800ec50:	333b      	adds	r3, #59	; 0x3b
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d009      	beq.n	800ec6c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ec58:	78fb      	ldrb	r3, [r7, #3]
 800ec5a:	68fa      	ldr	r2, [r7, #12]
 800ec5c:	212c      	movs	r1, #44	; 0x2c
 800ec5e:	fb01 f303 	mul.w	r3, r1, r3
 800ec62:	4413      	add	r3, r2
 800ec64:	3354      	adds	r3, #84	; 0x54
 800ec66:	78ba      	ldrb	r2, [r7, #2]
 800ec68:	701a      	strb	r2, [r3, #0]
 800ec6a:	e008      	b.n	800ec7e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ec6c:	78fb      	ldrb	r3, [r7, #3]
 800ec6e:	68fa      	ldr	r2, [r7, #12]
 800ec70:	212c      	movs	r1, #44	; 0x2c
 800ec72:	fb01 f303 	mul.w	r3, r1, r3
 800ec76:	4413      	add	r3, r2
 800ec78:	3355      	adds	r3, #85	; 0x55
 800ec7a:	78ba      	ldrb	r2, [r7, #2]
 800ec7c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ec7e:	2300      	movs	r3, #0
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3714      	adds	r7, #20
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr

0800ec8c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b085      	sub	sp, #20
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	460b      	mov	r3, r1
 800ec96:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eca2:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800eca4:	78fb      	ldrb	r3, [r7, #3]
 800eca6:	68ba      	ldr	r2, [r7, #8]
 800eca8:	212c      	movs	r1, #44	; 0x2c
 800ecaa:	fb01 f303 	mul.w	r3, r1, r3
 800ecae:	4413      	add	r3, r2
 800ecb0:	333b      	adds	r3, #59	; 0x3b
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d009      	beq.n	800eccc <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800ecb8:	78fb      	ldrb	r3, [r7, #3]
 800ecba:	68ba      	ldr	r2, [r7, #8]
 800ecbc:	212c      	movs	r1, #44	; 0x2c
 800ecbe:	fb01 f303 	mul.w	r3, r1, r3
 800ecc2:	4413      	add	r3, r2
 800ecc4:	3354      	adds	r3, #84	; 0x54
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	73fb      	strb	r3, [r7, #15]
 800ecca:	e008      	b.n	800ecde <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800eccc:	78fb      	ldrb	r3, [r7, #3]
 800ecce:	68ba      	ldr	r2, [r7, #8]
 800ecd0:	212c      	movs	r1, #44	; 0x2c
 800ecd2:	fb01 f303 	mul.w	r3, r1, r3
 800ecd6:	4413      	add	r3, r2
 800ecd8:	3355      	adds	r3, #85	; 0x55
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800ecde:	7bfb      	ldrb	r3, [r7, #15]
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3714      	adds	r7, #20
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr

0800ecec <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f7f2 ffb7 	bl	8001c68 <HAL_Delay>
}
 800ecfa:	bf00      	nop
 800ecfc:	3708      	adds	r7, #8
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
	...

0800ed04 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b085      	sub	sp, #20
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ed12:	79fb      	ldrb	r3, [r7, #7]
 800ed14:	2b03      	cmp	r3, #3
 800ed16:	d817      	bhi.n	800ed48 <USBH_Get_USB_Status+0x44>
 800ed18:	a201      	add	r2, pc, #4	; (adr r2, 800ed20 <USBH_Get_USB_Status+0x1c>)
 800ed1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed1e:	bf00      	nop
 800ed20:	0800ed31 	.word	0x0800ed31
 800ed24:	0800ed37 	.word	0x0800ed37
 800ed28:	0800ed3d 	.word	0x0800ed3d
 800ed2c:	0800ed43 	.word	0x0800ed43
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ed30:	2300      	movs	r3, #0
 800ed32:	73fb      	strb	r3, [r7, #15]
    break;
 800ed34:	e00b      	b.n	800ed4e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ed36:	2302      	movs	r3, #2
 800ed38:	73fb      	strb	r3, [r7, #15]
    break;
 800ed3a:	e008      	b.n	800ed4e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ed40:	e005      	b.n	800ed4e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ed42:	2302      	movs	r3, #2
 800ed44:	73fb      	strb	r3, [r7, #15]
    break;
 800ed46:	e002      	b.n	800ed4e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ed48:	2302      	movs	r3, #2
 800ed4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ed4c:	bf00      	nop
  }
  return usb_status;
 800ed4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3714      	adds	r7, #20
 800ed54:	46bd      	mov	sp, r7
 800ed56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5a:	4770      	bx	lr

0800ed5c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	4603      	mov	r3, r0
 800ed64:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ed66:	79fb      	ldrb	r3, [r7, #7]
 800ed68:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ed6a:	79fb      	ldrb	r3, [r7, #7]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d102      	bne.n	800ed76 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ed70:	2300      	movs	r3, #0
 800ed72:	73fb      	strb	r3, [r7, #15]
 800ed74:	e001      	b.n	800ed7a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ed76:	2301      	movs	r3, #1
 800ed78:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,(GPIO_PinState)data);
 800ed7a:	7bfb      	ldrb	r3, [r7, #15]
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ed82:	4803      	ldr	r0, [pc, #12]	; (800ed90 <MX_DriverVbusFS+0x34>)
 800ed84:	f7f5 fb2c 	bl	80043e0 <HAL_GPIO_WritePin>
}
 800ed88:	bf00      	nop
 800ed8a:	3710      	adds	r7, #16
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	40020400 	.word	0x40020400

0800ed94 <__errno>:
 800ed94:	4b01      	ldr	r3, [pc, #4]	; (800ed9c <__errno+0x8>)
 800ed96:	6818      	ldr	r0, [r3, #0]
 800ed98:	4770      	bx	lr
 800ed9a:	bf00      	nop
 800ed9c:	20000030 	.word	0x20000030

0800eda0 <__libc_init_array>:
 800eda0:	b570      	push	{r4, r5, r6, lr}
 800eda2:	4d0d      	ldr	r5, [pc, #52]	; (800edd8 <__libc_init_array+0x38>)
 800eda4:	4c0d      	ldr	r4, [pc, #52]	; (800eddc <__libc_init_array+0x3c>)
 800eda6:	1b64      	subs	r4, r4, r5
 800eda8:	10a4      	asrs	r4, r4, #2
 800edaa:	2600      	movs	r6, #0
 800edac:	42a6      	cmp	r6, r4
 800edae:	d109      	bne.n	800edc4 <__libc_init_array+0x24>
 800edb0:	4d0b      	ldr	r5, [pc, #44]	; (800ede0 <__libc_init_array+0x40>)
 800edb2:	4c0c      	ldr	r4, [pc, #48]	; (800ede4 <__libc_init_array+0x44>)
 800edb4:	f001 fa2c 	bl	8010210 <_init>
 800edb8:	1b64      	subs	r4, r4, r5
 800edba:	10a4      	asrs	r4, r4, #2
 800edbc:	2600      	movs	r6, #0
 800edbe:	42a6      	cmp	r6, r4
 800edc0:	d105      	bne.n	800edce <__libc_init_array+0x2e>
 800edc2:	bd70      	pop	{r4, r5, r6, pc}
 800edc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800edc8:	4798      	blx	r3
 800edca:	3601      	adds	r6, #1
 800edcc:	e7ee      	b.n	800edac <__libc_init_array+0xc>
 800edce:	f855 3b04 	ldr.w	r3, [r5], #4
 800edd2:	4798      	blx	r3
 800edd4:	3601      	adds	r6, #1
 800edd6:	e7f2      	b.n	800edbe <__libc_init_array+0x1e>
 800edd8:	08010bc8 	.word	0x08010bc8
 800eddc:	08010bc8 	.word	0x08010bc8
 800ede0:	08010bc8 	.word	0x08010bc8
 800ede4:	08010bcc 	.word	0x08010bcc

0800ede8 <malloc>:
 800ede8:	4b02      	ldr	r3, [pc, #8]	; (800edf4 <malloc+0xc>)
 800edea:	4601      	mov	r1, r0
 800edec:	6818      	ldr	r0, [r3, #0]
 800edee:	f000 b871 	b.w	800eed4 <_malloc_r>
 800edf2:	bf00      	nop
 800edf4:	20000030 	.word	0x20000030

0800edf8 <free>:
 800edf8:	4b02      	ldr	r3, [pc, #8]	; (800ee04 <free+0xc>)
 800edfa:	4601      	mov	r1, r0
 800edfc:	6818      	ldr	r0, [r3, #0]
 800edfe:	f000 b819 	b.w	800ee34 <_free_r>
 800ee02:	bf00      	nop
 800ee04:	20000030 	.word	0x20000030

0800ee08 <memcpy>:
 800ee08:	440a      	add	r2, r1
 800ee0a:	4291      	cmp	r1, r2
 800ee0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee10:	d100      	bne.n	800ee14 <memcpy+0xc>
 800ee12:	4770      	bx	lr
 800ee14:	b510      	push	{r4, lr}
 800ee16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee1e:	4291      	cmp	r1, r2
 800ee20:	d1f9      	bne.n	800ee16 <memcpy+0xe>
 800ee22:	bd10      	pop	{r4, pc}

0800ee24 <memset>:
 800ee24:	4402      	add	r2, r0
 800ee26:	4603      	mov	r3, r0
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d100      	bne.n	800ee2e <memset+0xa>
 800ee2c:	4770      	bx	lr
 800ee2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ee32:	e7f9      	b.n	800ee28 <memset+0x4>

0800ee34 <_free_r>:
 800ee34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee36:	2900      	cmp	r1, #0
 800ee38:	d048      	beq.n	800eecc <_free_r+0x98>
 800ee3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee3e:	9001      	str	r0, [sp, #4]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	f1a1 0404 	sub.w	r4, r1, #4
 800ee46:	bfb8      	it	lt
 800ee48:	18e4      	addlt	r4, r4, r3
 800ee4a:	f000 fc4f 	bl	800f6ec <__malloc_lock>
 800ee4e:	4a20      	ldr	r2, [pc, #128]	; (800eed0 <_free_r+0x9c>)
 800ee50:	9801      	ldr	r0, [sp, #4]
 800ee52:	6813      	ldr	r3, [r2, #0]
 800ee54:	4615      	mov	r5, r2
 800ee56:	b933      	cbnz	r3, 800ee66 <_free_r+0x32>
 800ee58:	6063      	str	r3, [r4, #4]
 800ee5a:	6014      	str	r4, [r2, #0]
 800ee5c:	b003      	add	sp, #12
 800ee5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee62:	f000 bc49 	b.w	800f6f8 <__malloc_unlock>
 800ee66:	42a3      	cmp	r3, r4
 800ee68:	d90b      	bls.n	800ee82 <_free_r+0x4e>
 800ee6a:	6821      	ldr	r1, [r4, #0]
 800ee6c:	1862      	adds	r2, r4, r1
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	bf04      	itt	eq
 800ee72:	681a      	ldreq	r2, [r3, #0]
 800ee74:	685b      	ldreq	r3, [r3, #4]
 800ee76:	6063      	str	r3, [r4, #4]
 800ee78:	bf04      	itt	eq
 800ee7a:	1852      	addeq	r2, r2, r1
 800ee7c:	6022      	streq	r2, [r4, #0]
 800ee7e:	602c      	str	r4, [r5, #0]
 800ee80:	e7ec      	b.n	800ee5c <_free_r+0x28>
 800ee82:	461a      	mov	r2, r3
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	b10b      	cbz	r3, 800ee8c <_free_r+0x58>
 800ee88:	42a3      	cmp	r3, r4
 800ee8a:	d9fa      	bls.n	800ee82 <_free_r+0x4e>
 800ee8c:	6811      	ldr	r1, [r2, #0]
 800ee8e:	1855      	adds	r5, r2, r1
 800ee90:	42a5      	cmp	r5, r4
 800ee92:	d10b      	bne.n	800eeac <_free_r+0x78>
 800ee94:	6824      	ldr	r4, [r4, #0]
 800ee96:	4421      	add	r1, r4
 800ee98:	1854      	adds	r4, r2, r1
 800ee9a:	42a3      	cmp	r3, r4
 800ee9c:	6011      	str	r1, [r2, #0]
 800ee9e:	d1dd      	bne.n	800ee5c <_free_r+0x28>
 800eea0:	681c      	ldr	r4, [r3, #0]
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	6053      	str	r3, [r2, #4]
 800eea6:	4421      	add	r1, r4
 800eea8:	6011      	str	r1, [r2, #0]
 800eeaa:	e7d7      	b.n	800ee5c <_free_r+0x28>
 800eeac:	d902      	bls.n	800eeb4 <_free_r+0x80>
 800eeae:	230c      	movs	r3, #12
 800eeb0:	6003      	str	r3, [r0, #0]
 800eeb2:	e7d3      	b.n	800ee5c <_free_r+0x28>
 800eeb4:	6825      	ldr	r5, [r4, #0]
 800eeb6:	1961      	adds	r1, r4, r5
 800eeb8:	428b      	cmp	r3, r1
 800eeba:	bf04      	itt	eq
 800eebc:	6819      	ldreq	r1, [r3, #0]
 800eebe:	685b      	ldreq	r3, [r3, #4]
 800eec0:	6063      	str	r3, [r4, #4]
 800eec2:	bf04      	itt	eq
 800eec4:	1949      	addeq	r1, r1, r5
 800eec6:	6021      	streq	r1, [r4, #0]
 800eec8:	6054      	str	r4, [r2, #4]
 800eeca:	e7c7      	b.n	800ee5c <_free_r+0x28>
 800eecc:	b003      	add	sp, #12
 800eece:	bd30      	pop	{r4, r5, pc}
 800eed0:	20000104 	.word	0x20000104

0800eed4 <_malloc_r>:
 800eed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eed6:	1ccd      	adds	r5, r1, #3
 800eed8:	f025 0503 	bic.w	r5, r5, #3
 800eedc:	3508      	adds	r5, #8
 800eede:	2d0c      	cmp	r5, #12
 800eee0:	bf38      	it	cc
 800eee2:	250c      	movcc	r5, #12
 800eee4:	2d00      	cmp	r5, #0
 800eee6:	4606      	mov	r6, r0
 800eee8:	db01      	blt.n	800eeee <_malloc_r+0x1a>
 800eeea:	42a9      	cmp	r1, r5
 800eeec:	d903      	bls.n	800eef6 <_malloc_r+0x22>
 800eeee:	230c      	movs	r3, #12
 800eef0:	6033      	str	r3, [r6, #0]
 800eef2:	2000      	movs	r0, #0
 800eef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eef6:	f000 fbf9 	bl	800f6ec <__malloc_lock>
 800eefa:	4921      	ldr	r1, [pc, #132]	; (800ef80 <_malloc_r+0xac>)
 800eefc:	680a      	ldr	r2, [r1, #0]
 800eefe:	4614      	mov	r4, r2
 800ef00:	b99c      	cbnz	r4, 800ef2a <_malloc_r+0x56>
 800ef02:	4f20      	ldr	r7, [pc, #128]	; (800ef84 <_malloc_r+0xb0>)
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	b923      	cbnz	r3, 800ef12 <_malloc_r+0x3e>
 800ef08:	4621      	mov	r1, r4
 800ef0a:	4630      	mov	r0, r6
 800ef0c:	f000 f8e0 	bl	800f0d0 <_sbrk_r>
 800ef10:	6038      	str	r0, [r7, #0]
 800ef12:	4629      	mov	r1, r5
 800ef14:	4630      	mov	r0, r6
 800ef16:	f000 f8db 	bl	800f0d0 <_sbrk_r>
 800ef1a:	1c43      	adds	r3, r0, #1
 800ef1c:	d123      	bne.n	800ef66 <_malloc_r+0x92>
 800ef1e:	230c      	movs	r3, #12
 800ef20:	6033      	str	r3, [r6, #0]
 800ef22:	4630      	mov	r0, r6
 800ef24:	f000 fbe8 	bl	800f6f8 <__malloc_unlock>
 800ef28:	e7e3      	b.n	800eef2 <_malloc_r+0x1e>
 800ef2a:	6823      	ldr	r3, [r4, #0]
 800ef2c:	1b5b      	subs	r3, r3, r5
 800ef2e:	d417      	bmi.n	800ef60 <_malloc_r+0x8c>
 800ef30:	2b0b      	cmp	r3, #11
 800ef32:	d903      	bls.n	800ef3c <_malloc_r+0x68>
 800ef34:	6023      	str	r3, [r4, #0]
 800ef36:	441c      	add	r4, r3
 800ef38:	6025      	str	r5, [r4, #0]
 800ef3a:	e004      	b.n	800ef46 <_malloc_r+0x72>
 800ef3c:	6863      	ldr	r3, [r4, #4]
 800ef3e:	42a2      	cmp	r2, r4
 800ef40:	bf0c      	ite	eq
 800ef42:	600b      	streq	r3, [r1, #0]
 800ef44:	6053      	strne	r3, [r2, #4]
 800ef46:	4630      	mov	r0, r6
 800ef48:	f000 fbd6 	bl	800f6f8 <__malloc_unlock>
 800ef4c:	f104 000b 	add.w	r0, r4, #11
 800ef50:	1d23      	adds	r3, r4, #4
 800ef52:	f020 0007 	bic.w	r0, r0, #7
 800ef56:	1ac2      	subs	r2, r0, r3
 800ef58:	d0cc      	beq.n	800eef4 <_malloc_r+0x20>
 800ef5a:	1a1b      	subs	r3, r3, r0
 800ef5c:	50a3      	str	r3, [r4, r2]
 800ef5e:	e7c9      	b.n	800eef4 <_malloc_r+0x20>
 800ef60:	4622      	mov	r2, r4
 800ef62:	6864      	ldr	r4, [r4, #4]
 800ef64:	e7cc      	b.n	800ef00 <_malloc_r+0x2c>
 800ef66:	1cc4      	adds	r4, r0, #3
 800ef68:	f024 0403 	bic.w	r4, r4, #3
 800ef6c:	42a0      	cmp	r0, r4
 800ef6e:	d0e3      	beq.n	800ef38 <_malloc_r+0x64>
 800ef70:	1a21      	subs	r1, r4, r0
 800ef72:	4630      	mov	r0, r6
 800ef74:	f000 f8ac 	bl	800f0d0 <_sbrk_r>
 800ef78:	3001      	adds	r0, #1
 800ef7a:	d1dd      	bne.n	800ef38 <_malloc_r+0x64>
 800ef7c:	e7cf      	b.n	800ef1e <_malloc_r+0x4a>
 800ef7e:	bf00      	nop
 800ef80:	20000104 	.word	0x20000104
 800ef84:	20000108 	.word	0x20000108

0800ef88 <iprintf>:
 800ef88:	b40f      	push	{r0, r1, r2, r3}
 800ef8a:	4b0a      	ldr	r3, [pc, #40]	; (800efb4 <iprintf+0x2c>)
 800ef8c:	b513      	push	{r0, r1, r4, lr}
 800ef8e:	681c      	ldr	r4, [r3, #0]
 800ef90:	b124      	cbz	r4, 800ef9c <iprintf+0x14>
 800ef92:	69a3      	ldr	r3, [r4, #24]
 800ef94:	b913      	cbnz	r3, 800ef9c <iprintf+0x14>
 800ef96:	4620      	mov	r0, r4
 800ef98:	f000 faa4 	bl	800f4e4 <__sinit>
 800ef9c:	ab05      	add	r3, sp, #20
 800ef9e:	9a04      	ldr	r2, [sp, #16]
 800efa0:	68a1      	ldr	r1, [r4, #8]
 800efa2:	9301      	str	r3, [sp, #4]
 800efa4:	4620      	mov	r0, r4
 800efa6:	f000 fd33 	bl	800fa10 <_vfiprintf_r>
 800efaa:	b002      	add	sp, #8
 800efac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efb0:	b004      	add	sp, #16
 800efb2:	4770      	bx	lr
 800efb4:	20000030 	.word	0x20000030

0800efb8 <putchar>:
 800efb8:	4b09      	ldr	r3, [pc, #36]	; (800efe0 <putchar+0x28>)
 800efba:	b513      	push	{r0, r1, r4, lr}
 800efbc:	681c      	ldr	r4, [r3, #0]
 800efbe:	4601      	mov	r1, r0
 800efc0:	b134      	cbz	r4, 800efd0 <putchar+0x18>
 800efc2:	69a3      	ldr	r3, [r4, #24]
 800efc4:	b923      	cbnz	r3, 800efd0 <putchar+0x18>
 800efc6:	9001      	str	r0, [sp, #4]
 800efc8:	4620      	mov	r0, r4
 800efca:	f000 fa8b 	bl	800f4e4 <__sinit>
 800efce:	9901      	ldr	r1, [sp, #4]
 800efd0:	68a2      	ldr	r2, [r4, #8]
 800efd2:	4620      	mov	r0, r4
 800efd4:	b002      	add	sp, #8
 800efd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efda:	f000 bfdd 	b.w	800ff98 <_putc_r>
 800efde:	bf00      	nop
 800efe0:	20000030 	.word	0x20000030

0800efe4 <_puts_r>:
 800efe4:	b570      	push	{r4, r5, r6, lr}
 800efe6:	460e      	mov	r6, r1
 800efe8:	4605      	mov	r5, r0
 800efea:	b118      	cbz	r0, 800eff4 <_puts_r+0x10>
 800efec:	6983      	ldr	r3, [r0, #24]
 800efee:	b90b      	cbnz	r3, 800eff4 <_puts_r+0x10>
 800eff0:	f000 fa78 	bl	800f4e4 <__sinit>
 800eff4:	69ab      	ldr	r3, [r5, #24]
 800eff6:	68ac      	ldr	r4, [r5, #8]
 800eff8:	b913      	cbnz	r3, 800f000 <_puts_r+0x1c>
 800effa:	4628      	mov	r0, r5
 800effc:	f000 fa72 	bl	800f4e4 <__sinit>
 800f000:	4b2c      	ldr	r3, [pc, #176]	; (800f0b4 <_puts_r+0xd0>)
 800f002:	429c      	cmp	r4, r3
 800f004:	d120      	bne.n	800f048 <_puts_r+0x64>
 800f006:	686c      	ldr	r4, [r5, #4]
 800f008:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f00a:	07db      	lsls	r3, r3, #31
 800f00c:	d405      	bmi.n	800f01a <_puts_r+0x36>
 800f00e:	89a3      	ldrh	r3, [r4, #12]
 800f010:	0598      	lsls	r0, r3, #22
 800f012:	d402      	bmi.n	800f01a <_puts_r+0x36>
 800f014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f016:	f000 fb03 	bl	800f620 <__retarget_lock_acquire_recursive>
 800f01a:	89a3      	ldrh	r3, [r4, #12]
 800f01c:	0719      	lsls	r1, r3, #28
 800f01e:	d51d      	bpl.n	800f05c <_puts_r+0x78>
 800f020:	6923      	ldr	r3, [r4, #16]
 800f022:	b1db      	cbz	r3, 800f05c <_puts_r+0x78>
 800f024:	3e01      	subs	r6, #1
 800f026:	68a3      	ldr	r3, [r4, #8]
 800f028:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f02c:	3b01      	subs	r3, #1
 800f02e:	60a3      	str	r3, [r4, #8]
 800f030:	bb39      	cbnz	r1, 800f082 <_puts_r+0x9e>
 800f032:	2b00      	cmp	r3, #0
 800f034:	da38      	bge.n	800f0a8 <_puts_r+0xc4>
 800f036:	4622      	mov	r2, r4
 800f038:	210a      	movs	r1, #10
 800f03a:	4628      	mov	r0, r5
 800f03c:	f000 f878 	bl	800f130 <__swbuf_r>
 800f040:	3001      	adds	r0, #1
 800f042:	d011      	beq.n	800f068 <_puts_r+0x84>
 800f044:	250a      	movs	r5, #10
 800f046:	e011      	b.n	800f06c <_puts_r+0x88>
 800f048:	4b1b      	ldr	r3, [pc, #108]	; (800f0b8 <_puts_r+0xd4>)
 800f04a:	429c      	cmp	r4, r3
 800f04c:	d101      	bne.n	800f052 <_puts_r+0x6e>
 800f04e:	68ac      	ldr	r4, [r5, #8]
 800f050:	e7da      	b.n	800f008 <_puts_r+0x24>
 800f052:	4b1a      	ldr	r3, [pc, #104]	; (800f0bc <_puts_r+0xd8>)
 800f054:	429c      	cmp	r4, r3
 800f056:	bf08      	it	eq
 800f058:	68ec      	ldreq	r4, [r5, #12]
 800f05a:	e7d5      	b.n	800f008 <_puts_r+0x24>
 800f05c:	4621      	mov	r1, r4
 800f05e:	4628      	mov	r0, r5
 800f060:	f000 f8b8 	bl	800f1d4 <__swsetup_r>
 800f064:	2800      	cmp	r0, #0
 800f066:	d0dd      	beq.n	800f024 <_puts_r+0x40>
 800f068:	f04f 35ff 	mov.w	r5, #4294967295
 800f06c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f06e:	07da      	lsls	r2, r3, #31
 800f070:	d405      	bmi.n	800f07e <_puts_r+0x9a>
 800f072:	89a3      	ldrh	r3, [r4, #12]
 800f074:	059b      	lsls	r3, r3, #22
 800f076:	d402      	bmi.n	800f07e <_puts_r+0x9a>
 800f078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f07a:	f000 fad2 	bl	800f622 <__retarget_lock_release_recursive>
 800f07e:	4628      	mov	r0, r5
 800f080:	bd70      	pop	{r4, r5, r6, pc}
 800f082:	2b00      	cmp	r3, #0
 800f084:	da04      	bge.n	800f090 <_puts_r+0xac>
 800f086:	69a2      	ldr	r2, [r4, #24]
 800f088:	429a      	cmp	r2, r3
 800f08a:	dc06      	bgt.n	800f09a <_puts_r+0xb6>
 800f08c:	290a      	cmp	r1, #10
 800f08e:	d004      	beq.n	800f09a <_puts_r+0xb6>
 800f090:	6823      	ldr	r3, [r4, #0]
 800f092:	1c5a      	adds	r2, r3, #1
 800f094:	6022      	str	r2, [r4, #0]
 800f096:	7019      	strb	r1, [r3, #0]
 800f098:	e7c5      	b.n	800f026 <_puts_r+0x42>
 800f09a:	4622      	mov	r2, r4
 800f09c:	4628      	mov	r0, r5
 800f09e:	f000 f847 	bl	800f130 <__swbuf_r>
 800f0a2:	3001      	adds	r0, #1
 800f0a4:	d1bf      	bne.n	800f026 <_puts_r+0x42>
 800f0a6:	e7df      	b.n	800f068 <_puts_r+0x84>
 800f0a8:	6823      	ldr	r3, [r4, #0]
 800f0aa:	250a      	movs	r5, #10
 800f0ac:	1c5a      	adds	r2, r3, #1
 800f0ae:	6022      	str	r2, [r4, #0]
 800f0b0:	701d      	strb	r5, [r3, #0]
 800f0b2:	e7db      	b.n	800f06c <_puts_r+0x88>
 800f0b4:	08010b4c 	.word	0x08010b4c
 800f0b8:	08010b6c 	.word	0x08010b6c
 800f0bc:	08010b2c 	.word	0x08010b2c

0800f0c0 <puts>:
 800f0c0:	4b02      	ldr	r3, [pc, #8]	; (800f0cc <puts+0xc>)
 800f0c2:	4601      	mov	r1, r0
 800f0c4:	6818      	ldr	r0, [r3, #0]
 800f0c6:	f7ff bf8d 	b.w	800efe4 <_puts_r>
 800f0ca:	bf00      	nop
 800f0cc:	20000030 	.word	0x20000030

0800f0d0 <_sbrk_r>:
 800f0d0:	b538      	push	{r3, r4, r5, lr}
 800f0d2:	4d06      	ldr	r5, [pc, #24]	; (800f0ec <_sbrk_r+0x1c>)
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	4608      	mov	r0, r1
 800f0da:	602b      	str	r3, [r5, #0]
 800f0dc:	f7f2 fce0 	bl	8001aa0 <_sbrk>
 800f0e0:	1c43      	adds	r3, r0, #1
 800f0e2:	d102      	bne.n	800f0ea <_sbrk_r+0x1a>
 800f0e4:	682b      	ldr	r3, [r5, #0]
 800f0e6:	b103      	cbz	r3, 800f0ea <_sbrk_r+0x1a>
 800f0e8:	6023      	str	r3, [r4, #0]
 800f0ea:	bd38      	pop	{r3, r4, r5, pc}
 800f0ec:	20004a6c 	.word	0x20004a6c

0800f0f0 <siprintf>:
 800f0f0:	b40e      	push	{r1, r2, r3}
 800f0f2:	b500      	push	{lr}
 800f0f4:	b09c      	sub	sp, #112	; 0x70
 800f0f6:	ab1d      	add	r3, sp, #116	; 0x74
 800f0f8:	9002      	str	r0, [sp, #8]
 800f0fa:	9006      	str	r0, [sp, #24]
 800f0fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f100:	4809      	ldr	r0, [pc, #36]	; (800f128 <siprintf+0x38>)
 800f102:	9107      	str	r1, [sp, #28]
 800f104:	9104      	str	r1, [sp, #16]
 800f106:	4909      	ldr	r1, [pc, #36]	; (800f12c <siprintf+0x3c>)
 800f108:	f853 2b04 	ldr.w	r2, [r3], #4
 800f10c:	9105      	str	r1, [sp, #20]
 800f10e:	6800      	ldr	r0, [r0, #0]
 800f110:	9301      	str	r3, [sp, #4]
 800f112:	a902      	add	r1, sp, #8
 800f114:	f000 fb52 	bl	800f7bc <_svfiprintf_r>
 800f118:	9b02      	ldr	r3, [sp, #8]
 800f11a:	2200      	movs	r2, #0
 800f11c:	701a      	strb	r2, [r3, #0]
 800f11e:	b01c      	add	sp, #112	; 0x70
 800f120:	f85d eb04 	ldr.w	lr, [sp], #4
 800f124:	b003      	add	sp, #12
 800f126:	4770      	bx	lr
 800f128:	20000030 	.word	0x20000030
 800f12c:	ffff0208 	.word	0xffff0208

0800f130 <__swbuf_r>:
 800f130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f132:	460e      	mov	r6, r1
 800f134:	4614      	mov	r4, r2
 800f136:	4605      	mov	r5, r0
 800f138:	b118      	cbz	r0, 800f142 <__swbuf_r+0x12>
 800f13a:	6983      	ldr	r3, [r0, #24]
 800f13c:	b90b      	cbnz	r3, 800f142 <__swbuf_r+0x12>
 800f13e:	f000 f9d1 	bl	800f4e4 <__sinit>
 800f142:	4b21      	ldr	r3, [pc, #132]	; (800f1c8 <__swbuf_r+0x98>)
 800f144:	429c      	cmp	r4, r3
 800f146:	d12b      	bne.n	800f1a0 <__swbuf_r+0x70>
 800f148:	686c      	ldr	r4, [r5, #4]
 800f14a:	69a3      	ldr	r3, [r4, #24]
 800f14c:	60a3      	str	r3, [r4, #8]
 800f14e:	89a3      	ldrh	r3, [r4, #12]
 800f150:	071a      	lsls	r2, r3, #28
 800f152:	d52f      	bpl.n	800f1b4 <__swbuf_r+0x84>
 800f154:	6923      	ldr	r3, [r4, #16]
 800f156:	b36b      	cbz	r3, 800f1b4 <__swbuf_r+0x84>
 800f158:	6923      	ldr	r3, [r4, #16]
 800f15a:	6820      	ldr	r0, [r4, #0]
 800f15c:	1ac0      	subs	r0, r0, r3
 800f15e:	6963      	ldr	r3, [r4, #20]
 800f160:	b2f6      	uxtb	r6, r6
 800f162:	4283      	cmp	r3, r0
 800f164:	4637      	mov	r7, r6
 800f166:	dc04      	bgt.n	800f172 <__swbuf_r+0x42>
 800f168:	4621      	mov	r1, r4
 800f16a:	4628      	mov	r0, r5
 800f16c:	f000 f926 	bl	800f3bc <_fflush_r>
 800f170:	bb30      	cbnz	r0, 800f1c0 <__swbuf_r+0x90>
 800f172:	68a3      	ldr	r3, [r4, #8]
 800f174:	3b01      	subs	r3, #1
 800f176:	60a3      	str	r3, [r4, #8]
 800f178:	6823      	ldr	r3, [r4, #0]
 800f17a:	1c5a      	adds	r2, r3, #1
 800f17c:	6022      	str	r2, [r4, #0]
 800f17e:	701e      	strb	r6, [r3, #0]
 800f180:	6963      	ldr	r3, [r4, #20]
 800f182:	3001      	adds	r0, #1
 800f184:	4283      	cmp	r3, r0
 800f186:	d004      	beq.n	800f192 <__swbuf_r+0x62>
 800f188:	89a3      	ldrh	r3, [r4, #12]
 800f18a:	07db      	lsls	r3, r3, #31
 800f18c:	d506      	bpl.n	800f19c <__swbuf_r+0x6c>
 800f18e:	2e0a      	cmp	r6, #10
 800f190:	d104      	bne.n	800f19c <__swbuf_r+0x6c>
 800f192:	4621      	mov	r1, r4
 800f194:	4628      	mov	r0, r5
 800f196:	f000 f911 	bl	800f3bc <_fflush_r>
 800f19a:	b988      	cbnz	r0, 800f1c0 <__swbuf_r+0x90>
 800f19c:	4638      	mov	r0, r7
 800f19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1a0:	4b0a      	ldr	r3, [pc, #40]	; (800f1cc <__swbuf_r+0x9c>)
 800f1a2:	429c      	cmp	r4, r3
 800f1a4:	d101      	bne.n	800f1aa <__swbuf_r+0x7a>
 800f1a6:	68ac      	ldr	r4, [r5, #8]
 800f1a8:	e7cf      	b.n	800f14a <__swbuf_r+0x1a>
 800f1aa:	4b09      	ldr	r3, [pc, #36]	; (800f1d0 <__swbuf_r+0xa0>)
 800f1ac:	429c      	cmp	r4, r3
 800f1ae:	bf08      	it	eq
 800f1b0:	68ec      	ldreq	r4, [r5, #12]
 800f1b2:	e7ca      	b.n	800f14a <__swbuf_r+0x1a>
 800f1b4:	4621      	mov	r1, r4
 800f1b6:	4628      	mov	r0, r5
 800f1b8:	f000 f80c 	bl	800f1d4 <__swsetup_r>
 800f1bc:	2800      	cmp	r0, #0
 800f1be:	d0cb      	beq.n	800f158 <__swbuf_r+0x28>
 800f1c0:	f04f 37ff 	mov.w	r7, #4294967295
 800f1c4:	e7ea      	b.n	800f19c <__swbuf_r+0x6c>
 800f1c6:	bf00      	nop
 800f1c8:	08010b4c 	.word	0x08010b4c
 800f1cc:	08010b6c 	.word	0x08010b6c
 800f1d0:	08010b2c 	.word	0x08010b2c

0800f1d4 <__swsetup_r>:
 800f1d4:	4b32      	ldr	r3, [pc, #200]	; (800f2a0 <__swsetup_r+0xcc>)
 800f1d6:	b570      	push	{r4, r5, r6, lr}
 800f1d8:	681d      	ldr	r5, [r3, #0]
 800f1da:	4606      	mov	r6, r0
 800f1dc:	460c      	mov	r4, r1
 800f1de:	b125      	cbz	r5, 800f1ea <__swsetup_r+0x16>
 800f1e0:	69ab      	ldr	r3, [r5, #24]
 800f1e2:	b913      	cbnz	r3, 800f1ea <__swsetup_r+0x16>
 800f1e4:	4628      	mov	r0, r5
 800f1e6:	f000 f97d 	bl	800f4e4 <__sinit>
 800f1ea:	4b2e      	ldr	r3, [pc, #184]	; (800f2a4 <__swsetup_r+0xd0>)
 800f1ec:	429c      	cmp	r4, r3
 800f1ee:	d10f      	bne.n	800f210 <__swsetup_r+0x3c>
 800f1f0:	686c      	ldr	r4, [r5, #4]
 800f1f2:	89a3      	ldrh	r3, [r4, #12]
 800f1f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1f8:	0719      	lsls	r1, r3, #28
 800f1fa:	d42c      	bmi.n	800f256 <__swsetup_r+0x82>
 800f1fc:	06dd      	lsls	r5, r3, #27
 800f1fe:	d411      	bmi.n	800f224 <__swsetup_r+0x50>
 800f200:	2309      	movs	r3, #9
 800f202:	6033      	str	r3, [r6, #0]
 800f204:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f208:	81a3      	strh	r3, [r4, #12]
 800f20a:	f04f 30ff 	mov.w	r0, #4294967295
 800f20e:	e03e      	b.n	800f28e <__swsetup_r+0xba>
 800f210:	4b25      	ldr	r3, [pc, #148]	; (800f2a8 <__swsetup_r+0xd4>)
 800f212:	429c      	cmp	r4, r3
 800f214:	d101      	bne.n	800f21a <__swsetup_r+0x46>
 800f216:	68ac      	ldr	r4, [r5, #8]
 800f218:	e7eb      	b.n	800f1f2 <__swsetup_r+0x1e>
 800f21a:	4b24      	ldr	r3, [pc, #144]	; (800f2ac <__swsetup_r+0xd8>)
 800f21c:	429c      	cmp	r4, r3
 800f21e:	bf08      	it	eq
 800f220:	68ec      	ldreq	r4, [r5, #12]
 800f222:	e7e6      	b.n	800f1f2 <__swsetup_r+0x1e>
 800f224:	0758      	lsls	r0, r3, #29
 800f226:	d512      	bpl.n	800f24e <__swsetup_r+0x7a>
 800f228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f22a:	b141      	cbz	r1, 800f23e <__swsetup_r+0x6a>
 800f22c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f230:	4299      	cmp	r1, r3
 800f232:	d002      	beq.n	800f23a <__swsetup_r+0x66>
 800f234:	4630      	mov	r0, r6
 800f236:	f7ff fdfd 	bl	800ee34 <_free_r>
 800f23a:	2300      	movs	r3, #0
 800f23c:	6363      	str	r3, [r4, #52]	; 0x34
 800f23e:	89a3      	ldrh	r3, [r4, #12]
 800f240:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f244:	81a3      	strh	r3, [r4, #12]
 800f246:	2300      	movs	r3, #0
 800f248:	6063      	str	r3, [r4, #4]
 800f24a:	6923      	ldr	r3, [r4, #16]
 800f24c:	6023      	str	r3, [r4, #0]
 800f24e:	89a3      	ldrh	r3, [r4, #12]
 800f250:	f043 0308 	orr.w	r3, r3, #8
 800f254:	81a3      	strh	r3, [r4, #12]
 800f256:	6923      	ldr	r3, [r4, #16]
 800f258:	b94b      	cbnz	r3, 800f26e <__swsetup_r+0x9a>
 800f25a:	89a3      	ldrh	r3, [r4, #12]
 800f25c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f264:	d003      	beq.n	800f26e <__swsetup_r+0x9a>
 800f266:	4621      	mov	r1, r4
 800f268:	4630      	mov	r0, r6
 800f26a:	f000 f9ff 	bl	800f66c <__smakebuf_r>
 800f26e:	89a0      	ldrh	r0, [r4, #12]
 800f270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f274:	f010 0301 	ands.w	r3, r0, #1
 800f278:	d00a      	beq.n	800f290 <__swsetup_r+0xbc>
 800f27a:	2300      	movs	r3, #0
 800f27c:	60a3      	str	r3, [r4, #8]
 800f27e:	6963      	ldr	r3, [r4, #20]
 800f280:	425b      	negs	r3, r3
 800f282:	61a3      	str	r3, [r4, #24]
 800f284:	6923      	ldr	r3, [r4, #16]
 800f286:	b943      	cbnz	r3, 800f29a <__swsetup_r+0xc6>
 800f288:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f28c:	d1ba      	bne.n	800f204 <__swsetup_r+0x30>
 800f28e:	bd70      	pop	{r4, r5, r6, pc}
 800f290:	0781      	lsls	r1, r0, #30
 800f292:	bf58      	it	pl
 800f294:	6963      	ldrpl	r3, [r4, #20]
 800f296:	60a3      	str	r3, [r4, #8]
 800f298:	e7f4      	b.n	800f284 <__swsetup_r+0xb0>
 800f29a:	2000      	movs	r0, #0
 800f29c:	e7f7      	b.n	800f28e <__swsetup_r+0xba>
 800f29e:	bf00      	nop
 800f2a0:	20000030 	.word	0x20000030
 800f2a4:	08010b4c 	.word	0x08010b4c
 800f2a8:	08010b6c 	.word	0x08010b6c
 800f2ac:	08010b2c 	.word	0x08010b2c

0800f2b0 <__sflush_r>:
 800f2b0:	898a      	ldrh	r2, [r1, #12]
 800f2b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b6:	4605      	mov	r5, r0
 800f2b8:	0710      	lsls	r0, r2, #28
 800f2ba:	460c      	mov	r4, r1
 800f2bc:	d458      	bmi.n	800f370 <__sflush_r+0xc0>
 800f2be:	684b      	ldr	r3, [r1, #4]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	dc05      	bgt.n	800f2d0 <__sflush_r+0x20>
 800f2c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	dc02      	bgt.n	800f2d0 <__sflush_r+0x20>
 800f2ca:	2000      	movs	r0, #0
 800f2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2d2:	2e00      	cmp	r6, #0
 800f2d4:	d0f9      	beq.n	800f2ca <__sflush_r+0x1a>
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f2dc:	682f      	ldr	r7, [r5, #0]
 800f2de:	602b      	str	r3, [r5, #0]
 800f2e0:	d032      	beq.n	800f348 <__sflush_r+0x98>
 800f2e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f2e4:	89a3      	ldrh	r3, [r4, #12]
 800f2e6:	075a      	lsls	r2, r3, #29
 800f2e8:	d505      	bpl.n	800f2f6 <__sflush_r+0x46>
 800f2ea:	6863      	ldr	r3, [r4, #4]
 800f2ec:	1ac0      	subs	r0, r0, r3
 800f2ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f2f0:	b10b      	cbz	r3, 800f2f6 <__sflush_r+0x46>
 800f2f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f2f4:	1ac0      	subs	r0, r0, r3
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2fc:	6a21      	ldr	r1, [r4, #32]
 800f2fe:	4628      	mov	r0, r5
 800f300:	47b0      	blx	r6
 800f302:	1c43      	adds	r3, r0, #1
 800f304:	89a3      	ldrh	r3, [r4, #12]
 800f306:	d106      	bne.n	800f316 <__sflush_r+0x66>
 800f308:	6829      	ldr	r1, [r5, #0]
 800f30a:	291d      	cmp	r1, #29
 800f30c:	d82c      	bhi.n	800f368 <__sflush_r+0xb8>
 800f30e:	4a2a      	ldr	r2, [pc, #168]	; (800f3b8 <__sflush_r+0x108>)
 800f310:	40ca      	lsrs	r2, r1
 800f312:	07d6      	lsls	r6, r2, #31
 800f314:	d528      	bpl.n	800f368 <__sflush_r+0xb8>
 800f316:	2200      	movs	r2, #0
 800f318:	6062      	str	r2, [r4, #4]
 800f31a:	04d9      	lsls	r1, r3, #19
 800f31c:	6922      	ldr	r2, [r4, #16]
 800f31e:	6022      	str	r2, [r4, #0]
 800f320:	d504      	bpl.n	800f32c <__sflush_r+0x7c>
 800f322:	1c42      	adds	r2, r0, #1
 800f324:	d101      	bne.n	800f32a <__sflush_r+0x7a>
 800f326:	682b      	ldr	r3, [r5, #0]
 800f328:	b903      	cbnz	r3, 800f32c <__sflush_r+0x7c>
 800f32a:	6560      	str	r0, [r4, #84]	; 0x54
 800f32c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f32e:	602f      	str	r7, [r5, #0]
 800f330:	2900      	cmp	r1, #0
 800f332:	d0ca      	beq.n	800f2ca <__sflush_r+0x1a>
 800f334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f338:	4299      	cmp	r1, r3
 800f33a:	d002      	beq.n	800f342 <__sflush_r+0x92>
 800f33c:	4628      	mov	r0, r5
 800f33e:	f7ff fd79 	bl	800ee34 <_free_r>
 800f342:	2000      	movs	r0, #0
 800f344:	6360      	str	r0, [r4, #52]	; 0x34
 800f346:	e7c1      	b.n	800f2cc <__sflush_r+0x1c>
 800f348:	6a21      	ldr	r1, [r4, #32]
 800f34a:	2301      	movs	r3, #1
 800f34c:	4628      	mov	r0, r5
 800f34e:	47b0      	blx	r6
 800f350:	1c41      	adds	r1, r0, #1
 800f352:	d1c7      	bne.n	800f2e4 <__sflush_r+0x34>
 800f354:	682b      	ldr	r3, [r5, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d0c4      	beq.n	800f2e4 <__sflush_r+0x34>
 800f35a:	2b1d      	cmp	r3, #29
 800f35c:	d001      	beq.n	800f362 <__sflush_r+0xb2>
 800f35e:	2b16      	cmp	r3, #22
 800f360:	d101      	bne.n	800f366 <__sflush_r+0xb6>
 800f362:	602f      	str	r7, [r5, #0]
 800f364:	e7b1      	b.n	800f2ca <__sflush_r+0x1a>
 800f366:	89a3      	ldrh	r3, [r4, #12]
 800f368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f36c:	81a3      	strh	r3, [r4, #12]
 800f36e:	e7ad      	b.n	800f2cc <__sflush_r+0x1c>
 800f370:	690f      	ldr	r7, [r1, #16]
 800f372:	2f00      	cmp	r7, #0
 800f374:	d0a9      	beq.n	800f2ca <__sflush_r+0x1a>
 800f376:	0793      	lsls	r3, r2, #30
 800f378:	680e      	ldr	r6, [r1, #0]
 800f37a:	bf08      	it	eq
 800f37c:	694b      	ldreq	r3, [r1, #20]
 800f37e:	600f      	str	r7, [r1, #0]
 800f380:	bf18      	it	ne
 800f382:	2300      	movne	r3, #0
 800f384:	eba6 0807 	sub.w	r8, r6, r7
 800f388:	608b      	str	r3, [r1, #8]
 800f38a:	f1b8 0f00 	cmp.w	r8, #0
 800f38e:	dd9c      	ble.n	800f2ca <__sflush_r+0x1a>
 800f390:	6a21      	ldr	r1, [r4, #32]
 800f392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f394:	4643      	mov	r3, r8
 800f396:	463a      	mov	r2, r7
 800f398:	4628      	mov	r0, r5
 800f39a:	47b0      	blx	r6
 800f39c:	2800      	cmp	r0, #0
 800f39e:	dc06      	bgt.n	800f3ae <__sflush_r+0xfe>
 800f3a0:	89a3      	ldrh	r3, [r4, #12]
 800f3a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3a6:	81a3      	strh	r3, [r4, #12]
 800f3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ac:	e78e      	b.n	800f2cc <__sflush_r+0x1c>
 800f3ae:	4407      	add	r7, r0
 800f3b0:	eba8 0800 	sub.w	r8, r8, r0
 800f3b4:	e7e9      	b.n	800f38a <__sflush_r+0xda>
 800f3b6:	bf00      	nop
 800f3b8:	20400001 	.word	0x20400001

0800f3bc <_fflush_r>:
 800f3bc:	b538      	push	{r3, r4, r5, lr}
 800f3be:	690b      	ldr	r3, [r1, #16]
 800f3c0:	4605      	mov	r5, r0
 800f3c2:	460c      	mov	r4, r1
 800f3c4:	b913      	cbnz	r3, 800f3cc <_fflush_r+0x10>
 800f3c6:	2500      	movs	r5, #0
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	bd38      	pop	{r3, r4, r5, pc}
 800f3cc:	b118      	cbz	r0, 800f3d6 <_fflush_r+0x1a>
 800f3ce:	6983      	ldr	r3, [r0, #24]
 800f3d0:	b90b      	cbnz	r3, 800f3d6 <_fflush_r+0x1a>
 800f3d2:	f000 f887 	bl	800f4e4 <__sinit>
 800f3d6:	4b14      	ldr	r3, [pc, #80]	; (800f428 <_fflush_r+0x6c>)
 800f3d8:	429c      	cmp	r4, r3
 800f3da:	d11b      	bne.n	800f414 <_fflush_r+0x58>
 800f3dc:	686c      	ldr	r4, [r5, #4]
 800f3de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d0ef      	beq.n	800f3c6 <_fflush_r+0xa>
 800f3e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f3e8:	07d0      	lsls	r0, r2, #31
 800f3ea:	d404      	bmi.n	800f3f6 <_fflush_r+0x3a>
 800f3ec:	0599      	lsls	r1, r3, #22
 800f3ee:	d402      	bmi.n	800f3f6 <_fflush_r+0x3a>
 800f3f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3f2:	f000 f915 	bl	800f620 <__retarget_lock_acquire_recursive>
 800f3f6:	4628      	mov	r0, r5
 800f3f8:	4621      	mov	r1, r4
 800f3fa:	f7ff ff59 	bl	800f2b0 <__sflush_r>
 800f3fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f400:	07da      	lsls	r2, r3, #31
 800f402:	4605      	mov	r5, r0
 800f404:	d4e0      	bmi.n	800f3c8 <_fflush_r+0xc>
 800f406:	89a3      	ldrh	r3, [r4, #12]
 800f408:	059b      	lsls	r3, r3, #22
 800f40a:	d4dd      	bmi.n	800f3c8 <_fflush_r+0xc>
 800f40c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f40e:	f000 f908 	bl	800f622 <__retarget_lock_release_recursive>
 800f412:	e7d9      	b.n	800f3c8 <_fflush_r+0xc>
 800f414:	4b05      	ldr	r3, [pc, #20]	; (800f42c <_fflush_r+0x70>)
 800f416:	429c      	cmp	r4, r3
 800f418:	d101      	bne.n	800f41e <_fflush_r+0x62>
 800f41a:	68ac      	ldr	r4, [r5, #8]
 800f41c:	e7df      	b.n	800f3de <_fflush_r+0x22>
 800f41e:	4b04      	ldr	r3, [pc, #16]	; (800f430 <_fflush_r+0x74>)
 800f420:	429c      	cmp	r4, r3
 800f422:	bf08      	it	eq
 800f424:	68ec      	ldreq	r4, [r5, #12]
 800f426:	e7da      	b.n	800f3de <_fflush_r+0x22>
 800f428:	08010b4c 	.word	0x08010b4c
 800f42c:	08010b6c 	.word	0x08010b6c
 800f430:	08010b2c 	.word	0x08010b2c

0800f434 <std>:
 800f434:	2300      	movs	r3, #0
 800f436:	b510      	push	{r4, lr}
 800f438:	4604      	mov	r4, r0
 800f43a:	e9c0 3300 	strd	r3, r3, [r0]
 800f43e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f442:	6083      	str	r3, [r0, #8]
 800f444:	8181      	strh	r1, [r0, #12]
 800f446:	6643      	str	r3, [r0, #100]	; 0x64
 800f448:	81c2      	strh	r2, [r0, #14]
 800f44a:	6183      	str	r3, [r0, #24]
 800f44c:	4619      	mov	r1, r3
 800f44e:	2208      	movs	r2, #8
 800f450:	305c      	adds	r0, #92	; 0x5c
 800f452:	f7ff fce7 	bl	800ee24 <memset>
 800f456:	4b05      	ldr	r3, [pc, #20]	; (800f46c <std+0x38>)
 800f458:	6263      	str	r3, [r4, #36]	; 0x24
 800f45a:	4b05      	ldr	r3, [pc, #20]	; (800f470 <std+0x3c>)
 800f45c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f45e:	4b05      	ldr	r3, [pc, #20]	; (800f474 <std+0x40>)
 800f460:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f462:	4b05      	ldr	r3, [pc, #20]	; (800f478 <std+0x44>)
 800f464:	6224      	str	r4, [r4, #32]
 800f466:	6323      	str	r3, [r4, #48]	; 0x30
 800f468:	bd10      	pop	{r4, pc}
 800f46a:	bf00      	nop
 800f46c:	08010029 	.word	0x08010029
 800f470:	0801004b 	.word	0x0801004b
 800f474:	08010083 	.word	0x08010083
 800f478:	080100a7 	.word	0x080100a7

0800f47c <_cleanup_r>:
 800f47c:	4901      	ldr	r1, [pc, #4]	; (800f484 <_cleanup_r+0x8>)
 800f47e:	f000 b8af 	b.w	800f5e0 <_fwalk_reent>
 800f482:	bf00      	nop
 800f484:	0800f3bd 	.word	0x0800f3bd

0800f488 <__sfmoreglue>:
 800f488:	b570      	push	{r4, r5, r6, lr}
 800f48a:	1e4a      	subs	r2, r1, #1
 800f48c:	2568      	movs	r5, #104	; 0x68
 800f48e:	4355      	muls	r5, r2
 800f490:	460e      	mov	r6, r1
 800f492:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f496:	f7ff fd1d 	bl	800eed4 <_malloc_r>
 800f49a:	4604      	mov	r4, r0
 800f49c:	b140      	cbz	r0, 800f4b0 <__sfmoreglue+0x28>
 800f49e:	2100      	movs	r1, #0
 800f4a0:	e9c0 1600 	strd	r1, r6, [r0]
 800f4a4:	300c      	adds	r0, #12
 800f4a6:	60a0      	str	r0, [r4, #8]
 800f4a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f4ac:	f7ff fcba 	bl	800ee24 <memset>
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	bd70      	pop	{r4, r5, r6, pc}

0800f4b4 <__sfp_lock_acquire>:
 800f4b4:	4801      	ldr	r0, [pc, #4]	; (800f4bc <__sfp_lock_acquire+0x8>)
 800f4b6:	f000 b8b3 	b.w	800f620 <__retarget_lock_acquire_recursive>
 800f4ba:	bf00      	nop
 800f4bc:	20004a68 	.word	0x20004a68

0800f4c0 <__sfp_lock_release>:
 800f4c0:	4801      	ldr	r0, [pc, #4]	; (800f4c8 <__sfp_lock_release+0x8>)
 800f4c2:	f000 b8ae 	b.w	800f622 <__retarget_lock_release_recursive>
 800f4c6:	bf00      	nop
 800f4c8:	20004a68 	.word	0x20004a68

0800f4cc <__sinit_lock_acquire>:
 800f4cc:	4801      	ldr	r0, [pc, #4]	; (800f4d4 <__sinit_lock_acquire+0x8>)
 800f4ce:	f000 b8a7 	b.w	800f620 <__retarget_lock_acquire_recursive>
 800f4d2:	bf00      	nop
 800f4d4:	20004a63 	.word	0x20004a63

0800f4d8 <__sinit_lock_release>:
 800f4d8:	4801      	ldr	r0, [pc, #4]	; (800f4e0 <__sinit_lock_release+0x8>)
 800f4da:	f000 b8a2 	b.w	800f622 <__retarget_lock_release_recursive>
 800f4de:	bf00      	nop
 800f4e0:	20004a63 	.word	0x20004a63

0800f4e4 <__sinit>:
 800f4e4:	b510      	push	{r4, lr}
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	f7ff fff0 	bl	800f4cc <__sinit_lock_acquire>
 800f4ec:	69a3      	ldr	r3, [r4, #24]
 800f4ee:	b11b      	cbz	r3, 800f4f8 <__sinit+0x14>
 800f4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4f4:	f7ff bff0 	b.w	800f4d8 <__sinit_lock_release>
 800f4f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f4fc:	6523      	str	r3, [r4, #80]	; 0x50
 800f4fe:	4b13      	ldr	r3, [pc, #76]	; (800f54c <__sinit+0x68>)
 800f500:	4a13      	ldr	r2, [pc, #76]	; (800f550 <__sinit+0x6c>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	62a2      	str	r2, [r4, #40]	; 0x28
 800f506:	42a3      	cmp	r3, r4
 800f508:	bf04      	itt	eq
 800f50a:	2301      	moveq	r3, #1
 800f50c:	61a3      	streq	r3, [r4, #24]
 800f50e:	4620      	mov	r0, r4
 800f510:	f000 f820 	bl	800f554 <__sfp>
 800f514:	6060      	str	r0, [r4, #4]
 800f516:	4620      	mov	r0, r4
 800f518:	f000 f81c 	bl	800f554 <__sfp>
 800f51c:	60a0      	str	r0, [r4, #8]
 800f51e:	4620      	mov	r0, r4
 800f520:	f000 f818 	bl	800f554 <__sfp>
 800f524:	2200      	movs	r2, #0
 800f526:	60e0      	str	r0, [r4, #12]
 800f528:	2104      	movs	r1, #4
 800f52a:	6860      	ldr	r0, [r4, #4]
 800f52c:	f7ff ff82 	bl	800f434 <std>
 800f530:	68a0      	ldr	r0, [r4, #8]
 800f532:	2201      	movs	r2, #1
 800f534:	2109      	movs	r1, #9
 800f536:	f7ff ff7d 	bl	800f434 <std>
 800f53a:	68e0      	ldr	r0, [r4, #12]
 800f53c:	2202      	movs	r2, #2
 800f53e:	2112      	movs	r1, #18
 800f540:	f7ff ff78 	bl	800f434 <std>
 800f544:	2301      	movs	r3, #1
 800f546:	61a3      	str	r3, [r4, #24]
 800f548:	e7d2      	b.n	800f4f0 <__sinit+0xc>
 800f54a:	bf00      	nop
 800f54c:	08010b28 	.word	0x08010b28
 800f550:	0800f47d 	.word	0x0800f47d

0800f554 <__sfp>:
 800f554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f556:	4607      	mov	r7, r0
 800f558:	f7ff ffac 	bl	800f4b4 <__sfp_lock_acquire>
 800f55c:	4b1e      	ldr	r3, [pc, #120]	; (800f5d8 <__sfp+0x84>)
 800f55e:	681e      	ldr	r6, [r3, #0]
 800f560:	69b3      	ldr	r3, [r6, #24]
 800f562:	b913      	cbnz	r3, 800f56a <__sfp+0x16>
 800f564:	4630      	mov	r0, r6
 800f566:	f7ff ffbd 	bl	800f4e4 <__sinit>
 800f56a:	3648      	adds	r6, #72	; 0x48
 800f56c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f570:	3b01      	subs	r3, #1
 800f572:	d503      	bpl.n	800f57c <__sfp+0x28>
 800f574:	6833      	ldr	r3, [r6, #0]
 800f576:	b30b      	cbz	r3, 800f5bc <__sfp+0x68>
 800f578:	6836      	ldr	r6, [r6, #0]
 800f57a:	e7f7      	b.n	800f56c <__sfp+0x18>
 800f57c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f580:	b9d5      	cbnz	r5, 800f5b8 <__sfp+0x64>
 800f582:	4b16      	ldr	r3, [pc, #88]	; (800f5dc <__sfp+0x88>)
 800f584:	60e3      	str	r3, [r4, #12]
 800f586:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f58a:	6665      	str	r5, [r4, #100]	; 0x64
 800f58c:	f000 f847 	bl	800f61e <__retarget_lock_init_recursive>
 800f590:	f7ff ff96 	bl	800f4c0 <__sfp_lock_release>
 800f594:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f598:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f59c:	6025      	str	r5, [r4, #0]
 800f59e:	61a5      	str	r5, [r4, #24]
 800f5a0:	2208      	movs	r2, #8
 800f5a2:	4629      	mov	r1, r5
 800f5a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f5a8:	f7ff fc3c 	bl	800ee24 <memset>
 800f5ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f5b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5b8:	3468      	adds	r4, #104	; 0x68
 800f5ba:	e7d9      	b.n	800f570 <__sfp+0x1c>
 800f5bc:	2104      	movs	r1, #4
 800f5be:	4638      	mov	r0, r7
 800f5c0:	f7ff ff62 	bl	800f488 <__sfmoreglue>
 800f5c4:	4604      	mov	r4, r0
 800f5c6:	6030      	str	r0, [r6, #0]
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	d1d5      	bne.n	800f578 <__sfp+0x24>
 800f5cc:	f7ff ff78 	bl	800f4c0 <__sfp_lock_release>
 800f5d0:	230c      	movs	r3, #12
 800f5d2:	603b      	str	r3, [r7, #0]
 800f5d4:	e7ee      	b.n	800f5b4 <__sfp+0x60>
 800f5d6:	bf00      	nop
 800f5d8:	08010b28 	.word	0x08010b28
 800f5dc:	ffff0001 	.word	0xffff0001

0800f5e0 <_fwalk_reent>:
 800f5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5e4:	4606      	mov	r6, r0
 800f5e6:	4688      	mov	r8, r1
 800f5e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f5ec:	2700      	movs	r7, #0
 800f5ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f5f2:	f1b9 0901 	subs.w	r9, r9, #1
 800f5f6:	d505      	bpl.n	800f604 <_fwalk_reent+0x24>
 800f5f8:	6824      	ldr	r4, [r4, #0]
 800f5fa:	2c00      	cmp	r4, #0
 800f5fc:	d1f7      	bne.n	800f5ee <_fwalk_reent+0xe>
 800f5fe:	4638      	mov	r0, r7
 800f600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f604:	89ab      	ldrh	r3, [r5, #12]
 800f606:	2b01      	cmp	r3, #1
 800f608:	d907      	bls.n	800f61a <_fwalk_reent+0x3a>
 800f60a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f60e:	3301      	adds	r3, #1
 800f610:	d003      	beq.n	800f61a <_fwalk_reent+0x3a>
 800f612:	4629      	mov	r1, r5
 800f614:	4630      	mov	r0, r6
 800f616:	47c0      	blx	r8
 800f618:	4307      	orrs	r7, r0
 800f61a:	3568      	adds	r5, #104	; 0x68
 800f61c:	e7e9      	b.n	800f5f2 <_fwalk_reent+0x12>

0800f61e <__retarget_lock_init_recursive>:
 800f61e:	4770      	bx	lr

0800f620 <__retarget_lock_acquire_recursive>:
 800f620:	4770      	bx	lr

0800f622 <__retarget_lock_release_recursive>:
 800f622:	4770      	bx	lr

0800f624 <__swhatbuf_r>:
 800f624:	b570      	push	{r4, r5, r6, lr}
 800f626:	460e      	mov	r6, r1
 800f628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f62c:	2900      	cmp	r1, #0
 800f62e:	b096      	sub	sp, #88	; 0x58
 800f630:	4614      	mov	r4, r2
 800f632:	461d      	mov	r5, r3
 800f634:	da07      	bge.n	800f646 <__swhatbuf_r+0x22>
 800f636:	2300      	movs	r3, #0
 800f638:	602b      	str	r3, [r5, #0]
 800f63a:	89b3      	ldrh	r3, [r6, #12]
 800f63c:	061a      	lsls	r2, r3, #24
 800f63e:	d410      	bmi.n	800f662 <__swhatbuf_r+0x3e>
 800f640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f644:	e00e      	b.n	800f664 <__swhatbuf_r+0x40>
 800f646:	466a      	mov	r2, sp
 800f648:	f000 fd54 	bl	80100f4 <_fstat_r>
 800f64c:	2800      	cmp	r0, #0
 800f64e:	dbf2      	blt.n	800f636 <__swhatbuf_r+0x12>
 800f650:	9a01      	ldr	r2, [sp, #4]
 800f652:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f656:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f65a:	425a      	negs	r2, r3
 800f65c:	415a      	adcs	r2, r3
 800f65e:	602a      	str	r2, [r5, #0]
 800f660:	e7ee      	b.n	800f640 <__swhatbuf_r+0x1c>
 800f662:	2340      	movs	r3, #64	; 0x40
 800f664:	2000      	movs	r0, #0
 800f666:	6023      	str	r3, [r4, #0]
 800f668:	b016      	add	sp, #88	; 0x58
 800f66a:	bd70      	pop	{r4, r5, r6, pc}

0800f66c <__smakebuf_r>:
 800f66c:	898b      	ldrh	r3, [r1, #12]
 800f66e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f670:	079d      	lsls	r5, r3, #30
 800f672:	4606      	mov	r6, r0
 800f674:	460c      	mov	r4, r1
 800f676:	d507      	bpl.n	800f688 <__smakebuf_r+0x1c>
 800f678:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f67c:	6023      	str	r3, [r4, #0]
 800f67e:	6123      	str	r3, [r4, #16]
 800f680:	2301      	movs	r3, #1
 800f682:	6163      	str	r3, [r4, #20]
 800f684:	b002      	add	sp, #8
 800f686:	bd70      	pop	{r4, r5, r6, pc}
 800f688:	ab01      	add	r3, sp, #4
 800f68a:	466a      	mov	r2, sp
 800f68c:	f7ff ffca 	bl	800f624 <__swhatbuf_r>
 800f690:	9900      	ldr	r1, [sp, #0]
 800f692:	4605      	mov	r5, r0
 800f694:	4630      	mov	r0, r6
 800f696:	f7ff fc1d 	bl	800eed4 <_malloc_r>
 800f69a:	b948      	cbnz	r0, 800f6b0 <__smakebuf_r+0x44>
 800f69c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6a0:	059a      	lsls	r2, r3, #22
 800f6a2:	d4ef      	bmi.n	800f684 <__smakebuf_r+0x18>
 800f6a4:	f023 0303 	bic.w	r3, r3, #3
 800f6a8:	f043 0302 	orr.w	r3, r3, #2
 800f6ac:	81a3      	strh	r3, [r4, #12]
 800f6ae:	e7e3      	b.n	800f678 <__smakebuf_r+0xc>
 800f6b0:	4b0d      	ldr	r3, [pc, #52]	; (800f6e8 <__smakebuf_r+0x7c>)
 800f6b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800f6b4:	89a3      	ldrh	r3, [r4, #12]
 800f6b6:	6020      	str	r0, [r4, #0]
 800f6b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6bc:	81a3      	strh	r3, [r4, #12]
 800f6be:	9b00      	ldr	r3, [sp, #0]
 800f6c0:	6163      	str	r3, [r4, #20]
 800f6c2:	9b01      	ldr	r3, [sp, #4]
 800f6c4:	6120      	str	r0, [r4, #16]
 800f6c6:	b15b      	cbz	r3, 800f6e0 <__smakebuf_r+0x74>
 800f6c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6cc:	4630      	mov	r0, r6
 800f6ce:	f000 fd23 	bl	8010118 <_isatty_r>
 800f6d2:	b128      	cbz	r0, 800f6e0 <__smakebuf_r+0x74>
 800f6d4:	89a3      	ldrh	r3, [r4, #12]
 800f6d6:	f023 0303 	bic.w	r3, r3, #3
 800f6da:	f043 0301 	orr.w	r3, r3, #1
 800f6de:	81a3      	strh	r3, [r4, #12]
 800f6e0:	89a0      	ldrh	r0, [r4, #12]
 800f6e2:	4305      	orrs	r5, r0
 800f6e4:	81a5      	strh	r5, [r4, #12]
 800f6e6:	e7cd      	b.n	800f684 <__smakebuf_r+0x18>
 800f6e8:	0800f47d 	.word	0x0800f47d

0800f6ec <__malloc_lock>:
 800f6ec:	4801      	ldr	r0, [pc, #4]	; (800f6f4 <__malloc_lock+0x8>)
 800f6ee:	f7ff bf97 	b.w	800f620 <__retarget_lock_acquire_recursive>
 800f6f2:	bf00      	nop
 800f6f4:	20004a64 	.word	0x20004a64

0800f6f8 <__malloc_unlock>:
 800f6f8:	4801      	ldr	r0, [pc, #4]	; (800f700 <__malloc_unlock+0x8>)
 800f6fa:	f7ff bf92 	b.w	800f622 <__retarget_lock_release_recursive>
 800f6fe:	bf00      	nop
 800f700:	20004a64 	.word	0x20004a64

0800f704 <__ssputs_r>:
 800f704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f708:	688e      	ldr	r6, [r1, #8]
 800f70a:	429e      	cmp	r6, r3
 800f70c:	4682      	mov	sl, r0
 800f70e:	460c      	mov	r4, r1
 800f710:	4690      	mov	r8, r2
 800f712:	461f      	mov	r7, r3
 800f714:	d838      	bhi.n	800f788 <__ssputs_r+0x84>
 800f716:	898a      	ldrh	r2, [r1, #12]
 800f718:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f71c:	d032      	beq.n	800f784 <__ssputs_r+0x80>
 800f71e:	6825      	ldr	r5, [r4, #0]
 800f720:	6909      	ldr	r1, [r1, #16]
 800f722:	eba5 0901 	sub.w	r9, r5, r1
 800f726:	6965      	ldr	r5, [r4, #20]
 800f728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f72c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f730:	3301      	adds	r3, #1
 800f732:	444b      	add	r3, r9
 800f734:	106d      	asrs	r5, r5, #1
 800f736:	429d      	cmp	r5, r3
 800f738:	bf38      	it	cc
 800f73a:	461d      	movcc	r5, r3
 800f73c:	0553      	lsls	r3, r2, #21
 800f73e:	d531      	bpl.n	800f7a4 <__ssputs_r+0xa0>
 800f740:	4629      	mov	r1, r5
 800f742:	f7ff fbc7 	bl	800eed4 <_malloc_r>
 800f746:	4606      	mov	r6, r0
 800f748:	b950      	cbnz	r0, 800f760 <__ssputs_r+0x5c>
 800f74a:	230c      	movs	r3, #12
 800f74c:	f8ca 3000 	str.w	r3, [sl]
 800f750:	89a3      	ldrh	r3, [r4, #12]
 800f752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f756:	81a3      	strh	r3, [r4, #12]
 800f758:	f04f 30ff 	mov.w	r0, #4294967295
 800f75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f760:	6921      	ldr	r1, [r4, #16]
 800f762:	464a      	mov	r2, r9
 800f764:	f7ff fb50 	bl	800ee08 <memcpy>
 800f768:	89a3      	ldrh	r3, [r4, #12]
 800f76a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f76e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f772:	81a3      	strh	r3, [r4, #12]
 800f774:	6126      	str	r6, [r4, #16]
 800f776:	6165      	str	r5, [r4, #20]
 800f778:	444e      	add	r6, r9
 800f77a:	eba5 0509 	sub.w	r5, r5, r9
 800f77e:	6026      	str	r6, [r4, #0]
 800f780:	60a5      	str	r5, [r4, #8]
 800f782:	463e      	mov	r6, r7
 800f784:	42be      	cmp	r6, r7
 800f786:	d900      	bls.n	800f78a <__ssputs_r+0x86>
 800f788:	463e      	mov	r6, r7
 800f78a:	4632      	mov	r2, r6
 800f78c:	6820      	ldr	r0, [r4, #0]
 800f78e:	4641      	mov	r1, r8
 800f790:	f000 fce4 	bl	801015c <memmove>
 800f794:	68a3      	ldr	r3, [r4, #8]
 800f796:	6822      	ldr	r2, [r4, #0]
 800f798:	1b9b      	subs	r3, r3, r6
 800f79a:	4432      	add	r2, r6
 800f79c:	60a3      	str	r3, [r4, #8]
 800f79e:	6022      	str	r2, [r4, #0]
 800f7a0:	2000      	movs	r0, #0
 800f7a2:	e7db      	b.n	800f75c <__ssputs_r+0x58>
 800f7a4:	462a      	mov	r2, r5
 800f7a6:	f000 fcf3 	bl	8010190 <_realloc_r>
 800f7aa:	4606      	mov	r6, r0
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	d1e1      	bne.n	800f774 <__ssputs_r+0x70>
 800f7b0:	6921      	ldr	r1, [r4, #16]
 800f7b2:	4650      	mov	r0, sl
 800f7b4:	f7ff fb3e 	bl	800ee34 <_free_r>
 800f7b8:	e7c7      	b.n	800f74a <__ssputs_r+0x46>
	...

0800f7bc <_svfiprintf_r>:
 800f7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7c0:	4698      	mov	r8, r3
 800f7c2:	898b      	ldrh	r3, [r1, #12]
 800f7c4:	061b      	lsls	r3, r3, #24
 800f7c6:	b09d      	sub	sp, #116	; 0x74
 800f7c8:	4607      	mov	r7, r0
 800f7ca:	460d      	mov	r5, r1
 800f7cc:	4614      	mov	r4, r2
 800f7ce:	d50e      	bpl.n	800f7ee <_svfiprintf_r+0x32>
 800f7d0:	690b      	ldr	r3, [r1, #16]
 800f7d2:	b963      	cbnz	r3, 800f7ee <_svfiprintf_r+0x32>
 800f7d4:	2140      	movs	r1, #64	; 0x40
 800f7d6:	f7ff fb7d 	bl	800eed4 <_malloc_r>
 800f7da:	6028      	str	r0, [r5, #0]
 800f7dc:	6128      	str	r0, [r5, #16]
 800f7de:	b920      	cbnz	r0, 800f7ea <_svfiprintf_r+0x2e>
 800f7e0:	230c      	movs	r3, #12
 800f7e2:	603b      	str	r3, [r7, #0]
 800f7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7e8:	e0d1      	b.n	800f98e <_svfiprintf_r+0x1d2>
 800f7ea:	2340      	movs	r3, #64	; 0x40
 800f7ec:	616b      	str	r3, [r5, #20]
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	9309      	str	r3, [sp, #36]	; 0x24
 800f7f2:	2320      	movs	r3, #32
 800f7f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7fc:	2330      	movs	r3, #48	; 0x30
 800f7fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f9a8 <_svfiprintf_r+0x1ec>
 800f802:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f806:	f04f 0901 	mov.w	r9, #1
 800f80a:	4623      	mov	r3, r4
 800f80c:	469a      	mov	sl, r3
 800f80e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f812:	b10a      	cbz	r2, 800f818 <_svfiprintf_r+0x5c>
 800f814:	2a25      	cmp	r2, #37	; 0x25
 800f816:	d1f9      	bne.n	800f80c <_svfiprintf_r+0x50>
 800f818:	ebba 0b04 	subs.w	fp, sl, r4
 800f81c:	d00b      	beq.n	800f836 <_svfiprintf_r+0x7a>
 800f81e:	465b      	mov	r3, fp
 800f820:	4622      	mov	r2, r4
 800f822:	4629      	mov	r1, r5
 800f824:	4638      	mov	r0, r7
 800f826:	f7ff ff6d 	bl	800f704 <__ssputs_r>
 800f82a:	3001      	adds	r0, #1
 800f82c:	f000 80aa 	beq.w	800f984 <_svfiprintf_r+0x1c8>
 800f830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f832:	445a      	add	r2, fp
 800f834:	9209      	str	r2, [sp, #36]	; 0x24
 800f836:	f89a 3000 	ldrb.w	r3, [sl]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	f000 80a2 	beq.w	800f984 <_svfiprintf_r+0x1c8>
 800f840:	2300      	movs	r3, #0
 800f842:	f04f 32ff 	mov.w	r2, #4294967295
 800f846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f84a:	f10a 0a01 	add.w	sl, sl, #1
 800f84e:	9304      	str	r3, [sp, #16]
 800f850:	9307      	str	r3, [sp, #28]
 800f852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f856:	931a      	str	r3, [sp, #104]	; 0x68
 800f858:	4654      	mov	r4, sl
 800f85a:	2205      	movs	r2, #5
 800f85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f860:	4851      	ldr	r0, [pc, #324]	; (800f9a8 <_svfiprintf_r+0x1ec>)
 800f862:	f7f0 fcb5 	bl	80001d0 <memchr>
 800f866:	9a04      	ldr	r2, [sp, #16]
 800f868:	b9d8      	cbnz	r0, 800f8a2 <_svfiprintf_r+0xe6>
 800f86a:	06d0      	lsls	r0, r2, #27
 800f86c:	bf44      	itt	mi
 800f86e:	2320      	movmi	r3, #32
 800f870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f874:	0711      	lsls	r1, r2, #28
 800f876:	bf44      	itt	mi
 800f878:	232b      	movmi	r3, #43	; 0x2b
 800f87a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f87e:	f89a 3000 	ldrb.w	r3, [sl]
 800f882:	2b2a      	cmp	r3, #42	; 0x2a
 800f884:	d015      	beq.n	800f8b2 <_svfiprintf_r+0xf6>
 800f886:	9a07      	ldr	r2, [sp, #28]
 800f888:	4654      	mov	r4, sl
 800f88a:	2000      	movs	r0, #0
 800f88c:	f04f 0c0a 	mov.w	ip, #10
 800f890:	4621      	mov	r1, r4
 800f892:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f896:	3b30      	subs	r3, #48	; 0x30
 800f898:	2b09      	cmp	r3, #9
 800f89a:	d94e      	bls.n	800f93a <_svfiprintf_r+0x17e>
 800f89c:	b1b0      	cbz	r0, 800f8cc <_svfiprintf_r+0x110>
 800f89e:	9207      	str	r2, [sp, #28]
 800f8a0:	e014      	b.n	800f8cc <_svfiprintf_r+0x110>
 800f8a2:	eba0 0308 	sub.w	r3, r0, r8
 800f8a6:	fa09 f303 	lsl.w	r3, r9, r3
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	9304      	str	r3, [sp, #16]
 800f8ae:	46a2      	mov	sl, r4
 800f8b0:	e7d2      	b.n	800f858 <_svfiprintf_r+0x9c>
 800f8b2:	9b03      	ldr	r3, [sp, #12]
 800f8b4:	1d19      	adds	r1, r3, #4
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	9103      	str	r1, [sp, #12]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	bfbb      	ittet	lt
 800f8be:	425b      	neglt	r3, r3
 800f8c0:	f042 0202 	orrlt.w	r2, r2, #2
 800f8c4:	9307      	strge	r3, [sp, #28]
 800f8c6:	9307      	strlt	r3, [sp, #28]
 800f8c8:	bfb8      	it	lt
 800f8ca:	9204      	strlt	r2, [sp, #16]
 800f8cc:	7823      	ldrb	r3, [r4, #0]
 800f8ce:	2b2e      	cmp	r3, #46	; 0x2e
 800f8d0:	d10c      	bne.n	800f8ec <_svfiprintf_r+0x130>
 800f8d2:	7863      	ldrb	r3, [r4, #1]
 800f8d4:	2b2a      	cmp	r3, #42	; 0x2a
 800f8d6:	d135      	bne.n	800f944 <_svfiprintf_r+0x188>
 800f8d8:	9b03      	ldr	r3, [sp, #12]
 800f8da:	1d1a      	adds	r2, r3, #4
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	9203      	str	r2, [sp, #12]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	bfb8      	it	lt
 800f8e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f8e8:	3402      	adds	r4, #2
 800f8ea:	9305      	str	r3, [sp, #20]
 800f8ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f9b8 <_svfiprintf_r+0x1fc>
 800f8f0:	7821      	ldrb	r1, [r4, #0]
 800f8f2:	2203      	movs	r2, #3
 800f8f4:	4650      	mov	r0, sl
 800f8f6:	f7f0 fc6b 	bl	80001d0 <memchr>
 800f8fa:	b140      	cbz	r0, 800f90e <_svfiprintf_r+0x152>
 800f8fc:	2340      	movs	r3, #64	; 0x40
 800f8fe:	eba0 000a 	sub.w	r0, r0, sl
 800f902:	fa03 f000 	lsl.w	r0, r3, r0
 800f906:	9b04      	ldr	r3, [sp, #16]
 800f908:	4303      	orrs	r3, r0
 800f90a:	3401      	adds	r4, #1
 800f90c:	9304      	str	r3, [sp, #16]
 800f90e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f912:	4826      	ldr	r0, [pc, #152]	; (800f9ac <_svfiprintf_r+0x1f0>)
 800f914:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f918:	2206      	movs	r2, #6
 800f91a:	f7f0 fc59 	bl	80001d0 <memchr>
 800f91e:	2800      	cmp	r0, #0
 800f920:	d038      	beq.n	800f994 <_svfiprintf_r+0x1d8>
 800f922:	4b23      	ldr	r3, [pc, #140]	; (800f9b0 <_svfiprintf_r+0x1f4>)
 800f924:	bb1b      	cbnz	r3, 800f96e <_svfiprintf_r+0x1b2>
 800f926:	9b03      	ldr	r3, [sp, #12]
 800f928:	3307      	adds	r3, #7
 800f92a:	f023 0307 	bic.w	r3, r3, #7
 800f92e:	3308      	adds	r3, #8
 800f930:	9303      	str	r3, [sp, #12]
 800f932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f934:	4433      	add	r3, r6
 800f936:	9309      	str	r3, [sp, #36]	; 0x24
 800f938:	e767      	b.n	800f80a <_svfiprintf_r+0x4e>
 800f93a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f93e:	460c      	mov	r4, r1
 800f940:	2001      	movs	r0, #1
 800f942:	e7a5      	b.n	800f890 <_svfiprintf_r+0xd4>
 800f944:	2300      	movs	r3, #0
 800f946:	3401      	adds	r4, #1
 800f948:	9305      	str	r3, [sp, #20]
 800f94a:	4619      	mov	r1, r3
 800f94c:	f04f 0c0a 	mov.w	ip, #10
 800f950:	4620      	mov	r0, r4
 800f952:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f956:	3a30      	subs	r2, #48	; 0x30
 800f958:	2a09      	cmp	r2, #9
 800f95a:	d903      	bls.n	800f964 <_svfiprintf_r+0x1a8>
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d0c5      	beq.n	800f8ec <_svfiprintf_r+0x130>
 800f960:	9105      	str	r1, [sp, #20]
 800f962:	e7c3      	b.n	800f8ec <_svfiprintf_r+0x130>
 800f964:	fb0c 2101 	mla	r1, ip, r1, r2
 800f968:	4604      	mov	r4, r0
 800f96a:	2301      	movs	r3, #1
 800f96c:	e7f0      	b.n	800f950 <_svfiprintf_r+0x194>
 800f96e:	ab03      	add	r3, sp, #12
 800f970:	9300      	str	r3, [sp, #0]
 800f972:	462a      	mov	r2, r5
 800f974:	4b0f      	ldr	r3, [pc, #60]	; (800f9b4 <_svfiprintf_r+0x1f8>)
 800f976:	a904      	add	r1, sp, #16
 800f978:	4638      	mov	r0, r7
 800f97a:	f3af 8000 	nop.w
 800f97e:	1c42      	adds	r2, r0, #1
 800f980:	4606      	mov	r6, r0
 800f982:	d1d6      	bne.n	800f932 <_svfiprintf_r+0x176>
 800f984:	89ab      	ldrh	r3, [r5, #12]
 800f986:	065b      	lsls	r3, r3, #25
 800f988:	f53f af2c 	bmi.w	800f7e4 <_svfiprintf_r+0x28>
 800f98c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f98e:	b01d      	add	sp, #116	; 0x74
 800f990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f994:	ab03      	add	r3, sp, #12
 800f996:	9300      	str	r3, [sp, #0]
 800f998:	462a      	mov	r2, r5
 800f99a:	4b06      	ldr	r3, [pc, #24]	; (800f9b4 <_svfiprintf_r+0x1f8>)
 800f99c:	a904      	add	r1, sp, #16
 800f99e:	4638      	mov	r0, r7
 800f9a0:	f000 f9d4 	bl	800fd4c <_printf_i>
 800f9a4:	e7eb      	b.n	800f97e <_svfiprintf_r+0x1c2>
 800f9a6:	bf00      	nop
 800f9a8:	08010b8c 	.word	0x08010b8c
 800f9ac:	08010b96 	.word	0x08010b96
 800f9b0:	00000000 	.word	0x00000000
 800f9b4:	0800f705 	.word	0x0800f705
 800f9b8:	08010b92 	.word	0x08010b92

0800f9bc <__sfputc_r>:
 800f9bc:	6893      	ldr	r3, [r2, #8]
 800f9be:	3b01      	subs	r3, #1
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	b410      	push	{r4}
 800f9c4:	6093      	str	r3, [r2, #8]
 800f9c6:	da08      	bge.n	800f9da <__sfputc_r+0x1e>
 800f9c8:	6994      	ldr	r4, [r2, #24]
 800f9ca:	42a3      	cmp	r3, r4
 800f9cc:	db01      	blt.n	800f9d2 <__sfputc_r+0x16>
 800f9ce:	290a      	cmp	r1, #10
 800f9d0:	d103      	bne.n	800f9da <__sfputc_r+0x1e>
 800f9d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9d6:	f7ff bbab 	b.w	800f130 <__swbuf_r>
 800f9da:	6813      	ldr	r3, [r2, #0]
 800f9dc:	1c58      	adds	r0, r3, #1
 800f9de:	6010      	str	r0, [r2, #0]
 800f9e0:	7019      	strb	r1, [r3, #0]
 800f9e2:	4608      	mov	r0, r1
 800f9e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9e8:	4770      	bx	lr

0800f9ea <__sfputs_r>:
 800f9ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ec:	4606      	mov	r6, r0
 800f9ee:	460f      	mov	r7, r1
 800f9f0:	4614      	mov	r4, r2
 800f9f2:	18d5      	adds	r5, r2, r3
 800f9f4:	42ac      	cmp	r4, r5
 800f9f6:	d101      	bne.n	800f9fc <__sfputs_r+0x12>
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	e007      	b.n	800fa0c <__sfputs_r+0x22>
 800f9fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa00:	463a      	mov	r2, r7
 800fa02:	4630      	mov	r0, r6
 800fa04:	f7ff ffda 	bl	800f9bc <__sfputc_r>
 800fa08:	1c43      	adds	r3, r0, #1
 800fa0a:	d1f3      	bne.n	800f9f4 <__sfputs_r+0xa>
 800fa0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa10 <_vfiprintf_r>:
 800fa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa14:	460d      	mov	r5, r1
 800fa16:	b09d      	sub	sp, #116	; 0x74
 800fa18:	4614      	mov	r4, r2
 800fa1a:	4698      	mov	r8, r3
 800fa1c:	4606      	mov	r6, r0
 800fa1e:	b118      	cbz	r0, 800fa28 <_vfiprintf_r+0x18>
 800fa20:	6983      	ldr	r3, [r0, #24]
 800fa22:	b90b      	cbnz	r3, 800fa28 <_vfiprintf_r+0x18>
 800fa24:	f7ff fd5e 	bl	800f4e4 <__sinit>
 800fa28:	4b89      	ldr	r3, [pc, #548]	; (800fc50 <_vfiprintf_r+0x240>)
 800fa2a:	429d      	cmp	r5, r3
 800fa2c:	d11b      	bne.n	800fa66 <_vfiprintf_r+0x56>
 800fa2e:	6875      	ldr	r5, [r6, #4]
 800fa30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa32:	07d9      	lsls	r1, r3, #31
 800fa34:	d405      	bmi.n	800fa42 <_vfiprintf_r+0x32>
 800fa36:	89ab      	ldrh	r3, [r5, #12]
 800fa38:	059a      	lsls	r2, r3, #22
 800fa3a:	d402      	bmi.n	800fa42 <_vfiprintf_r+0x32>
 800fa3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa3e:	f7ff fdef 	bl	800f620 <__retarget_lock_acquire_recursive>
 800fa42:	89ab      	ldrh	r3, [r5, #12]
 800fa44:	071b      	lsls	r3, r3, #28
 800fa46:	d501      	bpl.n	800fa4c <_vfiprintf_r+0x3c>
 800fa48:	692b      	ldr	r3, [r5, #16]
 800fa4a:	b9eb      	cbnz	r3, 800fa88 <_vfiprintf_r+0x78>
 800fa4c:	4629      	mov	r1, r5
 800fa4e:	4630      	mov	r0, r6
 800fa50:	f7ff fbc0 	bl	800f1d4 <__swsetup_r>
 800fa54:	b1c0      	cbz	r0, 800fa88 <_vfiprintf_r+0x78>
 800fa56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa58:	07dc      	lsls	r4, r3, #31
 800fa5a:	d50e      	bpl.n	800fa7a <_vfiprintf_r+0x6a>
 800fa5c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa60:	b01d      	add	sp, #116	; 0x74
 800fa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa66:	4b7b      	ldr	r3, [pc, #492]	; (800fc54 <_vfiprintf_r+0x244>)
 800fa68:	429d      	cmp	r5, r3
 800fa6a:	d101      	bne.n	800fa70 <_vfiprintf_r+0x60>
 800fa6c:	68b5      	ldr	r5, [r6, #8]
 800fa6e:	e7df      	b.n	800fa30 <_vfiprintf_r+0x20>
 800fa70:	4b79      	ldr	r3, [pc, #484]	; (800fc58 <_vfiprintf_r+0x248>)
 800fa72:	429d      	cmp	r5, r3
 800fa74:	bf08      	it	eq
 800fa76:	68f5      	ldreq	r5, [r6, #12]
 800fa78:	e7da      	b.n	800fa30 <_vfiprintf_r+0x20>
 800fa7a:	89ab      	ldrh	r3, [r5, #12]
 800fa7c:	0598      	lsls	r0, r3, #22
 800fa7e:	d4ed      	bmi.n	800fa5c <_vfiprintf_r+0x4c>
 800fa80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa82:	f7ff fdce 	bl	800f622 <__retarget_lock_release_recursive>
 800fa86:	e7e9      	b.n	800fa5c <_vfiprintf_r+0x4c>
 800fa88:	2300      	movs	r3, #0
 800fa8a:	9309      	str	r3, [sp, #36]	; 0x24
 800fa8c:	2320      	movs	r3, #32
 800fa8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa92:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa96:	2330      	movs	r3, #48	; 0x30
 800fa98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fc5c <_vfiprintf_r+0x24c>
 800fa9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800faa0:	f04f 0901 	mov.w	r9, #1
 800faa4:	4623      	mov	r3, r4
 800faa6:	469a      	mov	sl, r3
 800faa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800faac:	b10a      	cbz	r2, 800fab2 <_vfiprintf_r+0xa2>
 800faae:	2a25      	cmp	r2, #37	; 0x25
 800fab0:	d1f9      	bne.n	800faa6 <_vfiprintf_r+0x96>
 800fab2:	ebba 0b04 	subs.w	fp, sl, r4
 800fab6:	d00b      	beq.n	800fad0 <_vfiprintf_r+0xc0>
 800fab8:	465b      	mov	r3, fp
 800faba:	4622      	mov	r2, r4
 800fabc:	4629      	mov	r1, r5
 800fabe:	4630      	mov	r0, r6
 800fac0:	f7ff ff93 	bl	800f9ea <__sfputs_r>
 800fac4:	3001      	adds	r0, #1
 800fac6:	f000 80aa 	beq.w	800fc1e <_vfiprintf_r+0x20e>
 800faca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800facc:	445a      	add	r2, fp
 800face:	9209      	str	r2, [sp, #36]	; 0x24
 800fad0:	f89a 3000 	ldrb.w	r3, [sl]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f000 80a2 	beq.w	800fc1e <_vfiprintf_r+0x20e>
 800fada:	2300      	movs	r3, #0
 800fadc:	f04f 32ff 	mov.w	r2, #4294967295
 800fae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fae4:	f10a 0a01 	add.w	sl, sl, #1
 800fae8:	9304      	str	r3, [sp, #16]
 800faea:	9307      	str	r3, [sp, #28]
 800faec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800faf0:	931a      	str	r3, [sp, #104]	; 0x68
 800faf2:	4654      	mov	r4, sl
 800faf4:	2205      	movs	r2, #5
 800faf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fafa:	4858      	ldr	r0, [pc, #352]	; (800fc5c <_vfiprintf_r+0x24c>)
 800fafc:	f7f0 fb68 	bl	80001d0 <memchr>
 800fb00:	9a04      	ldr	r2, [sp, #16]
 800fb02:	b9d8      	cbnz	r0, 800fb3c <_vfiprintf_r+0x12c>
 800fb04:	06d1      	lsls	r1, r2, #27
 800fb06:	bf44      	itt	mi
 800fb08:	2320      	movmi	r3, #32
 800fb0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb0e:	0713      	lsls	r3, r2, #28
 800fb10:	bf44      	itt	mi
 800fb12:	232b      	movmi	r3, #43	; 0x2b
 800fb14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb18:	f89a 3000 	ldrb.w	r3, [sl]
 800fb1c:	2b2a      	cmp	r3, #42	; 0x2a
 800fb1e:	d015      	beq.n	800fb4c <_vfiprintf_r+0x13c>
 800fb20:	9a07      	ldr	r2, [sp, #28]
 800fb22:	4654      	mov	r4, sl
 800fb24:	2000      	movs	r0, #0
 800fb26:	f04f 0c0a 	mov.w	ip, #10
 800fb2a:	4621      	mov	r1, r4
 800fb2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb30:	3b30      	subs	r3, #48	; 0x30
 800fb32:	2b09      	cmp	r3, #9
 800fb34:	d94e      	bls.n	800fbd4 <_vfiprintf_r+0x1c4>
 800fb36:	b1b0      	cbz	r0, 800fb66 <_vfiprintf_r+0x156>
 800fb38:	9207      	str	r2, [sp, #28]
 800fb3a:	e014      	b.n	800fb66 <_vfiprintf_r+0x156>
 800fb3c:	eba0 0308 	sub.w	r3, r0, r8
 800fb40:	fa09 f303 	lsl.w	r3, r9, r3
 800fb44:	4313      	orrs	r3, r2
 800fb46:	9304      	str	r3, [sp, #16]
 800fb48:	46a2      	mov	sl, r4
 800fb4a:	e7d2      	b.n	800faf2 <_vfiprintf_r+0xe2>
 800fb4c:	9b03      	ldr	r3, [sp, #12]
 800fb4e:	1d19      	adds	r1, r3, #4
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	9103      	str	r1, [sp, #12]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	bfbb      	ittet	lt
 800fb58:	425b      	neglt	r3, r3
 800fb5a:	f042 0202 	orrlt.w	r2, r2, #2
 800fb5e:	9307      	strge	r3, [sp, #28]
 800fb60:	9307      	strlt	r3, [sp, #28]
 800fb62:	bfb8      	it	lt
 800fb64:	9204      	strlt	r2, [sp, #16]
 800fb66:	7823      	ldrb	r3, [r4, #0]
 800fb68:	2b2e      	cmp	r3, #46	; 0x2e
 800fb6a:	d10c      	bne.n	800fb86 <_vfiprintf_r+0x176>
 800fb6c:	7863      	ldrb	r3, [r4, #1]
 800fb6e:	2b2a      	cmp	r3, #42	; 0x2a
 800fb70:	d135      	bne.n	800fbde <_vfiprintf_r+0x1ce>
 800fb72:	9b03      	ldr	r3, [sp, #12]
 800fb74:	1d1a      	adds	r2, r3, #4
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	9203      	str	r2, [sp, #12]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	bfb8      	it	lt
 800fb7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb82:	3402      	adds	r4, #2
 800fb84:	9305      	str	r3, [sp, #20]
 800fb86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fc6c <_vfiprintf_r+0x25c>
 800fb8a:	7821      	ldrb	r1, [r4, #0]
 800fb8c:	2203      	movs	r2, #3
 800fb8e:	4650      	mov	r0, sl
 800fb90:	f7f0 fb1e 	bl	80001d0 <memchr>
 800fb94:	b140      	cbz	r0, 800fba8 <_vfiprintf_r+0x198>
 800fb96:	2340      	movs	r3, #64	; 0x40
 800fb98:	eba0 000a 	sub.w	r0, r0, sl
 800fb9c:	fa03 f000 	lsl.w	r0, r3, r0
 800fba0:	9b04      	ldr	r3, [sp, #16]
 800fba2:	4303      	orrs	r3, r0
 800fba4:	3401      	adds	r4, #1
 800fba6:	9304      	str	r3, [sp, #16]
 800fba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbac:	482c      	ldr	r0, [pc, #176]	; (800fc60 <_vfiprintf_r+0x250>)
 800fbae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fbb2:	2206      	movs	r2, #6
 800fbb4:	f7f0 fb0c 	bl	80001d0 <memchr>
 800fbb8:	2800      	cmp	r0, #0
 800fbba:	d03f      	beq.n	800fc3c <_vfiprintf_r+0x22c>
 800fbbc:	4b29      	ldr	r3, [pc, #164]	; (800fc64 <_vfiprintf_r+0x254>)
 800fbbe:	bb1b      	cbnz	r3, 800fc08 <_vfiprintf_r+0x1f8>
 800fbc0:	9b03      	ldr	r3, [sp, #12]
 800fbc2:	3307      	adds	r3, #7
 800fbc4:	f023 0307 	bic.w	r3, r3, #7
 800fbc8:	3308      	adds	r3, #8
 800fbca:	9303      	str	r3, [sp, #12]
 800fbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbce:	443b      	add	r3, r7
 800fbd0:	9309      	str	r3, [sp, #36]	; 0x24
 800fbd2:	e767      	b.n	800faa4 <_vfiprintf_r+0x94>
 800fbd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbd8:	460c      	mov	r4, r1
 800fbda:	2001      	movs	r0, #1
 800fbdc:	e7a5      	b.n	800fb2a <_vfiprintf_r+0x11a>
 800fbde:	2300      	movs	r3, #0
 800fbe0:	3401      	adds	r4, #1
 800fbe2:	9305      	str	r3, [sp, #20]
 800fbe4:	4619      	mov	r1, r3
 800fbe6:	f04f 0c0a 	mov.w	ip, #10
 800fbea:	4620      	mov	r0, r4
 800fbec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbf0:	3a30      	subs	r2, #48	; 0x30
 800fbf2:	2a09      	cmp	r2, #9
 800fbf4:	d903      	bls.n	800fbfe <_vfiprintf_r+0x1ee>
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d0c5      	beq.n	800fb86 <_vfiprintf_r+0x176>
 800fbfa:	9105      	str	r1, [sp, #20]
 800fbfc:	e7c3      	b.n	800fb86 <_vfiprintf_r+0x176>
 800fbfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc02:	4604      	mov	r4, r0
 800fc04:	2301      	movs	r3, #1
 800fc06:	e7f0      	b.n	800fbea <_vfiprintf_r+0x1da>
 800fc08:	ab03      	add	r3, sp, #12
 800fc0a:	9300      	str	r3, [sp, #0]
 800fc0c:	462a      	mov	r2, r5
 800fc0e:	4b16      	ldr	r3, [pc, #88]	; (800fc68 <_vfiprintf_r+0x258>)
 800fc10:	a904      	add	r1, sp, #16
 800fc12:	4630      	mov	r0, r6
 800fc14:	f3af 8000 	nop.w
 800fc18:	4607      	mov	r7, r0
 800fc1a:	1c78      	adds	r0, r7, #1
 800fc1c:	d1d6      	bne.n	800fbcc <_vfiprintf_r+0x1bc>
 800fc1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc20:	07d9      	lsls	r1, r3, #31
 800fc22:	d405      	bmi.n	800fc30 <_vfiprintf_r+0x220>
 800fc24:	89ab      	ldrh	r3, [r5, #12]
 800fc26:	059a      	lsls	r2, r3, #22
 800fc28:	d402      	bmi.n	800fc30 <_vfiprintf_r+0x220>
 800fc2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc2c:	f7ff fcf9 	bl	800f622 <__retarget_lock_release_recursive>
 800fc30:	89ab      	ldrh	r3, [r5, #12]
 800fc32:	065b      	lsls	r3, r3, #25
 800fc34:	f53f af12 	bmi.w	800fa5c <_vfiprintf_r+0x4c>
 800fc38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc3a:	e711      	b.n	800fa60 <_vfiprintf_r+0x50>
 800fc3c:	ab03      	add	r3, sp, #12
 800fc3e:	9300      	str	r3, [sp, #0]
 800fc40:	462a      	mov	r2, r5
 800fc42:	4b09      	ldr	r3, [pc, #36]	; (800fc68 <_vfiprintf_r+0x258>)
 800fc44:	a904      	add	r1, sp, #16
 800fc46:	4630      	mov	r0, r6
 800fc48:	f000 f880 	bl	800fd4c <_printf_i>
 800fc4c:	e7e4      	b.n	800fc18 <_vfiprintf_r+0x208>
 800fc4e:	bf00      	nop
 800fc50:	08010b4c 	.word	0x08010b4c
 800fc54:	08010b6c 	.word	0x08010b6c
 800fc58:	08010b2c 	.word	0x08010b2c
 800fc5c:	08010b8c 	.word	0x08010b8c
 800fc60:	08010b96 	.word	0x08010b96
 800fc64:	00000000 	.word	0x00000000
 800fc68:	0800f9eb 	.word	0x0800f9eb
 800fc6c:	08010b92 	.word	0x08010b92

0800fc70 <_printf_common>:
 800fc70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc74:	4616      	mov	r6, r2
 800fc76:	4699      	mov	r9, r3
 800fc78:	688a      	ldr	r2, [r1, #8]
 800fc7a:	690b      	ldr	r3, [r1, #16]
 800fc7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc80:	4293      	cmp	r3, r2
 800fc82:	bfb8      	it	lt
 800fc84:	4613      	movlt	r3, r2
 800fc86:	6033      	str	r3, [r6, #0]
 800fc88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fc8c:	4607      	mov	r7, r0
 800fc8e:	460c      	mov	r4, r1
 800fc90:	b10a      	cbz	r2, 800fc96 <_printf_common+0x26>
 800fc92:	3301      	adds	r3, #1
 800fc94:	6033      	str	r3, [r6, #0]
 800fc96:	6823      	ldr	r3, [r4, #0]
 800fc98:	0699      	lsls	r1, r3, #26
 800fc9a:	bf42      	ittt	mi
 800fc9c:	6833      	ldrmi	r3, [r6, #0]
 800fc9e:	3302      	addmi	r3, #2
 800fca0:	6033      	strmi	r3, [r6, #0]
 800fca2:	6825      	ldr	r5, [r4, #0]
 800fca4:	f015 0506 	ands.w	r5, r5, #6
 800fca8:	d106      	bne.n	800fcb8 <_printf_common+0x48>
 800fcaa:	f104 0a19 	add.w	sl, r4, #25
 800fcae:	68e3      	ldr	r3, [r4, #12]
 800fcb0:	6832      	ldr	r2, [r6, #0]
 800fcb2:	1a9b      	subs	r3, r3, r2
 800fcb4:	42ab      	cmp	r3, r5
 800fcb6:	dc26      	bgt.n	800fd06 <_printf_common+0x96>
 800fcb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fcbc:	1e13      	subs	r3, r2, #0
 800fcbe:	6822      	ldr	r2, [r4, #0]
 800fcc0:	bf18      	it	ne
 800fcc2:	2301      	movne	r3, #1
 800fcc4:	0692      	lsls	r2, r2, #26
 800fcc6:	d42b      	bmi.n	800fd20 <_printf_common+0xb0>
 800fcc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fccc:	4649      	mov	r1, r9
 800fcce:	4638      	mov	r0, r7
 800fcd0:	47c0      	blx	r8
 800fcd2:	3001      	adds	r0, #1
 800fcd4:	d01e      	beq.n	800fd14 <_printf_common+0xa4>
 800fcd6:	6823      	ldr	r3, [r4, #0]
 800fcd8:	68e5      	ldr	r5, [r4, #12]
 800fcda:	6832      	ldr	r2, [r6, #0]
 800fcdc:	f003 0306 	and.w	r3, r3, #6
 800fce0:	2b04      	cmp	r3, #4
 800fce2:	bf08      	it	eq
 800fce4:	1aad      	subeq	r5, r5, r2
 800fce6:	68a3      	ldr	r3, [r4, #8]
 800fce8:	6922      	ldr	r2, [r4, #16]
 800fcea:	bf0c      	ite	eq
 800fcec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fcf0:	2500      	movne	r5, #0
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	bfc4      	itt	gt
 800fcf6:	1a9b      	subgt	r3, r3, r2
 800fcf8:	18ed      	addgt	r5, r5, r3
 800fcfa:	2600      	movs	r6, #0
 800fcfc:	341a      	adds	r4, #26
 800fcfe:	42b5      	cmp	r5, r6
 800fd00:	d11a      	bne.n	800fd38 <_printf_common+0xc8>
 800fd02:	2000      	movs	r0, #0
 800fd04:	e008      	b.n	800fd18 <_printf_common+0xa8>
 800fd06:	2301      	movs	r3, #1
 800fd08:	4652      	mov	r2, sl
 800fd0a:	4649      	mov	r1, r9
 800fd0c:	4638      	mov	r0, r7
 800fd0e:	47c0      	blx	r8
 800fd10:	3001      	adds	r0, #1
 800fd12:	d103      	bne.n	800fd1c <_printf_common+0xac>
 800fd14:	f04f 30ff 	mov.w	r0, #4294967295
 800fd18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd1c:	3501      	adds	r5, #1
 800fd1e:	e7c6      	b.n	800fcae <_printf_common+0x3e>
 800fd20:	18e1      	adds	r1, r4, r3
 800fd22:	1c5a      	adds	r2, r3, #1
 800fd24:	2030      	movs	r0, #48	; 0x30
 800fd26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd2a:	4422      	add	r2, r4
 800fd2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd34:	3302      	adds	r3, #2
 800fd36:	e7c7      	b.n	800fcc8 <_printf_common+0x58>
 800fd38:	2301      	movs	r3, #1
 800fd3a:	4622      	mov	r2, r4
 800fd3c:	4649      	mov	r1, r9
 800fd3e:	4638      	mov	r0, r7
 800fd40:	47c0      	blx	r8
 800fd42:	3001      	adds	r0, #1
 800fd44:	d0e6      	beq.n	800fd14 <_printf_common+0xa4>
 800fd46:	3601      	adds	r6, #1
 800fd48:	e7d9      	b.n	800fcfe <_printf_common+0x8e>
	...

0800fd4c <_printf_i>:
 800fd4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd50:	460c      	mov	r4, r1
 800fd52:	4691      	mov	r9, r2
 800fd54:	7e27      	ldrb	r7, [r4, #24]
 800fd56:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fd58:	2f78      	cmp	r7, #120	; 0x78
 800fd5a:	4680      	mov	r8, r0
 800fd5c:	469a      	mov	sl, r3
 800fd5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd62:	d807      	bhi.n	800fd74 <_printf_i+0x28>
 800fd64:	2f62      	cmp	r7, #98	; 0x62
 800fd66:	d80a      	bhi.n	800fd7e <_printf_i+0x32>
 800fd68:	2f00      	cmp	r7, #0
 800fd6a:	f000 80d8 	beq.w	800ff1e <_printf_i+0x1d2>
 800fd6e:	2f58      	cmp	r7, #88	; 0x58
 800fd70:	f000 80a3 	beq.w	800feba <_printf_i+0x16e>
 800fd74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fd78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fd7c:	e03a      	b.n	800fdf4 <_printf_i+0xa8>
 800fd7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fd82:	2b15      	cmp	r3, #21
 800fd84:	d8f6      	bhi.n	800fd74 <_printf_i+0x28>
 800fd86:	a001      	add	r0, pc, #4	; (adr r0, 800fd8c <_printf_i+0x40>)
 800fd88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fd8c:	0800fde5 	.word	0x0800fde5
 800fd90:	0800fdf9 	.word	0x0800fdf9
 800fd94:	0800fd75 	.word	0x0800fd75
 800fd98:	0800fd75 	.word	0x0800fd75
 800fd9c:	0800fd75 	.word	0x0800fd75
 800fda0:	0800fd75 	.word	0x0800fd75
 800fda4:	0800fdf9 	.word	0x0800fdf9
 800fda8:	0800fd75 	.word	0x0800fd75
 800fdac:	0800fd75 	.word	0x0800fd75
 800fdb0:	0800fd75 	.word	0x0800fd75
 800fdb4:	0800fd75 	.word	0x0800fd75
 800fdb8:	0800ff05 	.word	0x0800ff05
 800fdbc:	0800fe29 	.word	0x0800fe29
 800fdc0:	0800fee7 	.word	0x0800fee7
 800fdc4:	0800fd75 	.word	0x0800fd75
 800fdc8:	0800fd75 	.word	0x0800fd75
 800fdcc:	0800ff27 	.word	0x0800ff27
 800fdd0:	0800fd75 	.word	0x0800fd75
 800fdd4:	0800fe29 	.word	0x0800fe29
 800fdd8:	0800fd75 	.word	0x0800fd75
 800fddc:	0800fd75 	.word	0x0800fd75
 800fde0:	0800feef 	.word	0x0800feef
 800fde4:	680b      	ldr	r3, [r1, #0]
 800fde6:	1d1a      	adds	r2, r3, #4
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	600a      	str	r2, [r1, #0]
 800fdec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fdf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	e0a3      	b.n	800ff40 <_printf_i+0x1f4>
 800fdf8:	6825      	ldr	r5, [r4, #0]
 800fdfa:	6808      	ldr	r0, [r1, #0]
 800fdfc:	062e      	lsls	r6, r5, #24
 800fdfe:	f100 0304 	add.w	r3, r0, #4
 800fe02:	d50a      	bpl.n	800fe1a <_printf_i+0xce>
 800fe04:	6805      	ldr	r5, [r0, #0]
 800fe06:	600b      	str	r3, [r1, #0]
 800fe08:	2d00      	cmp	r5, #0
 800fe0a:	da03      	bge.n	800fe14 <_printf_i+0xc8>
 800fe0c:	232d      	movs	r3, #45	; 0x2d
 800fe0e:	426d      	negs	r5, r5
 800fe10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe14:	485e      	ldr	r0, [pc, #376]	; (800ff90 <_printf_i+0x244>)
 800fe16:	230a      	movs	r3, #10
 800fe18:	e019      	b.n	800fe4e <_printf_i+0x102>
 800fe1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fe1e:	6805      	ldr	r5, [r0, #0]
 800fe20:	600b      	str	r3, [r1, #0]
 800fe22:	bf18      	it	ne
 800fe24:	b22d      	sxthne	r5, r5
 800fe26:	e7ef      	b.n	800fe08 <_printf_i+0xbc>
 800fe28:	680b      	ldr	r3, [r1, #0]
 800fe2a:	6825      	ldr	r5, [r4, #0]
 800fe2c:	1d18      	adds	r0, r3, #4
 800fe2e:	6008      	str	r0, [r1, #0]
 800fe30:	0628      	lsls	r0, r5, #24
 800fe32:	d501      	bpl.n	800fe38 <_printf_i+0xec>
 800fe34:	681d      	ldr	r5, [r3, #0]
 800fe36:	e002      	b.n	800fe3e <_printf_i+0xf2>
 800fe38:	0669      	lsls	r1, r5, #25
 800fe3a:	d5fb      	bpl.n	800fe34 <_printf_i+0xe8>
 800fe3c:	881d      	ldrh	r5, [r3, #0]
 800fe3e:	4854      	ldr	r0, [pc, #336]	; (800ff90 <_printf_i+0x244>)
 800fe40:	2f6f      	cmp	r7, #111	; 0x6f
 800fe42:	bf0c      	ite	eq
 800fe44:	2308      	moveq	r3, #8
 800fe46:	230a      	movne	r3, #10
 800fe48:	2100      	movs	r1, #0
 800fe4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe4e:	6866      	ldr	r6, [r4, #4]
 800fe50:	60a6      	str	r6, [r4, #8]
 800fe52:	2e00      	cmp	r6, #0
 800fe54:	bfa2      	ittt	ge
 800fe56:	6821      	ldrge	r1, [r4, #0]
 800fe58:	f021 0104 	bicge.w	r1, r1, #4
 800fe5c:	6021      	strge	r1, [r4, #0]
 800fe5e:	b90d      	cbnz	r5, 800fe64 <_printf_i+0x118>
 800fe60:	2e00      	cmp	r6, #0
 800fe62:	d04d      	beq.n	800ff00 <_printf_i+0x1b4>
 800fe64:	4616      	mov	r6, r2
 800fe66:	fbb5 f1f3 	udiv	r1, r5, r3
 800fe6a:	fb03 5711 	mls	r7, r3, r1, r5
 800fe6e:	5dc7      	ldrb	r7, [r0, r7]
 800fe70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fe74:	462f      	mov	r7, r5
 800fe76:	42bb      	cmp	r3, r7
 800fe78:	460d      	mov	r5, r1
 800fe7a:	d9f4      	bls.n	800fe66 <_printf_i+0x11a>
 800fe7c:	2b08      	cmp	r3, #8
 800fe7e:	d10b      	bne.n	800fe98 <_printf_i+0x14c>
 800fe80:	6823      	ldr	r3, [r4, #0]
 800fe82:	07df      	lsls	r7, r3, #31
 800fe84:	d508      	bpl.n	800fe98 <_printf_i+0x14c>
 800fe86:	6923      	ldr	r3, [r4, #16]
 800fe88:	6861      	ldr	r1, [r4, #4]
 800fe8a:	4299      	cmp	r1, r3
 800fe8c:	bfde      	ittt	le
 800fe8e:	2330      	movle	r3, #48	; 0x30
 800fe90:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fe94:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fe98:	1b92      	subs	r2, r2, r6
 800fe9a:	6122      	str	r2, [r4, #16]
 800fe9c:	f8cd a000 	str.w	sl, [sp]
 800fea0:	464b      	mov	r3, r9
 800fea2:	aa03      	add	r2, sp, #12
 800fea4:	4621      	mov	r1, r4
 800fea6:	4640      	mov	r0, r8
 800fea8:	f7ff fee2 	bl	800fc70 <_printf_common>
 800feac:	3001      	adds	r0, #1
 800feae:	d14c      	bne.n	800ff4a <_printf_i+0x1fe>
 800feb0:	f04f 30ff 	mov.w	r0, #4294967295
 800feb4:	b004      	add	sp, #16
 800feb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feba:	4835      	ldr	r0, [pc, #212]	; (800ff90 <_printf_i+0x244>)
 800febc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fec0:	6823      	ldr	r3, [r4, #0]
 800fec2:	680e      	ldr	r6, [r1, #0]
 800fec4:	061f      	lsls	r7, r3, #24
 800fec6:	f856 5b04 	ldr.w	r5, [r6], #4
 800feca:	600e      	str	r6, [r1, #0]
 800fecc:	d514      	bpl.n	800fef8 <_printf_i+0x1ac>
 800fece:	07d9      	lsls	r1, r3, #31
 800fed0:	bf44      	itt	mi
 800fed2:	f043 0320 	orrmi.w	r3, r3, #32
 800fed6:	6023      	strmi	r3, [r4, #0]
 800fed8:	b91d      	cbnz	r5, 800fee2 <_printf_i+0x196>
 800feda:	6823      	ldr	r3, [r4, #0]
 800fedc:	f023 0320 	bic.w	r3, r3, #32
 800fee0:	6023      	str	r3, [r4, #0]
 800fee2:	2310      	movs	r3, #16
 800fee4:	e7b0      	b.n	800fe48 <_printf_i+0xfc>
 800fee6:	6823      	ldr	r3, [r4, #0]
 800fee8:	f043 0320 	orr.w	r3, r3, #32
 800feec:	6023      	str	r3, [r4, #0]
 800feee:	2378      	movs	r3, #120	; 0x78
 800fef0:	4828      	ldr	r0, [pc, #160]	; (800ff94 <_printf_i+0x248>)
 800fef2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fef6:	e7e3      	b.n	800fec0 <_printf_i+0x174>
 800fef8:	065e      	lsls	r6, r3, #25
 800fefa:	bf48      	it	mi
 800fefc:	b2ad      	uxthmi	r5, r5
 800fefe:	e7e6      	b.n	800fece <_printf_i+0x182>
 800ff00:	4616      	mov	r6, r2
 800ff02:	e7bb      	b.n	800fe7c <_printf_i+0x130>
 800ff04:	680b      	ldr	r3, [r1, #0]
 800ff06:	6826      	ldr	r6, [r4, #0]
 800ff08:	6960      	ldr	r0, [r4, #20]
 800ff0a:	1d1d      	adds	r5, r3, #4
 800ff0c:	600d      	str	r5, [r1, #0]
 800ff0e:	0635      	lsls	r5, r6, #24
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	d501      	bpl.n	800ff18 <_printf_i+0x1cc>
 800ff14:	6018      	str	r0, [r3, #0]
 800ff16:	e002      	b.n	800ff1e <_printf_i+0x1d2>
 800ff18:	0671      	lsls	r1, r6, #25
 800ff1a:	d5fb      	bpl.n	800ff14 <_printf_i+0x1c8>
 800ff1c:	8018      	strh	r0, [r3, #0]
 800ff1e:	2300      	movs	r3, #0
 800ff20:	6123      	str	r3, [r4, #16]
 800ff22:	4616      	mov	r6, r2
 800ff24:	e7ba      	b.n	800fe9c <_printf_i+0x150>
 800ff26:	680b      	ldr	r3, [r1, #0]
 800ff28:	1d1a      	adds	r2, r3, #4
 800ff2a:	600a      	str	r2, [r1, #0]
 800ff2c:	681e      	ldr	r6, [r3, #0]
 800ff2e:	6862      	ldr	r2, [r4, #4]
 800ff30:	2100      	movs	r1, #0
 800ff32:	4630      	mov	r0, r6
 800ff34:	f7f0 f94c 	bl	80001d0 <memchr>
 800ff38:	b108      	cbz	r0, 800ff3e <_printf_i+0x1f2>
 800ff3a:	1b80      	subs	r0, r0, r6
 800ff3c:	6060      	str	r0, [r4, #4]
 800ff3e:	6863      	ldr	r3, [r4, #4]
 800ff40:	6123      	str	r3, [r4, #16]
 800ff42:	2300      	movs	r3, #0
 800ff44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff48:	e7a8      	b.n	800fe9c <_printf_i+0x150>
 800ff4a:	6923      	ldr	r3, [r4, #16]
 800ff4c:	4632      	mov	r2, r6
 800ff4e:	4649      	mov	r1, r9
 800ff50:	4640      	mov	r0, r8
 800ff52:	47d0      	blx	sl
 800ff54:	3001      	adds	r0, #1
 800ff56:	d0ab      	beq.n	800feb0 <_printf_i+0x164>
 800ff58:	6823      	ldr	r3, [r4, #0]
 800ff5a:	079b      	lsls	r3, r3, #30
 800ff5c:	d413      	bmi.n	800ff86 <_printf_i+0x23a>
 800ff5e:	68e0      	ldr	r0, [r4, #12]
 800ff60:	9b03      	ldr	r3, [sp, #12]
 800ff62:	4298      	cmp	r0, r3
 800ff64:	bfb8      	it	lt
 800ff66:	4618      	movlt	r0, r3
 800ff68:	e7a4      	b.n	800feb4 <_printf_i+0x168>
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	4632      	mov	r2, r6
 800ff6e:	4649      	mov	r1, r9
 800ff70:	4640      	mov	r0, r8
 800ff72:	47d0      	blx	sl
 800ff74:	3001      	adds	r0, #1
 800ff76:	d09b      	beq.n	800feb0 <_printf_i+0x164>
 800ff78:	3501      	adds	r5, #1
 800ff7a:	68e3      	ldr	r3, [r4, #12]
 800ff7c:	9903      	ldr	r1, [sp, #12]
 800ff7e:	1a5b      	subs	r3, r3, r1
 800ff80:	42ab      	cmp	r3, r5
 800ff82:	dcf2      	bgt.n	800ff6a <_printf_i+0x21e>
 800ff84:	e7eb      	b.n	800ff5e <_printf_i+0x212>
 800ff86:	2500      	movs	r5, #0
 800ff88:	f104 0619 	add.w	r6, r4, #25
 800ff8c:	e7f5      	b.n	800ff7a <_printf_i+0x22e>
 800ff8e:	bf00      	nop
 800ff90:	08010b9d 	.word	0x08010b9d
 800ff94:	08010bae 	.word	0x08010bae

0800ff98 <_putc_r>:
 800ff98:	b570      	push	{r4, r5, r6, lr}
 800ff9a:	460d      	mov	r5, r1
 800ff9c:	4614      	mov	r4, r2
 800ff9e:	4606      	mov	r6, r0
 800ffa0:	b118      	cbz	r0, 800ffaa <_putc_r+0x12>
 800ffa2:	6983      	ldr	r3, [r0, #24]
 800ffa4:	b90b      	cbnz	r3, 800ffaa <_putc_r+0x12>
 800ffa6:	f7ff fa9d 	bl	800f4e4 <__sinit>
 800ffaa:	4b1c      	ldr	r3, [pc, #112]	; (801001c <_putc_r+0x84>)
 800ffac:	429c      	cmp	r4, r3
 800ffae:	d124      	bne.n	800fffa <_putc_r+0x62>
 800ffb0:	6874      	ldr	r4, [r6, #4]
 800ffb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ffb4:	07d8      	lsls	r0, r3, #31
 800ffb6:	d405      	bmi.n	800ffc4 <_putc_r+0x2c>
 800ffb8:	89a3      	ldrh	r3, [r4, #12]
 800ffba:	0599      	lsls	r1, r3, #22
 800ffbc:	d402      	bmi.n	800ffc4 <_putc_r+0x2c>
 800ffbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffc0:	f7ff fb2e 	bl	800f620 <__retarget_lock_acquire_recursive>
 800ffc4:	68a3      	ldr	r3, [r4, #8]
 800ffc6:	3b01      	subs	r3, #1
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	60a3      	str	r3, [r4, #8]
 800ffcc:	da05      	bge.n	800ffda <_putc_r+0x42>
 800ffce:	69a2      	ldr	r2, [r4, #24]
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	db1c      	blt.n	801000e <_putc_r+0x76>
 800ffd4:	b2eb      	uxtb	r3, r5
 800ffd6:	2b0a      	cmp	r3, #10
 800ffd8:	d019      	beq.n	801000e <_putc_r+0x76>
 800ffda:	6823      	ldr	r3, [r4, #0]
 800ffdc:	1c5a      	adds	r2, r3, #1
 800ffde:	6022      	str	r2, [r4, #0]
 800ffe0:	701d      	strb	r5, [r3, #0]
 800ffe2:	b2ed      	uxtb	r5, r5
 800ffe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ffe6:	07da      	lsls	r2, r3, #31
 800ffe8:	d405      	bmi.n	800fff6 <_putc_r+0x5e>
 800ffea:	89a3      	ldrh	r3, [r4, #12]
 800ffec:	059b      	lsls	r3, r3, #22
 800ffee:	d402      	bmi.n	800fff6 <_putc_r+0x5e>
 800fff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fff2:	f7ff fb16 	bl	800f622 <__retarget_lock_release_recursive>
 800fff6:	4628      	mov	r0, r5
 800fff8:	bd70      	pop	{r4, r5, r6, pc}
 800fffa:	4b09      	ldr	r3, [pc, #36]	; (8010020 <_putc_r+0x88>)
 800fffc:	429c      	cmp	r4, r3
 800fffe:	d101      	bne.n	8010004 <_putc_r+0x6c>
 8010000:	68b4      	ldr	r4, [r6, #8]
 8010002:	e7d6      	b.n	800ffb2 <_putc_r+0x1a>
 8010004:	4b07      	ldr	r3, [pc, #28]	; (8010024 <_putc_r+0x8c>)
 8010006:	429c      	cmp	r4, r3
 8010008:	bf08      	it	eq
 801000a:	68f4      	ldreq	r4, [r6, #12]
 801000c:	e7d1      	b.n	800ffb2 <_putc_r+0x1a>
 801000e:	4629      	mov	r1, r5
 8010010:	4622      	mov	r2, r4
 8010012:	4630      	mov	r0, r6
 8010014:	f7ff f88c 	bl	800f130 <__swbuf_r>
 8010018:	4605      	mov	r5, r0
 801001a:	e7e3      	b.n	800ffe4 <_putc_r+0x4c>
 801001c:	08010b4c 	.word	0x08010b4c
 8010020:	08010b6c 	.word	0x08010b6c
 8010024:	08010b2c 	.word	0x08010b2c

08010028 <__sread>:
 8010028:	b510      	push	{r4, lr}
 801002a:	460c      	mov	r4, r1
 801002c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010030:	f000 f8d4 	bl	80101dc <_read_r>
 8010034:	2800      	cmp	r0, #0
 8010036:	bfab      	itete	ge
 8010038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801003a:	89a3      	ldrhlt	r3, [r4, #12]
 801003c:	181b      	addge	r3, r3, r0
 801003e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010042:	bfac      	ite	ge
 8010044:	6563      	strge	r3, [r4, #84]	; 0x54
 8010046:	81a3      	strhlt	r3, [r4, #12]
 8010048:	bd10      	pop	{r4, pc}

0801004a <__swrite>:
 801004a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801004e:	461f      	mov	r7, r3
 8010050:	898b      	ldrh	r3, [r1, #12]
 8010052:	05db      	lsls	r3, r3, #23
 8010054:	4605      	mov	r5, r0
 8010056:	460c      	mov	r4, r1
 8010058:	4616      	mov	r6, r2
 801005a:	d505      	bpl.n	8010068 <__swrite+0x1e>
 801005c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010060:	2302      	movs	r3, #2
 8010062:	2200      	movs	r2, #0
 8010064:	f000 f868 	bl	8010138 <_lseek_r>
 8010068:	89a3      	ldrh	r3, [r4, #12]
 801006a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801006e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010072:	81a3      	strh	r3, [r4, #12]
 8010074:	4632      	mov	r2, r6
 8010076:	463b      	mov	r3, r7
 8010078:	4628      	mov	r0, r5
 801007a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801007e:	f000 b817 	b.w	80100b0 <_write_r>

08010082 <__sseek>:
 8010082:	b510      	push	{r4, lr}
 8010084:	460c      	mov	r4, r1
 8010086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801008a:	f000 f855 	bl	8010138 <_lseek_r>
 801008e:	1c43      	adds	r3, r0, #1
 8010090:	89a3      	ldrh	r3, [r4, #12]
 8010092:	bf15      	itete	ne
 8010094:	6560      	strne	r0, [r4, #84]	; 0x54
 8010096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801009a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801009e:	81a3      	strheq	r3, [r4, #12]
 80100a0:	bf18      	it	ne
 80100a2:	81a3      	strhne	r3, [r4, #12]
 80100a4:	bd10      	pop	{r4, pc}

080100a6 <__sclose>:
 80100a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100aa:	f000 b813 	b.w	80100d4 <_close_r>
	...

080100b0 <_write_r>:
 80100b0:	b538      	push	{r3, r4, r5, lr}
 80100b2:	4d07      	ldr	r5, [pc, #28]	; (80100d0 <_write_r+0x20>)
 80100b4:	4604      	mov	r4, r0
 80100b6:	4608      	mov	r0, r1
 80100b8:	4611      	mov	r1, r2
 80100ba:	2200      	movs	r2, #0
 80100bc:	602a      	str	r2, [r5, #0]
 80100be:	461a      	mov	r2, r3
 80100c0:	f7f1 fc9d 	bl	80019fe <_write>
 80100c4:	1c43      	adds	r3, r0, #1
 80100c6:	d102      	bne.n	80100ce <_write_r+0x1e>
 80100c8:	682b      	ldr	r3, [r5, #0]
 80100ca:	b103      	cbz	r3, 80100ce <_write_r+0x1e>
 80100cc:	6023      	str	r3, [r4, #0]
 80100ce:	bd38      	pop	{r3, r4, r5, pc}
 80100d0:	20004a6c 	.word	0x20004a6c

080100d4 <_close_r>:
 80100d4:	b538      	push	{r3, r4, r5, lr}
 80100d6:	4d06      	ldr	r5, [pc, #24]	; (80100f0 <_close_r+0x1c>)
 80100d8:	2300      	movs	r3, #0
 80100da:	4604      	mov	r4, r0
 80100dc:	4608      	mov	r0, r1
 80100de:	602b      	str	r3, [r5, #0]
 80100e0:	f7f1 fca9 	bl	8001a36 <_close>
 80100e4:	1c43      	adds	r3, r0, #1
 80100e6:	d102      	bne.n	80100ee <_close_r+0x1a>
 80100e8:	682b      	ldr	r3, [r5, #0]
 80100ea:	b103      	cbz	r3, 80100ee <_close_r+0x1a>
 80100ec:	6023      	str	r3, [r4, #0]
 80100ee:	bd38      	pop	{r3, r4, r5, pc}
 80100f0:	20004a6c 	.word	0x20004a6c

080100f4 <_fstat_r>:
 80100f4:	b538      	push	{r3, r4, r5, lr}
 80100f6:	4d07      	ldr	r5, [pc, #28]	; (8010114 <_fstat_r+0x20>)
 80100f8:	2300      	movs	r3, #0
 80100fa:	4604      	mov	r4, r0
 80100fc:	4608      	mov	r0, r1
 80100fe:	4611      	mov	r1, r2
 8010100:	602b      	str	r3, [r5, #0]
 8010102:	f7f1 fca4 	bl	8001a4e <_fstat>
 8010106:	1c43      	adds	r3, r0, #1
 8010108:	d102      	bne.n	8010110 <_fstat_r+0x1c>
 801010a:	682b      	ldr	r3, [r5, #0]
 801010c:	b103      	cbz	r3, 8010110 <_fstat_r+0x1c>
 801010e:	6023      	str	r3, [r4, #0]
 8010110:	bd38      	pop	{r3, r4, r5, pc}
 8010112:	bf00      	nop
 8010114:	20004a6c 	.word	0x20004a6c

08010118 <_isatty_r>:
 8010118:	b538      	push	{r3, r4, r5, lr}
 801011a:	4d06      	ldr	r5, [pc, #24]	; (8010134 <_isatty_r+0x1c>)
 801011c:	2300      	movs	r3, #0
 801011e:	4604      	mov	r4, r0
 8010120:	4608      	mov	r0, r1
 8010122:	602b      	str	r3, [r5, #0]
 8010124:	f7f1 fca3 	bl	8001a6e <_isatty>
 8010128:	1c43      	adds	r3, r0, #1
 801012a:	d102      	bne.n	8010132 <_isatty_r+0x1a>
 801012c:	682b      	ldr	r3, [r5, #0]
 801012e:	b103      	cbz	r3, 8010132 <_isatty_r+0x1a>
 8010130:	6023      	str	r3, [r4, #0]
 8010132:	bd38      	pop	{r3, r4, r5, pc}
 8010134:	20004a6c 	.word	0x20004a6c

08010138 <_lseek_r>:
 8010138:	b538      	push	{r3, r4, r5, lr}
 801013a:	4d07      	ldr	r5, [pc, #28]	; (8010158 <_lseek_r+0x20>)
 801013c:	4604      	mov	r4, r0
 801013e:	4608      	mov	r0, r1
 8010140:	4611      	mov	r1, r2
 8010142:	2200      	movs	r2, #0
 8010144:	602a      	str	r2, [r5, #0]
 8010146:	461a      	mov	r2, r3
 8010148:	f7f1 fc9c 	bl	8001a84 <_lseek>
 801014c:	1c43      	adds	r3, r0, #1
 801014e:	d102      	bne.n	8010156 <_lseek_r+0x1e>
 8010150:	682b      	ldr	r3, [r5, #0]
 8010152:	b103      	cbz	r3, 8010156 <_lseek_r+0x1e>
 8010154:	6023      	str	r3, [r4, #0]
 8010156:	bd38      	pop	{r3, r4, r5, pc}
 8010158:	20004a6c 	.word	0x20004a6c

0801015c <memmove>:
 801015c:	4288      	cmp	r0, r1
 801015e:	b510      	push	{r4, lr}
 8010160:	eb01 0402 	add.w	r4, r1, r2
 8010164:	d902      	bls.n	801016c <memmove+0x10>
 8010166:	4284      	cmp	r4, r0
 8010168:	4623      	mov	r3, r4
 801016a:	d807      	bhi.n	801017c <memmove+0x20>
 801016c:	1e43      	subs	r3, r0, #1
 801016e:	42a1      	cmp	r1, r4
 8010170:	d008      	beq.n	8010184 <memmove+0x28>
 8010172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010176:	f803 2f01 	strb.w	r2, [r3, #1]!
 801017a:	e7f8      	b.n	801016e <memmove+0x12>
 801017c:	4402      	add	r2, r0
 801017e:	4601      	mov	r1, r0
 8010180:	428a      	cmp	r2, r1
 8010182:	d100      	bne.n	8010186 <memmove+0x2a>
 8010184:	bd10      	pop	{r4, pc}
 8010186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801018a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801018e:	e7f7      	b.n	8010180 <memmove+0x24>

08010190 <_realloc_r>:
 8010190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010192:	4607      	mov	r7, r0
 8010194:	4614      	mov	r4, r2
 8010196:	460e      	mov	r6, r1
 8010198:	b921      	cbnz	r1, 80101a4 <_realloc_r+0x14>
 801019a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801019e:	4611      	mov	r1, r2
 80101a0:	f7fe be98 	b.w	800eed4 <_malloc_r>
 80101a4:	b922      	cbnz	r2, 80101b0 <_realloc_r+0x20>
 80101a6:	f7fe fe45 	bl	800ee34 <_free_r>
 80101aa:	4625      	mov	r5, r4
 80101ac:	4628      	mov	r0, r5
 80101ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101b0:	f000 f826 	bl	8010200 <_malloc_usable_size_r>
 80101b4:	42a0      	cmp	r0, r4
 80101b6:	d20f      	bcs.n	80101d8 <_realloc_r+0x48>
 80101b8:	4621      	mov	r1, r4
 80101ba:	4638      	mov	r0, r7
 80101bc:	f7fe fe8a 	bl	800eed4 <_malloc_r>
 80101c0:	4605      	mov	r5, r0
 80101c2:	2800      	cmp	r0, #0
 80101c4:	d0f2      	beq.n	80101ac <_realloc_r+0x1c>
 80101c6:	4631      	mov	r1, r6
 80101c8:	4622      	mov	r2, r4
 80101ca:	f7fe fe1d 	bl	800ee08 <memcpy>
 80101ce:	4631      	mov	r1, r6
 80101d0:	4638      	mov	r0, r7
 80101d2:	f7fe fe2f 	bl	800ee34 <_free_r>
 80101d6:	e7e9      	b.n	80101ac <_realloc_r+0x1c>
 80101d8:	4635      	mov	r5, r6
 80101da:	e7e7      	b.n	80101ac <_realloc_r+0x1c>

080101dc <_read_r>:
 80101dc:	b538      	push	{r3, r4, r5, lr}
 80101de:	4d07      	ldr	r5, [pc, #28]	; (80101fc <_read_r+0x20>)
 80101e0:	4604      	mov	r4, r0
 80101e2:	4608      	mov	r0, r1
 80101e4:	4611      	mov	r1, r2
 80101e6:	2200      	movs	r2, #0
 80101e8:	602a      	str	r2, [r5, #0]
 80101ea:	461a      	mov	r2, r3
 80101ec:	f7f1 fbea 	bl	80019c4 <_read>
 80101f0:	1c43      	adds	r3, r0, #1
 80101f2:	d102      	bne.n	80101fa <_read_r+0x1e>
 80101f4:	682b      	ldr	r3, [r5, #0]
 80101f6:	b103      	cbz	r3, 80101fa <_read_r+0x1e>
 80101f8:	6023      	str	r3, [r4, #0]
 80101fa:	bd38      	pop	{r3, r4, r5, pc}
 80101fc:	20004a6c 	.word	0x20004a6c

08010200 <_malloc_usable_size_r>:
 8010200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010204:	1f18      	subs	r0, r3, #4
 8010206:	2b00      	cmp	r3, #0
 8010208:	bfbc      	itt	lt
 801020a:	580b      	ldrlt	r3, [r1, r0]
 801020c:	18c0      	addlt	r0, r0, r3
 801020e:	4770      	bx	lr

08010210 <_init>:
 8010210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010212:	bf00      	nop
 8010214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010216:	bc08      	pop	{r3}
 8010218:	469e      	mov	lr, r3
 801021a:	4770      	bx	lr

0801021c <_fini>:
 801021c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801021e:	bf00      	nop
 8010220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010222:	bc08      	pop	{r3}
 8010224:	469e      	mov	lr, r3
 8010226:	4770      	bx	lr
